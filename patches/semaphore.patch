diff --exclude=.git --exclude=.github -rupN xv6-riscv/.gitignore os-workshop/.gitignore
--- xv6-riscv/.gitignore	2022-05-28 22:43:35.000000000 -0300
+++ os-workshop/.gitignore	2022-05-28 21:31:32.000000000 -0300
@@ -15,3 +15,4 @@ mkfs
 kernel/kernel
 user/usys.S
 .gdbinit
+.vscode
diff --exclude=.git --exclude=.github -rupN xv6-riscv/Makefile os-workshop/Makefile
--- xv6-riscv/Makefile	2022-05-28 22:43:35.000000000 -0300
+++ os-workshop/Makefile	2022-05-28 21:31:32.000000000 -0300
@@ -12,12 +12,14 @@ OBJS = \
   $K/string.o \
   $K/main.o \
   $K/vm.o \
+  $K/sem.o \
   $K/proc.o \
   $K/swtch.o \
   $K/trampoline.o \
   $K/trap.o \
   $K/syscall.o \
   $K/sysproc.o \
+  $K/syssem.o \
   $K/bio.o \
   $K/fs.o \
   $K/log.o \
@@ -28,7 +30,7 @@ OBJS = \
   $K/sysfile.o \
   $K/kernelvec.o \
   $K/plic.o \
-  $K/virtio_disk.o
+  $K/virtio_disk.o 
 
 # riscv64-unknown-elf- or riscv64-linux-gnu-
 # perhaps in /opt/riscv/bin
@@ -116,6 +118,11 @@ mkfs/mkfs: mkfs/mkfs.c $K/fs.h $K/param.
 .PRECIOUS: %.o
 
 UPROGS=\
+	$U/_topprior\
+	$U/_midprior\
+	$U/_bottomprior\
+	$U/_helloworld\
+	$U/_infloop\
 	$U/_cat\
 	$U/_echo\
 	$U/_forktest\
@@ -132,6 +139,9 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_cons\
+	$U/_prod\
+	$U/_badtest\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +163,7 @@ QEMUGDB = $(shell if $(QEMU) -help | gre
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 2
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
Binary files xv6-riscv/fs.img and os-workshop/fs.img differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/bio.d os-workshop/kernel/bio.d
--- xv6-riscv/kernel/bio.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/kernel/bio.d	2022-05-28 22:34:26.000000000 -0300
@@ -0,0 +1,3 @@
+kernel/bio.o: kernel/bio.c kernel/types.h kernel/param.h \
+ kernel/spinlock.h kernel/sleeplock.h kernel/riscv.h kernel/defs.h \
+ kernel/fs.h kernel/buf.h
Binary files xv6-riscv/kernel/bio.o and os-workshop/kernel/bio.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/console.d os-workshop/kernel/console.d
--- xv6-riscv/kernel/console.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/kernel/console.d	2022-05-28 22:34:23.000000000 -0300
@@ -0,0 +1,5 @@
+kernel/console.o: kernel/console.c \
+ /usr/local/Cellar/riscv-gnu-toolchain/main/lib/gcc/riscv64-unknown-elf/11.1.0/include/stdarg.h \
+ kernel/types.h kernel/param.h kernel/spinlock.h kernel/sleeplock.h \
+ kernel/fs.h kernel/file.h kernel/memlayout.h kernel/riscv.h \
+ kernel/defs.h kernel/proc.h
Binary files xv6-riscv/kernel/console.o and os-workshop/kernel/console.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/defs.h os-workshop/kernel/defs.h
--- xv6-riscv/kernel/defs.h	2022-05-28 22:43:35.000000000 -0300
+++ os-workshop/kernel/defs.h	2022-05-28 21:31:32.000000000 -0300
@@ -104,6 +104,7 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             get_sid(void);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -182,5 +183,13 @@ void            virtio_disk_init(void);
 void            virtio_disk_rw(struct buf *, int);
 void            virtio_disk_intr(void);
 
+// sem.c
+void            seminit(void);
+int             semclose(int );
+int             semget(int,int );
+int             semdown(int);
+int             semup(int);
+struct sem*     semdup(struct sem*);
+
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
Binary files xv6-riscv/kernel/entry.o and os-workshop/kernel/entry.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/exec.d os-workshop/kernel/exec.d
--- xv6-riscv/kernel/exec.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/kernel/exec.d	2022-05-28 22:34:28.000000000 -0300
@@ -0,0 +1,3 @@
+kernel/exec.o: kernel/exec.c kernel/types.h kernel/param.h \
+ kernel/memlayout.h kernel/riscv.h kernel/spinlock.h kernel/proc.h \
+ kernel/defs.h kernel/elf.h
Binary files xv6-riscv/kernel/exec.o and os-workshop/kernel/exec.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/file.d os-workshop/kernel/file.d
--- xv6-riscv/kernel/file.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/kernel/file.d	2022-05-28 22:34:27.000000000 -0300
@@ -0,0 +1,3 @@
+kernel/file.o: kernel/file.c kernel/types.h kernel/riscv.h kernel/defs.h \
+ kernel/param.h kernel/fs.h kernel/spinlock.h kernel/sleeplock.h \
+ kernel/file.h kernel/stat.h kernel/proc.h
Binary files xv6-riscv/kernel/file.o and os-workshop/kernel/file.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/fs.d os-workshop/kernel/fs.d
--- xv6-riscv/kernel/fs.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/kernel/fs.d	2022-05-28 22:34:27.000000000 -0300
@@ -0,0 +1,3 @@
+kernel/fs.o: kernel/fs.c kernel/types.h kernel/riscv.h kernel/defs.h \
+ kernel/param.h kernel/stat.h kernel/spinlock.h kernel/proc.h \
+ kernel/sleeplock.h kernel/fs.h kernel/buf.h kernel/file.h
Binary files xv6-riscv/kernel/fs.o and os-workshop/kernel/fs.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/kalloc.d os-workshop/kernel/kalloc.d
--- xv6-riscv/kernel/kalloc.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/kernel/kalloc.d	2022-05-28 22:34:24.000000000 -0300
@@ -0,0 +1,2 @@
+kernel/kalloc.o: kernel/kalloc.c kernel/types.h kernel/param.h \
+ kernel/memlayout.h kernel/spinlock.h kernel/riscv.h kernel/defs.h
Binary files xv6-riscv/kernel/kalloc.o and os-workshop/kernel/kalloc.o differ
Binary files xv6-riscv/kernel/kernel and os-workshop/kernel/kernel differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/kernel.asm os-workshop/kernel/kernel.asm
--- xv6-riscv/kernel/kernel.asm	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/kernel/kernel.asm	2022-05-28 22:34:29.000000000 -0300
@@ -0,0 +1,13785 @@
+
+kernel/kernel:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000080000000 <_entry>:
+    80000000:	00009117          	auipc	sp,0x9
+    80000004:	18010113          	addi	sp,sp,384 # 80009180 <stack0>
+    80000008:	6505                	lui	a0,0x1
+    8000000a:	f14025f3          	csrr	a1,mhartid
+    8000000e:	0585                	addi	a1,a1,1
+    80000010:	02b50533          	mul	a0,a0,a1
+    80000014:	912a                	add	sp,sp,a0
+    80000016:	076000ef          	jal	ra,8000008c <start>
+
+000000008000001a <spin>:
+    8000001a:	a001                	j	8000001a <spin>
+
+000000008000001c <timerinit>:
+// which arrive at timervec in kernelvec.S,
+// which turns them into software interrupts for
+// devintr() in trap.c.
+void
+timerinit()
+{
+    8000001c:	1141                	addi	sp,sp,-16
+    8000001e:	e422                	sd	s0,8(sp)
+    80000020:	0800                	addi	s0,sp,16
+// which hart (core) is this?
+static inline uint64
+r_mhartid()
+{
+  uint64 x;
+  asm volatile("csrr %0, mhartid" : "=r" (x) );
+    80000022:	f14027f3          	csrr	a5,mhartid
+  // each CPU has a separate source of timer interrupts.
+  int id = r_mhartid();
+    80000026:	0007859b          	sext.w	a1,a5
+
+  // ask the CLINT for a timer interrupt.
+  int interval = 1000000; // cycles; about 1/10th second in qemu.
+  *(uint64*)CLINT_MTIMECMP(id) = *(uint64*)CLINT_MTIME + interval;
+    8000002a:	0037979b          	slliw	a5,a5,0x3
+    8000002e:	02004737          	lui	a4,0x2004
+    80000032:	97ba                	add	a5,a5,a4
+    80000034:	0200c737          	lui	a4,0x200c
+    80000038:	ff873703          	ld	a4,-8(a4) # 200bff8 <_entry-0x7dff4008>
+    8000003c:	000f4637          	lui	a2,0xf4
+    80000040:	24060613          	addi	a2,a2,576 # f4240 <_entry-0x7ff0bdc0>
+    80000044:	9732                	add	a4,a4,a2
+    80000046:	e398                	sd	a4,0(a5)
+
+  // prepare information in scratch[] for timervec.
+  // scratch[0..2] : space for timervec to save registers.
+  // scratch[3] : address of CLINT MTIMECMP register.
+  // scratch[4] : desired interval (in cycles) between timer interrupts.
+  uint64 *scratch = &timer_scratch[id][0];
+    80000048:	00259693          	slli	a3,a1,0x2
+    8000004c:	96ae                	add	a3,a3,a1
+    8000004e:	068e                	slli	a3,a3,0x3
+    80000050:	00009717          	auipc	a4,0x9
+    80000054:	ff070713          	addi	a4,a4,-16 # 80009040 <timer_scratch>
+    80000058:	9736                	add	a4,a4,a3
+  scratch[3] = CLINT_MTIMECMP(id);
+    8000005a:	ef1c                	sd	a5,24(a4)
+  scratch[4] = interval;
+    8000005c:	f310                	sd	a2,32(a4)
+}
+
+static inline void 
+w_mscratch(uint64 x)
+{
+  asm volatile("csrw mscratch, %0" : : "r" (x));
+    8000005e:	34071073          	csrw	mscratch,a4
+  asm volatile("csrw mtvec, %0" : : "r" (x));
+    80000062:	00006797          	auipc	a5,0x6
+    80000066:	20e78793          	addi	a5,a5,526 # 80006270 <timervec>
+    8000006a:	30579073          	csrw	mtvec,a5
+  asm volatile("csrr %0, mstatus" : "=r" (x) );
+    8000006e:	300027f3          	csrr	a5,mstatus
+
+  // set the machine-mode trap handler.
+  w_mtvec((uint64)timervec);
+
+  // enable machine-mode interrupts.
+  w_mstatus(r_mstatus() | MSTATUS_MIE);
+    80000072:	0087e793          	ori	a5,a5,8
+  asm volatile("csrw mstatus, %0" : : "r" (x));
+    80000076:	30079073          	csrw	mstatus,a5
+  asm volatile("csrr %0, mie" : "=r" (x) );
+    8000007a:	304027f3          	csrr	a5,mie
+
+  // enable machine-mode timer interrupts.
+  w_mie(r_mie() | MIE_MTIE);
+    8000007e:	0807e793          	ori	a5,a5,128
+  asm volatile("csrw mie, %0" : : "r" (x));
+    80000082:	30479073          	csrw	mie,a5
+}
+    80000086:	6422                	ld	s0,8(sp)
+    80000088:	0141                	addi	sp,sp,16
+    8000008a:	8082                	ret
+
+000000008000008c <start>:
+{
+    8000008c:	1141                	addi	sp,sp,-16
+    8000008e:	e406                	sd	ra,8(sp)
+    80000090:	e022                	sd	s0,0(sp)
+    80000092:	0800                	addi	s0,sp,16
+  asm volatile("csrr %0, mstatus" : "=r" (x) );
+    80000094:	300027f3          	csrr	a5,mstatus
+  x &= ~MSTATUS_MPP_MASK;
+    80000098:	7779                	lui	a4,0xffffe
+    8000009a:	7ff70713          	addi	a4,a4,2047 # ffffffffffffe7ff <end+0xffffffff7ffd57ff>
+    8000009e:	8ff9                	and	a5,a5,a4
+  x |= MSTATUS_MPP_S;
+    800000a0:	6705                	lui	a4,0x1
+    800000a2:	80070713          	addi	a4,a4,-2048 # 800 <_entry-0x7ffff800>
+    800000a6:	8fd9                	or	a5,a5,a4
+  asm volatile("csrw mstatus, %0" : : "r" (x));
+    800000a8:	30079073          	csrw	mstatus,a5
+  asm volatile("csrw mepc, %0" : : "r" (x));
+    800000ac:	00001797          	auipc	a5,0x1
+    800000b0:	dc678793          	addi	a5,a5,-570 # 80000e72 <main>
+    800000b4:	34179073          	csrw	mepc,a5
+  asm volatile("csrw satp, %0" : : "r" (x));
+    800000b8:	4781                	li	a5,0
+    800000ba:	18079073          	csrw	satp,a5
+  asm volatile("csrw medeleg, %0" : : "r" (x));
+    800000be:	67c1                	lui	a5,0x10
+    800000c0:	17fd                	addi	a5,a5,-1 # ffff <_entry-0x7fff0001>
+    800000c2:	30279073          	csrw	medeleg,a5
+  asm volatile("csrw mideleg, %0" : : "r" (x));
+    800000c6:	30379073          	csrw	mideleg,a5
+  asm volatile("csrr %0, sie" : "=r" (x) );
+    800000ca:	104027f3          	csrr	a5,sie
+  w_sie(r_sie() | SIE_SEIE | SIE_STIE | SIE_SSIE);
+    800000ce:	2227e793          	ori	a5,a5,546
+  asm volatile("csrw sie, %0" : : "r" (x));
+    800000d2:	10479073          	csrw	sie,a5
+  asm volatile("csrw pmpaddr0, %0" : : "r" (x));
+    800000d6:	57fd                	li	a5,-1
+    800000d8:	83a9                	srli	a5,a5,0xa
+    800000da:	3b079073          	csrw	pmpaddr0,a5
+  asm volatile("csrw pmpcfg0, %0" : : "r" (x));
+    800000de:	47bd                	li	a5,15
+    800000e0:	3a079073          	csrw	pmpcfg0,a5
+  timerinit();
+    800000e4:	00000097          	auipc	ra,0x0
+    800000e8:	f38080e7          	jalr	-200(ra) # 8000001c <timerinit>
+  asm volatile("csrr %0, mhartid" : "=r" (x) );
+    800000ec:	f14027f3          	csrr	a5,mhartid
+  w_tp(id);
+    800000f0:	2781                	sext.w	a5,a5
+}
+
+static inline void 
+w_tp(uint64 x)
+{
+  asm volatile("mv tp, %0" : : "r" (x));
+    800000f2:	823e                	mv	tp,a5
+  asm volatile("mret");
+    800000f4:	30200073          	mret
+}
+    800000f8:	60a2                	ld	ra,8(sp)
+    800000fa:	6402                	ld	s0,0(sp)
+    800000fc:	0141                	addi	sp,sp,16
+    800000fe:	8082                	ret
+
+0000000080000100 <consolewrite>:
+//
+// user write()s to the console go here.
+//
+int
+consolewrite(int user_src, uint64 src, int n)
+{
+    80000100:	715d                	addi	sp,sp,-80
+    80000102:	e486                	sd	ra,72(sp)
+    80000104:	e0a2                	sd	s0,64(sp)
+    80000106:	fc26                	sd	s1,56(sp)
+    80000108:	f84a                	sd	s2,48(sp)
+    8000010a:	f44e                	sd	s3,40(sp)
+    8000010c:	f052                	sd	s4,32(sp)
+    8000010e:	ec56                	sd	s5,24(sp)
+    80000110:	0880                	addi	s0,sp,80
+  int i;
+
+  for(i = 0; i < n; i++){
+    80000112:	04c05763          	blez	a2,80000160 <consolewrite+0x60>
+    80000116:	8a2a                	mv	s4,a0
+    80000118:	84ae                	mv	s1,a1
+    8000011a:	89b2                	mv	s3,a2
+    8000011c:	4901                	li	s2,0
+    char c;
+    if(either_copyin(&c, user_src, src+i, 1) == -1)
+    8000011e:	5afd                	li	s5,-1
+    80000120:	4685                	li	a3,1
+    80000122:	8626                	mv	a2,s1
+    80000124:	85d2                	mv	a1,s4
+    80000126:	fbf40513          	addi	a0,s0,-65
+    8000012a:	00003097          	auipc	ra,0x3
+    8000012e:	8a0080e7          	jalr	-1888(ra) # 800029ca <either_copyin>
+    80000132:	01550d63          	beq	a0,s5,8000014c <consolewrite+0x4c>
+      break;
+    uartputc(c);
+    80000136:	fbf44503          	lbu	a0,-65(s0)
+    8000013a:	00000097          	auipc	ra,0x0
+    8000013e:	77e080e7          	jalr	1918(ra) # 800008b8 <uartputc>
+  for(i = 0; i < n; i++){
+    80000142:	2905                	addiw	s2,s2,1
+    80000144:	0485                	addi	s1,s1,1
+    80000146:	fd299de3          	bne	s3,s2,80000120 <consolewrite+0x20>
+    8000014a:	894e                	mv	s2,s3
+  }
+
+  return i;
+}
+    8000014c:	854a                	mv	a0,s2
+    8000014e:	60a6                	ld	ra,72(sp)
+    80000150:	6406                	ld	s0,64(sp)
+    80000152:	74e2                	ld	s1,56(sp)
+    80000154:	7942                	ld	s2,48(sp)
+    80000156:	79a2                	ld	s3,40(sp)
+    80000158:	7a02                	ld	s4,32(sp)
+    8000015a:	6ae2                	ld	s5,24(sp)
+    8000015c:	6161                	addi	sp,sp,80
+    8000015e:	8082                	ret
+  for(i = 0; i < n; i++){
+    80000160:	4901                	li	s2,0
+    80000162:	b7ed                	j	8000014c <consolewrite+0x4c>
+
+0000000080000164 <consoleread>:
+// user_dist indicates whether dst is a user
+// or kernel address.
+//
+int
+consoleread(int user_dst, uint64 dst, int n)
+{
+    80000164:	7159                	addi	sp,sp,-112
+    80000166:	f486                	sd	ra,104(sp)
+    80000168:	f0a2                	sd	s0,96(sp)
+    8000016a:	eca6                	sd	s1,88(sp)
+    8000016c:	e8ca                	sd	s2,80(sp)
+    8000016e:	e4ce                	sd	s3,72(sp)
+    80000170:	e0d2                	sd	s4,64(sp)
+    80000172:	fc56                	sd	s5,56(sp)
+    80000174:	f85a                	sd	s6,48(sp)
+    80000176:	f45e                	sd	s7,40(sp)
+    80000178:	f062                	sd	s8,32(sp)
+    8000017a:	ec66                	sd	s9,24(sp)
+    8000017c:	e86a                	sd	s10,16(sp)
+    8000017e:	1880                	addi	s0,sp,112
+    80000180:	8aaa                	mv	s5,a0
+    80000182:	8a2e                	mv	s4,a1
+    80000184:	89b2                	mv	s3,a2
+  uint target;
+  int c;
+  char cbuf;
+
+  target = n;
+    80000186:	00060b1b          	sext.w	s6,a2
+  acquire(&cons.lock);
+    8000018a:	00011517          	auipc	a0,0x11
+    8000018e:	ff650513          	addi	a0,a0,-10 # 80011180 <cons>
+    80000192:	00001097          	auipc	ra,0x1
+    80000196:	a3e080e7          	jalr	-1474(ra) # 80000bd0 <acquire>
+  while(n > 0){
+    // wait until interrupt handler has put some
+    // input into cons.buffer.
+    while(cons.r == cons.w){
+    8000019a:	00011497          	auipc	s1,0x11
+    8000019e:	fe648493          	addi	s1,s1,-26 # 80011180 <cons>
+      if(myproc()->killed){
+        release(&cons.lock);
+        return -1;
+      }
+      sleep(&cons.r, &cons.lock);
+    800001a2:	00011917          	auipc	s2,0x11
+    800001a6:	07690913          	addi	s2,s2,118 # 80011218 <cons+0x98>
+    }
+
+    c = cons.buf[cons.r++ % INPUT_BUF];
+
+    if(c == C('D')){  // end-of-file
+    800001aa:	4b91                	li	s7,4
+      break;
+    }
+
+    // copy the input byte to the user-space buffer.
+    cbuf = c;
+    if(either_copyout(user_dst, dst, &cbuf, 1) == -1)
+    800001ac:	5c7d                	li	s8,-1
+      break;
+
+    dst++;
+    --n;
+
+    if(c == '\n'){
+    800001ae:	4ca9                	li	s9,10
+  while(n > 0){
+    800001b0:	07305863          	blez	s3,80000220 <consoleread+0xbc>
+    while(cons.r == cons.w){
+    800001b4:	0984a783          	lw	a5,152(s1)
+    800001b8:	09c4a703          	lw	a4,156(s1)
+    800001bc:	02f71463          	bne	a4,a5,800001e4 <consoleread+0x80>
+      if(myproc()->killed){
+    800001c0:	00002097          	auipc	ra,0x2
+    800001c4:	bb6080e7          	jalr	-1098(ra) # 80001d76 <myproc>
+    800001c8:	551c                	lw	a5,40(a0)
+    800001ca:	e7b5                	bnez	a5,80000236 <consoleread+0xd2>
+      sleep(&cons.r, &cons.lock);
+    800001cc:	85a6                	mv	a1,s1
+    800001ce:	854a                	mv	a0,s2
+    800001d0:	00002097          	auipc	ra,0x2
+    800001d4:	3dc080e7          	jalr	988(ra) # 800025ac <sleep>
+    while(cons.r == cons.w){
+    800001d8:	0984a783          	lw	a5,152(s1)
+    800001dc:	09c4a703          	lw	a4,156(s1)
+    800001e0:	fef700e3          	beq	a4,a5,800001c0 <consoleread+0x5c>
+    c = cons.buf[cons.r++ % INPUT_BUF];
+    800001e4:	0017871b          	addiw	a4,a5,1
+    800001e8:	08e4ac23          	sw	a4,152(s1)
+    800001ec:	07f7f713          	andi	a4,a5,127
+    800001f0:	9726                	add	a4,a4,s1
+    800001f2:	01874703          	lbu	a4,24(a4)
+    800001f6:	00070d1b          	sext.w	s10,a4
+    if(c == C('D')){  // end-of-file
+    800001fa:	077d0563          	beq	s10,s7,80000264 <consoleread+0x100>
+    cbuf = c;
+    800001fe:	f8e40fa3          	sb	a4,-97(s0)
+    if(either_copyout(user_dst, dst, &cbuf, 1) == -1)
+    80000202:	4685                	li	a3,1
+    80000204:	f9f40613          	addi	a2,s0,-97
+    80000208:	85d2                	mv	a1,s4
+    8000020a:	8556                	mv	a0,s5
+    8000020c:	00002097          	auipc	ra,0x2
+    80000210:	768080e7          	jalr	1896(ra) # 80002974 <either_copyout>
+    80000214:	01850663          	beq	a0,s8,80000220 <consoleread+0xbc>
+    dst++;
+    80000218:	0a05                	addi	s4,s4,1
+    --n;
+    8000021a:	39fd                	addiw	s3,s3,-1
+    if(c == '\n'){
+    8000021c:	f99d1ae3          	bne	s10,s9,800001b0 <consoleread+0x4c>
+      // a whole line has arrived, return to
+      // the user-level read().
+      break;
+    }
+  }
+  release(&cons.lock);
+    80000220:	00011517          	auipc	a0,0x11
+    80000224:	f6050513          	addi	a0,a0,-160 # 80011180 <cons>
+    80000228:	00001097          	auipc	ra,0x1
+    8000022c:	a5c080e7          	jalr	-1444(ra) # 80000c84 <release>
+
+  return target - n;
+    80000230:	413b053b          	subw	a0,s6,s3
+    80000234:	a811                	j	80000248 <consoleread+0xe4>
+        release(&cons.lock);
+    80000236:	00011517          	auipc	a0,0x11
+    8000023a:	f4a50513          	addi	a0,a0,-182 # 80011180 <cons>
+    8000023e:	00001097          	auipc	ra,0x1
+    80000242:	a46080e7          	jalr	-1466(ra) # 80000c84 <release>
+        return -1;
+    80000246:	557d                	li	a0,-1
+}
+    80000248:	70a6                	ld	ra,104(sp)
+    8000024a:	7406                	ld	s0,96(sp)
+    8000024c:	64e6                	ld	s1,88(sp)
+    8000024e:	6946                	ld	s2,80(sp)
+    80000250:	69a6                	ld	s3,72(sp)
+    80000252:	6a06                	ld	s4,64(sp)
+    80000254:	7ae2                	ld	s5,56(sp)
+    80000256:	7b42                	ld	s6,48(sp)
+    80000258:	7ba2                	ld	s7,40(sp)
+    8000025a:	7c02                	ld	s8,32(sp)
+    8000025c:	6ce2                	ld	s9,24(sp)
+    8000025e:	6d42                	ld	s10,16(sp)
+    80000260:	6165                	addi	sp,sp,112
+    80000262:	8082                	ret
+      if(n < target){
+    80000264:	0009871b          	sext.w	a4,s3
+    80000268:	fb677ce3          	bgeu	a4,s6,80000220 <consoleread+0xbc>
+        cons.r--;
+    8000026c:	00011717          	auipc	a4,0x11
+    80000270:	faf72623          	sw	a5,-84(a4) # 80011218 <cons+0x98>
+    80000274:	b775                	j	80000220 <consoleread+0xbc>
+
+0000000080000276 <consputc>:
+{
+    80000276:	1141                	addi	sp,sp,-16
+    80000278:	e406                	sd	ra,8(sp)
+    8000027a:	e022                	sd	s0,0(sp)
+    8000027c:	0800                	addi	s0,sp,16
+  if(c == BACKSPACE){
+    8000027e:	10000793          	li	a5,256
+    80000282:	00f50a63          	beq	a0,a5,80000296 <consputc+0x20>
+    uartputc_sync(c);
+    80000286:	00000097          	auipc	ra,0x0
+    8000028a:	560080e7          	jalr	1376(ra) # 800007e6 <uartputc_sync>
+}
+    8000028e:	60a2                	ld	ra,8(sp)
+    80000290:	6402                	ld	s0,0(sp)
+    80000292:	0141                	addi	sp,sp,16
+    80000294:	8082                	ret
+    uartputc_sync('\b'); uartputc_sync(' '); uartputc_sync('\b');
+    80000296:	4521                	li	a0,8
+    80000298:	00000097          	auipc	ra,0x0
+    8000029c:	54e080e7          	jalr	1358(ra) # 800007e6 <uartputc_sync>
+    800002a0:	02000513          	li	a0,32
+    800002a4:	00000097          	auipc	ra,0x0
+    800002a8:	542080e7          	jalr	1346(ra) # 800007e6 <uartputc_sync>
+    800002ac:	4521                	li	a0,8
+    800002ae:	00000097          	auipc	ra,0x0
+    800002b2:	538080e7          	jalr	1336(ra) # 800007e6 <uartputc_sync>
+    800002b6:	bfe1                	j	8000028e <consputc+0x18>
+
+00000000800002b8 <consoleintr>:
+// do erase/kill processing, append to cons.buf,
+// wake up consoleread() if a whole line has arrived.
+//
+void
+consoleintr(int c)
+{
+    800002b8:	1101                	addi	sp,sp,-32
+    800002ba:	ec06                	sd	ra,24(sp)
+    800002bc:	e822                	sd	s0,16(sp)
+    800002be:	e426                	sd	s1,8(sp)
+    800002c0:	e04a                	sd	s2,0(sp)
+    800002c2:	1000                	addi	s0,sp,32
+    800002c4:	84aa                	mv	s1,a0
+  acquire(&cons.lock);
+    800002c6:	00011517          	auipc	a0,0x11
+    800002ca:	eba50513          	addi	a0,a0,-326 # 80011180 <cons>
+    800002ce:	00001097          	auipc	ra,0x1
+    800002d2:	902080e7          	jalr	-1790(ra) # 80000bd0 <acquire>
+
+  switch(c){
+    800002d6:	47d5                	li	a5,21
+    800002d8:	0af48663          	beq	s1,a5,80000384 <consoleintr+0xcc>
+    800002dc:	0297ca63          	blt	a5,s1,80000310 <consoleintr+0x58>
+    800002e0:	47a1                	li	a5,8
+    800002e2:	0ef48763          	beq	s1,a5,800003d0 <consoleintr+0x118>
+    800002e6:	47c1                	li	a5,16
+    800002e8:	10f49a63          	bne	s1,a5,800003fc <consoleintr+0x144>
+  case C('P'):  // Print process list.
+    procdump();
+    800002ec:	00002097          	auipc	ra,0x2
+    800002f0:	734080e7          	jalr	1844(ra) # 80002a20 <procdump>
+      }
+    }
+    break;
+  }
+  
+  release(&cons.lock);
+    800002f4:	00011517          	auipc	a0,0x11
+    800002f8:	e8c50513          	addi	a0,a0,-372 # 80011180 <cons>
+    800002fc:	00001097          	auipc	ra,0x1
+    80000300:	988080e7          	jalr	-1656(ra) # 80000c84 <release>
+}
+    80000304:	60e2                	ld	ra,24(sp)
+    80000306:	6442                	ld	s0,16(sp)
+    80000308:	64a2                	ld	s1,8(sp)
+    8000030a:	6902                	ld	s2,0(sp)
+    8000030c:	6105                	addi	sp,sp,32
+    8000030e:	8082                	ret
+  switch(c){
+    80000310:	07f00793          	li	a5,127
+    80000314:	0af48e63          	beq	s1,a5,800003d0 <consoleintr+0x118>
+    if(c != 0 && cons.e-cons.r < INPUT_BUF){
+    80000318:	00011717          	auipc	a4,0x11
+    8000031c:	e6870713          	addi	a4,a4,-408 # 80011180 <cons>
+    80000320:	0a072783          	lw	a5,160(a4)
+    80000324:	09872703          	lw	a4,152(a4)
+    80000328:	9f99                	subw	a5,a5,a4
+    8000032a:	07f00713          	li	a4,127
+    8000032e:	fcf763e3          	bltu	a4,a5,800002f4 <consoleintr+0x3c>
+      c = (c == '\r') ? '\n' : c;
+    80000332:	47b5                	li	a5,13
+    80000334:	0cf48763          	beq	s1,a5,80000402 <consoleintr+0x14a>
+      consputc(c);
+    80000338:	8526                	mv	a0,s1
+    8000033a:	00000097          	auipc	ra,0x0
+    8000033e:	f3c080e7          	jalr	-196(ra) # 80000276 <consputc>
+      cons.buf[cons.e++ % INPUT_BUF] = c;
+    80000342:	00011797          	auipc	a5,0x11
+    80000346:	e3e78793          	addi	a5,a5,-450 # 80011180 <cons>
+    8000034a:	0a07a703          	lw	a4,160(a5)
+    8000034e:	0017069b          	addiw	a3,a4,1
+    80000352:	0006861b          	sext.w	a2,a3
+    80000356:	0ad7a023          	sw	a3,160(a5)
+    8000035a:	07f77713          	andi	a4,a4,127
+    8000035e:	97ba                	add	a5,a5,a4
+    80000360:	00978c23          	sb	s1,24(a5)
+      if(c == '\n' || c == C('D') || cons.e == cons.r+INPUT_BUF){
+    80000364:	47a9                	li	a5,10
+    80000366:	0cf48563          	beq	s1,a5,80000430 <consoleintr+0x178>
+    8000036a:	4791                	li	a5,4
+    8000036c:	0cf48263          	beq	s1,a5,80000430 <consoleintr+0x178>
+    80000370:	00011797          	auipc	a5,0x11
+    80000374:	ea87a783          	lw	a5,-344(a5) # 80011218 <cons+0x98>
+    80000378:	0807879b          	addiw	a5,a5,128
+    8000037c:	f6f61ce3          	bne	a2,a5,800002f4 <consoleintr+0x3c>
+      cons.buf[cons.e++ % INPUT_BUF] = c;
+    80000380:	863e                	mv	a2,a5
+    80000382:	a07d                	j	80000430 <consoleintr+0x178>
+    while(cons.e != cons.w &&
+    80000384:	00011717          	auipc	a4,0x11
+    80000388:	dfc70713          	addi	a4,a4,-516 # 80011180 <cons>
+    8000038c:	0a072783          	lw	a5,160(a4)
+    80000390:	09c72703          	lw	a4,156(a4)
+          cons.buf[(cons.e-1) % INPUT_BUF] != '\n'){
+    80000394:	00011497          	auipc	s1,0x11
+    80000398:	dec48493          	addi	s1,s1,-532 # 80011180 <cons>
+    while(cons.e != cons.w &&
+    8000039c:	4929                	li	s2,10
+    8000039e:	f4f70be3          	beq	a4,a5,800002f4 <consoleintr+0x3c>
+          cons.buf[(cons.e-1) % INPUT_BUF] != '\n'){
+    800003a2:	37fd                	addiw	a5,a5,-1
+    800003a4:	07f7f713          	andi	a4,a5,127
+    800003a8:	9726                	add	a4,a4,s1
+    while(cons.e != cons.w &&
+    800003aa:	01874703          	lbu	a4,24(a4)
+    800003ae:	f52703e3          	beq	a4,s2,800002f4 <consoleintr+0x3c>
+      cons.e--;
+    800003b2:	0af4a023          	sw	a5,160(s1)
+      consputc(BACKSPACE);
+    800003b6:	10000513          	li	a0,256
+    800003ba:	00000097          	auipc	ra,0x0
+    800003be:	ebc080e7          	jalr	-324(ra) # 80000276 <consputc>
+    while(cons.e != cons.w &&
+    800003c2:	0a04a783          	lw	a5,160(s1)
+    800003c6:	09c4a703          	lw	a4,156(s1)
+    800003ca:	fcf71ce3          	bne	a4,a5,800003a2 <consoleintr+0xea>
+    800003ce:	b71d                	j	800002f4 <consoleintr+0x3c>
+    if(cons.e != cons.w){
+    800003d0:	00011717          	auipc	a4,0x11
+    800003d4:	db070713          	addi	a4,a4,-592 # 80011180 <cons>
+    800003d8:	0a072783          	lw	a5,160(a4)
+    800003dc:	09c72703          	lw	a4,156(a4)
+    800003e0:	f0f70ae3          	beq	a4,a5,800002f4 <consoleintr+0x3c>
+      cons.e--;
+    800003e4:	37fd                	addiw	a5,a5,-1
+    800003e6:	00011717          	auipc	a4,0x11
+    800003ea:	e2f72d23          	sw	a5,-454(a4) # 80011220 <cons+0xa0>
+      consputc(BACKSPACE);
+    800003ee:	10000513          	li	a0,256
+    800003f2:	00000097          	auipc	ra,0x0
+    800003f6:	e84080e7          	jalr	-380(ra) # 80000276 <consputc>
+    800003fa:	bded                	j	800002f4 <consoleintr+0x3c>
+    if(c != 0 && cons.e-cons.r < INPUT_BUF){
+    800003fc:	ee048ce3          	beqz	s1,800002f4 <consoleintr+0x3c>
+    80000400:	bf21                	j	80000318 <consoleintr+0x60>
+      consputc(c);
+    80000402:	4529                	li	a0,10
+    80000404:	00000097          	auipc	ra,0x0
+    80000408:	e72080e7          	jalr	-398(ra) # 80000276 <consputc>
+      cons.buf[cons.e++ % INPUT_BUF] = c;
+    8000040c:	00011797          	auipc	a5,0x11
+    80000410:	d7478793          	addi	a5,a5,-652 # 80011180 <cons>
+    80000414:	0a07a703          	lw	a4,160(a5)
+    80000418:	0017069b          	addiw	a3,a4,1
+    8000041c:	0006861b          	sext.w	a2,a3
+    80000420:	0ad7a023          	sw	a3,160(a5)
+    80000424:	07f77713          	andi	a4,a4,127
+    80000428:	97ba                	add	a5,a5,a4
+    8000042a:	4729                	li	a4,10
+    8000042c:	00e78c23          	sb	a4,24(a5)
+        cons.w = cons.e;
+    80000430:	00011797          	auipc	a5,0x11
+    80000434:	dec7a623          	sw	a2,-532(a5) # 8001121c <cons+0x9c>
+        wakeup(&cons.r);
+    80000438:	00011517          	auipc	a0,0x11
+    8000043c:	de050513          	addi	a0,a0,-544 # 80011218 <cons+0x98>
+    80000440:	00002097          	auipc	ra,0x2
+    80000444:	2f8080e7          	jalr	760(ra) # 80002738 <wakeup>
+    80000448:	b575                	j	800002f4 <consoleintr+0x3c>
+
+000000008000044a <consoleinit>:
+
+void
+consoleinit(void)
+{
+    8000044a:	1141                	addi	sp,sp,-16
+    8000044c:	e406                	sd	ra,8(sp)
+    8000044e:	e022                	sd	s0,0(sp)
+    80000450:	0800                	addi	s0,sp,16
+  initlock(&cons.lock, "cons");
+    80000452:	00008597          	auipc	a1,0x8
+    80000456:	bae58593          	addi	a1,a1,-1106 # 80008000 <etext>
+    8000045a:	00011517          	auipc	a0,0x11
+    8000045e:	d2650513          	addi	a0,a0,-730 # 80011180 <cons>
+    80000462:	00000097          	auipc	ra,0x0
+    80000466:	6de080e7          	jalr	1758(ra) # 80000b40 <initlock>
+
+  uartinit();
+    8000046a:	00000097          	auipc	ra,0x0
+    8000046e:	32c080e7          	jalr	812(ra) # 80000796 <uartinit>
+
+  // connect read and write system calls
+  // to consoleread and consolewrite.
+  devsw[CONSOLE].read = consoleread;
+    80000472:	00024797          	auipc	a5,0x24
+    80000476:	49e78793          	addi	a5,a5,1182 # 80024910 <devsw>
+    8000047a:	00000717          	auipc	a4,0x0
+    8000047e:	cea70713          	addi	a4,a4,-790 # 80000164 <consoleread>
+    80000482:	eb98                	sd	a4,16(a5)
+  devsw[CONSOLE].write = consolewrite;
+    80000484:	00000717          	auipc	a4,0x0
+    80000488:	c7c70713          	addi	a4,a4,-900 # 80000100 <consolewrite>
+    8000048c:	ef98                	sd	a4,24(a5)
+}
+    8000048e:	60a2                	ld	ra,8(sp)
+    80000490:	6402                	ld	s0,0(sp)
+    80000492:	0141                	addi	sp,sp,16
+    80000494:	8082                	ret
+
+0000000080000496 <printint>:
+
+static char digits[] = "0123456789abcdef";
+
+static void
+printint(int xx, int base, int sign)
+{
+    80000496:	7179                	addi	sp,sp,-48
+    80000498:	f406                	sd	ra,40(sp)
+    8000049a:	f022                	sd	s0,32(sp)
+    8000049c:	ec26                	sd	s1,24(sp)
+    8000049e:	e84a                	sd	s2,16(sp)
+    800004a0:	1800                	addi	s0,sp,48
+  char buf[16];
+  int i;
+  uint x;
+
+  if(sign && (sign = xx < 0))
+    800004a2:	c219                	beqz	a2,800004a8 <printint+0x12>
+    800004a4:	08054763          	bltz	a0,80000532 <printint+0x9c>
+    x = -xx;
+  else
+    x = xx;
+    800004a8:	2501                	sext.w	a0,a0
+    800004aa:	4881                	li	a7,0
+    800004ac:	fd040693          	addi	a3,s0,-48
+
+  i = 0;
+    800004b0:	4701                	li	a4,0
+  do {
+    buf[i++] = digits[x % base];
+    800004b2:	2581                	sext.w	a1,a1
+    800004b4:	00008617          	auipc	a2,0x8
+    800004b8:	b7c60613          	addi	a2,a2,-1156 # 80008030 <digits>
+    800004bc:	883a                	mv	a6,a4
+    800004be:	2705                	addiw	a4,a4,1
+    800004c0:	02b577bb          	remuw	a5,a0,a1
+    800004c4:	1782                	slli	a5,a5,0x20
+    800004c6:	9381                	srli	a5,a5,0x20
+    800004c8:	97b2                	add	a5,a5,a2
+    800004ca:	0007c783          	lbu	a5,0(a5)
+    800004ce:	00f68023          	sb	a5,0(a3)
+  } while((x /= base) != 0);
+    800004d2:	0005079b          	sext.w	a5,a0
+    800004d6:	02b5553b          	divuw	a0,a0,a1
+    800004da:	0685                	addi	a3,a3,1
+    800004dc:	feb7f0e3          	bgeu	a5,a1,800004bc <printint+0x26>
+
+  if(sign)
+    800004e0:	00088c63          	beqz	a7,800004f8 <printint+0x62>
+    buf[i++] = '-';
+    800004e4:	fe070793          	addi	a5,a4,-32
+    800004e8:	00878733          	add	a4,a5,s0
+    800004ec:	02d00793          	li	a5,45
+    800004f0:	fef70823          	sb	a5,-16(a4)
+    800004f4:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+    800004f8:	02e05763          	blez	a4,80000526 <printint+0x90>
+    800004fc:	fd040793          	addi	a5,s0,-48
+    80000500:	00e784b3          	add	s1,a5,a4
+    80000504:	fff78913          	addi	s2,a5,-1
+    80000508:	993a                	add	s2,s2,a4
+    8000050a:	377d                	addiw	a4,a4,-1
+    8000050c:	1702                	slli	a4,a4,0x20
+    8000050e:	9301                	srli	a4,a4,0x20
+    80000510:	40e90933          	sub	s2,s2,a4
+    consputc(buf[i]);
+    80000514:	fff4c503          	lbu	a0,-1(s1)
+    80000518:	00000097          	auipc	ra,0x0
+    8000051c:	d5e080e7          	jalr	-674(ra) # 80000276 <consputc>
+  while(--i >= 0)
+    80000520:	14fd                	addi	s1,s1,-1
+    80000522:	ff2499e3          	bne	s1,s2,80000514 <printint+0x7e>
+}
+    80000526:	70a2                	ld	ra,40(sp)
+    80000528:	7402                	ld	s0,32(sp)
+    8000052a:	64e2                	ld	s1,24(sp)
+    8000052c:	6942                	ld	s2,16(sp)
+    8000052e:	6145                	addi	sp,sp,48
+    80000530:	8082                	ret
+    x = -xx;
+    80000532:	40a0053b          	negw	a0,a0
+  if(sign && (sign = xx < 0))
+    80000536:	4885                	li	a7,1
+    x = -xx;
+    80000538:	bf95                	j	800004ac <printint+0x16>
+
+000000008000053a <panic>:
+    release(&pr.lock);
+}
+
+void
+panic(char *s)
+{
+    8000053a:	1101                	addi	sp,sp,-32
+    8000053c:	ec06                	sd	ra,24(sp)
+    8000053e:	e822                	sd	s0,16(sp)
+    80000540:	e426                	sd	s1,8(sp)
+    80000542:	1000                	addi	s0,sp,32
+    80000544:	84aa                	mv	s1,a0
+  pr.locking = 0;
+    80000546:	00011797          	auipc	a5,0x11
+    8000054a:	ce07ad23          	sw	zero,-774(a5) # 80011240 <pr+0x18>
+  printf("panic: ");
+    8000054e:	00008517          	auipc	a0,0x8
+    80000552:	aba50513          	addi	a0,a0,-1350 # 80008008 <etext+0x8>
+    80000556:	00000097          	auipc	ra,0x0
+    8000055a:	02e080e7          	jalr	46(ra) # 80000584 <printf>
+  printf(s);
+    8000055e:	8526                	mv	a0,s1
+    80000560:	00000097          	auipc	ra,0x0
+    80000564:	024080e7          	jalr	36(ra) # 80000584 <printf>
+  printf("\n");
+    80000568:	00008517          	auipc	a0,0x8
+    8000056c:	b5050513          	addi	a0,a0,-1200 # 800080b8 <digits+0x88>
+    80000570:	00000097          	auipc	ra,0x0
+    80000574:	014080e7          	jalr	20(ra) # 80000584 <printf>
+  panicked = 1; // freeze uart output from other CPUs
+    80000578:	4785                	li	a5,1
+    8000057a:	00009717          	auipc	a4,0x9
+    8000057e:	a8f72323          	sw	a5,-1402(a4) # 80009000 <panicked>
+  for(;;)
+    80000582:	a001                	j	80000582 <panic+0x48>
+
+0000000080000584 <printf>:
+{
+    80000584:	7131                	addi	sp,sp,-192
+    80000586:	fc86                	sd	ra,120(sp)
+    80000588:	f8a2                	sd	s0,112(sp)
+    8000058a:	f4a6                	sd	s1,104(sp)
+    8000058c:	f0ca                	sd	s2,96(sp)
+    8000058e:	ecce                	sd	s3,88(sp)
+    80000590:	e8d2                	sd	s4,80(sp)
+    80000592:	e4d6                	sd	s5,72(sp)
+    80000594:	e0da                	sd	s6,64(sp)
+    80000596:	fc5e                	sd	s7,56(sp)
+    80000598:	f862                	sd	s8,48(sp)
+    8000059a:	f466                	sd	s9,40(sp)
+    8000059c:	f06a                	sd	s10,32(sp)
+    8000059e:	ec6e                	sd	s11,24(sp)
+    800005a0:	0100                	addi	s0,sp,128
+    800005a2:	8a2a                	mv	s4,a0
+    800005a4:	e40c                	sd	a1,8(s0)
+    800005a6:	e810                	sd	a2,16(s0)
+    800005a8:	ec14                	sd	a3,24(s0)
+    800005aa:	f018                	sd	a4,32(s0)
+    800005ac:	f41c                	sd	a5,40(s0)
+    800005ae:	03043823          	sd	a6,48(s0)
+    800005b2:	03143c23          	sd	a7,56(s0)
+  locking = pr.locking;
+    800005b6:	00011d97          	auipc	s11,0x11
+    800005ba:	c8adad83          	lw	s11,-886(s11) # 80011240 <pr+0x18>
+  if(locking)
+    800005be:	020d9b63          	bnez	s11,800005f4 <printf+0x70>
+  if (fmt == 0)
+    800005c2:	040a0263          	beqz	s4,80000606 <printf+0x82>
+  va_start(ap, fmt);
+    800005c6:	00840793          	addi	a5,s0,8
+    800005ca:	f8f43423          	sd	a5,-120(s0)
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+    800005ce:	000a4503          	lbu	a0,0(s4)
+    800005d2:	14050f63          	beqz	a0,80000730 <printf+0x1ac>
+    800005d6:	4981                	li	s3,0
+    if(c != '%'){
+    800005d8:	02500a93          	li	s5,37
+    switch(c){
+    800005dc:	07000b93          	li	s7,112
+  consputc('x');
+    800005e0:	4d41                	li	s10,16
+    consputc(digits[x >> (sizeof(uint64) * 8 - 4)]);
+    800005e2:	00008b17          	auipc	s6,0x8
+    800005e6:	a4eb0b13          	addi	s6,s6,-1458 # 80008030 <digits>
+    switch(c){
+    800005ea:	07300c93          	li	s9,115
+    800005ee:	06400c13          	li	s8,100
+    800005f2:	a82d                	j	8000062c <printf+0xa8>
+    acquire(&pr.lock);
+    800005f4:	00011517          	auipc	a0,0x11
+    800005f8:	c3450513          	addi	a0,a0,-972 # 80011228 <pr>
+    800005fc:	00000097          	auipc	ra,0x0
+    80000600:	5d4080e7          	jalr	1492(ra) # 80000bd0 <acquire>
+    80000604:	bf7d                	j	800005c2 <printf+0x3e>
+    panic("null fmt");
+    80000606:	00008517          	auipc	a0,0x8
+    8000060a:	a1250513          	addi	a0,a0,-1518 # 80008018 <etext+0x18>
+    8000060e:	00000097          	auipc	ra,0x0
+    80000612:	f2c080e7          	jalr	-212(ra) # 8000053a <panic>
+      consputc(c);
+    80000616:	00000097          	auipc	ra,0x0
+    8000061a:	c60080e7          	jalr	-928(ra) # 80000276 <consputc>
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+    8000061e:	2985                	addiw	s3,s3,1
+    80000620:	013a07b3          	add	a5,s4,s3
+    80000624:	0007c503          	lbu	a0,0(a5)
+    80000628:	10050463          	beqz	a0,80000730 <printf+0x1ac>
+    if(c != '%'){
+    8000062c:	ff5515e3          	bne	a0,s5,80000616 <printf+0x92>
+    c = fmt[++i] & 0xff;
+    80000630:	2985                	addiw	s3,s3,1
+    80000632:	013a07b3          	add	a5,s4,s3
+    80000636:	0007c783          	lbu	a5,0(a5)
+    8000063a:	0007849b          	sext.w	s1,a5
+    if(c == 0)
+    8000063e:	cbed                	beqz	a5,80000730 <printf+0x1ac>
+    switch(c){
+    80000640:	05778a63          	beq	a5,s7,80000694 <printf+0x110>
+    80000644:	02fbf663          	bgeu	s7,a5,80000670 <printf+0xec>
+    80000648:	09978863          	beq	a5,s9,800006d8 <printf+0x154>
+    8000064c:	07800713          	li	a4,120
+    80000650:	0ce79563          	bne	a5,a4,8000071a <printf+0x196>
+      printint(va_arg(ap, int), 16, 1);
+    80000654:	f8843783          	ld	a5,-120(s0)
+    80000658:	00878713          	addi	a4,a5,8
+    8000065c:	f8e43423          	sd	a4,-120(s0)
+    80000660:	4605                	li	a2,1
+    80000662:	85ea                	mv	a1,s10
+    80000664:	4388                	lw	a0,0(a5)
+    80000666:	00000097          	auipc	ra,0x0
+    8000066a:	e30080e7          	jalr	-464(ra) # 80000496 <printint>
+      break;
+    8000066e:	bf45                	j	8000061e <printf+0x9a>
+    switch(c){
+    80000670:	09578f63          	beq	a5,s5,8000070e <printf+0x18a>
+    80000674:	0b879363          	bne	a5,s8,8000071a <printf+0x196>
+      printint(va_arg(ap, int), 10, 1);
+    80000678:	f8843783          	ld	a5,-120(s0)
+    8000067c:	00878713          	addi	a4,a5,8
+    80000680:	f8e43423          	sd	a4,-120(s0)
+    80000684:	4605                	li	a2,1
+    80000686:	45a9                	li	a1,10
+    80000688:	4388                	lw	a0,0(a5)
+    8000068a:	00000097          	auipc	ra,0x0
+    8000068e:	e0c080e7          	jalr	-500(ra) # 80000496 <printint>
+      break;
+    80000692:	b771                	j	8000061e <printf+0x9a>
+      printptr(va_arg(ap, uint64));
+    80000694:	f8843783          	ld	a5,-120(s0)
+    80000698:	00878713          	addi	a4,a5,8
+    8000069c:	f8e43423          	sd	a4,-120(s0)
+    800006a0:	0007b903          	ld	s2,0(a5)
+  consputc('0');
+    800006a4:	03000513          	li	a0,48
+    800006a8:	00000097          	auipc	ra,0x0
+    800006ac:	bce080e7          	jalr	-1074(ra) # 80000276 <consputc>
+  consputc('x');
+    800006b0:	07800513          	li	a0,120
+    800006b4:	00000097          	auipc	ra,0x0
+    800006b8:	bc2080e7          	jalr	-1086(ra) # 80000276 <consputc>
+    800006bc:	84ea                	mv	s1,s10
+    consputc(digits[x >> (sizeof(uint64) * 8 - 4)]);
+    800006be:	03c95793          	srli	a5,s2,0x3c
+    800006c2:	97da                	add	a5,a5,s6
+    800006c4:	0007c503          	lbu	a0,0(a5)
+    800006c8:	00000097          	auipc	ra,0x0
+    800006cc:	bae080e7          	jalr	-1106(ra) # 80000276 <consputc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+    800006d0:	0912                	slli	s2,s2,0x4
+    800006d2:	34fd                	addiw	s1,s1,-1
+    800006d4:	f4ed                	bnez	s1,800006be <printf+0x13a>
+    800006d6:	b7a1                	j	8000061e <printf+0x9a>
+      if((s = va_arg(ap, char*)) == 0)
+    800006d8:	f8843783          	ld	a5,-120(s0)
+    800006dc:	00878713          	addi	a4,a5,8
+    800006e0:	f8e43423          	sd	a4,-120(s0)
+    800006e4:	6384                	ld	s1,0(a5)
+    800006e6:	cc89                	beqz	s1,80000700 <printf+0x17c>
+      for(; *s; s++)
+    800006e8:	0004c503          	lbu	a0,0(s1)
+    800006ec:	d90d                	beqz	a0,8000061e <printf+0x9a>
+        consputc(*s);
+    800006ee:	00000097          	auipc	ra,0x0
+    800006f2:	b88080e7          	jalr	-1144(ra) # 80000276 <consputc>
+      for(; *s; s++)
+    800006f6:	0485                	addi	s1,s1,1
+    800006f8:	0004c503          	lbu	a0,0(s1)
+    800006fc:	f96d                	bnez	a0,800006ee <printf+0x16a>
+    800006fe:	b705                	j	8000061e <printf+0x9a>
+        s = "(null)";
+    80000700:	00008497          	auipc	s1,0x8
+    80000704:	91048493          	addi	s1,s1,-1776 # 80008010 <etext+0x10>
+      for(; *s; s++)
+    80000708:	02800513          	li	a0,40
+    8000070c:	b7cd                	j	800006ee <printf+0x16a>
+      consputc('%');
+    8000070e:	8556                	mv	a0,s5
+    80000710:	00000097          	auipc	ra,0x0
+    80000714:	b66080e7          	jalr	-1178(ra) # 80000276 <consputc>
+      break;
+    80000718:	b719                	j	8000061e <printf+0x9a>
+      consputc('%');
+    8000071a:	8556                	mv	a0,s5
+    8000071c:	00000097          	auipc	ra,0x0
+    80000720:	b5a080e7          	jalr	-1190(ra) # 80000276 <consputc>
+      consputc(c);
+    80000724:	8526                	mv	a0,s1
+    80000726:	00000097          	auipc	ra,0x0
+    8000072a:	b50080e7          	jalr	-1200(ra) # 80000276 <consputc>
+      break;
+    8000072e:	bdc5                	j	8000061e <printf+0x9a>
+  if(locking)
+    80000730:	020d9163          	bnez	s11,80000752 <printf+0x1ce>
+}
+    80000734:	70e6                	ld	ra,120(sp)
+    80000736:	7446                	ld	s0,112(sp)
+    80000738:	74a6                	ld	s1,104(sp)
+    8000073a:	7906                	ld	s2,96(sp)
+    8000073c:	69e6                	ld	s3,88(sp)
+    8000073e:	6a46                	ld	s4,80(sp)
+    80000740:	6aa6                	ld	s5,72(sp)
+    80000742:	6b06                	ld	s6,64(sp)
+    80000744:	7be2                	ld	s7,56(sp)
+    80000746:	7c42                	ld	s8,48(sp)
+    80000748:	7ca2                	ld	s9,40(sp)
+    8000074a:	7d02                	ld	s10,32(sp)
+    8000074c:	6de2                	ld	s11,24(sp)
+    8000074e:	6129                	addi	sp,sp,192
+    80000750:	8082                	ret
+    release(&pr.lock);
+    80000752:	00011517          	auipc	a0,0x11
+    80000756:	ad650513          	addi	a0,a0,-1322 # 80011228 <pr>
+    8000075a:	00000097          	auipc	ra,0x0
+    8000075e:	52a080e7          	jalr	1322(ra) # 80000c84 <release>
+}
+    80000762:	bfc9                	j	80000734 <printf+0x1b0>
+
+0000000080000764 <printfinit>:
+    ;
+}
+
+void
+printfinit(void)
+{
+    80000764:	1101                	addi	sp,sp,-32
+    80000766:	ec06                	sd	ra,24(sp)
+    80000768:	e822                	sd	s0,16(sp)
+    8000076a:	e426                	sd	s1,8(sp)
+    8000076c:	1000                	addi	s0,sp,32
+  initlock(&pr.lock, "pr");
+    8000076e:	00011497          	auipc	s1,0x11
+    80000772:	aba48493          	addi	s1,s1,-1350 # 80011228 <pr>
+    80000776:	00008597          	auipc	a1,0x8
+    8000077a:	8b258593          	addi	a1,a1,-1870 # 80008028 <etext+0x28>
+    8000077e:	8526                	mv	a0,s1
+    80000780:	00000097          	auipc	ra,0x0
+    80000784:	3c0080e7          	jalr	960(ra) # 80000b40 <initlock>
+  pr.locking = 1;
+    80000788:	4785                	li	a5,1
+    8000078a:	cc9c                	sw	a5,24(s1)
+}
+    8000078c:	60e2                	ld	ra,24(sp)
+    8000078e:	6442                	ld	s0,16(sp)
+    80000790:	64a2                	ld	s1,8(sp)
+    80000792:	6105                	addi	sp,sp,32
+    80000794:	8082                	ret
+
+0000000080000796 <uartinit>:
+
+void uartstart();
+
+void
+uartinit(void)
+{
+    80000796:	1141                	addi	sp,sp,-16
+    80000798:	e406                	sd	ra,8(sp)
+    8000079a:	e022                	sd	s0,0(sp)
+    8000079c:	0800                	addi	s0,sp,16
+  // disable interrupts.
+  WriteReg(IER, 0x00);
+    8000079e:	100007b7          	lui	a5,0x10000
+    800007a2:	000780a3          	sb	zero,1(a5) # 10000001 <_entry-0x6fffffff>
+
+  // special mode to set baud rate.
+  WriteReg(LCR, LCR_BAUD_LATCH);
+    800007a6:	f8000713          	li	a4,-128
+    800007aa:	00e781a3          	sb	a4,3(a5)
+
+  // LSB for baud rate of 38.4K.
+  WriteReg(0, 0x03);
+    800007ae:	470d                	li	a4,3
+    800007b0:	00e78023          	sb	a4,0(a5)
+
+  // MSB for baud rate of 38.4K.
+  WriteReg(1, 0x00);
+    800007b4:	000780a3          	sb	zero,1(a5)
+
+  // leave set-baud mode,
+  // and set word length to 8 bits, no parity.
+  WriteReg(LCR, LCR_EIGHT_BITS);
+    800007b8:	00e781a3          	sb	a4,3(a5)
+
+  // reset and enable FIFOs.
+  WriteReg(FCR, FCR_FIFO_ENABLE | FCR_FIFO_CLEAR);
+    800007bc:	469d                	li	a3,7
+    800007be:	00d78123          	sb	a3,2(a5)
+
+  // enable transmit and receive interrupts.
+  WriteReg(IER, IER_TX_ENABLE | IER_RX_ENABLE);
+    800007c2:	00e780a3          	sb	a4,1(a5)
+
+  initlock(&uart_tx_lock, "uart");
+    800007c6:	00008597          	auipc	a1,0x8
+    800007ca:	88258593          	addi	a1,a1,-1918 # 80008048 <digits+0x18>
+    800007ce:	00011517          	auipc	a0,0x11
+    800007d2:	a7a50513          	addi	a0,a0,-1414 # 80011248 <uart_tx_lock>
+    800007d6:	00000097          	auipc	ra,0x0
+    800007da:	36a080e7          	jalr	874(ra) # 80000b40 <initlock>
+}
+    800007de:	60a2                	ld	ra,8(sp)
+    800007e0:	6402                	ld	s0,0(sp)
+    800007e2:	0141                	addi	sp,sp,16
+    800007e4:	8082                	ret
+
+00000000800007e6 <uartputc_sync>:
+// use interrupts, for use by kernel printf() and
+// to echo characters. it spins waiting for the uart's
+// output register to be empty.
+void
+uartputc_sync(int c)
+{
+    800007e6:	1101                	addi	sp,sp,-32
+    800007e8:	ec06                	sd	ra,24(sp)
+    800007ea:	e822                	sd	s0,16(sp)
+    800007ec:	e426                	sd	s1,8(sp)
+    800007ee:	1000                	addi	s0,sp,32
+    800007f0:	84aa                	mv	s1,a0
+  push_off();
+    800007f2:	00000097          	auipc	ra,0x0
+    800007f6:	392080e7          	jalr	914(ra) # 80000b84 <push_off>
+
+  if(panicked){
+    800007fa:	00009797          	auipc	a5,0x9
+    800007fe:	8067a783          	lw	a5,-2042(a5) # 80009000 <panicked>
+    for(;;)
+      ;
+  }
+
+  // wait for Transmit Holding Empty to be set in LSR.
+  while((ReadReg(LSR) & LSR_TX_IDLE) == 0)
+    80000802:	10000737          	lui	a4,0x10000
+  if(panicked){
+    80000806:	c391                	beqz	a5,8000080a <uartputc_sync+0x24>
+    for(;;)
+    80000808:	a001                	j	80000808 <uartputc_sync+0x22>
+  while((ReadReg(LSR) & LSR_TX_IDLE) == 0)
+    8000080a:	00574783          	lbu	a5,5(a4) # 10000005 <_entry-0x6ffffffb>
+    8000080e:	0207f793          	andi	a5,a5,32
+    80000812:	dfe5                	beqz	a5,8000080a <uartputc_sync+0x24>
+    ;
+  WriteReg(THR, c);
+    80000814:	0ff4f513          	zext.b	a0,s1
+    80000818:	100007b7          	lui	a5,0x10000
+    8000081c:	00a78023          	sb	a0,0(a5) # 10000000 <_entry-0x70000000>
+
+  pop_off();
+    80000820:	00000097          	auipc	ra,0x0
+    80000824:	404080e7          	jalr	1028(ra) # 80000c24 <pop_off>
+}
+    80000828:	60e2                	ld	ra,24(sp)
+    8000082a:	6442                	ld	s0,16(sp)
+    8000082c:	64a2                	ld	s1,8(sp)
+    8000082e:	6105                	addi	sp,sp,32
+    80000830:	8082                	ret
+
+0000000080000832 <uartstart>:
+// called from both the top- and bottom-half.
+void
+uartstart()
+{
+  while(1){
+    if(uart_tx_w == uart_tx_r){
+    80000832:	00008797          	auipc	a5,0x8
+    80000836:	7d67b783          	ld	a5,2006(a5) # 80009008 <uart_tx_r>
+    8000083a:	00008717          	auipc	a4,0x8
+    8000083e:	7d673703          	ld	a4,2006(a4) # 80009010 <uart_tx_w>
+    80000842:	06f70a63          	beq	a4,a5,800008b6 <uartstart+0x84>
+{
+    80000846:	7139                	addi	sp,sp,-64
+    80000848:	fc06                	sd	ra,56(sp)
+    8000084a:	f822                	sd	s0,48(sp)
+    8000084c:	f426                	sd	s1,40(sp)
+    8000084e:	f04a                	sd	s2,32(sp)
+    80000850:	ec4e                	sd	s3,24(sp)
+    80000852:	e852                	sd	s4,16(sp)
+    80000854:	e456                	sd	s5,8(sp)
+    80000856:	0080                	addi	s0,sp,64
+      // transmit buffer is empty.
+      return;
+    }
+    
+    if((ReadReg(LSR) & LSR_TX_IDLE) == 0){
+    80000858:	10000937          	lui	s2,0x10000
+      // so we cannot give it another byte.
+      // it will interrupt when it's ready for a new byte.
+      return;
+    }
+    
+    int c = uart_tx_buf[uart_tx_r % UART_TX_BUF_SIZE];
+    8000085c:	00011a17          	auipc	s4,0x11
+    80000860:	9eca0a13          	addi	s4,s4,-1556 # 80011248 <uart_tx_lock>
+    uart_tx_r += 1;
+    80000864:	00008497          	auipc	s1,0x8
+    80000868:	7a448493          	addi	s1,s1,1956 # 80009008 <uart_tx_r>
+    if(uart_tx_w == uart_tx_r){
+    8000086c:	00008997          	auipc	s3,0x8
+    80000870:	7a498993          	addi	s3,s3,1956 # 80009010 <uart_tx_w>
+    if((ReadReg(LSR) & LSR_TX_IDLE) == 0){
+    80000874:	00594703          	lbu	a4,5(s2) # 10000005 <_entry-0x6ffffffb>
+    80000878:	02077713          	andi	a4,a4,32
+    8000087c:	c705                	beqz	a4,800008a4 <uartstart+0x72>
+    int c = uart_tx_buf[uart_tx_r % UART_TX_BUF_SIZE];
+    8000087e:	01f7f713          	andi	a4,a5,31
+    80000882:	9752                	add	a4,a4,s4
+    80000884:	01874a83          	lbu	s5,24(a4)
+    uart_tx_r += 1;
+    80000888:	0785                	addi	a5,a5,1
+    8000088a:	e09c                	sd	a5,0(s1)
+    
+    // maybe uartputc() is waiting for space in the buffer.
+    wakeup(&uart_tx_r);
+    8000088c:	8526                	mv	a0,s1
+    8000088e:	00002097          	auipc	ra,0x2
+    80000892:	eaa080e7          	jalr	-342(ra) # 80002738 <wakeup>
+    
+    WriteReg(THR, c);
+    80000896:	01590023          	sb	s5,0(s2)
+    if(uart_tx_w == uart_tx_r){
+    8000089a:	609c                	ld	a5,0(s1)
+    8000089c:	0009b703          	ld	a4,0(s3)
+    800008a0:	fcf71ae3          	bne	a4,a5,80000874 <uartstart+0x42>
+  }
+}
+    800008a4:	70e2                	ld	ra,56(sp)
+    800008a6:	7442                	ld	s0,48(sp)
+    800008a8:	74a2                	ld	s1,40(sp)
+    800008aa:	7902                	ld	s2,32(sp)
+    800008ac:	69e2                	ld	s3,24(sp)
+    800008ae:	6a42                	ld	s4,16(sp)
+    800008b0:	6aa2                	ld	s5,8(sp)
+    800008b2:	6121                	addi	sp,sp,64
+    800008b4:	8082                	ret
+    800008b6:	8082                	ret
+
+00000000800008b8 <uartputc>:
+{
+    800008b8:	7179                	addi	sp,sp,-48
+    800008ba:	f406                	sd	ra,40(sp)
+    800008bc:	f022                	sd	s0,32(sp)
+    800008be:	ec26                	sd	s1,24(sp)
+    800008c0:	e84a                	sd	s2,16(sp)
+    800008c2:	e44e                	sd	s3,8(sp)
+    800008c4:	e052                	sd	s4,0(sp)
+    800008c6:	1800                	addi	s0,sp,48
+    800008c8:	8a2a                	mv	s4,a0
+  acquire(&uart_tx_lock);
+    800008ca:	00011517          	auipc	a0,0x11
+    800008ce:	97e50513          	addi	a0,a0,-1666 # 80011248 <uart_tx_lock>
+    800008d2:	00000097          	auipc	ra,0x0
+    800008d6:	2fe080e7          	jalr	766(ra) # 80000bd0 <acquire>
+  if(panicked){
+    800008da:	00008797          	auipc	a5,0x8
+    800008de:	7267a783          	lw	a5,1830(a5) # 80009000 <panicked>
+    800008e2:	c391                	beqz	a5,800008e6 <uartputc+0x2e>
+    for(;;)
+    800008e4:	a001                	j	800008e4 <uartputc+0x2c>
+    if(uart_tx_w == uart_tx_r + UART_TX_BUF_SIZE){
+    800008e6:	00008717          	auipc	a4,0x8
+    800008ea:	72a73703          	ld	a4,1834(a4) # 80009010 <uart_tx_w>
+    800008ee:	00008797          	auipc	a5,0x8
+    800008f2:	71a7b783          	ld	a5,1818(a5) # 80009008 <uart_tx_r>
+    800008f6:	02078793          	addi	a5,a5,32
+    800008fa:	02e79b63          	bne	a5,a4,80000930 <uartputc+0x78>
+      sleep(&uart_tx_r, &uart_tx_lock);
+    800008fe:	00011997          	auipc	s3,0x11
+    80000902:	94a98993          	addi	s3,s3,-1718 # 80011248 <uart_tx_lock>
+    80000906:	00008497          	auipc	s1,0x8
+    8000090a:	70248493          	addi	s1,s1,1794 # 80009008 <uart_tx_r>
+    if(uart_tx_w == uart_tx_r + UART_TX_BUF_SIZE){
+    8000090e:	00008917          	auipc	s2,0x8
+    80000912:	70290913          	addi	s2,s2,1794 # 80009010 <uart_tx_w>
+      sleep(&uart_tx_r, &uart_tx_lock);
+    80000916:	85ce                	mv	a1,s3
+    80000918:	8526                	mv	a0,s1
+    8000091a:	00002097          	auipc	ra,0x2
+    8000091e:	c92080e7          	jalr	-878(ra) # 800025ac <sleep>
+    if(uart_tx_w == uart_tx_r + UART_TX_BUF_SIZE){
+    80000922:	00093703          	ld	a4,0(s2)
+    80000926:	609c                	ld	a5,0(s1)
+    80000928:	02078793          	addi	a5,a5,32
+    8000092c:	fee785e3          	beq	a5,a4,80000916 <uartputc+0x5e>
+      uart_tx_buf[uart_tx_w % UART_TX_BUF_SIZE] = c;
+    80000930:	00011497          	auipc	s1,0x11
+    80000934:	91848493          	addi	s1,s1,-1768 # 80011248 <uart_tx_lock>
+    80000938:	01f77793          	andi	a5,a4,31
+    8000093c:	97a6                	add	a5,a5,s1
+    8000093e:	01478c23          	sb	s4,24(a5)
+      uart_tx_w += 1;
+    80000942:	0705                	addi	a4,a4,1
+    80000944:	00008797          	auipc	a5,0x8
+    80000948:	6ce7b623          	sd	a4,1740(a5) # 80009010 <uart_tx_w>
+      uartstart();
+    8000094c:	00000097          	auipc	ra,0x0
+    80000950:	ee6080e7          	jalr	-282(ra) # 80000832 <uartstart>
+      release(&uart_tx_lock);
+    80000954:	8526                	mv	a0,s1
+    80000956:	00000097          	auipc	ra,0x0
+    8000095a:	32e080e7          	jalr	814(ra) # 80000c84 <release>
+}
+    8000095e:	70a2                	ld	ra,40(sp)
+    80000960:	7402                	ld	s0,32(sp)
+    80000962:	64e2                	ld	s1,24(sp)
+    80000964:	6942                	ld	s2,16(sp)
+    80000966:	69a2                	ld	s3,8(sp)
+    80000968:	6a02                	ld	s4,0(sp)
+    8000096a:	6145                	addi	sp,sp,48
+    8000096c:	8082                	ret
+
+000000008000096e <uartgetc>:
+
+// read one input character from the UART.
+// return -1 if none is waiting.
+int
+uartgetc(void)
+{
+    8000096e:	1141                	addi	sp,sp,-16
+    80000970:	e422                	sd	s0,8(sp)
+    80000972:	0800                	addi	s0,sp,16
+  if(ReadReg(LSR) & 0x01){
+    80000974:	100007b7          	lui	a5,0x10000
+    80000978:	0057c783          	lbu	a5,5(a5) # 10000005 <_entry-0x6ffffffb>
+    8000097c:	8b85                	andi	a5,a5,1
+    8000097e:	cb81                	beqz	a5,8000098e <uartgetc+0x20>
+    // input data is ready.
+    return ReadReg(RHR);
+    80000980:	100007b7          	lui	a5,0x10000
+    80000984:	0007c503          	lbu	a0,0(a5) # 10000000 <_entry-0x70000000>
+  } else {
+    return -1;
+  }
+}
+    80000988:	6422                	ld	s0,8(sp)
+    8000098a:	0141                	addi	sp,sp,16
+    8000098c:	8082                	ret
+    return -1;
+    8000098e:	557d                	li	a0,-1
+    80000990:	bfe5                	j	80000988 <uartgetc+0x1a>
+
+0000000080000992 <uartintr>:
+// handle a uart interrupt, raised because input has
+// arrived, or the uart is ready for more output, or
+// both. called from trap.c.
+void
+uartintr(void)
+{
+    80000992:	1101                	addi	sp,sp,-32
+    80000994:	ec06                	sd	ra,24(sp)
+    80000996:	e822                	sd	s0,16(sp)
+    80000998:	e426                	sd	s1,8(sp)
+    8000099a:	1000                	addi	s0,sp,32
+  // read and process incoming characters.
+  while(1){
+    int c = uartgetc();
+    if(c == -1)
+    8000099c:	54fd                	li	s1,-1
+    8000099e:	a029                	j	800009a8 <uartintr+0x16>
+      break;
+    consoleintr(c);
+    800009a0:	00000097          	auipc	ra,0x0
+    800009a4:	918080e7          	jalr	-1768(ra) # 800002b8 <consoleintr>
+    int c = uartgetc();
+    800009a8:	00000097          	auipc	ra,0x0
+    800009ac:	fc6080e7          	jalr	-58(ra) # 8000096e <uartgetc>
+    if(c == -1)
+    800009b0:	fe9518e3          	bne	a0,s1,800009a0 <uartintr+0xe>
+  }
+
+  // send buffered characters.
+  acquire(&uart_tx_lock);
+    800009b4:	00011497          	auipc	s1,0x11
+    800009b8:	89448493          	addi	s1,s1,-1900 # 80011248 <uart_tx_lock>
+    800009bc:	8526                	mv	a0,s1
+    800009be:	00000097          	auipc	ra,0x0
+    800009c2:	212080e7          	jalr	530(ra) # 80000bd0 <acquire>
+  uartstart();
+    800009c6:	00000097          	auipc	ra,0x0
+    800009ca:	e6c080e7          	jalr	-404(ra) # 80000832 <uartstart>
+  release(&uart_tx_lock);
+    800009ce:	8526                	mv	a0,s1
+    800009d0:	00000097          	auipc	ra,0x0
+    800009d4:	2b4080e7          	jalr	692(ra) # 80000c84 <release>
+}
+    800009d8:	60e2                	ld	ra,24(sp)
+    800009da:	6442                	ld	s0,16(sp)
+    800009dc:	64a2                	ld	s1,8(sp)
+    800009de:	6105                	addi	sp,sp,32
+    800009e0:	8082                	ret
+
+00000000800009e2 <kfree>:
+// which normally should have been returned by a
+// call to kalloc().  (The exception is when
+// initializing the allocator; see kinit above.)
+void
+kfree(void *pa)
+{
+    800009e2:	1101                	addi	sp,sp,-32
+    800009e4:	ec06                	sd	ra,24(sp)
+    800009e6:	e822                	sd	s0,16(sp)
+    800009e8:	e426                	sd	s1,8(sp)
+    800009ea:	e04a                	sd	s2,0(sp)
+    800009ec:	1000                	addi	s0,sp,32
+  struct run *r;
+
+  if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
+    800009ee:	03451793          	slli	a5,a0,0x34
+    800009f2:	ebb9                	bnez	a5,80000a48 <kfree+0x66>
+    800009f4:	84aa                	mv	s1,a0
+    800009f6:	00028797          	auipc	a5,0x28
+    800009fa:	60a78793          	addi	a5,a5,1546 # 80029000 <end>
+    800009fe:	04f56563          	bltu	a0,a5,80000a48 <kfree+0x66>
+    80000a02:	47c5                	li	a5,17
+    80000a04:	07ee                	slli	a5,a5,0x1b
+    80000a06:	04f57163          	bgeu	a0,a5,80000a48 <kfree+0x66>
+    panic("kfree");
+
+  // Fill with junk to catch dangling refs.
+  memset(pa, 1, PGSIZE);
+    80000a0a:	6605                	lui	a2,0x1
+    80000a0c:	4585                	li	a1,1
+    80000a0e:	00000097          	auipc	ra,0x0
+    80000a12:	2be080e7          	jalr	702(ra) # 80000ccc <memset>
+
+  r = (struct run*)pa;
+
+  acquire(&kmem.lock);
+    80000a16:	00011917          	auipc	s2,0x11
+    80000a1a:	86a90913          	addi	s2,s2,-1942 # 80011280 <kmem>
+    80000a1e:	854a                	mv	a0,s2
+    80000a20:	00000097          	auipc	ra,0x0
+    80000a24:	1b0080e7          	jalr	432(ra) # 80000bd0 <acquire>
+  r->next = kmem.freelist;
+    80000a28:	01893783          	ld	a5,24(s2)
+    80000a2c:	e09c                	sd	a5,0(s1)
+  kmem.freelist = r;
+    80000a2e:	00993c23          	sd	s1,24(s2)
+  release(&kmem.lock);
+    80000a32:	854a                	mv	a0,s2
+    80000a34:	00000097          	auipc	ra,0x0
+    80000a38:	250080e7          	jalr	592(ra) # 80000c84 <release>
+}
+    80000a3c:	60e2                	ld	ra,24(sp)
+    80000a3e:	6442                	ld	s0,16(sp)
+    80000a40:	64a2                	ld	s1,8(sp)
+    80000a42:	6902                	ld	s2,0(sp)
+    80000a44:	6105                	addi	sp,sp,32
+    80000a46:	8082                	ret
+    panic("kfree");
+    80000a48:	00007517          	auipc	a0,0x7
+    80000a4c:	60850513          	addi	a0,a0,1544 # 80008050 <digits+0x20>
+    80000a50:	00000097          	auipc	ra,0x0
+    80000a54:	aea080e7          	jalr	-1302(ra) # 8000053a <panic>
+
+0000000080000a58 <freerange>:
+{
+    80000a58:	7179                	addi	sp,sp,-48
+    80000a5a:	f406                	sd	ra,40(sp)
+    80000a5c:	f022                	sd	s0,32(sp)
+    80000a5e:	ec26                	sd	s1,24(sp)
+    80000a60:	e84a                	sd	s2,16(sp)
+    80000a62:	e44e                	sd	s3,8(sp)
+    80000a64:	e052                	sd	s4,0(sp)
+    80000a66:	1800                	addi	s0,sp,48
+  p = (char*)PGROUNDUP((uint64)pa_start);
+    80000a68:	6785                	lui	a5,0x1
+    80000a6a:	fff78713          	addi	a4,a5,-1 # fff <_entry-0x7ffff001>
+    80000a6e:	00e504b3          	add	s1,a0,a4
+    80000a72:	777d                	lui	a4,0xfffff
+    80000a74:	8cf9                	and	s1,s1,a4
+  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE)
+    80000a76:	94be                	add	s1,s1,a5
+    80000a78:	0095ee63          	bltu	a1,s1,80000a94 <freerange+0x3c>
+    80000a7c:	892e                	mv	s2,a1
+    kfree(p);
+    80000a7e:	7a7d                	lui	s4,0xfffff
+  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE)
+    80000a80:	6985                	lui	s3,0x1
+    kfree(p);
+    80000a82:	01448533          	add	a0,s1,s4
+    80000a86:	00000097          	auipc	ra,0x0
+    80000a8a:	f5c080e7          	jalr	-164(ra) # 800009e2 <kfree>
+  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE)
+    80000a8e:	94ce                	add	s1,s1,s3
+    80000a90:	fe9979e3          	bgeu	s2,s1,80000a82 <freerange+0x2a>
+}
+    80000a94:	70a2                	ld	ra,40(sp)
+    80000a96:	7402                	ld	s0,32(sp)
+    80000a98:	64e2                	ld	s1,24(sp)
+    80000a9a:	6942                	ld	s2,16(sp)
+    80000a9c:	69a2                	ld	s3,8(sp)
+    80000a9e:	6a02                	ld	s4,0(sp)
+    80000aa0:	6145                	addi	sp,sp,48
+    80000aa2:	8082                	ret
+
+0000000080000aa4 <kinit>:
+{
+    80000aa4:	1141                	addi	sp,sp,-16
+    80000aa6:	e406                	sd	ra,8(sp)
+    80000aa8:	e022                	sd	s0,0(sp)
+    80000aaa:	0800                	addi	s0,sp,16
+  initlock(&kmem.lock, "kmem");
+    80000aac:	00007597          	auipc	a1,0x7
+    80000ab0:	5ac58593          	addi	a1,a1,1452 # 80008058 <digits+0x28>
+    80000ab4:	00010517          	auipc	a0,0x10
+    80000ab8:	7cc50513          	addi	a0,a0,1996 # 80011280 <kmem>
+    80000abc:	00000097          	auipc	ra,0x0
+    80000ac0:	084080e7          	jalr	132(ra) # 80000b40 <initlock>
+  freerange(end, (void*)PHYSTOP);
+    80000ac4:	45c5                	li	a1,17
+    80000ac6:	05ee                	slli	a1,a1,0x1b
+    80000ac8:	00028517          	auipc	a0,0x28
+    80000acc:	53850513          	addi	a0,a0,1336 # 80029000 <end>
+    80000ad0:	00000097          	auipc	ra,0x0
+    80000ad4:	f88080e7          	jalr	-120(ra) # 80000a58 <freerange>
+}
+    80000ad8:	60a2                	ld	ra,8(sp)
+    80000ada:	6402                	ld	s0,0(sp)
+    80000adc:	0141                	addi	sp,sp,16
+    80000ade:	8082                	ret
+
+0000000080000ae0 <kalloc>:
+// Allocate one 4096-byte page of physical memory.
+// Returns a pointer that the kernel can use.
+// Returns 0 if the memory cannot be allocated.
+void *
+kalloc(void)
+{
+    80000ae0:	1101                	addi	sp,sp,-32
+    80000ae2:	ec06                	sd	ra,24(sp)
+    80000ae4:	e822                	sd	s0,16(sp)
+    80000ae6:	e426                	sd	s1,8(sp)
+    80000ae8:	1000                	addi	s0,sp,32
+  struct run *r;
+
+  acquire(&kmem.lock);
+    80000aea:	00010497          	auipc	s1,0x10
+    80000aee:	79648493          	addi	s1,s1,1942 # 80011280 <kmem>
+    80000af2:	8526                	mv	a0,s1
+    80000af4:	00000097          	auipc	ra,0x0
+    80000af8:	0dc080e7          	jalr	220(ra) # 80000bd0 <acquire>
+  r = kmem.freelist;
+    80000afc:	6c84                	ld	s1,24(s1)
+  if(r)
+    80000afe:	c885                	beqz	s1,80000b2e <kalloc+0x4e>
+    kmem.freelist = r->next;
+    80000b00:	609c                	ld	a5,0(s1)
+    80000b02:	00010517          	auipc	a0,0x10
+    80000b06:	77e50513          	addi	a0,a0,1918 # 80011280 <kmem>
+    80000b0a:	ed1c                	sd	a5,24(a0)
+  release(&kmem.lock);
+    80000b0c:	00000097          	auipc	ra,0x0
+    80000b10:	178080e7          	jalr	376(ra) # 80000c84 <release>
+
+  if(r)
+    memset((char*)r, 5, PGSIZE); // fill with junk
+    80000b14:	6605                	lui	a2,0x1
+    80000b16:	4595                	li	a1,5
+    80000b18:	8526                	mv	a0,s1
+    80000b1a:	00000097          	auipc	ra,0x0
+    80000b1e:	1b2080e7          	jalr	434(ra) # 80000ccc <memset>
+  return (void*)r;
+}
+    80000b22:	8526                	mv	a0,s1
+    80000b24:	60e2                	ld	ra,24(sp)
+    80000b26:	6442                	ld	s0,16(sp)
+    80000b28:	64a2                	ld	s1,8(sp)
+    80000b2a:	6105                	addi	sp,sp,32
+    80000b2c:	8082                	ret
+  release(&kmem.lock);
+    80000b2e:	00010517          	auipc	a0,0x10
+    80000b32:	75250513          	addi	a0,a0,1874 # 80011280 <kmem>
+    80000b36:	00000097          	auipc	ra,0x0
+    80000b3a:	14e080e7          	jalr	334(ra) # 80000c84 <release>
+  if(r)
+    80000b3e:	b7d5                	j	80000b22 <kalloc+0x42>
+
+0000000080000b40 <initlock>:
+#include "proc.h"
+#include "defs.h"
+
+void
+initlock(struct spinlock *lk, char *name)
+{
+    80000b40:	1141                	addi	sp,sp,-16
+    80000b42:	e422                	sd	s0,8(sp)
+    80000b44:	0800                	addi	s0,sp,16
+  lk->name = name;
+    80000b46:	e50c                	sd	a1,8(a0)
+  lk->locked = 0;
+    80000b48:	00052023          	sw	zero,0(a0)
+  lk->cpu = 0;
+    80000b4c:	00053823          	sd	zero,16(a0)
+}
+    80000b50:	6422                	ld	s0,8(sp)
+    80000b52:	0141                	addi	sp,sp,16
+    80000b54:	8082                	ret
+
+0000000080000b56 <holding>:
+// Interrupts must be off.
+int
+holding(struct spinlock *lk)
+{
+  int r;
+  r = (lk->locked && lk->cpu == mycpu());
+    80000b56:	411c                	lw	a5,0(a0)
+    80000b58:	e399                	bnez	a5,80000b5e <holding+0x8>
+    80000b5a:	4501                	li	a0,0
+  return r;
+}
+    80000b5c:	8082                	ret
+{
+    80000b5e:	1101                	addi	sp,sp,-32
+    80000b60:	ec06                	sd	ra,24(sp)
+    80000b62:	e822                	sd	s0,16(sp)
+    80000b64:	e426                	sd	s1,8(sp)
+    80000b66:	1000                	addi	s0,sp,32
+  r = (lk->locked && lk->cpu == mycpu());
+    80000b68:	6904                	ld	s1,16(a0)
+    80000b6a:	00001097          	auipc	ra,0x1
+    80000b6e:	1f0080e7          	jalr	496(ra) # 80001d5a <mycpu>
+    80000b72:	40a48533          	sub	a0,s1,a0
+    80000b76:	00153513          	seqz	a0,a0
+}
+    80000b7a:	60e2                	ld	ra,24(sp)
+    80000b7c:	6442                	ld	s0,16(sp)
+    80000b7e:	64a2                	ld	s1,8(sp)
+    80000b80:	6105                	addi	sp,sp,32
+    80000b82:	8082                	ret
+
+0000000080000b84 <push_off>:
+// it takes two pop_off()s to undo two push_off()s.  Also, if interrupts
+// are initially off, then push_off, pop_off leaves them off.
+
+void
+push_off(void)
+{
+    80000b84:	1101                	addi	sp,sp,-32
+    80000b86:	ec06                	sd	ra,24(sp)
+    80000b88:	e822                	sd	s0,16(sp)
+    80000b8a:	e426                	sd	s1,8(sp)
+    80000b8c:	1000                	addi	s0,sp,32
+  asm volatile("csrr %0, sstatus" : "=r" (x) );
+    80000b8e:	100024f3          	csrr	s1,sstatus
+    80000b92:	100027f3          	csrr	a5,sstatus
+  w_sstatus(r_sstatus() & ~SSTATUS_SIE);
+    80000b96:	9bf5                	andi	a5,a5,-3
+  asm volatile("csrw sstatus, %0" : : "r" (x));
+    80000b98:	10079073          	csrw	sstatus,a5
+  int old = intr_get();
+
+  intr_off();
+  if(mycpu()->noff == 0)
+    80000b9c:	00001097          	auipc	ra,0x1
+    80000ba0:	1be080e7          	jalr	446(ra) # 80001d5a <mycpu>
+    80000ba4:	5d3c                	lw	a5,120(a0)
+    80000ba6:	cf89                	beqz	a5,80000bc0 <push_off+0x3c>
+    mycpu()->intena = old;
+  mycpu()->noff += 1;
+    80000ba8:	00001097          	auipc	ra,0x1
+    80000bac:	1b2080e7          	jalr	434(ra) # 80001d5a <mycpu>
+    80000bb0:	5d3c                	lw	a5,120(a0)
+    80000bb2:	2785                	addiw	a5,a5,1
+    80000bb4:	dd3c                	sw	a5,120(a0)
+}
+    80000bb6:	60e2                	ld	ra,24(sp)
+    80000bb8:	6442                	ld	s0,16(sp)
+    80000bba:	64a2                	ld	s1,8(sp)
+    80000bbc:	6105                	addi	sp,sp,32
+    80000bbe:	8082                	ret
+    mycpu()->intena = old;
+    80000bc0:	00001097          	auipc	ra,0x1
+    80000bc4:	19a080e7          	jalr	410(ra) # 80001d5a <mycpu>
+  return (x & SSTATUS_SIE) != 0;
+    80000bc8:	8085                	srli	s1,s1,0x1
+    80000bca:	8885                	andi	s1,s1,1
+    80000bcc:	dd64                	sw	s1,124(a0)
+    80000bce:	bfe9                	j	80000ba8 <push_off+0x24>
+
+0000000080000bd0 <acquire>:
+{
+    80000bd0:	1101                	addi	sp,sp,-32
+    80000bd2:	ec06                	sd	ra,24(sp)
+    80000bd4:	e822                	sd	s0,16(sp)
+    80000bd6:	e426                	sd	s1,8(sp)
+    80000bd8:	1000                	addi	s0,sp,32
+    80000bda:	84aa                	mv	s1,a0
+  push_off(); // disable interrupts to avoid deadlock.
+    80000bdc:	00000097          	auipc	ra,0x0
+    80000be0:	fa8080e7          	jalr	-88(ra) # 80000b84 <push_off>
+  if(holding(lk))
+    80000be4:	8526                	mv	a0,s1
+    80000be6:	00000097          	auipc	ra,0x0
+    80000bea:	f70080e7          	jalr	-144(ra) # 80000b56 <holding>
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
+    80000bee:	4705                	li	a4,1
+  if(holding(lk))
+    80000bf0:	e115                	bnez	a0,80000c14 <acquire+0x44>
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
+    80000bf2:	87ba                	mv	a5,a4
+    80000bf4:	0cf4a7af          	amoswap.w.aq	a5,a5,(s1)
+    80000bf8:	2781                	sext.w	a5,a5
+    80000bfa:	ffe5                	bnez	a5,80000bf2 <acquire+0x22>
+  __sync_synchronize();
+    80000bfc:	0ff0000f          	fence
+  lk->cpu = mycpu();
+    80000c00:	00001097          	auipc	ra,0x1
+    80000c04:	15a080e7          	jalr	346(ra) # 80001d5a <mycpu>
+    80000c08:	e888                	sd	a0,16(s1)
+}
+    80000c0a:	60e2                	ld	ra,24(sp)
+    80000c0c:	6442                	ld	s0,16(sp)
+    80000c0e:	64a2                	ld	s1,8(sp)
+    80000c10:	6105                	addi	sp,sp,32
+    80000c12:	8082                	ret
+    panic("acquire");
+    80000c14:	00007517          	auipc	a0,0x7
+    80000c18:	44c50513          	addi	a0,a0,1100 # 80008060 <digits+0x30>
+    80000c1c:	00000097          	auipc	ra,0x0
+    80000c20:	91e080e7          	jalr	-1762(ra) # 8000053a <panic>
+
+0000000080000c24 <pop_off>:
+
+void
+pop_off(void)
+{
+    80000c24:	1141                	addi	sp,sp,-16
+    80000c26:	e406                	sd	ra,8(sp)
+    80000c28:	e022                	sd	s0,0(sp)
+    80000c2a:	0800                	addi	s0,sp,16
+  struct cpu *c = mycpu();
+    80000c2c:	00001097          	auipc	ra,0x1
+    80000c30:	12e080e7          	jalr	302(ra) # 80001d5a <mycpu>
+  asm volatile("csrr %0, sstatus" : "=r" (x) );
+    80000c34:	100027f3          	csrr	a5,sstatus
+  return (x & SSTATUS_SIE) != 0;
+    80000c38:	8b89                	andi	a5,a5,2
+  if(intr_get())
+    80000c3a:	e78d                	bnez	a5,80000c64 <pop_off+0x40>
+    panic("pop_off - interruptible");
+  if(c->noff < 1)
+    80000c3c:	5d3c                	lw	a5,120(a0)
+    80000c3e:	02f05b63          	blez	a5,80000c74 <pop_off+0x50>
+    panic("pop_off");
+  c->noff -= 1;
+    80000c42:	37fd                	addiw	a5,a5,-1
+    80000c44:	0007871b          	sext.w	a4,a5
+    80000c48:	dd3c                	sw	a5,120(a0)
+  if(c->noff == 0 && c->intena)
+    80000c4a:	eb09                	bnez	a4,80000c5c <pop_off+0x38>
+    80000c4c:	5d7c                	lw	a5,124(a0)
+    80000c4e:	c799                	beqz	a5,80000c5c <pop_off+0x38>
+  asm volatile("csrr %0, sstatus" : "=r" (x) );
+    80000c50:	100027f3          	csrr	a5,sstatus
+  w_sstatus(r_sstatus() | SSTATUS_SIE);
+    80000c54:	0027e793          	ori	a5,a5,2
+  asm volatile("csrw sstatus, %0" : : "r" (x));
+    80000c58:	10079073          	csrw	sstatus,a5
+    intr_on();
+}
+    80000c5c:	60a2                	ld	ra,8(sp)
+    80000c5e:	6402                	ld	s0,0(sp)
+    80000c60:	0141                	addi	sp,sp,16
+    80000c62:	8082                	ret
+    panic("pop_off - interruptible");
+    80000c64:	00007517          	auipc	a0,0x7
+    80000c68:	40450513          	addi	a0,a0,1028 # 80008068 <digits+0x38>
+    80000c6c:	00000097          	auipc	ra,0x0
+    80000c70:	8ce080e7          	jalr	-1842(ra) # 8000053a <panic>
+    panic("pop_off");
+    80000c74:	00007517          	auipc	a0,0x7
+    80000c78:	40c50513          	addi	a0,a0,1036 # 80008080 <digits+0x50>
+    80000c7c:	00000097          	auipc	ra,0x0
+    80000c80:	8be080e7          	jalr	-1858(ra) # 8000053a <panic>
+
+0000000080000c84 <release>:
+{
+    80000c84:	1101                	addi	sp,sp,-32
+    80000c86:	ec06                	sd	ra,24(sp)
+    80000c88:	e822                	sd	s0,16(sp)
+    80000c8a:	e426                	sd	s1,8(sp)
+    80000c8c:	1000                	addi	s0,sp,32
+    80000c8e:	84aa                	mv	s1,a0
+  if(!holding(lk))
+    80000c90:	00000097          	auipc	ra,0x0
+    80000c94:	ec6080e7          	jalr	-314(ra) # 80000b56 <holding>
+    80000c98:	c115                	beqz	a0,80000cbc <release+0x38>
+  lk->cpu = 0;
+    80000c9a:	0004b823          	sd	zero,16(s1)
+  __sync_synchronize();
+    80000c9e:	0ff0000f          	fence
+  __sync_lock_release(&lk->locked);
+    80000ca2:	0f50000f          	fence	iorw,ow
+    80000ca6:	0804a02f          	amoswap.w	zero,zero,(s1)
+  pop_off();
+    80000caa:	00000097          	auipc	ra,0x0
+    80000cae:	f7a080e7          	jalr	-134(ra) # 80000c24 <pop_off>
+}
+    80000cb2:	60e2                	ld	ra,24(sp)
+    80000cb4:	6442                	ld	s0,16(sp)
+    80000cb6:	64a2                	ld	s1,8(sp)
+    80000cb8:	6105                	addi	sp,sp,32
+    80000cba:	8082                	ret
+    panic("release");
+    80000cbc:	00007517          	auipc	a0,0x7
+    80000cc0:	3cc50513          	addi	a0,a0,972 # 80008088 <digits+0x58>
+    80000cc4:	00000097          	auipc	ra,0x0
+    80000cc8:	876080e7          	jalr	-1930(ra) # 8000053a <panic>
+
+0000000080000ccc <memset>:
+#include "types.h"
+
+void*
+memset(void *dst, int c, uint n)
+{
+    80000ccc:	1141                	addi	sp,sp,-16
+    80000cce:	e422                	sd	s0,8(sp)
+    80000cd0:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+    80000cd2:	ca19                	beqz	a2,80000ce8 <memset+0x1c>
+    80000cd4:	87aa                	mv	a5,a0
+    80000cd6:	1602                	slli	a2,a2,0x20
+    80000cd8:	9201                	srli	a2,a2,0x20
+    80000cda:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+    80000cde:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+    80000ce2:	0785                	addi	a5,a5,1
+    80000ce4:	fee79de3          	bne	a5,a4,80000cde <memset+0x12>
+  }
+  return dst;
+}
+    80000ce8:	6422                	ld	s0,8(sp)
+    80000cea:	0141                	addi	sp,sp,16
+    80000cec:	8082                	ret
+
+0000000080000cee <memcmp>:
+
+int
+memcmp(const void *v1, const void *v2, uint n)
+{
+    80000cee:	1141                	addi	sp,sp,-16
+    80000cf0:	e422                	sd	s0,8(sp)
+    80000cf2:	0800                	addi	s0,sp,16
+  const uchar *s1, *s2;
+
+  s1 = v1;
+  s2 = v2;
+  while(n-- > 0){
+    80000cf4:	ca05                	beqz	a2,80000d24 <memcmp+0x36>
+    80000cf6:	fff6069b          	addiw	a3,a2,-1 # fff <_entry-0x7ffff001>
+    80000cfa:	1682                	slli	a3,a3,0x20
+    80000cfc:	9281                	srli	a3,a3,0x20
+    80000cfe:	0685                	addi	a3,a3,1
+    80000d00:	96aa                	add	a3,a3,a0
+    if(*s1 != *s2)
+    80000d02:	00054783          	lbu	a5,0(a0)
+    80000d06:	0005c703          	lbu	a4,0(a1)
+    80000d0a:	00e79863          	bne	a5,a4,80000d1a <memcmp+0x2c>
+      return *s1 - *s2;
+    s1++, s2++;
+    80000d0e:	0505                	addi	a0,a0,1
+    80000d10:	0585                	addi	a1,a1,1
+  while(n-- > 0){
+    80000d12:	fed518e3          	bne	a0,a3,80000d02 <memcmp+0x14>
+  }
+
+  return 0;
+    80000d16:	4501                	li	a0,0
+    80000d18:	a019                	j	80000d1e <memcmp+0x30>
+      return *s1 - *s2;
+    80000d1a:	40e7853b          	subw	a0,a5,a4
+}
+    80000d1e:	6422                	ld	s0,8(sp)
+    80000d20:	0141                	addi	sp,sp,16
+    80000d22:	8082                	ret
+  return 0;
+    80000d24:	4501                	li	a0,0
+    80000d26:	bfe5                	j	80000d1e <memcmp+0x30>
+
+0000000080000d28 <memmove>:
+
+void*
+memmove(void *dst, const void *src, uint n)
+{
+    80000d28:	1141                	addi	sp,sp,-16
+    80000d2a:	e422                	sd	s0,8(sp)
+    80000d2c:	0800                	addi	s0,sp,16
+  const char *s;
+  char *d;
+
+  if(n == 0)
+    80000d2e:	c205                	beqz	a2,80000d4e <memmove+0x26>
+    return dst;
+  
+  s = src;
+  d = dst;
+  if(s < d && s + n > d){
+    80000d30:	02a5e263          	bltu	a1,a0,80000d54 <memmove+0x2c>
+    s += n;
+    d += n;
+    while(n-- > 0)
+      *--d = *--s;
+  } else
+    while(n-- > 0)
+    80000d34:	1602                	slli	a2,a2,0x20
+    80000d36:	9201                	srli	a2,a2,0x20
+    80000d38:	00c587b3          	add	a5,a1,a2
+{
+    80000d3c:	872a                	mv	a4,a0
+      *d++ = *s++;
+    80000d3e:	0585                	addi	a1,a1,1
+    80000d40:	0705                	addi	a4,a4,1 # fffffffffffff001 <end+0xffffffff7ffd6001>
+    80000d42:	fff5c683          	lbu	a3,-1(a1)
+    80000d46:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+    80000d4a:	fef59ae3          	bne	a1,a5,80000d3e <memmove+0x16>
+
+  return dst;
+}
+    80000d4e:	6422                	ld	s0,8(sp)
+    80000d50:	0141                	addi	sp,sp,16
+    80000d52:	8082                	ret
+  if(s < d && s + n > d){
+    80000d54:	02061693          	slli	a3,a2,0x20
+    80000d58:	9281                	srli	a3,a3,0x20
+    80000d5a:	00d58733          	add	a4,a1,a3
+    80000d5e:	fce57be3          	bgeu	a0,a4,80000d34 <memmove+0xc>
+    d += n;
+    80000d62:	96aa                	add	a3,a3,a0
+    while(n-- > 0)
+    80000d64:	fff6079b          	addiw	a5,a2,-1
+    80000d68:	1782                	slli	a5,a5,0x20
+    80000d6a:	9381                	srli	a5,a5,0x20
+    80000d6c:	fff7c793          	not	a5,a5
+    80000d70:	97ba                	add	a5,a5,a4
+      *--d = *--s;
+    80000d72:	177d                	addi	a4,a4,-1
+    80000d74:	16fd                	addi	a3,a3,-1
+    80000d76:	00074603          	lbu	a2,0(a4)
+    80000d7a:	00c68023          	sb	a2,0(a3)
+    while(n-- > 0)
+    80000d7e:	fee79ae3          	bne	a5,a4,80000d72 <memmove+0x4a>
+    80000d82:	b7f1                	j	80000d4e <memmove+0x26>
+
+0000000080000d84 <memcpy>:
+
+// memcpy exists to placate GCC.  Use memmove.
+void*
+memcpy(void *dst, const void *src, uint n)
+{
+    80000d84:	1141                	addi	sp,sp,-16
+    80000d86:	e406                	sd	ra,8(sp)
+    80000d88:	e022                	sd	s0,0(sp)
+    80000d8a:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+    80000d8c:	00000097          	auipc	ra,0x0
+    80000d90:	f9c080e7          	jalr	-100(ra) # 80000d28 <memmove>
+}
+    80000d94:	60a2                	ld	ra,8(sp)
+    80000d96:	6402                	ld	s0,0(sp)
+    80000d98:	0141                	addi	sp,sp,16
+    80000d9a:	8082                	ret
+
+0000000080000d9c <strncmp>:
+
+int
+strncmp(const char *p, const char *q, uint n)
+{
+    80000d9c:	1141                	addi	sp,sp,-16
+    80000d9e:	e422                	sd	s0,8(sp)
+    80000da0:	0800                	addi	s0,sp,16
+  while(n > 0 && *p && *p == *q)
+    80000da2:	ce11                	beqz	a2,80000dbe <strncmp+0x22>
+    80000da4:	00054783          	lbu	a5,0(a0)
+    80000da8:	cf89                	beqz	a5,80000dc2 <strncmp+0x26>
+    80000daa:	0005c703          	lbu	a4,0(a1)
+    80000dae:	00f71a63          	bne	a4,a5,80000dc2 <strncmp+0x26>
+    n--, p++, q++;
+    80000db2:	367d                	addiw	a2,a2,-1
+    80000db4:	0505                	addi	a0,a0,1
+    80000db6:	0585                	addi	a1,a1,1
+  while(n > 0 && *p && *p == *q)
+    80000db8:	f675                	bnez	a2,80000da4 <strncmp+0x8>
+  if(n == 0)
+    return 0;
+    80000dba:	4501                	li	a0,0
+    80000dbc:	a809                	j	80000dce <strncmp+0x32>
+    80000dbe:	4501                	li	a0,0
+    80000dc0:	a039                	j	80000dce <strncmp+0x32>
+  if(n == 0)
+    80000dc2:	ca09                	beqz	a2,80000dd4 <strncmp+0x38>
+  return (uchar)*p - (uchar)*q;
+    80000dc4:	00054503          	lbu	a0,0(a0)
+    80000dc8:	0005c783          	lbu	a5,0(a1)
+    80000dcc:	9d1d                	subw	a0,a0,a5
+}
+    80000dce:	6422                	ld	s0,8(sp)
+    80000dd0:	0141                	addi	sp,sp,16
+    80000dd2:	8082                	ret
+    return 0;
+    80000dd4:	4501                	li	a0,0
+    80000dd6:	bfe5                	j	80000dce <strncmp+0x32>
+
+0000000080000dd8 <strncpy>:
+
+char*
+strncpy(char *s, const char *t, int n)
+{
+    80000dd8:	1141                	addi	sp,sp,-16
+    80000dda:	e422                	sd	s0,8(sp)
+    80000ddc:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while(n-- > 0 && (*s++ = *t++) != 0)
+    80000dde:	872a                	mv	a4,a0
+    80000de0:	8832                	mv	a6,a2
+    80000de2:	367d                	addiw	a2,a2,-1
+    80000de4:	01005963          	blez	a6,80000df6 <strncpy+0x1e>
+    80000de8:	0705                	addi	a4,a4,1
+    80000dea:	0005c783          	lbu	a5,0(a1)
+    80000dee:	fef70fa3          	sb	a5,-1(a4)
+    80000df2:	0585                	addi	a1,a1,1
+    80000df4:	f7f5                	bnez	a5,80000de0 <strncpy+0x8>
+    ;
+  while(n-- > 0)
+    80000df6:	86ba                	mv	a3,a4
+    80000df8:	00c05c63          	blez	a2,80000e10 <strncpy+0x38>
+    *s++ = 0;
+    80000dfc:	0685                	addi	a3,a3,1
+    80000dfe:	fe068fa3          	sb	zero,-1(a3)
+  while(n-- > 0)
+    80000e02:	40d707bb          	subw	a5,a4,a3
+    80000e06:	37fd                	addiw	a5,a5,-1
+    80000e08:	010787bb          	addw	a5,a5,a6
+    80000e0c:	fef048e3          	bgtz	a5,80000dfc <strncpy+0x24>
+  return os;
+}
+    80000e10:	6422                	ld	s0,8(sp)
+    80000e12:	0141                	addi	sp,sp,16
+    80000e14:	8082                	ret
+
+0000000080000e16 <safestrcpy>:
+
+// Like strncpy but guaranteed to NUL-terminate.
+char*
+safestrcpy(char *s, const char *t, int n)
+{
+    80000e16:	1141                	addi	sp,sp,-16
+    80000e18:	e422                	sd	s0,8(sp)
+    80000e1a:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  if(n <= 0)
+    80000e1c:	02c05363          	blez	a2,80000e42 <safestrcpy+0x2c>
+    80000e20:	fff6069b          	addiw	a3,a2,-1
+    80000e24:	1682                	slli	a3,a3,0x20
+    80000e26:	9281                	srli	a3,a3,0x20
+    80000e28:	96ae                	add	a3,a3,a1
+    80000e2a:	87aa                	mv	a5,a0
+    return os;
+  while(--n > 0 && (*s++ = *t++) != 0)
+    80000e2c:	00d58963          	beq	a1,a3,80000e3e <safestrcpy+0x28>
+    80000e30:	0585                	addi	a1,a1,1
+    80000e32:	0785                	addi	a5,a5,1
+    80000e34:	fff5c703          	lbu	a4,-1(a1)
+    80000e38:	fee78fa3          	sb	a4,-1(a5)
+    80000e3c:	fb65                	bnez	a4,80000e2c <safestrcpy+0x16>
+    ;
+  *s = 0;
+    80000e3e:	00078023          	sb	zero,0(a5)
+  return os;
+}
+    80000e42:	6422                	ld	s0,8(sp)
+    80000e44:	0141                	addi	sp,sp,16
+    80000e46:	8082                	ret
+
+0000000080000e48 <strlen>:
+
+int
+strlen(const char *s)
+{
+    80000e48:	1141                	addi	sp,sp,-16
+    80000e4a:	e422                	sd	s0,8(sp)
+    80000e4c:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+    80000e4e:	00054783          	lbu	a5,0(a0)
+    80000e52:	cf91                	beqz	a5,80000e6e <strlen+0x26>
+    80000e54:	0505                	addi	a0,a0,1
+    80000e56:	87aa                	mv	a5,a0
+    80000e58:	4685                	li	a3,1
+    80000e5a:	9e89                	subw	a3,a3,a0
+    80000e5c:	00f6853b          	addw	a0,a3,a5
+    80000e60:	0785                	addi	a5,a5,1
+    80000e62:	fff7c703          	lbu	a4,-1(a5)
+    80000e66:	fb7d                	bnez	a4,80000e5c <strlen+0x14>
+    ;
+  return n;
+}
+    80000e68:	6422                	ld	s0,8(sp)
+    80000e6a:	0141                	addi	sp,sp,16
+    80000e6c:	8082                	ret
+  for(n = 0; s[n]; n++)
+    80000e6e:	4501                	li	a0,0
+    80000e70:	bfe5                	j	80000e68 <strlen+0x20>
+
+0000000080000e72 <main>:
+volatile static int started = 0;
+
+// start() jumps here in supervisor mode on all CPUs.
+void
+main()
+{
+    80000e72:	1141                	addi	sp,sp,-16
+    80000e74:	e406                	sd	ra,8(sp)
+    80000e76:	e022                	sd	s0,0(sp)
+    80000e78:	0800                	addi	s0,sp,16
+  if(cpuid() == 0){
+    80000e7a:	00001097          	auipc	ra,0x1
+    80000e7e:	ed0080e7          	jalr	-304(ra) # 80001d4a <cpuid>
+    virtio_disk_init(); // emulated hard disk
+    userinit();      // first user process
+    __sync_synchronize();
+    started = 1;
+  } else {
+    while(started == 0)
+    80000e82:	00008717          	auipc	a4,0x8
+    80000e86:	19670713          	addi	a4,a4,406 # 80009018 <started>
+  if(cpuid() == 0){
+    80000e8a:	c139                	beqz	a0,80000ed0 <main+0x5e>
+    while(started == 0)
+    80000e8c:	431c                	lw	a5,0(a4)
+    80000e8e:	2781                	sext.w	a5,a5
+    80000e90:	dff5                	beqz	a5,80000e8c <main+0x1a>
+      ;
+    __sync_synchronize();
+    80000e92:	0ff0000f          	fence
+    printf("hart %d starting\n", cpuid());
+    80000e96:	00001097          	auipc	ra,0x1
+    80000e9a:	eb4080e7          	jalr	-332(ra) # 80001d4a <cpuid>
+    80000e9e:	85aa                	mv	a1,a0
+    80000ea0:	00007517          	auipc	a0,0x7
+    80000ea4:	20850513          	addi	a0,a0,520 # 800080a8 <digits+0x78>
+    80000ea8:	fffff097          	auipc	ra,0xfffff
+    80000eac:	6dc080e7          	jalr	1756(ra) # 80000584 <printf>
+    kvminithart();    // turn on paging
+    80000eb0:	00000097          	auipc	ra,0x0
+    80000eb4:	0e0080e7          	jalr	224(ra) # 80000f90 <kvminithart>
+    trapinithart();   // install kernel trap vector
+    80000eb8:	00002097          	auipc	ra,0x2
+    80000ebc:	ce4080e7          	jalr	-796(ra) # 80002b9c <trapinithart>
+    plicinithart();   // ask PLIC for device interrupts
+    80000ec0:	00005097          	auipc	ra,0x5
+    80000ec4:	3f0080e7          	jalr	1008(ra) # 800062b0 <plicinithart>
+  }
+
+  scheduler();        
+    80000ec8:	00001097          	auipc	ra,0x1
+    80000ecc:	4ba080e7          	jalr	1210(ra) # 80002382 <scheduler>
+    consoleinit();
+    80000ed0:	fffff097          	auipc	ra,0xfffff
+    80000ed4:	57a080e7          	jalr	1402(ra) # 8000044a <consoleinit>
+    printfinit();
+    80000ed8:	00000097          	auipc	ra,0x0
+    80000edc:	88c080e7          	jalr	-1908(ra) # 80000764 <printfinit>
+    printf("\n");
+    80000ee0:	00007517          	auipc	a0,0x7
+    80000ee4:	1d850513          	addi	a0,a0,472 # 800080b8 <digits+0x88>
+    80000ee8:	fffff097          	auipc	ra,0xfffff
+    80000eec:	69c080e7          	jalr	1692(ra) # 80000584 <printf>
+    printf("xv6 kernel is booting\n");
+    80000ef0:	00007517          	auipc	a0,0x7
+    80000ef4:	1a050513          	addi	a0,a0,416 # 80008090 <digits+0x60>
+    80000ef8:	fffff097          	auipc	ra,0xfffff
+    80000efc:	68c080e7          	jalr	1676(ra) # 80000584 <printf>
+    printf("\n");
+    80000f00:	00007517          	auipc	a0,0x7
+    80000f04:	1b850513          	addi	a0,a0,440 # 800080b8 <digits+0x88>
+    80000f08:	fffff097          	auipc	ra,0xfffff
+    80000f0c:	67c080e7          	jalr	1660(ra) # 80000584 <printf>
+    kinit();         // physical page allocator
+    80000f10:	00000097          	auipc	ra,0x0
+    80000f14:	b94080e7          	jalr	-1132(ra) # 80000aa4 <kinit>
+    kvminit();       // create kernel page table
+    80000f18:	00000097          	auipc	ra,0x0
+    80000f1c:	32a080e7          	jalr	810(ra) # 80001242 <kvminit>
+    kvminithart();   // turn on paging
+    80000f20:	00000097          	auipc	ra,0x0
+    80000f24:	070080e7          	jalr	112(ra) # 80000f90 <kvminithart>
+    seminit();       // semaphore table
+    80000f28:	00001097          	auipc	ra,0x1
+    80000f2c:	904080e7          	jalr	-1788(ra) # 8000182c <seminit>
+    procinit();      // process table
+    80000f30:	00001097          	auipc	ra,0x1
+    80000f34:	d66080e7          	jalr	-666(ra) # 80001c96 <procinit>
+    trapinit();      // trap vectors
+    80000f38:	00002097          	auipc	ra,0x2
+    80000f3c:	c3c080e7          	jalr	-964(ra) # 80002b74 <trapinit>
+    trapinithart();  // install kernel trap vector
+    80000f40:	00002097          	auipc	ra,0x2
+    80000f44:	c5c080e7          	jalr	-932(ra) # 80002b9c <trapinithart>
+    plicinit();      // set up interrupt controller
+    80000f48:	00005097          	auipc	ra,0x5
+    80000f4c:	352080e7          	jalr	850(ra) # 8000629a <plicinit>
+    plicinithart();  // ask PLIC for device interrupts
+    80000f50:	00005097          	auipc	ra,0x5
+    80000f54:	360080e7          	jalr	864(ra) # 800062b0 <plicinithart>
+    binit();         // buffer cache
+    80000f58:	00002097          	auipc	ra,0x2
+    80000f5c:	520080e7          	jalr	1312(ra) # 80003478 <binit>
+    iinit();         // inode table
+    80000f60:	00003097          	auipc	ra,0x3
+    80000f64:	bae080e7          	jalr	-1106(ra) # 80003b0e <iinit>
+    fileinit();      // file table
+    80000f68:	00004097          	auipc	ra,0x4
+    80000f6c:	b60080e7          	jalr	-1184(ra) # 80004ac8 <fileinit>
+    virtio_disk_init(); // emulated hard disk
+    80000f70:	00005097          	auipc	ra,0x5
+    80000f74:	460080e7          	jalr	1120(ra) # 800063d0 <virtio_disk_init>
+    userinit();      // first user process
+    80000f78:	00001097          	auipc	ra,0x1
+    80000f7c:	0d6080e7          	jalr	214(ra) # 8000204e <userinit>
+    __sync_synchronize();
+    80000f80:	0ff0000f          	fence
+    started = 1;
+    80000f84:	4785                	li	a5,1
+    80000f86:	00008717          	auipc	a4,0x8
+    80000f8a:	08f72923          	sw	a5,146(a4) # 80009018 <started>
+    80000f8e:	bf2d                	j	80000ec8 <main+0x56>
+
+0000000080000f90 <kvminithart>:
+
+// Switch h/w page table register to the kernel's page table,
+// and enable paging.
+void
+kvminithart()
+{
+    80000f90:	1141                	addi	sp,sp,-16
+    80000f92:	e422                	sd	s0,8(sp)
+    80000f94:	0800                	addi	s0,sp,16
+  w_satp(MAKE_SATP(kernel_pagetable));
+    80000f96:	00008797          	auipc	a5,0x8
+    80000f9a:	08a7b783          	ld	a5,138(a5) # 80009020 <kernel_pagetable>
+    80000f9e:	83b1                	srli	a5,a5,0xc
+    80000fa0:	577d                	li	a4,-1
+    80000fa2:	177e                	slli	a4,a4,0x3f
+    80000fa4:	8fd9                	or	a5,a5,a4
+  asm volatile("csrw satp, %0" : : "r" (x));
+    80000fa6:	18079073          	csrw	satp,a5
+// flush the TLB.
+static inline void
+sfence_vma()
+{
+  // the zero, zero means flush all TLB entries.
+  asm volatile("sfence.vma zero, zero");
+    80000faa:	12000073          	sfence.vma
+  sfence_vma();
+}
+    80000fae:	6422                	ld	s0,8(sp)
+    80000fb0:	0141                	addi	sp,sp,16
+    80000fb2:	8082                	ret
+
+0000000080000fb4 <walk>:
+//   21..29 -- 9 bits of level-1 index.
+//   12..20 -- 9 bits of level-0 index.
+//    0..11 -- 12 bits of byte offset within the page.
+pte_t *
+walk(pagetable_t pagetable, uint64 va, int alloc)
+{
+    80000fb4:	7139                	addi	sp,sp,-64
+    80000fb6:	fc06                	sd	ra,56(sp)
+    80000fb8:	f822                	sd	s0,48(sp)
+    80000fba:	f426                	sd	s1,40(sp)
+    80000fbc:	f04a                	sd	s2,32(sp)
+    80000fbe:	ec4e                	sd	s3,24(sp)
+    80000fc0:	e852                	sd	s4,16(sp)
+    80000fc2:	e456                	sd	s5,8(sp)
+    80000fc4:	e05a                	sd	s6,0(sp)
+    80000fc6:	0080                	addi	s0,sp,64
+    80000fc8:	84aa                	mv	s1,a0
+    80000fca:	89ae                	mv	s3,a1
+    80000fcc:	8ab2                	mv	s5,a2
+  if(va >= MAXVA)
+    80000fce:	57fd                	li	a5,-1
+    80000fd0:	83e9                	srli	a5,a5,0x1a
+    80000fd2:	4a79                	li	s4,30
+    panic("walk");
+
+  for(int level = 2; level > 0; level--) {
+    80000fd4:	4b31                	li	s6,12
+  if(va >= MAXVA)
+    80000fd6:	04b7f263          	bgeu	a5,a1,8000101a <walk+0x66>
+    panic("walk");
+    80000fda:	00007517          	auipc	a0,0x7
+    80000fde:	0e650513          	addi	a0,a0,230 # 800080c0 <digits+0x90>
+    80000fe2:	fffff097          	auipc	ra,0xfffff
+    80000fe6:	558080e7          	jalr	1368(ra) # 8000053a <panic>
+    pte_t *pte = &pagetable[PX(level, va)];
+    if(*pte & PTE_V) {
+      pagetable = (pagetable_t)PTE2PA(*pte);
+    } else {
+      if(!alloc || (pagetable = (pde_t*)kalloc()) == 0)
+    80000fea:	060a8663          	beqz	s5,80001056 <walk+0xa2>
+    80000fee:	00000097          	auipc	ra,0x0
+    80000ff2:	af2080e7          	jalr	-1294(ra) # 80000ae0 <kalloc>
+    80000ff6:	84aa                	mv	s1,a0
+    80000ff8:	c529                	beqz	a0,80001042 <walk+0x8e>
+        return 0;
+      memset(pagetable, 0, PGSIZE);
+    80000ffa:	6605                	lui	a2,0x1
+    80000ffc:	4581                	li	a1,0
+    80000ffe:	00000097          	auipc	ra,0x0
+    80001002:	cce080e7          	jalr	-818(ra) # 80000ccc <memset>
+      *pte = PA2PTE(pagetable) | PTE_V;
+    80001006:	00c4d793          	srli	a5,s1,0xc
+    8000100a:	07aa                	slli	a5,a5,0xa
+    8000100c:	0017e793          	ori	a5,a5,1
+    80001010:	00f93023          	sd	a5,0(s2)
+  for(int level = 2; level > 0; level--) {
+    80001014:	3a5d                	addiw	s4,s4,-9 # ffffffffffffeff7 <end+0xffffffff7ffd5ff7>
+    80001016:	036a0063          	beq	s4,s6,80001036 <walk+0x82>
+    pte_t *pte = &pagetable[PX(level, va)];
+    8000101a:	0149d933          	srl	s2,s3,s4
+    8000101e:	1ff97913          	andi	s2,s2,511
+    80001022:	090e                	slli	s2,s2,0x3
+    80001024:	9926                	add	s2,s2,s1
+    if(*pte & PTE_V) {
+    80001026:	00093483          	ld	s1,0(s2)
+    8000102a:	0014f793          	andi	a5,s1,1
+    8000102e:	dfd5                	beqz	a5,80000fea <walk+0x36>
+      pagetable = (pagetable_t)PTE2PA(*pte);
+    80001030:	80a9                	srli	s1,s1,0xa
+    80001032:	04b2                	slli	s1,s1,0xc
+    80001034:	b7c5                	j	80001014 <walk+0x60>
+    }
+  }
+  return &pagetable[PX(0, va)];
+    80001036:	00c9d513          	srli	a0,s3,0xc
+    8000103a:	1ff57513          	andi	a0,a0,511
+    8000103e:	050e                	slli	a0,a0,0x3
+    80001040:	9526                	add	a0,a0,s1
+}
+    80001042:	70e2                	ld	ra,56(sp)
+    80001044:	7442                	ld	s0,48(sp)
+    80001046:	74a2                	ld	s1,40(sp)
+    80001048:	7902                	ld	s2,32(sp)
+    8000104a:	69e2                	ld	s3,24(sp)
+    8000104c:	6a42                	ld	s4,16(sp)
+    8000104e:	6aa2                	ld	s5,8(sp)
+    80001050:	6b02                	ld	s6,0(sp)
+    80001052:	6121                	addi	sp,sp,64
+    80001054:	8082                	ret
+        return 0;
+    80001056:	4501                	li	a0,0
+    80001058:	b7ed                	j	80001042 <walk+0x8e>
+
+000000008000105a <walkaddr>:
+walkaddr(pagetable_t pagetable, uint64 va)
+{
+  pte_t *pte;
+  uint64 pa;
+
+  if(va >= MAXVA)
+    8000105a:	57fd                	li	a5,-1
+    8000105c:	83e9                	srli	a5,a5,0x1a
+    8000105e:	00b7f463          	bgeu	a5,a1,80001066 <walkaddr+0xc>
+    return 0;
+    80001062:	4501                	li	a0,0
+    return 0;
+  if((*pte & PTE_U) == 0)
+    return 0;
+  pa = PTE2PA(*pte);
+  return pa;
+}
+    80001064:	8082                	ret
+{
+    80001066:	1141                	addi	sp,sp,-16
+    80001068:	e406                	sd	ra,8(sp)
+    8000106a:	e022                	sd	s0,0(sp)
+    8000106c:	0800                	addi	s0,sp,16
+  pte = walk(pagetable, va, 0);
+    8000106e:	4601                	li	a2,0
+    80001070:	00000097          	auipc	ra,0x0
+    80001074:	f44080e7          	jalr	-188(ra) # 80000fb4 <walk>
+  if(pte == 0)
+    80001078:	c105                	beqz	a0,80001098 <walkaddr+0x3e>
+  if((*pte & PTE_V) == 0)
+    8000107a:	611c                	ld	a5,0(a0)
+  if((*pte & PTE_U) == 0)
+    8000107c:	0117f693          	andi	a3,a5,17
+    80001080:	4745                	li	a4,17
+    return 0;
+    80001082:	4501                	li	a0,0
+  if((*pte & PTE_U) == 0)
+    80001084:	00e68663          	beq	a3,a4,80001090 <walkaddr+0x36>
+}
+    80001088:	60a2                	ld	ra,8(sp)
+    8000108a:	6402                	ld	s0,0(sp)
+    8000108c:	0141                	addi	sp,sp,16
+    8000108e:	8082                	ret
+  pa = PTE2PA(*pte);
+    80001090:	83a9                	srli	a5,a5,0xa
+    80001092:	00c79513          	slli	a0,a5,0xc
+  return pa;
+    80001096:	bfcd                	j	80001088 <walkaddr+0x2e>
+    return 0;
+    80001098:	4501                	li	a0,0
+    8000109a:	b7fd                	j	80001088 <walkaddr+0x2e>
+
+000000008000109c <mappages>:
+// physical addresses starting at pa. va and size might not
+// be page-aligned. Returns 0 on success, -1 if walk() couldn't
+// allocate a needed page-table page.
+int
+mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)
+{
+    8000109c:	715d                	addi	sp,sp,-80
+    8000109e:	e486                	sd	ra,72(sp)
+    800010a0:	e0a2                	sd	s0,64(sp)
+    800010a2:	fc26                	sd	s1,56(sp)
+    800010a4:	f84a                	sd	s2,48(sp)
+    800010a6:	f44e                	sd	s3,40(sp)
+    800010a8:	f052                	sd	s4,32(sp)
+    800010aa:	ec56                	sd	s5,24(sp)
+    800010ac:	e85a                	sd	s6,16(sp)
+    800010ae:	e45e                	sd	s7,8(sp)
+    800010b0:	0880                	addi	s0,sp,80
+  uint64 a, last;
+  pte_t *pte;
+
+  if(size == 0)
+    800010b2:	c639                	beqz	a2,80001100 <mappages+0x64>
+    800010b4:	8aaa                	mv	s5,a0
+    800010b6:	8b3a                	mv	s6,a4
+    panic("mappages: size");
+  
+  a = PGROUNDDOWN(va);
+    800010b8:	777d                	lui	a4,0xfffff
+    800010ba:	00e5f7b3          	and	a5,a1,a4
+  last = PGROUNDDOWN(va + size - 1);
+    800010be:	fff58993          	addi	s3,a1,-1
+    800010c2:	99b2                	add	s3,s3,a2
+    800010c4:	00e9f9b3          	and	s3,s3,a4
+  a = PGROUNDDOWN(va);
+    800010c8:	893e                	mv	s2,a5
+    800010ca:	40f68a33          	sub	s4,a3,a5
+    if(*pte & PTE_V)
+      panic("mappages: remap");
+    *pte = PA2PTE(pa) | perm | PTE_V;
+    if(a == last)
+      break;
+    a += PGSIZE;
+    800010ce:	6b85                	lui	s7,0x1
+    800010d0:	012a04b3          	add	s1,s4,s2
+    if((pte = walk(pagetable, a, 1)) == 0)
+    800010d4:	4605                	li	a2,1
+    800010d6:	85ca                	mv	a1,s2
+    800010d8:	8556                	mv	a0,s5
+    800010da:	00000097          	auipc	ra,0x0
+    800010de:	eda080e7          	jalr	-294(ra) # 80000fb4 <walk>
+    800010e2:	cd1d                	beqz	a0,80001120 <mappages+0x84>
+    if(*pte & PTE_V)
+    800010e4:	611c                	ld	a5,0(a0)
+    800010e6:	8b85                	andi	a5,a5,1
+    800010e8:	e785                	bnez	a5,80001110 <mappages+0x74>
+    *pte = PA2PTE(pa) | perm | PTE_V;
+    800010ea:	80b1                	srli	s1,s1,0xc
+    800010ec:	04aa                	slli	s1,s1,0xa
+    800010ee:	0164e4b3          	or	s1,s1,s6
+    800010f2:	0014e493          	ori	s1,s1,1
+    800010f6:	e104                	sd	s1,0(a0)
+    if(a == last)
+    800010f8:	05390063          	beq	s2,s3,80001138 <mappages+0x9c>
+    a += PGSIZE;
+    800010fc:	995e                	add	s2,s2,s7
+    if((pte = walk(pagetable, a, 1)) == 0)
+    800010fe:	bfc9                	j	800010d0 <mappages+0x34>
+    panic("mappages: size");
+    80001100:	00007517          	auipc	a0,0x7
+    80001104:	fc850513          	addi	a0,a0,-56 # 800080c8 <digits+0x98>
+    80001108:	fffff097          	auipc	ra,0xfffff
+    8000110c:	432080e7          	jalr	1074(ra) # 8000053a <panic>
+      panic("mappages: remap");
+    80001110:	00007517          	auipc	a0,0x7
+    80001114:	fc850513          	addi	a0,a0,-56 # 800080d8 <digits+0xa8>
+    80001118:	fffff097          	auipc	ra,0xfffff
+    8000111c:	422080e7          	jalr	1058(ra) # 8000053a <panic>
+      return -1;
+    80001120:	557d                	li	a0,-1
+    pa += PGSIZE;
+  }
+  return 0;
+}
+    80001122:	60a6                	ld	ra,72(sp)
+    80001124:	6406                	ld	s0,64(sp)
+    80001126:	74e2                	ld	s1,56(sp)
+    80001128:	7942                	ld	s2,48(sp)
+    8000112a:	79a2                	ld	s3,40(sp)
+    8000112c:	7a02                	ld	s4,32(sp)
+    8000112e:	6ae2                	ld	s5,24(sp)
+    80001130:	6b42                	ld	s6,16(sp)
+    80001132:	6ba2                	ld	s7,8(sp)
+    80001134:	6161                	addi	sp,sp,80
+    80001136:	8082                	ret
+  return 0;
+    80001138:	4501                	li	a0,0
+    8000113a:	b7e5                	j	80001122 <mappages+0x86>
+
+000000008000113c <kvmmap>:
+{
+    8000113c:	1141                	addi	sp,sp,-16
+    8000113e:	e406                	sd	ra,8(sp)
+    80001140:	e022                	sd	s0,0(sp)
+    80001142:	0800                	addi	s0,sp,16
+    80001144:	87b6                	mv	a5,a3
+  if(mappages(kpgtbl, va, sz, pa, perm) != 0)
+    80001146:	86b2                	mv	a3,a2
+    80001148:	863e                	mv	a2,a5
+    8000114a:	00000097          	auipc	ra,0x0
+    8000114e:	f52080e7          	jalr	-174(ra) # 8000109c <mappages>
+    80001152:	e509                	bnez	a0,8000115c <kvmmap+0x20>
+}
+    80001154:	60a2                	ld	ra,8(sp)
+    80001156:	6402                	ld	s0,0(sp)
+    80001158:	0141                	addi	sp,sp,16
+    8000115a:	8082                	ret
+    panic("kvmmap");
+    8000115c:	00007517          	auipc	a0,0x7
+    80001160:	f8c50513          	addi	a0,a0,-116 # 800080e8 <digits+0xb8>
+    80001164:	fffff097          	auipc	ra,0xfffff
+    80001168:	3d6080e7          	jalr	982(ra) # 8000053a <panic>
+
+000000008000116c <kvmmake>:
+{
+    8000116c:	1101                	addi	sp,sp,-32
+    8000116e:	ec06                	sd	ra,24(sp)
+    80001170:	e822                	sd	s0,16(sp)
+    80001172:	e426                	sd	s1,8(sp)
+    80001174:	e04a                	sd	s2,0(sp)
+    80001176:	1000                	addi	s0,sp,32
+  kpgtbl = (pagetable_t) kalloc();
+    80001178:	00000097          	auipc	ra,0x0
+    8000117c:	968080e7          	jalr	-1688(ra) # 80000ae0 <kalloc>
+    80001180:	84aa                	mv	s1,a0
+  memset(kpgtbl, 0, PGSIZE);
+    80001182:	6605                	lui	a2,0x1
+    80001184:	4581                	li	a1,0
+    80001186:	00000097          	auipc	ra,0x0
+    8000118a:	b46080e7          	jalr	-1210(ra) # 80000ccc <memset>
+  kvmmap(kpgtbl, UART0, UART0, PGSIZE, PTE_R | PTE_W);
+    8000118e:	4719                	li	a4,6
+    80001190:	6685                	lui	a3,0x1
+    80001192:	10000637          	lui	a2,0x10000
+    80001196:	100005b7          	lui	a1,0x10000
+    8000119a:	8526                	mv	a0,s1
+    8000119c:	00000097          	auipc	ra,0x0
+    800011a0:	fa0080e7          	jalr	-96(ra) # 8000113c <kvmmap>
+  kvmmap(kpgtbl, VIRTIO0, VIRTIO0, PGSIZE, PTE_R | PTE_W);
+    800011a4:	4719                	li	a4,6
+    800011a6:	6685                	lui	a3,0x1
+    800011a8:	10001637          	lui	a2,0x10001
+    800011ac:	100015b7          	lui	a1,0x10001
+    800011b0:	8526                	mv	a0,s1
+    800011b2:	00000097          	auipc	ra,0x0
+    800011b6:	f8a080e7          	jalr	-118(ra) # 8000113c <kvmmap>
+  kvmmap(kpgtbl, PLIC, PLIC, 0x400000, PTE_R | PTE_W);
+    800011ba:	4719                	li	a4,6
+    800011bc:	004006b7          	lui	a3,0x400
+    800011c0:	0c000637          	lui	a2,0xc000
+    800011c4:	0c0005b7          	lui	a1,0xc000
+    800011c8:	8526                	mv	a0,s1
+    800011ca:	00000097          	auipc	ra,0x0
+    800011ce:	f72080e7          	jalr	-142(ra) # 8000113c <kvmmap>
+  kvmmap(kpgtbl, KERNBASE, KERNBASE, (uint64)etext-KERNBASE, PTE_R | PTE_X);
+    800011d2:	00007917          	auipc	s2,0x7
+    800011d6:	e2e90913          	addi	s2,s2,-466 # 80008000 <etext>
+    800011da:	4729                	li	a4,10
+    800011dc:	80007697          	auipc	a3,0x80007
+    800011e0:	e2468693          	addi	a3,a3,-476 # 8000 <_entry-0x7fff8000>
+    800011e4:	4605                	li	a2,1
+    800011e6:	067e                	slli	a2,a2,0x1f
+    800011e8:	85b2                	mv	a1,a2
+    800011ea:	8526                	mv	a0,s1
+    800011ec:	00000097          	auipc	ra,0x0
+    800011f0:	f50080e7          	jalr	-176(ra) # 8000113c <kvmmap>
+  kvmmap(kpgtbl, (uint64)etext, (uint64)etext, PHYSTOP-(uint64)etext, PTE_R | PTE_W);
+    800011f4:	4719                	li	a4,6
+    800011f6:	46c5                	li	a3,17
+    800011f8:	06ee                	slli	a3,a3,0x1b
+    800011fa:	412686b3          	sub	a3,a3,s2
+    800011fe:	864a                	mv	a2,s2
+    80001200:	85ca                	mv	a1,s2
+    80001202:	8526                	mv	a0,s1
+    80001204:	00000097          	auipc	ra,0x0
+    80001208:	f38080e7          	jalr	-200(ra) # 8000113c <kvmmap>
+  kvmmap(kpgtbl, TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_R | PTE_X);
+    8000120c:	4729                	li	a4,10
+    8000120e:	6685                	lui	a3,0x1
+    80001210:	00006617          	auipc	a2,0x6
+    80001214:	df060613          	addi	a2,a2,-528 # 80007000 <_trampoline>
+    80001218:	040005b7          	lui	a1,0x4000
+    8000121c:	15fd                	addi	a1,a1,-1 # 3ffffff <_entry-0x7c000001>
+    8000121e:	05b2                	slli	a1,a1,0xc
+    80001220:	8526                	mv	a0,s1
+    80001222:	00000097          	auipc	ra,0x0
+    80001226:	f1a080e7          	jalr	-230(ra) # 8000113c <kvmmap>
+  proc_mapstacks(kpgtbl);
+    8000122a:	8526                	mv	a0,s1
+    8000122c:	00001097          	auipc	ra,0x1
+    80001230:	9e8080e7          	jalr	-1560(ra) # 80001c14 <proc_mapstacks>
+}
+    80001234:	8526                	mv	a0,s1
+    80001236:	60e2                	ld	ra,24(sp)
+    80001238:	6442                	ld	s0,16(sp)
+    8000123a:	64a2                	ld	s1,8(sp)
+    8000123c:	6902                	ld	s2,0(sp)
+    8000123e:	6105                	addi	sp,sp,32
+    80001240:	8082                	ret
+
+0000000080001242 <kvminit>:
+{
+    80001242:	1141                	addi	sp,sp,-16
+    80001244:	e406                	sd	ra,8(sp)
+    80001246:	e022                	sd	s0,0(sp)
+    80001248:	0800                	addi	s0,sp,16
+  kernel_pagetable = kvmmake();
+    8000124a:	00000097          	auipc	ra,0x0
+    8000124e:	f22080e7          	jalr	-222(ra) # 8000116c <kvmmake>
+    80001252:	00008797          	auipc	a5,0x8
+    80001256:	dca7b723          	sd	a0,-562(a5) # 80009020 <kernel_pagetable>
+}
+    8000125a:	60a2                	ld	ra,8(sp)
+    8000125c:	6402                	ld	s0,0(sp)
+    8000125e:	0141                	addi	sp,sp,16
+    80001260:	8082                	ret
+
+0000000080001262 <uvmunmap>:
+// Remove npages of mappings starting from va. va must be
+// page-aligned. The mappings must exist.
+// Optionally free the physical memory.
+void
+uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
+{
+    80001262:	715d                	addi	sp,sp,-80
+    80001264:	e486                	sd	ra,72(sp)
+    80001266:	e0a2                	sd	s0,64(sp)
+    80001268:	fc26                	sd	s1,56(sp)
+    8000126a:	f84a                	sd	s2,48(sp)
+    8000126c:	f44e                	sd	s3,40(sp)
+    8000126e:	f052                	sd	s4,32(sp)
+    80001270:	ec56                	sd	s5,24(sp)
+    80001272:	e85a                	sd	s6,16(sp)
+    80001274:	e45e                	sd	s7,8(sp)
+    80001276:	0880                	addi	s0,sp,80
+  uint64 a;
+  pte_t *pte;
+
+  if((va % PGSIZE) != 0)
+    80001278:	03459793          	slli	a5,a1,0x34
+    8000127c:	e795                	bnez	a5,800012a8 <uvmunmap+0x46>
+    8000127e:	8a2a                	mv	s4,a0
+    80001280:	892e                	mv	s2,a1
+    80001282:	8ab6                	mv	s5,a3
+    panic("uvmunmap: not aligned");
+
+  for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
+    80001284:	0632                	slli	a2,a2,0xc
+    80001286:	00b609b3          	add	s3,a2,a1
+    if((pte = walk(pagetable, a, 0)) == 0)
+      panic("uvmunmap: walk");
+    if((*pte & PTE_V) == 0)
+      panic("uvmunmap: not mapped");
+    if(PTE_FLAGS(*pte) == PTE_V)
+    8000128a:	4b85                	li	s7,1
+  for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
+    8000128c:	6b05                	lui	s6,0x1
+    8000128e:	0735e263          	bltu	a1,s3,800012f2 <uvmunmap+0x90>
+      uint64 pa = PTE2PA(*pte);
+      kfree((void*)pa);
+    }
+    *pte = 0;
+  }
+}
+    80001292:	60a6                	ld	ra,72(sp)
+    80001294:	6406                	ld	s0,64(sp)
+    80001296:	74e2                	ld	s1,56(sp)
+    80001298:	7942                	ld	s2,48(sp)
+    8000129a:	79a2                	ld	s3,40(sp)
+    8000129c:	7a02                	ld	s4,32(sp)
+    8000129e:	6ae2                	ld	s5,24(sp)
+    800012a0:	6b42                	ld	s6,16(sp)
+    800012a2:	6ba2                	ld	s7,8(sp)
+    800012a4:	6161                	addi	sp,sp,80
+    800012a6:	8082                	ret
+    panic("uvmunmap: not aligned");
+    800012a8:	00007517          	auipc	a0,0x7
+    800012ac:	e4850513          	addi	a0,a0,-440 # 800080f0 <digits+0xc0>
+    800012b0:	fffff097          	auipc	ra,0xfffff
+    800012b4:	28a080e7          	jalr	650(ra) # 8000053a <panic>
+      panic("uvmunmap: walk");
+    800012b8:	00007517          	auipc	a0,0x7
+    800012bc:	e5050513          	addi	a0,a0,-432 # 80008108 <digits+0xd8>
+    800012c0:	fffff097          	auipc	ra,0xfffff
+    800012c4:	27a080e7          	jalr	634(ra) # 8000053a <panic>
+      panic("uvmunmap: not mapped");
+    800012c8:	00007517          	auipc	a0,0x7
+    800012cc:	e5050513          	addi	a0,a0,-432 # 80008118 <digits+0xe8>
+    800012d0:	fffff097          	auipc	ra,0xfffff
+    800012d4:	26a080e7          	jalr	618(ra) # 8000053a <panic>
+      panic("uvmunmap: not a leaf");
+    800012d8:	00007517          	auipc	a0,0x7
+    800012dc:	e5850513          	addi	a0,a0,-424 # 80008130 <digits+0x100>
+    800012e0:	fffff097          	auipc	ra,0xfffff
+    800012e4:	25a080e7          	jalr	602(ra) # 8000053a <panic>
+    *pte = 0;
+    800012e8:	0004b023          	sd	zero,0(s1)
+  for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
+    800012ec:	995a                	add	s2,s2,s6
+    800012ee:	fb3972e3          	bgeu	s2,s3,80001292 <uvmunmap+0x30>
+    if((pte = walk(pagetable, a, 0)) == 0)
+    800012f2:	4601                	li	a2,0
+    800012f4:	85ca                	mv	a1,s2
+    800012f6:	8552                	mv	a0,s4
+    800012f8:	00000097          	auipc	ra,0x0
+    800012fc:	cbc080e7          	jalr	-836(ra) # 80000fb4 <walk>
+    80001300:	84aa                	mv	s1,a0
+    80001302:	d95d                	beqz	a0,800012b8 <uvmunmap+0x56>
+    if((*pte & PTE_V) == 0)
+    80001304:	6108                	ld	a0,0(a0)
+    80001306:	00157793          	andi	a5,a0,1
+    8000130a:	dfdd                	beqz	a5,800012c8 <uvmunmap+0x66>
+    if(PTE_FLAGS(*pte) == PTE_V)
+    8000130c:	3ff57793          	andi	a5,a0,1023
+    80001310:	fd7784e3          	beq	a5,s7,800012d8 <uvmunmap+0x76>
+    if(do_free){
+    80001314:	fc0a8ae3          	beqz	s5,800012e8 <uvmunmap+0x86>
+      uint64 pa = PTE2PA(*pte);
+    80001318:	8129                	srli	a0,a0,0xa
+      kfree((void*)pa);
+    8000131a:	0532                	slli	a0,a0,0xc
+    8000131c:	fffff097          	auipc	ra,0xfffff
+    80001320:	6c6080e7          	jalr	1734(ra) # 800009e2 <kfree>
+    80001324:	b7d1                	j	800012e8 <uvmunmap+0x86>
+
+0000000080001326 <uvmcreate>:
+
+// create an empty user page table.
+// returns 0 if out of memory.
+pagetable_t
+uvmcreate()
+{
+    80001326:	1101                	addi	sp,sp,-32
+    80001328:	ec06                	sd	ra,24(sp)
+    8000132a:	e822                	sd	s0,16(sp)
+    8000132c:	e426                	sd	s1,8(sp)
+    8000132e:	1000                	addi	s0,sp,32
+  pagetable_t pagetable;
+  pagetable = (pagetable_t) kalloc();
+    80001330:	fffff097          	auipc	ra,0xfffff
+    80001334:	7b0080e7          	jalr	1968(ra) # 80000ae0 <kalloc>
+    80001338:	84aa                	mv	s1,a0
+  if(pagetable == 0)
+    8000133a:	c519                	beqz	a0,80001348 <uvmcreate+0x22>
+    return 0;
+  memset(pagetable, 0, PGSIZE);
+    8000133c:	6605                	lui	a2,0x1
+    8000133e:	4581                	li	a1,0
+    80001340:	00000097          	auipc	ra,0x0
+    80001344:	98c080e7          	jalr	-1652(ra) # 80000ccc <memset>
+  return pagetable;
+}
+    80001348:	8526                	mv	a0,s1
+    8000134a:	60e2                	ld	ra,24(sp)
+    8000134c:	6442                	ld	s0,16(sp)
+    8000134e:	64a2                	ld	s1,8(sp)
+    80001350:	6105                	addi	sp,sp,32
+    80001352:	8082                	ret
+
+0000000080001354 <uvminit>:
+// Load the user initcode into address 0 of pagetable,
+// for the very first process.
+// sz must be less than a page.
+void
+uvminit(pagetable_t pagetable, uchar *src, uint sz)
+{
+    80001354:	7179                	addi	sp,sp,-48
+    80001356:	f406                	sd	ra,40(sp)
+    80001358:	f022                	sd	s0,32(sp)
+    8000135a:	ec26                	sd	s1,24(sp)
+    8000135c:	e84a                	sd	s2,16(sp)
+    8000135e:	e44e                	sd	s3,8(sp)
+    80001360:	e052                	sd	s4,0(sp)
+    80001362:	1800                	addi	s0,sp,48
+  char *mem;
+
+  if(sz >= PGSIZE)
+    80001364:	6785                	lui	a5,0x1
+    80001366:	04f67863          	bgeu	a2,a5,800013b6 <uvminit+0x62>
+    8000136a:	8a2a                	mv	s4,a0
+    8000136c:	89ae                	mv	s3,a1
+    8000136e:	84b2                	mv	s1,a2
+    panic("inituvm: more than a page");
+  mem = kalloc();
+    80001370:	fffff097          	auipc	ra,0xfffff
+    80001374:	770080e7          	jalr	1904(ra) # 80000ae0 <kalloc>
+    80001378:	892a                	mv	s2,a0
+  memset(mem, 0, PGSIZE);
+    8000137a:	6605                	lui	a2,0x1
+    8000137c:	4581                	li	a1,0
+    8000137e:	00000097          	auipc	ra,0x0
+    80001382:	94e080e7          	jalr	-1714(ra) # 80000ccc <memset>
+  mappages(pagetable, 0, PGSIZE, (uint64)mem, PTE_W|PTE_R|PTE_X|PTE_U);
+    80001386:	4779                	li	a4,30
+    80001388:	86ca                	mv	a3,s2
+    8000138a:	6605                	lui	a2,0x1
+    8000138c:	4581                	li	a1,0
+    8000138e:	8552                	mv	a0,s4
+    80001390:	00000097          	auipc	ra,0x0
+    80001394:	d0c080e7          	jalr	-756(ra) # 8000109c <mappages>
+  memmove(mem, src, sz);
+    80001398:	8626                	mv	a2,s1
+    8000139a:	85ce                	mv	a1,s3
+    8000139c:	854a                	mv	a0,s2
+    8000139e:	00000097          	auipc	ra,0x0
+    800013a2:	98a080e7          	jalr	-1654(ra) # 80000d28 <memmove>
+}
+    800013a6:	70a2                	ld	ra,40(sp)
+    800013a8:	7402                	ld	s0,32(sp)
+    800013aa:	64e2                	ld	s1,24(sp)
+    800013ac:	6942                	ld	s2,16(sp)
+    800013ae:	69a2                	ld	s3,8(sp)
+    800013b0:	6a02                	ld	s4,0(sp)
+    800013b2:	6145                	addi	sp,sp,48
+    800013b4:	8082                	ret
+    panic("inituvm: more than a page");
+    800013b6:	00007517          	auipc	a0,0x7
+    800013ba:	d9250513          	addi	a0,a0,-622 # 80008148 <digits+0x118>
+    800013be:	fffff097          	auipc	ra,0xfffff
+    800013c2:	17c080e7          	jalr	380(ra) # 8000053a <panic>
+
+00000000800013c6 <uvmdealloc>:
+// newsz.  oldsz and newsz need not be page-aligned, nor does newsz
+// need to be less than oldsz.  oldsz can be larger than the actual
+// process size.  Returns the new process size.
+uint64
+uvmdealloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz)
+{
+    800013c6:	1101                	addi	sp,sp,-32
+    800013c8:	ec06                	sd	ra,24(sp)
+    800013ca:	e822                	sd	s0,16(sp)
+    800013cc:	e426                	sd	s1,8(sp)
+    800013ce:	1000                	addi	s0,sp,32
+  if(newsz >= oldsz)
+    return oldsz;
+    800013d0:	84ae                	mv	s1,a1
+  if(newsz >= oldsz)
+    800013d2:	00b67d63          	bgeu	a2,a1,800013ec <uvmdealloc+0x26>
+    800013d6:	84b2                	mv	s1,a2
+
+  if(PGROUNDUP(newsz) < PGROUNDUP(oldsz)){
+    800013d8:	6785                	lui	a5,0x1
+    800013da:	17fd                	addi	a5,a5,-1 # fff <_entry-0x7ffff001>
+    800013dc:	00f60733          	add	a4,a2,a5
+    800013e0:	76fd                	lui	a3,0xfffff
+    800013e2:	8f75                	and	a4,a4,a3
+    800013e4:	97ae                	add	a5,a5,a1
+    800013e6:	8ff5                	and	a5,a5,a3
+    800013e8:	00f76863          	bltu	a4,a5,800013f8 <uvmdealloc+0x32>
+    int npages = (PGROUNDUP(oldsz) - PGROUNDUP(newsz)) / PGSIZE;
+    uvmunmap(pagetable, PGROUNDUP(newsz), npages, 1);
+  }
+
+  return newsz;
+}
+    800013ec:	8526                	mv	a0,s1
+    800013ee:	60e2                	ld	ra,24(sp)
+    800013f0:	6442                	ld	s0,16(sp)
+    800013f2:	64a2                	ld	s1,8(sp)
+    800013f4:	6105                	addi	sp,sp,32
+    800013f6:	8082                	ret
+    int npages = (PGROUNDUP(oldsz) - PGROUNDUP(newsz)) / PGSIZE;
+    800013f8:	8f99                	sub	a5,a5,a4
+    800013fa:	83b1                	srli	a5,a5,0xc
+    uvmunmap(pagetable, PGROUNDUP(newsz), npages, 1);
+    800013fc:	4685                	li	a3,1
+    800013fe:	0007861b          	sext.w	a2,a5
+    80001402:	85ba                	mv	a1,a4
+    80001404:	00000097          	auipc	ra,0x0
+    80001408:	e5e080e7          	jalr	-418(ra) # 80001262 <uvmunmap>
+    8000140c:	b7c5                	j	800013ec <uvmdealloc+0x26>
+
+000000008000140e <uvmalloc>:
+  if(newsz < oldsz)
+    8000140e:	0ab66163          	bltu	a2,a1,800014b0 <uvmalloc+0xa2>
+{
+    80001412:	7139                	addi	sp,sp,-64
+    80001414:	fc06                	sd	ra,56(sp)
+    80001416:	f822                	sd	s0,48(sp)
+    80001418:	f426                	sd	s1,40(sp)
+    8000141a:	f04a                	sd	s2,32(sp)
+    8000141c:	ec4e                	sd	s3,24(sp)
+    8000141e:	e852                	sd	s4,16(sp)
+    80001420:	e456                	sd	s5,8(sp)
+    80001422:	0080                	addi	s0,sp,64
+    80001424:	8aaa                	mv	s5,a0
+    80001426:	8a32                	mv	s4,a2
+  oldsz = PGROUNDUP(oldsz);
+    80001428:	6785                	lui	a5,0x1
+    8000142a:	17fd                	addi	a5,a5,-1 # fff <_entry-0x7ffff001>
+    8000142c:	95be                	add	a1,a1,a5
+    8000142e:	77fd                	lui	a5,0xfffff
+    80001430:	00f5f9b3          	and	s3,a1,a5
+  for(a = oldsz; a < newsz; a += PGSIZE){
+    80001434:	08c9f063          	bgeu	s3,a2,800014b4 <uvmalloc+0xa6>
+    80001438:	894e                	mv	s2,s3
+    mem = kalloc();
+    8000143a:	fffff097          	auipc	ra,0xfffff
+    8000143e:	6a6080e7          	jalr	1702(ra) # 80000ae0 <kalloc>
+    80001442:	84aa                	mv	s1,a0
+    if(mem == 0){
+    80001444:	c51d                	beqz	a0,80001472 <uvmalloc+0x64>
+    memset(mem, 0, PGSIZE);
+    80001446:	6605                	lui	a2,0x1
+    80001448:	4581                	li	a1,0
+    8000144a:	00000097          	auipc	ra,0x0
+    8000144e:	882080e7          	jalr	-1918(ra) # 80000ccc <memset>
+    if(mappages(pagetable, a, PGSIZE, (uint64)mem, PTE_W|PTE_X|PTE_R|PTE_U) != 0){
+    80001452:	4779                	li	a4,30
+    80001454:	86a6                	mv	a3,s1
+    80001456:	6605                	lui	a2,0x1
+    80001458:	85ca                	mv	a1,s2
+    8000145a:	8556                	mv	a0,s5
+    8000145c:	00000097          	auipc	ra,0x0
+    80001460:	c40080e7          	jalr	-960(ra) # 8000109c <mappages>
+    80001464:	e905                	bnez	a0,80001494 <uvmalloc+0x86>
+  for(a = oldsz; a < newsz; a += PGSIZE){
+    80001466:	6785                	lui	a5,0x1
+    80001468:	993e                	add	s2,s2,a5
+    8000146a:	fd4968e3          	bltu	s2,s4,8000143a <uvmalloc+0x2c>
+  return newsz;
+    8000146e:	8552                	mv	a0,s4
+    80001470:	a809                	j	80001482 <uvmalloc+0x74>
+      uvmdealloc(pagetable, a, oldsz);
+    80001472:	864e                	mv	a2,s3
+    80001474:	85ca                	mv	a1,s2
+    80001476:	8556                	mv	a0,s5
+    80001478:	00000097          	auipc	ra,0x0
+    8000147c:	f4e080e7          	jalr	-178(ra) # 800013c6 <uvmdealloc>
+      return 0;
+    80001480:	4501                	li	a0,0
+}
+    80001482:	70e2                	ld	ra,56(sp)
+    80001484:	7442                	ld	s0,48(sp)
+    80001486:	74a2                	ld	s1,40(sp)
+    80001488:	7902                	ld	s2,32(sp)
+    8000148a:	69e2                	ld	s3,24(sp)
+    8000148c:	6a42                	ld	s4,16(sp)
+    8000148e:	6aa2                	ld	s5,8(sp)
+    80001490:	6121                	addi	sp,sp,64
+    80001492:	8082                	ret
+      kfree(mem);
+    80001494:	8526                	mv	a0,s1
+    80001496:	fffff097          	auipc	ra,0xfffff
+    8000149a:	54c080e7          	jalr	1356(ra) # 800009e2 <kfree>
+      uvmdealloc(pagetable, a, oldsz);
+    8000149e:	864e                	mv	a2,s3
+    800014a0:	85ca                	mv	a1,s2
+    800014a2:	8556                	mv	a0,s5
+    800014a4:	00000097          	auipc	ra,0x0
+    800014a8:	f22080e7          	jalr	-222(ra) # 800013c6 <uvmdealloc>
+      return 0;
+    800014ac:	4501                	li	a0,0
+    800014ae:	bfd1                	j	80001482 <uvmalloc+0x74>
+    return oldsz;
+    800014b0:	852e                	mv	a0,a1
+}
+    800014b2:	8082                	ret
+  return newsz;
+    800014b4:	8532                	mv	a0,a2
+    800014b6:	b7f1                	j	80001482 <uvmalloc+0x74>
+
+00000000800014b8 <freewalk>:
+
+// Recursively free page-table pages.
+// All leaf mappings must already have been removed.
+void
+freewalk(pagetable_t pagetable)
+{
+    800014b8:	7179                	addi	sp,sp,-48
+    800014ba:	f406                	sd	ra,40(sp)
+    800014bc:	f022                	sd	s0,32(sp)
+    800014be:	ec26                	sd	s1,24(sp)
+    800014c0:	e84a                	sd	s2,16(sp)
+    800014c2:	e44e                	sd	s3,8(sp)
+    800014c4:	e052                	sd	s4,0(sp)
+    800014c6:	1800                	addi	s0,sp,48
+    800014c8:	8a2a                	mv	s4,a0
+  // there are 2^9 = 512 PTEs in a page table.
+  for(int i = 0; i < 512; i++){
+    800014ca:	84aa                	mv	s1,a0
+    800014cc:	6905                	lui	s2,0x1
+    800014ce:	992a                	add	s2,s2,a0
+    pte_t pte = pagetable[i];
+    if((pte & PTE_V) && (pte & (PTE_R|PTE_W|PTE_X)) == 0){
+    800014d0:	4985                	li	s3,1
+    800014d2:	a829                	j	800014ec <freewalk+0x34>
+      // this PTE points to a lower-level page table.
+      uint64 child = PTE2PA(pte);
+    800014d4:	83a9                	srli	a5,a5,0xa
+      freewalk((pagetable_t)child);
+    800014d6:	00c79513          	slli	a0,a5,0xc
+    800014da:	00000097          	auipc	ra,0x0
+    800014de:	fde080e7          	jalr	-34(ra) # 800014b8 <freewalk>
+      pagetable[i] = 0;
+    800014e2:	0004b023          	sd	zero,0(s1)
+  for(int i = 0; i < 512; i++){
+    800014e6:	04a1                	addi	s1,s1,8
+    800014e8:	03248163          	beq	s1,s2,8000150a <freewalk+0x52>
+    pte_t pte = pagetable[i];
+    800014ec:	609c                	ld	a5,0(s1)
+    if((pte & PTE_V) && (pte & (PTE_R|PTE_W|PTE_X)) == 0){
+    800014ee:	00f7f713          	andi	a4,a5,15
+    800014f2:	ff3701e3          	beq	a4,s3,800014d4 <freewalk+0x1c>
+    } else if(pte & PTE_V){
+    800014f6:	8b85                	andi	a5,a5,1
+    800014f8:	d7fd                	beqz	a5,800014e6 <freewalk+0x2e>
+      panic("freewalk: leaf");
+    800014fa:	00007517          	auipc	a0,0x7
+    800014fe:	c6e50513          	addi	a0,a0,-914 # 80008168 <digits+0x138>
+    80001502:	fffff097          	auipc	ra,0xfffff
+    80001506:	038080e7          	jalr	56(ra) # 8000053a <panic>
+    }
+  }
+  kfree((void*)pagetable);
+    8000150a:	8552                	mv	a0,s4
+    8000150c:	fffff097          	auipc	ra,0xfffff
+    80001510:	4d6080e7          	jalr	1238(ra) # 800009e2 <kfree>
+}
+    80001514:	70a2                	ld	ra,40(sp)
+    80001516:	7402                	ld	s0,32(sp)
+    80001518:	64e2                	ld	s1,24(sp)
+    8000151a:	6942                	ld	s2,16(sp)
+    8000151c:	69a2                	ld	s3,8(sp)
+    8000151e:	6a02                	ld	s4,0(sp)
+    80001520:	6145                	addi	sp,sp,48
+    80001522:	8082                	ret
+
+0000000080001524 <uvmfree>:
+
+// Free user memory pages,
+// then free page-table pages.
+void
+uvmfree(pagetable_t pagetable, uint64 sz)
+{
+    80001524:	1101                	addi	sp,sp,-32
+    80001526:	ec06                	sd	ra,24(sp)
+    80001528:	e822                	sd	s0,16(sp)
+    8000152a:	e426                	sd	s1,8(sp)
+    8000152c:	1000                	addi	s0,sp,32
+    8000152e:	84aa                	mv	s1,a0
+  if(sz > 0)
+    80001530:	e999                	bnez	a1,80001546 <uvmfree+0x22>
+    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1);
+  freewalk(pagetable);
+    80001532:	8526                	mv	a0,s1
+    80001534:	00000097          	auipc	ra,0x0
+    80001538:	f84080e7          	jalr	-124(ra) # 800014b8 <freewalk>
+}
+    8000153c:	60e2                	ld	ra,24(sp)
+    8000153e:	6442                	ld	s0,16(sp)
+    80001540:	64a2                	ld	s1,8(sp)
+    80001542:	6105                	addi	sp,sp,32
+    80001544:	8082                	ret
+    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1);
+    80001546:	6785                	lui	a5,0x1
+    80001548:	17fd                	addi	a5,a5,-1 # fff <_entry-0x7ffff001>
+    8000154a:	95be                	add	a1,a1,a5
+    8000154c:	4685                	li	a3,1
+    8000154e:	00c5d613          	srli	a2,a1,0xc
+    80001552:	4581                	li	a1,0
+    80001554:	00000097          	auipc	ra,0x0
+    80001558:	d0e080e7          	jalr	-754(ra) # 80001262 <uvmunmap>
+    8000155c:	bfd9                	j	80001532 <uvmfree+0xe>
+
+000000008000155e <uvmcopy>:
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+  char *mem;
+
+  for(i = 0; i < sz; i += PGSIZE){
+    8000155e:	c679                	beqz	a2,8000162c <uvmcopy+0xce>
+{
+    80001560:	715d                	addi	sp,sp,-80
+    80001562:	e486                	sd	ra,72(sp)
+    80001564:	e0a2                	sd	s0,64(sp)
+    80001566:	fc26                	sd	s1,56(sp)
+    80001568:	f84a                	sd	s2,48(sp)
+    8000156a:	f44e                	sd	s3,40(sp)
+    8000156c:	f052                	sd	s4,32(sp)
+    8000156e:	ec56                	sd	s5,24(sp)
+    80001570:	e85a                	sd	s6,16(sp)
+    80001572:	e45e                	sd	s7,8(sp)
+    80001574:	0880                	addi	s0,sp,80
+    80001576:	8b2a                	mv	s6,a0
+    80001578:	8aae                	mv	s5,a1
+    8000157a:	8a32                	mv	s4,a2
+  for(i = 0; i < sz; i += PGSIZE){
+    8000157c:	4981                	li	s3,0
+    if((pte = walk(old, i, 0)) == 0)
+    8000157e:	4601                	li	a2,0
+    80001580:	85ce                	mv	a1,s3
+    80001582:	855a                	mv	a0,s6
+    80001584:	00000097          	auipc	ra,0x0
+    80001588:	a30080e7          	jalr	-1488(ra) # 80000fb4 <walk>
+    8000158c:	c531                	beqz	a0,800015d8 <uvmcopy+0x7a>
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+    8000158e:	6118                	ld	a4,0(a0)
+    80001590:	00177793          	andi	a5,a4,1
+    80001594:	cbb1                	beqz	a5,800015e8 <uvmcopy+0x8a>
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte);
+    80001596:	00a75593          	srli	a1,a4,0xa
+    8000159a:	00c59b93          	slli	s7,a1,0xc
+    flags = PTE_FLAGS(*pte);
+    8000159e:	3ff77493          	andi	s1,a4,1023
+    if((mem = kalloc()) == 0)
+    800015a2:	fffff097          	auipc	ra,0xfffff
+    800015a6:	53e080e7          	jalr	1342(ra) # 80000ae0 <kalloc>
+    800015aa:	892a                	mv	s2,a0
+    800015ac:	c939                	beqz	a0,80001602 <uvmcopy+0xa4>
+      goto err;
+    memmove(mem, (char*)pa, PGSIZE);
+    800015ae:	6605                	lui	a2,0x1
+    800015b0:	85de                	mv	a1,s7
+    800015b2:	fffff097          	auipc	ra,0xfffff
+    800015b6:	776080e7          	jalr	1910(ra) # 80000d28 <memmove>
+    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
+    800015ba:	8726                	mv	a4,s1
+    800015bc:	86ca                	mv	a3,s2
+    800015be:	6605                	lui	a2,0x1
+    800015c0:	85ce                	mv	a1,s3
+    800015c2:	8556                	mv	a0,s5
+    800015c4:	00000097          	auipc	ra,0x0
+    800015c8:	ad8080e7          	jalr	-1320(ra) # 8000109c <mappages>
+    800015cc:	e515                	bnez	a0,800015f8 <uvmcopy+0x9a>
+  for(i = 0; i < sz; i += PGSIZE){
+    800015ce:	6785                	lui	a5,0x1
+    800015d0:	99be                	add	s3,s3,a5
+    800015d2:	fb49e6e3          	bltu	s3,s4,8000157e <uvmcopy+0x20>
+    800015d6:	a081                	j	80001616 <uvmcopy+0xb8>
+      panic("uvmcopy: pte should exist");
+    800015d8:	00007517          	auipc	a0,0x7
+    800015dc:	ba050513          	addi	a0,a0,-1120 # 80008178 <digits+0x148>
+    800015e0:	fffff097          	auipc	ra,0xfffff
+    800015e4:	f5a080e7          	jalr	-166(ra) # 8000053a <panic>
+      panic("uvmcopy: page not present");
+    800015e8:	00007517          	auipc	a0,0x7
+    800015ec:	bb050513          	addi	a0,a0,-1104 # 80008198 <digits+0x168>
+    800015f0:	fffff097          	auipc	ra,0xfffff
+    800015f4:	f4a080e7          	jalr	-182(ra) # 8000053a <panic>
+      kfree(mem);
+    800015f8:	854a                	mv	a0,s2
+    800015fa:	fffff097          	auipc	ra,0xfffff
+    800015fe:	3e8080e7          	jalr	1000(ra) # 800009e2 <kfree>
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+    80001602:	4685                	li	a3,1
+    80001604:	00c9d613          	srli	a2,s3,0xc
+    80001608:	4581                	li	a1,0
+    8000160a:	8556                	mv	a0,s5
+    8000160c:	00000097          	auipc	ra,0x0
+    80001610:	c56080e7          	jalr	-938(ra) # 80001262 <uvmunmap>
+  return -1;
+    80001614:	557d                	li	a0,-1
+}
+    80001616:	60a6                	ld	ra,72(sp)
+    80001618:	6406                	ld	s0,64(sp)
+    8000161a:	74e2                	ld	s1,56(sp)
+    8000161c:	7942                	ld	s2,48(sp)
+    8000161e:	79a2                	ld	s3,40(sp)
+    80001620:	7a02                	ld	s4,32(sp)
+    80001622:	6ae2                	ld	s5,24(sp)
+    80001624:	6b42                	ld	s6,16(sp)
+    80001626:	6ba2                	ld	s7,8(sp)
+    80001628:	6161                	addi	sp,sp,80
+    8000162a:	8082                	ret
+  return 0;
+    8000162c:	4501                	li	a0,0
+}
+    8000162e:	8082                	ret
+
+0000000080001630 <uvmclear>:
+
+// mark a PTE invalid for user access.
+// used by exec for the user stack guard page.
+void
+uvmclear(pagetable_t pagetable, uint64 va)
+{
+    80001630:	1141                	addi	sp,sp,-16
+    80001632:	e406                	sd	ra,8(sp)
+    80001634:	e022                	sd	s0,0(sp)
+    80001636:	0800                	addi	s0,sp,16
+  pte_t *pte;
+  
+  pte = walk(pagetable, va, 0);
+    80001638:	4601                	li	a2,0
+    8000163a:	00000097          	auipc	ra,0x0
+    8000163e:	97a080e7          	jalr	-1670(ra) # 80000fb4 <walk>
+  if(pte == 0)
+    80001642:	c901                	beqz	a0,80001652 <uvmclear+0x22>
+    panic("uvmclear");
+  *pte &= ~PTE_U;
+    80001644:	611c                	ld	a5,0(a0)
+    80001646:	9bbd                	andi	a5,a5,-17
+    80001648:	e11c                	sd	a5,0(a0)
+}
+    8000164a:	60a2                	ld	ra,8(sp)
+    8000164c:	6402                	ld	s0,0(sp)
+    8000164e:	0141                	addi	sp,sp,16
+    80001650:	8082                	ret
+    panic("uvmclear");
+    80001652:	00007517          	auipc	a0,0x7
+    80001656:	b6650513          	addi	a0,a0,-1178 # 800081b8 <digits+0x188>
+    8000165a:	fffff097          	auipc	ra,0xfffff
+    8000165e:	ee0080e7          	jalr	-288(ra) # 8000053a <panic>
+
+0000000080001662 <copyout>:
+int
+copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
+{
+  uint64 n, va0, pa0;
+
+  while(len > 0){
+    80001662:	c6bd                	beqz	a3,800016d0 <copyout+0x6e>
+{
+    80001664:	715d                	addi	sp,sp,-80
+    80001666:	e486                	sd	ra,72(sp)
+    80001668:	e0a2                	sd	s0,64(sp)
+    8000166a:	fc26                	sd	s1,56(sp)
+    8000166c:	f84a                	sd	s2,48(sp)
+    8000166e:	f44e                	sd	s3,40(sp)
+    80001670:	f052                	sd	s4,32(sp)
+    80001672:	ec56                	sd	s5,24(sp)
+    80001674:	e85a                	sd	s6,16(sp)
+    80001676:	e45e                	sd	s7,8(sp)
+    80001678:	e062                	sd	s8,0(sp)
+    8000167a:	0880                	addi	s0,sp,80
+    8000167c:	8b2a                	mv	s6,a0
+    8000167e:	8c2e                	mv	s8,a1
+    80001680:	8a32                	mv	s4,a2
+    80001682:	89b6                	mv	s3,a3
+    va0 = PGROUNDDOWN(dstva);
+    80001684:	7bfd                	lui	s7,0xfffff
+    pa0 = walkaddr(pagetable, va0);
+    if(pa0 == 0)
+      return -1;
+    n = PGSIZE - (dstva - va0);
+    80001686:	6a85                	lui	s5,0x1
+    80001688:	a015                	j	800016ac <copyout+0x4a>
+    if(n > len)
+      n = len;
+    memmove((void *)(pa0 + (dstva - va0)), src, n);
+    8000168a:	9562                	add	a0,a0,s8
+    8000168c:	0004861b          	sext.w	a2,s1
+    80001690:	85d2                	mv	a1,s4
+    80001692:	41250533          	sub	a0,a0,s2
+    80001696:	fffff097          	auipc	ra,0xfffff
+    8000169a:	692080e7          	jalr	1682(ra) # 80000d28 <memmove>
+
+    len -= n;
+    8000169e:	409989b3          	sub	s3,s3,s1
+    src += n;
+    800016a2:	9a26                	add	s4,s4,s1
+    dstva = va0 + PGSIZE;
+    800016a4:	01590c33          	add	s8,s2,s5
+  while(len > 0){
+    800016a8:	02098263          	beqz	s3,800016cc <copyout+0x6a>
+    va0 = PGROUNDDOWN(dstva);
+    800016ac:	017c7933          	and	s2,s8,s7
+    pa0 = walkaddr(pagetable, va0);
+    800016b0:	85ca                	mv	a1,s2
+    800016b2:	855a                	mv	a0,s6
+    800016b4:	00000097          	auipc	ra,0x0
+    800016b8:	9a6080e7          	jalr	-1626(ra) # 8000105a <walkaddr>
+    if(pa0 == 0)
+    800016bc:	cd01                	beqz	a0,800016d4 <copyout+0x72>
+    n = PGSIZE - (dstva - va0);
+    800016be:	418904b3          	sub	s1,s2,s8
+    800016c2:	94d6                	add	s1,s1,s5
+    800016c4:	fc99f3e3          	bgeu	s3,s1,8000168a <copyout+0x28>
+    800016c8:	84ce                	mv	s1,s3
+    800016ca:	b7c1                	j	8000168a <copyout+0x28>
+  }
+  return 0;
+    800016cc:	4501                	li	a0,0
+    800016ce:	a021                	j	800016d6 <copyout+0x74>
+    800016d0:	4501                	li	a0,0
+}
+    800016d2:	8082                	ret
+      return -1;
+    800016d4:	557d                	li	a0,-1
+}
+    800016d6:	60a6                	ld	ra,72(sp)
+    800016d8:	6406                	ld	s0,64(sp)
+    800016da:	74e2                	ld	s1,56(sp)
+    800016dc:	7942                	ld	s2,48(sp)
+    800016de:	79a2                	ld	s3,40(sp)
+    800016e0:	7a02                	ld	s4,32(sp)
+    800016e2:	6ae2                	ld	s5,24(sp)
+    800016e4:	6b42                	ld	s6,16(sp)
+    800016e6:	6ba2                	ld	s7,8(sp)
+    800016e8:	6c02                	ld	s8,0(sp)
+    800016ea:	6161                	addi	sp,sp,80
+    800016ec:	8082                	ret
+
+00000000800016ee <copyin>:
+int
+copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
+{
+  uint64 n, va0, pa0;
+
+  while(len > 0){
+    800016ee:	caa5                	beqz	a3,8000175e <copyin+0x70>
+{
+    800016f0:	715d                	addi	sp,sp,-80
+    800016f2:	e486                	sd	ra,72(sp)
+    800016f4:	e0a2                	sd	s0,64(sp)
+    800016f6:	fc26                	sd	s1,56(sp)
+    800016f8:	f84a                	sd	s2,48(sp)
+    800016fa:	f44e                	sd	s3,40(sp)
+    800016fc:	f052                	sd	s4,32(sp)
+    800016fe:	ec56                	sd	s5,24(sp)
+    80001700:	e85a                	sd	s6,16(sp)
+    80001702:	e45e                	sd	s7,8(sp)
+    80001704:	e062                	sd	s8,0(sp)
+    80001706:	0880                	addi	s0,sp,80
+    80001708:	8b2a                	mv	s6,a0
+    8000170a:	8a2e                	mv	s4,a1
+    8000170c:	8c32                	mv	s8,a2
+    8000170e:	89b6                	mv	s3,a3
+    va0 = PGROUNDDOWN(srcva);
+    80001710:	7bfd                	lui	s7,0xfffff
+    pa0 = walkaddr(pagetable, va0);
+    if(pa0 == 0)
+      return -1;
+    n = PGSIZE - (srcva - va0);
+    80001712:	6a85                	lui	s5,0x1
+    80001714:	a01d                	j	8000173a <copyin+0x4c>
+    if(n > len)
+      n = len;
+    memmove(dst, (void *)(pa0 + (srcva - va0)), n);
+    80001716:	018505b3          	add	a1,a0,s8
+    8000171a:	0004861b          	sext.w	a2,s1
+    8000171e:	412585b3          	sub	a1,a1,s2
+    80001722:	8552                	mv	a0,s4
+    80001724:	fffff097          	auipc	ra,0xfffff
+    80001728:	604080e7          	jalr	1540(ra) # 80000d28 <memmove>
+
+    len -= n;
+    8000172c:	409989b3          	sub	s3,s3,s1
+    dst += n;
+    80001730:	9a26                	add	s4,s4,s1
+    srcva = va0 + PGSIZE;
+    80001732:	01590c33          	add	s8,s2,s5
+  while(len > 0){
+    80001736:	02098263          	beqz	s3,8000175a <copyin+0x6c>
+    va0 = PGROUNDDOWN(srcva);
+    8000173a:	017c7933          	and	s2,s8,s7
+    pa0 = walkaddr(pagetable, va0);
+    8000173e:	85ca                	mv	a1,s2
+    80001740:	855a                	mv	a0,s6
+    80001742:	00000097          	auipc	ra,0x0
+    80001746:	918080e7          	jalr	-1768(ra) # 8000105a <walkaddr>
+    if(pa0 == 0)
+    8000174a:	cd01                	beqz	a0,80001762 <copyin+0x74>
+    n = PGSIZE - (srcva - va0);
+    8000174c:	418904b3          	sub	s1,s2,s8
+    80001750:	94d6                	add	s1,s1,s5
+    80001752:	fc99f2e3          	bgeu	s3,s1,80001716 <copyin+0x28>
+    80001756:	84ce                	mv	s1,s3
+    80001758:	bf7d                	j	80001716 <copyin+0x28>
+  }
+  return 0;
+    8000175a:	4501                	li	a0,0
+    8000175c:	a021                	j	80001764 <copyin+0x76>
+    8000175e:	4501                	li	a0,0
+}
+    80001760:	8082                	ret
+      return -1;
+    80001762:	557d                	li	a0,-1
+}
+    80001764:	60a6                	ld	ra,72(sp)
+    80001766:	6406                	ld	s0,64(sp)
+    80001768:	74e2                	ld	s1,56(sp)
+    8000176a:	7942                	ld	s2,48(sp)
+    8000176c:	79a2                	ld	s3,40(sp)
+    8000176e:	7a02                	ld	s4,32(sp)
+    80001770:	6ae2                	ld	s5,24(sp)
+    80001772:	6b42                	ld	s6,16(sp)
+    80001774:	6ba2                	ld	s7,8(sp)
+    80001776:	6c02                	ld	s8,0(sp)
+    80001778:	6161                	addi	sp,sp,80
+    8000177a:	8082                	ret
+
+000000008000177c <copyinstr>:
+copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
+{
+  uint64 n, va0, pa0;
+  int got_null = 0;
+
+  while(got_null == 0 && max > 0){
+    8000177c:	c2dd                	beqz	a3,80001822 <copyinstr+0xa6>
+{
+    8000177e:	715d                	addi	sp,sp,-80
+    80001780:	e486                	sd	ra,72(sp)
+    80001782:	e0a2                	sd	s0,64(sp)
+    80001784:	fc26                	sd	s1,56(sp)
+    80001786:	f84a                	sd	s2,48(sp)
+    80001788:	f44e                	sd	s3,40(sp)
+    8000178a:	f052                	sd	s4,32(sp)
+    8000178c:	ec56                	sd	s5,24(sp)
+    8000178e:	e85a                	sd	s6,16(sp)
+    80001790:	e45e                	sd	s7,8(sp)
+    80001792:	0880                	addi	s0,sp,80
+    80001794:	8a2a                	mv	s4,a0
+    80001796:	8b2e                	mv	s6,a1
+    80001798:	8bb2                	mv	s7,a2
+    8000179a:	84b6                	mv	s1,a3
+    va0 = PGROUNDDOWN(srcva);
+    8000179c:	7afd                	lui	s5,0xfffff
+    pa0 = walkaddr(pagetable, va0);
+    if(pa0 == 0)
+      return -1;
+    n = PGSIZE - (srcva - va0);
+    8000179e:	6985                	lui	s3,0x1
+    800017a0:	a02d                	j	800017ca <copyinstr+0x4e>
+      n = max;
+
+    char *p = (char *) (pa0 + (srcva - va0));
+    while(n > 0){
+      if(*p == '\0'){
+        *dst = '\0';
+    800017a2:	00078023          	sb	zero,0(a5) # 1000 <_entry-0x7ffff000>
+    800017a6:	4785                	li	a5,1
+      dst++;
+    }
+
+    srcva = va0 + PGSIZE;
+  }
+  if(got_null){
+    800017a8:	37fd                	addiw	a5,a5,-1
+    800017aa:	0007851b          	sext.w	a0,a5
+    return 0;
+  } else {
+    return -1;
+  }
+}
+    800017ae:	60a6                	ld	ra,72(sp)
+    800017b0:	6406                	ld	s0,64(sp)
+    800017b2:	74e2                	ld	s1,56(sp)
+    800017b4:	7942                	ld	s2,48(sp)
+    800017b6:	79a2                	ld	s3,40(sp)
+    800017b8:	7a02                	ld	s4,32(sp)
+    800017ba:	6ae2                	ld	s5,24(sp)
+    800017bc:	6b42                	ld	s6,16(sp)
+    800017be:	6ba2                	ld	s7,8(sp)
+    800017c0:	6161                	addi	sp,sp,80
+    800017c2:	8082                	ret
+    srcva = va0 + PGSIZE;
+    800017c4:	01390bb3          	add	s7,s2,s3
+  while(got_null == 0 && max > 0){
+    800017c8:	c8a9                	beqz	s1,8000181a <copyinstr+0x9e>
+    va0 = PGROUNDDOWN(srcva);
+    800017ca:	015bf933          	and	s2,s7,s5
+    pa0 = walkaddr(pagetable, va0);
+    800017ce:	85ca                	mv	a1,s2
+    800017d0:	8552                	mv	a0,s4
+    800017d2:	00000097          	auipc	ra,0x0
+    800017d6:	888080e7          	jalr	-1912(ra) # 8000105a <walkaddr>
+    if(pa0 == 0)
+    800017da:	c131                	beqz	a0,8000181e <copyinstr+0xa2>
+    n = PGSIZE - (srcva - va0);
+    800017dc:	417906b3          	sub	a3,s2,s7
+    800017e0:	96ce                	add	a3,a3,s3
+    800017e2:	00d4f363          	bgeu	s1,a3,800017e8 <copyinstr+0x6c>
+    800017e6:	86a6                	mv	a3,s1
+    char *p = (char *) (pa0 + (srcva - va0));
+    800017e8:	955e                	add	a0,a0,s7
+    800017ea:	41250533          	sub	a0,a0,s2
+    while(n > 0){
+    800017ee:	daf9                	beqz	a3,800017c4 <copyinstr+0x48>
+    800017f0:	87da                	mv	a5,s6
+      if(*p == '\0'){
+    800017f2:	41650633          	sub	a2,a0,s6
+    800017f6:	fff48593          	addi	a1,s1,-1
+    800017fa:	95da                	add	a1,a1,s6
+    while(n > 0){
+    800017fc:	96da                	add	a3,a3,s6
+      if(*p == '\0'){
+    800017fe:	00f60733          	add	a4,a2,a5
+    80001802:	00074703          	lbu	a4,0(a4) # fffffffffffff000 <end+0xffffffff7ffd6000>
+    80001806:	df51                	beqz	a4,800017a2 <copyinstr+0x26>
+        *dst = *p;
+    80001808:	00e78023          	sb	a4,0(a5)
+      --max;
+    8000180c:	40f584b3          	sub	s1,a1,a5
+      dst++;
+    80001810:	0785                	addi	a5,a5,1
+    while(n > 0){
+    80001812:	fed796e3          	bne	a5,a3,800017fe <copyinstr+0x82>
+      dst++;
+    80001816:	8b3e                	mv	s6,a5
+    80001818:	b775                	j	800017c4 <copyinstr+0x48>
+    8000181a:	4781                	li	a5,0
+    8000181c:	b771                	j	800017a8 <copyinstr+0x2c>
+      return -1;
+    8000181e:	557d                	li	a0,-1
+    80001820:	b779                	j	800017ae <copyinstr+0x32>
+  int got_null = 0;
+    80001822:	4781                	li	a5,0
+  if(got_null){
+    80001824:	37fd                	addiw	a5,a5,-1
+    80001826:	0007851b          	sext.w	a0,a5
+}
+    8000182a:	8082                	ret
+
+000000008000182c <seminit>:
+
+int is_valid_sid(int sid);
+
+void
+seminit()
+{
+    8000182c:	7179                	addi	sp,sp,-48
+    8000182e:	f406                	sd	ra,40(sp)
+    80001830:	f022                	sd	s0,32(sp)
+    80001832:	ec26                	sd	s1,24(sp)
+    80001834:	e84a                	sd	s2,16(sp)
+    80001836:	e44e                	sd	s3,8(sp)
+    80001838:	e052                	sd	s4,0(sp)
+    8000183a:	1800                	addi	s0,sp,48
+  struct sem *s;
+  for(s = sem; s < sem + NSEM; s++){
+    8000183c:	00010497          	auipc	s1,0x10
+    80001840:	a6448493          	addi	s1,s1,-1436 # 800112a0 <sem>
+    initlock(&s->lock, "semlock");
+    80001844:	00007a17          	auipc	s4,0x7
+    80001848:	984a0a13          	addi	s4,s4,-1660 # 800081c8 <digits+0x198>
+    s->key = -1;
+    8000184c:	59fd                	li	s3,-1
+  for(s = sem; s < sem + NSEM; s++){
+    8000184e:	00011917          	auipc	s2,0x11
+    80001852:	9f290913          	addi	s2,s2,-1550 # 80012240 <mlf_lock>
+    initlock(&s->lock, "semlock");
+    80001856:	85d2                	mv	a1,s4
+    80001858:	8526                	mv	a0,s1
+    8000185a:	fffff097          	auipc	ra,0xfffff
+    8000185e:	2e6080e7          	jalr	742(ra) # 80000b40 <initlock>
+    s->key = -1;
+    80001862:	0134ae23          	sw	s3,28(s1)
+  for(s = sem; s < sem + NSEM; s++){
+    80001866:	02848493          	addi	s1,s1,40
+    8000186a:	ff2496e3          	bne	s1,s2,80001856 <seminit+0x2a>
+  }
+}
+    8000186e:	70a2                	ld	ra,40(sp)
+    80001870:	7402                	ld	s0,32(sp)
+    80001872:	64e2                	ld	s1,24(sp)
+    80001874:	6942                	ld	s2,16(sp)
+    80001876:	69a2                	ld	s3,8(sp)
+    80001878:	6a02                	ld	s4,0(sp)
+    8000187a:	6145                	addi	sp,sp,48
+    8000187c:	8082                	ret
+
+000000008000187e <semget>:
+
+int 
+semget(int key, int init_value)
+{
+    8000187e:	7139                	addi	sp,sp,-64
+    80001880:	fc06                	sd	ra,56(sp)
+    80001882:	f822                	sd	s0,48(sp)
+    80001884:	f426                	sd	s1,40(sp)
+    80001886:	f04a                	sd	s2,32(sp)
+    80001888:	ec4e                	sd	s3,24(sp)
+    8000188a:	e852                	sd	s4,16(sp)
+    8000188c:	e456                	sd	s5,8(sp)
+    8000188e:	e05a                	sd	s6,0(sp)
+    80001890:	0080                	addi	s0,sp,64
+    80001892:	892a                	mv	s2,a0
+    80001894:	8b2e                	mv	s6,a1
+  struct sem *s;
+  struct sem *save_free = 0;
+  
+
+  int sid = get_sid();
+    80001896:	00001097          	auipc	ra,0x1
+    8000189a:	23a080e7          	jalr	570(ra) # 80002ad0 <get_sid>
+    8000189e:	8aaa                	mv	s5,a0
+  if(sid == -1){
+    800018a0:	57fd                	li	a5,-1
+    800018a2:	04f50463          	beq	a0,a5,800018ea <semget+0x6c>
+  struct sem *save_free = 0;
+    800018a6:	4981                	li	s3,0
+    return -1;
+  }
+
+  //Searching the key in all semaphores
+  for(s = sem; s < sem + NSEM; s++){
+    800018a8:	00010497          	auipc	s1,0x10
+    800018ac:	9f848493          	addi	s1,s1,-1544 # 800112a0 <sem>
+    800018b0:	00011a17          	auipc	s4,0x11
+    800018b4:	990a0a13          	addi	s4,s4,-1648 # 80012240 <mlf_lock>
+    800018b8:	a8a9                	j	80001912 <semget+0x94>
+  
+  // The key was found
+  found:
+
+    // If the semaphore with the key was found, and one semaphore was saved, then free it.
+    if(save_free != 0){
+    800018ba:	00098763          	beqz	s3,800018c8 <semget+0x4a>
+      release(&save_free->lock);
+    800018be:	854e                	mv	a0,s3
+    800018c0:	fffff097          	auipc	ra,0xfffff
+    800018c4:	3c4080e7          	jalr	964(ra) # 80000c84 <release>
+    }
+
+    // Increment the ref count in the semaphore
+    s->ref_count++;
+    800018c8:	509c                	lw	a5,32(s1)
+    800018ca:	2785                	addiw	a5,a5,1
+    800018cc:	d09c                	sw	a5,32(s1)
+
+    // If there's an empty position then add the semaphore to the process' semaphore table
+    myproc()->osem[sid] = s;
+    800018ce:	00000097          	auipc	ra,0x0
+    800018d2:	4a8080e7          	jalr	1192(ra) # 80001d76 <myproc>
+    800018d6:	02aa8793          	addi	a5,s5,42 # fffffffffffff02a <end+0xffffffff7ffd602a>
+    800018da:	078e                	slli	a5,a5,0x3
+    800018dc:	953e                	add	a0,a0,a5
+    800018de:	e104                	sd	s1,0(a0)
+    release(&s->lock);
+    800018e0:	8526                	mv	a0,s1
+    800018e2:	fffff097          	auipc	ra,0xfffff
+    800018e6:	3a2080e7          	jalr	930(ra) # 80000c84 <release>
+    return sid;
+}
+    800018ea:	8556                	mv	a0,s5
+    800018ec:	70e2                	ld	ra,56(sp)
+    800018ee:	7442                	ld	s0,48(sp)
+    800018f0:	74a2                	ld	s1,40(sp)
+    800018f2:	7902                	ld	s2,32(sp)
+    800018f4:	69e2                	ld	s3,24(sp)
+    800018f6:	6a42                	ld	s4,16(sp)
+    800018f8:	6aa2                	ld	s5,8(sp)
+    800018fa:	6b02                	ld	s6,0(sp)
+    800018fc:	6121                	addi	sp,sp,64
+    800018fe:	8082                	ret
+      release(&s->lock);
+    80001900:	8526                	mv	a0,s1
+    80001902:	fffff097          	auipc	ra,0xfffff
+    80001906:	382080e7          	jalr	898(ra) # 80000c84 <release>
+  for(s = sem; s < sem + NSEM; s++){
+    8000190a:	02848493          	addi	s1,s1,40
+    8000190e:	03448063          	beq	s1,s4,8000192e <semget+0xb0>
+    acquire(&s->lock);
+    80001912:	8526                	mv	a0,s1
+    80001914:	fffff097          	auipc	ra,0xfffff
+    80001918:	2bc080e7          	jalr	700(ra) # 80000bd0 <acquire>
+    if(s->key == key){
+    8000191c:	4cdc                	lw	a5,28(s1)
+    8000191e:	f9278ee3          	beq	a5,s2,800018ba <semget+0x3c>
+    if(s->ref_count == 0 && save_free == 0){
+    80001922:	509c                	lw	a5,32(s1)
+    80001924:	fff1                	bnez	a5,80001900 <semget+0x82>
+    80001926:	fc099de3          	bnez	s3,80001900 <semget+0x82>
+    8000192a:	89a6                	mv	s3,s1
+    8000192c:	bff9                	j	8000190a <semget+0x8c>
+  if(save_free != 0 ){
+    8000192e:	02098363          	beqz	s3,80001954 <semget+0xd6>
+    save_free->key = key;
+    80001932:	0129ae23          	sw	s2,28(s3) # 101c <_entry-0x7fffefe4>
+    save_free->value = init_value;
+    80001936:	0169ac23          	sw	s6,24(s3)
+    save_free->ref_count = 1;
+    8000193a:	4785                	li	a5,1
+    8000193c:	02f9a023          	sw	a5,32(s3)
+    myproc()->osem[sid] = save_free;
+    80001940:	00000097          	auipc	ra,0x0
+    80001944:	436080e7          	jalr	1078(ra) # 80001d76 <myproc>
+    80001948:	02aa8793          	addi	a5,s5,42
+    8000194c:	078e                	slli	a5,a5,0x3
+    8000194e:	97aa                	add	a5,a5,a0
+    80001950:	0137b023          	sd	s3,0(a5)
+  release(&save_free->lock);
+    80001954:	854e                	mv	a0,s3
+    80001956:	fffff097          	auipc	ra,0xfffff
+    8000195a:	32e080e7          	jalr	814(ra) # 80000c84 <release>
+  return sid;
+    8000195e:	b771                	j	800018ea <semget+0x6c>
+
+0000000080001960 <is_valid_sid>:
+  return 0;
+}
+
+int
+is_valid_sid(int sid){
+  return sid >= 0 && sid <= NOSEM && myproc()->osem[sid];
+    80001960:	47c1                	li	a5,16
+    80001962:	00a7f463          	bgeu	a5,a0,8000196a <is_valid_sid+0xa>
+    80001966:	4501                	li	a0,0
+}
+    80001968:	8082                	ret
+is_valid_sid(int sid){
+    8000196a:	1101                	addi	sp,sp,-32
+    8000196c:	ec06                	sd	ra,24(sp)
+    8000196e:	e822                	sd	s0,16(sp)
+    80001970:	e426                	sd	s1,8(sp)
+    80001972:	1000                	addi	s0,sp,32
+    80001974:	84aa                	mv	s1,a0
+  return sid >= 0 && sid <= NOSEM && myproc()->osem[sid];
+    80001976:	00000097          	auipc	ra,0x0
+    8000197a:	400080e7          	jalr	1024(ra) # 80001d76 <myproc>
+    8000197e:	02a48493          	addi	s1,s1,42
+    80001982:	048e                	slli	s1,s1,0x3
+    80001984:	9526                	add	a0,a0,s1
+    80001986:	6108                	ld	a0,0(a0)
+    80001988:	00a03533          	snez	a0,a0
+}
+    8000198c:	60e2                	ld	ra,24(sp)
+    8000198e:	6442                	ld	s0,16(sp)
+    80001990:	64a2                	ld	s1,8(sp)
+    80001992:	6105                	addi	sp,sp,32
+    80001994:	8082                	ret
+
+0000000080001996 <semclose>:
+{
+    80001996:	1101                	addi	sp,sp,-32
+    80001998:	ec06                	sd	ra,24(sp)
+    8000199a:	e822                	sd	s0,16(sp)
+    8000199c:	e426                	sd	s1,8(sp)
+    8000199e:	1000                	addi	s0,sp,32
+    800019a0:	84aa                	mv	s1,a0
+  if(!is_valid_sid(sid)){
+    800019a2:	00000097          	auipc	ra,0x0
+    800019a6:	fbe080e7          	jalr	-66(ra) # 80001960 <is_valid_sid>
+    800019aa:	cd31                	beqz	a0,80001a06 <semclose+0x70>
+  acquire(&(myproc()->osem[sid]->lock));
+    800019ac:	00000097          	auipc	ra,0x0
+    800019b0:	3ca080e7          	jalr	970(ra) # 80001d76 <myproc>
+    800019b4:	02a48493          	addi	s1,s1,42
+    800019b8:	048e                	slli	s1,s1,0x3
+    800019ba:	9526                	add	a0,a0,s1
+    800019bc:	6108                	ld	a0,0(a0)
+    800019be:	fffff097          	auipc	ra,0xfffff
+    800019c2:	212080e7          	jalr	530(ra) # 80000bd0 <acquire>
+  myproc()->osem[sid]->ref_count--;
+    800019c6:	00000097          	auipc	ra,0x0
+    800019ca:	3b0080e7          	jalr	944(ra) # 80001d76 <myproc>
+    800019ce:	9526                	add	a0,a0,s1
+    800019d0:	6118                	ld	a4,0(a0)
+    800019d2:	531c                	lw	a5,32(a4)
+    800019d4:	37fd                	addiw	a5,a5,-1
+    800019d6:	d31c                	sw	a5,32(a4)
+  release(&(myproc()->osem[sid]->lock));
+    800019d8:	00000097          	auipc	ra,0x0
+    800019dc:	39e080e7          	jalr	926(ra) # 80001d76 <myproc>
+    800019e0:	9526                	add	a0,a0,s1
+    800019e2:	6108                	ld	a0,0(a0)
+    800019e4:	fffff097          	auipc	ra,0xfffff
+    800019e8:	2a0080e7          	jalr	672(ra) # 80000c84 <release>
+  myproc()->osem[sid] = 0;
+    800019ec:	00000097          	auipc	ra,0x0
+    800019f0:	38a080e7          	jalr	906(ra) # 80001d76 <myproc>
+    800019f4:	9526                	add	a0,a0,s1
+    800019f6:	00053023          	sd	zero,0(a0)
+  return 0;
+    800019fa:	4501                	li	a0,0
+}
+    800019fc:	60e2                	ld	ra,24(sp)
+    800019fe:	6442                	ld	s0,16(sp)
+    80001a00:	64a2                	ld	s1,8(sp)
+    80001a02:	6105                	addi	sp,sp,32
+    80001a04:	8082                	ret
+    return -1;
+    80001a06:	557d                	li	a0,-1
+    80001a08:	bfd5                	j	800019fc <semclose+0x66>
+
+0000000080001a0a <semdown>:
+{
+    80001a0a:	1101                	addi	sp,sp,-32
+    80001a0c:	ec06                	sd	ra,24(sp)
+    80001a0e:	e822                	sd	s0,16(sp)
+    80001a10:	e426                	sd	s1,8(sp)
+    80001a12:	e04a                	sd	s2,0(sp)
+    80001a14:	1000                	addi	s0,sp,32
+    80001a16:	84aa                	mv	s1,a0
+  if(!is_valid_sid(sid)){
+    80001a18:	00000097          	auipc	ra,0x0
+    80001a1c:	f48080e7          	jalr	-184(ra) # 80001960 <is_valid_sid>
+    80001a20:	c141                	beqz	a0,80001aa0 <semdown+0x96>
+  acquire(&(myproc()->osem[sid]->lock));
+    80001a22:	00000097          	auipc	ra,0x0
+    80001a26:	354080e7          	jalr	852(ra) # 80001d76 <myproc>
+    80001a2a:	02a48913          	addi	s2,s1,42
+    80001a2e:	090e                	slli	s2,s2,0x3
+    80001a30:	954a                	add	a0,a0,s2
+    80001a32:	6108                	ld	a0,0(a0)
+    80001a34:	fffff097          	auipc	ra,0xfffff
+    80001a38:	19c080e7          	jalr	412(ra) # 80000bd0 <acquire>
+  if(myproc()->osem[sid]->value >= 1){
+    80001a3c:	00000097          	auipc	ra,0x0
+    80001a40:	33a080e7          	jalr	826(ra) # 80001d76 <myproc>
+    80001a44:	954a                	add	a0,a0,s2
+    80001a46:	611c                	ld	a5,0(a0)
+    80001a48:	4f9c                	lw	a5,24(a5)
+    80001a4a:	02f05c63          	blez	a5,80001a82 <semdown+0x78>
+    myproc()->osem[sid]->value--;
+    80001a4e:	00000097          	auipc	ra,0x0
+    80001a52:	328080e7          	jalr	808(ra) # 80001d76 <myproc>
+    80001a56:	954a                	add	a0,a0,s2
+    80001a58:	6118                	ld	a4,0(a0)
+    80001a5a:	4f1c                	lw	a5,24(a4)
+    80001a5c:	37fd                	addiw	a5,a5,-1
+    80001a5e:	cf1c                	sw	a5,24(a4)
+    release(&(myproc()->osem[sid]->lock));
+    80001a60:	00000097          	auipc	ra,0x0
+    80001a64:	316080e7          	jalr	790(ra) # 80001d76 <myproc>
+    80001a68:	954a                	add	a0,a0,s2
+    80001a6a:	6108                	ld	a0,0(a0)
+    80001a6c:	fffff097          	auipc	ra,0xfffff
+    80001a70:	218080e7          	jalr	536(ra) # 80000c84 <release>
+    return 0;
+    80001a74:	4501                	li	a0,0
+}
+    80001a76:	60e2                	ld	ra,24(sp)
+    80001a78:	6442                	ld	s0,16(sp)
+    80001a7a:	64a2                	ld	s1,8(sp)
+    80001a7c:	6902                	ld	s2,0(sp)
+    80001a7e:	6105                	addi	sp,sp,32
+    80001a80:	8082                	ret
+  release(&(myproc()->osem[sid]->lock));
+    80001a82:	00000097          	auipc	ra,0x0
+    80001a86:	2f4080e7          	jalr	756(ra) # 80001d76 <myproc>
+    80001a8a:	02a48493          	addi	s1,s1,42
+    80001a8e:	048e                	slli	s1,s1,0x3
+    80001a90:	9526                	add	a0,a0,s1
+    80001a92:	6108                	ld	a0,0(a0)
+    80001a94:	fffff097          	auipc	ra,0xfffff
+    80001a98:	1f0080e7          	jalr	496(ra) # 80000c84 <release>
+  return -1;
+    80001a9c:	557d                	li	a0,-1
+    80001a9e:	bfe1                	j	80001a76 <semdown+0x6c>
+    return -1;
+    80001aa0:	557d                	li	a0,-1
+    80001aa2:	bfd1                	j	80001a76 <semdown+0x6c>
+
+0000000080001aa4 <semup>:
+{
+    80001aa4:	1101                	addi	sp,sp,-32
+    80001aa6:	ec06                	sd	ra,24(sp)
+    80001aa8:	e822                	sd	s0,16(sp)
+    80001aaa:	e426                	sd	s1,8(sp)
+    80001aac:	1000                	addi	s0,sp,32
+    80001aae:	84aa                	mv	s1,a0
+  if(!is_valid_sid(sid)){
+    80001ab0:	00000097          	auipc	ra,0x0
+    80001ab4:	eb0080e7          	jalr	-336(ra) # 80001960 <is_valid_sid>
+    80001ab8:	c539                	beqz	a0,80001b06 <semup+0x62>
+  acquire(&(myproc()->osem[sid]->lock));
+    80001aba:	00000097          	auipc	ra,0x0
+    80001abe:	2bc080e7          	jalr	700(ra) # 80001d76 <myproc>
+    80001ac2:	02a48493          	addi	s1,s1,42
+    80001ac6:	048e                	slli	s1,s1,0x3
+    80001ac8:	9526                	add	a0,a0,s1
+    80001aca:	6108                	ld	a0,0(a0)
+    80001acc:	fffff097          	auipc	ra,0xfffff
+    80001ad0:	104080e7          	jalr	260(ra) # 80000bd0 <acquire>
+  myproc()->osem[sid]->value++;
+    80001ad4:	00000097          	auipc	ra,0x0
+    80001ad8:	2a2080e7          	jalr	674(ra) # 80001d76 <myproc>
+    80001adc:	9526                	add	a0,a0,s1
+    80001ade:	6118                	ld	a4,0(a0)
+    80001ae0:	4f1c                	lw	a5,24(a4)
+    80001ae2:	2785                	addiw	a5,a5,1
+    80001ae4:	cf1c                	sw	a5,24(a4)
+  release(&(myproc()->osem[sid]->lock));
+    80001ae6:	00000097          	auipc	ra,0x0
+    80001aea:	290080e7          	jalr	656(ra) # 80001d76 <myproc>
+    80001aee:	9526                	add	a0,a0,s1
+    80001af0:	6108                	ld	a0,0(a0)
+    80001af2:	fffff097          	auipc	ra,0xfffff
+    80001af6:	192080e7          	jalr	402(ra) # 80000c84 <release>
+  return 0;
+    80001afa:	4501                	li	a0,0
+}
+    80001afc:	60e2                	ld	ra,24(sp)
+    80001afe:	6442                	ld	s0,16(sp)
+    80001b00:	64a2                	ld	s1,8(sp)
+    80001b02:	6105                	addi	sp,sp,32
+    80001b04:	8082                	ret
+    return -1;
+    80001b06:	557d                	li	a0,-1
+    80001b08:	bfd5                	j	80001afc <semup+0x58>
+
+0000000080001b0a <semdup>:
+
+// Increment ref count for e f.
+struct sem*
+semdup(struct sem *s)
+{
+    80001b0a:	1101                	addi	sp,sp,-32
+    80001b0c:	ec06                	sd	ra,24(sp)
+    80001b0e:	e822                	sd	s0,16(sp)
+    80001b10:	e426                	sd	s1,8(sp)
+    80001b12:	1000                	addi	s0,sp,32
+    80001b14:	84aa                	mv	s1,a0
+  acquire(&s->lock);
+    80001b16:	fffff097          	auipc	ra,0xfffff
+    80001b1a:	0ba080e7          	jalr	186(ra) # 80000bd0 <acquire>
+  if(s->ref_count < 1)
+    80001b1e:	509c                	lw	a5,32(s1)
+    80001b20:	00f05f63          	blez	a5,80001b3e <semdup+0x34>
+    panic("semdup");
+  s->ref_count++;
+    80001b24:	2785                	addiw	a5,a5,1
+    80001b26:	d09c                	sw	a5,32(s1)
+  release(&s->lock);
+    80001b28:	8526                	mv	a0,s1
+    80001b2a:	fffff097          	auipc	ra,0xfffff
+    80001b2e:	15a080e7          	jalr	346(ra) # 80000c84 <release>
+  return s;
+}
+    80001b32:	8526                	mv	a0,s1
+    80001b34:	60e2                	ld	ra,24(sp)
+    80001b36:	6442                	ld	s0,16(sp)
+    80001b38:	64a2                	ld	s1,8(sp)
+    80001b3a:	6105                	addi	sp,sp,32
+    80001b3c:	8082                	ret
+    panic("semdup");
+    80001b3e:	00006517          	auipc	a0,0x6
+    80001b42:	69250513          	addi	a0,a0,1682 # 800081d0 <digits+0x1a0>
+    80001b46:	fffff097          	auipc	ra,0xfffff
+    80001b4a:	9f4080e7          	jalr	-1548(ra) # 8000053a <panic>
+
+0000000080001b4e <makerunnable>:
+
+  return pid;
+}
+
+static void
+makerunnable(int level, struct proc *p){
+    80001b4e:	7179                	addi	sp,sp,-48
+    80001b50:	f406                	sd	ra,40(sp)
+    80001b52:	f022                	sd	s0,32(sp)
+    80001b54:	ec26                	sd	s1,24(sp)
+    80001b56:	e84a                	sd	s2,16(sp)
+    80001b58:	e44e                	sd	s3,8(sp)
+    80001b5a:	1800                	addi	s0,sp,48
+    80001b5c:	89aa                	mv	s3,a0
+    80001b5e:	84ae                	mv	s1,a1
+  int holding_status = holding(&mlf_lock);
+    80001b60:	00010517          	auipc	a0,0x10
+    80001b64:	6e050513          	addi	a0,a0,1760 # 80012240 <mlf_lock>
+    80001b68:	fffff097          	auipc	ra,0xfffff
+    80001b6c:	fee080e7          	jalr	-18(ra) # 80000b56 <holding>
+    80001b70:	892a                	mv	s2,a0
+  if(!holding_status){
+    80001b72:	c525                	beqz	a0,80001bda <makerunnable+0x8c>
+    acquire(&mlf_lock);
+  }
+  if(level > MLFLEVELS){
+    80001b74:	87ce                	mv	a5,s3
+    80001b76:	07305b63          	blez	s3,80001bec <makerunnable+0x9e>
+    80001b7a:	0007871b          	sext.w	a4,a5
+    80001b7e:	4691                	li	a3,4
+    80001b80:	00e6d363          	bge	a3,a4,80001b86 <makerunnable+0x38>
+    80001b84:	4791                	li	a5,4
+    80001b86:	0007869b          	sext.w	a3,a5
+    level = MLFLEVELS;
+  }
+  else if(level < 1){
+    level = 1;
+  }
+  if(mlf[level-1].last == 0){
+    80001b8a:	37fd                	addiw	a5,a5,-1
+    80001b8c:	00479613          	slli	a2,a5,0x4
+    80001b90:	00010717          	auipc	a4,0x10
+    80001b94:	6b070713          	addi	a4,a4,1712 # 80012240 <mlf_lock>
+    80001b98:	9732                	add	a4,a4,a2
+    80001b9a:	7318                	ld	a4,32(a4)
+    80001b9c:	cb31                	beqz	a4,80001bf0 <makerunnable+0xa2>
+    mlf[level-1].last = p;
+    mlf[level-1].top = p;
+  }
+  else{
+    struct proc *last = mlf[level-1].last;
+    last->next = p;
+    80001b9e:	1e973823          	sd	s1,496(a4)
+    mlf[level-1].last = p;
+    80001ba2:	0792                	slli	a5,a5,0x4
+    80001ba4:	00010717          	auipc	a4,0x10
+    80001ba8:	69c70713          	addi	a4,a4,1692 # 80012240 <mlf_lock>
+    80001bac:	97ba                	add	a5,a5,a4
+    80001bae:	f384                	sd	s1,32(a5)
+  }
+  p->next = 0;
+    80001bb0:	1e04b823          	sd	zero,496(s1)
+  p->age = ticks;
+    80001bb4:	00007797          	auipc	a5,0x7
+    80001bb8:	47c7a783          	lw	a5,1148(a5) # 80009030 <ticks>
+    80001bbc:	1ef4ae23          	sw	a5,508(s1)
+  p->mlflevel = level;
+    80001bc0:	1ed4ac23          	sw	a3,504(s1)
+  p->state = RUNNABLE;
+    80001bc4:	478d                	li	a5,3
+    80001bc6:	cc9c                	sw	a5,24(s1)
+  if(!holding_status){
+    80001bc8:	02090d63          	beqz	s2,80001c02 <makerunnable+0xb4>
+    release(&mlf_lock);
+  }
+}
+    80001bcc:	70a2                	ld	ra,40(sp)
+    80001bce:	7402                	ld	s0,32(sp)
+    80001bd0:	64e2                	ld	s1,24(sp)
+    80001bd2:	6942                	ld	s2,16(sp)
+    80001bd4:	69a2                	ld	s3,8(sp)
+    80001bd6:	6145                	addi	sp,sp,48
+    80001bd8:	8082                	ret
+    acquire(&mlf_lock);
+    80001bda:	00010517          	auipc	a0,0x10
+    80001bde:	66650513          	addi	a0,a0,1638 # 80012240 <mlf_lock>
+    80001be2:	fffff097          	auipc	ra,0xfffff
+    80001be6:	fee080e7          	jalr	-18(ra) # 80000bd0 <acquire>
+    80001bea:	b769                	j	80001b74 <makerunnable+0x26>
+    80001bec:	4785                	li	a5,1
+    80001bee:	b771                	j	80001b7a <makerunnable+0x2c>
+    mlf[level-1].last = p;
+    80001bf0:	00010717          	auipc	a4,0x10
+    80001bf4:	65070713          	addi	a4,a4,1616 # 80012240 <mlf_lock>
+    80001bf8:	00c707b3          	add	a5,a4,a2
+    80001bfc:	f384                	sd	s1,32(a5)
+    mlf[level-1].top = p;
+    80001bfe:	ef84                	sd	s1,24(a5)
+    80001c00:	bf45                	j	80001bb0 <makerunnable+0x62>
+    release(&mlf_lock);
+    80001c02:	00010517          	auipc	a0,0x10
+    80001c06:	63e50513          	addi	a0,a0,1598 # 80012240 <mlf_lock>
+    80001c0a:	fffff097          	auipc	ra,0xfffff
+    80001c0e:	07a080e7          	jalr	122(ra) # 80000c84 <release>
+}
+    80001c12:	bf6d                	j	80001bcc <makerunnable+0x7e>
+
+0000000080001c14 <proc_mapstacks>:
+proc_mapstacks(pagetable_t kpgtbl) {
+    80001c14:	7139                	addi	sp,sp,-64
+    80001c16:	fc06                	sd	ra,56(sp)
+    80001c18:	f822                	sd	s0,48(sp)
+    80001c1a:	f426                	sd	s1,40(sp)
+    80001c1c:	f04a                	sd	s2,32(sp)
+    80001c1e:	ec4e                	sd	s3,24(sp)
+    80001c20:	e852                	sd	s4,16(sp)
+    80001c22:	e456                	sd	s5,8(sp)
+    80001c24:	0080                	addi	s0,sp,64
+    80001c26:	89aa                	mv	s3,a0
+  for(p = proc; p < &proc[NPROC]; p++) {
+    80001c28:	00011497          	auipc	s1,0x11
+    80001c2c:	aa048493          	addi	s1,s1,-1376 # 800126c8 <proc>
+    uint64 va = KSTACK((int) (p - proc));
+    80001c30:	8a26                	mv	s4,s1
+    80001c32:	04000937          	lui	s2,0x4000
+    80001c36:	197d                	addi	s2,s2,-1 # 3ffffff <_entry-0x7c000001>
+    80001c38:	0932                	slli	s2,s2,0xc
+  for(p = proc; p < &proc[NPROC]; p++) {
+    80001c3a:	00019a97          	auipc	s5,0x19
+    80001c3e:	a8ea8a93          	addi	s5,s5,-1394 # 8001a6c8 <tickslock>
+    char *pa = kalloc();
+    80001c42:	fffff097          	auipc	ra,0xfffff
+    80001c46:	e9e080e7          	jalr	-354(ra) # 80000ae0 <kalloc>
+    80001c4a:	862a                	mv	a2,a0
+    if(pa == 0)
+    80001c4c:	cd0d                	beqz	a0,80001c86 <proc_mapstacks+0x72>
+    uint64 va = KSTACK((int) (p - proc));
+    80001c4e:	414485b3          	sub	a1,s1,s4
+    80001c52:	85a5                	srai	a1,a1,0x9
+    80001c54:	2585                	addiw	a1,a1,1
+    80001c56:	00d5959b          	slliw	a1,a1,0xd
+    kvmmap(kpgtbl, va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
+    80001c5a:	4719                	li	a4,6
+    80001c5c:	6685                	lui	a3,0x1
+    80001c5e:	40b905b3          	sub	a1,s2,a1
+    80001c62:	854e                	mv	a0,s3
+    80001c64:	fffff097          	auipc	ra,0xfffff
+    80001c68:	4d8080e7          	jalr	1240(ra) # 8000113c <kvmmap>
+  for(p = proc; p < &proc[NPROC]; p++) {
+    80001c6c:	20048493          	addi	s1,s1,512
+    80001c70:	fd5499e3          	bne	s1,s5,80001c42 <proc_mapstacks+0x2e>
+}
+    80001c74:	70e2                	ld	ra,56(sp)
+    80001c76:	7442                	ld	s0,48(sp)
+    80001c78:	74a2                	ld	s1,40(sp)
+    80001c7a:	7902                	ld	s2,32(sp)
+    80001c7c:	69e2                	ld	s3,24(sp)
+    80001c7e:	6a42                	ld	s4,16(sp)
+    80001c80:	6aa2                	ld	s5,8(sp)
+    80001c82:	6121                	addi	sp,sp,64
+    80001c84:	8082                	ret
+      panic("kalloc");
+    80001c86:	00006517          	auipc	a0,0x6
+    80001c8a:	55250513          	addi	a0,a0,1362 # 800081d8 <digits+0x1a8>
+    80001c8e:	fffff097          	auipc	ra,0xfffff
+    80001c92:	8ac080e7          	jalr	-1876(ra) # 8000053a <panic>
+
+0000000080001c96 <procinit>:
+{
+    80001c96:	7139                	addi	sp,sp,-64
+    80001c98:	fc06                	sd	ra,56(sp)
+    80001c9a:	f822                	sd	s0,48(sp)
+    80001c9c:	f426                	sd	s1,40(sp)
+    80001c9e:	f04a                	sd	s2,32(sp)
+    80001ca0:	ec4e                	sd	s3,24(sp)
+    80001ca2:	e852                	sd	s4,16(sp)
+    80001ca4:	e456                	sd	s5,8(sp)
+    80001ca6:	0080                	addi	s0,sp,64
+  initlock(&pid_lock, "nextpid");
+    80001ca8:	00006597          	auipc	a1,0x6
+    80001cac:	53858593          	addi	a1,a1,1336 # 800081e0 <digits+0x1b0>
+    80001cb0:	00010517          	auipc	a0,0x10
+    80001cb4:	5e850513          	addi	a0,a0,1512 # 80012298 <pid_lock>
+    80001cb8:	fffff097          	auipc	ra,0xfffff
+    80001cbc:	e88080e7          	jalr	-376(ra) # 80000b40 <initlock>
+  initlock(&wait_lock, "wait_lock");
+    80001cc0:	00006597          	auipc	a1,0x6
+    80001cc4:	52858593          	addi	a1,a1,1320 # 800081e8 <digits+0x1b8>
+    80001cc8:	00010517          	auipc	a0,0x10
+    80001ccc:	5e850513          	addi	a0,a0,1512 # 800122b0 <wait_lock>
+    80001cd0:	fffff097          	auipc	ra,0xfffff
+    80001cd4:	e70080e7          	jalr	-400(ra) # 80000b40 <initlock>
+  initlock(&mlf_lock, "mlf");
+    80001cd8:	00006597          	auipc	a1,0x6
+    80001cdc:	52058593          	addi	a1,a1,1312 # 800081f8 <digits+0x1c8>
+    80001ce0:	00010517          	auipc	a0,0x10
+    80001ce4:	56050513          	addi	a0,a0,1376 # 80012240 <mlf_lock>
+    80001ce8:	fffff097          	auipc	ra,0xfffff
+    80001cec:	e58080e7          	jalr	-424(ra) # 80000b40 <initlock>
+  for(p = proc; p < &proc[NPROC]; p++) {
+    80001cf0:	00011497          	auipc	s1,0x11
+    80001cf4:	9d848493          	addi	s1,s1,-1576 # 800126c8 <proc>
+      initlock(&p->lock, "proc");
+    80001cf8:	00006a17          	auipc	s4,0x6
+    80001cfc:	508a0a13          	addi	s4,s4,1288 # 80008200 <digits+0x1d0>
+      p->kstack = KSTACK((int) (p - proc));
+    80001d00:	89a6                	mv	s3,s1
+    80001d02:	04000937          	lui	s2,0x4000
+    80001d06:	197d                	addi	s2,s2,-1 # 3ffffff <_entry-0x7c000001>
+    80001d08:	0932                	slli	s2,s2,0xc
+  for(p = proc; p < &proc[NPROC]; p++) {
+    80001d0a:	00019a97          	auipc	s5,0x19
+    80001d0e:	9bea8a93          	addi	s5,s5,-1602 # 8001a6c8 <tickslock>
+      initlock(&p->lock, "proc");
+    80001d12:	85d2                	mv	a1,s4
+    80001d14:	8526                	mv	a0,s1
+    80001d16:	fffff097          	auipc	ra,0xfffff
+    80001d1a:	e2a080e7          	jalr	-470(ra) # 80000b40 <initlock>
+      p->kstack = KSTACK((int) (p - proc));
+    80001d1e:	413487b3          	sub	a5,s1,s3
+    80001d22:	87a5                	srai	a5,a5,0x9
+    80001d24:	2785                	addiw	a5,a5,1
+    80001d26:	00d7979b          	slliw	a5,a5,0xd
+    80001d2a:	40f907b3          	sub	a5,s2,a5
+    80001d2e:	e0bc                	sd	a5,64(s1)
+  for(p = proc; p < &proc[NPROC]; p++) {
+    80001d30:	20048493          	addi	s1,s1,512
+    80001d34:	fd549fe3          	bne	s1,s5,80001d12 <procinit+0x7c>
+}
+    80001d38:	70e2                	ld	ra,56(sp)
+    80001d3a:	7442                	ld	s0,48(sp)
+    80001d3c:	74a2                	ld	s1,40(sp)
+    80001d3e:	7902                	ld	s2,32(sp)
+    80001d40:	69e2                	ld	s3,24(sp)
+    80001d42:	6a42                	ld	s4,16(sp)
+    80001d44:	6aa2                	ld	s5,8(sp)
+    80001d46:	6121                	addi	sp,sp,64
+    80001d48:	8082                	ret
+
+0000000080001d4a <cpuid>:
+{
+    80001d4a:	1141                	addi	sp,sp,-16
+    80001d4c:	e422                	sd	s0,8(sp)
+    80001d4e:	0800                	addi	s0,sp,16
+  asm volatile("mv %0, tp" : "=r" (x) );
+    80001d50:	8512                	mv	a0,tp
+}
+    80001d52:	2501                	sext.w	a0,a0
+    80001d54:	6422                	ld	s0,8(sp)
+    80001d56:	0141                	addi	sp,sp,16
+    80001d58:	8082                	ret
+
+0000000080001d5a <mycpu>:
+mycpu(void) {
+    80001d5a:	1141                	addi	sp,sp,-16
+    80001d5c:	e422                	sd	s0,8(sp)
+    80001d5e:	0800                	addi	s0,sp,16
+    80001d60:	8792                	mv	a5,tp
+  struct cpu *c = &cpus[id];
+    80001d62:	2781                	sext.w	a5,a5
+    80001d64:	079e                	slli	a5,a5,0x7
+}
+    80001d66:	00010517          	auipc	a0,0x10
+    80001d6a:	56250513          	addi	a0,a0,1378 # 800122c8 <cpus>
+    80001d6e:	953e                	add	a0,a0,a5
+    80001d70:	6422                	ld	s0,8(sp)
+    80001d72:	0141                	addi	sp,sp,16
+    80001d74:	8082                	ret
+
+0000000080001d76 <myproc>:
+myproc(void) {
+    80001d76:	1101                	addi	sp,sp,-32
+    80001d78:	ec06                	sd	ra,24(sp)
+    80001d7a:	e822                	sd	s0,16(sp)
+    80001d7c:	e426                	sd	s1,8(sp)
+    80001d7e:	1000                	addi	s0,sp,32
+  push_off();
+    80001d80:	fffff097          	auipc	ra,0xfffff
+    80001d84:	e04080e7          	jalr	-508(ra) # 80000b84 <push_off>
+    80001d88:	8792                	mv	a5,tp
+  struct proc *p = c->proc;
+    80001d8a:	2781                	sext.w	a5,a5
+    80001d8c:	079e                	slli	a5,a5,0x7
+    80001d8e:	00010717          	auipc	a4,0x10
+    80001d92:	4b270713          	addi	a4,a4,1202 # 80012240 <mlf_lock>
+    80001d96:	97ba                	add	a5,a5,a4
+    80001d98:	67c4                	ld	s1,136(a5)
+  pop_off();
+    80001d9a:	fffff097          	auipc	ra,0xfffff
+    80001d9e:	e8a080e7          	jalr	-374(ra) # 80000c24 <pop_off>
+}
+    80001da2:	8526                	mv	a0,s1
+    80001da4:	60e2                	ld	ra,24(sp)
+    80001da6:	6442                	ld	s0,16(sp)
+    80001da8:	64a2                	ld	s1,8(sp)
+    80001daa:	6105                	addi	sp,sp,32
+    80001dac:	8082                	ret
+
+0000000080001dae <forkret>:
+
+// A fork child's very first scheduling by scheduler()
+// will swtch to forkret.
+void
+forkret(void)
+{
+    80001dae:	1141                	addi	sp,sp,-16
+    80001db0:	e406                	sd	ra,8(sp)
+    80001db2:	e022                	sd	s0,0(sp)
+    80001db4:	0800                	addi	s0,sp,16
+  static int first = 1;
+
+  // Still holding p->lock from scheduler.
+  release(&myproc()->lock);
+    80001db6:	00000097          	auipc	ra,0x0
+    80001dba:	fc0080e7          	jalr	-64(ra) # 80001d76 <myproc>
+    80001dbe:	fffff097          	auipc	ra,0xfffff
+    80001dc2:	ec6080e7          	jalr	-314(ra) # 80000c84 <release>
+
+  if (first) {
+    80001dc6:	00007797          	auipc	a5,0x7
+    80001dca:	aba7a783          	lw	a5,-1350(a5) # 80008880 <first.1>
+    80001dce:	eb89                	bnez	a5,80001de0 <forkret+0x32>
+    // be run from main().
+    first = 0;
+    fsinit(ROOTDEV);
+  }
+
+  usertrapret();
+    80001dd0:	00001097          	auipc	ra,0x1
+    80001dd4:	de4080e7          	jalr	-540(ra) # 80002bb4 <usertrapret>
+}
+    80001dd8:	60a2                	ld	ra,8(sp)
+    80001dda:	6402                	ld	s0,0(sp)
+    80001ddc:	0141                	addi	sp,sp,16
+    80001dde:	8082                	ret
+    first = 0;
+    80001de0:	00007797          	auipc	a5,0x7
+    80001de4:	aa07a023          	sw	zero,-1376(a5) # 80008880 <first.1>
+    fsinit(ROOTDEV);
+    80001de8:	4505                	li	a0,1
+    80001dea:	00002097          	auipc	ra,0x2
+    80001dee:	ca4080e7          	jalr	-860(ra) # 80003a8e <fsinit>
+    80001df2:	bff9                	j	80001dd0 <forkret+0x22>
+
+0000000080001df4 <allocpid>:
+allocpid() {
+    80001df4:	1101                	addi	sp,sp,-32
+    80001df6:	ec06                	sd	ra,24(sp)
+    80001df8:	e822                	sd	s0,16(sp)
+    80001dfa:	e426                	sd	s1,8(sp)
+    80001dfc:	e04a                	sd	s2,0(sp)
+    80001dfe:	1000                	addi	s0,sp,32
+  acquire(&pid_lock);
+    80001e00:	00010917          	auipc	s2,0x10
+    80001e04:	49890913          	addi	s2,s2,1176 # 80012298 <pid_lock>
+    80001e08:	854a                	mv	a0,s2
+    80001e0a:	fffff097          	auipc	ra,0xfffff
+    80001e0e:	dc6080e7          	jalr	-570(ra) # 80000bd0 <acquire>
+  pid = nextpid;
+    80001e12:	00007797          	auipc	a5,0x7
+    80001e16:	a7278793          	addi	a5,a5,-1422 # 80008884 <nextpid>
+    80001e1a:	4384                	lw	s1,0(a5)
+  nextpid = nextpid + 1;
+    80001e1c:	0014871b          	addiw	a4,s1,1
+    80001e20:	c398                	sw	a4,0(a5)
+  release(&pid_lock);
+    80001e22:	854a                	mv	a0,s2
+    80001e24:	fffff097          	auipc	ra,0xfffff
+    80001e28:	e60080e7          	jalr	-416(ra) # 80000c84 <release>
+}
+    80001e2c:	8526                	mv	a0,s1
+    80001e2e:	60e2                	ld	ra,24(sp)
+    80001e30:	6442                	ld	s0,16(sp)
+    80001e32:	64a2                	ld	s1,8(sp)
+    80001e34:	6902                	ld	s2,0(sp)
+    80001e36:	6105                	addi	sp,sp,32
+    80001e38:	8082                	ret
+
+0000000080001e3a <proc_pagetable>:
+{
+    80001e3a:	1101                	addi	sp,sp,-32
+    80001e3c:	ec06                	sd	ra,24(sp)
+    80001e3e:	e822                	sd	s0,16(sp)
+    80001e40:	e426                	sd	s1,8(sp)
+    80001e42:	e04a                	sd	s2,0(sp)
+    80001e44:	1000                	addi	s0,sp,32
+    80001e46:	892a                	mv	s2,a0
+  pagetable = uvmcreate();
+    80001e48:	fffff097          	auipc	ra,0xfffff
+    80001e4c:	4de080e7          	jalr	1246(ra) # 80001326 <uvmcreate>
+    80001e50:	84aa                	mv	s1,a0
+  if(pagetable == 0)
+    80001e52:	c121                	beqz	a0,80001e92 <proc_pagetable+0x58>
+  if(mappages(pagetable, TRAMPOLINE, PGSIZE,
+    80001e54:	4729                	li	a4,10
+    80001e56:	00005697          	auipc	a3,0x5
+    80001e5a:	1aa68693          	addi	a3,a3,426 # 80007000 <_trampoline>
+    80001e5e:	6605                	lui	a2,0x1
+    80001e60:	040005b7          	lui	a1,0x4000
+    80001e64:	15fd                	addi	a1,a1,-1 # 3ffffff <_entry-0x7c000001>
+    80001e66:	05b2                	slli	a1,a1,0xc
+    80001e68:	fffff097          	auipc	ra,0xfffff
+    80001e6c:	234080e7          	jalr	564(ra) # 8000109c <mappages>
+    80001e70:	02054863          	bltz	a0,80001ea0 <proc_pagetable+0x66>
+  if(mappages(pagetable, TRAPFRAME, PGSIZE,
+    80001e74:	4719                	li	a4,6
+    80001e76:	05893683          	ld	a3,88(s2)
+    80001e7a:	6605                	lui	a2,0x1
+    80001e7c:	020005b7          	lui	a1,0x2000
+    80001e80:	15fd                	addi	a1,a1,-1 # 1ffffff <_entry-0x7e000001>
+    80001e82:	05b6                	slli	a1,a1,0xd
+    80001e84:	8526                	mv	a0,s1
+    80001e86:	fffff097          	auipc	ra,0xfffff
+    80001e8a:	216080e7          	jalr	534(ra) # 8000109c <mappages>
+    80001e8e:	02054163          	bltz	a0,80001eb0 <proc_pagetable+0x76>
+}
+    80001e92:	8526                	mv	a0,s1
+    80001e94:	60e2                	ld	ra,24(sp)
+    80001e96:	6442                	ld	s0,16(sp)
+    80001e98:	64a2                	ld	s1,8(sp)
+    80001e9a:	6902                	ld	s2,0(sp)
+    80001e9c:	6105                	addi	sp,sp,32
+    80001e9e:	8082                	ret
+    uvmfree(pagetable, 0);
+    80001ea0:	4581                	li	a1,0
+    80001ea2:	8526                	mv	a0,s1
+    80001ea4:	fffff097          	auipc	ra,0xfffff
+    80001ea8:	680080e7          	jalr	1664(ra) # 80001524 <uvmfree>
+    return 0;
+    80001eac:	4481                	li	s1,0
+    80001eae:	b7d5                	j	80001e92 <proc_pagetable+0x58>
+    uvmunmap(pagetable, TRAMPOLINE, 1, 0);
+    80001eb0:	4681                	li	a3,0
+    80001eb2:	4605                	li	a2,1
+    80001eb4:	040005b7          	lui	a1,0x4000
+    80001eb8:	15fd                	addi	a1,a1,-1 # 3ffffff <_entry-0x7c000001>
+    80001eba:	05b2                	slli	a1,a1,0xc
+    80001ebc:	8526                	mv	a0,s1
+    80001ebe:	fffff097          	auipc	ra,0xfffff
+    80001ec2:	3a4080e7          	jalr	932(ra) # 80001262 <uvmunmap>
+    uvmfree(pagetable, 0);
+    80001ec6:	4581                	li	a1,0
+    80001ec8:	8526                	mv	a0,s1
+    80001eca:	fffff097          	auipc	ra,0xfffff
+    80001ece:	65a080e7          	jalr	1626(ra) # 80001524 <uvmfree>
+    return 0;
+    80001ed2:	4481                	li	s1,0
+    80001ed4:	bf7d                	j	80001e92 <proc_pagetable+0x58>
+
+0000000080001ed6 <proc_freepagetable>:
+{
+    80001ed6:	1101                	addi	sp,sp,-32
+    80001ed8:	ec06                	sd	ra,24(sp)
+    80001eda:	e822                	sd	s0,16(sp)
+    80001edc:	e426                	sd	s1,8(sp)
+    80001ede:	e04a                	sd	s2,0(sp)
+    80001ee0:	1000                	addi	s0,sp,32
+    80001ee2:	84aa                	mv	s1,a0
+    80001ee4:	892e                	mv	s2,a1
+  uvmunmap(pagetable, TRAMPOLINE, 1, 0);
+    80001ee6:	4681                	li	a3,0
+    80001ee8:	4605                	li	a2,1
+    80001eea:	040005b7          	lui	a1,0x4000
+    80001eee:	15fd                	addi	a1,a1,-1 # 3ffffff <_entry-0x7c000001>
+    80001ef0:	05b2                	slli	a1,a1,0xc
+    80001ef2:	fffff097          	auipc	ra,0xfffff
+    80001ef6:	370080e7          	jalr	880(ra) # 80001262 <uvmunmap>
+  uvmunmap(pagetable, TRAPFRAME, 1, 0);
+    80001efa:	4681                	li	a3,0
+    80001efc:	4605                	li	a2,1
+    80001efe:	020005b7          	lui	a1,0x2000
+    80001f02:	15fd                	addi	a1,a1,-1 # 1ffffff <_entry-0x7e000001>
+    80001f04:	05b6                	slli	a1,a1,0xd
+    80001f06:	8526                	mv	a0,s1
+    80001f08:	fffff097          	auipc	ra,0xfffff
+    80001f0c:	35a080e7          	jalr	858(ra) # 80001262 <uvmunmap>
+  uvmfree(pagetable, sz);
+    80001f10:	85ca                	mv	a1,s2
+    80001f12:	8526                	mv	a0,s1
+    80001f14:	fffff097          	auipc	ra,0xfffff
+    80001f18:	610080e7          	jalr	1552(ra) # 80001524 <uvmfree>
+}
+    80001f1c:	60e2                	ld	ra,24(sp)
+    80001f1e:	6442                	ld	s0,16(sp)
+    80001f20:	64a2                	ld	s1,8(sp)
+    80001f22:	6902                	ld	s2,0(sp)
+    80001f24:	6105                	addi	sp,sp,32
+    80001f26:	8082                	ret
+
+0000000080001f28 <freeproc>:
+{
+    80001f28:	1101                	addi	sp,sp,-32
+    80001f2a:	ec06                	sd	ra,24(sp)
+    80001f2c:	e822                	sd	s0,16(sp)
+    80001f2e:	e426                	sd	s1,8(sp)
+    80001f30:	1000                	addi	s0,sp,32
+    80001f32:	84aa                	mv	s1,a0
+  if(p->trapframe)
+    80001f34:	6d28                	ld	a0,88(a0)
+    80001f36:	c509                	beqz	a0,80001f40 <freeproc+0x18>
+    kfree((void*)p->trapframe);
+    80001f38:	fffff097          	auipc	ra,0xfffff
+    80001f3c:	aaa080e7          	jalr	-1366(ra) # 800009e2 <kfree>
+  p->trapframe = 0;
+    80001f40:	0404bc23          	sd	zero,88(s1)
+  if(p->pagetable)
+    80001f44:	68a8                	ld	a0,80(s1)
+    80001f46:	c511                	beqz	a0,80001f52 <freeproc+0x2a>
+    proc_freepagetable(p->pagetable, p->sz);
+    80001f48:	64ac                	ld	a1,72(s1)
+    80001f4a:	00000097          	auipc	ra,0x0
+    80001f4e:	f8c080e7          	jalr	-116(ra) # 80001ed6 <proc_freepagetable>
+  p->pagetable = 0;
+    80001f52:	0404b823          	sd	zero,80(s1)
+  p->sz = 0;
+    80001f56:	0404b423          	sd	zero,72(s1)
+  p->pid = 0;
+    80001f5a:	0204a823          	sw	zero,48(s1)
+  p->parent = 0;
+    80001f5e:	0204bc23          	sd	zero,56(s1)
+  p->name[0] = 0;
+    80001f62:	1c048c23          	sb	zero,472(s1)
+  p->chan = 0;
+    80001f66:	0204b023          	sd	zero,32(s1)
+  p->killed = 0;
+    80001f6a:	0204a423          	sw	zero,40(s1)
+  p->xstate = 0;
+    80001f6e:	0204a623          	sw	zero,44(s1)
+  p->state = UNUSED;
+    80001f72:	0004ac23          	sw	zero,24(s1)
+}
+    80001f76:	60e2                	ld	ra,24(sp)
+    80001f78:	6442                	ld	s0,16(sp)
+    80001f7a:	64a2                	ld	s1,8(sp)
+    80001f7c:	6105                	addi	sp,sp,32
+    80001f7e:	8082                	ret
+
+0000000080001f80 <allocproc>:
+{
+    80001f80:	1101                	addi	sp,sp,-32
+    80001f82:	ec06                	sd	ra,24(sp)
+    80001f84:	e822                	sd	s0,16(sp)
+    80001f86:	e426                	sd	s1,8(sp)
+    80001f88:	e04a                	sd	s2,0(sp)
+    80001f8a:	1000                	addi	s0,sp,32
+  for(p = proc; p < &proc[NPROC]; p++) {
+    80001f8c:	00010497          	auipc	s1,0x10
+    80001f90:	73c48493          	addi	s1,s1,1852 # 800126c8 <proc>
+    80001f94:	00018917          	auipc	s2,0x18
+    80001f98:	73490913          	addi	s2,s2,1844 # 8001a6c8 <tickslock>
+    acquire(&p->lock);
+    80001f9c:	8526                	mv	a0,s1
+    80001f9e:	fffff097          	auipc	ra,0xfffff
+    80001fa2:	c32080e7          	jalr	-974(ra) # 80000bd0 <acquire>
+    if(p->state == UNUSED) {
+    80001fa6:	4c9c                	lw	a5,24(s1)
+    80001fa8:	cf81                	beqz	a5,80001fc0 <allocproc+0x40>
+      release(&p->lock);
+    80001faa:	8526                	mv	a0,s1
+    80001fac:	fffff097          	auipc	ra,0xfffff
+    80001fb0:	cd8080e7          	jalr	-808(ra) # 80000c84 <release>
+  for(p = proc; p < &proc[NPROC]; p++) {
+    80001fb4:	20048493          	addi	s1,s1,512
+    80001fb8:	ff2492e3          	bne	s1,s2,80001f9c <allocproc+0x1c>
+  return 0;
+    80001fbc:	4481                	li	s1,0
+    80001fbe:	a889                	j	80002010 <allocproc+0x90>
+  p->pid = allocpid();
+    80001fc0:	00000097          	auipc	ra,0x0
+    80001fc4:	e34080e7          	jalr	-460(ra) # 80001df4 <allocpid>
+    80001fc8:	d888                	sw	a0,48(s1)
+  p->state = USED;
+    80001fca:	4785                	li	a5,1
+    80001fcc:	cc9c                	sw	a5,24(s1)
+  if((p->trapframe = (struct trapframe *)kalloc()) == 0){
+    80001fce:	fffff097          	auipc	ra,0xfffff
+    80001fd2:	b12080e7          	jalr	-1262(ra) # 80000ae0 <kalloc>
+    80001fd6:	892a                	mv	s2,a0
+    80001fd8:	eca8                	sd	a0,88(s1)
+    80001fda:	c131                	beqz	a0,8000201e <allocproc+0x9e>
+  p->pagetable = proc_pagetable(p);
+    80001fdc:	8526                	mv	a0,s1
+    80001fde:	00000097          	auipc	ra,0x0
+    80001fe2:	e5c080e7          	jalr	-420(ra) # 80001e3a <proc_pagetable>
+    80001fe6:	892a                	mv	s2,a0
+    80001fe8:	e8a8                	sd	a0,80(s1)
+  if(p->pagetable == 0){
+    80001fea:	c531                	beqz	a0,80002036 <allocproc+0xb6>
+  memset(&p->context, 0, sizeof(p->context));
+    80001fec:	07000613          	li	a2,112
+    80001ff0:	4581                	li	a1,0
+    80001ff2:	06048513          	addi	a0,s1,96
+    80001ff6:	fffff097          	auipc	ra,0xfffff
+    80001ffa:	cd6080e7          	jalr	-810(ra) # 80000ccc <memset>
+  p->context.ra = (uint64)forkret;
+    80001ffe:	00000797          	auipc	a5,0x0
+    80002002:	db078793          	addi	a5,a5,-592 # 80001dae <forkret>
+    80002006:	f0bc                	sd	a5,96(s1)
+  p->context.sp = p->kstack + PGSIZE;
+    80002008:	60bc                	ld	a5,64(s1)
+    8000200a:	6705                	lui	a4,0x1
+    8000200c:	97ba                	add	a5,a5,a4
+    8000200e:	f4bc                	sd	a5,104(s1)
+}
+    80002010:	8526                	mv	a0,s1
+    80002012:	60e2                	ld	ra,24(sp)
+    80002014:	6442                	ld	s0,16(sp)
+    80002016:	64a2                	ld	s1,8(sp)
+    80002018:	6902                	ld	s2,0(sp)
+    8000201a:	6105                	addi	sp,sp,32
+    8000201c:	8082                	ret
+    freeproc(p);
+    8000201e:	8526                	mv	a0,s1
+    80002020:	00000097          	auipc	ra,0x0
+    80002024:	f08080e7          	jalr	-248(ra) # 80001f28 <freeproc>
+    release(&p->lock);
+    80002028:	8526                	mv	a0,s1
+    8000202a:	fffff097          	auipc	ra,0xfffff
+    8000202e:	c5a080e7          	jalr	-934(ra) # 80000c84 <release>
+    return 0;
+    80002032:	84ca                	mv	s1,s2
+    80002034:	bff1                	j	80002010 <allocproc+0x90>
+    freeproc(p);
+    80002036:	8526                	mv	a0,s1
+    80002038:	00000097          	auipc	ra,0x0
+    8000203c:	ef0080e7          	jalr	-272(ra) # 80001f28 <freeproc>
+    release(&p->lock);
+    80002040:	8526                	mv	a0,s1
+    80002042:	fffff097          	auipc	ra,0xfffff
+    80002046:	c42080e7          	jalr	-958(ra) # 80000c84 <release>
+    return 0;
+    8000204a:	84ca                	mv	s1,s2
+    8000204c:	b7d1                	j	80002010 <allocproc+0x90>
+
+000000008000204e <userinit>:
+{
+    8000204e:	1101                	addi	sp,sp,-32
+    80002050:	ec06                	sd	ra,24(sp)
+    80002052:	e822                	sd	s0,16(sp)
+    80002054:	e426                	sd	s1,8(sp)
+    80002056:	1000                	addi	s0,sp,32
+  p = allocproc();
+    80002058:	00000097          	auipc	ra,0x0
+    8000205c:	f28080e7          	jalr	-216(ra) # 80001f80 <allocproc>
+    80002060:	84aa                	mv	s1,a0
+  initproc = p;
+    80002062:	00007797          	auipc	a5,0x7
+    80002066:	fca7b323          	sd	a0,-58(a5) # 80009028 <initproc>
+  uvminit(p->pagetable, initcode, sizeof(initcode));
+    8000206a:	03400613          	li	a2,52
+    8000206e:	00007597          	auipc	a1,0x7
+    80002072:	82258593          	addi	a1,a1,-2014 # 80008890 <initcode>
+    80002076:	6928                	ld	a0,80(a0)
+    80002078:	fffff097          	auipc	ra,0xfffff
+    8000207c:	2dc080e7          	jalr	732(ra) # 80001354 <uvminit>
+  p->sz = PGSIZE;
+    80002080:	6785                	lui	a5,0x1
+    80002082:	e4bc                	sd	a5,72(s1)
+  p->trapframe->epc = 0;      // user program counter
+    80002084:	6cb8                	ld	a4,88(s1)
+    80002086:	00073c23          	sd	zero,24(a4) # 1018 <_entry-0x7fffefe8>
+  p->trapframe->sp = PGSIZE;  // user stack pointer
+    8000208a:	6cb8                	ld	a4,88(s1)
+    8000208c:	fb1c                	sd	a5,48(a4)
+  safestrcpy(p->name, "initcode", sizeof(p->name));
+    8000208e:	4641                	li	a2,16
+    80002090:	00006597          	auipc	a1,0x6
+    80002094:	17858593          	addi	a1,a1,376 # 80008208 <digits+0x1d8>
+    80002098:	1d848513          	addi	a0,s1,472
+    8000209c:	fffff097          	auipc	ra,0xfffff
+    800020a0:	d7a080e7          	jalr	-646(ra) # 80000e16 <safestrcpy>
+  p->cwd = namei("/");
+    800020a4:	00006517          	auipc	a0,0x6
+    800020a8:	17450513          	addi	a0,a0,372 # 80008218 <digits+0x1e8>
+    800020ac:	00002097          	auipc	ra,0x2
+    800020b0:	418080e7          	jalr	1048(ra) # 800044c4 <namei>
+    800020b4:	1ca4b823          	sd	a0,464(s1)
+  makerunnable(1,p);
+    800020b8:	85a6                	mv	a1,s1
+    800020ba:	4505                	li	a0,1
+    800020bc:	00000097          	auipc	ra,0x0
+    800020c0:	a92080e7          	jalr	-1390(ra) # 80001b4e <makerunnable>
+  release(&p->lock);
+    800020c4:	8526                	mv	a0,s1
+    800020c6:	fffff097          	auipc	ra,0xfffff
+    800020ca:	bbe080e7          	jalr	-1090(ra) # 80000c84 <release>
+}
+    800020ce:	60e2                	ld	ra,24(sp)
+    800020d0:	6442                	ld	s0,16(sp)
+    800020d2:	64a2                	ld	s1,8(sp)
+    800020d4:	6105                	addi	sp,sp,32
+    800020d6:	8082                	ret
+
+00000000800020d8 <growproc>:
+{
+    800020d8:	1101                	addi	sp,sp,-32
+    800020da:	ec06                	sd	ra,24(sp)
+    800020dc:	e822                	sd	s0,16(sp)
+    800020de:	e426                	sd	s1,8(sp)
+    800020e0:	e04a                	sd	s2,0(sp)
+    800020e2:	1000                	addi	s0,sp,32
+    800020e4:	84aa                	mv	s1,a0
+  struct proc *p = myproc();
+    800020e6:	00000097          	auipc	ra,0x0
+    800020ea:	c90080e7          	jalr	-880(ra) # 80001d76 <myproc>
+    800020ee:	892a                	mv	s2,a0
+  sz = p->sz;
+    800020f0:	652c                	ld	a1,72(a0)
+    800020f2:	0005879b          	sext.w	a5,a1
+  if(n > 0){
+    800020f6:	00904f63          	bgtz	s1,80002114 <growproc+0x3c>
+  } else if(n < 0){
+    800020fa:	0204cd63          	bltz	s1,80002134 <growproc+0x5c>
+  p->sz = sz;
+    800020fe:	1782                	slli	a5,a5,0x20
+    80002100:	9381                	srli	a5,a5,0x20
+    80002102:	04f93423          	sd	a5,72(s2)
+  return 0;
+    80002106:	4501                	li	a0,0
+}
+    80002108:	60e2                	ld	ra,24(sp)
+    8000210a:	6442                	ld	s0,16(sp)
+    8000210c:	64a2                	ld	s1,8(sp)
+    8000210e:	6902                	ld	s2,0(sp)
+    80002110:	6105                	addi	sp,sp,32
+    80002112:	8082                	ret
+    if((sz = uvmalloc(p->pagetable, sz, sz + n)) == 0) {
+    80002114:	00f4863b          	addw	a2,s1,a5
+    80002118:	1602                	slli	a2,a2,0x20
+    8000211a:	9201                	srli	a2,a2,0x20
+    8000211c:	1582                	slli	a1,a1,0x20
+    8000211e:	9181                	srli	a1,a1,0x20
+    80002120:	6928                	ld	a0,80(a0)
+    80002122:	fffff097          	auipc	ra,0xfffff
+    80002126:	2ec080e7          	jalr	748(ra) # 8000140e <uvmalloc>
+    8000212a:	0005079b          	sext.w	a5,a0
+    8000212e:	fbe1                	bnez	a5,800020fe <growproc+0x26>
+      return -1;
+    80002130:	557d                	li	a0,-1
+    80002132:	bfd9                	j	80002108 <growproc+0x30>
+    sz = uvmdealloc(p->pagetable, sz, sz + n);
+    80002134:	00f4863b          	addw	a2,s1,a5
+    80002138:	1602                	slli	a2,a2,0x20
+    8000213a:	9201                	srli	a2,a2,0x20
+    8000213c:	1582                	slli	a1,a1,0x20
+    8000213e:	9181                	srli	a1,a1,0x20
+    80002140:	6928                	ld	a0,80(a0)
+    80002142:	fffff097          	auipc	ra,0xfffff
+    80002146:	284080e7          	jalr	644(ra) # 800013c6 <uvmdealloc>
+    8000214a:	0005079b          	sext.w	a5,a0
+    8000214e:	bf45                	j	800020fe <growproc+0x26>
+
+0000000080002150 <fork>:
+{
+    80002150:	7139                	addi	sp,sp,-64
+    80002152:	fc06                	sd	ra,56(sp)
+    80002154:	f822                	sd	s0,48(sp)
+    80002156:	f426                	sd	s1,40(sp)
+    80002158:	f04a                	sd	s2,32(sp)
+    8000215a:	ec4e                	sd	s3,24(sp)
+    8000215c:	e852                	sd	s4,16(sp)
+    8000215e:	e456                	sd	s5,8(sp)
+    80002160:	0080                	addi	s0,sp,64
+  struct proc *p = myproc();
+    80002162:	00000097          	auipc	ra,0x0
+    80002166:	c14080e7          	jalr	-1004(ra) # 80001d76 <myproc>
+    8000216a:	8a2a                	mv	s4,a0
+  if((np = allocproc()) == 0){
+    8000216c:	00000097          	auipc	ra,0x0
+    80002170:	e14080e7          	jalr	-492(ra) # 80001f80 <allocproc>
+    80002174:	14050463          	beqz	a0,800022bc <fork+0x16c>
+    80002178:	89aa                	mv	s3,a0
+  if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
+    8000217a:	048a3603          	ld	a2,72(s4)
+    8000217e:	692c                	ld	a1,80(a0)
+    80002180:	050a3503          	ld	a0,80(s4)
+    80002184:	fffff097          	auipc	ra,0xfffff
+    80002188:	3da080e7          	jalr	986(ra) # 8000155e <uvmcopy>
+    8000218c:	04054863          	bltz	a0,800021dc <fork+0x8c>
+  np->sz = p->sz;
+    80002190:	048a3783          	ld	a5,72(s4)
+    80002194:	04f9b423          	sd	a5,72(s3)
+  *(np->trapframe) = *(p->trapframe);
+    80002198:	058a3683          	ld	a3,88(s4)
+    8000219c:	87b6                	mv	a5,a3
+    8000219e:	0589b703          	ld	a4,88(s3)
+    800021a2:	12068693          	addi	a3,a3,288
+    800021a6:	0007b803          	ld	a6,0(a5) # 1000 <_entry-0x7ffff000>
+    800021aa:	6788                	ld	a0,8(a5)
+    800021ac:	6b8c                	ld	a1,16(a5)
+    800021ae:	6f90                	ld	a2,24(a5)
+    800021b0:	01073023          	sd	a6,0(a4)
+    800021b4:	e708                	sd	a0,8(a4)
+    800021b6:	eb0c                	sd	a1,16(a4)
+    800021b8:	ef10                	sd	a2,24(a4)
+    800021ba:	02078793          	addi	a5,a5,32
+    800021be:	02070713          	addi	a4,a4,32
+    800021c2:	fed792e3          	bne	a5,a3,800021a6 <fork+0x56>
+  np->trapframe->a0 = 0;
+    800021c6:	0589b783          	ld	a5,88(s3)
+    800021ca:	0607b823          	sd	zero,112(a5)
+  for(i = 0; i < NOFILE; i++)
+    800021ce:	0d0a0493          	addi	s1,s4,208
+    800021d2:	0d098913          	addi	s2,s3,208
+    800021d6:	150a0a93          	addi	s5,s4,336
+    800021da:	a00d                	j	800021fc <fork+0xac>
+    freeproc(np);
+    800021dc:	854e                	mv	a0,s3
+    800021de:	00000097          	auipc	ra,0x0
+    800021e2:	d4a080e7          	jalr	-694(ra) # 80001f28 <freeproc>
+    release(&np->lock);
+    800021e6:	854e                	mv	a0,s3
+    800021e8:	fffff097          	auipc	ra,0xfffff
+    800021ec:	a9c080e7          	jalr	-1380(ra) # 80000c84 <release>
+    return -1;
+    800021f0:	597d                	li	s2,-1
+    800021f2:	a85d                	j	800022a8 <fork+0x158>
+  for(i = 0; i < NOFILE; i++)
+    800021f4:	04a1                	addi	s1,s1,8
+    800021f6:	0921                	addi	s2,s2,8
+    800021f8:	01548b63          	beq	s1,s5,8000220e <fork+0xbe>
+    if(p->ofile[i])
+    800021fc:	6088                	ld	a0,0(s1)
+    800021fe:	d97d                	beqz	a0,800021f4 <fork+0xa4>
+      np->ofile[i] = filedup(p->ofile[i]);
+    80002200:	00003097          	auipc	ra,0x3
+    80002204:	95a080e7          	jalr	-1702(ra) # 80004b5a <filedup>
+    80002208:	00a93023          	sd	a0,0(s2)
+    8000220c:	b7e5                	j	800021f4 <fork+0xa4>
+  np->cwd = idup(p->cwd);
+    8000220e:	1d0a3503          	ld	a0,464(s4)
+    80002212:	00002097          	auipc	ra,0x2
+    80002216:	ab8080e7          	jalr	-1352(ra) # 80003cca <idup>
+    8000221a:	1ca9b823          	sd	a0,464(s3)
+  for(i = 0; i < NOSEM; i++)
+    8000221e:	150a0493          	addi	s1,s4,336
+    80002222:	15098913          	addi	s2,s3,336
+    80002226:	1d0a0a93          	addi	s5,s4,464
+    8000222a:	a029                	j	80002234 <fork+0xe4>
+    8000222c:	04a1                	addi	s1,s1,8
+    8000222e:	0921                	addi	s2,s2,8
+    80002230:	01548b63          	beq	s1,s5,80002246 <fork+0xf6>
+    if(p->osem[i])
+    80002234:	6088                	ld	a0,0(s1)
+    80002236:	d97d                	beqz	a0,8000222c <fork+0xdc>
+      np->osem[i] = semdup(p->osem[i]);
+    80002238:	00000097          	auipc	ra,0x0
+    8000223c:	8d2080e7          	jalr	-1838(ra) # 80001b0a <semdup>
+    80002240:	00a93023          	sd	a0,0(s2)
+    80002244:	b7e5                	j	8000222c <fork+0xdc>
+  safestrcpy(np->name, p->name, sizeof(p->name));
+    80002246:	4641                	li	a2,16
+    80002248:	1d8a0593          	addi	a1,s4,472
+    8000224c:	1d898513          	addi	a0,s3,472
+    80002250:	fffff097          	auipc	ra,0xfffff
+    80002254:	bc6080e7          	jalr	-1082(ra) # 80000e16 <safestrcpy>
+  pid = np->pid;
+    80002258:	0309a903          	lw	s2,48(s3)
+  release(&np->lock);
+    8000225c:	854e                	mv	a0,s3
+    8000225e:	fffff097          	auipc	ra,0xfffff
+    80002262:	a26080e7          	jalr	-1498(ra) # 80000c84 <release>
+  acquire(&wait_lock);
+    80002266:	00010497          	auipc	s1,0x10
+    8000226a:	04a48493          	addi	s1,s1,74 # 800122b0 <wait_lock>
+    8000226e:	8526                	mv	a0,s1
+    80002270:	fffff097          	auipc	ra,0xfffff
+    80002274:	960080e7          	jalr	-1696(ra) # 80000bd0 <acquire>
+  np->parent = p;
+    80002278:	0349bc23          	sd	s4,56(s3)
+  release(&wait_lock);
+    8000227c:	8526                	mv	a0,s1
+    8000227e:	fffff097          	auipc	ra,0xfffff
+    80002282:	a06080e7          	jalr	-1530(ra) # 80000c84 <release>
+  acquire(&np->lock);
+    80002286:	854e                	mv	a0,s3
+    80002288:	fffff097          	auipc	ra,0xfffff
+    8000228c:	948080e7          	jalr	-1720(ra) # 80000bd0 <acquire>
+  makerunnable(p->mlflevel,np);
+    80002290:	85ce                	mv	a1,s3
+    80002292:	1f8a2503          	lw	a0,504(s4)
+    80002296:	00000097          	auipc	ra,0x0
+    8000229a:	8b8080e7          	jalr	-1864(ra) # 80001b4e <makerunnable>
+  release(&np->lock);
+    8000229e:	854e                	mv	a0,s3
+    800022a0:	fffff097          	auipc	ra,0xfffff
+    800022a4:	9e4080e7          	jalr	-1564(ra) # 80000c84 <release>
+}
+    800022a8:	854a                	mv	a0,s2
+    800022aa:	70e2                	ld	ra,56(sp)
+    800022ac:	7442                	ld	s0,48(sp)
+    800022ae:	74a2                	ld	s1,40(sp)
+    800022b0:	7902                	ld	s2,32(sp)
+    800022b2:	69e2                	ld	s3,24(sp)
+    800022b4:	6a42                	ld	s4,16(sp)
+    800022b6:	6aa2                	ld	s5,8(sp)
+    800022b8:	6121                	addi	sp,sp,64
+    800022ba:	8082                	ret
+    return -1;
+    800022bc:	597d                	li	s2,-1
+    800022be:	b7ed                	j	800022a8 <fork+0x158>
+
+00000000800022c0 <ageprocs>:
+{
+    800022c0:	715d                	addi	sp,sp,-80
+    800022c2:	e486                	sd	ra,72(sp)
+    800022c4:	e0a2                	sd	s0,64(sp)
+    800022c6:	fc26                	sd	s1,56(sp)
+    800022c8:	f84a                	sd	s2,48(sp)
+    800022ca:	f44e                	sd	s3,40(sp)
+    800022cc:	f052                	sd	s4,32(sp)
+    800022ce:	ec56                	sd	s5,24(sp)
+    800022d0:	e85a                	sd	s6,16(sp)
+    800022d2:	e45e                	sd	s7,8(sp)
+    800022d4:	0880                	addi	s0,sp,80
+  acquire(&mlf_lock);
+    800022d6:	00010517          	auipc	a0,0x10
+    800022da:	f6a50513          	addi	a0,a0,-150 # 80012240 <mlf_lock>
+    800022de:	fffff097          	auipc	ra,0xfffff
+    800022e2:	8f2080e7          	jalr	-1806(ra) # 80000bd0 <acquire>
+  for(int index = 1; index < MLFLEVELS; index++){
+    800022e6:	00010497          	auipc	s1,0x10
+    800022ea:	f7248493          	addi	s1,s1,-142 # 80012258 <mlf>
+  acquire(&mlf_lock);
+    800022ee:	4981                	li	s3,0
+    if(ticks - current->age > MAXAGE){
+    800022f0:	00007b97          	auipc	s7,0x7
+    800022f4:	d40b8b93          	addi	s7,s7,-704 # 80009030 <ticks>
+    800022f8:	4b15                	li	s6,5
+  for(int index = 1; index < MLFLEVELS; index++){
+    800022fa:	4a0d                	li	s4,3
+    800022fc:	a02d                	j	80002326 <ageprocs+0x66>
+        mlf[index].top = 0;
+    800022fe:	0004b823          	sd	zero,16(s1)
+        mlf[index].last = 0;
+    80002302:	0004bc23          	sd	zero,24(s1)
+      makerunnable(index-1,current);
+    80002306:	85ca                	mv	a1,s2
+    80002308:	0009851b          	sext.w	a0,s3
+    8000230c:	00000097          	auipc	ra,0x0
+    80002310:	842080e7          	jalr	-1982(ra) # 80001b4e <makerunnable>
+    release(&current->lock);
+    80002314:	854a                	mv	a0,s2
+    80002316:	fffff097          	auipc	ra,0xfffff
+    8000231a:	96e080e7          	jalr	-1682(ra) # 80000c84 <release>
+  for(int index = 1; index < MLFLEVELS; index++){
+    8000231e:	0985                	addi	s3,s3,1
+    80002320:	04c1                	addi	s1,s1,16
+    80002322:	03498d63          	beq	s3,s4,8000235c <ageprocs+0x9c>
+    struct proc *current = mlf[index].top;
+    80002326:	0104b903          	ld	s2,16(s1)
+    if(!current || holding(&current->lock)){
+    8000232a:	fe090ae3          	beqz	s2,8000231e <ageprocs+0x5e>
+    8000232e:	854a                	mv	a0,s2
+    80002330:	fffff097          	auipc	ra,0xfffff
+    80002334:	826080e7          	jalr	-2010(ra) # 80000b56 <holding>
+    80002338:	f17d                	bnez	a0,8000231e <ageprocs+0x5e>
+    acquire(&current->lock);
+    8000233a:	854a                	mv	a0,s2
+    8000233c:	fffff097          	auipc	ra,0xfffff
+    80002340:	894080e7          	jalr	-1900(ra) # 80000bd0 <acquire>
+    if(ticks - current->age > MAXAGE){
+    80002344:	000ba783          	lw	a5,0(s7)
+    80002348:	1fc92703          	lw	a4,508(s2)
+    8000234c:	9f99                	subw	a5,a5,a4
+    8000234e:	fcfb73e3          	bgeu	s6,a5,80002314 <ageprocs+0x54>
+      if(current->next != 0){
+    80002352:	1f093783          	ld	a5,496(s2)
+    80002356:	d7c5                	beqz	a5,800022fe <ageprocs+0x3e>
+        mlf[index].top = current->next;
+    80002358:	e89c                	sd	a5,16(s1)
+    8000235a:	b775                	j	80002306 <ageprocs+0x46>
+  release(&mlf_lock);
+    8000235c:	00010517          	auipc	a0,0x10
+    80002360:	ee450513          	addi	a0,a0,-284 # 80012240 <mlf_lock>
+    80002364:	fffff097          	auipc	ra,0xfffff
+    80002368:	920080e7          	jalr	-1760(ra) # 80000c84 <release>
+}
+    8000236c:	60a6                	ld	ra,72(sp)
+    8000236e:	6406                	ld	s0,64(sp)
+    80002370:	74e2                	ld	s1,56(sp)
+    80002372:	7942                	ld	s2,48(sp)
+    80002374:	79a2                	ld	s3,40(sp)
+    80002376:	7a02                	ld	s4,32(sp)
+    80002378:	6ae2                	ld	s5,24(sp)
+    8000237a:	6b42                	ld	s6,16(sp)
+    8000237c:	6ba2                	ld	s7,8(sp)
+    8000237e:	6161                	addi	sp,sp,80
+    80002380:	8082                	ret
+
+0000000080002382 <scheduler>:
+{
+    80002382:	715d                	addi	sp,sp,-80
+    80002384:	e486                	sd	ra,72(sp)
+    80002386:	e0a2                	sd	s0,64(sp)
+    80002388:	fc26                	sd	s1,56(sp)
+    8000238a:	f84a                	sd	s2,48(sp)
+    8000238c:	f44e                	sd	s3,40(sp)
+    8000238e:	f052                	sd	s4,32(sp)
+    80002390:	ec56                	sd	s5,24(sp)
+    80002392:	e85a                	sd	s6,16(sp)
+    80002394:	e45e                	sd	s7,8(sp)
+    80002396:	e062                	sd	s8,0(sp)
+    80002398:	0880                	addi	s0,sp,80
+    8000239a:	8a12                	mv	s4,tp
+  int id = r_tp();
+    8000239c:	2a01                	sext.w	s4,s4
+  c->proc = 0;
+    8000239e:	007a1a93          	slli	s5,s4,0x7
+    800023a2:	00010797          	auipc	a5,0x10
+    800023a6:	e9e78793          	addi	a5,a5,-354 # 80012240 <mlf_lock>
+    800023aa:	97d6                	add	a5,a5,s5
+    800023ac:	0807b423          	sd	zero,136(a5)
+    swtch(&c->context, &p->context);
+    800023b0:	00010797          	auipc	a5,0x10
+    800023b4:	f2078793          	addi	a5,a5,-224 # 800122d0 <cpus+0x8>
+    800023b8:	9abe                	add	s5,s5,a5
+  acquire(&mlf_lock);
+    800023ba:	00010997          	auipc	s3,0x10
+    800023be:	e8698993          	addi	s3,s3,-378 # 80012240 <mlf_lock>
+  for(int index = 0; index < MLFLEVELS; index++){
+    800023c2:	4b01                	li	s6,0
+    800023c4:	4911                	li	s2,4
+    if(p->state != RUNNABLE){
+    800023c6:	4c0d                	li	s8,3
+    p->age = ticks;
+    800023c8:	00007b97          	auipc	s7,0x7
+    800023cc:	c68b8b93          	addi	s7,s7,-920 # 80009030 <ticks>
+    c->proc = p;
+    800023d0:	0a1e                	slli	s4,s4,0x7
+    800023d2:	9a4e                	add	s4,s4,s3
+    800023d4:	a0b5                	j	80002440 <scheduler+0xbe>
+      mlf[index].top = first->next;
+    800023d6:	1f04b683          	ld	a3,496(s1)
+    800023da:	00479713          	slli	a4,a5,0x4
+    800023de:	974e                	add	a4,a4,s3
+    800023e0:	ef14                	sd	a3,24(a4)
+      if(!mlf[index].top){
+    800023e2:	c6b9                	beqz	a3,80002430 <scheduler+0xae>
+      release(&mlf_lock);
+    800023e4:	854e                	mv	a0,s3
+    800023e6:	fffff097          	auipc	ra,0xfffff
+    800023ea:	89e080e7          	jalr	-1890(ra) # 80000c84 <release>
+    if(p->state != RUNNABLE){
+    800023ee:	4c8c                	lw	a1,24(s1)
+    800023f0:	07859f63          	bne	a1,s8,8000246e <scheduler+0xec>
+    acquire(&p->lock);
+    800023f4:	8526                	mv	a0,s1
+    800023f6:	ffffe097          	auipc	ra,0xffffe
+    800023fa:	7da080e7          	jalr	2010(ra) # 80000bd0 <acquire>
+    p->state = RUNNING;
+    800023fe:	0124ac23          	sw	s2,24(s1)
+    p->age = ticks;
+    80002402:	000ba783          	lw	a5,0(s7)
+    80002406:	1ef4ae23          	sw	a5,508(s1)
+    p->ticks = 0;
+    8000240a:	1e049423          	sh	zero,488(s1)
+    c->proc = p;
+    8000240e:	089a3423          	sd	s1,136(s4)
+    swtch(&c->context, &p->context);
+    80002412:	06048593          	addi	a1,s1,96
+    80002416:	8556                	mv	a0,s5
+    80002418:	00000097          	auipc	ra,0x0
+    8000241c:	6f2080e7          	jalr	1778(ra) # 80002b0a <swtch>
+    c->proc = 0;
+    80002420:	080a3423          	sd	zero,136(s4)
+    release(&p->lock);
+    80002424:	8526                	mv	a0,s1
+    80002426:	fffff097          	auipc	ra,0xfffff
+    8000242a:	85e080e7          	jalr	-1954(ra) # 80000c84 <release>
+    8000242e:	a809                	j	80002440 <scheduler+0xbe>
+        mlf[index].last = 0;
+    80002430:	02073023          	sd	zero,32(a4)
+    80002434:	bf45                	j	800023e4 <scheduler+0x62>
+  release(&mlf_lock);
+    80002436:	854e                	mv	a0,s3
+    80002438:	fffff097          	auipc	ra,0xfffff
+    8000243c:	84c080e7          	jalr	-1972(ra) # 80000c84 <release>
+  asm volatile("csrr %0, sstatus" : "=r" (x) );
+    80002440:	100027f3          	csrr	a5,sstatus
+  w_sstatus(r_sstatus() | SSTATUS_SIE);
+    80002444:	0027e793          	ori	a5,a5,2
+  asm volatile("csrw sstatus, %0" : : "r" (x));
+    80002448:	10079073          	csrw	sstatus,a5
+  acquire(&mlf_lock);
+    8000244c:	854e                	mv	a0,s3
+    8000244e:	ffffe097          	auipc	ra,0xffffe
+    80002452:	782080e7          	jalr	1922(ra) # 80000bd0 <acquire>
+  for(int index = 0; index < MLFLEVELS; index++){
+    80002456:	00010717          	auipc	a4,0x10
+    8000245a:	e0270713          	addi	a4,a4,-510 # 80012258 <mlf>
+    8000245e:	87da                	mv	a5,s6
+    if(mlf[index].top != 0){
+    80002460:	6304                	ld	s1,0(a4)
+    80002462:	f8b5                	bnez	s1,800023d6 <scheduler+0x54>
+  for(int index = 0; index < MLFLEVELS; index++){
+    80002464:	2785                	addiw	a5,a5,1
+    80002466:	0741                	addi	a4,a4,16
+    80002468:	ff279ce3          	bne	a5,s2,80002460 <scheduler+0xde>
+    8000246c:	b7e9                	j	80002436 <scheduler+0xb4>
+      printf("State is %d \n", p->state);
+    8000246e:	00006517          	auipc	a0,0x6
+    80002472:	db250513          	addi	a0,a0,-590 # 80008220 <digits+0x1f0>
+    80002476:	ffffe097          	auipc	ra,0xffffe
+    8000247a:	10e080e7          	jalr	270(ra) # 80000584 <printf>
+      panic("Process is not in a runnable state");
+    8000247e:	00006517          	auipc	a0,0x6
+    80002482:	db250513          	addi	a0,a0,-590 # 80008230 <digits+0x200>
+    80002486:	ffffe097          	auipc	ra,0xffffe
+    8000248a:	0b4080e7          	jalr	180(ra) # 8000053a <panic>
+
+000000008000248e <sched>:
+{
+    8000248e:	7179                	addi	sp,sp,-48
+    80002490:	f406                	sd	ra,40(sp)
+    80002492:	f022                	sd	s0,32(sp)
+    80002494:	ec26                	sd	s1,24(sp)
+    80002496:	e84a                	sd	s2,16(sp)
+    80002498:	e44e                	sd	s3,8(sp)
+    8000249a:	1800                	addi	s0,sp,48
+  struct proc *p = myproc();
+    8000249c:	00000097          	auipc	ra,0x0
+    800024a0:	8da080e7          	jalr	-1830(ra) # 80001d76 <myproc>
+    800024a4:	84aa                	mv	s1,a0
+  if(!holding(&p->lock))
+    800024a6:	ffffe097          	auipc	ra,0xffffe
+    800024aa:	6b0080e7          	jalr	1712(ra) # 80000b56 <holding>
+    800024ae:	c93d                	beqz	a0,80002524 <sched+0x96>
+  asm volatile("mv %0, tp" : "=r" (x) );
+    800024b0:	8792                	mv	a5,tp
+  if(mycpu()->noff != 1)
+    800024b2:	2781                	sext.w	a5,a5
+    800024b4:	079e                	slli	a5,a5,0x7
+    800024b6:	00010717          	auipc	a4,0x10
+    800024ba:	d8a70713          	addi	a4,a4,-630 # 80012240 <mlf_lock>
+    800024be:	97ba                	add	a5,a5,a4
+    800024c0:	1007a703          	lw	a4,256(a5)
+    800024c4:	4785                	li	a5,1
+    800024c6:	06f71763          	bne	a4,a5,80002534 <sched+0xa6>
+  if(p->state == RUNNING)
+    800024ca:	4c98                	lw	a4,24(s1)
+    800024cc:	4791                	li	a5,4
+    800024ce:	06f70b63          	beq	a4,a5,80002544 <sched+0xb6>
+  asm volatile("csrr %0, sstatus" : "=r" (x) );
+    800024d2:	100027f3          	csrr	a5,sstatus
+  return (x & SSTATUS_SIE) != 0;
+    800024d6:	8b89                	andi	a5,a5,2
+  if(intr_get())
+    800024d8:	efb5                	bnez	a5,80002554 <sched+0xc6>
+  asm volatile("mv %0, tp" : "=r" (x) );
+    800024da:	8792                	mv	a5,tp
+  intena = mycpu()->intena;
+    800024dc:	00010917          	auipc	s2,0x10
+    800024e0:	d6490913          	addi	s2,s2,-668 # 80012240 <mlf_lock>
+    800024e4:	2781                	sext.w	a5,a5
+    800024e6:	079e                	slli	a5,a5,0x7
+    800024e8:	97ca                	add	a5,a5,s2
+    800024ea:	1047a983          	lw	s3,260(a5)
+    800024ee:	8792                	mv	a5,tp
+  swtch(&p->context, &mycpu()->context);
+    800024f0:	2781                	sext.w	a5,a5
+    800024f2:	079e                	slli	a5,a5,0x7
+    800024f4:	00010597          	auipc	a1,0x10
+    800024f8:	ddc58593          	addi	a1,a1,-548 # 800122d0 <cpus+0x8>
+    800024fc:	95be                	add	a1,a1,a5
+    800024fe:	06048513          	addi	a0,s1,96
+    80002502:	00000097          	auipc	ra,0x0
+    80002506:	608080e7          	jalr	1544(ra) # 80002b0a <swtch>
+    8000250a:	8792                	mv	a5,tp
+  mycpu()->intena = intena;
+    8000250c:	2781                	sext.w	a5,a5
+    8000250e:	079e                	slli	a5,a5,0x7
+    80002510:	993e                	add	s2,s2,a5
+    80002512:	11392223          	sw	s3,260(s2)
+}
+    80002516:	70a2                	ld	ra,40(sp)
+    80002518:	7402                	ld	s0,32(sp)
+    8000251a:	64e2                	ld	s1,24(sp)
+    8000251c:	6942                	ld	s2,16(sp)
+    8000251e:	69a2                	ld	s3,8(sp)
+    80002520:	6145                	addi	sp,sp,48
+    80002522:	8082                	ret
+    panic("sched p->lock");
+    80002524:	00006517          	auipc	a0,0x6
+    80002528:	d3450513          	addi	a0,a0,-716 # 80008258 <digits+0x228>
+    8000252c:	ffffe097          	auipc	ra,0xffffe
+    80002530:	00e080e7          	jalr	14(ra) # 8000053a <panic>
+    panic("sched locks");
+    80002534:	00006517          	auipc	a0,0x6
+    80002538:	d3450513          	addi	a0,a0,-716 # 80008268 <digits+0x238>
+    8000253c:	ffffe097          	auipc	ra,0xffffe
+    80002540:	ffe080e7          	jalr	-2(ra) # 8000053a <panic>
+    panic("sched running");
+    80002544:	00006517          	auipc	a0,0x6
+    80002548:	d3450513          	addi	a0,a0,-716 # 80008278 <digits+0x248>
+    8000254c:	ffffe097          	auipc	ra,0xffffe
+    80002550:	fee080e7          	jalr	-18(ra) # 8000053a <panic>
+    panic("sched interruptible");
+    80002554:	00006517          	auipc	a0,0x6
+    80002558:	d3450513          	addi	a0,a0,-716 # 80008288 <digits+0x258>
+    8000255c:	ffffe097          	auipc	ra,0xffffe
+    80002560:	fde080e7          	jalr	-34(ra) # 8000053a <panic>
+
+0000000080002564 <yield>:
+{
+    80002564:	1101                	addi	sp,sp,-32
+    80002566:	ec06                	sd	ra,24(sp)
+    80002568:	e822                	sd	s0,16(sp)
+    8000256a:	e426                	sd	s1,8(sp)
+    8000256c:	1000                	addi	s0,sp,32
+  struct proc *p = myproc();
+    8000256e:	00000097          	auipc	ra,0x0
+    80002572:	808080e7          	jalr	-2040(ra) # 80001d76 <myproc>
+    80002576:	84aa                	mv	s1,a0
+  acquire(&p->lock);
+    80002578:	ffffe097          	auipc	ra,0xffffe
+    8000257c:	658080e7          	jalr	1624(ra) # 80000bd0 <acquire>
+  makerunnable(p->mlflevel+1,p);
+    80002580:	1f84a503          	lw	a0,504(s1)
+    80002584:	85a6                	mv	a1,s1
+    80002586:	2505                	addiw	a0,a0,1
+    80002588:	fffff097          	auipc	ra,0xfffff
+    8000258c:	5c6080e7          	jalr	1478(ra) # 80001b4e <makerunnable>
+  sched();
+    80002590:	00000097          	auipc	ra,0x0
+    80002594:	efe080e7          	jalr	-258(ra) # 8000248e <sched>
+  release(&p->lock);
+    80002598:	8526                	mv	a0,s1
+    8000259a:	ffffe097          	auipc	ra,0xffffe
+    8000259e:	6ea080e7          	jalr	1770(ra) # 80000c84 <release>
+}
+    800025a2:	60e2                	ld	ra,24(sp)
+    800025a4:	6442                	ld	s0,16(sp)
+    800025a6:	64a2                	ld	s1,8(sp)
+    800025a8:	6105                	addi	sp,sp,32
+    800025aa:	8082                	ret
+
+00000000800025ac <sleep>:
+
+// Atomically release lock and sleep on chan.
+// Reacquires lock when awakened.
+void
+sleep(void *chan, struct spinlock *lk)
+{
+    800025ac:	7179                	addi	sp,sp,-48
+    800025ae:	f406                	sd	ra,40(sp)
+    800025b0:	f022                	sd	s0,32(sp)
+    800025b2:	ec26                	sd	s1,24(sp)
+    800025b4:	e84a                	sd	s2,16(sp)
+    800025b6:	e44e                	sd	s3,8(sp)
+    800025b8:	1800                	addi	s0,sp,48
+    800025ba:	89aa                	mv	s3,a0
+    800025bc:	892e                	mv	s2,a1
+  struct proc *p = myproc();
+    800025be:	fffff097          	auipc	ra,0xfffff
+    800025c2:	7b8080e7          	jalr	1976(ra) # 80001d76 <myproc>
+    800025c6:	84aa                	mv	s1,a0
+  // Once we hold p->lock, we can be
+  // guaranteed that we won't miss any wakeup
+  // (wakeup locks p->lock),
+  // so it's okay to release lk.
+
+  acquire(&p->lock);  //DOC: sleeplock1
+    800025c8:	ffffe097          	auipc	ra,0xffffe
+    800025cc:	608080e7          	jalr	1544(ra) # 80000bd0 <acquire>
+  release(lk);
+    800025d0:	854a                	mv	a0,s2
+    800025d2:	ffffe097          	auipc	ra,0xffffe
+    800025d6:	6b2080e7          	jalr	1714(ra) # 80000c84 <release>
+
+  // Go to sleep.
+  p->chan = chan;
+    800025da:	0334b023          	sd	s3,32(s1)
+  p->state = SLEEPING;
+    800025de:	4789                	li	a5,2
+    800025e0:	cc9c                	sw	a5,24(s1)
+
+  sched();
+    800025e2:	00000097          	auipc	ra,0x0
+    800025e6:	eac080e7          	jalr	-340(ra) # 8000248e <sched>
+
+  // Tidy up.
+  p->chan = 0;
+    800025ea:	0204b023          	sd	zero,32(s1)
+
+  // Reacquire original lock.
+  release(&p->lock);
+    800025ee:	8526                	mv	a0,s1
+    800025f0:	ffffe097          	auipc	ra,0xffffe
+    800025f4:	694080e7          	jalr	1684(ra) # 80000c84 <release>
+  acquire(lk);
+    800025f8:	854a                	mv	a0,s2
+    800025fa:	ffffe097          	auipc	ra,0xffffe
+    800025fe:	5d6080e7          	jalr	1494(ra) # 80000bd0 <acquire>
+}
+    80002602:	70a2                	ld	ra,40(sp)
+    80002604:	7402                	ld	s0,32(sp)
+    80002606:	64e2                	ld	s1,24(sp)
+    80002608:	6942                	ld	s2,16(sp)
+    8000260a:	69a2                	ld	s3,8(sp)
+    8000260c:	6145                	addi	sp,sp,48
+    8000260e:	8082                	ret
+
+0000000080002610 <wait>:
+{
+    80002610:	715d                	addi	sp,sp,-80
+    80002612:	e486                	sd	ra,72(sp)
+    80002614:	e0a2                	sd	s0,64(sp)
+    80002616:	fc26                	sd	s1,56(sp)
+    80002618:	f84a                	sd	s2,48(sp)
+    8000261a:	f44e                	sd	s3,40(sp)
+    8000261c:	f052                	sd	s4,32(sp)
+    8000261e:	ec56                	sd	s5,24(sp)
+    80002620:	e85a                	sd	s6,16(sp)
+    80002622:	e45e                	sd	s7,8(sp)
+    80002624:	e062                	sd	s8,0(sp)
+    80002626:	0880                	addi	s0,sp,80
+    80002628:	8b2a                	mv	s6,a0
+  struct proc *p = myproc();
+    8000262a:	fffff097          	auipc	ra,0xfffff
+    8000262e:	74c080e7          	jalr	1868(ra) # 80001d76 <myproc>
+    80002632:	892a                	mv	s2,a0
+  acquire(&wait_lock);
+    80002634:	00010517          	auipc	a0,0x10
+    80002638:	c7c50513          	addi	a0,a0,-900 # 800122b0 <wait_lock>
+    8000263c:	ffffe097          	auipc	ra,0xffffe
+    80002640:	594080e7          	jalr	1428(ra) # 80000bd0 <acquire>
+    havekids = 0;
+    80002644:	4b81                	li	s7,0
+        if(np->state == ZOMBIE){
+    80002646:	4a15                	li	s4,5
+        havekids = 1;
+    80002648:	4a85                	li	s5,1
+    for(np = proc; np < &proc[NPROC]; np++){
+    8000264a:	00018997          	auipc	s3,0x18
+    8000264e:	07e98993          	addi	s3,s3,126 # 8001a6c8 <tickslock>
+    sleep(p, &wait_lock);  //DOC: wait-sleep
+    80002652:	00010c17          	auipc	s8,0x10
+    80002656:	c5ec0c13          	addi	s8,s8,-930 # 800122b0 <wait_lock>
+    havekids = 0;
+    8000265a:	875e                	mv	a4,s7
+    for(np = proc; np < &proc[NPROC]; np++){
+    8000265c:	00010497          	auipc	s1,0x10
+    80002660:	06c48493          	addi	s1,s1,108 # 800126c8 <proc>
+    80002664:	a0bd                	j	800026d2 <wait+0xc2>
+          pid = np->pid;
+    80002666:	0304a983          	lw	s3,48(s1)
+          if(addr != 0 && copyout(p->pagetable, addr, (char *)&np->xstate,
+    8000266a:	000b0e63          	beqz	s6,80002686 <wait+0x76>
+    8000266e:	4691                	li	a3,4
+    80002670:	02c48613          	addi	a2,s1,44
+    80002674:	85da                	mv	a1,s6
+    80002676:	05093503          	ld	a0,80(s2)
+    8000267a:	fffff097          	auipc	ra,0xfffff
+    8000267e:	fe8080e7          	jalr	-24(ra) # 80001662 <copyout>
+    80002682:	02054563          	bltz	a0,800026ac <wait+0x9c>
+          freeproc(np);
+    80002686:	8526                	mv	a0,s1
+    80002688:	00000097          	auipc	ra,0x0
+    8000268c:	8a0080e7          	jalr	-1888(ra) # 80001f28 <freeproc>
+          release(&np->lock);
+    80002690:	8526                	mv	a0,s1
+    80002692:	ffffe097          	auipc	ra,0xffffe
+    80002696:	5f2080e7          	jalr	1522(ra) # 80000c84 <release>
+          release(&wait_lock);
+    8000269a:	00010517          	auipc	a0,0x10
+    8000269e:	c1650513          	addi	a0,a0,-1002 # 800122b0 <wait_lock>
+    800026a2:	ffffe097          	auipc	ra,0xffffe
+    800026a6:	5e2080e7          	jalr	1506(ra) # 80000c84 <release>
+          return pid;
+    800026aa:	a09d                	j	80002710 <wait+0x100>
+            release(&np->lock);
+    800026ac:	8526                	mv	a0,s1
+    800026ae:	ffffe097          	auipc	ra,0xffffe
+    800026b2:	5d6080e7          	jalr	1494(ra) # 80000c84 <release>
+            release(&wait_lock);
+    800026b6:	00010517          	auipc	a0,0x10
+    800026ba:	bfa50513          	addi	a0,a0,-1030 # 800122b0 <wait_lock>
+    800026be:	ffffe097          	auipc	ra,0xffffe
+    800026c2:	5c6080e7          	jalr	1478(ra) # 80000c84 <release>
+            return -1;
+    800026c6:	59fd                	li	s3,-1
+    800026c8:	a0a1                	j	80002710 <wait+0x100>
+    for(np = proc; np < &proc[NPROC]; np++){
+    800026ca:	20048493          	addi	s1,s1,512
+    800026ce:	03348463          	beq	s1,s3,800026f6 <wait+0xe6>
+      if(np->parent == p){
+    800026d2:	7c9c                	ld	a5,56(s1)
+    800026d4:	ff279be3          	bne	a5,s2,800026ca <wait+0xba>
+        acquire(&np->lock);
+    800026d8:	8526                	mv	a0,s1
+    800026da:	ffffe097          	auipc	ra,0xffffe
+    800026de:	4f6080e7          	jalr	1270(ra) # 80000bd0 <acquire>
+        if(np->state == ZOMBIE){
+    800026e2:	4c9c                	lw	a5,24(s1)
+    800026e4:	f94781e3          	beq	a5,s4,80002666 <wait+0x56>
+        release(&np->lock);
+    800026e8:	8526                	mv	a0,s1
+    800026ea:	ffffe097          	auipc	ra,0xffffe
+    800026ee:	59a080e7          	jalr	1434(ra) # 80000c84 <release>
+        havekids = 1;
+    800026f2:	8756                	mv	a4,s5
+    800026f4:	bfd9                	j	800026ca <wait+0xba>
+    if(!havekids || p->killed){
+    800026f6:	c701                	beqz	a4,800026fe <wait+0xee>
+    800026f8:	02892783          	lw	a5,40(s2)
+    800026fc:	c79d                	beqz	a5,8000272a <wait+0x11a>
+      release(&wait_lock);
+    800026fe:	00010517          	auipc	a0,0x10
+    80002702:	bb250513          	addi	a0,a0,-1102 # 800122b0 <wait_lock>
+    80002706:	ffffe097          	auipc	ra,0xffffe
+    8000270a:	57e080e7          	jalr	1406(ra) # 80000c84 <release>
+      return -1;
+    8000270e:	59fd                	li	s3,-1
+}
+    80002710:	854e                	mv	a0,s3
+    80002712:	60a6                	ld	ra,72(sp)
+    80002714:	6406                	ld	s0,64(sp)
+    80002716:	74e2                	ld	s1,56(sp)
+    80002718:	7942                	ld	s2,48(sp)
+    8000271a:	79a2                	ld	s3,40(sp)
+    8000271c:	7a02                	ld	s4,32(sp)
+    8000271e:	6ae2                	ld	s5,24(sp)
+    80002720:	6b42                	ld	s6,16(sp)
+    80002722:	6ba2                	ld	s7,8(sp)
+    80002724:	6c02                	ld	s8,0(sp)
+    80002726:	6161                	addi	sp,sp,80
+    80002728:	8082                	ret
+    sleep(p, &wait_lock);  //DOC: wait-sleep
+    8000272a:	85e2                	mv	a1,s8
+    8000272c:	854a                	mv	a0,s2
+    8000272e:	00000097          	auipc	ra,0x0
+    80002732:	e7e080e7          	jalr	-386(ra) # 800025ac <sleep>
+    havekids = 0;
+    80002736:	b715                	j	8000265a <wait+0x4a>
+
+0000000080002738 <wakeup>:
+
+// Wake up all processes sleeping on chan.
+// Must be called without any p->lock.
+void
+wakeup(void *chan)
+{
+    80002738:	7179                	addi	sp,sp,-48
+    8000273a:	f406                	sd	ra,40(sp)
+    8000273c:	f022                	sd	s0,32(sp)
+    8000273e:	ec26                	sd	s1,24(sp)
+    80002740:	e84a                	sd	s2,16(sp)
+    80002742:	e44e                	sd	s3,8(sp)
+    80002744:	e052                	sd	s4,0(sp)
+    80002746:	1800                	addi	s0,sp,48
+    80002748:	8a2a                	mv	s4,a0
+  struct proc *p;
+
+  for(p = proc; p < &proc[NPROC]; p++) {
+    8000274a:	00010497          	auipc	s1,0x10
+    8000274e:	f7e48493          	addi	s1,s1,-130 # 800126c8 <proc>
+    if(p != myproc()){
+      acquire(&p->lock);
+      if(p->state == SLEEPING && p->chan == chan) {
+    80002752:	4989                	li	s3,2
+  for(p = proc; p < &proc[NPROC]; p++) {
+    80002754:	00018917          	auipc	s2,0x18
+    80002758:	f7490913          	addi	s2,s2,-140 # 8001a6c8 <tickslock>
+    8000275c:	a811                	j	80002770 <wakeup+0x38>
+        makerunnable(p->mlflevel-1,p);
+      }
+      release(&p->lock);
+    8000275e:	8526                	mv	a0,s1
+    80002760:	ffffe097          	auipc	ra,0xffffe
+    80002764:	524080e7          	jalr	1316(ra) # 80000c84 <release>
+  for(p = proc; p < &proc[NPROC]; p++) {
+    80002768:	20048493          	addi	s1,s1,512
+    8000276c:	03248c63          	beq	s1,s2,800027a4 <wakeup+0x6c>
+    if(p != myproc()){
+    80002770:	fffff097          	auipc	ra,0xfffff
+    80002774:	606080e7          	jalr	1542(ra) # 80001d76 <myproc>
+    80002778:	fea488e3          	beq	s1,a0,80002768 <wakeup+0x30>
+      acquire(&p->lock);
+    8000277c:	8526                	mv	a0,s1
+    8000277e:	ffffe097          	auipc	ra,0xffffe
+    80002782:	452080e7          	jalr	1106(ra) # 80000bd0 <acquire>
+      if(p->state == SLEEPING && p->chan == chan) {
+    80002786:	4c9c                	lw	a5,24(s1)
+    80002788:	fd379be3          	bne	a5,s3,8000275e <wakeup+0x26>
+    8000278c:	709c                	ld	a5,32(s1)
+    8000278e:	fd4798e3          	bne	a5,s4,8000275e <wakeup+0x26>
+        makerunnable(p->mlflevel-1,p);
+    80002792:	1f84a503          	lw	a0,504(s1)
+    80002796:	85a6                	mv	a1,s1
+    80002798:	357d                	addiw	a0,a0,-1
+    8000279a:	fffff097          	auipc	ra,0xfffff
+    8000279e:	3b4080e7          	jalr	948(ra) # 80001b4e <makerunnable>
+    800027a2:	bf75                	j	8000275e <wakeup+0x26>
+    }
+  }
+}
+    800027a4:	70a2                	ld	ra,40(sp)
+    800027a6:	7402                	ld	s0,32(sp)
+    800027a8:	64e2                	ld	s1,24(sp)
+    800027aa:	6942                	ld	s2,16(sp)
+    800027ac:	69a2                	ld	s3,8(sp)
+    800027ae:	6a02                	ld	s4,0(sp)
+    800027b0:	6145                	addi	sp,sp,48
+    800027b2:	8082                	ret
+
+00000000800027b4 <reparent>:
+{
+    800027b4:	7179                	addi	sp,sp,-48
+    800027b6:	f406                	sd	ra,40(sp)
+    800027b8:	f022                	sd	s0,32(sp)
+    800027ba:	ec26                	sd	s1,24(sp)
+    800027bc:	e84a                	sd	s2,16(sp)
+    800027be:	e44e                	sd	s3,8(sp)
+    800027c0:	e052                	sd	s4,0(sp)
+    800027c2:	1800                	addi	s0,sp,48
+    800027c4:	892a                	mv	s2,a0
+  for(pp = proc; pp < &proc[NPROC]; pp++){
+    800027c6:	00010497          	auipc	s1,0x10
+    800027ca:	f0248493          	addi	s1,s1,-254 # 800126c8 <proc>
+      pp->parent = initproc;
+    800027ce:	00007a17          	auipc	s4,0x7
+    800027d2:	85aa0a13          	addi	s4,s4,-1958 # 80009028 <initproc>
+  for(pp = proc; pp < &proc[NPROC]; pp++){
+    800027d6:	00018997          	auipc	s3,0x18
+    800027da:	ef298993          	addi	s3,s3,-270 # 8001a6c8 <tickslock>
+    800027de:	a029                	j	800027e8 <reparent+0x34>
+    800027e0:	20048493          	addi	s1,s1,512
+    800027e4:	01348d63          	beq	s1,s3,800027fe <reparent+0x4a>
+    if(pp->parent == p){
+    800027e8:	7c9c                	ld	a5,56(s1)
+    800027ea:	ff279be3          	bne	a5,s2,800027e0 <reparent+0x2c>
+      pp->parent = initproc;
+    800027ee:	000a3503          	ld	a0,0(s4)
+    800027f2:	fc88                	sd	a0,56(s1)
+      wakeup(initproc);
+    800027f4:	00000097          	auipc	ra,0x0
+    800027f8:	f44080e7          	jalr	-188(ra) # 80002738 <wakeup>
+    800027fc:	b7d5                	j	800027e0 <reparent+0x2c>
+}
+    800027fe:	70a2                	ld	ra,40(sp)
+    80002800:	7402                	ld	s0,32(sp)
+    80002802:	64e2                	ld	s1,24(sp)
+    80002804:	6942                	ld	s2,16(sp)
+    80002806:	69a2                	ld	s3,8(sp)
+    80002808:	6a02                	ld	s4,0(sp)
+    8000280a:	6145                	addi	sp,sp,48
+    8000280c:	8082                	ret
+
+000000008000280e <exit>:
+{
+    8000280e:	7179                	addi	sp,sp,-48
+    80002810:	f406                	sd	ra,40(sp)
+    80002812:	f022                	sd	s0,32(sp)
+    80002814:	ec26                	sd	s1,24(sp)
+    80002816:	e84a                	sd	s2,16(sp)
+    80002818:	e44e                	sd	s3,8(sp)
+    8000281a:	e052                	sd	s4,0(sp)
+    8000281c:	1800                	addi	s0,sp,48
+    8000281e:	8a2a                	mv	s4,a0
+  struct proc *p = myproc();
+    80002820:	fffff097          	auipc	ra,0xfffff
+    80002824:	556080e7          	jalr	1366(ra) # 80001d76 <myproc>
+    80002828:	89aa                	mv	s3,a0
+  if(p == initproc)
+    8000282a:	00006797          	auipc	a5,0x6
+    8000282e:	7fe7b783          	ld	a5,2046(a5) # 80009028 <initproc>
+    80002832:	0d050493          	addi	s1,a0,208
+    80002836:	15050913          	addi	s2,a0,336
+    8000283a:	02a79363          	bne	a5,a0,80002860 <exit+0x52>
+    panic("init exiting");
+    8000283e:	00006517          	auipc	a0,0x6
+    80002842:	a6250513          	addi	a0,a0,-1438 # 800082a0 <digits+0x270>
+    80002846:	ffffe097          	auipc	ra,0xffffe
+    8000284a:	cf4080e7          	jalr	-780(ra) # 8000053a <panic>
+      fileclose(f);
+    8000284e:	00002097          	auipc	ra,0x2
+    80002852:	35e080e7          	jalr	862(ra) # 80004bac <fileclose>
+      p->ofile[fd] = 0;
+    80002856:	0004b023          	sd	zero,0(s1)
+  for(int fd = 0; fd < NOFILE; fd++){
+    8000285a:	04a1                	addi	s1,s1,8
+    8000285c:	01248563          	beq	s1,s2,80002866 <exit+0x58>
+    if(p->ofile[fd]){
+    80002860:	6088                	ld	a0,0(s1)
+    80002862:	f575                	bnez	a0,8000284e <exit+0x40>
+    80002864:	bfdd                	j	8000285a <exit+0x4c>
+  for(int position = 0; position <  NOSEM ; position++){
+    80002866:	4481                	li	s1,0
+    80002868:	4941                	li	s2,16
+    semclose(position);
+    8000286a:	8526                	mv	a0,s1
+    8000286c:	fffff097          	auipc	ra,0xfffff
+    80002870:	12a080e7          	jalr	298(ra) # 80001996 <semclose>
+  for(int position = 0; position <  NOSEM ; position++){
+    80002874:	2485                	addiw	s1,s1,1
+    80002876:	ff249ae3          	bne	s1,s2,8000286a <exit+0x5c>
+  begin_op();
+    8000287a:	00002097          	auipc	ra,0x2
+    8000287e:	e6a080e7          	jalr	-406(ra) # 800046e4 <begin_op>
+  iput(p->cwd);
+    80002882:	1d09b503          	ld	a0,464(s3)
+    80002886:	00001097          	auipc	ra,0x1
+    8000288a:	63c080e7          	jalr	1596(ra) # 80003ec2 <iput>
+  end_op();
+    8000288e:	00002097          	auipc	ra,0x2
+    80002892:	ed4080e7          	jalr	-300(ra) # 80004762 <end_op>
+  p->cwd = 0;
+    80002896:	1c09b823          	sd	zero,464(s3)
+  acquire(&wait_lock);
+    8000289a:	00010497          	auipc	s1,0x10
+    8000289e:	a1648493          	addi	s1,s1,-1514 # 800122b0 <wait_lock>
+    800028a2:	8526                	mv	a0,s1
+    800028a4:	ffffe097          	auipc	ra,0xffffe
+    800028a8:	32c080e7          	jalr	812(ra) # 80000bd0 <acquire>
+  reparent(p);
+    800028ac:	854e                	mv	a0,s3
+    800028ae:	00000097          	auipc	ra,0x0
+    800028b2:	f06080e7          	jalr	-250(ra) # 800027b4 <reparent>
+  wakeup(p->parent);
+    800028b6:	0389b503          	ld	a0,56(s3)
+    800028ba:	00000097          	auipc	ra,0x0
+    800028be:	e7e080e7          	jalr	-386(ra) # 80002738 <wakeup>
+  acquire(&p->lock);
+    800028c2:	854e                	mv	a0,s3
+    800028c4:	ffffe097          	auipc	ra,0xffffe
+    800028c8:	30c080e7          	jalr	780(ra) # 80000bd0 <acquire>
+  p->xstate = status;
+    800028cc:	0349a623          	sw	s4,44(s3)
+  p->state = ZOMBIE;
+    800028d0:	4795                	li	a5,5
+    800028d2:	00f9ac23          	sw	a5,24(s3)
+  release(&wait_lock);
+    800028d6:	8526                	mv	a0,s1
+    800028d8:	ffffe097          	auipc	ra,0xffffe
+    800028dc:	3ac080e7          	jalr	940(ra) # 80000c84 <release>
+  sched();
+    800028e0:	00000097          	auipc	ra,0x0
+    800028e4:	bae080e7          	jalr	-1106(ra) # 8000248e <sched>
+  panic("zombie exit");
+    800028e8:	00006517          	auipc	a0,0x6
+    800028ec:	9c850513          	addi	a0,a0,-1592 # 800082b0 <digits+0x280>
+    800028f0:	ffffe097          	auipc	ra,0xffffe
+    800028f4:	c4a080e7          	jalr	-950(ra) # 8000053a <panic>
+
+00000000800028f8 <kill>:
+// Kill the process with the given pid.
+// The victim won't exit until it tries to return
+// to user space (see usertrap() in trap.c).
+int
+kill(int pid)
+{
+    800028f8:	7179                	addi	sp,sp,-48
+    800028fa:	f406                	sd	ra,40(sp)
+    800028fc:	f022                	sd	s0,32(sp)
+    800028fe:	ec26                	sd	s1,24(sp)
+    80002900:	e84a                	sd	s2,16(sp)
+    80002902:	e44e                	sd	s3,8(sp)
+    80002904:	1800                	addi	s0,sp,48
+    80002906:	892a                	mv	s2,a0
+  struct proc *p;
+
+  // Starts in proc + 1 because the init process has pid == 1,
+  // and we don't want to be able to kill it.
+  for(p = proc + 1; p < &proc[NPROC]; p++){
+    80002908:	00010497          	auipc	s1,0x10
+    8000290c:	fc048493          	addi	s1,s1,-64 # 800128c8 <proc+0x200>
+    80002910:	00018997          	auipc	s3,0x18
+    80002914:	db898993          	addi	s3,s3,-584 # 8001a6c8 <tickslock>
+    acquire(&p->lock);
+    80002918:	8526                	mv	a0,s1
+    8000291a:	ffffe097          	auipc	ra,0xffffe
+    8000291e:	2b6080e7          	jalr	694(ra) # 80000bd0 <acquire>
+    if(p->pid == pid){
+    80002922:	589c                	lw	a5,48(s1)
+    80002924:	01278d63          	beq	a5,s2,8000293e <kill+0x46>
+        makerunnable(p->mlflevel,p);
+      }
+      release(&p->lock);
+      return 0;
+    }
+    release(&p->lock);
+    80002928:	8526                	mv	a0,s1
+    8000292a:	ffffe097          	auipc	ra,0xffffe
+    8000292e:	35a080e7          	jalr	858(ra) # 80000c84 <release>
+  for(p = proc + 1; p < &proc[NPROC]; p++){
+    80002932:	20048493          	addi	s1,s1,512
+    80002936:	ff3491e3          	bne	s1,s3,80002918 <kill+0x20>
+  }
+  return -1;
+    8000293a:	557d                	li	a0,-1
+    8000293c:	a829                	j	80002956 <kill+0x5e>
+      p->killed = 1;
+    8000293e:	4785                	li	a5,1
+    80002940:	d49c                	sw	a5,40(s1)
+      if(p->state == SLEEPING){
+    80002942:	4c98                	lw	a4,24(s1)
+    80002944:	4789                	li	a5,2
+    80002946:	00f70f63          	beq	a4,a5,80002964 <kill+0x6c>
+      release(&p->lock);
+    8000294a:	8526                	mv	a0,s1
+    8000294c:	ffffe097          	auipc	ra,0xffffe
+    80002950:	338080e7          	jalr	824(ra) # 80000c84 <release>
+      return 0;
+    80002954:	4501                	li	a0,0
+}
+    80002956:	70a2                	ld	ra,40(sp)
+    80002958:	7402                	ld	s0,32(sp)
+    8000295a:	64e2                	ld	s1,24(sp)
+    8000295c:	6942                	ld	s2,16(sp)
+    8000295e:	69a2                	ld	s3,8(sp)
+    80002960:	6145                	addi	sp,sp,48
+    80002962:	8082                	ret
+        makerunnable(p->mlflevel,p);
+    80002964:	85a6                	mv	a1,s1
+    80002966:	1f84a503          	lw	a0,504(s1)
+    8000296a:	fffff097          	auipc	ra,0xfffff
+    8000296e:	1e4080e7          	jalr	484(ra) # 80001b4e <makerunnable>
+    80002972:	bfe1                	j	8000294a <kill+0x52>
+
+0000000080002974 <either_copyout>:
+// Copy to either a user address, or kernel address,
+// depending on usr_dst.
+// Returns 0 on success, -1 on error.
+int
+either_copyout(int user_dst, uint64 dst, void *src, uint64 len)
+{
+    80002974:	7179                	addi	sp,sp,-48
+    80002976:	f406                	sd	ra,40(sp)
+    80002978:	f022                	sd	s0,32(sp)
+    8000297a:	ec26                	sd	s1,24(sp)
+    8000297c:	e84a                	sd	s2,16(sp)
+    8000297e:	e44e                	sd	s3,8(sp)
+    80002980:	e052                	sd	s4,0(sp)
+    80002982:	1800                	addi	s0,sp,48
+    80002984:	84aa                	mv	s1,a0
+    80002986:	892e                	mv	s2,a1
+    80002988:	89b2                	mv	s3,a2
+    8000298a:	8a36                	mv	s4,a3
+  struct proc *p = myproc();
+    8000298c:	fffff097          	auipc	ra,0xfffff
+    80002990:	3ea080e7          	jalr	1002(ra) # 80001d76 <myproc>
+  if(user_dst){
+    80002994:	c08d                	beqz	s1,800029b6 <either_copyout+0x42>
+    return copyout(p->pagetable, dst, src, len);
+    80002996:	86d2                	mv	a3,s4
+    80002998:	864e                	mv	a2,s3
+    8000299a:	85ca                	mv	a1,s2
+    8000299c:	6928                	ld	a0,80(a0)
+    8000299e:	fffff097          	auipc	ra,0xfffff
+    800029a2:	cc4080e7          	jalr	-828(ra) # 80001662 <copyout>
+  } else {
+    memmove((char *)dst, src, len);
+    return 0;
+  }
+}
+    800029a6:	70a2                	ld	ra,40(sp)
+    800029a8:	7402                	ld	s0,32(sp)
+    800029aa:	64e2                	ld	s1,24(sp)
+    800029ac:	6942                	ld	s2,16(sp)
+    800029ae:	69a2                	ld	s3,8(sp)
+    800029b0:	6a02                	ld	s4,0(sp)
+    800029b2:	6145                	addi	sp,sp,48
+    800029b4:	8082                	ret
+    memmove((char *)dst, src, len);
+    800029b6:	000a061b          	sext.w	a2,s4
+    800029ba:	85ce                	mv	a1,s3
+    800029bc:	854a                	mv	a0,s2
+    800029be:	ffffe097          	auipc	ra,0xffffe
+    800029c2:	36a080e7          	jalr	874(ra) # 80000d28 <memmove>
+    return 0;
+    800029c6:	8526                	mv	a0,s1
+    800029c8:	bff9                	j	800029a6 <either_copyout+0x32>
+
+00000000800029ca <either_copyin>:
+// Copy from either a user address, or kernel address,
+// depending on usr_src.
+// Returns 0 on success, -1 on error.
+int
+either_copyin(void *dst, int user_src, uint64 src, uint64 len)
+{
+    800029ca:	7179                	addi	sp,sp,-48
+    800029cc:	f406                	sd	ra,40(sp)
+    800029ce:	f022                	sd	s0,32(sp)
+    800029d0:	ec26                	sd	s1,24(sp)
+    800029d2:	e84a                	sd	s2,16(sp)
+    800029d4:	e44e                	sd	s3,8(sp)
+    800029d6:	e052                	sd	s4,0(sp)
+    800029d8:	1800                	addi	s0,sp,48
+    800029da:	892a                	mv	s2,a0
+    800029dc:	84ae                	mv	s1,a1
+    800029de:	89b2                	mv	s3,a2
+    800029e0:	8a36                	mv	s4,a3
+  struct proc *p = myproc();
+    800029e2:	fffff097          	auipc	ra,0xfffff
+    800029e6:	394080e7          	jalr	916(ra) # 80001d76 <myproc>
+  if(user_src){
+    800029ea:	c08d                	beqz	s1,80002a0c <either_copyin+0x42>
+    return copyin(p->pagetable, dst, src, len);
+    800029ec:	86d2                	mv	a3,s4
+    800029ee:	864e                	mv	a2,s3
+    800029f0:	85ca                	mv	a1,s2
+    800029f2:	6928                	ld	a0,80(a0)
+    800029f4:	fffff097          	auipc	ra,0xfffff
+    800029f8:	cfa080e7          	jalr	-774(ra) # 800016ee <copyin>
+  } else {
+    memmove(dst, (char*)src, len);
+    return 0;
+  }
+}
+    800029fc:	70a2                	ld	ra,40(sp)
+    800029fe:	7402                	ld	s0,32(sp)
+    80002a00:	64e2                	ld	s1,24(sp)
+    80002a02:	6942                	ld	s2,16(sp)
+    80002a04:	69a2                	ld	s3,8(sp)
+    80002a06:	6a02                	ld	s4,0(sp)
+    80002a08:	6145                	addi	sp,sp,48
+    80002a0a:	8082                	ret
+    memmove(dst, (char*)src, len);
+    80002a0c:	000a061b          	sext.w	a2,s4
+    80002a10:	85ce                	mv	a1,s3
+    80002a12:	854a                	mv	a0,s2
+    80002a14:	ffffe097          	auipc	ra,0xffffe
+    80002a18:	314080e7          	jalr	788(ra) # 80000d28 <memmove>
+    return 0;
+    80002a1c:	8526                	mv	a0,s1
+    80002a1e:	bff9                	j	800029fc <either_copyin+0x32>
+
+0000000080002a20 <procdump>:
+// Print a process listing to console.  For debugging.
+// Runs when user types ^P on console.
+// No lock to avoid wedging a stuck machine further.
+void
+procdump(void)
+{
+    80002a20:	715d                	addi	sp,sp,-80
+    80002a22:	e486                	sd	ra,72(sp)
+    80002a24:	e0a2                	sd	s0,64(sp)
+    80002a26:	fc26                	sd	s1,56(sp)
+    80002a28:	f84a                	sd	s2,48(sp)
+    80002a2a:	f44e                	sd	s3,40(sp)
+    80002a2c:	f052                	sd	s4,32(sp)
+    80002a2e:	ec56                	sd	s5,24(sp)
+    80002a30:	e85a                	sd	s6,16(sp)
+    80002a32:	e45e                	sd	s7,8(sp)
+    80002a34:	0880                	addi	s0,sp,80
+  [ZOMBIE]    "zombie"
+  };
+  struct proc *p;
+  char *state;
+
+  printf("\n");
+    80002a36:	00005517          	auipc	a0,0x5
+    80002a3a:	68250513          	addi	a0,a0,1666 # 800080b8 <digits+0x88>
+    80002a3e:	ffffe097          	auipc	ra,0xffffe
+    80002a42:	b46080e7          	jalr	-1210(ra) # 80000584 <printf>
+  for(p = proc; p < &proc[NPROC]; p++){
+    80002a46:	00010497          	auipc	s1,0x10
+    80002a4a:	e5a48493          	addi	s1,s1,-422 # 800128a0 <proc+0x1d8>
+    80002a4e:	00018917          	auipc	s2,0x18
+    80002a52:	e5290913          	addi	s2,s2,-430 # 8001a8a0 <bcache+0x1c0>
+    if(p->state == UNUSED)
+      continue;
+    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
+    80002a56:	4b15                	li	s6,5
+      state = states[p->state];
+    else
+      state = "???";
+    80002a58:	00006997          	auipc	s3,0x6
+    80002a5c:	86898993          	addi	s3,s3,-1944 # 800082c0 <digits+0x290>
+    printf("%d %s %s", p->pid, state, p->name);
+    80002a60:	00006a97          	auipc	s5,0x6
+    80002a64:	868a8a93          	addi	s5,s5,-1944 # 800082c8 <digits+0x298>
+    printf("\n");
+    80002a68:	00005a17          	auipc	s4,0x5
+    80002a6c:	650a0a13          	addi	s4,s4,1616 # 800080b8 <digits+0x88>
+    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
+    80002a70:	00006b97          	auipc	s7,0x6
+    80002a74:	890b8b93          	addi	s7,s7,-1904 # 80008300 <states.0>
+    80002a78:	a00d                	j	80002a9a <procdump+0x7a>
+    printf("%d %s %s", p->pid, state, p->name);
+    80002a7a:	e586a583          	lw	a1,-424(a3)
+    80002a7e:	8556                	mv	a0,s5
+    80002a80:	ffffe097          	auipc	ra,0xffffe
+    80002a84:	b04080e7          	jalr	-1276(ra) # 80000584 <printf>
+    printf("\n");
+    80002a88:	8552                	mv	a0,s4
+    80002a8a:	ffffe097          	auipc	ra,0xffffe
+    80002a8e:	afa080e7          	jalr	-1286(ra) # 80000584 <printf>
+  for(p = proc; p < &proc[NPROC]; p++){
+    80002a92:	20048493          	addi	s1,s1,512
+    80002a96:	03248263          	beq	s1,s2,80002aba <procdump+0x9a>
+    if(p->state == UNUSED)
+    80002a9a:	86a6                	mv	a3,s1
+    80002a9c:	e404a783          	lw	a5,-448(s1)
+    80002aa0:	dbed                	beqz	a5,80002a92 <procdump+0x72>
+      state = "???";
+    80002aa2:	864e                	mv	a2,s3
+    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
+    80002aa4:	fcfb6be3          	bltu	s6,a5,80002a7a <procdump+0x5a>
+    80002aa8:	02079713          	slli	a4,a5,0x20
+    80002aac:	01d75793          	srli	a5,a4,0x1d
+    80002ab0:	97de                	add	a5,a5,s7
+    80002ab2:	6390                	ld	a2,0(a5)
+    80002ab4:	f279                	bnez	a2,80002a7a <procdump+0x5a>
+      state = "???";
+    80002ab6:	864e                	mv	a2,s3
+    80002ab8:	b7c9                	j	80002a7a <procdump+0x5a>
+  }
+}
+    80002aba:	60a6                	ld	ra,72(sp)
+    80002abc:	6406                	ld	s0,64(sp)
+    80002abe:	74e2                	ld	s1,56(sp)
+    80002ac0:	7942                	ld	s2,48(sp)
+    80002ac2:	79a2                	ld	s3,40(sp)
+    80002ac4:	7a02                	ld	s4,32(sp)
+    80002ac6:	6ae2                	ld	s5,24(sp)
+    80002ac8:	6b42                	ld	s6,16(sp)
+    80002aca:	6ba2                	ld	s7,8(sp)
+    80002acc:	6161                	addi	sp,sp,80
+    80002ace:	8082                	ret
+
+0000000080002ad0 <get_sid>:
+
+int
+get_sid(void)
+{
+    80002ad0:	1101                	addi	sp,sp,-32
+    80002ad2:	ec06                	sd	ra,24(sp)
+    80002ad4:	e822                	sd	s0,16(sp)
+    80002ad6:	e426                	sd	s1,8(sp)
+    80002ad8:	e04a                	sd	s2,0(sp)
+    80002ada:	1000                	addi	s0,sp,32
+  for(int position = 0; position <  NOSEM ; position++){
+    80002adc:	4481                	li	s1,0
+    80002ade:	4941                	li	s2,16
+    if(!myproc()->osem[position]){
+    80002ae0:	fffff097          	auipc	ra,0xfffff
+    80002ae4:	296080e7          	jalr	662(ra) # 80001d76 <myproc>
+    80002ae8:	02a48793          	addi	a5,s1,42
+    80002aec:	078e                	slli	a5,a5,0x3
+    80002aee:	953e                	add	a0,a0,a5
+    80002af0:	611c                	ld	a5,0(a0)
+    80002af2:	c789                	beqz	a5,80002afc <get_sid+0x2c>
+  for(int position = 0; position <  NOSEM ; position++){
+    80002af4:	2485                	addiw	s1,s1,1
+    80002af6:	ff2495e3          	bne	s1,s2,80002ae0 <get_sid+0x10>
+      return position;
+    }
+  }
+  return -1;
+    80002afa:	54fd                	li	s1,-1
+}
+    80002afc:	8526                	mv	a0,s1
+    80002afe:	60e2                	ld	ra,24(sp)
+    80002b00:	6442                	ld	s0,16(sp)
+    80002b02:	64a2                	ld	s1,8(sp)
+    80002b04:	6902                	ld	s2,0(sp)
+    80002b06:	6105                	addi	sp,sp,32
+    80002b08:	8082                	ret
+
+0000000080002b0a <swtch>:
+    80002b0a:	00153023          	sd	ra,0(a0)
+    80002b0e:	00253423          	sd	sp,8(a0)
+    80002b12:	e900                	sd	s0,16(a0)
+    80002b14:	ed04                	sd	s1,24(a0)
+    80002b16:	03253023          	sd	s2,32(a0)
+    80002b1a:	03353423          	sd	s3,40(a0)
+    80002b1e:	03453823          	sd	s4,48(a0)
+    80002b22:	03553c23          	sd	s5,56(a0)
+    80002b26:	05653023          	sd	s6,64(a0)
+    80002b2a:	05753423          	sd	s7,72(a0)
+    80002b2e:	05853823          	sd	s8,80(a0)
+    80002b32:	05953c23          	sd	s9,88(a0)
+    80002b36:	07a53023          	sd	s10,96(a0)
+    80002b3a:	07b53423          	sd	s11,104(a0)
+    80002b3e:	0005b083          	ld	ra,0(a1)
+    80002b42:	0085b103          	ld	sp,8(a1)
+    80002b46:	6980                	ld	s0,16(a1)
+    80002b48:	6d84                	ld	s1,24(a1)
+    80002b4a:	0205b903          	ld	s2,32(a1)
+    80002b4e:	0285b983          	ld	s3,40(a1)
+    80002b52:	0305ba03          	ld	s4,48(a1)
+    80002b56:	0385ba83          	ld	s5,56(a1)
+    80002b5a:	0405bb03          	ld	s6,64(a1)
+    80002b5e:	0485bb83          	ld	s7,72(a1)
+    80002b62:	0505bc03          	ld	s8,80(a1)
+    80002b66:	0585bc83          	ld	s9,88(a1)
+    80002b6a:	0605bd03          	ld	s10,96(a1)
+    80002b6e:	0685bd83          	ld	s11,104(a1)
+    80002b72:	8082                	ret
+
+0000000080002b74 <trapinit>:
+extern int devintr();
+extern void ageprocs();
+
+void
+trapinit(void)
+{
+    80002b74:	1141                	addi	sp,sp,-16
+    80002b76:	e406                	sd	ra,8(sp)
+    80002b78:	e022                	sd	s0,0(sp)
+    80002b7a:	0800                	addi	s0,sp,16
+  initlock(&tickslock, "time");
+    80002b7c:	00005597          	auipc	a1,0x5
+    80002b80:	7b458593          	addi	a1,a1,1972 # 80008330 <states.0+0x30>
+    80002b84:	00018517          	auipc	a0,0x18
+    80002b88:	b4450513          	addi	a0,a0,-1212 # 8001a6c8 <tickslock>
+    80002b8c:	ffffe097          	auipc	ra,0xffffe
+    80002b90:	fb4080e7          	jalr	-76(ra) # 80000b40 <initlock>
+}
+    80002b94:	60a2                	ld	ra,8(sp)
+    80002b96:	6402                	ld	s0,0(sp)
+    80002b98:	0141                	addi	sp,sp,16
+    80002b9a:	8082                	ret
+
+0000000080002b9c <trapinithart>:
+
+// set up to take exceptions and traps while in the kernel.
+void
+trapinithart(void)
+{
+    80002b9c:	1141                	addi	sp,sp,-16
+    80002b9e:	e422                	sd	s0,8(sp)
+    80002ba0:	0800                	addi	s0,sp,16
+  asm volatile("csrw stvec, %0" : : "r" (x));
+    80002ba2:	00003797          	auipc	a5,0x3
+    80002ba6:	63e78793          	addi	a5,a5,1598 # 800061e0 <kernelvec>
+    80002baa:	10579073          	csrw	stvec,a5
+  w_stvec((uint64)kernelvec);
+}
+    80002bae:	6422                	ld	s0,8(sp)
+    80002bb0:	0141                	addi	sp,sp,16
+    80002bb2:	8082                	ret
+
+0000000080002bb4 <usertrapret>:
+//
+// return to user space
+//
+void
+usertrapret(void)
+{
+    80002bb4:	1141                	addi	sp,sp,-16
+    80002bb6:	e406                	sd	ra,8(sp)
+    80002bb8:	e022                	sd	s0,0(sp)
+    80002bba:	0800                	addi	s0,sp,16
+  struct proc *p = myproc();
+    80002bbc:	fffff097          	auipc	ra,0xfffff
+    80002bc0:	1ba080e7          	jalr	442(ra) # 80001d76 <myproc>
+  asm volatile("csrr %0, sstatus" : "=r" (x) );
+    80002bc4:	100027f3          	csrr	a5,sstatus
+  w_sstatus(r_sstatus() & ~SSTATUS_SIE);
+    80002bc8:	9bf5                	andi	a5,a5,-3
+  asm volatile("csrw sstatus, %0" : : "r" (x));
+    80002bca:	10079073          	csrw	sstatus,a5
+  // kerneltrap() to usertrap(), so turn off interrupts until
+  // we're back in user space, where usertrap() is correct.
+  intr_off();
+
+  // send syscalls, interrupts, and exceptions to trampoline.S
+  w_stvec(TRAMPOLINE + (uservec - trampoline));
+    80002bce:	00004697          	auipc	a3,0x4
+    80002bd2:	43268693          	addi	a3,a3,1074 # 80007000 <_trampoline>
+    80002bd6:	00004717          	auipc	a4,0x4
+    80002bda:	42a70713          	addi	a4,a4,1066 # 80007000 <_trampoline>
+    80002bde:	8f15                	sub	a4,a4,a3
+    80002be0:	040007b7          	lui	a5,0x4000
+    80002be4:	17fd                	addi	a5,a5,-1 # 3ffffff <_entry-0x7c000001>
+    80002be6:	07b2                	slli	a5,a5,0xc
+    80002be8:	973e                	add	a4,a4,a5
+  asm volatile("csrw stvec, %0" : : "r" (x));
+    80002bea:	10571073          	csrw	stvec,a4
+
+  // set up trapframe values that uservec will need when
+  // the process next re-enters the kernel.
+  p->trapframe->kernel_satp = r_satp();         // kernel page table
+    80002bee:	6d38                	ld	a4,88(a0)
+  asm volatile("csrr %0, satp" : "=r" (x) );
+    80002bf0:	18002673          	csrr	a2,satp
+    80002bf4:	e310                	sd	a2,0(a4)
+  p->trapframe->kernel_sp = p->kstack + PGSIZE; // process's kernel stack
+    80002bf6:	6d30                	ld	a2,88(a0)
+    80002bf8:	6138                	ld	a4,64(a0)
+    80002bfa:	6585                	lui	a1,0x1
+    80002bfc:	972e                	add	a4,a4,a1
+    80002bfe:	e618                	sd	a4,8(a2)
+  p->trapframe->kernel_trap = (uint64)usertrap;
+    80002c00:	6d38                	ld	a4,88(a0)
+    80002c02:	00000617          	auipc	a2,0x0
+    80002c06:	15260613          	addi	a2,a2,338 # 80002d54 <usertrap>
+    80002c0a:	eb10                	sd	a2,16(a4)
+  p->trapframe->kernel_hartid = r_tp();         // hartid for cpuid()
+    80002c0c:	6d38                	ld	a4,88(a0)
+  asm volatile("mv %0, tp" : "=r" (x) );
+    80002c0e:	8612                	mv	a2,tp
+    80002c10:	f310                	sd	a2,32(a4)
+  asm volatile("csrr %0, sstatus" : "=r" (x) );
+    80002c12:	10002773          	csrr	a4,sstatus
+  // set up the registers that trampoline.S's sret will use
+  // to get to user space.
+  
+  // set S Previous Privilege mode to User.
+  unsigned long x = r_sstatus();
+  x &= ~SSTATUS_SPP; // clear SPP to 0 for user mode
+    80002c16:	eff77713          	andi	a4,a4,-257
+  x |= SSTATUS_SPIE; // enable interrupts in user mode
+    80002c1a:	02076713          	ori	a4,a4,32
+  asm volatile("csrw sstatus, %0" : : "r" (x));
+    80002c1e:	10071073          	csrw	sstatus,a4
+  w_sstatus(x);
+
+  // set S Exception Program Counter to the saved user pc.
+  w_sepc(p->trapframe->epc);
+    80002c22:	6d38                	ld	a4,88(a0)
+  asm volatile("csrw sepc, %0" : : "r" (x));
+    80002c24:	6f18                	ld	a4,24(a4)
+    80002c26:	14171073          	csrw	sepc,a4
+
+  // tell trampoline.S the user page table to switch to.
+  uint64 satp = MAKE_SATP(p->pagetable);
+    80002c2a:	692c                	ld	a1,80(a0)
+    80002c2c:	81b1                	srli	a1,a1,0xc
+
+  // jump to trampoline.S at the top of memory, which 
+  // switches to the user page table, restores user registers,
+  // and switches to user mode with sret.
+  uint64 fn = TRAMPOLINE + (userret - trampoline);
+    80002c2e:	00004717          	auipc	a4,0x4
+    80002c32:	46270713          	addi	a4,a4,1122 # 80007090 <userret>
+    80002c36:	8f15                	sub	a4,a4,a3
+    80002c38:	97ba                	add	a5,a5,a4
+  ((void (*)(uint64,uint64))fn)(TRAPFRAME, satp);
+    80002c3a:	577d                	li	a4,-1
+    80002c3c:	177e                	slli	a4,a4,0x3f
+    80002c3e:	8dd9                	or	a1,a1,a4
+    80002c40:	02000537          	lui	a0,0x2000
+    80002c44:	157d                	addi	a0,a0,-1 # 1ffffff <_entry-0x7e000001>
+    80002c46:	0536                	slli	a0,a0,0xd
+    80002c48:	9782                	jalr	a5
+}
+    80002c4a:	60a2                	ld	ra,8(sp)
+    80002c4c:	6402                	ld	s0,0(sp)
+    80002c4e:	0141                	addi	sp,sp,16
+    80002c50:	8082                	ret
+
+0000000080002c52 <clockintr>:
+  w_sstatus(sstatus);
+}
+
+void
+clockintr()
+{
+    80002c52:	1141                	addi	sp,sp,-16
+    80002c54:	e406                	sd	ra,8(sp)
+    80002c56:	e022                	sd	s0,0(sp)
+    80002c58:	0800                	addi	s0,sp,16
+  acquire(&tickslock);
+    80002c5a:	00018517          	auipc	a0,0x18
+    80002c5e:	a6e50513          	addi	a0,a0,-1426 # 8001a6c8 <tickslock>
+    80002c62:	ffffe097          	auipc	ra,0xffffe
+    80002c66:	f6e080e7          	jalr	-146(ra) # 80000bd0 <acquire>
+  ticks++;
+    80002c6a:	00006717          	auipc	a4,0x6
+    80002c6e:	3c670713          	addi	a4,a4,966 # 80009030 <ticks>
+    80002c72:	431c                	lw	a5,0(a4)
+    80002c74:	2785                	addiw	a5,a5,1
+    80002c76:	c31c                	sw	a5,0(a4)
+  if(ticks % TIMEUNIT == 0) { 
+    80002c78:	4729                	li	a4,10
+    80002c7a:	02e7f7bb          	remuw	a5,a5,a4
+    80002c7e:	c78d                	beqz	a5,80002ca8 <clockintr+0x56>
+    ageprocs(); 
+  } 
+  wakeup(&ticks);
+    80002c80:	00006517          	auipc	a0,0x6
+    80002c84:	3b050513          	addi	a0,a0,944 # 80009030 <ticks>
+    80002c88:	00000097          	auipc	ra,0x0
+    80002c8c:	ab0080e7          	jalr	-1360(ra) # 80002738 <wakeup>
+  release(&tickslock);
+    80002c90:	00018517          	auipc	a0,0x18
+    80002c94:	a3850513          	addi	a0,a0,-1480 # 8001a6c8 <tickslock>
+    80002c98:	ffffe097          	auipc	ra,0xffffe
+    80002c9c:	fec080e7          	jalr	-20(ra) # 80000c84 <release>
+}
+    80002ca0:	60a2                	ld	ra,8(sp)
+    80002ca2:	6402                	ld	s0,0(sp)
+    80002ca4:	0141                	addi	sp,sp,16
+    80002ca6:	8082                	ret
+    ageprocs(); 
+    80002ca8:	fffff097          	auipc	ra,0xfffff
+    80002cac:	618080e7          	jalr	1560(ra) # 800022c0 <ageprocs>
+    80002cb0:	bfc1                	j	80002c80 <clockintr+0x2e>
+
+0000000080002cb2 <devintr>:
+// returns 2 if timer interrupt,
+// 1 if other device,
+// 0 if not recognized.
+int
+devintr()
+{
+    80002cb2:	1101                	addi	sp,sp,-32
+    80002cb4:	ec06                	sd	ra,24(sp)
+    80002cb6:	e822                	sd	s0,16(sp)
+    80002cb8:	e426                	sd	s1,8(sp)
+    80002cba:	1000                	addi	s0,sp,32
+  asm volatile("csrr %0, scause" : "=r" (x) );
+    80002cbc:	14202773          	csrr	a4,scause
+  uint64 scause = r_scause();
+
+  if((scause & 0x8000000000000000L) &&
+    80002cc0:	00074d63          	bltz	a4,80002cda <devintr+0x28>
+    // now allowed to interrupt again.
+    if(irq)
+      plic_complete(irq);
+
+    return 1;
+  } else if(scause == 0x8000000000000001L){
+    80002cc4:	57fd                	li	a5,-1
+    80002cc6:	17fe                	slli	a5,a5,0x3f
+    80002cc8:	0785                	addi	a5,a5,1
+    // the SSIP bit in sip.
+    w_sip(r_sip() & ~2);
+
+    return 2;
+  } else {
+    return 0;
+    80002cca:	4501                	li	a0,0
+  } else if(scause == 0x8000000000000001L){
+    80002ccc:	06f70363          	beq	a4,a5,80002d32 <devintr+0x80>
+  }
+}
+    80002cd0:	60e2                	ld	ra,24(sp)
+    80002cd2:	6442                	ld	s0,16(sp)
+    80002cd4:	64a2                	ld	s1,8(sp)
+    80002cd6:	6105                	addi	sp,sp,32
+    80002cd8:	8082                	ret
+     (scause & 0xff) == 9){
+    80002cda:	0ff77793          	zext.b	a5,a4
+  if((scause & 0x8000000000000000L) &&
+    80002cde:	46a5                	li	a3,9
+    80002ce0:	fed792e3          	bne	a5,a3,80002cc4 <devintr+0x12>
+    int irq = plic_claim();
+    80002ce4:	00003097          	auipc	ra,0x3
+    80002ce8:	604080e7          	jalr	1540(ra) # 800062e8 <plic_claim>
+    80002cec:	84aa                	mv	s1,a0
+    if(irq == UART0_IRQ){
+    80002cee:	47a9                	li	a5,10
+    80002cf0:	02f50763          	beq	a0,a5,80002d1e <devintr+0x6c>
+    } else if(irq == VIRTIO0_IRQ){
+    80002cf4:	4785                	li	a5,1
+    80002cf6:	02f50963          	beq	a0,a5,80002d28 <devintr+0x76>
+    return 1;
+    80002cfa:	4505                	li	a0,1
+    } else if(irq){
+    80002cfc:	d8f1                	beqz	s1,80002cd0 <devintr+0x1e>
+      printf("unexpected interrupt irq=%d\n", irq);
+    80002cfe:	85a6                	mv	a1,s1
+    80002d00:	00005517          	auipc	a0,0x5
+    80002d04:	63850513          	addi	a0,a0,1592 # 80008338 <states.0+0x38>
+    80002d08:	ffffe097          	auipc	ra,0xffffe
+    80002d0c:	87c080e7          	jalr	-1924(ra) # 80000584 <printf>
+      plic_complete(irq);
+    80002d10:	8526                	mv	a0,s1
+    80002d12:	00003097          	auipc	ra,0x3
+    80002d16:	5fa080e7          	jalr	1530(ra) # 8000630c <plic_complete>
+    return 1;
+    80002d1a:	4505                	li	a0,1
+    80002d1c:	bf55                	j	80002cd0 <devintr+0x1e>
+      uartintr();
+    80002d1e:	ffffe097          	auipc	ra,0xffffe
+    80002d22:	c74080e7          	jalr	-908(ra) # 80000992 <uartintr>
+    80002d26:	b7ed                	j	80002d10 <devintr+0x5e>
+      virtio_disk_intr();
+    80002d28:	00004097          	auipc	ra,0x4
+    80002d2c:	a70080e7          	jalr	-1424(ra) # 80006798 <virtio_disk_intr>
+    80002d30:	b7c5                	j	80002d10 <devintr+0x5e>
+    if(cpuid() == 0){
+    80002d32:	fffff097          	auipc	ra,0xfffff
+    80002d36:	018080e7          	jalr	24(ra) # 80001d4a <cpuid>
+    80002d3a:	c901                	beqz	a0,80002d4a <devintr+0x98>
+  asm volatile("csrr %0, sip" : "=r" (x) );
+    80002d3c:	144027f3          	csrr	a5,sip
+    w_sip(r_sip() & ~2);
+    80002d40:	9bf5                	andi	a5,a5,-3
+  asm volatile("csrw sip, %0" : : "r" (x));
+    80002d42:	14479073          	csrw	sip,a5
+    return 2;
+    80002d46:	4509                	li	a0,2
+    80002d48:	b761                	j	80002cd0 <devintr+0x1e>
+      clockintr();
+    80002d4a:	00000097          	auipc	ra,0x0
+    80002d4e:	f08080e7          	jalr	-248(ra) # 80002c52 <clockintr>
+    80002d52:	b7ed                	j	80002d3c <devintr+0x8a>
+
+0000000080002d54 <usertrap>:
+{
+    80002d54:	1101                	addi	sp,sp,-32
+    80002d56:	ec06                	sd	ra,24(sp)
+    80002d58:	e822                	sd	s0,16(sp)
+    80002d5a:	e426                	sd	s1,8(sp)
+    80002d5c:	e04a                	sd	s2,0(sp)
+    80002d5e:	1000                	addi	s0,sp,32
+  asm volatile("csrr %0, sstatus" : "=r" (x) );
+    80002d60:	100027f3          	csrr	a5,sstatus
+  if((r_sstatus() & SSTATUS_SPP) != 0)
+    80002d64:	1007f793          	andi	a5,a5,256
+    80002d68:	e3ad                	bnez	a5,80002dca <usertrap+0x76>
+  asm volatile("csrw stvec, %0" : : "r" (x));
+    80002d6a:	00003797          	auipc	a5,0x3
+    80002d6e:	47678793          	addi	a5,a5,1142 # 800061e0 <kernelvec>
+    80002d72:	10579073          	csrw	stvec,a5
+  struct proc *p = myproc();
+    80002d76:	fffff097          	auipc	ra,0xfffff
+    80002d7a:	000080e7          	jalr	ra # 80001d76 <myproc>
+    80002d7e:	84aa                	mv	s1,a0
+  p->trapframe->epc = r_sepc();
+    80002d80:	6d3c                	ld	a5,88(a0)
+  asm volatile("csrr %0, sepc" : "=r" (x) );
+    80002d82:	14102773          	csrr	a4,sepc
+    80002d86:	ef98                	sd	a4,24(a5)
+  asm volatile("csrr %0, scause" : "=r" (x) );
+    80002d88:	14202773          	csrr	a4,scause
+  if(r_scause() == 8){
+    80002d8c:	47a1                	li	a5,8
+    80002d8e:	04f71c63          	bne	a4,a5,80002de6 <usertrap+0x92>
+    if(p->killed)
+    80002d92:	551c                	lw	a5,40(a0)
+    80002d94:	e3b9                	bnez	a5,80002dda <usertrap+0x86>
+    p->trapframe->epc += 4;
+    80002d96:	6cb8                	ld	a4,88(s1)
+    80002d98:	6f1c                	ld	a5,24(a4)
+    80002d9a:	0791                	addi	a5,a5,4
+    80002d9c:	ef1c                	sd	a5,24(a4)
+  asm volatile("csrr %0, sstatus" : "=r" (x) );
+    80002d9e:	100027f3          	csrr	a5,sstatus
+  w_sstatus(r_sstatus() | SSTATUS_SIE);
+    80002da2:	0027e793          	ori	a5,a5,2
+  asm volatile("csrw sstatus, %0" : : "r" (x));
+    80002da6:	10079073          	csrw	sstatus,a5
+    syscall();
+    80002daa:	00000097          	auipc	ra,0x0
+    80002dae:	31c080e7          	jalr	796(ra) # 800030c6 <syscall>
+  if(p->killed)
+    80002db2:	549c                	lw	a5,40(s1)
+    80002db4:	e7dd                	bnez	a5,80002e62 <usertrap+0x10e>
+  usertrapret();
+    80002db6:	00000097          	auipc	ra,0x0
+    80002dba:	dfe080e7          	jalr	-514(ra) # 80002bb4 <usertrapret>
+}
+    80002dbe:	60e2                	ld	ra,24(sp)
+    80002dc0:	6442                	ld	s0,16(sp)
+    80002dc2:	64a2                	ld	s1,8(sp)
+    80002dc4:	6902                	ld	s2,0(sp)
+    80002dc6:	6105                	addi	sp,sp,32
+    80002dc8:	8082                	ret
+    panic("usertrap: not from user mode");
+    80002dca:	00005517          	auipc	a0,0x5
+    80002dce:	58e50513          	addi	a0,a0,1422 # 80008358 <states.0+0x58>
+    80002dd2:	ffffd097          	auipc	ra,0xffffd
+    80002dd6:	768080e7          	jalr	1896(ra) # 8000053a <panic>
+      exit(-1);
+    80002dda:	557d                	li	a0,-1
+    80002ddc:	00000097          	auipc	ra,0x0
+    80002de0:	a32080e7          	jalr	-1486(ra) # 8000280e <exit>
+    80002de4:	bf4d                	j	80002d96 <usertrap+0x42>
+  } else if((which_dev = devintr()) != 0){
+    80002de6:	00000097          	auipc	ra,0x0
+    80002dea:	ecc080e7          	jalr	-308(ra) # 80002cb2 <devintr>
+    80002dee:	892a                	mv	s2,a0
+    80002df0:	c501                	beqz	a0,80002df8 <usertrap+0xa4>
+  if(p->killed)
+    80002df2:	549c                	lw	a5,40(s1)
+    80002df4:	c3a1                	beqz	a5,80002e34 <usertrap+0xe0>
+    80002df6:	a815                	j	80002e2a <usertrap+0xd6>
+  asm volatile("csrr %0, scause" : "=r" (x) );
+    80002df8:	142025f3          	csrr	a1,scause
+    printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
+    80002dfc:	5890                	lw	a2,48(s1)
+    80002dfe:	00005517          	auipc	a0,0x5
+    80002e02:	57a50513          	addi	a0,a0,1402 # 80008378 <states.0+0x78>
+    80002e06:	ffffd097          	auipc	ra,0xffffd
+    80002e0a:	77e080e7          	jalr	1918(ra) # 80000584 <printf>
+  asm volatile("csrr %0, sepc" : "=r" (x) );
+    80002e0e:	141025f3          	csrr	a1,sepc
+  asm volatile("csrr %0, stval" : "=r" (x) );
+    80002e12:	14302673          	csrr	a2,stval
+    printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+    80002e16:	00005517          	auipc	a0,0x5
+    80002e1a:	59250513          	addi	a0,a0,1426 # 800083a8 <states.0+0xa8>
+    80002e1e:	ffffd097          	auipc	ra,0xffffd
+    80002e22:	766080e7          	jalr	1894(ra) # 80000584 <printf>
+    p->killed = 1;
+    80002e26:	4785                	li	a5,1
+    80002e28:	d49c                	sw	a5,40(s1)
+    exit(-1);
+    80002e2a:	557d                	li	a0,-1
+    80002e2c:	00000097          	auipc	ra,0x0
+    80002e30:	9e2080e7          	jalr	-1566(ra) # 8000280e <exit>
+  if(which_dev == 2){
+    80002e34:	4789                	li	a5,2
+    80002e36:	f8f910e3          	bne	s2,a5,80002db6 <usertrap+0x62>
+    if((++myproc()->ticks) == QUANTUM){
+    80002e3a:	fffff097          	auipc	ra,0xfffff
+    80002e3e:	f3c080e7          	jalr	-196(ra) # 80001d76 <myproc>
+    80002e42:	1e855783          	lhu	a5,488(a0)
+    80002e46:	2785                	addiw	a5,a5,1
+    80002e48:	17c2                	slli	a5,a5,0x30
+    80002e4a:	93c1                	srli	a5,a5,0x30
+    80002e4c:	1ef51423          	sh	a5,488(a0)
+    80002e50:	2781                	sext.w	a5,a5
+    80002e52:	4709                	li	a4,2
+    80002e54:	f6e791e3          	bne	a5,a4,80002db6 <usertrap+0x62>
+      yield();
+    80002e58:	fffff097          	auipc	ra,0xfffff
+    80002e5c:	70c080e7          	jalr	1804(ra) # 80002564 <yield>
+    80002e60:	bf99                	j	80002db6 <usertrap+0x62>
+  int which_dev = 0;
+    80002e62:	4901                	li	s2,0
+    80002e64:	b7d9                	j	80002e2a <usertrap+0xd6>
+
+0000000080002e66 <kerneltrap>:
+{
+    80002e66:	7179                	addi	sp,sp,-48
+    80002e68:	f406                	sd	ra,40(sp)
+    80002e6a:	f022                	sd	s0,32(sp)
+    80002e6c:	ec26                	sd	s1,24(sp)
+    80002e6e:	e84a                	sd	s2,16(sp)
+    80002e70:	e44e                	sd	s3,8(sp)
+    80002e72:	1800                	addi	s0,sp,48
+  asm volatile("csrr %0, sepc" : "=r" (x) );
+    80002e74:	14102973          	csrr	s2,sepc
+  asm volatile("csrr %0, sstatus" : "=r" (x) );
+    80002e78:	100024f3          	csrr	s1,sstatus
+  asm volatile("csrr %0, scause" : "=r" (x) );
+    80002e7c:	142029f3          	csrr	s3,scause
+  if((sstatus & SSTATUS_SPP) == 0)
+    80002e80:	1004f793          	andi	a5,s1,256
+    80002e84:	cb85                	beqz	a5,80002eb4 <kerneltrap+0x4e>
+  asm volatile("csrr %0, sstatus" : "=r" (x) );
+    80002e86:	100027f3          	csrr	a5,sstatus
+  return (x & SSTATUS_SIE) != 0;
+    80002e8a:	8b89                	andi	a5,a5,2
+  if(intr_get() != 0)
+    80002e8c:	ef85                	bnez	a5,80002ec4 <kerneltrap+0x5e>
+  if((which_dev = devintr()) == 0){
+    80002e8e:	00000097          	auipc	ra,0x0
+    80002e92:	e24080e7          	jalr	-476(ra) # 80002cb2 <devintr>
+    80002e96:	cd1d                	beqz	a0,80002ed4 <kerneltrap+0x6e>
+  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING){
+    80002e98:	4789                	li	a5,2
+    80002e9a:	06f50a63          	beq	a0,a5,80002f0e <kerneltrap+0xa8>
+  asm volatile("csrw sepc, %0" : : "r" (x));
+    80002e9e:	14191073          	csrw	sepc,s2
+  asm volatile("csrw sstatus, %0" : : "r" (x));
+    80002ea2:	10049073          	csrw	sstatus,s1
+}
+    80002ea6:	70a2                	ld	ra,40(sp)
+    80002ea8:	7402                	ld	s0,32(sp)
+    80002eaa:	64e2                	ld	s1,24(sp)
+    80002eac:	6942                	ld	s2,16(sp)
+    80002eae:	69a2                	ld	s3,8(sp)
+    80002eb0:	6145                	addi	sp,sp,48
+    80002eb2:	8082                	ret
+    panic("kerneltrap: not from supervisor mode");
+    80002eb4:	00005517          	auipc	a0,0x5
+    80002eb8:	51450513          	addi	a0,a0,1300 # 800083c8 <states.0+0xc8>
+    80002ebc:	ffffd097          	auipc	ra,0xffffd
+    80002ec0:	67e080e7          	jalr	1662(ra) # 8000053a <panic>
+    panic("kerneltrap: interrupts enabled");
+    80002ec4:	00005517          	auipc	a0,0x5
+    80002ec8:	52c50513          	addi	a0,a0,1324 # 800083f0 <states.0+0xf0>
+    80002ecc:	ffffd097          	auipc	ra,0xffffd
+    80002ed0:	66e080e7          	jalr	1646(ra) # 8000053a <panic>
+    printf("scause %p\n", scause);
+    80002ed4:	85ce                	mv	a1,s3
+    80002ed6:	00005517          	auipc	a0,0x5
+    80002eda:	53a50513          	addi	a0,a0,1338 # 80008410 <states.0+0x110>
+    80002ede:	ffffd097          	auipc	ra,0xffffd
+    80002ee2:	6a6080e7          	jalr	1702(ra) # 80000584 <printf>
+  asm volatile("csrr %0, sepc" : "=r" (x) );
+    80002ee6:	141025f3          	csrr	a1,sepc
+  asm volatile("csrr %0, stval" : "=r" (x) );
+    80002eea:	14302673          	csrr	a2,stval
+    printf("sepc=%p stval=%p\n", r_sepc(), r_stval());
+    80002eee:	00005517          	auipc	a0,0x5
+    80002ef2:	53250513          	addi	a0,a0,1330 # 80008420 <states.0+0x120>
+    80002ef6:	ffffd097          	auipc	ra,0xffffd
+    80002efa:	68e080e7          	jalr	1678(ra) # 80000584 <printf>
+    panic("kerneltrap");
+    80002efe:	00005517          	auipc	a0,0x5
+    80002f02:	53a50513          	addi	a0,a0,1338 # 80008438 <states.0+0x138>
+    80002f06:	ffffd097          	auipc	ra,0xffffd
+    80002f0a:	634080e7          	jalr	1588(ra) # 8000053a <panic>
+  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING){
+    80002f0e:	fffff097          	auipc	ra,0xfffff
+    80002f12:	e68080e7          	jalr	-408(ra) # 80001d76 <myproc>
+    80002f16:	d541                	beqz	a0,80002e9e <kerneltrap+0x38>
+    80002f18:	fffff097          	auipc	ra,0xfffff
+    80002f1c:	e5e080e7          	jalr	-418(ra) # 80001d76 <myproc>
+    80002f20:	4d18                	lw	a4,24(a0)
+    80002f22:	4791                	li	a5,4
+    80002f24:	f6f71de3          	bne	a4,a5,80002e9e <kerneltrap+0x38>
+    if((++myproc()->ticks) == QUANTUM){
+    80002f28:	fffff097          	auipc	ra,0xfffff
+    80002f2c:	e4e080e7          	jalr	-434(ra) # 80001d76 <myproc>
+    80002f30:	1e855783          	lhu	a5,488(a0)
+    80002f34:	2785                	addiw	a5,a5,1
+    80002f36:	17c2                	slli	a5,a5,0x30
+    80002f38:	93c1                	srli	a5,a5,0x30
+    80002f3a:	1ef51423          	sh	a5,488(a0)
+    80002f3e:	2781                	sext.w	a5,a5
+    80002f40:	4709                	li	a4,2
+    80002f42:	f4e79ee3          	bne	a5,a4,80002e9e <kerneltrap+0x38>
+      yield();
+    80002f46:	fffff097          	auipc	ra,0xfffff
+    80002f4a:	61e080e7          	jalr	1566(ra) # 80002564 <yield>
+    80002f4e:	bf81                	j	80002e9e <kerneltrap+0x38>
+
+0000000080002f50 <argraw>:
+  return strlen(buf);
+}
+
+static uint64
+argraw(int n)
+{
+    80002f50:	1101                	addi	sp,sp,-32
+    80002f52:	ec06                	sd	ra,24(sp)
+    80002f54:	e822                	sd	s0,16(sp)
+    80002f56:	e426                	sd	s1,8(sp)
+    80002f58:	1000                	addi	s0,sp,32
+    80002f5a:	84aa                	mv	s1,a0
+  struct proc *p = myproc();
+    80002f5c:	fffff097          	auipc	ra,0xfffff
+    80002f60:	e1a080e7          	jalr	-486(ra) # 80001d76 <myproc>
+  switch (n) {
+    80002f64:	4795                	li	a5,5
+    80002f66:	0497e163          	bltu	a5,s1,80002fa8 <argraw+0x58>
+    80002f6a:	048a                	slli	s1,s1,0x2
+    80002f6c:	00005717          	auipc	a4,0x5
+    80002f70:	50470713          	addi	a4,a4,1284 # 80008470 <states.0+0x170>
+    80002f74:	94ba                	add	s1,s1,a4
+    80002f76:	409c                	lw	a5,0(s1)
+    80002f78:	97ba                	add	a5,a5,a4
+    80002f7a:	8782                	jr	a5
+  case 0:
+    return p->trapframe->a0;
+    80002f7c:	6d3c                	ld	a5,88(a0)
+    80002f7e:	7ba8                	ld	a0,112(a5)
+  case 5:
+    return p->trapframe->a5;
+  }
+  panic("argraw");
+  return -1;
+}
+    80002f80:	60e2                	ld	ra,24(sp)
+    80002f82:	6442                	ld	s0,16(sp)
+    80002f84:	64a2                	ld	s1,8(sp)
+    80002f86:	6105                	addi	sp,sp,32
+    80002f88:	8082                	ret
+    return p->trapframe->a1;
+    80002f8a:	6d3c                	ld	a5,88(a0)
+    80002f8c:	7fa8                	ld	a0,120(a5)
+    80002f8e:	bfcd                	j	80002f80 <argraw+0x30>
+    return p->trapframe->a2;
+    80002f90:	6d3c                	ld	a5,88(a0)
+    80002f92:	63c8                	ld	a0,128(a5)
+    80002f94:	b7f5                	j	80002f80 <argraw+0x30>
+    return p->trapframe->a3;
+    80002f96:	6d3c                	ld	a5,88(a0)
+    80002f98:	67c8                	ld	a0,136(a5)
+    80002f9a:	b7dd                	j	80002f80 <argraw+0x30>
+    return p->trapframe->a4;
+    80002f9c:	6d3c                	ld	a5,88(a0)
+    80002f9e:	6bc8                	ld	a0,144(a5)
+    80002fa0:	b7c5                	j	80002f80 <argraw+0x30>
+    return p->trapframe->a5;
+    80002fa2:	6d3c                	ld	a5,88(a0)
+    80002fa4:	6fc8                	ld	a0,152(a5)
+    80002fa6:	bfe9                	j	80002f80 <argraw+0x30>
+  panic("argraw");
+    80002fa8:	00005517          	auipc	a0,0x5
+    80002fac:	4a050513          	addi	a0,a0,1184 # 80008448 <states.0+0x148>
+    80002fb0:	ffffd097          	auipc	ra,0xffffd
+    80002fb4:	58a080e7          	jalr	1418(ra) # 8000053a <panic>
+
+0000000080002fb8 <fetchaddr>:
+{
+    80002fb8:	1101                	addi	sp,sp,-32
+    80002fba:	ec06                	sd	ra,24(sp)
+    80002fbc:	e822                	sd	s0,16(sp)
+    80002fbe:	e426                	sd	s1,8(sp)
+    80002fc0:	e04a                	sd	s2,0(sp)
+    80002fc2:	1000                	addi	s0,sp,32
+    80002fc4:	84aa                	mv	s1,a0
+    80002fc6:	892e                	mv	s2,a1
+  struct proc *p = myproc();
+    80002fc8:	fffff097          	auipc	ra,0xfffff
+    80002fcc:	dae080e7          	jalr	-594(ra) # 80001d76 <myproc>
+  if(addr >= p->sz || addr+sizeof(uint64) > p->sz)
+    80002fd0:	653c                	ld	a5,72(a0)
+    80002fd2:	02f4f863          	bgeu	s1,a5,80003002 <fetchaddr+0x4a>
+    80002fd6:	00848713          	addi	a4,s1,8
+    80002fda:	02e7e663          	bltu	a5,a4,80003006 <fetchaddr+0x4e>
+  if(copyin(p->pagetable, (char *)ip, addr, sizeof(*ip)) != 0)
+    80002fde:	46a1                	li	a3,8
+    80002fe0:	8626                	mv	a2,s1
+    80002fe2:	85ca                	mv	a1,s2
+    80002fe4:	6928                	ld	a0,80(a0)
+    80002fe6:	ffffe097          	auipc	ra,0xffffe
+    80002fea:	708080e7          	jalr	1800(ra) # 800016ee <copyin>
+    80002fee:	00a03533          	snez	a0,a0
+    80002ff2:	40a00533          	neg	a0,a0
+}
+    80002ff6:	60e2                	ld	ra,24(sp)
+    80002ff8:	6442                	ld	s0,16(sp)
+    80002ffa:	64a2                	ld	s1,8(sp)
+    80002ffc:	6902                	ld	s2,0(sp)
+    80002ffe:	6105                	addi	sp,sp,32
+    80003000:	8082                	ret
+    return -1;
+    80003002:	557d                	li	a0,-1
+    80003004:	bfcd                	j	80002ff6 <fetchaddr+0x3e>
+    80003006:	557d                	li	a0,-1
+    80003008:	b7fd                	j	80002ff6 <fetchaddr+0x3e>
+
+000000008000300a <fetchstr>:
+{
+    8000300a:	7179                	addi	sp,sp,-48
+    8000300c:	f406                	sd	ra,40(sp)
+    8000300e:	f022                	sd	s0,32(sp)
+    80003010:	ec26                	sd	s1,24(sp)
+    80003012:	e84a                	sd	s2,16(sp)
+    80003014:	e44e                	sd	s3,8(sp)
+    80003016:	1800                	addi	s0,sp,48
+    80003018:	892a                	mv	s2,a0
+    8000301a:	84ae                	mv	s1,a1
+    8000301c:	89b2                	mv	s3,a2
+  struct proc *p = myproc();
+    8000301e:	fffff097          	auipc	ra,0xfffff
+    80003022:	d58080e7          	jalr	-680(ra) # 80001d76 <myproc>
+  int err = copyinstr(p->pagetable, buf, addr, max);
+    80003026:	86ce                	mv	a3,s3
+    80003028:	864a                	mv	a2,s2
+    8000302a:	85a6                	mv	a1,s1
+    8000302c:	6928                	ld	a0,80(a0)
+    8000302e:	ffffe097          	auipc	ra,0xffffe
+    80003032:	74e080e7          	jalr	1870(ra) # 8000177c <copyinstr>
+  if(err < 0)
+    80003036:	00054763          	bltz	a0,80003044 <fetchstr+0x3a>
+  return strlen(buf);
+    8000303a:	8526                	mv	a0,s1
+    8000303c:	ffffe097          	auipc	ra,0xffffe
+    80003040:	e0c080e7          	jalr	-500(ra) # 80000e48 <strlen>
+}
+    80003044:	70a2                	ld	ra,40(sp)
+    80003046:	7402                	ld	s0,32(sp)
+    80003048:	64e2                	ld	s1,24(sp)
+    8000304a:	6942                	ld	s2,16(sp)
+    8000304c:	69a2                	ld	s3,8(sp)
+    8000304e:	6145                	addi	sp,sp,48
+    80003050:	8082                	ret
+
+0000000080003052 <argint>:
+
+// Fetch the nth 32-bit system call argument.
+int
+argint(int n, int *ip)
+{
+    80003052:	1101                	addi	sp,sp,-32
+    80003054:	ec06                	sd	ra,24(sp)
+    80003056:	e822                	sd	s0,16(sp)
+    80003058:	e426                	sd	s1,8(sp)
+    8000305a:	1000                	addi	s0,sp,32
+    8000305c:	84ae                	mv	s1,a1
+  *ip = argraw(n);
+    8000305e:	00000097          	auipc	ra,0x0
+    80003062:	ef2080e7          	jalr	-270(ra) # 80002f50 <argraw>
+    80003066:	c088                	sw	a0,0(s1)
+  return 0;
+}
+    80003068:	4501                	li	a0,0
+    8000306a:	60e2                	ld	ra,24(sp)
+    8000306c:	6442                	ld	s0,16(sp)
+    8000306e:	64a2                	ld	s1,8(sp)
+    80003070:	6105                	addi	sp,sp,32
+    80003072:	8082                	ret
+
+0000000080003074 <argaddr>:
+// Retrieve an argument as a pointer.
+// Doesn't check for legality, since
+// copyin/copyout will do that.
+int
+argaddr(int n, uint64 *ip)
+{
+    80003074:	1101                	addi	sp,sp,-32
+    80003076:	ec06                	sd	ra,24(sp)
+    80003078:	e822                	sd	s0,16(sp)
+    8000307a:	e426                	sd	s1,8(sp)
+    8000307c:	1000                	addi	s0,sp,32
+    8000307e:	84ae                	mv	s1,a1
+  *ip = argraw(n);
+    80003080:	00000097          	auipc	ra,0x0
+    80003084:	ed0080e7          	jalr	-304(ra) # 80002f50 <argraw>
+    80003088:	e088                	sd	a0,0(s1)
+  return 0;
+}
+    8000308a:	4501                	li	a0,0
+    8000308c:	60e2                	ld	ra,24(sp)
+    8000308e:	6442                	ld	s0,16(sp)
+    80003090:	64a2                	ld	s1,8(sp)
+    80003092:	6105                	addi	sp,sp,32
+    80003094:	8082                	ret
+
+0000000080003096 <argstr>:
+// Fetch the nth word-sized system call argument as a null-terminated string.
+// Copies into buf, at most max.
+// Returns string length if OK (including nul), -1 if error.
+int
+argstr(int n, char *buf, int max)
+{
+    80003096:	1101                	addi	sp,sp,-32
+    80003098:	ec06                	sd	ra,24(sp)
+    8000309a:	e822                	sd	s0,16(sp)
+    8000309c:	e426                	sd	s1,8(sp)
+    8000309e:	e04a                	sd	s2,0(sp)
+    800030a0:	1000                	addi	s0,sp,32
+    800030a2:	84ae                	mv	s1,a1
+    800030a4:	8932                	mv	s2,a2
+  *ip = argraw(n);
+    800030a6:	00000097          	auipc	ra,0x0
+    800030aa:	eaa080e7          	jalr	-342(ra) # 80002f50 <argraw>
+  uint64 addr;
+  if(argaddr(n, &addr) < 0)
+    return -1;
+  return fetchstr(addr, buf, max);
+    800030ae:	864a                	mv	a2,s2
+    800030b0:	85a6                	mv	a1,s1
+    800030b2:	00000097          	auipc	ra,0x0
+    800030b6:	f58080e7          	jalr	-168(ra) # 8000300a <fetchstr>
+}
+    800030ba:	60e2                	ld	ra,24(sp)
+    800030bc:	6442                	ld	s0,16(sp)
+    800030be:	64a2                	ld	s1,8(sp)
+    800030c0:	6902                	ld	s2,0(sp)
+    800030c2:	6105                	addi	sp,sp,32
+    800030c4:	8082                	ret
+
+00000000800030c6 <syscall>:
+[SYS_timeout] sys_timeout,
+};
+
+void
+syscall(void)
+{
+    800030c6:	1101                	addi	sp,sp,-32
+    800030c8:	ec06                	sd	ra,24(sp)
+    800030ca:	e822                	sd	s0,16(sp)
+    800030cc:	e426                	sd	s1,8(sp)
+    800030ce:	e04a                	sd	s2,0(sp)
+    800030d0:	1000                	addi	s0,sp,32
+  int num;
+  struct proc *p = myproc();
+    800030d2:	fffff097          	auipc	ra,0xfffff
+    800030d6:	ca4080e7          	jalr	-860(ra) # 80001d76 <myproc>
+    800030da:	84aa                	mv	s1,a0
+
+  num = p->trapframe->a7;
+    800030dc:	05853903          	ld	s2,88(a0)
+    800030e0:	0a893783          	ld	a5,168(s2)
+    800030e4:	0007869b          	sext.w	a3,a5
+  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
+    800030e8:	37fd                	addiw	a5,a5,-1
+    800030ea:	4769                	li	a4,26
+    800030ec:	00f76f63          	bltu	a4,a5,8000310a <syscall+0x44>
+    800030f0:	00369713          	slli	a4,a3,0x3
+    800030f4:	00005797          	auipc	a5,0x5
+    800030f8:	39478793          	addi	a5,a5,916 # 80008488 <syscalls>
+    800030fc:	97ba                	add	a5,a5,a4
+    800030fe:	639c                	ld	a5,0(a5)
+    80003100:	c789                	beqz	a5,8000310a <syscall+0x44>
+    p->trapframe->a0 = syscalls[num]();
+    80003102:	9782                	jalr	a5
+    80003104:	06a93823          	sd	a0,112(s2)
+    80003108:	a839                	j	80003126 <syscall+0x60>
+  } else {
+    printf("%d %s: unknown sys call %d\n",
+    8000310a:	1d848613          	addi	a2,s1,472
+    8000310e:	588c                	lw	a1,48(s1)
+    80003110:	00005517          	auipc	a0,0x5
+    80003114:	34050513          	addi	a0,a0,832 # 80008450 <states.0+0x150>
+    80003118:	ffffd097          	auipc	ra,0xffffd
+    8000311c:	46c080e7          	jalr	1132(ra) # 80000584 <printf>
+            p->pid, p->name, num);
+    p->trapframe->a0 = -1;
+    80003120:	6cbc                	ld	a5,88(s1)
+    80003122:	577d                	li	a4,-1
+    80003124:	fbb8                	sd	a4,112(a5)
+  }
+}
+    80003126:	60e2                	ld	ra,24(sp)
+    80003128:	6442                	ld	s0,16(sp)
+    8000312a:	64a2                	ld	s1,8(sp)
+    8000312c:	6902                	ld	s2,0(sp)
+    8000312e:	6105                	addi	sp,sp,32
+    80003130:	8082                	ret
+
+0000000080003132 <sys_exit>:
+#include "spinlock.h"
+#include "proc.h"
+
+uint64
+sys_exit(void)
+{
+    80003132:	1101                	addi	sp,sp,-32
+    80003134:	ec06                	sd	ra,24(sp)
+    80003136:	e822                	sd	s0,16(sp)
+    80003138:	1000                	addi	s0,sp,32
+  int n;
+  if(argint(0, &n) < 0)
+    8000313a:	fec40593          	addi	a1,s0,-20
+    8000313e:	4501                	li	a0,0
+    80003140:	00000097          	auipc	ra,0x0
+    80003144:	f12080e7          	jalr	-238(ra) # 80003052 <argint>
+    return -1;
+    80003148:	57fd                	li	a5,-1
+  if(argint(0, &n) < 0)
+    8000314a:	00054963          	bltz	a0,8000315c <sys_exit+0x2a>
+  exit(n);
+    8000314e:	fec42503          	lw	a0,-20(s0)
+    80003152:	fffff097          	auipc	ra,0xfffff
+    80003156:	6bc080e7          	jalr	1724(ra) # 8000280e <exit>
+  return 0;  // not reached
+    8000315a:	4781                	li	a5,0
+}
+    8000315c:	853e                	mv	a0,a5
+    8000315e:	60e2                	ld	ra,24(sp)
+    80003160:	6442                	ld	s0,16(sp)
+    80003162:	6105                	addi	sp,sp,32
+    80003164:	8082                	ret
+
+0000000080003166 <sys_getpid>:
+
+uint64
+sys_getpid(void)
+{
+    80003166:	1141                	addi	sp,sp,-16
+    80003168:	e406                	sd	ra,8(sp)
+    8000316a:	e022                	sd	s0,0(sp)
+    8000316c:	0800                	addi	s0,sp,16
+  return myproc()->pid;
+    8000316e:	fffff097          	auipc	ra,0xfffff
+    80003172:	c08080e7          	jalr	-1016(ra) # 80001d76 <myproc>
+}
+    80003176:	5908                	lw	a0,48(a0)
+    80003178:	60a2                	ld	ra,8(sp)
+    8000317a:	6402                	ld	s0,0(sp)
+    8000317c:	0141                	addi	sp,sp,16
+    8000317e:	8082                	ret
+
+0000000080003180 <sys_setp>:
+
+uint64
+sys_setp(void)
+{
+    80003180:	1101                	addi	sp,sp,-32
+    80003182:	ec06                	sd	ra,24(sp)
+    80003184:	e822                	sd	s0,16(sp)
+    80003186:	1000                	addi	s0,sp,32
+  int level;
+  argint(0, &level);  // fetch param from register
+    80003188:	fec40593          	addi	a1,s0,-20
+    8000318c:	4501                	li	a0,0
+    8000318e:	00000097          	auipc	ra,0x0
+    80003192:	ec4080e7          	jalr	-316(ra) # 80003052 <argint>
+  if(level > MLFLEVELS)
+    80003196:	fec42783          	lw	a5,-20(s0)
+    8000319a:	4711                	li	a4,4
+    8000319c:	02f75463          	bge	a4,a5,800031c4 <sys_setp+0x44>
+    level = MLFLEVELS;
+    800031a0:	4791                	li	a5,4
+    800031a2:	fef42623          	sw	a5,-20(s0)
+  else if(level < 1)
+    level = 1;
+  struct proc *p = myproc();
+    800031a6:	fffff097          	auipc	ra,0xfffff
+    800031aa:	bd0080e7          	jalr	-1072(ra) # 80001d76 <myproc>
+    800031ae:	87aa                	mv	a5,a0
+  uint64 prevlvl = p->mlflevel;
+    800031b0:	1f852503          	lw	a0,504(a0)
+  p->mlflevel = level;
+    800031b4:	fec42703          	lw	a4,-20(s0)
+    800031b8:	1ee7ac23          	sw	a4,504(a5)
+  return prevlvl;
+}
+    800031bc:	60e2                	ld	ra,24(sp)
+    800031be:	6442                	ld	s0,16(sp)
+    800031c0:	6105                	addi	sp,sp,32
+    800031c2:	8082                	ret
+  else if(level < 1)
+    800031c4:	fef041e3          	bgtz	a5,800031a6 <sys_setp+0x26>
+    level = 1;
+    800031c8:	4785                	li	a5,1
+    800031ca:	fef42623          	sw	a5,-20(s0)
+    800031ce:	bfe1                	j	800031a6 <sys_setp+0x26>
+
+00000000800031d0 <sys_fork>:
+
+uint64
+sys_fork(void)
+{
+    800031d0:	1141                	addi	sp,sp,-16
+    800031d2:	e406                	sd	ra,8(sp)
+    800031d4:	e022                	sd	s0,0(sp)
+    800031d6:	0800                	addi	s0,sp,16
+  return fork();
+    800031d8:	fffff097          	auipc	ra,0xfffff
+    800031dc:	f78080e7          	jalr	-136(ra) # 80002150 <fork>
+}
+    800031e0:	60a2                	ld	ra,8(sp)
+    800031e2:	6402                	ld	s0,0(sp)
+    800031e4:	0141                	addi	sp,sp,16
+    800031e6:	8082                	ret
+
+00000000800031e8 <sys_wait>:
+
+uint64
+sys_wait(void)
+{
+    800031e8:	1101                	addi	sp,sp,-32
+    800031ea:	ec06                	sd	ra,24(sp)
+    800031ec:	e822                	sd	s0,16(sp)
+    800031ee:	1000                	addi	s0,sp,32
+  uint64 p;
+  if(argaddr(0, &p) < 0)
+    800031f0:	fe840593          	addi	a1,s0,-24
+    800031f4:	4501                	li	a0,0
+    800031f6:	00000097          	auipc	ra,0x0
+    800031fa:	e7e080e7          	jalr	-386(ra) # 80003074 <argaddr>
+    800031fe:	87aa                	mv	a5,a0
+    return -1;
+    80003200:	557d                	li	a0,-1
+  if(argaddr(0, &p) < 0)
+    80003202:	0007c863          	bltz	a5,80003212 <sys_wait+0x2a>
+  return wait(p);
+    80003206:	fe843503          	ld	a0,-24(s0)
+    8000320a:	fffff097          	auipc	ra,0xfffff
+    8000320e:	406080e7          	jalr	1030(ra) # 80002610 <wait>
+}
+    80003212:	60e2                	ld	ra,24(sp)
+    80003214:	6442                	ld	s0,16(sp)
+    80003216:	6105                	addi	sp,sp,32
+    80003218:	8082                	ret
+
+000000008000321a <sys_sbrk>:
+
+uint64
+sys_sbrk(void)
+{
+    8000321a:	7179                	addi	sp,sp,-48
+    8000321c:	f406                	sd	ra,40(sp)
+    8000321e:	f022                	sd	s0,32(sp)
+    80003220:	ec26                	sd	s1,24(sp)
+    80003222:	1800                	addi	s0,sp,48
+  int addr;
+  int n;
+
+  if(argint(0, &n) < 0)
+    80003224:	fdc40593          	addi	a1,s0,-36
+    80003228:	4501                	li	a0,0
+    8000322a:	00000097          	auipc	ra,0x0
+    8000322e:	e28080e7          	jalr	-472(ra) # 80003052 <argint>
+    80003232:	87aa                	mv	a5,a0
+    return -1;
+    80003234:	557d                	li	a0,-1
+  if(argint(0, &n) < 0)
+    80003236:	0207c063          	bltz	a5,80003256 <sys_sbrk+0x3c>
+  addr = myproc()->sz;
+    8000323a:	fffff097          	auipc	ra,0xfffff
+    8000323e:	b3c080e7          	jalr	-1220(ra) # 80001d76 <myproc>
+    80003242:	4524                	lw	s1,72(a0)
+  if(growproc(n) < 0)
+    80003244:	fdc42503          	lw	a0,-36(s0)
+    80003248:	fffff097          	auipc	ra,0xfffff
+    8000324c:	e90080e7          	jalr	-368(ra) # 800020d8 <growproc>
+    80003250:	00054863          	bltz	a0,80003260 <sys_sbrk+0x46>
+    return -1;
+  return addr;
+    80003254:	8526                	mv	a0,s1
+}
+    80003256:	70a2                	ld	ra,40(sp)
+    80003258:	7402                	ld	s0,32(sp)
+    8000325a:	64e2                	ld	s1,24(sp)
+    8000325c:	6145                	addi	sp,sp,48
+    8000325e:	8082                	ret
+    return -1;
+    80003260:	557d                	li	a0,-1
+    80003262:	bfd5                	j	80003256 <sys_sbrk+0x3c>
+
+0000000080003264 <sys_sleep>:
+
+uint64
+sys_sleep(void)
+{
+    80003264:	7139                	addi	sp,sp,-64
+    80003266:	fc06                	sd	ra,56(sp)
+    80003268:	f822                	sd	s0,48(sp)
+    8000326a:	f426                	sd	s1,40(sp)
+    8000326c:	f04a                	sd	s2,32(sp)
+    8000326e:	ec4e                	sd	s3,24(sp)
+    80003270:	0080                	addi	s0,sp,64
+  int n;
+  uint ticks0;
+
+  if(argint(0, &n) < 0)
+    80003272:	fcc40593          	addi	a1,s0,-52
+    80003276:	4501                	li	a0,0
+    80003278:	00000097          	auipc	ra,0x0
+    8000327c:	dda080e7          	jalr	-550(ra) # 80003052 <argint>
+    return -1;
+    80003280:	57fd                	li	a5,-1
+  if(argint(0, &n) < 0)
+    80003282:	06054563          	bltz	a0,800032ec <sys_sleep+0x88>
+  acquire(&tickslock);
+    80003286:	00017517          	auipc	a0,0x17
+    8000328a:	44250513          	addi	a0,a0,1090 # 8001a6c8 <tickslock>
+    8000328e:	ffffe097          	auipc	ra,0xffffe
+    80003292:	942080e7          	jalr	-1726(ra) # 80000bd0 <acquire>
+  ticks0 = ticks;
+    80003296:	00006917          	auipc	s2,0x6
+    8000329a:	d9a92903          	lw	s2,-614(s2) # 80009030 <ticks>
+  while(ticks - ticks0 < n){
+    8000329e:	fcc42783          	lw	a5,-52(s0)
+    800032a2:	cf85                	beqz	a5,800032da <sys_sleep+0x76>
+    if(myproc()->killed){
+      release(&tickslock);
+      return -1;
+    }
+    sleep(&ticks, &tickslock);
+    800032a4:	00017997          	auipc	s3,0x17
+    800032a8:	42498993          	addi	s3,s3,1060 # 8001a6c8 <tickslock>
+    800032ac:	00006497          	auipc	s1,0x6
+    800032b0:	d8448493          	addi	s1,s1,-636 # 80009030 <ticks>
+    if(myproc()->killed){
+    800032b4:	fffff097          	auipc	ra,0xfffff
+    800032b8:	ac2080e7          	jalr	-1342(ra) # 80001d76 <myproc>
+    800032bc:	551c                	lw	a5,40(a0)
+    800032be:	ef9d                	bnez	a5,800032fc <sys_sleep+0x98>
+    sleep(&ticks, &tickslock);
+    800032c0:	85ce                	mv	a1,s3
+    800032c2:	8526                	mv	a0,s1
+    800032c4:	fffff097          	auipc	ra,0xfffff
+    800032c8:	2e8080e7          	jalr	744(ra) # 800025ac <sleep>
+  while(ticks - ticks0 < n){
+    800032cc:	409c                	lw	a5,0(s1)
+    800032ce:	412787bb          	subw	a5,a5,s2
+    800032d2:	fcc42703          	lw	a4,-52(s0)
+    800032d6:	fce7efe3          	bltu	a5,a4,800032b4 <sys_sleep+0x50>
+  }
+  release(&tickslock);
+    800032da:	00017517          	auipc	a0,0x17
+    800032de:	3ee50513          	addi	a0,a0,1006 # 8001a6c8 <tickslock>
+    800032e2:	ffffe097          	auipc	ra,0xffffe
+    800032e6:	9a2080e7          	jalr	-1630(ra) # 80000c84 <release>
+  return 0;
+    800032ea:	4781                	li	a5,0
+}
+    800032ec:	853e                	mv	a0,a5
+    800032ee:	70e2                	ld	ra,56(sp)
+    800032f0:	7442                	ld	s0,48(sp)
+    800032f2:	74a2                	ld	s1,40(sp)
+    800032f4:	7902                	ld	s2,32(sp)
+    800032f6:	69e2                	ld	s3,24(sp)
+    800032f8:	6121                	addi	sp,sp,64
+    800032fa:	8082                	ret
+      release(&tickslock);
+    800032fc:	00017517          	auipc	a0,0x17
+    80003300:	3cc50513          	addi	a0,a0,972 # 8001a6c8 <tickslock>
+    80003304:	ffffe097          	auipc	ra,0xffffe
+    80003308:	980080e7          	jalr	-1664(ra) # 80000c84 <release>
+      return -1;
+    8000330c:	57fd                	li	a5,-1
+    8000330e:	bff9                	j	800032ec <sys_sleep+0x88>
+
+0000000080003310 <sys_kill>:
+
+uint64
+sys_kill(void)
+{
+    80003310:	1101                	addi	sp,sp,-32
+    80003312:	ec06                	sd	ra,24(sp)
+    80003314:	e822                	sd	s0,16(sp)
+    80003316:	1000                	addi	s0,sp,32
+  int pid;
+
+  if(argint(0, &pid) < 0)
+    80003318:	fec40593          	addi	a1,s0,-20
+    8000331c:	4501                	li	a0,0
+    8000331e:	00000097          	auipc	ra,0x0
+    80003322:	d34080e7          	jalr	-716(ra) # 80003052 <argint>
+    80003326:	87aa                	mv	a5,a0
+    return -1;
+    80003328:	557d                	li	a0,-1
+  if(argint(0, &pid) < 0)
+    8000332a:	0007c863          	bltz	a5,8000333a <sys_kill+0x2a>
+  return kill(pid);
+    8000332e:	fec42503          	lw	a0,-20(s0)
+    80003332:	fffff097          	auipc	ra,0xfffff
+    80003336:	5c6080e7          	jalr	1478(ra) # 800028f8 <kill>
+}
+    8000333a:	60e2                	ld	ra,24(sp)
+    8000333c:	6442                	ld	s0,16(sp)
+    8000333e:	6105                	addi	sp,sp,32
+    80003340:	8082                	ret
+
+0000000080003342 <sys_uptime>:
+
+// return how many clock tick interrupts have occurred
+// since start.
+uint64
+sys_uptime(void)
+{
+    80003342:	1101                	addi	sp,sp,-32
+    80003344:	ec06                	sd	ra,24(sp)
+    80003346:	e822                	sd	s0,16(sp)
+    80003348:	e426                	sd	s1,8(sp)
+    8000334a:	1000                	addi	s0,sp,32
+  uint xticks;
+
+  acquire(&tickslock);
+    8000334c:	00017517          	auipc	a0,0x17
+    80003350:	37c50513          	addi	a0,a0,892 # 8001a6c8 <tickslock>
+    80003354:	ffffe097          	auipc	ra,0xffffe
+    80003358:	87c080e7          	jalr	-1924(ra) # 80000bd0 <acquire>
+  xticks = ticks;
+    8000335c:	00006497          	auipc	s1,0x6
+    80003360:	cd44a483          	lw	s1,-812(s1) # 80009030 <ticks>
+  release(&tickslock);
+    80003364:	00017517          	auipc	a0,0x17
+    80003368:	36450513          	addi	a0,a0,868 # 8001a6c8 <tickslock>
+    8000336c:	ffffe097          	auipc	ra,0xffffe
+    80003370:	918080e7          	jalr	-1768(ra) # 80000c84 <release>
+  return xticks;
+}
+    80003374:	02049513          	slli	a0,s1,0x20
+    80003378:	9101                	srli	a0,a0,0x20
+    8000337a:	60e2                	ld	ra,24(sp)
+    8000337c:	6442                	ld	s0,16(sp)
+    8000337e:	64a2                	ld	s1,8(sp)
+    80003380:	6105                	addi	sp,sp,32
+    80003382:	8082                	ret
+
+0000000080003384 <sys_timeout>:
+
+uint64
+sys_timeout(void)
+{
+    80003384:	1101                	addi	sp,sp,-32
+    80003386:	ec06                	sd	ra,24(sp)
+    80003388:	e822                	sd	s0,16(sp)
+    8000338a:	1000                	addi	s0,sp,32
+  int loops;
+  argint(0, &loops);  // fetch param from register
+    8000338c:	fec40593          	addi	a1,s0,-20
+    80003390:	4501                	li	a0,0
+    80003392:	00000097          	auipc	ra,0x0
+    80003396:	cc0080e7          	jalr	-832(ra) # 80003052 <argint>
+  for (int i = 0; i < loops * 10000; i++) {};
+    8000339a:	fec42783          	lw	a5,-20(s0)
+    8000339e:	6709                	lui	a4,0x2
+    800033a0:	7107071b          	addiw	a4,a4,1808 # 2710 <_entry-0x7fffd8f0>
+    800033a4:	02f7073b          	mulw	a4,a4,a5
+    800033a8:	00e05663          	blez	a4,800033b4 <sys_timeout+0x30>
+    800033ac:	4781                	li	a5,0
+    800033ae:	2785                	addiw	a5,a5,1
+    800033b0:	fee79fe3          	bne	a5,a4,800033ae <sys_timeout+0x2a>
+  return 0;
+}
+    800033b4:	4501                	li	a0,0
+    800033b6:	60e2                	ld	ra,24(sp)
+    800033b8:	6442                	ld	s0,16(sp)
+    800033ba:	6105                	addi	sp,sp,32
+    800033bc:	8082                	ret
+
+00000000800033be <sys_semget>:
+#include "proc.h"
+#include "sem.h"
+
+uint64
+sys_semget(void)
+{
+    800033be:	1101                	addi	sp,sp,-32
+    800033c0:	ec06                	sd	ra,24(sp)
+    800033c2:	e822                	sd	s0,16(sp)
+    800033c4:	1000                	addi	s0,sp,32
+  int key;
+  argint(0, &key);
+    800033c6:	fec40593          	addi	a1,s0,-20
+    800033ca:	4501                	li	a0,0
+    800033cc:	00000097          	auipc	ra,0x0
+    800033d0:	c86080e7          	jalr	-890(ra) # 80003052 <argint>
+  int value;
+  argint(1, &value);
+    800033d4:	fe840593          	addi	a1,s0,-24
+    800033d8:	4505                	li	a0,1
+    800033da:	00000097          	auipc	ra,0x0
+    800033de:	c78080e7          	jalr	-904(ra) # 80003052 <argint>
+  return semget(key,value);
+    800033e2:	fe842583          	lw	a1,-24(s0)
+    800033e6:	fec42503          	lw	a0,-20(s0)
+    800033ea:	ffffe097          	auipc	ra,0xffffe
+    800033ee:	494080e7          	jalr	1172(ra) # 8000187e <semget>
+}
+    800033f2:	60e2                	ld	ra,24(sp)
+    800033f4:	6442                	ld	s0,16(sp)
+    800033f6:	6105                	addi	sp,sp,32
+    800033f8:	8082                	ret
+
+00000000800033fa <sys_semdown>:
+
+uint64
+sys_semdown(void)
+{
+    800033fa:	1101                	addi	sp,sp,-32
+    800033fc:	ec06                	sd	ra,24(sp)
+    800033fe:	e822                	sd	s0,16(sp)
+    80003400:	1000                	addi	s0,sp,32
+  int sid;
+  argint(0, &sid);
+    80003402:	fec40593          	addi	a1,s0,-20
+    80003406:	4501                	li	a0,0
+    80003408:	00000097          	auipc	ra,0x0
+    8000340c:	c4a080e7          	jalr	-950(ra) # 80003052 <argint>
+  return semdown(sid);
+    80003410:	fec42503          	lw	a0,-20(s0)
+    80003414:	ffffe097          	auipc	ra,0xffffe
+    80003418:	5f6080e7          	jalr	1526(ra) # 80001a0a <semdown>
+}
+    8000341c:	60e2                	ld	ra,24(sp)
+    8000341e:	6442                	ld	s0,16(sp)
+    80003420:	6105                	addi	sp,sp,32
+    80003422:	8082                	ret
+
+0000000080003424 <sys_semup>:
+
+uint64
+sys_semup(void)
+{
+    80003424:	1101                	addi	sp,sp,-32
+    80003426:	ec06                	sd	ra,24(sp)
+    80003428:	e822                	sd	s0,16(sp)
+    8000342a:	1000                	addi	s0,sp,32
+  int sid;
+  argint(0, &sid);
+    8000342c:	fec40593          	addi	a1,s0,-20
+    80003430:	4501                	li	a0,0
+    80003432:	00000097          	auipc	ra,0x0
+    80003436:	c20080e7          	jalr	-992(ra) # 80003052 <argint>
+  return semup(sid);
+    8000343a:	fec42503          	lw	a0,-20(s0)
+    8000343e:	ffffe097          	auipc	ra,0xffffe
+    80003442:	666080e7          	jalr	1638(ra) # 80001aa4 <semup>
+}
+    80003446:	60e2                	ld	ra,24(sp)
+    80003448:	6442                	ld	s0,16(sp)
+    8000344a:	6105                	addi	sp,sp,32
+    8000344c:	8082                	ret
+
+000000008000344e <sys_semclose>:
+
+uint64
+sys_semclose(void)
+{
+    8000344e:	1101                	addi	sp,sp,-32
+    80003450:	ec06                	sd	ra,24(sp)
+    80003452:	e822                	sd	s0,16(sp)
+    80003454:	1000                	addi	s0,sp,32
+  int sid;
+  argint(0, &sid);
+    80003456:	fec40593          	addi	a1,s0,-20
+    8000345a:	4501                	li	a0,0
+    8000345c:	00000097          	auipc	ra,0x0
+    80003460:	bf6080e7          	jalr	-1034(ra) # 80003052 <argint>
+  return semclose(sid);
+    80003464:	fec42503          	lw	a0,-20(s0)
+    80003468:	ffffe097          	auipc	ra,0xffffe
+    8000346c:	52e080e7          	jalr	1326(ra) # 80001996 <semclose>
+}
+    80003470:	60e2                	ld	ra,24(sp)
+    80003472:	6442                	ld	s0,16(sp)
+    80003474:	6105                	addi	sp,sp,32
+    80003476:	8082                	ret
+
+0000000080003478 <binit>:
+  struct buf head;
+} bcache;
+
+void
+binit(void)
+{
+    80003478:	7179                	addi	sp,sp,-48
+    8000347a:	f406                	sd	ra,40(sp)
+    8000347c:	f022                	sd	s0,32(sp)
+    8000347e:	ec26                	sd	s1,24(sp)
+    80003480:	e84a                	sd	s2,16(sp)
+    80003482:	e44e                	sd	s3,8(sp)
+    80003484:	e052                	sd	s4,0(sp)
+    80003486:	1800                	addi	s0,sp,48
+  struct buf *b;
+
+  initlock(&bcache.lock, "bcache");
+    80003488:	00005597          	auipc	a1,0x5
+    8000348c:	0e058593          	addi	a1,a1,224 # 80008568 <syscalls+0xe0>
+    80003490:	00017517          	auipc	a0,0x17
+    80003494:	25050513          	addi	a0,a0,592 # 8001a6e0 <bcache>
+    80003498:	ffffd097          	auipc	ra,0xffffd
+    8000349c:	6a8080e7          	jalr	1704(ra) # 80000b40 <initlock>
+
+  // Create linked list of buffers
+  bcache.head.prev = &bcache.head;
+    800034a0:	0001f797          	auipc	a5,0x1f
+    800034a4:	24078793          	addi	a5,a5,576 # 800226e0 <bcache+0x8000>
+    800034a8:	0001f717          	auipc	a4,0x1f
+    800034ac:	4a070713          	addi	a4,a4,1184 # 80022948 <bcache+0x8268>
+    800034b0:	2ae7b823          	sd	a4,688(a5)
+  bcache.head.next = &bcache.head;
+    800034b4:	2ae7bc23          	sd	a4,696(a5)
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+    800034b8:	00017497          	auipc	s1,0x17
+    800034bc:	24048493          	addi	s1,s1,576 # 8001a6f8 <bcache+0x18>
+    b->next = bcache.head.next;
+    800034c0:	893e                	mv	s2,a5
+    b->prev = &bcache.head;
+    800034c2:	89ba                	mv	s3,a4
+    initsleeplock(&b->lock, "buffer");
+    800034c4:	00005a17          	auipc	s4,0x5
+    800034c8:	0aca0a13          	addi	s4,s4,172 # 80008570 <syscalls+0xe8>
+    b->next = bcache.head.next;
+    800034cc:	2b893783          	ld	a5,696(s2)
+    800034d0:	e8bc                	sd	a5,80(s1)
+    b->prev = &bcache.head;
+    800034d2:	0534b423          	sd	s3,72(s1)
+    initsleeplock(&b->lock, "buffer");
+    800034d6:	85d2                	mv	a1,s4
+    800034d8:	01048513          	addi	a0,s1,16
+    800034dc:	00001097          	auipc	ra,0x1
+    800034e0:	4c2080e7          	jalr	1218(ra) # 8000499e <initsleeplock>
+    bcache.head.next->prev = b;
+    800034e4:	2b893783          	ld	a5,696(s2)
+    800034e8:	e7a4                	sd	s1,72(a5)
+    bcache.head.next = b;
+    800034ea:	2a993c23          	sd	s1,696(s2)
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+    800034ee:	45848493          	addi	s1,s1,1112
+    800034f2:	fd349de3          	bne	s1,s3,800034cc <binit+0x54>
+  }
+}
+    800034f6:	70a2                	ld	ra,40(sp)
+    800034f8:	7402                	ld	s0,32(sp)
+    800034fa:	64e2                	ld	s1,24(sp)
+    800034fc:	6942                	ld	s2,16(sp)
+    800034fe:	69a2                	ld	s3,8(sp)
+    80003500:	6a02                	ld	s4,0(sp)
+    80003502:	6145                	addi	sp,sp,48
+    80003504:	8082                	ret
+
+0000000080003506 <bread>:
+}
+
+// Return a locked buf with the contents of the indicated block.
+struct buf*
+bread(uint dev, uint blockno)
+{
+    80003506:	7179                	addi	sp,sp,-48
+    80003508:	f406                	sd	ra,40(sp)
+    8000350a:	f022                	sd	s0,32(sp)
+    8000350c:	ec26                	sd	s1,24(sp)
+    8000350e:	e84a                	sd	s2,16(sp)
+    80003510:	e44e                	sd	s3,8(sp)
+    80003512:	1800                	addi	s0,sp,48
+    80003514:	892a                	mv	s2,a0
+    80003516:	89ae                	mv	s3,a1
+  acquire(&bcache.lock);
+    80003518:	00017517          	auipc	a0,0x17
+    8000351c:	1c850513          	addi	a0,a0,456 # 8001a6e0 <bcache>
+    80003520:	ffffd097          	auipc	ra,0xffffd
+    80003524:	6b0080e7          	jalr	1712(ra) # 80000bd0 <acquire>
+  for(b = bcache.head.next; b != &bcache.head; b = b->next){
+    80003528:	0001f497          	auipc	s1,0x1f
+    8000352c:	4704b483          	ld	s1,1136(s1) # 80022998 <bcache+0x82b8>
+    80003530:	0001f797          	auipc	a5,0x1f
+    80003534:	41878793          	addi	a5,a5,1048 # 80022948 <bcache+0x8268>
+    80003538:	02f48f63          	beq	s1,a5,80003576 <bread+0x70>
+    8000353c:	873e                	mv	a4,a5
+    8000353e:	a021                	j	80003546 <bread+0x40>
+    80003540:	68a4                	ld	s1,80(s1)
+    80003542:	02e48a63          	beq	s1,a4,80003576 <bread+0x70>
+    if(b->dev == dev && b->blockno == blockno){
+    80003546:	449c                	lw	a5,8(s1)
+    80003548:	ff279ce3          	bne	a5,s2,80003540 <bread+0x3a>
+    8000354c:	44dc                	lw	a5,12(s1)
+    8000354e:	ff3799e3          	bne	a5,s3,80003540 <bread+0x3a>
+      b->refcnt++;
+    80003552:	40bc                	lw	a5,64(s1)
+    80003554:	2785                	addiw	a5,a5,1
+    80003556:	c0bc                	sw	a5,64(s1)
+      release(&bcache.lock);
+    80003558:	00017517          	auipc	a0,0x17
+    8000355c:	18850513          	addi	a0,a0,392 # 8001a6e0 <bcache>
+    80003560:	ffffd097          	auipc	ra,0xffffd
+    80003564:	724080e7          	jalr	1828(ra) # 80000c84 <release>
+      acquiresleep(&b->lock);
+    80003568:	01048513          	addi	a0,s1,16
+    8000356c:	00001097          	auipc	ra,0x1
+    80003570:	46c080e7          	jalr	1132(ra) # 800049d8 <acquiresleep>
+      return b;
+    80003574:	a8b9                	j	800035d2 <bread+0xcc>
+  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
+    80003576:	0001f497          	auipc	s1,0x1f
+    8000357a:	41a4b483          	ld	s1,1050(s1) # 80022990 <bcache+0x82b0>
+    8000357e:	0001f797          	auipc	a5,0x1f
+    80003582:	3ca78793          	addi	a5,a5,970 # 80022948 <bcache+0x8268>
+    80003586:	00f48863          	beq	s1,a5,80003596 <bread+0x90>
+    8000358a:	873e                	mv	a4,a5
+    if(b->refcnt == 0) {
+    8000358c:	40bc                	lw	a5,64(s1)
+    8000358e:	cf81                	beqz	a5,800035a6 <bread+0xa0>
+  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
+    80003590:	64a4                	ld	s1,72(s1)
+    80003592:	fee49de3          	bne	s1,a4,8000358c <bread+0x86>
+  panic("bget: no buffers");
+    80003596:	00005517          	auipc	a0,0x5
+    8000359a:	fe250513          	addi	a0,a0,-30 # 80008578 <syscalls+0xf0>
+    8000359e:	ffffd097          	auipc	ra,0xffffd
+    800035a2:	f9c080e7          	jalr	-100(ra) # 8000053a <panic>
+      b->dev = dev;
+    800035a6:	0124a423          	sw	s2,8(s1)
+      b->blockno = blockno;
+    800035aa:	0134a623          	sw	s3,12(s1)
+      b->valid = 0;
+    800035ae:	0004a023          	sw	zero,0(s1)
+      b->refcnt = 1;
+    800035b2:	4785                	li	a5,1
+    800035b4:	c0bc                	sw	a5,64(s1)
+      release(&bcache.lock);
+    800035b6:	00017517          	auipc	a0,0x17
+    800035ba:	12a50513          	addi	a0,a0,298 # 8001a6e0 <bcache>
+    800035be:	ffffd097          	auipc	ra,0xffffd
+    800035c2:	6c6080e7          	jalr	1734(ra) # 80000c84 <release>
+      acquiresleep(&b->lock);
+    800035c6:	01048513          	addi	a0,s1,16
+    800035ca:	00001097          	auipc	ra,0x1
+    800035ce:	40e080e7          	jalr	1038(ra) # 800049d8 <acquiresleep>
+  struct buf *b;
+
+  b = bget(dev, blockno);
+  if(!b->valid) {
+    800035d2:	409c                	lw	a5,0(s1)
+    800035d4:	cb89                	beqz	a5,800035e6 <bread+0xe0>
+    virtio_disk_rw(b, 0);
+    b->valid = 1;
+  }
+  return b;
+}
+    800035d6:	8526                	mv	a0,s1
+    800035d8:	70a2                	ld	ra,40(sp)
+    800035da:	7402                	ld	s0,32(sp)
+    800035dc:	64e2                	ld	s1,24(sp)
+    800035de:	6942                	ld	s2,16(sp)
+    800035e0:	69a2                	ld	s3,8(sp)
+    800035e2:	6145                	addi	sp,sp,48
+    800035e4:	8082                	ret
+    virtio_disk_rw(b, 0);
+    800035e6:	4581                	li	a1,0
+    800035e8:	8526                	mv	a0,s1
+    800035ea:	00003097          	auipc	ra,0x3
+    800035ee:	f28080e7          	jalr	-216(ra) # 80006512 <virtio_disk_rw>
+    b->valid = 1;
+    800035f2:	4785                	li	a5,1
+    800035f4:	c09c                	sw	a5,0(s1)
+  return b;
+    800035f6:	b7c5                	j	800035d6 <bread+0xd0>
+
+00000000800035f8 <bwrite>:
+
+// Write b's contents to disk.  Must be locked.
+void
+bwrite(struct buf *b)
+{
+    800035f8:	1101                	addi	sp,sp,-32
+    800035fa:	ec06                	sd	ra,24(sp)
+    800035fc:	e822                	sd	s0,16(sp)
+    800035fe:	e426                	sd	s1,8(sp)
+    80003600:	1000                	addi	s0,sp,32
+    80003602:	84aa                	mv	s1,a0
+  if(!holdingsleep(&b->lock))
+    80003604:	0541                	addi	a0,a0,16
+    80003606:	00001097          	auipc	ra,0x1
+    8000360a:	46c080e7          	jalr	1132(ra) # 80004a72 <holdingsleep>
+    8000360e:	cd01                	beqz	a0,80003626 <bwrite+0x2e>
+    panic("bwrite");
+  virtio_disk_rw(b, 1);
+    80003610:	4585                	li	a1,1
+    80003612:	8526                	mv	a0,s1
+    80003614:	00003097          	auipc	ra,0x3
+    80003618:	efe080e7          	jalr	-258(ra) # 80006512 <virtio_disk_rw>
+}
+    8000361c:	60e2                	ld	ra,24(sp)
+    8000361e:	6442                	ld	s0,16(sp)
+    80003620:	64a2                	ld	s1,8(sp)
+    80003622:	6105                	addi	sp,sp,32
+    80003624:	8082                	ret
+    panic("bwrite");
+    80003626:	00005517          	auipc	a0,0x5
+    8000362a:	f6a50513          	addi	a0,a0,-150 # 80008590 <syscalls+0x108>
+    8000362e:	ffffd097          	auipc	ra,0xffffd
+    80003632:	f0c080e7          	jalr	-244(ra) # 8000053a <panic>
+
+0000000080003636 <brelse>:
+
+// Release a locked buffer.
+// Move to the head of the most-recently-used list.
+void
+brelse(struct buf *b)
+{
+    80003636:	1101                	addi	sp,sp,-32
+    80003638:	ec06                	sd	ra,24(sp)
+    8000363a:	e822                	sd	s0,16(sp)
+    8000363c:	e426                	sd	s1,8(sp)
+    8000363e:	e04a                	sd	s2,0(sp)
+    80003640:	1000                	addi	s0,sp,32
+    80003642:	84aa                	mv	s1,a0
+  if(!holdingsleep(&b->lock))
+    80003644:	01050913          	addi	s2,a0,16
+    80003648:	854a                	mv	a0,s2
+    8000364a:	00001097          	auipc	ra,0x1
+    8000364e:	428080e7          	jalr	1064(ra) # 80004a72 <holdingsleep>
+    80003652:	c92d                	beqz	a0,800036c4 <brelse+0x8e>
+    panic("brelse");
+
+  releasesleep(&b->lock);
+    80003654:	854a                	mv	a0,s2
+    80003656:	00001097          	auipc	ra,0x1
+    8000365a:	3d8080e7          	jalr	984(ra) # 80004a2e <releasesleep>
+
+  acquire(&bcache.lock);
+    8000365e:	00017517          	auipc	a0,0x17
+    80003662:	08250513          	addi	a0,a0,130 # 8001a6e0 <bcache>
+    80003666:	ffffd097          	auipc	ra,0xffffd
+    8000366a:	56a080e7          	jalr	1386(ra) # 80000bd0 <acquire>
+  b->refcnt--;
+    8000366e:	40bc                	lw	a5,64(s1)
+    80003670:	37fd                	addiw	a5,a5,-1
+    80003672:	0007871b          	sext.w	a4,a5
+    80003676:	c0bc                	sw	a5,64(s1)
+  if (b->refcnt == 0) {
+    80003678:	eb05                	bnez	a4,800036a8 <brelse+0x72>
+    // no one is waiting for it.
+    b->next->prev = b->prev;
+    8000367a:	68bc                	ld	a5,80(s1)
+    8000367c:	64b8                	ld	a4,72(s1)
+    8000367e:	e7b8                	sd	a4,72(a5)
+    b->prev->next = b->next;
+    80003680:	64bc                	ld	a5,72(s1)
+    80003682:	68b8                	ld	a4,80(s1)
+    80003684:	ebb8                	sd	a4,80(a5)
+    b->next = bcache.head.next;
+    80003686:	0001f797          	auipc	a5,0x1f
+    8000368a:	05a78793          	addi	a5,a5,90 # 800226e0 <bcache+0x8000>
+    8000368e:	2b87b703          	ld	a4,696(a5)
+    80003692:	e8b8                	sd	a4,80(s1)
+    b->prev = &bcache.head;
+    80003694:	0001f717          	auipc	a4,0x1f
+    80003698:	2b470713          	addi	a4,a4,692 # 80022948 <bcache+0x8268>
+    8000369c:	e4b8                	sd	a4,72(s1)
+    bcache.head.next->prev = b;
+    8000369e:	2b87b703          	ld	a4,696(a5)
+    800036a2:	e724                	sd	s1,72(a4)
+    bcache.head.next = b;
+    800036a4:	2a97bc23          	sd	s1,696(a5)
+  }
+  
+  release(&bcache.lock);
+    800036a8:	00017517          	auipc	a0,0x17
+    800036ac:	03850513          	addi	a0,a0,56 # 8001a6e0 <bcache>
+    800036b0:	ffffd097          	auipc	ra,0xffffd
+    800036b4:	5d4080e7          	jalr	1492(ra) # 80000c84 <release>
+}
+    800036b8:	60e2                	ld	ra,24(sp)
+    800036ba:	6442                	ld	s0,16(sp)
+    800036bc:	64a2                	ld	s1,8(sp)
+    800036be:	6902                	ld	s2,0(sp)
+    800036c0:	6105                	addi	sp,sp,32
+    800036c2:	8082                	ret
+    panic("brelse");
+    800036c4:	00005517          	auipc	a0,0x5
+    800036c8:	ed450513          	addi	a0,a0,-300 # 80008598 <syscalls+0x110>
+    800036cc:	ffffd097          	auipc	ra,0xffffd
+    800036d0:	e6e080e7          	jalr	-402(ra) # 8000053a <panic>
+
+00000000800036d4 <bpin>:
+
+void
+bpin(struct buf *b) {
+    800036d4:	1101                	addi	sp,sp,-32
+    800036d6:	ec06                	sd	ra,24(sp)
+    800036d8:	e822                	sd	s0,16(sp)
+    800036da:	e426                	sd	s1,8(sp)
+    800036dc:	1000                	addi	s0,sp,32
+    800036de:	84aa                	mv	s1,a0
+  acquire(&bcache.lock);
+    800036e0:	00017517          	auipc	a0,0x17
+    800036e4:	00050513          	mv	a0,a0
+    800036e8:	ffffd097          	auipc	ra,0xffffd
+    800036ec:	4e8080e7          	jalr	1256(ra) # 80000bd0 <acquire>
+  b->refcnt++;
+    800036f0:	40bc                	lw	a5,64(s1)
+    800036f2:	2785                	addiw	a5,a5,1
+    800036f4:	c0bc                	sw	a5,64(s1)
+  release(&bcache.lock);
+    800036f6:	00017517          	auipc	a0,0x17
+    800036fa:	fea50513          	addi	a0,a0,-22 # 8001a6e0 <bcache>
+    800036fe:	ffffd097          	auipc	ra,0xffffd
+    80003702:	586080e7          	jalr	1414(ra) # 80000c84 <release>
+}
+    80003706:	60e2                	ld	ra,24(sp)
+    80003708:	6442                	ld	s0,16(sp)
+    8000370a:	64a2                	ld	s1,8(sp)
+    8000370c:	6105                	addi	sp,sp,32
+    8000370e:	8082                	ret
+
+0000000080003710 <bunpin>:
+
+void
+bunpin(struct buf *b) {
+    80003710:	1101                	addi	sp,sp,-32
+    80003712:	ec06                	sd	ra,24(sp)
+    80003714:	e822                	sd	s0,16(sp)
+    80003716:	e426                	sd	s1,8(sp)
+    80003718:	1000                	addi	s0,sp,32
+    8000371a:	84aa                	mv	s1,a0
+  acquire(&bcache.lock);
+    8000371c:	00017517          	auipc	a0,0x17
+    80003720:	fc450513          	addi	a0,a0,-60 # 8001a6e0 <bcache>
+    80003724:	ffffd097          	auipc	ra,0xffffd
+    80003728:	4ac080e7          	jalr	1196(ra) # 80000bd0 <acquire>
+  b->refcnt--;
+    8000372c:	40bc                	lw	a5,64(s1)
+    8000372e:	37fd                	addiw	a5,a5,-1
+    80003730:	c0bc                	sw	a5,64(s1)
+  release(&bcache.lock);
+    80003732:	00017517          	auipc	a0,0x17
+    80003736:	fae50513          	addi	a0,a0,-82 # 8001a6e0 <bcache>
+    8000373a:	ffffd097          	auipc	ra,0xffffd
+    8000373e:	54a080e7          	jalr	1354(ra) # 80000c84 <release>
+}
+    80003742:	60e2                	ld	ra,24(sp)
+    80003744:	6442                	ld	s0,16(sp)
+    80003746:	64a2                	ld	s1,8(sp)
+    80003748:	6105                	addi	sp,sp,32
+    8000374a:	8082                	ret
+
+000000008000374c <bfree>:
+}
+
+// Free a disk block.
+static void
+bfree(int dev, uint b)
+{
+    8000374c:	1101                	addi	sp,sp,-32
+    8000374e:	ec06                	sd	ra,24(sp)
+    80003750:	e822                	sd	s0,16(sp)
+    80003752:	e426                	sd	s1,8(sp)
+    80003754:	e04a                	sd	s2,0(sp)
+    80003756:	1000                	addi	s0,sp,32
+    80003758:	84ae                	mv	s1,a1
+  struct buf *bp;
+  int bi, m;
+
+  bp = bread(dev, BBLOCK(b, sb));
+    8000375a:	00d5d59b          	srliw	a1,a1,0xd
+    8000375e:	0001f797          	auipc	a5,0x1f
+    80003762:	65e7a783          	lw	a5,1630(a5) # 80022dbc <sb+0x1c>
+    80003766:	9dbd                	addw	a1,a1,a5
+    80003768:	00000097          	auipc	ra,0x0
+    8000376c:	d9e080e7          	jalr	-610(ra) # 80003506 <bread>
+  bi = b % BPB;
+  m = 1 << (bi % 8);
+    80003770:	0074f713          	andi	a4,s1,7
+    80003774:	4785                	li	a5,1
+    80003776:	00e797bb          	sllw	a5,a5,a4
+  if((bp->data[bi/8] & m) == 0)
+    8000377a:	14ce                	slli	s1,s1,0x33
+    8000377c:	90d9                	srli	s1,s1,0x36
+    8000377e:	00950733          	add	a4,a0,s1
+    80003782:	05874703          	lbu	a4,88(a4)
+    80003786:	00e7f6b3          	and	a3,a5,a4
+    8000378a:	c69d                	beqz	a3,800037b8 <bfree+0x6c>
+    8000378c:	892a                	mv	s2,a0
+    panic("freeing free block");
+  bp->data[bi/8] &= ~m;
+    8000378e:	94aa                	add	s1,s1,a0
+    80003790:	fff7c793          	not	a5,a5
+    80003794:	8f7d                	and	a4,a4,a5
+    80003796:	04e48c23          	sb	a4,88(s1)
+  log_write(bp);
+    8000379a:	00001097          	auipc	ra,0x1
+    8000379e:	120080e7          	jalr	288(ra) # 800048ba <log_write>
+  brelse(bp);
+    800037a2:	854a                	mv	a0,s2
+    800037a4:	00000097          	auipc	ra,0x0
+    800037a8:	e92080e7          	jalr	-366(ra) # 80003636 <brelse>
+}
+    800037ac:	60e2                	ld	ra,24(sp)
+    800037ae:	6442                	ld	s0,16(sp)
+    800037b0:	64a2                	ld	s1,8(sp)
+    800037b2:	6902                	ld	s2,0(sp)
+    800037b4:	6105                	addi	sp,sp,32
+    800037b6:	8082                	ret
+    panic("freeing free block");
+    800037b8:	00005517          	auipc	a0,0x5
+    800037bc:	de850513          	addi	a0,a0,-536 # 800085a0 <syscalls+0x118>
+    800037c0:	ffffd097          	auipc	ra,0xffffd
+    800037c4:	d7a080e7          	jalr	-646(ra) # 8000053a <panic>
+
+00000000800037c8 <balloc>:
+{
+    800037c8:	711d                	addi	sp,sp,-96
+    800037ca:	ec86                	sd	ra,88(sp)
+    800037cc:	e8a2                	sd	s0,80(sp)
+    800037ce:	e4a6                	sd	s1,72(sp)
+    800037d0:	e0ca                	sd	s2,64(sp)
+    800037d2:	fc4e                	sd	s3,56(sp)
+    800037d4:	f852                	sd	s4,48(sp)
+    800037d6:	f456                	sd	s5,40(sp)
+    800037d8:	f05a                	sd	s6,32(sp)
+    800037da:	ec5e                	sd	s7,24(sp)
+    800037dc:	e862                	sd	s8,16(sp)
+    800037de:	e466                	sd	s9,8(sp)
+    800037e0:	1080                	addi	s0,sp,96
+  for(b = 0; b < sb.size; b += BPB){
+    800037e2:	0001f797          	auipc	a5,0x1f
+    800037e6:	5c27a783          	lw	a5,1474(a5) # 80022da4 <sb+0x4>
+    800037ea:	cbc1                	beqz	a5,8000387a <balloc+0xb2>
+    800037ec:	8baa                	mv	s7,a0
+    800037ee:	4a81                	li	s5,0
+    bp = bread(dev, BBLOCK(b, sb));
+    800037f0:	0001fb17          	auipc	s6,0x1f
+    800037f4:	5b0b0b13          	addi	s6,s6,1456 # 80022da0 <sb>
+    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
+    800037f8:	4c01                	li	s8,0
+      m = 1 << (bi % 8);
+    800037fa:	4985                	li	s3,1
+    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
+    800037fc:	6a09                	lui	s4,0x2
+  for(b = 0; b < sb.size; b += BPB){
+    800037fe:	6c89                	lui	s9,0x2
+    80003800:	a831                	j	8000381c <balloc+0x54>
+    brelse(bp);
+    80003802:	854a                	mv	a0,s2
+    80003804:	00000097          	auipc	ra,0x0
+    80003808:	e32080e7          	jalr	-462(ra) # 80003636 <brelse>
+  for(b = 0; b < sb.size; b += BPB){
+    8000380c:	015c87bb          	addw	a5,s9,s5
+    80003810:	00078a9b          	sext.w	s5,a5
+    80003814:	004b2703          	lw	a4,4(s6)
+    80003818:	06eaf163          	bgeu	s5,a4,8000387a <balloc+0xb2>
+    bp = bread(dev, BBLOCK(b, sb));
+    8000381c:	41fad79b          	sraiw	a5,s5,0x1f
+    80003820:	0137d79b          	srliw	a5,a5,0x13
+    80003824:	015787bb          	addw	a5,a5,s5
+    80003828:	40d7d79b          	sraiw	a5,a5,0xd
+    8000382c:	01cb2583          	lw	a1,28(s6)
+    80003830:	9dbd                	addw	a1,a1,a5
+    80003832:	855e                	mv	a0,s7
+    80003834:	00000097          	auipc	ra,0x0
+    80003838:	cd2080e7          	jalr	-814(ra) # 80003506 <bread>
+    8000383c:	892a                	mv	s2,a0
+    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
+    8000383e:	004b2503          	lw	a0,4(s6)
+    80003842:	000a849b          	sext.w	s1,s5
+    80003846:	8762                	mv	a4,s8
+    80003848:	faa4fde3          	bgeu	s1,a0,80003802 <balloc+0x3a>
+      m = 1 << (bi % 8);
+    8000384c:	00777693          	andi	a3,a4,7
+    80003850:	00d996bb          	sllw	a3,s3,a3
+      if((bp->data[bi/8] & m) == 0){  // Is block free?
+    80003854:	41f7579b          	sraiw	a5,a4,0x1f
+    80003858:	01d7d79b          	srliw	a5,a5,0x1d
+    8000385c:	9fb9                	addw	a5,a5,a4
+    8000385e:	4037d79b          	sraiw	a5,a5,0x3
+    80003862:	00f90633          	add	a2,s2,a5
+    80003866:	05864603          	lbu	a2,88(a2)
+    8000386a:	00c6f5b3          	and	a1,a3,a2
+    8000386e:	cd91                	beqz	a1,8000388a <balloc+0xc2>
+    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
+    80003870:	2705                	addiw	a4,a4,1
+    80003872:	2485                	addiw	s1,s1,1
+    80003874:	fd471ae3          	bne	a4,s4,80003848 <balloc+0x80>
+    80003878:	b769                	j	80003802 <balloc+0x3a>
+  panic("balloc: out of blocks");
+    8000387a:	00005517          	auipc	a0,0x5
+    8000387e:	d3e50513          	addi	a0,a0,-706 # 800085b8 <syscalls+0x130>
+    80003882:	ffffd097          	auipc	ra,0xffffd
+    80003886:	cb8080e7          	jalr	-840(ra) # 8000053a <panic>
+        bp->data[bi/8] |= m;  // Mark block in use.
+    8000388a:	97ca                	add	a5,a5,s2
+    8000388c:	8e55                	or	a2,a2,a3
+    8000388e:	04c78c23          	sb	a2,88(a5)
+        log_write(bp);
+    80003892:	854a                	mv	a0,s2
+    80003894:	00001097          	auipc	ra,0x1
+    80003898:	026080e7          	jalr	38(ra) # 800048ba <log_write>
+        brelse(bp);
+    8000389c:	854a                	mv	a0,s2
+    8000389e:	00000097          	auipc	ra,0x0
+    800038a2:	d98080e7          	jalr	-616(ra) # 80003636 <brelse>
+  bp = bread(dev, bno);
+    800038a6:	85a6                	mv	a1,s1
+    800038a8:	855e                	mv	a0,s7
+    800038aa:	00000097          	auipc	ra,0x0
+    800038ae:	c5c080e7          	jalr	-932(ra) # 80003506 <bread>
+    800038b2:	892a                	mv	s2,a0
+  memset(bp->data, 0, BSIZE);
+    800038b4:	40000613          	li	a2,1024
+    800038b8:	4581                	li	a1,0
+    800038ba:	05850513          	addi	a0,a0,88
+    800038be:	ffffd097          	auipc	ra,0xffffd
+    800038c2:	40e080e7          	jalr	1038(ra) # 80000ccc <memset>
+  log_write(bp);
+    800038c6:	854a                	mv	a0,s2
+    800038c8:	00001097          	auipc	ra,0x1
+    800038cc:	ff2080e7          	jalr	-14(ra) # 800048ba <log_write>
+  brelse(bp);
+    800038d0:	854a                	mv	a0,s2
+    800038d2:	00000097          	auipc	ra,0x0
+    800038d6:	d64080e7          	jalr	-668(ra) # 80003636 <brelse>
+}
+    800038da:	8526                	mv	a0,s1
+    800038dc:	60e6                	ld	ra,88(sp)
+    800038de:	6446                	ld	s0,80(sp)
+    800038e0:	64a6                	ld	s1,72(sp)
+    800038e2:	6906                	ld	s2,64(sp)
+    800038e4:	79e2                	ld	s3,56(sp)
+    800038e6:	7a42                	ld	s4,48(sp)
+    800038e8:	7aa2                	ld	s5,40(sp)
+    800038ea:	7b02                	ld	s6,32(sp)
+    800038ec:	6be2                	ld	s7,24(sp)
+    800038ee:	6c42                	ld	s8,16(sp)
+    800038f0:	6ca2                	ld	s9,8(sp)
+    800038f2:	6125                	addi	sp,sp,96
+    800038f4:	8082                	ret
+
+00000000800038f6 <bmap>:
+
+// Return the disk block address of the nth block in inode ip.
+// If there is no such block, bmap allocates one.
+static uint
+bmap(struct inode *ip, uint bn)
+{
+    800038f6:	7179                	addi	sp,sp,-48
+    800038f8:	f406                	sd	ra,40(sp)
+    800038fa:	f022                	sd	s0,32(sp)
+    800038fc:	ec26                	sd	s1,24(sp)
+    800038fe:	e84a                	sd	s2,16(sp)
+    80003900:	e44e                	sd	s3,8(sp)
+    80003902:	e052                	sd	s4,0(sp)
+    80003904:	1800                	addi	s0,sp,48
+    80003906:	892a                	mv	s2,a0
+  uint addr, *a;
+  struct buf *bp;
+
+  if(bn < NDIRECT){
+    80003908:	47ad                	li	a5,11
+    8000390a:	04b7fe63          	bgeu	a5,a1,80003966 <bmap+0x70>
+    if((addr = ip->addrs[bn]) == 0)
+      ip->addrs[bn] = addr = balloc(ip->dev);
+    return addr;
+  }
+  bn -= NDIRECT;
+    8000390e:	ff45849b          	addiw	s1,a1,-12
+    80003912:	0004871b          	sext.w	a4,s1
+
+  if(bn < NINDIRECT){
+    80003916:	0ff00793          	li	a5,255
+    8000391a:	0ae7e463          	bltu	a5,a4,800039c2 <bmap+0xcc>
+    // Load indirect block, allocating if necessary.
+    if((addr = ip->addrs[NDIRECT]) == 0)
+    8000391e:	08052583          	lw	a1,128(a0)
+    80003922:	c5b5                	beqz	a1,8000398e <bmap+0x98>
+      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
+    bp = bread(ip->dev, addr);
+    80003924:	00092503          	lw	a0,0(s2)
+    80003928:	00000097          	auipc	ra,0x0
+    8000392c:	bde080e7          	jalr	-1058(ra) # 80003506 <bread>
+    80003930:	8a2a                	mv	s4,a0
+    a = (uint*)bp->data;
+    80003932:	05850793          	addi	a5,a0,88
+    if((addr = a[bn]) == 0){
+    80003936:	02049713          	slli	a4,s1,0x20
+    8000393a:	01e75593          	srli	a1,a4,0x1e
+    8000393e:	00b784b3          	add	s1,a5,a1
+    80003942:	0004a983          	lw	s3,0(s1)
+    80003946:	04098e63          	beqz	s3,800039a2 <bmap+0xac>
+      a[bn] = addr = balloc(ip->dev);
+      log_write(bp);
+    }
+    brelse(bp);
+    8000394a:	8552                	mv	a0,s4
+    8000394c:	00000097          	auipc	ra,0x0
+    80003950:	cea080e7          	jalr	-790(ra) # 80003636 <brelse>
+    return addr;
+  }
+
+  panic("bmap: out of range");
+}
+    80003954:	854e                	mv	a0,s3
+    80003956:	70a2                	ld	ra,40(sp)
+    80003958:	7402                	ld	s0,32(sp)
+    8000395a:	64e2                	ld	s1,24(sp)
+    8000395c:	6942                	ld	s2,16(sp)
+    8000395e:	69a2                	ld	s3,8(sp)
+    80003960:	6a02                	ld	s4,0(sp)
+    80003962:	6145                	addi	sp,sp,48
+    80003964:	8082                	ret
+    if((addr = ip->addrs[bn]) == 0)
+    80003966:	02059793          	slli	a5,a1,0x20
+    8000396a:	01e7d593          	srli	a1,a5,0x1e
+    8000396e:	00b504b3          	add	s1,a0,a1
+    80003972:	0504a983          	lw	s3,80(s1)
+    80003976:	fc099fe3          	bnez	s3,80003954 <bmap+0x5e>
+      ip->addrs[bn] = addr = balloc(ip->dev);
+    8000397a:	4108                	lw	a0,0(a0)
+    8000397c:	00000097          	auipc	ra,0x0
+    80003980:	e4c080e7          	jalr	-436(ra) # 800037c8 <balloc>
+    80003984:	0005099b          	sext.w	s3,a0
+    80003988:	0534a823          	sw	s3,80(s1)
+    8000398c:	b7e1                	j	80003954 <bmap+0x5e>
+      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
+    8000398e:	4108                	lw	a0,0(a0)
+    80003990:	00000097          	auipc	ra,0x0
+    80003994:	e38080e7          	jalr	-456(ra) # 800037c8 <balloc>
+    80003998:	0005059b          	sext.w	a1,a0
+    8000399c:	08b92023          	sw	a1,128(s2)
+    800039a0:	b751                	j	80003924 <bmap+0x2e>
+      a[bn] = addr = balloc(ip->dev);
+    800039a2:	00092503          	lw	a0,0(s2)
+    800039a6:	00000097          	auipc	ra,0x0
+    800039aa:	e22080e7          	jalr	-478(ra) # 800037c8 <balloc>
+    800039ae:	0005099b          	sext.w	s3,a0
+    800039b2:	0134a023          	sw	s3,0(s1)
+      log_write(bp);
+    800039b6:	8552                	mv	a0,s4
+    800039b8:	00001097          	auipc	ra,0x1
+    800039bc:	f02080e7          	jalr	-254(ra) # 800048ba <log_write>
+    800039c0:	b769                	j	8000394a <bmap+0x54>
+  panic("bmap: out of range");
+    800039c2:	00005517          	auipc	a0,0x5
+    800039c6:	c0e50513          	addi	a0,a0,-1010 # 800085d0 <syscalls+0x148>
+    800039ca:	ffffd097          	auipc	ra,0xffffd
+    800039ce:	b70080e7          	jalr	-1168(ra) # 8000053a <panic>
+
+00000000800039d2 <iget>:
+{
+    800039d2:	7179                	addi	sp,sp,-48
+    800039d4:	f406                	sd	ra,40(sp)
+    800039d6:	f022                	sd	s0,32(sp)
+    800039d8:	ec26                	sd	s1,24(sp)
+    800039da:	e84a                	sd	s2,16(sp)
+    800039dc:	e44e                	sd	s3,8(sp)
+    800039de:	e052                	sd	s4,0(sp)
+    800039e0:	1800                	addi	s0,sp,48
+    800039e2:	89aa                	mv	s3,a0
+    800039e4:	8a2e                	mv	s4,a1
+  acquire(&itable.lock);
+    800039e6:	0001f517          	auipc	a0,0x1f
+    800039ea:	3da50513          	addi	a0,a0,986 # 80022dc0 <itable>
+    800039ee:	ffffd097          	auipc	ra,0xffffd
+    800039f2:	1e2080e7          	jalr	482(ra) # 80000bd0 <acquire>
+  empty = 0;
+    800039f6:	4901                	li	s2,0
+  for(ip = &itable.inode[0]; ip < &itable.inode[NINODE]; ip++){
+    800039f8:	0001f497          	auipc	s1,0x1f
+    800039fc:	3e048493          	addi	s1,s1,992 # 80022dd8 <itable+0x18>
+    80003a00:	00021697          	auipc	a3,0x21
+    80003a04:	e6868693          	addi	a3,a3,-408 # 80024868 <log>
+    80003a08:	a039                	j	80003a16 <iget+0x44>
+    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
+    80003a0a:	02090b63          	beqz	s2,80003a40 <iget+0x6e>
+  for(ip = &itable.inode[0]; ip < &itable.inode[NINODE]; ip++){
+    80003a0e:	08848493          	addi	s1,s1,136
+    80003a12:	02d48a63          	beq	s1,a3,80003a46 <iget+0x74>
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+    80003a16:	449c                	lw	a5,8(s1)
+    80003a18:	fef059e3          	blez	a5,80003a0a <iget+0x38>
+    80003a1c:	4098                	lw	a4,0(s1)
+    80003a1e:	ff3716e3          	bne	a4,s3,80003a0a <iget+0x38>
+    80003a22:	40d8                	lw	a4,4(s1)
+    80003a24:	ff4713e3          	bne	a4,s4,80003a0a <iget+0x38>
+      ip->ref++;
+    80003a28:	2785                	addiw	a5,a5,1
+    80003a2a:	c49c                	sw	a5,8(s1)
+      release(&itable.lock);
+    80003a2c:	0001f517          	auipc	a0,0x1f
+    80003a30:	39450513          	addi	a0,a0,916 # 80022dc0 <itable>
+    80003a34:	ffffd097          	auipc	ra,0xffffd
+    80003a38:	250080e7          	jalr	592(ra) # 80000c84 <release>
+      return ip;
+    80003a3c:	8926                	mv	s2,s1
+    80003a3e:	a03d                	j	80003a6c <iget+0x9a>
+    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
+    80003a40:	f7f9                	bnez	a5,80003a0e <iget+0x3c>
+    80003a42:	8926                	mv	s2,s1
+    80003a44:	b7e9                	j	80003a0e <iget+0x3c>
+  if(empty == 0)
+    80003a46:	02090c63          	beqz	s2,80003a7e <iget+0xac>
+  ip->dev = dev;
+    80003a4a:	01392023          	sw	s3,0(s2)
+  ip->inum = inum;
+    80003a4e:	01492223          	sw	s4,4(s2)
+  ip->ref = 1;
+    80003a52:	4785                	li	a5,1
+    80003a54:	00f92423          	sw	a5,8(s2)
+  ip->valid = 0;
+    80003a58:	04092023          	sw	zero,64(s2)
+  release(&itable.lock);
+    80003a5c:	0001f517          	auipc	a0,0x1f
+    80003a60:	36450513          	addi	a0,a0,868 # 80022dc0 <itable>
+    80003a64:	ffffd097          	auipc	ra,0xffffd
+    80003a68:	220080e7          	jalr	544(ra) # 80000c84 <release>
+}
+    80003a6c:	854a                	mv	a0,s2
+    80003a6e:	70a2                	ld	ra,40(sp)
+    80003a70:	7402                	ld	s0,32(sp)
+    80003a72:	64e2                	ld	s1,24(sp)
+    80003a74:	6942                	ld	s2,16(sp)
+    80003a76:	69a2                	ld	s3,8(sp)
+    80003a78:	6a02                	ld	s4,0(sp)
+    80003a7a:	6145                	addi	sp,sp,48
+    80003a7c:	8082                	ret
+    panic("iget: no inodes");
+    80003a7e:	00005517          	auipc	a0,0x5
+    80003a82:	b6a50513          	addi	a0,a0,-1174 # 800085e8 <syscalls+0x160>
+    80003a86:	ffffd097          	auipc	ra,0xffffd
+    80003a8a:	ab4080e7          	jalr	-1356(ra) # 8000053a <panic>
+
+0000000080003a8e <fsinit>:
+fsinit(int dev) {
+    80003a8e:	7179                	addi	sp,sp,-48
+    80003a90:	f406                	sd	ra,40(sp)
+    80003a92:	f022                	sd	s0,32(sp)
+    80003a94:	ec26                	sd	s1,24(sp)
+    80003a96:	e84a                	sd	s2,16(sp)
+    80003a98:	e44e                	sd	s3,8(sp)
+    80003a9a:	1800                	addi	s0,sp,48
+    80003a9c:	892a                	mv	s2,a0
+  bp = bread(dev, 1);
+    80003a9e:	4585                	li	a1,1
+    80003aa0:	00000097          	auipc	ra,0x0
+    80003aa4:	a66080e7          	jalr	-1434(ra) # 80003506 <bread>
+    80003aa8:	84aa                	mv	s1,a0
+  memmove(sb, bp->data, sizeof(*sb));
+    80003aaa:	0001f997          	auipc	s3,0x1f
+    80003aae:	2f698993          	addi	s3,s3,758 # 80022da0 <sb>
+    80003ab2:	02000613          	li	a2,32
+    80003ab6:	05850593          	addi	a1,a0,88
+    80003aba:	854e                	mv	a0,s3
+    80003abc:	ffffd097          	auipc	ra,0xffffd
+    80003ac0:	26c080e7          	jalr	620(ra) # 80000d28 <memmove>
+  brelse(bp);
+    80003ac4:	8526                	mv	a0,s1
+    80003ac6:	00000097          	auipc	ra,0x0
+    80003aca:	b70080e7          	jalr	-1168(ra) # 80003636 <brelse>
+  if(sb.magic != FSMAGIC)
+    80003ace:	0009a703          	lw	a4,0(s3)
+    80003ad2:	102037b7          	lui	a5,0x10203
+    80003ad6:	04078793          	addi	a5,a5,64 # 10203040 <_entry-0x6fdfcfc0>
+    80003ada:	02f71263          	bne	a4,a5,80003afe <fsinit+0x70>
+  initlog(dev, &sb);
+    80003ade:	0001f597          	auipc	a1,0x1f
+    80003ae2:	2c258593          	addi	a1,a1,706 # 80022da0 <sb>
+    80003ae6:	854a                	mv	a0,s2
+    80003ae8:	00001097          	auipc	ra,0x1
+    80003aec:	b56080e7          	jalr	-1194(ra) # 8000463e <initlog>
+}
+    80003af0:	70a2                	ld	ra,40(sp)
+    80003af2:	7402                	ld	s0,32(sp)
+    80003af4:	64e2                	ld	s1,24(sp)
+    80003af6:	6942                	ld	s2,16(sp)
+    80003af8:	69a2                	ld	s3,8(sp)
+    80003afa:	6145                	addi	sp,sp,48
+    80003afc:	8082                	ret
+    panic("invalid file system");
+    80003afe:	00005517          	auipc	a0,0x5
+    80003b02:	afa50513          	addi	a0,a0,-1286 # 800085f8 <syscalls+0x170>
+    80003b06:	ffffd097          	auipc	ra,0xffffd
+    80003b0a:	a34080e7          	jalr	-1484(ra) # 8000053a <panic>
+
+0000000080003b0e <iinit>:
+{
+    80003b0e:	7179                	addi	sp,sp,-48
+    80003b10:	f406                	sd	ra,40(sp)
+    80003b12:	f022                	sd	s0,32(sp)
+    80003b14:	ec26                	sd	s1,24(sp)
+    80003b16:	e84a                	sd	s2,16(sp)
+    80003b18:	e44e                	sd	s3,8(sp)
+    80003b1a:	1800                	addi	s0,sp,48
+  initlock(&itable.lock, "itable");
+    80003b1c:	00005597          	auipc	a1,0x5
+    80003b20:	af458593          	addi	a1,a1,-1292 # 80008610 <syscalls+0x188>
+    80003b24:	0001f517          	auipc	a0,0x1f
+    80003b28:	29c50513          	addi	a0,a0,668 # 80022dc0 <itable>
+    80003b2c:	ffffd097          	auipc	ra,0xffffd
+    80003b30:	014080e7          	jalr	20(ra) # 80000b40 <initlock>
+  for(i = 0; i < NINODE; i++) {
+    80003b34:	0001f497          	auipc	s1,0x1f
+    80003b38:	2b448493          	addi	s1,s1,692 # 80022de8 <itable+0x28>
+    80003b3c:	00021997          	auipc	s3,0x21
+    80003b40:	d3c98993          	addi	s3,s3,-708 # 80024878 <log+0x10>
+    initsleeplock(&itable.inode[i].lock, "inode");
+    80003b44:	00005917          	auipc	s2,0x5
+    80003b48:	ad490913          	addi	s2,s2,-1324 # 80008618 <syscalls+0x190>
+    80003b4c:	85ca                	mv	a1,s2
+    80003b4e:	8526                	mv	a0,s1
+    80003b50:	00001097          	auipc	ra,0x1
+    80003b54:	e4e080e7          	jalr	-434(ra) # 8000499e <initsleeplock>
+  for(i = 0; i < NINODE; i++) {
+    80003b58:	08848493          	addi	s1,s1,136
+    80003b5c:	ff3498e3          	bne	s1,s3,80003b4c <iinit+0x3e>
+}
+    80003b60:	70a2                	ld	ra,40(sp)
+    80003b62:	7402                	ld	s0,32(sp)
+    80003b64:	64e2                	ld	s1,24(sp)
+    80003b66:	6942                	ld	s2,16(sp)
+    80003b68:	69a2                	ld	s3,8(sp)
+    80003b6a:	6145                	addi	sp,sp,48
+    80003b6c:	8082                	ret
+
+0000000080003b6e <ialloc>:
+{
+    80003b6e:	715d                	addi	sp,sp,-80
+    80003b70:	e486                	sd	ra,72(sp)
+    80003b72:	e0a2                	sd	s0,64(sp)
+    80003b74:	fc26                	sd	s1,56(sp)
+    80003b76:	f84a                	sd	s2,48(sp)
+    80003b78:	f44e                	sd	s3,40(sp)
+    80003b7a:	f052                	sd	s4,32(sp)
+    80003b7c:	ec56                	sd	s5,24(sp)
+    80003b7e:	e85a                	sd	s6,16(sp)
+    80003b80:	e45e                	sd	s7,8(sp)
+    80003b82:	0880                	addi	s0,sp,80
+  for(inum = 1; inum < sb.ninodes; inum++){
+    80003b84:	0001f717          	auipc	a4,0x1f
+    80003b88:	22872703          	lw	a4,552(a4) # 80022dac <sb+0xc>
+    80003b8c:	4785                	li	a5,1
+    80003b8e:	04e7fa63          	bgeu	a5,a4,80003be2 <ialloc+0x74>
+    80003b92:	8aaa                	mv	s5,a0
+    80003b94:	8bae                	mv	s7,a1
+    80003b96:	4485                	li	s1,1
+    bp = bread(dev, IBLOCK(inum, sb));
+    80003b98:	0001fa17          	auipc	s4,0x1f
+    80003b9c:	208a0a13          	addi	s4,s4,520 # 80022da0 <sb>
+    80003ba0:	00048b1b          	sext.w	s6,s1
+    80003ba4:	0044d593          	srli	a1,s1,0x4
+    80003ba8:	018a2783          	lw	a5,24(s4)
+    80003bac:	9dbd                	addw	a1,a1,a5
+    80003bae:	8556                	mv	a0,s5
+    80003bb0:	00000097          	auipc	ra,0x0
+    80003bb4:	956080e7          	jalr	-1706(ra) # 80003506 <bread>
+    80003bb8:	892a                	mv	s2,a0
+    dip = (struct dinode*)bp->data + inum%IPB;
+    80003bba:	05850993          	addi	s3,a0,88
+    80003bbe:	00f4f793          	andi	a5,s1,15
+    80003bc2:	079a                	slli	a5,a5,0x6
+    80003bc4:	99be                	add	s3,s3,a5
+    if(dip->type == 0){  // a free inode
+    80003bc6:	00099783          	lh	a5,0(s3)
+    80003bca:	c785                	beqz	a5,80003bf2 <ialloc+0x84>
+    brelse(bp);
+    80003bcc:	00000097          	auipc	ra,0x0
+    80003bd0:	a6a080e7          	jalr	-1430(ra) # 80003636 <brelse>
+  for(inum = 1; inum < sb.ninodes; inum++){
+    80003bd4:	0485                	addi	s1,s1,1
+    80003bd6:	00ca2703          	lw	a4,12(s4)
+    80003bda:	0004879b          	sext.w	a5,s1
+    80003bde:	fce7e1e3          	bltu	a5,a4,80003ba0 <ialloc+0x32>
+  panic("ialloc: no inodes");
+    80003be2:	00005517          	auipc	a0,0x5
+    80003be6:	a3e50513          	addi	a0,a0,-1474 # 80008620 <syscalls+0x198>
+    80003bea:	ffffd097          	auipc	ra,0xffffd
+    80003bee:	950080e7          	jalr	-1712(ra) # 8000053a <panic>
+      memset(dip, 0, sizeof(*dip));
+    80003bf2:	04000613          	li	a2,64
+    80003bf6:	4581                	li	a1,0
+    80003bf8:	854e                	mv	a0,s3
+    80003bfa:	ffffd097          	auipc	ra,0xffffd
+    80003bfe:	0d2080e7          	jalr	210(ra) # 80000ccc <memset>
+      dip->type = type;
+    80003c02:	01799023          	sh	s7,0(s3)
+      log_write(bp);   // mark it allocated on the disk
+    80003c06:	854a                	mv	a0,s2
+    80003c08:	00001097          	auipc	ra,0x1
+    80003c0c:	cb2080e7          	jalr	-846(ra) # 800048ba <log_write>
+      brelse(bp);
+    80003c10:	854a                	mv	a0,s2
+    80003c12:	00000097          	auipc	ra,0x0
+    80003c16:	a24080e7          	jalr	-1500(ra) # 80003636 <brelse>
+      return iget(dev, inum);
+    80003c1a:	85da                	mv	a1,s6
+    80003c1c:	8556                	mv	a0,s5
+    80003c1e:	00000097          	auipc	ra,0x0
+    80003c22:	db4080e7          	jalr	-588(ra) # 800039d2 <iget>
+}
+    80003c26:	60a6                	ld	ra,72(sp)
+    80003c28:	6406                	ld	s0,64(sp)
+    80003c2a:	74e2                	ld	s1,56(sp)
+    80003c2c:	7942                	ld	s2,48(sp)
+    80003c2e:	79a2                	ld	s3,40(sp)
+    80003c30:	7a02                	ld	s4,32(sp)
+    80003c32:	6ae2                	ld	s5,24(sp)
+    80003c34:	6b42                	ld	s6,16(sp)
+    80003c36:	6ba2                	ld	s7,8(sp)
+    80003c38:	6161                	addi	sp,sp,80
+    80003c3a:	8082                	ret
+
+0000000080003c3c <iupdate>:
+{
+    80003c3c:	1101                	addi	sp,sp,-32
+    80003c3e:	ec06                	sd	ra,24(sp)
+    80003c40:	e822                	sd	s0,16(sp)
+    80003c42:	e426                	sd	s1,8(sp)
+    80003c44:	e04a                	sd	s2,0(sp)
+    80003c46:	1000                	addi	s0,sp,32
+    80003c48:	84aa                	mv	s1,a0
+  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+    80003c4a:	415c                	lw	a5,4(a0)
+    80003c4c:	0047d79b          	srliw	a5,a5,0x4
+    80003c50:	0001f597          	auipc	a1,0x1f
+    80003c54:	1685a583          	lw	a1,360(a1) # 80022db8 <sb+0x18>
+    80003c58:	9dbd                	addw	a1,a1,a5
+    80003c5a:	4108                	lw	a0,0(a0)
+    80003c5c:	00000097          	auipc	ra,0x0
+    80003c60:	8aa080e7          	jalr	-1878(ra) # 80003506 <bread>
+    80003c64:	892a                	mv	s2,a0
+  dip = (struct dinode*)bp->data + ip->inum%IPB;
+    80003c66:	05850793          	addi	a5,a0,88
+    80003c6a:	40d8                	lw	a4,4(s1)
+    80003c6c:	8b3d                	andi	a4,a4,15
+    80003c6e:	071a                	slli	a4,a4,0x6
+    80003c70:	97ba                	add	a5,a5,a4
+  dip->type = ip->type;
+    80003c72:	04449703          	lh	a4,68(s1)
+    80003c76:	00e79023          	sh	a4,0(a5)
+  dip->major = ip->major;
+    80003c7a:	04649703          	lh	a4,70(s1)
+    80003c7e:	00e79123          	sh	a4,2(a5)
+  dip->minor = ip->minor;
+    80003c82:	04849703          	lh	a4,72(s1)
+    80003c86:	00e79223          	sh	a4,4(a5)
+  dip->nlink = ip->nlink;
+    80003c8a:	04a49703          	lh	a4,74(s1)
+    80003c8e:	00e79323          	sh	a4,6(a5)
+  dip->size = ip->size;
+    80003c92:	44f8                	lw	a4,76(s1)
+    80003c94:	c798                	sw	a4,8(a5)
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+    80003c96:	03400613          	li	a2,52
+    80003c9a:	05048593          	addi	a1,s1,80
+    80003c9e:	00c78513          	addi	a0,a5,12
+    80003ca2:	ffffd097          	auipc	ra,0xffffd
+    80003ca6:	086080e7          	jalr	134(ra) # 80000d28 <memmove>
+  log_write(bp);
+    80003caa:	854a                	mv	a0,s2
+    80003cac:	00001097          	auipc	ra,0x1
+    80003cb0:	c0e080e7          	jalr	-1010(ra) # 800048ba <log_write>
+  brelse(bp);
+    80003cb4:	854a                	mv	a0,s2
+    80003cb6:	00000097          	auipc	ra,0x0
+    80003cba:	980080e7          	jalr	-1664(ra) # 80003636 <brelse>
+}
+    80003cbe:	60e2                	ld	ra,24(sp)
+    80003cc0:	6442                	ld	s0,16(sp)
+    80003cc2:	64a2                	ld	s1,8(sp)
+    80003cc4:	6902                	ld	s2,0(sp)
+    80003cc6:	6105                	addi	sp,sp,32
+    80003cc8:	8082                	ret
+
+0000000080003cca <idup>:
+{
+    80003cca:	1101                	addi	sp,sp,-32
+    80003ccc:	ec06                	sd	ra,24(sp)
+    80003cce:	e822                	sd	s0,16(sp)
+    80003cd0:	e426                	sd	s1,8(sp)
+    80003cd2:	1000                	addi	s0,sp,32
+    80003cd4:	84aa                	mv	s1,a0
+  acquire(&itable.lock);
+    80003cd6:	0001f517          	auipc	a0,0x1f
+    80003cda:	0ea50513          	addi	a0,a0,234 # 80022dc0 <itable>
+    80003cde:	ffffd097          	auipc	ra,0xffffd
+    80003ce2:	ef2080e7          	jalr	-270(ra) # 80000bd0 <acquire>
+  ip->ref++;
+    80003ce6:	449c                	lw	a5,8(s1)
+    80003ce8:	2785                	addiw	a5,a5,1
+    80003cea:	c49c                	sw	a5,8(s1)
+  release(&itable.lock);
+    80003cec:	0001f517          	auipc	a0,0x1f
+    80003cf0:	0d450513          	addi	a0,a0,212 # 80022dc0 <itable>
+    80003cf4:	ffffd097          	auipc	ra,0xffffd
+    80003cf8:	f90080e7          	jalr	-112(ra) # 80000c84 <release>
+}
+    80003cfc:	8526                	mv	a0,s1
+    80003cfe:	60e2                	ld	ra,24(sp)
+    80003d00:	6442                	ld	s0,16(sp)
+    80003d02:	64a2                	ld	s1,8(sp)
+    80003d04:	6105                	addi	sp,sp,32
+    80003d06:	8082                	ret
+
+0000000080003d08 <ilock>:
+{
+    80003d08:	1101                	addi	sp,sp,-32
+    80003d0a:	ec06                	sd	ra,24(sp)
+    80003d0c:	e822                	sd	s0,16(sp)
+    80003d0e:	e426                	sd	s1,8(sp)
+    80003d10:	e04a                	sd	s2,0(sp)
+    80003d12:	1000                	addi	s0,sp,32
+  if(ip == 0 || ip->ref < 1)
+    80003d14:	c115                	beqz	a0,80003d38 <ilock+0x30>
+    80003d16:	84aa                	mv	s1,a0
+    80003d18:	451c                	lw	a5,8(a0)
+    80003d1a:	00f05f63          	blez	a5,80003d38 <ilock+0x30>
+  acquiresleep(&ip->lock);
+    80003d1e:	0541                	addi	a0,a0,16
+    80003d20:	00001097          	auipc	ra,0x1
+    80003d24:	cb8080e7          	jalr	-840(ra) # 800049d8 <acquiresleep>
+  if(ip->valid == 0){
+    80003d28:	40bc                	lw	a5,64(s1)
+    80003d2a:	cf99                	beqz	a5,80003d48 <ilock+0x40>
+}
+    80003d2c:	60e2                	ld	ra,24(sp)
+    80003d2e:	6442                	ld	s0,16(sp)
+    80003d30:	64a2                	ld	s1,8(sp)
+    80003d32:	6902                	ld	s2,0(sp)
+    80003d34:	6105                	addi	sp,sp,32
+    80003d36:	8082                	ret
+    panic("ilock");
+    80003d38:	00005517          	auipc	a0,0x5
+    80003d3c:	90050513          	addi	a0,a0,-1792 # 80008638 <syscalls+0x1b0>
+    80003d40:	ffffc097          	auipc	ra,0xffffc
+    80003d44:	7fa080e7          	jalr	2042(ra) # 8000053a <panic>
+    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+    80003d48:	40dc                	lw	a5,4(s1)
+    80003d4a:	0047d79b          	srliw	a5,a5,0x4
+    80003d4e:	0001f597          	auipc	a1,0x1f
+    80003d52:	06a5a583          	lw	a1,106(a1) # 80022db8 <sb+0x18>
+    80003d56:	9dbd                	addw	a1,a1,a5
+    80003d58:	4088                	lw	a0,0(s1)
+    80003d5a:	fffff097          	auipc	ra,0xfffff
+    80003d5e:	7ac080e7          	jalr	1964(ra) # 80003506 <bread>
+    80003d62:	892a                	mv	s2,a0
+    dip = (struct dinode*)bp->data + ip->inum%IPB;
+    80003d64:	05850593          	addi	a1,a0,88
+    80003d68:	40dc                	lw	a5,4(s1)
+    80003d6a:	8bbd                	andi	a5,a5,15
+    80003d6c:	079a                	slli	a5,a5,0x6
+    80003d6e:	95be                	add	a1,a1,a5
+    ip->type = dip->type;
+    80003d70:	00059783          	lh	a5,0(a1)
+    80003d74:	04f49223          	sh	a5,68(s1)
+    ip->major = dip->major;
+    80003d78:	00259783          	lh	a5,2(a1)
+    80003d7c:	04f49323          	sh	a5,70(s1)
+    ip->minor = dip->minor;
+    80003d80:	00459783          	lh	a5,4(a1)
+    80003d84:	04f49423          	sh	a5,72(s1)
+    ip->nlink = dip->nlink;
+    80003d88:	00659783          	lh	a5,6(a1)
+    80003d8c:	04f49523          	sh	a5,74(s1)
+    ip->size = dip->size;
+    80003d90:	459c                	lw	a5,8(a1)
+    80003d92:	c4fc                	sw	a5,76(s1)
+    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
+    80003d94:	03400613          	li	a2,52
+    80003d98:	05b1                	addi	a1,a1,12
+    80003d9a:	05048513          	addi	a0,s1,80
+    80003d9e:	ffffd097          	auipc	ra,0xffffd
+    80003da2:	f8a080e7          	jalr	-118(ra) # 80000d28 <memmove>
+    brelse(bp);
+    80003da6:	854a                	mv	a0,s2
+    80003da8:	00000097          	auipc	ra,0x0
+    80003dac:	88e080e7          	jalr	-1906(ra) # 80003636 <brelse>
+    ip->valid = 1;
+    80003db0:	4785                	li	a5,1
+    80003db2:	c0bc                	sw	a5,64(s1)
+    if(ip->type == 0)
+    80003db4:	04449783          	lh	a5,68(s1)
+    80003db8:	fbb5                	bnez	a5,80003d2c <ilock+0x24>
+      panic("ilock: no type");
+    80003dba:	00005517          	auipc	a0,0x5
+    80003dbe:	88650513          	addi	a0,a0,-1914 # 80008640 <syscalls+0x1b8>
+    80003dc2:	ffffc097          	auipc	ra,0xffffc
+    80003dc6:	778080e7          	jalr	1912(ra) # 8000053a <panic>
+
+0000000080003dca <iunlock>:
+{
+    80003dca:	1101                	addi	sp,sp,-32
+    80003dcc:	ec06                	sd	ra,24(sp)
+    80003dce:	e822                	sd	s0,16(sp)
+    80003dd0:	e426                	sd	s1,8(sp)
+    80003dd2:	e04a                	sd	s2,0(sp)
+    80003dd4:	1000                	addi	s0,sp,32
+  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
+    80003dd6:	c905                	beqz	a0,80003e06 <iunlock+0x3c>
+    80003dd8:	84aa                	mv	s1,a0
+    80003dda:	01050913          	addi	s2,a0,16
+    80003dde:	854a                	mv	a0,s2
+    80003de0:	00001097          	auipc	ra,0x1
+    80003de4:	c92080e7          	jalr	-878(ra) # 80004a72 <holdingsleep>
+    80003de8:	cd19                	beqz	a0,80003e06 <iunlock+0x3c>
+    80003dea:	449c                	lw	a5,8(s1)
+    80003dec:	00f05d63          	blez	a5,80003e06 <iunlock+0x3c>
+  releasesleep(&ip->lock);
+    80003df0:	854a                	mv	a0,s2
+    80003df2:	00001097          	auipc	ra,0x1
+    80003df6:	c3c080e7          	jalr	-964(ra) # 80004a2e <releasesleep>
+}
+    80003dfa:	60e2                	ld	ra,24(sp)
+    80003dfc:	6442                	ld	s0,16(sp)
+    80003dfe:	64a2                	ld	s1,8(sp)
+    80003e00:	6902                	ld	s2,0(sp)
+    80003e02:	6105                	addi	sp,sp,32
+    80003e04:	8082                	ret
+    panic("iunlock");
+    80003e06:	00005517          	auipc	a0,0x5
+    80003e0a:	84a50513          	addi	a0,a0,-1974 # 80008650 <syscalls+0x1c8>
+    80003e0e:	ffffc097          	auipc	ra,0xffffc
+    80003e12:	72c080e7          	jalr	1836(ra) # 8000053a <panic>
+
+0000000080003e16 <itrunc>:
+
+// Truncate inode (discard contents).
+// Caller must hold ip->lock.
+void
+itrunc(struct inode *ip)
+{
+    80003e16:	7179                	addi	sp,sp,-48
+    80003e18:	f406                	sd	ra,40(sp)
+    80003e1a:	f022                	sd	s0,32(sp)
+    80003e1c:	ec26                	sd	s1,24(sp)
+    80003e1e:	e84a                	sd	s2,16(sp)
+    80003e20:	e44e                	sd	s3,8(sp)
+    80003e22:	e052                	sd	s4,0(sp)
+    80003e24:	1800                	addi	s0,sp,48
+    80003e26:	89aa                	mv	s3,a0
+  int i, j;
+  struct buf *bp;
+  uint *a;
+
+  for(i = 0; i < NDIRECT; i++){
+    80003e28:	05050493          	addi	s1,a0,80
+    80003e2c:	08050913          	addi	s2,a0,128
+    80003e30:	a021                	j	80003e38 <itrunc+0x22>
+    80003e32:	0491                	addi	s1,s1,4
+    80003e34:	01248d63          	beq	s1,s2,80003e4e <itrunc+0x38>
+    if(ip->addrs[i]){
+    80003e38:	408c                	lw	a1,0(s1)
+    80003e3a:	dde5                	beqz	a1,80003e32 <itrunc+0x1c>
+      bfree(ip->dev, ip->addrs[i]);
+    80003e3c:	0009a503          	lw	a0,0(s3)
+    80003e40:	00000097          	auipc	ra,0x0
+    80003e44:	90c080e7          	jalr	-1780(ra) # 8000374c <bfree>
+      ip->addrs[i] = 0;
+    80003e48:	0004a023          	sw	zero,0(s1)
+    80003e4c:	b7dd                	j	80003e32 <itrunc+0x1c>
+    }
+  }
+
+  if(ip->addrs[NDIRECT]){
+    80003e4e:	0809a583          	lw	a1,128(s3)
+    80003e52:	e185                	bnez	a1,80003e72 <itrunc+0x5c>
+    brelse(bp);
+    bfree(ip->dev, ip->addrs[NDIRECT]);
+    ip->addrs[NDIRECT] = 0;
+  }
+
+  ip->size = 0;
+    80003e54:	0409a623          	sw	zero,76(s3)
+  iupdate(ip);
+    80003e58:	854e                	mv	a0,s3
+    80003e5a:	00000097          	auipc	ra,0x0
+    80003e5e:	de2080e7          	jalr	-542(ra) # 80003c3c <iupdate>
+}
+    80003e62:	70a2                	ld	ra,40(sp)
+    80003e64:	7402                	ld	s0,32(sp)
+    80003e66:	64e2                	ld	s1,24(sp)
+    80003e68:	6942                	ld	s2,16(sp)
+    80003e6a:	69a2                	ld	s3,8(sp)
+    80003e6c:	6a02                	ld	s4,0(sp)
+    80003e6e:	6145                	addi	sp,sp,48
+    80003e70:	8082                	ret
+    bp = bread(ip->dev, ip->addrs[NDIRECT]);
+    80003e72:	0009a503          	lw	a0,0(s3)
+    80003e76:	fffff097          	auipc	ra,0xfffff
+    80003e7a:	690080e7          	jalr	1680(ra) # 80003506 <bread>
+    80003e7e:	8a2a                	mv	s4,a0
+    for(j = 0; j < NINDIRECT; j++){
+    80003e80:	05850493          	addi	s1,a0,88
+    80003e84:	45850913          	addi	s2,a0,1112
+    80003e88:	a021                	j	80003e90 <itrunc+0x7a>
+    80003e8a:	0491                	addi	s1,s1,4
+    80003e8c:	01248b63          	beq	s1,s2,80003ea2 <itrunc+0x8c>
+      if(a[j])
+    80003e90:	408c                	lw	a1,0(s1)
+    80003e92:	dde5                	beqz	a1,80003e8a <itrunc+0x74>
+        bfree(ip->dev, a[j]);
+    80003e94:	0009a503          	lw	a0,0(s3)
+    80003e98:	00000097          	auipc	ra,0x0
+    80003e9c:	8b4080e7          	jalr	-1868(ra) # 8000374c <bfree>
+    80003ea0:	b7ed                	j	80003e8a <itrunc+0x74>
+    brelse(bp);
+    80003ea2:	8552                	mv	a0,s4
+    80003ea4:	fffff097          	auipc	ra,0xfffff
+    80003ea8:	792080e7          	jalr	1938(ra) # 80003636 <brelse>
+    bfree(ip->dev, ip->addrs[NDIRECT]);
+    80003eac:	0809a583          	lw	a1,128(s3)
+    80003eb0:	0009a503          	lw	a0,0(s3)
+    80003eb4:	00000097          	auipc	ra,0x0
+    80003eb8:	898080e7          	jalr	-1896(ra) # 8000374c <bfree>
+    ip->addrs[NDIRECT] = 0;
+    80003ebc:	0809a023          	sw	zero,128(s3)
+    80003ec0:	bf51                	j	80003e54 <itrunc+0x3e>
+
+0000000080003ec2 <iput>:
+{
+    80003ec2:	1101                	addi	sp,sp,-32
+    80003ec4:	ec06                	sd	ra,24(sp)
+    80003ec6:	e822                	sd	s0,16(sp)
+    80003ec8:	e426                	sd	s1,8(sp)
+    80003eca:	e04a                	sd	s2,0(sp)
+    80003ecc:	1000                	addi	s0,sp,32
+    80003ece:	84aa                	mv	s1,a0
+  acquire(&itable.lock);
+    80003ed0:	0001f517          	auipc	a0,0x1f
+    80003ed4:	ef050513          	addi	a0,a0,-272 # 80022dc0 <itable>
+    80003ed8:	ffffd097          	auipc	ra,0xffffd
+    80003edc:	cf8080e7          	jalr	-776(ra) # 80000bd0 <acquire>
+  if(ip->ref == 1 && ip->valid && ip->nlink == 0){
+    80003ee0:	4498                	lw	a4,8(s1)
+    80003ee2:	4785                	li	a5,1
+    80003ee4:	02f70363          	beq	a4,a5,80003f0a <iput+0x48>
+  ip->ref--;
+    80003ee8:	449c                	lw	a5,8(s1)
+    80003eea:	37fd                	addiw	a5,a5,-1
+    80003eec:	c49c                	sw	a5,8(s1)
+  release(&itable.lock);
+    80003eee:	0001f517          	auipc	a0,0x1f
+    80003ef2:	ed250513          	addi	a0,a0,-302 # 80022dc0 <itable>
+    80003ef6:	ffffd097          	auipc	ra,0xffffd
+    80003efa:	d8e080e7          	jalr	-626(ra) # 80000c84 <release>
+}
+    80003efe:	60e2                	ld	ra,24(sp)
+    80003f00:	6442                	ld	s0,16(sp)
+    80003f02:	64a2                	ld	s1,8(sp)
+    80003f04:	6902                	ld	s2,0(sp)
+    80003f06:	6105                	addi	sp,sp,32
+    80003f08:	8082                	ret
+  if(ip->ref == 1 && ip->valid && ip->nlink == 0){
+    80003f0a:	40bc                	lw	a5,64(s1)
+    80003f0c:	dff1                	beqz	a5,80003ee8 <iput+0x26>
+    80003f0e:	04a49783          	lh	a5,74(s1)
+    80003f12:	fbf9                	bnez	a5,80003ee8 <iput+0x26>
+    acquiresleep(&ip->lock);
+    80003f14:	01048913          	addi	s2,s1,16
+    80003f18:	854a                	mv	a0,s2
+    80003f1a:	00001097          	auipc	ra,0x1
+    80003f1e:	abe080e7          	jalr	-1346(ra) # 800049d8 <acquiresleep>
+    release(&itable.lock);
+    80003f22:	0001f517          	auipc	a0,0x1f
+    80003f26:	e9e50513          	addi	a0,a0,-354 # 80022dc0 <itable>
+    80003f2a:	ffffd097          	auipc	ra,0xffffd
+    80003f2e:	d5a080e7          	jalr	-678(ra) # 80000c84 <release>
+    itrunc(ip);
+    80003f32:	8526                	mv	a0,s1
+    80003f34:	00000097          	auipc	ra,0x0
+    80003f38:	ee2080e7          	jalr	-286(ra) # 80003e16 <itrunc>
+    ip->type = 0;
+    80003f3c:	04049223          	sh	zero,68(s1)
+    iupdate(ip);
+    80003f40:	8526                	mv	a0,s1
+    80003f42:	00000097          	auipc	ra,0x0
+    80003f46:	cfa080e7          	jalr	-774(ra) # 80003c3c <iupdate>
+    ip->valid = 0;
+    80003f4a:	0404a023          	sw	zero,64(s1)
+    releasesleep(&ip->lock);
+    80003f4e:	854a                	mv	a0,s2
+    80003f50:	00001097          	auipc	ra,0x1
+    80003f54:	ade080e7          	jalr	-1314(ra) # 80004a2e <releasesleep>
+    acquire(&itable.lock);
+    80003f58:	0001f517          	auipc	a0,0x1f
+    80003f5c:	e6850513          	addi	a0,a0,-408 # 80022dc0 <itable>
+    80003f60:	ffffd097          	auipc	ra,0xffffd
+    80003f64:	c70080e7          	jalr	-912(ra) # 80000bd0 <acquire>
+    80003f68:	b741                	j	80003ee8 <iput+0x26>
+
+0000000080003f6a <iunlockput>:
+{
+    80003f6a:	1101                	addi	sp,sp,-32
+    80003f6c:	ec06                	sd	ra,24(sp)
+    80003f6e:	e822                	sd	s0,16(sp)
+    80003f70:	e426                	sd	s1,8(sp)
+    80003f72:	1000                	addi	s0,sp,32
+    80003f74:	84aa                	mv	s1,a0
+  iunlock(ip);
+    80003f76:	00000097          	auipc	ra,0x0
+    80003f7a:	e54080e7          	jalr	-428(ra) # 80003dca <iunlock>
+  iput(ip);
+    80003f7e:	8526                	mv	a0,s1
+    80003f80:	00000097          	auipc	ra,0x0
+    80003f84:	f42080e7          	jalr	-190(ra) # 80003ec2 <iput>
+}
+    80003f88:	60e2                	ld	ra,24(sp)
+    80003f8a:	6442                	ld	s0,16(sp)
+    80003f8c:	64a2                	ld	s1,8(sp)
+    80003f8e:	6105                	addi	sp,sp,32
+    80003f90:	8082                	ret
+
+0000000080003f92 <stati>:
+
+// Copy stat information from inode.
+// Caller must hold ip->lock.
+void
+stati(struct inode *ip, struct stat *st)
+{
+    80003f92:	1141                	addi	sp,sp,-16
+    80003f94:	e422                	sd	s0,8(sp)
+    80003f96:	0800                	addi	s0,sp,16
+  st->dev = ip->dev;
+    80003f98:	411c                	lw	a5,0(a0)
+    80003f9a:	c19c                	sw	a5,0(a1)
+  st->ino = ip->inum;
+    80003f9c:	415c                	lw	a5,4(a0)
+    80003f9e:	c1dc                	sw	a5,4(a1)
+  st->type = ip->type;
+    80003fa0:	04451783          	lh	a5,68(a0)
+    80003fa4:	00f59423          	sh	a5,8(a1)
+  st->nlink = ip->nlink;
+    80003fa8:	04a51783          	lh	a5,74(a0)
+    80003fac:	00f59523          	sh	a5,10(a1)
+  st->size = ip->size;
+    80003fb0:	04c56783          	lwu	a5,76(a0)
+    80003fb4:	e99c                	sd	a5,16(a1)
+}
+    80003fb6:	6422                	ld	s0,8(sp)
+    80003fb8:	0141                	addi	sp,sp,16
+    80003fba:	8082                	ret
+
+0000000080003fbc <readi>:
+readi(struct inode *ip, int user_dst, uint64 dst, uint off, uint n)
+{
+  uint tot, m;
+  struct buf *bp;
+
+  if(off > ip->size || off + n < off)
+    80003fbc:	457c                	lw	a5,76(a0)
+    80003fbe:	0ed7e963          	bltu	a5,a3,800040b0 <readi+0xf4>
+{
+    80003fc2:	7159                	addi	sp,sp,-112
+    80003fc4:	f486                	sd	ra,104(sp)
+    80003fc6:	f0a2                	sd	s0,96(sp)
+    80003fc8:	eca6                	sd	s1,88(sp)
+    80003fca:	e8ca                	sd	s2,80(sp)
+    80003fcc:	e4ce                	sd	s3,72(sp)
+    80003fce:	e0d2                	sd	s4,64(sp)
+    80003fd0:	fc56                	sd	s5,56(sp)
+    80003fd2:	f85a                	sd	s6,48(sp)
+    80003fd4:	f45e                	sd	s7,40(sp)
+    80003fd6:	f062                	sd	s8,32(sp)
+    80003fd8:	ec66                	sd	s9,24(sp)
+    80003fda:	e86a                	sd	s10,16(sp)
+    80003fdc:	e46e                	sd	s11,8(sp)
+    80003fde:	1880                	addi	s0,sp,112
+    80003fe0:	8baa                	mv	s7,a0
+    80003fe2:	8c2e                	mv	s8,a1
+    80003fe4:	8ab2                	mv	s5,a2
+    80003fe6:	84b6                	mv	s1,a3
+    80003fe8:	8b3a                	mv	s6,a4
+  if(off > ip->size || off + n < off)
+    80003fea:	9f35                	addw	a4,a4,a3
+    return 0;
+    80003fec:	4501                	li	a0,0
+  if(off > ip->size || off + n < off)
+    80003fee:	0ad76063          	bltu	a4,a3,8000408e <readi+0xd2>
+  if(off + n > ip->size)
+    80003ff2:	00e7f463          	bgeu	a5,a4,80003ffa <readi+0x3e>
+    n = ip->size - off;
+    80003ff6:	40d78b3b          	subw	s6,a5,a3
+
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+    80003ffa:	0a0b0963          	beqz	s6,800040ac <readi+0xf0>
+    80003ffe:	4981                	li	s3,0
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+    m = min(n - tot, BSIZE - off%BSIZE);
+    80004000:	40000d13          	li	s10,1024
+    if(either_copyout(user_dst, dst, bp->data + (off % BSIZE), m) == -1) {
+    80004004:	5cfd                	li	s9,-1
+    80004006:	a82d                	j	80004040 <readi+0x84>
+    80004008:	020a1d93          	slli	s11,s4,0x20
+    8000400c:	020ddd93          	srli	s11,s11,0x20
+    80004010:	05890613          	addi	a2,s2,88
+    80004014:	86ee                	mv	a3,s11
+    80004016:	963a                	add	a2,a2,a4
+    80004018:	85d6                	mv	a1,s5
+    8000401a:	8562                	mv	a0,s8
+    8000401c:	fffff097          	auipc	ra,0xfffff
+    80004020:	958080e7          	jalr	-1704(ra) # 80002974 <either_copyout>
+    80004024:	05950d63          	beq	a0,s9,8000407e <readi+0xc2>
+      brelse(bp);
+      tot = -1;
+      break;
+    }
+    brelse(bp);
+    80004028:	854a                	mv	a0,s2
+    8000402a:	fffff097          	auipc	ra,0xfffff
+    8000402e:	60c080e7          	jalr	1548(ra) # 80003636 <brelse>
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+    80004032:	013a09bb          	addw	s3,s4,s3
+    80004036:	009a04bb          	addw	s1,s4,s1
+    8000403a:	9aee                	add	s5,s5,s11
+    8000403c:	0569f763          	bgeu	s3,s6,8000408a <readi+0xce>
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+    80004040:	000ba903          	lw	s2,0(s7)
+    80004044:	00a4d59b          	srliw	a1,s1,0xa
+    80004048:	855e                	mv	a0,s7
+    8000404a:	00000097          	auipc	ra,0x0
+    8000404e:	8ac080e7          	jalr	-1876(ra) # 800038f6 <bmap>
+    80004052:	0005059b          	sext.w	a1,a0
+    80004056:	854a                	mv	a0,s2
+    80004058:	fffff097          	auipc	ra,0xfffff
+    8000405c:	4ae080e7          	jalr	1198(ra) # 80003506 <bread>
+    80004060:	892a                	mv	s2,a0
+    m = min(n - tot, BSIZE - off%BSIZE);
+    80004062:	3ff4f713          	andi	a4,s1,1023
+    80004066:	40ed07bb          	subw	a5,s10,a4
+    8000406a:	413b06bb          	subw	a3,s6,s3
+    8000406e:	8a3e                	mv	s4,a5
+    80004070:	2781                	sext.w	a5,a5
+    80004072:	0006861b          	sext.w	a2,a3
+    80004076:	f8f679e3          	bgeu	a2,a5,80004008 <readi+0x4c>
+    8000407a:	8a36                	mv	s4,a3
+    8000407c:	b771                	j	80004008 <readi+0x4c>
+      brelse(bp);
+    8000407e:	854a                	mv	a0,s2
+    80004080:	fffff097          	auipc	ra,0xfffff
+    80004084:	5b6080e7          	jalr	1462(ra) # 80003636 <brelse>
+      tot = -1;
+    80004088:	59fd                	li	s3,-1
+  }
+  return tot;
+    8000408a:	0009851b          	sext.w	a0,s3
+}
+    8000408e:	70a6                	ld	ra,104(sp)
+    80004090:	7406                	ld	s0,96(sp)
+    80004092:	64e6                	ld	s1,88(sp)
+    80004094:	6946                	ld	s2,80(sp)
+    80004096:	69a6                	ld	s3,72(sp)
+    80004098:	6a06                	ld	s4,64(sp)
+    8000409a:	7ae2                	ld	s5,56(sp)
+    8000409c:	7b42                	ld	s6,48(sp)
+    8000409e:	7ba2                	ld	s7,40(sp)
+    800040a0:	7c02                	ld	s8,32(sp)
+    800040a2:	6ce2                	ld	s9,24(sp)
+    800040a4:	6d42                	ld	s10,16(sp)
+    800040a6:	6da2                	ld	s11,8(sp)
+    800040a8:	6165                	addi	sp,sp,112
+    800040aa:	8082                	ret
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+    800040ac:	89da                	mv	s3,s6
+    800040ae:	bff1                	j	8000408a <readi+0xce>
+    return 0;
+    800040b0:	4501                	li	a0,0
+}
+    800040b2:	8082                	ret
+
+00000000800040b4 <writei>:
+writei(struct inode *ip, int user_src, uint64 src, uint off, uint n)
+{
+  uint tot, m;
+  struct buf *bp;
+
+  if(off > ip->size || off + n < off)
+    800040b4:	457c                	lw	a5,76(a0)
+    800040b6:	10d7e863          	bltu	a5,a3,800041c6 <writei+0x112>
+{
+    800040ba:	7159                	addi	sp,sp,-112
+    800040bc:	f486                	sd	ra,104(sp)
+    800040be:	f0a2                	sd	s0,96(sp)
+    800040c0:	eca6                	sd	s1,88(sp)
+    800040c2:	e8ca                	sd	s2,80(sp)
+    800040c4:	e4ce                	sd	s3,72(sp)
+    800040c6:	e0d2                	sd	s4,64(sp)
+    800040c8:	fc56                	sd	s5,56(sp)
+    800040ca:	f85a                	sd	s6,48(sp)
+    800040cc:	f45e                	sd	s7,40(sp)
+    800040ce:	f062                	sd	s8,32(sp)
+    800040d0:	ec66                	sd	s9,24(sp)
+    800040d2:	e86a                	sd	s10,16(sp)
+    800040d4:	e46e                	sd	s11,8(sp)
+    800040d6:	1880                	addi	s0,sp,112
+    800040d8:	8b2a                	mv	s6,a0
+    800040da:	8c2e                	mv	s8,a1
+    800040dc:	8ab2                	mv	s5,a2
+    800040de:	8936                	mv	s2,a3
+    800040e0:	8bba                	mv	s7,a4
+  if(off > ip->size || off + n < off)
+    800040e2:	00e687bb          	addw	a5,a3,a4
+    800040e6:	0ed7e263          	bltu	a5,a3,800041ca <writei+0x116>
+    return -1;
+  if(off + n > MAXFILE*BSIZE)
+    800040ea:	00043737          	lui	a4,0x43
+    800040ee:	0ef76063          	bltu	a4,a5,800041ce <writei+0x11a>
+    return -1;
+
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+    800040f2:	0c0b8863          	beqz	s7,800041c2 <writei+0x10e>
+    800040f6:	4a01                	li	s4,0
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+    m = min(n - tot, BSIZE - off%BSIZE);
+    800040f8:	40000d13          	li	s10,1024
+    if(either_copyin(bp->data + (off % BSIZE), user_src, src, m) == -1) {
+    800040fc:	5cfd                	li	s9,-1
+    800040fe:	a091                	j	80004142 <writei+0x8e>
+    80004100:	02099d93          	slli	s11,s3,0x20
+    80004104:	020ddd93          	srli	s11,s11,0x20
+    80004108:	05848513          	addi	a0,s1,88
+    8000410c:	86ee                	mv	a3,s11
+    8000410e:	8656                	mv	a2,s5
+    80004110:	85e2                	mv	a1,s8
+    80004112:	953a                	add	a0,a0,a4
+    80004114:	fffff097          	auipc	ra,0xfffff
+    80004118:	8b6080e7          	jalr	-1866(ra) # 800029ca <either_copyin>
+    8000411c:	07950263          	beq	a0,s9,80004180 <writei+0xcc>
+      brelse(bp);
+      break;
+    }
+    log_write(bp);
+    80004120:	8526                	mv	a0,s1
+    80004122:	00000097          	auipc	ra,0x0
+    80004126:	798080e7          	jalr	1944(ra) # 800048ba <log_write>
+    brelse(bp);
+    8000412a:	8526                	mv	a0,s1
+    8000412c:	fffff097          	auipc	ra,0xfffff
+    80004130:	50a080e7          	jalr	1290(ra) # 80003636 <brelse>
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+    80004134:	01498a3b          	addw	s4,s3,s4
+    80004138:	0129893b          	addw	s2,s3,s2
+    8000413c:	9aee                	add	s5,s5,s11
+    8000413e:	057a7663          	bgeu	s4,s7,8000418a <writei+0xd6>
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+    80004142:	000b2483          	lw	s1,0(s6)
+    80004146:	00a9559b          	srliw	a1,s2,0xa
+    8000414a:	855a                	mv	a0,s6
+    8000414c:	fffff097          	auipc	ra,0xfffff
+    80004150:	7aa080e7          	jalr	1962(ra) # 800038f6 <bmap>
+    80004154:	0005059b          	sext.w	a1,a0
+    80004158:	8526                	mv	a0,s1
+    8000415a:	fffff097          	auipc	ra,0xfffff
+    8000415e:	3ac080e7          	jalr	940(ra) # 80003506 <bread>
+    80004162:	84aa                	mv	s1,a0
+    m = min(n - tot, BSIZE - off%BSIZE);
+    80004164:	3ff97713          	andi	a4,s2,1023
+    80004168:	40ed07bb          	subw	a5,s10,a4
+    8000416c:	414b86bb          	subw	a3,s7,s4
+    80004170:	89be                	mv	s3,a5
+    80004172:	2781                	sext.w	a5,a5
+    80004174:	0006861b          	sext.w	a2,a3
+    80004178:	f8f674e3          	bgeu	a2,a5,80004100 <writei+0x4c>
+    8000417c:	89b6                	mv	s3,a3
+    8000417e:	b749                	j	80004100 <writei+0x4c>
+      brelse(bp);
+    80004180:	8526                	mv	a0,s1
+    80004182:	fffff097          	auipc	ra,0xfffff
+    80004186:	4b4080e7          	jalr	1204(ra) # 80003636 <brelse>
+  }
+
+  if(off > ip->size)
+    8000418a:	04cb2783          	lw	a5,76(s6)
+    8000418e:	0127f463          	bgeu	a5,s2,80004196 <writei+0xe2>
+    ip->size = off;
+    80004192:	052b2623          	sw	s2,76(s6)
+
+  // write the i-node back to disk even if the size didn't change
+  // because the loop above might have called bmap() and added a new
+  // block to ip->addrs[].
+  iupdate(ip);
+    80004196:	855a                	mv	a0,s6
+    80004198:	00000097          	auipc	ra,0x0
+    8000419c:	aa4080e7          	jalr	-1372(ra) # 80003c3c <iupdate>
+
+  return tot;
+    800041a0:	000a051b          	sext.w	a0,s4
+}
+    800041a4:	70a6                	ld	ra,104(sp)
+    800041a6:	7406                	ld	s0,96(sp)
+    800041a8:	64e6                	ld	s1,88(sp)
+    800041aa:	6946                	ld	s2,80(sp)
+    800041ac:	69a6                	ld	s3,72(sp)
+    800041ae:	6a06                	ld	s4,64(sp)
+    800041b0:	7ae2                	ld	s5,56(sp)
+    800041b2:	7b42                	ld	s6,48(sp)
+    800041b4:	7ba2                	ld	s7,40(sp)
+    800041b6:	7c02                	ld	s8,32(sp)
+    800041b8:	6ce2                	ld	s9,24(sp)
+    800041ba:	6d42                	ld	s10,16(sp)
+    800041bc:	6da2                	ld	s11,8(sp)
+    800041be:	6165                	addi	sp,sp,112
+    800041c0:	8082                	ret
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+    800041c2:	8a5e                	mv	s4,s7
+    800041c4:	bfc9                	j	80004196 <writei+0xe2>
+    return -1;
+    800041c6:	557d                	li	a0,-1
+}
+    800041c8:	8082                	ret
+    return -1;
+    800041ca:	557d                	li	a0,-1
+    800041cc:	bfe1                	j	800041a4 <writei+0xf0>
+    return -1;
+    800041ce:	557d                	li	a0,-1
+    800041d0:	bfd1                	j	800041a4 <writei+0xf0>
+
+00000000800041d2 <namecmp>:
+
+// Directories
+
+int
+namecmp(const char *s, const char *t)
+{
+    800041d2:	1141                	addi	sp,sp,-16
+    800041d4:	e406                	sd	ra,8(sp)
+    800041d6:	e022                	sd	s0,0(sp)
+    800041d8:	0800                	addi	s0,sp,16
+  return strncmp(s, t, DIRSIZ);
+    800041da:	4639                	li	a2,14
+    800041dc:	ffffd097          	auipc	ra,0xffffd
+    800041e0:	bc0080e7          	jalr	-1088(ra) # 80000d9c <strncmp>
+}
+    800041e4:	60a2                	ld	ra,8(sp)
+    800041e6:	6402                	ld	s0,0(sp)
+    800041e8:	0141                	addi	sp,sp,16
+    800041ea:	8082                	ret
+
+00000000800041ec <dirlookup>:
+
+// Look for a directory entry in a directory.
+// If found, set *poff to byte offset of entry.
+struct inode*
+dirlookup(struct inode *dp, char *name, uint *poff)
+{
+    800041ec:	7139                	addi	sp,sp,-64
+    800041ee:	fc06                	sd	ra,56(sp)
+    800041f0:	f822                	sd	s0,48(sp)
+    800041f2:	f426                	sd	s1,40(sp)
+    800041f4:	f04a                	sd	s2,32(sp)
+    800041f6:	ec4e                	sd	s3,24(sp)
+    800041f8:	e852                	sd	s4,16(sp)
+    800041fa:	0080                	addi	s0,sp,64
+  uint off, inum;
+  struct dirent de;
+
+  if(dp->type != T_DIR)
+    800041fc:	04451703          	lh	a4,68(a0)
+    80004200:	4785                	li	a5,1
+    80004202:	00f71a63          	bne	a4,a5,80004216 <dirlookup+0x2a>
+    80004206:	892a                	mv	s2,a0
+    80004208:	89ae                	mv	s3,a1
+    8000420a:	8a32                	mv	s4,a2
+    panic("dirlookup not DIR");
+
+  for(off = 0; off < dp->size; off += sizeof(de)){
+    8000420c:	457c                	lw	a5,76(a0)
+    8000420e:	4481                	li	s1,0
+      inum = de.inum;
+      return iget(dp->dev, inum);
+    }
+  }
+
+  return 0;
+    80004210:	4501                	li	a0,0
+  for(off = 0; off < dp->size; off += sizeof(de)){
+    80004212:	e79d                	bnez	a5,80004240 <dirlookup+0x54>
+    80004214:	a8a5                	j	8000428c <dirlookup+0xa0>
+    panic("dirlookup not DIR");
+    80004216:	00004517          	auipc	a0,0x4
+    8000421a:	44250513          	addi	a0,a0,1090 # 80008658 <syscalls+0x1d0>
+    8000421e:	ffffc097          	auipc	ra,0xffffc
+    80004222:	31c080e7          	jalr	796(ra) # 8000053a <panic>
+      panic("dirlookup read");
+    80004226:	00004517          	auipc	a0,0x4
+    8000422a:	44a50513          	addi	a0,a0,1098 # 80008670 <syscalls+0x1e8>
+    8000422e:	ffffc097          	auipc	ra,0xffffc
+    80004232:	30c080e7          	jalr	780(ra) # 8000053a <panic>
+  for(off = 0; off < dp->size; off += sizeof(de)){
+    80004236:	24c1                	addiw	s1,s1,16
+    80004238:	04c92783          	lw	a5,76(s2)
+    8000423c:	04f4f763          	bgeu	s1,a5,8000428a <dirlookup+0x9e>
+    if(readi(dp, 0, (uint64)&de, off, sizeof(de)) != sizeof(de))
+    80004240:	4741                	li	a4,16
+    80004242:	86a6                	mv	a3,s1
+    80004244:	fc040613          	addi	a2,s0,-64
+    80004248:	4581                	li	a1,0
+    8000424a:	854a                	mv	a0,s2
+    8000424c:	00000097          	auipc	ra,0x0
+    80004250:	d70080e7          	jalr	-656(ra) # 80003fbc <readi>
+    80004254:	47c1                	li	a5,16
+    80004256:	fcf518e3          	bne	a0,a5,80004226 <dirlookup+0x3a>
+    if(de.inum == 0)
+    8000425a:	fc045783          	lhu	a5,-64(s0)
+    8000425e:	dfe1                	beqz	a5,80004236 <dirlookup+0x4a>
+    if(namecmp(name, de.name) == 0){
+    80004260:	fc240593          	addi	a1,s0,-62
+    80004264:	854e                	mv	a0,s3
+    80004266:	00000097          	auipc	ra,0x0
+    8000426a:	f6c080e7          	jalr	-148(ra) # 800041d2 <namecmp>
+    8000426e:	f561                	bnez	a0,80004236 <dirlookup+0x4a>
+      if(poff)
+    80004270:	000a0463          	beqz	s4,80004278 <dirlookup+0x8c>
+        *poff = off;
+    80004274:	009a2023          	sw	s1,0(s4)
+      return iget(dp->dev, inum);
+    80004278:	fc045583          	lhu	a1,-64(s0)
+    8000427c:	00092503          	lw	a0,0(s2)
+    80004280:	fffff097          	auipc	ra,0xfffff
+    80004284:	752080e7          	jalr	1874(ra) # 800039d2 <iget>
+    80004288:	a011                	j	8000428c <dirlookup+0xa0>
+  return 0;
+    8000428a:	4501                	li	a0,0
+}
+    8000428c:	70e2                	ld	ra,56(sp)
+    8000428e:	7442                	ld	s0,48(sp)
+    80004290:	74a2                	ld	s1,40(sp)
+    80004292:	7902                	ld	s2,32(sp)
+    80004294:	69e2                	ld	s3,24(sp)
+    80004296:	6a42                	ld	s4,16(sp)
+    80004298:	6121                	addi	sp,sp,64
+    8000429a:	8082                	ret
+
+000000008000429c <namex>:
+// If parent != 0, return the inode for the parent and copy the final
+// path element into name, which must have room for DIRSIZ bytes.
+// Must be called inside a transaction since it calls iput().
+static struct inode*
+namex(char *path, int nameiparent, char *name)
+{
+    8000429c:	711d                	addi	sp,sp,-96
+    8000429e:	ec86                	sd	ra,88(sp)
+    800042a0:	e8a2                	sd	s0,80(sp)
+    800042a2:	e4a6                	sd	s1,72(sp)
+    800042a4:	e0ca                	sd	s2,64(sp)
+    800042a6:	fc4e                	sd	s3,56(sp)
+    800042a8:	f852                	sd	s4,48(sp)
+    800042aa:	f456                	sd	s5,40(sp)
+    800042ac:	f05a                	sd	s6,32(sp)
+    800042ae:	ec5e                	sd	s7,24(sp)
+    800042b0:	e862                	sd	s8,16(sp)
+    800042b2:	e466                	sd	s9,8(sp)
+    800042b4:	e06a                	sd	s10,0(sp)
+    800042b6:	1080                	addi	s0,sp,96
+    800042b8:	84aa                	mv	s1,a0
+    800042ba:	8b2e                	mv	s6,a1
+    800042bc:	8ab2                	mv	s5,a2
+  struct inode *ip, *next;
+
+  if(*path == '/')
+    800042be:	00054703          	lbu	a4,0(a0)
+    800042c2:	02f00793          	li	a5,47
+    800042c6:	02f70363          	beq	a4,a5,800042ec <namex+0x50>
+    ip = iget(ROOTDEV, ROOTINO);
+  else
+    ip = idup(myproc()->cwd);
+    800042ca:	ffffe097          	auipc	ra,0xffffe
+    800042ce:	aac080e7          	jalr	-1364(ra) # 80001d76 <myproc>
+    800042d2:	1d053503          	ld	a0,464(a0)
+    800042d6:	00000097          	auipc	ra,0x0
+    800042da:	9f4080e7          	jalr	-1548(ra) # 80003cca <idup>
+    800042de:	8a2a                	mv	s4,a0
+  while(*path == '/')
+    800042e0:	02f00913          	li	s2,47
+  if(len >= DIRSIZ)
+    800042e4:	4cb5                	li	s9,13
+  len = path - s;
+    800042e6:	4b81                	li	s7,0
+
+  while((path = skipelem(path, name)) != 0){
+    ilock(ip);
+    if(ip->type != T_DIR){
+    800042e8:	4c05                	li	s8,1
+    800042ea:	a87d                	j	800043a8 <namex+0x10c>
+    ip = iget(ROOTDEV, ROOTINO);
+    800042ec:	4585                	li	a1,1
+    800042ee:	4505                	li	a0,1
+    800042f0:	fffff097          	auipc	ra,0xfffff
+    800042f4:	6e2080e7          	jalr	1762(ra) # 800039d2 <iget>
+    800042f8:	8a2a                	mv	s4,a0
+    800042fa:	b7dd                	j	800042e0 <namex+0x44>
+      iunlockput(ip);
+    800042fc:	8552                	mv	a0,s4
+    800042fe:	00000097          	auipc	ra,0x0
+    80004302:	c6c080e7          	jalr	-916(ra) # 80003f6a <iunlockput>
+      return 0;
+    80004306:	4a01                	li	s4,0
+  if(nameiparent){
+    iput(ip);
+    return 0;
+  }
+  return ip;
+}
+    80004308:	8552                	mv	a0,s4
+    8000430a:	60e6                	ld	ra,88(sp)
+    8000430c:	6446                	ld	s0,80(sp)
+    8000430e:	64a6                	ld	s1,72(sp)
+    80004310:	6906                	ld	s2,64(sp)
+    80004312:	79e2                	ld	s3,56(sp)
+    80004314:	7a42                	ld	s4,48(sp)
+    80004316:	7aa2                	ld	s5,40(sp)
+    80004318:	7b02                	ld	s6,32(sp)
+    8000431a:	6be2                	ld	s7,24(sp)
+    8000431c:	6c42                	ld	s8,16(sp)
+    8000431e:	6ca2                	ld	s9,8(sp)
+    80004320:	6d02                	ld	s10,0(sp)
+    80004322:	6125                	addi	sp,sp,96
+    80004324:	8082                	ret
+      iunlock(ip);
+    80004326:	8552                	mv	a0,s4
+    80004328:	00000097          	auipc	ra,0x0
+    8000432c:	aa2080e7          	jalr	-1374(ra) # 80003dca <iunlock>
+      return ip;
+    80004330:	bfe1                	j	80004308 <namex+0x6c>
+      iunlockput(ip);
+    80004332:	8552                	mv	a0,s4
+    80004334:	00000097          	auipc	ra,0x0
+    80004338:	c36080e7          	jalr	-970(ra) # 80003f6a <iunlockput>
+      return 0;
+    8000433c:	8a4e                	mv	s4,s3
+    8000433e:	b7e9                	j	80004308 <namex+0x6c>
+  len = path - s;
+    80004340:	40998633          	sub	a2,s3,s1
+    80004344:	00060d1b          	sext.w	s10,a2
+  if(len >= DIRSIZ)
+    80004348:	09acd863          	bge	s9,s10,800043d8 <namex+0x13c>
+    memmove(name, s, DIRSIZ);
+    8000434c:	4639                	li	a2,14
+    8000434e:	85a6                	mv	a1,s1
+    80004350:	8556                	mv	a0,s5
+    80004352:	ffffd097          	auipc	ra,0xffffd
+    80004356:	9d6080e7          	jalr	-1578(ra) # 80000d28 <memmove>
+    8000435a:	84ce                	mv	s1,s3
+  while(*path == '/')
+    8000435c:	0004c783          	lbu	a5,0(s1)
+    80004360:	01279763          	bne	a5,s2,8000436e <namex+0xd2>
+    path++;
+    80004364:	0485                	addi	s1,s1,1
+  while(*path == '/')
+    80004366:	0004c783          	lbu	a5,0(s1)
+    8000436a:	ff278de3          	beq	a5,s2,80004364 <namex+0xc8>
+    ilock(ip);
+    8000436e:	8552                	mv	a0,s4
+    80004370:	00000097          	auipc	ra,0x0
+    80004374:	998080e7          	jalr	-1640(ra) # 80003d08 <ilock>
+    if(ip->type != T_DIR){
+    80004378:	044a1783          	lh	a5,68(s4)
+    8000437c:	f98790e3          	bne	a5,s8,800042fc <namex+0x60>
+    if(nameiparent && *path == '\0'){
+    80004380:	000b0563          	beqz	s6,8000438a <namex+0xee>
+    80004384:	0004c783          	lbu	a5,0(s1)
+    80004388:	dfd9                	beqz	a5,80004326 <namex+0x8a>
+    if((next = dirlookup(ip, name, 0)) == 0){
+    8000438a:	865e                	mv	a2,s7
+    8000438c:	85d6                	mv	a1,s5
+    8000438e:	8552                	mv	a0,s4
+    80004390:	00000097          	auipc	ra,0x0
+    80004394:	e5c080e7          	jalr	-420(ra) # 800041ec <dirlookup>
+    80004398:	89aa                	mv	s3,a0
+    8000439a:	dd41                	beqz	a0,80004332 <namex+0x96>
+    iunlockput(ip);
+    8000439c:	8552                	mv	a0,s4
+    8000439e:	00000097          	auipc	ra,0x0
+    800043a2:	bcc080e7          	jalr	-1076(ra) # 80003f6a <iunlockput>
+    ip = next;
+    800043a6:	8a4e                	mv	s4,s3
+  while(*path == '/')
+    800043a8:	0004c783          	lbu	a5,0(s1)
+    800043ac:	01279763          	bne	a5,s2,800043ba <namex+0x11e>
+    path++;
+    800043b0:	0485                	addi	s1,s1,1
+  while(*path == '/')
+    800043b2:	0004c783          	lbu	a5,0(s1)
+    800043b6:	ff278de3          	beq	a5,s2,800043b0 <namex+0x114>
+  if(*path == 0)
+    800043ba:	cb9d                	beqz	a5,800043f0 <namex+0x154>
+  while(*path != '/' && *path != 0)
+    800043bc:	0004c783          	lbu	a5,0(s1)
+    800043c0:	89a6                	mv	s3,s1
+  len = path - s;
+    800043c2:	8d5e                	mv	s10,s7
+    800043c4:	865e                	mv	a2,s7
+  while(*path != '/' && *path != 0)
+    800043c6:	01278963          	beq	a5,s2,800043d8 <namex+0x13c>
+    800043ca:	dbbd                	beqz	a5,80004340 <namex+0xa4>
+    path++;
+    800043cc:	0985                	addi	s3,s3,1
+  while(*path != '/' && *path != 0)
+    800043ce:	0009c783          	lbu	a5,0(s3)
+    800043d2:	ff279ce3          	bne	a5,s2,800043ca <namex+0x12e>
+    800043d6:	b7ad                	j	80004340 <namex+0xa4>
+    memmove(name, s, len);
+    800043d8:	2601                	sext.w	a2,a2
+    800043da:	85a6                	mv	a1,s1
+    800043dc:	8556                	mv	a0,s5
+    800043de:	ffffd097          	auipc	ra,0xffffd
+    800043e2:	94a080e7          	jalr	-1718(ra) # 80000d28 <memmove>
+    name[len] = 0;
+    800043e6:	9d56                	add	s10,s10,s5
+    800043e8:	000d0023          	sb	zero,0(s10)
+    800043ec:	84ce                	mv	s1,s3
+    800043ee:	b7bd                	j	8000435c <namex+0xc0>
+  if(nameiparent){
+    800043f0:	f00b0ce3          	beqz	s6,80004308 <namex+0x6c>
+    iput(ip);
+    800043f4:	8552                	mv	a0,s4
+    800043f6:	00000097          	auipc	ra,0x0
+    800043fa:	acc080e7          	jalr	-1332(ra) # 80003ec2 <iput>
+    return 0;
+    800043fe:	4a01                	li	s4,0
+    80004400:	b721                	j	80004308 <namex+0x6c>
+
+0000000080004402 <dirlink>:
+{
+    80004402:	7139                	addi	sp,sp,-64
+    80004404:	fc06                	sd	ra,56(sp)
+    80004406:	f822                	sd	s0,48(sp)
+    80004408:	f426                	sd	s1,40(sp)
+    8000440a:	f04a                	sd	s2,32(sp)
+    8000440c:	ec4e                	sd	s3,24(sp)
+    8000440e:	e852                	sd	s4,16(sp)
+    80004410:	0080                	addi	s0,sp,64
+    80004412:	892a                	mv	s2,a0
+    80004414:	8a2e                	mv	s4,a1
+    80004416:	89b2                	mv	s3,a2
+  if((ip = dirlookup(dp, name, 0)) != 0){
+    80004418:	4601                	li	a2,0
+    8000441a:	00000097          	auipc	ra,0x0
+    8000441e:	dd2080e7          	jalr	-558(ra) # 800041ec <dirlookup>
+    80004422:	e93d                	bnez	a0,80004498 <dirlink+0x96>
+  for(off = 0; off < dp->size; off += sizeof(de)){
+    80004424:	04c92483          	lw	s1,76(s2)
+    80004428:	c49d                	beqz	s1,80004456 <dirlink+0x54>
+    8000442a:	4481                	li	s1,0
+    if(readi(dp, 0, (uint64)&de, off, sizeof(de)) != sizeof(de))
+    8000442c:	4741                	li	a4,16
+    8000442e:	86a6                	mv	a3,s1
+    80004430:	fc040613          	addi	a2,s0,-64
+    80004434:	4581                	li	a1,0
+    80004436:	854a                	mv	a0,s2
+    80004438:	00000097          	auipc	ra,0x0
+    8000443c:	b84080e7          	jalr	-1148(ra) # 80003fbc <readi>
+    80004440:	47c1                	li	a5,16
+    80004442:	06f51163          	bne	a0,a5,800044a4 <dirlink+0xa2>
+    if(de.inum == 0)
+    80004446:	fc045783          	lhu	a5,-64(s0)
+    8000444a:	c791                	beqz	a5,80004456 <dirlink+0x54>
+  for(off = 0; off < dp->size; off += sizeof(de)){
+    8000444c:	24c1                	addiw	s1,s1,16
+    8000444e:	04c92783          	lw	a5,76(s2)
+    80004452:	fcf4ede3          	bltu	s1,a5,8000442c <dirlink+0x2a>
+  strncpy(de.name, name, DIRSIZ);
+    80004456:	4639                	li	a2,14
+    80004458:	85d2                	mv	a1,s4
+    8000445a:	fc240513          	addi	a0,s0,-62
+    8000445e:	ffffd097          	auipc	ra,0xffffd
+    80004462:	97a080e7          	jalr	-1670(ra) # 80000dd8 <strncpy>
+  de.inum = inum;
+    80004466:	fd341023          	sh	s3,-64(s0)
+  if(writei(dp, 0, (uint64)&de, off, sizeof(de)) != sizeof(de))
+    8000446a:	4741                	li	a4,16
+    8000446c:	86a6                	mv	a3,s1
+    8000446e:	fc040613          	addi	a2,s0,-64
+    80004472:	4581                	li	a1,0
+    80004474:	854a                	mv	a0,s2
+    80004476:	00000097          	auipc	ra,0x0
+    8000447a:	c3e080e7          	jalr	-962(ra) # 800040b4 <writei>
+    8000447e:	872a                	mv	a4,a0
+    80004480:	47c1                	li	a5,16
+  return 0;
+    80004482:	4501                	li	a0,0
+  if(writei(dp, 0, (uint64)&de, off, sizeof(de)) != sizeof(de))
+    80004484:	02f71863          	bne	a4,a5,800044b4 <dirlink+0xb2>
+}
+    80004488:	70e2                	ld	ra,56(sp)
+    8000448a:	7442                	ld	s0,48(sp)
+    8000448c:	74a2                	ld	s1,40(sp)
+    8000448e:	7902                	ld	s2,32(sp)
+    80004490:	69e2                	ld	s3,24(sp)
+    80004492:	6a42                	ld	s4,16(sp)
+    80004494:	6121                	addi	sp,sp,64
+    80004496:	8082                	ret
+    iput(ip);
+    80004498:	00000097          	auipc	ra,0x0
+    8000449c:	a2a080e7          	jalr	-1494(ra) # 80003ec2 <iput>
+    return -1;
+    800044a0:	557d                	li	a0,-1
+    800044a2:	b7dd                	j	80004488 <dirlink+0x86>
+      panic("dirlink read");
+    800044a4:	00004517          	auipc	a0,0x4
+    800044a8:	1dc50513          	addi	a0,a0,476 # 80008680 <syscalls+0x1f8>
+    800044ac:	ffffc097          	auipc	ra,0xffffc
+    800044b0:	08e080e7          	jalr	142(ra) # 8000053a <panic>
+    panic("dirlink");
+    800044b4:	00004517          	auipc	a0,0x4
+    800044b8:	2dc50513          	addi	a0,a0,732 # 80008790 <syscalls+0x308>
+    800044bc:	ffffc097          	auipc	ra,0xffffc
+    800044c0:	07e080e7          	jalr	126(ra) # 8000053a <panic>
+
+00000000800044c4 <namei>:
+
+struct inode*
+namei(char *path)
+{
+    800044c4:	1101                	addi	sp,sp,-32
+    800044c6:	ec06                	sd	ra,24(sp)
+    800044c8:	e822                	sd	s0,16(sp)
+    800044ca:	1000                	addi	s0,sp,32
+  char name[DIRSIZ];
+  return namex(path, 0, name);
+    800044cc:	fe040613          	addi	a2,s0,-32
+    800044d0:	4581                	li	a1,0
+    800044d2:	00000097          	auipc	ra,0x0
+    800044d6:	dca080e7          	jalr	-566(ra) # 8000429c <namex>
+}
+    800044da:	60e2                	ld	ra,24(sp)
+    800044dc:	6442                	ld	s0,16(sp)
+    800044de:	6105                	addi	sp,sp,32
+    800044e0:	8082                	ret
+
+00000000800044e2 <nameiparent>:
+
+struct inode*
+nameiparent(char *path, char *name)
+{
+    800044e2:	1141                	addi	sp,sp,-16
+    800044e4:	e406                	sd	ra,8(sp)
+    800044e6:	e022                	sd	s0,0(sp)
+    800044e8:	0800                	addi	s0,sp,16
+    800044ea:	862e                	mv	a2,a1
+  return namex(path, 1, name);
+    800044ec:	4585                	li	a1,1
+    800044ee:	00000097          	auipc	ra,0x0
+    800044f2:	dae080e7          	jalr	-594(ra) # 8000429c <namex>
+}
+    800044f6:	60a2                	ld	ra,8(sp)
+    800044f8:	6402                	ld	s0,0(sp)
+    800044fa:	0141                	addi	sp,sp,16
+    800044fc:	8082                	ret
+
+00000000800044fe <write_head>:
+// Write in-memory log header to disk.
+// This is the true point at which the
+// current transaction commits.
+static void
+write_head(void)
+{
+    800044fe:	1101                	addi	sp,sp,-32
+    80004500:	ec06                	sd	ra,24(sp)
+    80004502:	e822                	sd	s0,16(sp)
+    80004504:	e426                	sd	s1,8(sp)
+    80004506:	e04a                	sd	s2,0(sp)
+    80004508:	1000                	addi	s0,sp,32
+  struct buf *buf = bread(log.dev, log.start);
+    8000450a:	00020917          	auipc	s2,0x20
+    8000450e:	35e90913          	addi	s2,s2,862 # 80024868 <log>
+    80004512:	01892583          	lw	a1,24(s2)
+    80004516:	02892503          	lw	a0,40(s2)
+    8000451a:	fffff097          	auipc	ra,0xfffff
+    8000451e:	fec080e7          	jalr	-20(ra) # 80003506 <bread>
+    80004522:	84aa                	mv	s1,a0
+  struct logheader *hb = (struct logheader *) (buf->data);
+  int i;
+  hb->n = log.lh.n;
+    80004524:	02c92683          	lw	a3,44(s2)
+    80004528:	cd34                	sw	a3,88(a0)
+  for (i = 0; i < log.lh.n; i++) {
+    8000452a:	02d05863          	blez	a3,8000455a <write_head+0x5c>
+    8000452e:	00020797          	auipc	a5,0x20
+    80004532:	36a78793          	addi	a5,a5,874 # 80024898 <log+0x30>
+    80004536:	05c50713          	addi	a4,a0,92
+    8000453a:	36fd                	addiw	a3,a3,-1
+    8000453c:	02069613          	slli	a2,a3,0x20
+    80004540:	01e65693          	srli	a3,a2,0x1e
+    80004544:	00020617          	auipc	a2,0x20
+    80004548:	35860613          	addi	a2,a2,856 # 8002489c <log+0x34>
+    8000454c:	96b2                	add	a3,a3,a2
+    hb->block[i] = log.lh.block[i];
+    8000454e:	4390                	lw	a2,0(a5)
+    80004550:	c310                	sw	a2,0(a4)
+  for (i = 0; i < log.lh.n; i++) {
+    80004552:	0791                	addi	a5,a5,4
+    80004554:	0711                	addi	a4,a4,4 # 43004 <_entry-0x7ffbcffc>
+    80004556:	fed79ce3          	bne	a5,a3,8000454e <write_head+0x50>
+  }
+  bwrite(buf);
+    8000455a:	8526                	mv	a0,s1
+    8000455c:	fffff097          	auipc	ra,0xfffff
+    80004560:	09c080e7          	jalr	156(ra) # 800035f8 <bwrite>
+  brelse(buf);
+    80004564:	8526                	mv	a0,s1
+    80004566:	fffff097          	auipc	ra,0xfffff
+    8000456a:	0d0080e7          	jalr	208(ra) # 80003636 <brelse>
+}
+    8000456e:	60e2                	ld	ra,24(sp)
+    80004570:	6442                	ld	s0,16(sp)
+    80004572:	64a2                	ld	s1,8(sp)
+    80004574:	6902                	ld	s2,0(sp)
+    80004576:	6105                	addi	sp,sp,32
+    80004578:	8082                	ret
+
+000000008000457a <install_trans>:
+  for (tail = 0; tail < log.lh.n; tail++) {
+    8000457a:	00020797          	auipc	a5,0x20
+    8000457e:	31a7a783          	lw	a5,794(a5) # 80024894 <log+0x2c>
+    80004582:	0af05d63          	blez	a5,8000463c <install_trans+0xc2>
+{
+    80004586:	7139                	addi	sp,sp,-64
+    80004588:	fc06                	sd	ra,56(sp)
+    8000458a:	f822                	sd	s0,48(sp)
+    8000458c:	f426                	sd	s1,40(sp)
+    8000458e:	f04a                	sd	s2,32(sp)
+    80004590:	ec4e                	sd	s3,24(sp)
+    80004592:	e852                	sd	s4,16(sp)
+    80004594:	e456                	sd	s5,8(sp)
+    80004596:	e05a                	sd	s6,0(sp)
+    80004598:	0080                	addi	s0,sp,64
+    8000459a:	8b2a                	mv	s6,a0
+    8000459c:	00020a97          	auipc	s5,0x20
+    800045a0:	2fca8a93          	addi	s5,s5,764 # 80024898 <log+0x30>
+  for (tail = 0; tail < log.lh.n; tail++) {
+    800045a4:	4a01                	li	s4,0
+    struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
+    800045a6:	00020997          	auipc	s3,0x20
+    800045aa:	2c298993          	addi	s3,s3,706 # 80024868 <log>
+    800045ae:	a00d                	j	800045d0 <install_trans+0x56>
+    brelse(lbuf);
+    800045b0:	854a                	mv	a0,s2
+    800045b2:	fffff097          	auipc	ra,0xfffff
+    800045b6:	084080e7          	jalr	132(ra) # 80003636 <brelse>
+    brelse(dbuf);
+    800045ba:	8526                	mv	a0,s1
+    800045bc:	fffff097          	auipc	ra,0xfffff
+    800045c0:	07a080e7          	jalr	122(ra) # 80003636 <brelse>
+  for (tail = 0; tail < log.lh.n; tail++) {
+    800045c4:	2a05                	addiw	s4,s4,1
+    800045c6:	0a91                	addi	s5,s5,4
+    800045c8:	02c9a783          	lw	a5,44(s3)
+    800045cc:	04fa5e63          	bge	s4,a5,80004628 <install_trans+0xae>
+    struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
+    800045d0:	0189a583          	lw	a1,24(s3)
+    800045d4:	014585bb          	addw	a1,a1,s4
+    800045d8:	2585                	addiw	a1,a1,1
+    800045da:	0289a503          	lw	a0,40(s3)
+    800045de:	fffff097          	auipc	ra,0xfffff
+    800045e2:	f28080e7          	jalr	-216(ra) # 80003506 <bread>
+    800045e6:	892a                	mv	s2,a0
+    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
+    800045e8:	000aa583          	lw	a1,0(s5)
+    800045ec:	0289a503          	lw	a0,40(s3)
+    800045f0:	fffff097          	auipc	ra,0xfffff
+    800045f4:	f16080e7          	jalr	-234(ra) # 80003506 <bread>
+    800045f8:	84aa                	mv	s1,a0
+    memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
+    800045fa:	40000613          	li	a2,1024
+    800045fe:	05890593          	addi	a1,s2,88
+    80004602:	05850513          	addi	a0,a0,88
+    80004606:	ffffc097          	auipc	ra,0xffffc
+    8000460a:	722080e7          	jalr	1826(ra) # 80000d28 <memmove>
+    bwrite(dbuf);  // write dst to disk
+    8000460e:	8526                	mv	a0,s1
+    80004610:	fffff097          	auipc	ra,0xfffff
+    80004614:	fe8080e7          	jalr	-24(ra) # 800035f8 <bwrite>
+    if(recovering == 0)
+    80004618:	f80b1ce3          	bnez	s6,800045b0 <install_trans+0x36>
+      bunpin(dbuf);
+    8000461c:	8526                	mv	a0,s1
+    8000461e:	fffff097          	auipc	ra,0xfffff
+    80004622:	0f2080e7          	jalr	242(ra) # 80003710 <bunpin>
+    80004626:	b769                	j	800045b0 <install_trans+0x36>
+}
+    80004628:	70e2                	ld	ra,56(sp)
+    8000462a:	7442                	ld	s0,48(sp)
+    8000462c:	74a2                	ld	s1,40(sp)
+    8000462e:	7902                	ld	s2,32(sp)
+    80004630:	69e2                	ld	s3,24(sp)
+    80004632:	6a42                	ld	s4,16(sp)
+    80004634:	6aa2                	ld	s5,8(sp)
+    80004636:	6b02                	ld	s6,0(sp)
+    80004638:	6121                	addi	sp,sp,64
+    8000463a:	8082                	ret
+    8000463c:	8082                	ret
+
+000000008000463e <initlog>:
+{
+    8000463e:	7179                	addi	sp,sp,-48
+    80004640:	f406                	sd	ra,40(sp)
+    80004642:	f022                	sd	s0,32(sp)
+    80004644:	ec26                	sd	s1,24(sp)
+    80004646:	e84a                	sd	s2,16(sp)
+    80004648:	e44e                	sd	s3,8(sp)
+    8000464a:	1800                	addi	s0,sp,48
+    8000464c:	892a                	mv	s2,a0
+    8000464e:	89ae                	mv	s3,a1
+  initlock(&log.lock, "log");
+    80004650:	00020497          	auipc	s1,0x20
+    80004654:	21848493          	addi	s1,s1,536 # 80024868 <log>
+    80004658:	00004597          	auipc	a1,0x4
+    8000465c:	03858593          	addi	a1,a1,56 # 80008690 <syscalls+0x208>
+    80004660:	8526                	mv	a0,s1
+    80004662:	ffffc097          	auipc	ra,0xffffc
+    80004666:	4de080e7          	jalr	1246(ra) # 80000b40 <initlock>
+  log.start = sb->logstart;
+    8000466a:	0149a583          	lw	a1,20(s3)
+    8000466e:	cc8c                	sw	a1,24(s1)
+  log.size = sb->nlog;
+    80004670:	0109a783          	lw	a5,16(s3)
+    80004674:	ccdc                	sw	a5,28(s1)
+  log.dev = dev;
+    80004676:	0324a423          	sw	s2,40(s1)
+  struct buf *buf = bread(log.dev, log.start);
+    8000467a:	854a                	mv	a0,s2
+    8000467c:	fffff097          	auipc	ra,0xfffff
+    80004680:	e8a080e7          	jalr	-374(ra) # 80003506 <bread>
+  log.lh.n = lh->n;
+    80004684:	4d34                	lw	a3,88(a0)
+    80004686:	d4d4                	sw	a3,44(s1)
+  for (i = 0; i < log.lh.n; i++) {
+    80004688:	02d05663          	blez	a3,800046b4 <initlog+0x76>
+    8000468c:	05c50793          	addi	a5,a0,92
+    80004690:	00020717          	auipc	a4,0x20
+    80004694:	20870713          	addi	a4,a4,520 # 80024898 <log+0x30>
+    80004698:	36fd                	addiw	a3,a3,-1
+    8000469a:	02069613          	slli	a2,a3,0x20
+    8000469e:	01e65693          	srli	a3,a2,0x1e
+    800046a2:	06050613          	addi	a2,a0,96
+    800046a6:	96b2                	add	a3,a3,a2
+    log.lh.block[i] = lh->block[i];
+    800046a8:	4390                	lw	a2,0(a5)
+    800046aa:	c310                	sw	a2,0(a4)
+  for (i = 0; i < log.lh.n; i++) {
+    800046ac:	0791                	addi	a5,a5,4
+    800046ae:	0711                	addi	a4,a4,4
+    800046b0:	fed79ce3          	bne	a5,a3,800046a8 <initlog+0x6a>
+  brelse(buf);
+    800046b4:	fffff097          	auipc	ra,0xfffff
+    800046b8:	f82080e7          	jalr	-126(ra) # 80003636 <brelse>
+
+static void
+recover_from_log(void)
+{
+  read_head();
+  install_trans(1); // if committed, copy from log to disk
+    800046bc:	4505                	li	a0,1
+    800046be:	00000097          	auipc	ra,0x0
+    800046c2:	ebc080e7          	jalr	-324(ra) # 8000457a <install_trans>
+  log.lh.n = 0;
+    800046c6:	00020797          	auipc	a5,0x20
+    800046ca:	1c07a723          	sw	zero,462(a5) # 80024894 <log+0x2c>
+  write_head(); // clear the log
+    800046ce:	00000097          	auipc	ra,0x0
+    800046d2:	e30080e7          	jalr	-464(ra) # 800044fe <write_head>
+}
+    800046d6:	70a2                	ld	ra,40(sp)
+    800046d8:	7402                	ld	s0,32(sp)
+    800046da:	64e2                	ld	s1,24(sp)
+    800046dc:	6942                	ld	s2,16(sp)
+    800046de:	69a2                	ld	s3,8(sp)
+    800046e0:	6145                	addi	sp,sp,48
+    800046e2:	8082                	ret
+
+00000000800046e4 <begin_op>:
+}
+
+// called at the start of each FS system call.
+void
+begin_op(void)
+{
+    800046e4:	1101                	addi	sp,sp,-32
+    800046e6:	ec06                	sd	ra,24(sp)
+    800046e8:	e822                	sd	s0,16(sp)
+    800046ea:	e426                	sd	s1,8(sp)
+    800046ec:	e04a                	sd	s2,0(sp)
+    800046ee:	1000                	addi	s0,sp,32
+  acquire(&log.lock);
+    800046f0:	00020517          	auipc	a0,0x20
+    800046f4:	17850513          	addi	a0,a0,376 # 80024868 <log>
+    800046f8:	ffffc097          	auipc	ra,0xffffc
+    800046fc:	4d8080e7          	jalr	1240(ra) # 80000bd0 <acquire>
+  while(1){
+    if(log.committing){
+    80004700:	00020497          	auipc	s1,0x20
+    80004704:	16848493          	addi	s1,s1,360 # 80024868 <log>
+      sleep(&log, &log.lock);
+    } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
+    80004708:	4979                	li	s2,30
+    8000470a:	a039                	j	80004718 <begin_op+0x34>
+      sleep(&log, &log.lock);
+    8000470c:	85a6                	mv	a1,s1
+    8000470e:	8526                	mv	a0,s1
+    80004710:	ffffe097          	auipc	ra,0xffffe
+    80004714:	e9c080e7          	jalr	-356(ra) # 800025ac <sleep>
+    if(log.committing){
+    80004718:	50dc                	lw	a5,36(s1)
+    8000471a:	fbed                	bnez	a5,8000470c <begin_op+0x28>
+    } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
+    8000471c:	5098                	lw	a4,32(s1)
+    8000471e:	2705                	addiw	a4,a4,1
+    80004720:	0007069b          	sext.w	a3,a4
+    80004724:	0027179b          	slliw	a5,a4,0x2
+    80004728:	9fb9                	addw	a5,a5,a4
+    8000472a:	0017979b          	slliw	a5,a5,0x1
+    8000472e:	54d8                	lw	a4,44(s1)
+    80004730:	9fb9                	addw	a5,a5,a4
+    80004732:	00f95963          	bge	s2,a5,80004744 <begin_op+0x60>
+      // this op might exhaust log space; wait for commit.
+      sleep(&log, &log.lock);
+    80004736:	85a6                	mv	a1,s1
+    80004738:	8526                	mv	a0,s1
+    8000473a:	ffffe097          	auipc	ra,0xffffe
+    8000473e:	e72080e7          	jalr	-398(ra) # 800025ac <sleep>
+    80004742:	bfd9                	j	80004718 <begin_op+0x34>
+    } else {
+      log.outstanding += 1;
+    80004744:	00020517          	auipc	a0,0x20
+    80004748:	12450513          	addi	a0,a0,292 # 80024868 <log>
+    8000474c:	d114                	sw	a3,32(a0)
+      release(&log.lock);
+    8000474e:	ffffc097          	auipc	ra,0xffffc
+    80004752:	536080e7          	jalr	1334(ra) # 80000c84 <release>
+      break;
+    }
+  }
+}
+    80004756:	60e2                	ld	ra,24(sp)
+    80004758:	6442                	ld	s0,16(sp)
+    8000475a:	64a2                	ld	s1,8(sp)
+    8000475c:	6902                	ld	s2,0(sp)
+    8000475e:	6105                	addi	sp,sp,32
+    80004760:	8082                	ret
+
+0000000080004762 <end_op>:
+
+// called at the end of each FS system call.
+// commits if this was the last outstanding operation.
+void
+end_op(void)
+{
+    80004762:	7139                	addi	sp,sp,-64
+    80004764:	fc06                	sd	ra,56(sp)
+    80004766:	f822                	sd	s0,48(sp)
+    80004768:	f426                	sd	s1,40(sp)
+    8000476a:	f04a                	sd	s2,32(sp)
+    8000476c:	ec4e                	sd	s3,24(sp)
+    8000476e:	e852                	sd	s4,16(sp)
+    80004770:	e456                	sd	s5,8(sp)
+    80004772:	0080                	addi	s0,sp,64
+  int do_commit = 0;
+
+  acquire(&log.lock);
+    80004774:	00020497          	auipc	s1,0x20
+    80004778:	0f448493          	addi	s1,s1,244 # 80024868 <log>
+    8000477c:	8526                	mv	a0,s1
+    8000477e:	ffffc097          	auipc	ra,0xffffc
+    80004782:	452080e7          	jalr	1106(ra) # 80000bd0 <acquire>
+  log.outstanding -= 1;
+    80004786:	509c                	lw	a5,32(s1)
+    80004788:	37fd                	addiw	a5,a5,-1
+    8000478a:	0007891b          	sext.w	s2,a5
+    8000478e:	d09c                	sw	a5,32(s1)
+  if(log.committing)
+    80004790:	50dc                	lw	a5,36(s1)
+    80004792:	e7b9                	bnez	a5,800047e0 <end_op+0x7e>
+    panic("log.committing");
+  if(log.outstanding == 0){
+    80004794:	04091e63          	bnez	s2,800047f0 <end_op+0x8e>
+    do_commit = 1;
+    log.committing = 1;
+    80004798:	00020497          	auipc	s1,0x20
+    8000479c:	0d048493          	addi	s1,s1,208 # 80024868 <log>
+    800047a0:	4785                	li	a5,1
+    800047a2:	d0dc                	sw	a5,36(s1)
+    // begin_op() may be waiting for log space,
+    // and decrementing log.outstanding has decreased
+    // the amount of reserved space.
+    wakeup(&log);
+  }
+  release(&log.lock);
+    800047a4:	8526                	mv	a0,s1
+    800047a6:	ffffc097          	auipc	ra,0xffffc
+    800047aa:	4de080e7          	jalr	1246(ra) # 80000c84 <release>
+}
+
+static void
+commit()
+{
+  if (log.lh.n > 0) {
+    800047ae:	54dc                	lw	a5,44(s1)
+    800047b0:	06f04763          	bgtz	a5,8000481e <end_op+0xbc>
+    acquire(&log.lock);
+    800047b4:	00020497          	auipc	s1,0x20
+    800047b8:	0b448493          	addi	s1,s1,180 # 80024868 <log>
+    800047bc:	8526                	mv	a0,s1
+    800047be:	ffffc097          	auipc	ra,0xffffc
+    800047c2:	412080e7          	jalr	1042(ra) # 80000bd0 <acquire>
+    log.committing = 0;
+    800047c6:	0204a223          	sw	zero,36(s1)
+    wakeup(&log);
+    800047ca:	8526                	mv	a0,s1
+    800047cc:	ffffe097          	auipc	ra,0xffffe
+    800047d0:	f6c080e7          	jalr	-148(ra) # 80002738 <wakeup>
+    release(&log.lock);
+    800047d4:	8526                	mv	a0,s1
+    800047d6:	ffffc097          	auipc	ra,0xffffc
+    800047da:	4ae080e7          	jalr	1198(ra) # 80000c84 <release>
+}
+    800047de:	a03d                	j	8000480c <end_op+0xaa>
+    panic("log.committing");
+    800047e0:	00004517          	auipc	a0,0x4
+    800047e4:	eb850513          	addi	a0,a0,-328 # 80008698 <syscalls+0x210>
+    800047e8:	ffffc097          	auipc	ra,0xffffc
+    800047ec:	d52080e7          	jalr	-686(ra) # 8000053a <panic>
+    wakeup(&log);
+    800047f0:	00020497          	auipc	s1,0x20
+    800047f4:	07848493          	addi	s1,s1,120 # 80024868 <log>
+    800047f8:	8526                	mv	a0,s1
+    800047fa:	ffffe097          	auipc	ra,0xffffe
+    800047fe:	f3e080e7          	jalr	-194(ra) # 80002738 <wakeup>
+  release(&log.lock);
+    80004802:	8526                	mv	a0,s1
+    80004804:	ffffc097          	auipc	ra,0xffffc
+    80004808:	480080e7          	jalr	1152(ra) # 80000c84 <release>
+}
+    8000480c:	70e2                	ld	ra,56(sp)
+    8000480e:	7442                	ld	s0,48(sp)
+    80004810:	74a2                	ld	s1,40(sp)
+    80004812:	7902                	ld	s2,32(sp)
+    80004814:	69e2                	ld	s3,24(sp)
+    80004816:	6a42                	ld	s4,16(sp)
+    80004818:	6aa2                	ld	s5,8(sp)
+    8000481a:	6121                	addi	sp,sp,64
+    8000481c:	8082                	ret
+  for (tail = 0; tail < log.lh.n; tail++) {
+    8000481e:	00020a97          	auipc	s5,0x20
+    80004822:	07aa8a93          	addi	s5,s5,122 # 80024898 <log+0x30>
+    struct buf *to = bread(log.dev, log.start+tail+1); // log block
+    80004826:	00020a17          	auipc	s4,0x20
+    8000482a:	042a0a13          	addi	s4,s4,66 # 80024868 <log>
+    8000482e:	018a2583          	lw	a1,24(s4)
+    80004832:	012585bb          	addw	a1,a1,s2
+    80004836:	2585                	addiw	a1,a1,1
+    80004838:	028a2503          	lw	a0,40(s4)
+    8000483c:	fffff097          	auipc	ra,0xfffff
+    80004840:	cca080e7          	jalr	-822(ra) # 80003506 <bread>
+    80004844:	84aa                	mv	s1,a0
+    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
+    80004846:	000aa583          	lw	a1,0(s5)
+    8000484a:	028a2503          	lw	a0,40(s4)
+    8000484e:	fffff097          	auipc	ra,0xfffff
+    80004852:	cb8080e7          	jalr	-840(ra) # 80003506 <bread>
+    80004856:	89aa                	mv	s3,a0
+    memmove(to->data, from->data, BSIZE);
+    80004858:	40000613          	li	a2,1024
+    8000485c:	05850593          	addi	a1,a0,88
+    80004860:	05848513          	addi	a0,s1,88
+    80004864:	ffffc097          	auipc	ra,0xffffc
+    80004868:	4c4080e7          	jalr	1220(ra) # 80000d28 <memmove>
+    bwrite(to);  // write the log
+    8000486c:	8526                	mv	a0,s1
+    8000486e:	fffff097          	auipc	ra,0xfffff
+    80004872:	d8a080e7          	jalr	-630(ra) # 800035f8 <bwrite>
+    brelse(from);
+    80004876:	854e                	mv	a0,s3
+    80004878:	fffff097          	auipc	ra,0xfffff
+    8000487c:	dbe080e7          	jalr	-578(ra) # 80003636 <brelse>
+    brelse(to);
+    80004880:	8526                	mv	a0,s1
+    80004882:	fffff097          	auipc	ra,0xfffff
+    80004886:	db4080e7          	jalr	-588(ra) # 80003636 <brelse>
+  for (tail = 0; tail < log.lh.n; tail++) {
+    8000488a:	2905                	addiw	s2,s2,1
+    8000488c:	0a91                	addi	s5,s5,4
+    8000488e:	02ca2783          	lw	a5,44(s4)
+    80004892:	f8f94ee3          	blt	s2,a5,8000482e <end_op+0xcc>
+    write_log();     // Write modified blocks from cache to log
+    write_head();    // Write header to disk -- the real commit
+    80004896:	00000097          	auipc	ra,0x0
+    8000489a:	c68080e7          	jalr	-920(ra) # 800044fe <write_head>
+    install_trans(0); // Now install writes to home locations
+    8000489e:	4501                	li	a0,0
+    800048a0:	00000097          	auipc	ra,0x0
+    800048a4:	cda080e7          	jalr	-806(ra) # 8000457a <install_trans>
+    log.lh.n = 0;
+    800048a8:	00020797          	auipc	a5,0x20
+    800048ac:	fe07a623          	sw	zero,-20(a5) # 80024894 <log+0x2c>
+    write_head();    // Erase the transaction from the log
+    800048b0:	00000097          	auipc	ra,0x0
+    800048b4:	c4e080e7          	jalr	-946(ra) # 800044fe <write_head>
+    800048b8:	bdf5                	j	800047b4 <end_op+0x52>
+
+00000000800048ba <log_write>:
+//   modify bp->data[]
+//   log_write(bp)
+//   brelse(bp)
+void
+log_write(struct buf *b)
+{
+    800048ba:	1101                	addi	sp,sp,-32
+    800048bc:	ec06                	sd	ra,24(sp)
+    800048be:	e822                	sd	s0,16(sp)
+    800048c0:	e426                	sd	s1,8(sp)
+    800048c2:	e04a                	sd	s2,0(sp)
+    800048c4:	1000                	addi	s0,sp,32
+    800048c6:	84aa                	mv	s1,a0
+  int i;
+
+  acquire(&log.lock);
+    800048c8:	00020917          	auipc	s2,0x20
+    800048cc:	fa090913          	addi	s2,s2,-96 # 80024868 <log>
+    800048d0:	854a                	mv	a0,s2
+    800048d2:	ffffc097          	auipc	ra,0xffffc
+    800048d6:	2fe080e7          	jalr	766(ra) # 80000bd0 <acquire>
+  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
+    800048da:	02c92603          	lw	a2,44(s2)
+    800048de:	47f5                	li	a5,29
+    800048e0:	06c7c563          	blt	a5,a2,8000494a <log_write+0x90>
+    800048e4:	00020797          	auipc	a5,0x20
+    800048e8:	fa07a783          	lw	a5,-96(a5) # 80024884 <log+0x1c>
+    800048ec:	37fd                	addiw	a5,a5,-1
+    800048ee:	04f65e63          	bge	a2,a5,8000494a <log_write+0x90>
+    panic("too big a transaction");
+  if (log.outstanding < 1)
+    800048f2:	00020797          	auipc	a5,0x20
+    800048f6:	f967a783          	lw	a5,-106(a5) # 80024888 <log+0x20>
+    800048fa:	06f05063          	blez	a5,8000495a <log_write+0xa0>
+    panic("log_write outside of trans");
+
+  for (i = 0; i < log.lh.n; i++) {
+    800048fe:	4781                	li	a5,0
+    80004900:	06c05563          	blez	a2,8000496a <log_write+0xb0>
+    if (log.lh.block[i] == b->blockno)   // log absorption
+    80004904:	44cc                	lw	a1,12(s1)
+    80004906:	00020717          	auipc	a4,0x20
+    8000490a:	f9270713          	addi	a4,a4,-110 # 80024898 <log+0x30>
+  for (i = 0; i < log.lh.n; i++) {
+    8000490e:	4781                	li	a5,0
+    if (log.lh.block[i] == b->blockno)   // log absorption
+    80004910:	4314                	lw	a3,0(a4)
+    80004912:	04b68c63          	beq	a3,a1,8000496a <log_write+0xb0>
+  for (i = 0; i < log.lh.n; i++) {
+    80004916:	2785                	addiw	a5,a5,1
+    80004918:	0711                	addi	a4,a4,4
+    8000491a:	fef61be3          	bne	a2,a5,80004910 <log_write+0x56>
+      break;
+  }
+  log.lh.block[i] = b->blockno;
+    8000491e:	0621                	addi	a2,a2,8
+    80004920:	060a                	slli	a2,a2,0x2
+    80004922:	00020797          	auipc	a5,0x20
+    80004926:	f4678793          	addi	a5,a5,-186 # 80024868 <log>
+    8000492a:	97b2                	add	a5,a5,a2
+    8000492c:	44d8                	lw	a4,12(s1)
+    8000492e:	cb98                	sw	a4,16(a5)
+  if (i == log.lh.n) {  // Add new block to log?
+    bpin(b);
+    80004930:	8526                	mv	a0,s1
+    80004932:	fffff097          	auipc	ra,0xfffff
+    80004936:	da2080e7          	jalr	-606(ra) # 800036d4 <bpin>
+    log.lh.n++;
+    8000493a:	00020717          	auipc	a4,0x20
+    8000493e:	f2e70713          	addi	a4,a4,-210 # 80024868 <log>
+    80004942:	575c                	lw	a5,44(a4)
+    80004944:	2785                	addiw	a5,a5,1
+    80004946:	d75c                	sw	a5,44(a4)
+    80004948:	a82d                	j	80004982 <log_write+0xc8>
+    panic("too big a transaction");
+    8000494a:	00004517          	auipc	a0,0x4
+    8000494e:	d5e50513          	addi	a0,a0,-674 # 800086a8 <syscalls+0x220>
+    80004952:	ffffc097          	auipc	ra,0xffffc
+    80004956:	be8080e7          	jalr	-1048(ra) # 8000053a <panic>
+    panic("log_write outside of trans");
+    8000495a:	00004517          	auipc	a0,0x4
+    8000495e:	d6650513          	addi	a0,a0,-666 # 800086c0 <syscalls+0x238>
+    80004962:	ffffc097          	auipc	ra,0xffffc
+    80004966:	bd8080e7          	jalr	-1064(ra) # 8000053a <panic>
+  log.lh.block[i] = b->blockno;
+    8000496a:	00878693          	addi	a3,a5,8
+    8000496e:	068a                	slli	a3,a3,0x2
+    80004970:	00020717          	auipc	a4,0x20
+    80004974:	ef870713          	addi	a4,a4,-264 # 80024868 <log>
+    80004978:	9736                	add	a4,a4,a3
+    8000497a:	44d4                	lw	a3,12(s1)
+    8000497c:	cb14                	sw	a3,16(a4)
+  if (i == log.lh.n) {  // Add new block to log?
+    8000497e:	faf609e3          	beq	a2,a5,80004930 <log_write+0x76>
+  }
+  release(&log.lock);
+    80004982:	00020517          	auipc	a0,0x20
+    80004986:	ee650513          	addi	a0,a0,-282 # 80024868 <log>
+    8000498a:	ffffc097          	auipc	ra,0xffffc
+    8000498e:	2fa080e7          	jalr	762(ra) # 80000c84 <release>
+}
+    80004992:	60e2                	ld	ra,24(sp)
+    80004994:	6442                	ld	s0,16(sp)
+    80004996:	64a2                	ld	s1,8(sp)
+    80004998:	6902                	ld	s2,0(sp)
+    8000499a:	6105                	addi	sp,sp,32
+    8000499c:	8082                	ret
+
+000000008000499e <initsleeplock>:
+#include "proc.h"
+#include "sleeplock.h"
+
+void
+initsleeplock(struct sleeplock *lk, char *name)
+{
+    8000499e:	1101                	addi	sp,sp,-32
+    800049a0:	ec06                	sd	ra,24(sp)
+    800049a2:	e822                	sd	s0,16(sp)
+    800049a4:	e426                	sd	s1,8(sp)
+    800049a6:	e04a                	sd	s2,0(sp)
+    800049a8:	1000                	addi	s0,sp,32
+    800049aa:	84aa                	mv	s1,a0
+    800049ac:	892e                	mv	s2,a1
+  initlock(&lk->lk, "sleep lock");
+    800049ae:	00004597          	auipc	a1,0x4
+    800049b2:	d3258593          	addi	a1,a1,-718 # 800086e0 <syscalls+0x258>
+    800049b6:	0521                	addi	a0,a0,8
+    800049b8:	ffffc097          	auipc	ra,0xffffc
+    800049bc:	188080e7          	jalr	392(ra) # 80000b40 <initlock>
+  lk->name = name;
+    800049c0:	0324b023          	sd	s2,32(s1)
+  lk->locked = 0;
+    800049c4:	0004a023          	sw	zero,0(s1)
+  lk->pid = 0;
+    800049c8:	0204a423          	sw	zero,40(s1)
+}
+    800049cc:	60e2                	ld	ra,24(sp)
+    800049ce:	6442                	ld	s0,16(sp)
+    800049d0:	64a2                	ld	s1,8(sp)
+    800049d2:	6902                	ld	s2,0(sp)
+    800049d4:	6105                	addi	sp,sp,32
+    800049d6:	8082                	ret
+
+00000000800049d8 <acquiresleep>:
+
+void
+acquiresleep(struct sleeplock *lk)
+{
+    800049d8:	1101                	addi	sp,sp,-32
+    800049da:	ec06                	sd	ra,24(sp)
+    800049dc:	e822                	sd	s0,16(sp)
+    800049de:	e426                	sd	s1,8(sp)
+    800049e0:	e04a                	sd	s2,0(sp)
+    800049e2:	1000                	addi	s0,sp,32
+    800049e4:	84aa                	mv	s1,a0
+  acquire(&lk->lk);
+    800049e6:	00850913          	addi	s2,a0,8
+    800049ea:	854a                	mv	a0,s2
+    800049ec:	ffffc097          	auipc	ra,0xffffc
+    800049f0:	1e4080e7          	jalr	484(ra) # 80000bd0 <acquire>
+  while (lk->locked) {
+    800049f4:	409c                	lw	a5,0(s1)
+    800049f6:	cb89                	beqz	a5,80004a08 <acquiresleep+0x30>
+    sleep(lk, &lk->lk);
+    800049f8:	85ca                	mv	a1,s2
+    800049fa:	8526                	mv	a0,s1
+    800049fc:	ffffe097          	auipc	ra,0xffffe
+    80004a00:	bb0080e7          	jalr	-1104(ra) # 800025ac <sleep>
+  while (lk->locked) {
+    80004a04:	409c                	lw	a5,0(s1)
+    80004a06:	fbed                	bnez	a5,800049f8 <acquiresleep+0x20>
+  }
+  lk->locked = 1;
+    80004a08:	4785                	li	a5,1
+    80004a0a:	c09c                	sw	a5,0(s1)
+  lk->pid = myproc()->pid;
+    80004a0c:	ffffd097          	auipc	ra,0xffffd
+    80004a10:	36a080e7          	jalr	874(ra) # 80001d76 <myproc>
+    80004a14:	591c                	lw	a5,48(a0)
+    80004a16:	d49c                	sw	a5,40(s1)
+  release(&lk->lk);
+    80004a18:	854a                	mv	a0,s2
+    80004a1a:	ffffc097          	auipc	ra,0xffffc
+    80004a1e:	26a080e7          	jalr	618(ra) # 80000c84 <release>
+}
+    80004a22:	60e2                	ld	ra,24(sp)
+    80004a24:	6442                	ld	s0,16(sp)
+    80004a26:	64a2                	ld	s1,8(sp)
+    80004a28:	6902                	ld	s2,0(sp)
+    80004a2a:	6105                	addi	sp,sp,32
+    80004a2c:	8082                	ret
+
+0000000080004a2e <releasesleep>:
+
+void
+releasesleep(struct sleeplock *lk)
+{
+    80004a2e:	1101                	addi	sp,sp,-32
+    80004a30:	ec06                	sd	ra,24(sp)
+    80004a32:	e822                	sd	s0,16(sp)
+    80004a34:	e426                	sd	s1,8(sp)
+    80004a36:	e04a                	sd	s2,0(sp)
+    80004a38:	1000                	addi	s0,sp,32
+    80004a3a:	84aa                	mv	s1,a0
+  acquire(&lk->lk);
+    80004a3c:	00850913          	addi	s2,a0,8
+    80004a40:	854a                	mv	a0,s2
+    80004a42:	ffffc097          	auipc	ra,0xffffc
+    80004a46:	18e080e7          	jalr	398(ra) # 80000bd0 <acquire>
+  lk->locked = 0;
+    80004a4a:	0004a023          	sw	zero,0(s1)
+  lk->pid = 0;
+    80004a4e:	0204a423          	sw	zero,40(s1)
+  wakeup(lk);
+    80004a52:	8526                	mv	a0,s1
+    80004a54:	ffffe097          	auipc	ra,0xffffe
+    80004a58:	ce4080e7          	jalr	-796(ra) # 80002738 <wakeup>
+  release(&lk->lk);
+    80004a5c:	854a                	mv	a0,s2
+    80004a5e:	ffffc097          	auipc	ra,0xffffc
+    80004a62:	226080e7          	jalr	550(ra) # 80000c84 <release>
+}
+    80004a66:	60e2                	ld	ra,24(sp)
+    80004a68:	6442                	ld	s0,16(sp)
+    80004a6a:	64a2                	ld	s1,8(sp)
+    80004a6c:	6902                	ld	s2,0(sp)
+    80004a6e:	6105                	addi	sp,sp,32
+    80004a70:	8082                	ret
+
+0000000080004a72 <holdingsleep>:
+
+int
+holdingsleep(struct sleeplock *lk)
+{
+    80004a72:	7179                	addi	sp,sp,-48
+    80004a74:	f406                	sd	ra,40(sp)
+    80004a76:	f022                	sd	s0,32(sp)
+    80004a78:	ec26                	sd	s1,24(sp)
+    80004a7a:	e84a                	sd	s2,16(sp)
+    80004a7c:	e44e                	sd	s3,8(sp)
+    80004a7e:	1800                	addi	s0,sp,48
+    80004a80:	84aa                	mv	s1,a0
+  int r;
+  
+  acquire(&lk->lk);
+    80004a82:	00850913          	addi	s2,a0,8
+    80004a86:	854a                	mv	a0,s2
+    80004a88:	ffffc097          	auipc	ra,0xffffc
+    80004a8c:	148080e7          	jalr	328(ra) # 80000bd0 <acquire>
+  r = lk->locked && (lk->pid == myproc()->pid);
+    80004a90:	409c                	lw	a5,0(s1)
+    80004a92:	ef99                	bnez	a5,80004ab0 <holdingsleep+0x3e>
+    80004a94:	4481                	li	s1,0
+  release(&lk->lk);
+    80004a96:	854a                	mv	a0,s2
+    80004a98:	ffffc097          	auipc	ra,0xffffc
+    80004a9c:	1ec080e7          	jalr	492(ra) # 80000c84 <release>
+  return r;
+}
+    80004aa0:	8526                	mv	a0,s1
+    80004aa2:	70a2                	ld	ra,40(sp)
+    80004aa4:	7402                	ld	s0,32(sp)
+    80004aa6:	64e2                	ld	s1,24(sp)
+    80004aa8:	6942                	ld	s2,16(sp)
+    80004aaa:	69a2                	ld	s3,8(sp)
+    80004aac:	6145                	addi	sp,sp,48
+    80004aae:	8082                	ret
+  r = lk->locked && (lk->pid == myproc()->pid);
+    80004ab0:	0284a983          	lw	s3,40(s1)
+    80004ab4:	ffffd097          	auipc	ra,0xffffd
+    80004ab8:	2c2080e7          	jalr	706(ra) # 80001d76 <myproc>
+    80004abc:	5904                	lw	s1,48(a0)
+    80004abe:	413484b3          	sub	s1,s1,s3
+    80004ac2:	0014b493          	seqz	s1,s1
+    80004ac6:	bfc1                	j	80004a96 <holdingsleep+0x24>
+
+0000000080004ac8 <fileinit>:
+  struct file file[NFILE];
+} ftable;
+
+void
+fileinit(void)
+{
+    80004ac8:	1141                	addi	sp,sp,-16
+    80004aca:	e406                	sd	ra,8(sp)
+    80004acc:	e022                	sd	s0,0(sp)
+    80004ace:	0800                	addi	s0,sp,16
+  initlock(&ftable.lock, "ftable");
+    80004ad0:	00004597          	auipc	a1,0x4
+    80004ad4:	c2058593          	addi	a1,a1,-992 # 800086f0 <syscalls+0x268>
+    80004ad8:	00020517          	auipc	a0,0x20
+    80004adc:	ed850513          	addi	a0,a0,-296 # 800249b0 <ftable>
+    80004ae0:	ffffc097          	auipc	ra,0xffffc
+    80004ae4:	060080e7          	jalr	96(ra) # 80000b40 <initlock>
+}
+    80004ae8:	60a2                	ld	ra,8(sp)
+    80004aea:	6402                	ld	s0,0(sp)
+    80004aec:	0141                	addi	sp,sp,16
+    80004aee:	8082                	ret
+
+0000000080004af0 <filealloc>:
+
+// Allocate a file structure.
+struct file*
+filealloc(void)
+{
+    80004af0:	1101                	addi	sp,sp,-32
+    80004af2:	ec06                	sd	ra,24(sp)
+    80004af4:	e822                	sd	s0,16(sp)
+    80004af6:	e426                	sd	s1,8(sp)
+    80004af8:	1000                	addi	s0,sp,32
+  struct file *f;
+
+  acquire(&ftable.lock);
+    80004afa:	00020517          	auipc	a0,0x20
+    80004afe:	eb650513          	addi	a0,a0,-330 # 800249b0 <ftable>
+    80004b02:	ffffc097          	auipc	ra,0xffffc
+    80004b06:	0ce080e7          	jalr	206(ra) # 80000bd0 <acquire>
+  for(f = ftable.file; f < ftable.file + NFILE; f++){
+    80004b0a:	00020497          	auipc	s1,0x20
+    80004b0e:	ebe48493          	addi	s1,s1,-322 # 800249c8 <ftable+0x18>
+    80004b12:	00021717          	auipc	a4,0x21
+    80004b16:	e5670713          	addi	a4,a4,-426 # 80025968 <ftable+0xfb8>
+    if(f->ref == 0){
+    80004b1a:	40dc                	lw	a5,4(s1)
+    80004b1c:	cf99                	beqz	a5,80004b3a <filealloc+0x4a>
+  for(f = ftable.file; f < ftable.file + NFILE; f++){
+    80004b1e:	02848493          	addi	s1,s1,40
+    80004b22:	fee49ce3          	bne	s1,a4,80004b1a <filealloc+0x2a>
+      f->ref = 1;
+      release(&ftable.lock);
+      return f;
+    }
+  }
+  release(&ftable.lock);
+    80004b26:	00020517          	auipc	a0,0x20
+    80004b2a:	e8a50513          	addi	a0,a0,-374 # 800249b0 <ftable>
+    80004b2e:	ffffc097          	auipc	ra,0xffffc
+    80004b32:	156080e7          	jalr	342(ra) # 80000c84 <release>
+  return 0;
+    80004b36:	4481                	li	s1,0
+    80004b38:	a819                	j	80004b4e <filealloc+0x5e>
+      f->ref = 1;
+    80004b3a:	4785                	li	a5,1
+    80004b3c:	c0dc                	sw	a5,4(s1)
+      release(&ftable.lock);
+    80004b3e:	00020517          	auipc	a0,0x20
+    80004b42:	e7250513          	addi	a0,a0,-398 # 800249b0 <ftable>
+    80004b46:	ffffc097          	auipc	ra,0xffffc
+    80004b4a:	13e080e7          	jalr	318(ra) # 80000c84 <release>
+}
+    80004b4e:	8526                	mv	a0,s1
+    80004b50:	60e2                	ld	ra,24(sp)
+    80004b52:	6442                	ld	s0,16(sp)
+    80004b54:	64a2                	ld	s1,8(sp)
+    80004b56:	6105                	addi	sp,sp,32
+    80004b58:	8082                	ret
+
+0000000080004b5a <filedup>:
+
+// Increment ref count for file f.
+struct file*
+filedup(struct file *f)
+{
+    80004b5a:	1101                	addi	sp,sp,-32
+    80004b5c:	ec06                	sd	ra,24(sp)
+    80004b5e:	e822                	sd	s0,16(sp)
+    80004b60:	e426                	sd	s1,8(sp)
+    80004b62:	1000                	addi	s0,sp,32
+    80004b64:	84aa                	mv	s1,a0
+  acquire(&ftable.lock);
+    80004b66:	00020517          	auipc	a0,0x20
+    80004b6a:	e4a50513          	addi	a0,a0,-438 # 800249b0 <ftable>
+    80004b6e:	ffffc097          	auipc	ra,0xffffc
+    80004b72:	062080e7          	jalr	98(ra) # 80000bd0 <acquire>
+  if(f->ref < 1)
+    80004b76:	40dc                	lw	a5,4(s1)
+    80004b78:	02f05263          	blez	a5,80004b9c <filedup+0x42>
+    panic("filedup");
+  f->ref++;
+    80004b7c:	2785                	addiw	a5,a5,1
+    80004b7e:	c0dc                	sw	a5,4(s1)
+  release(&ftable.lock);
+    80004b80:	00020517          	auipc	a0,0x20
+    80004b84:	e3050513          	addi	a0,a0,-464 # 800249b0 <ftable>
+    80004b88:	ffffc097          	auipc	ra,0xffffc
+    80004b8c:	0fc080e7          	jalr	252(ra) # 80000c84 <release>
+  return f;
+}
+    80004b90:	8526                	mv	a0,s1
+    80004b92:	60e2                	ld	ra,24(sp)
+    80004b94:	6442                	ld	s0,16(sp)
+    80004b96:	64a2                	ld	s1,8(sp)
+    80004b98:	6105                	addi	sp,sp,32
+    80004b9a:	8082                	ret
+    panic("filedup");
+    80004b9c:	00004517          	auipc	a0,0x4
+    80004ba0:	b5c50513          	addi	a0,a0,-1188 # 800086f8 <syscalls+0x270>
+    80004ba4:	ffffc097          	auipc	ra,0xffffc
+    80004ba8:	996080e7          	jalr	-1642(ra) # 8000053a <panic>
+
+0000000080004bac <fileclose>:
+
+// Close file f.  (Decrement ref count, close when reaches 0.)
+void
+fileclose(struct file *f)
+{
+    80004bac:	7139                	addi	sp,sp,-64
+    80004bae:	fc06                	sd	ra,56(sp)
+    80004bb0:	f822                	sd	s0,48(sp)
+    80004bb2:	f426                	sd	s1,40(sp)
+    80004bb4:	f04a                	sd	s2,32(sp)
+    80004bb6:	ec4e                	sd	s3,24(sp)
+    80004bb8:	e852                	sd	s4,16(sp)
+    80004bba:	e456                	sd	s5,8(sp)
+    80004bbc:	0080                	addi	s0,sp,64
+    80004bbe:	84aa                	mv	s1,a0
+  struct file ff;
+
+  acquire(&ftable.lock);
+    80004bc0:	00020517          	auipc	a0,0x20
+    80004bc4:	df050513          	addi	a0,a0,-528 # 800249b0 <ftable>
+    80004bc8:	ffffc097          	auipc	ra,0xffffc
+    80004bcc:	008080e7          	jalr	8(ra) # 80000bd0 <acquire>
+  if(f->ref < 1)
+    80004bd0:	40dc                	lw	a5,4(s1)
+    80004bd2:	06f05163          	blez	a5,80004c34 <fileclose+0x88>
+    panic("fileclose");
+  if(--f->ref > 0){
+    80004bd6:	37fd                	addiw	a5,a5,-1
+    80004bd8:	0007871b          	sext.w	a4,a5
+    80004bdc:	c0dc                	sw	a5,4(s1)
+    80004bde:	06e04363          	bgtz	a4,80004c44 <fileclose+0x98>
+    release(&ftable.lock);
+    return;
+  }
+  ff = *f;
+    80004be2:	0004a903          	lw	s2,0(s1)
+    80004be6:	0094ca83          	lbu	s5,9(s1)
+    80004bea:	0104ba03          	ld	s4,16(s1)
+    80004bee:	0184b983          	ld	s3,24(s1)
+  f->ref = 0;
+    80004bf2:	0004a223          	sw	zero,4(s1)
+  f->type = FD_NONE;
+    80004bf6:	0004a023          	sw	zero,0(s1)
+  release(&ftable.lock);
+    80004bfa:	00020517          	auipc	a0,0x20
+    80004bfe:	db650513          	addi	a0,a0,-586 # 800249b0 <ftable>
+    80004c02:	ffffc097          	auipc	ra,0xffffc
+    80004c06:	082080e7          	jalr	130(ra) # 80000c84 <release>
+
+  if(ff.type == FD_PIPE){
+    80004c0a:	4785                	li	a5,1
+    80004c0c:	04f90d63          	beq	s2,a5,80004c66 <fileclose+0xba>
+    pipeclose(ff.pipe, ff.writable);
+  } else if(ff.type == FD_INODE || ff.type == FD_DEVICE){
+    80004c10:	3979                	addiw	s2,s2,-2
+    80004c12:	4785                	li	a5,1
+    80004c14:	0527e063          	bltu	a5,s2,80004c54 <fileclose+0xa8>
+    begin_op();
+    80004c18:	00000097          	auipc	ra,0x0
+    80004c1c:	acc080e7          	jalr	-1332(ra) # 800046e4 <begin_op>
+    iput(ff.ip);
+    80004c20:	854e                	mv	a0,s3
+    80004c22:	fffff097          	auipc	ra,0xfffff
+    80004c26:	2a0080e7          	jalr	672(ra) # 80003ec2 <iput>
+    end_op();
+    80004c2a:	00000097          	auipc	ra,0x0
+    80004c2e:	b38080e7          	jalr	-1224(ra) # 80004762 <end_op>
+    80004c32:	a00d                	j	80004c54 <fileclose+0xa8>
+    panic("fileclose");
+    80004c34:	00004517          	auipc	a0,0x4
+    80004c38:	acc50513          	addi	a0,a0,-1332 # 80008700 <syscalls+0x278>
+    80004c3c:	ffffc097          	auipc	ra,0xffffc
+    80004c40:	8fe080e7          	jalr	-1794(ra) # 8000053a <panic>
+    release(&ftable.lock);
+    80004c44:	00020517          	auipc	a0,0x20
+    80004c48:	d6c50513          	addi	a0,a0,-660 # 800249b0 <ftable>
+    80004c4c:	ffffc097          	auipc	ra,0xffffc
+    80004c50:	038080e7          	jalr	56(ra) # 80000c84 <release>
+  }
+}
+    80004c54:	70e2                	ld	ra,56(sp)
+    80004c56:	7442                	ld	s0,48(sp)
+    80004c58:	74a2                	ld	s1,40(sp)
+    80004c5a:	7902                	ld	s2,32(sp)
+    80004c5c:	69e2                	ld	s3,24(sp)
+    80004c5e:	6a42                	ld	s4,16(sp)
+    80004c60:	6aa2                	ld	s5,8(sp)
+    80004c62:	6121                	addi	sp,sp,64
+    80004c64:	8082                	ret
+    pipeclose(ff.pipe, ff.writable);
+    80004c66:	85d6                	mv	a1,s5
+    80004c68:	8552                	mv	a0,s4
+    80004c6a:	00000097          	auipc	ra,0x0
+    80004c6e:	34c080e7          	jalr	844(ra) # 80004fb6 <pipeclose>
+    80004c72:	b7cd                	j	80004c54 <fileclose+0xa8>
+
+0000000080004c74 <filestat>:
+
+// Get metadata about file f.
+// addr is a user virtual address, pointing to a struct stat.
+int
+filestat(struct file *f, uint64 addr)
+{
+    80004c74:	715d                	addi	sp,sp,-80
+    80004c76:	e486                	sd	ra,72(sp)
+    80004c78:	e0a2                	sd	s0,64(sp)
+    80004c7a:	fc26                	sd	s1,56(sp)
+    80004c7c:	f84a                	sd	s2,48(sp)
+    80004c7e:	f44e                	sd	s3,40(sp)
+    80004c80:	0880                	addi	s0,sp,80
+    80004c82:	84aa                	mv	s1,a0
+    80004c84:	89ae                	mv	s3,a1
+  struct proc *p = myproc();
+    80004c86:	ffffd097          	auipc	ra,0xffffd
+    80004c8a:	0f0080e7          	jalr	240(ra) # 80001d76 <myproc>
+  struct stat st;
+  
+  if(f->type == FD_INODE || f->type == FD_DEVICE){
+    80004c8e:	409c                	lw	a5,0(s1)
+    80004c90:	37f9                	addiw	a5,a5,-2
+    80004c92:	4705                	li	a4,1
+    80004c94:	04f76763          	bltu	a4,a5,80004ce2 <filestat+0x6e>
+    80004c98:	892a                	mv	s2,a0
+    ilock(f->ip);
+    80004c9a:	6c88                	ld	a0,24(s1)
+    80004c9c:	fffff097          	auipc	ra,0xfffff
+    80004ca0:	06c080e7          	jalr	108(ra) # 80003d08 <ilock>
+    stati(f->ip, &st);
+    80004ca4:	fb840593          	addi	a1,s0,-72
+    80004ca8:	6c88                	ld	a0,24(s1)
+    80004caa:	fffff097          	auipc	ra,0xfffff
+    80004cae:	2e8080e7          	jalr	744(ra) # 80003f92 <stati>
+    iunlock(f->ip);
+    80004cb2:	6c88                	ld	a0,24(s1)
+    80004cb4:	fffff097          	auipc	ra,0xfffff
+    80004cb8:	116080e7          	jalr	278(ra) # 80003dca <iunlock>
+    if(copyout(p->pagetable, addr, (char *)&st, sizeof(st)) < 0)
+    80004cbc:	46e1                	li	a3,24
+    80004cbe:	fb840613          	addi	a2,s0,-72
+    80004cc2:	85ce                	mv	a1,s3
+    80004cc4:	05093503          	ld	a0,80(s2)
+    80004cc8:	ffffd097          	auipc	ra,0xffffd
+    80004ccc:	99a080e7          	jalr	-1638(ra) # 80001662 <copyout>
+    80004cd0:	41f5551b          	sraiw	a0,a0,0x1f
+      return -1;
+    return 0;
+  }
+  return -1;
+}
+    80004cd4:	60a6                	ld	ra,72(sp)
+    80004cd6:	6406                	ld	s0,64(sp)
+    80004cd8:	74e2                	ld	s1,56(sp)
+    80004cda:	7942                	ld	s2,48(sp)
+    80004cdc:	79a2                	ld	s3,40(sp)
+    80004cde:	6161                	addi	sp,sp,80
+    80004ce0:	8082                	ret
+  return -1;
+    80004ce2:	557d                	li	a0,-1
+    80004ce4:	bfc5                	j	80004cd4 <filestat+0x60>
+
+0000000080004ce6 <fileread>:
+
+// Read from file f.
+// addr is a user virtual address.
+int
+fileread(struct file *f, uint64 addr, int n)
+{
+    80004ce6:	7179                	addi	sp,sp,-48
+    80004ce8:	f406                	sd	ra,40(sp)
+    80004cea:	f022                	sd	s0,32(sp)
+    80004cec:	ec26                	sd	s1,24(sp)
+    80004cee:	e84a                	sd	s2,16(sp)
+    80004cf0:	e44e                	sd	s3,8(sp)
+    80004cf2:	1800                	addi	s0,sp,48
+  int r = 0;
+
+  if(f->readable == 0)
+    80004cf4:	00854783          	lbu	a5,8(a0)
+    80004cf8:	c3d5                	beqz	a5,80004d9c <fileread+0xb6>
+    80004cfa:	84aa                	mv	s1,a0
+    80004cfc:	89ae                	mv	s3,a1
+    80004cfe:	8932                	mv	s2,a2
+    return -1;
+
+  if(f->type == FD_PIPE){
+    80004d00:	411c                	lw	a5,0(a0)
+    80004d02:	4705                	li	a4,1
+    80004d04:	04e78963          	beq	a5,a4,80004d56 <fileread+0x70>
+    r = piperead(f->pipe, addr, n);
+  } else if(f->type == FD_DEVICE){
+    80004d08:	470d                	li	a4,3
+    80004d0a:	04e78d63          	beq	a5,a4,80004d64 <fileread+0x7e>
+    if(f->major < 0 || f->major >= NDEV || !devsw[f->major].read)
+      return -1;
+    r = devsw[f->major].read(1, addr, n);
+  } else if(f->type == FD_INODE){
+    80004d0e:	4709                	li	a4,2
+    80004d10:	06e79e63          	bne	a5,a4,80004d8c <fileread+0xa6>
+    ilock(f->ip);
+    80004d14:	6d08                	ld	a0,24(a0)
+    80004d16:	fffff097          	auipc	ra,0xfffff
+    80004d1a:	ff2080e7          	jalr	-14(ra) # 80003d08 <ilock>
+    if((r = readi(f->ip, 1, addr, f->off, n)) > 0)
+    80004d1e:	874a                	mv	a4,s2
+    80004d20:	5094                	lw	a3,32(s1)
+    80004d22:	864e                	mv	a2,s3
+    80004d24:	4585                	li	a1,1
+    80004d26:	6c88                	ld	a0,24(s1)
+    80004d28:	fffff097          	auipc	ra,0xfffff
+    80004d2c:	294080e7          	jalr	660(ra) # 80003fbc <readi>
+    80004d30:	892a                	mv	s2,a0
+    80004d32:	00a05563          	blez	a0,80004d3c <fileread+0x56>
+      f->off += r;
+    80004d36:	509c                	lw	a5,32(s1)
+    80004d38:	9fa9                	addw	a5,a5,a0
+    80004d3a:	d09c                	sw	a5,32(s1)
+    iunlock(f->ip);
+    80004d3c:	6c88                	ld	a0,24(s1)
+    80004d3e:	fffff097          	auipc	ra,0xfffff
+    80004d42:	08c080e7          	jalr	140(ra) # 80003dca <iunlock>
+  } else {
+    panic("fileread");
+  }
+
+  return r;
+}
+    80004d46:	854a                	mv	a0,s2
+    80004d48:	70a2                	ld	ra,40(sp)
+    80004d4a:	7402                	ld	s0,32(sp)
+    80004d4c:	64e2                	ld	s1,24(sp)
+    80004d4e:	6942                	ld	s2,16(sp)
+    80004d50:	69a2                	ld	s3,8(sp)
+    80004d52:	6145                	addi	sp,sp,48
+    80004d54:	8082                	ret
+    r = piperead(f->pipe, addr, n);
+    80004d56:	6908                	ld	a0,16(a0)
+    80004d58:	00000097          	auipc	ra,0x0
+    80004d5c:	3c0080e7          	jalr	960(ra) # 80005118 <piperead>
+    80004d60:	892a                	mv	s2,a0
+    80004d62:	b7d5                	j	80004d46 <fileread+0x60>
+    if(f->major < 0 || f->major >= NDEV || !devsw[f->major].read)
+    80004d64:	02451783          	lh	a5,36(a0)
+    80004d68:	03079693          	slli	a3,a5,0x30
+    80004d6c:	92c1                	srli	a3,a3,0x30
+    80004d6e:	4725                	li	a4,9
+    80004d70:	02d76863          	bltu	a4,a3,80004da0 <fileread+0xba>
+    80004d74:	0792                	slli	a5,a5,0x4
+    80004d76:	00020717          	auipc	a4,0x20
+    80004d7a:	b9a70713          	addi	a4,a4,-1126 # 80024910 <devsw>
+    80004d7e:	97ba                	add	a5,a5,a4
+    80004d80:	639c                	ld	a5,0(a5)
+    80004d82:	c38d                	beqz	a5,80004da4 <fileread+0xbe>
+    r = devsw[f->major].read(1, addr, n);
+    80004d84:	4505                	li	a0,1
+    80004d86:	9782                	jalr	a5
+    80004d88:	892a                	mv	s2,a0
+    80004d8a:	bf75                	j	80004d46 <fileread+0x60>
+    panic("fileread");
+    80004d8c:	00004517          	auipc	a0,0x4
+    80004d90:	98450513          	addi	a0,a0,-1660 # 80008710 <syscalls+0x288>
+    80004d94:	ffffb097          	auipc	ra,0xffffb
+    80004d98:	7a6080e7          	jalr	1958(ra) # 8000053a <panic>
+    return -1;
+    80004d9c:	597d                	li	s2,-1
+    80004d9e:	b765                	j	80004d46 <fileread+0x60>
+      return -1;
+    80004da0:	597d                	li	s2,-1
+    80004da2:	b755                	j	80004d46 <fileread+0x60>
+    80004da4:	597d                	li	s2,-1
+    80004da6:	b745                	j	80004d46 <fileread+0x60>
+
+0000000080004da8 <filewrite>:
+
+// Write to file f.
+// addr is a user virtual address.
+int
+filewrite(struct file *f, uint64 addr, int n)
+{
+    80004da8:	715d                	addi	sp,sp,-80
+    80004daa:	e486                	sd	ra,72(sp)
+    80004dac:	e0a2                	sd	s0,64(sp)
+    80004dae:	fc26                	sd	s1,56(sp)
+    80004db0:	f84a                	sd	s2,48(sp)
+    80004db2:	f44e                	sd	s3,40(sp)
+    80004db4:	f052                	sd	s4,32(sp)
+    80004db6:	ec56                	sd	s5,24(sp)
+    80004db8:	e85a                	sd	s6,16(sp)
+    80004dba:	e45e                	sd	s7,8(sp)
+    80004dbc:	e062                	sd	s8,0(sp)
+    80004dbe:	0880                	addi	s0,sp,80
+  int r, ret = 0;
+
+  if(f->writable == 0)
+    80004dc0:	00954783          	lbu	a5,9(a0)
+    80004dc4:	10078663          	beqz	a5,80004ed0 <filewrite+0x128>
+    80004dc8:	892a                	mv	s2,a0
+    80004dca:	8b2e                	mv	s6,a1
+    80004dcc:	8a32                	mv	s4,a2
+    return -1;
+
+  if(f->type == FD_PIPE){
+    80004dce:	411c                	lw	a5,0(a0)
+    80004dd0:	4705                	li	a4,1
+    80004dd2:	02e78263          	beq	a5,a4,80004df6 <filewrite+0x4e>
+    ret = pipewrite(f->pipe, addr, n);
+  } else if(f->type == FD_DEVICE){
+    80004dd6:	470d                	li	a4,3
+    80004dd8:	02e78663          	beq	a5,a4,80004e04 <filewrite+0x5c>
+    if(f->major < 0 || f->major >= NDEV || !devsw[f->major].write)
+      return -1;
+    ret = devsw[f->major].write(1, addr, n);
+  } else if(f->type == FD_INODE){
+    80004ddc:	4709                	li	a4,2
+    80004dde:	0ee79163          	bne	a5,a4,80004ec0 <filewrite+0x118>
+    // and 2 blocks of slop for non-aligned writes.
+    // this really belongs lower down, since writei()
+    // might be writing a device like the console.
+    int max = ((MAXOPBLOCKS-1-1-2) / 2) * BSIZE;
+    int i = 0;
+    while(i < n){
+    80004de2:	0ac05d63          	blez	a2,80004e9c <filewrite+0xf4>
+    int i = 0;
+    80004de6:	4981                	li	s3,0
+    80004de8:	6b85                	lui	s7,0x1
+    80004dea:	c00b8b93          	addi	s7,s7,-1024 # c00 <_entry-0x7ffff400>
+    80004dee:	6c05                	lui	s8,0x1
+    80004df0:	c00c0c1b          	addiw	s8,s8,-1024 # c00 <_entry-0x7ffff400>
+    80004df4:	a861                	j	80004e8c <filewrite+0xe4>
+    ret = pipewrite(f->pipe, addr, n);
+    80004df6:	6908                	ld	a0,16(a0)
+    80004df8:	00000097          	auipc	ra,0x0
+    80004dfc:	22e080e7          	jalr	558(ra) # 80005026 <pipewrite>
+    80004e00:	8a2a                	mv	s4,a0
+    80004e02:	a045                	j	80004ea2 <filewrite+0xfa>
+    if(f->major < 0 || f->major >= NDEV || !devsw[f->major].write)
+    80004e04:	02451783          	lh	a5,36(a0)
+    80004e08:	03079693          	slli	a3,a5,0x30
+    80004e0c:	92c1                	srli	a3,a3,0x30
+    80004e0e:	4725                	li	a4,9
+    80004e10:	0cd76263          	bltu	a4,a3,80004ed4 <filewrite+0x12c>
+    80004e14:	0792                	slli	a5,a5,0x4
+    80004e16:	00020717          	auipc	a4,0x20
+    80004e1a:	afa70713          	addi	a4,a4,-1286 # 80024910 <devsw>
+    80004e1e:	97ba                	add	a5,a5,a4
+    80004e20:	679c                	ld	a5,8(a5)
+    80004e22:	cbdd                	beqz	a5,80004ed8 <filewrite+0x130>
+    ret = devsw[f->major].write(1, addr, n);
+    80004e24:	4505                	li	a0,1
+    80004e26:	9782                	jalr	a5
+    80004e28:	8a2a                	mv	s4,a0
+    80004e2a:	a8a5                	j	80004ea2 <filewrite+0xfa>
+    80004e2c:	00048a9b          	sext.w	s5,s1
+      int n1 = n - i;
+      if(n1 > max)
+        n1 = max;
+
+      begin_op();
+    80004e30:	00000097          	auipc	ra,0x0
+    80004e34:	8b4080e7          	jalr	-1868(ra) # 800046e4 <begin_op>
+      ilock(f->ip);
+    80004e38:	01893503          	ld	a0,24(s2)
+    80004e3c:	fffff097          	auipc	ra,0xfffff
+    80004e40:	ecc080e7          	jalr	-308(ra) # 80003d08 <ilock>
+      if ((r = writei(f->ip, 1, addr + i, f->off, n1)) > 0)
+    80004e44:	8756                	mv	a4,s5
+    80004e46:	02092683          	lw	a3,32(s2)
+    80004e4a:	01698633          	add	a2,s3,s6
+    80004e4e:	4585                	li	a1,1
+    80004e50:	01893503          	ld	a0,24(s2)
+    80004e54:	fffff097          	auipc	ra,0xfffff
+    80004e58:	260080e7          	jalr	608(ra) # 800040b4 <writei>
+    80004e5c:	84aa                	mv	s1,a0
+    80004e5e:	00a05763          	blez	a0,80004e6c <filewrite+0xc4>
+        f->off += r;
+    80004e62:	02092783          	lw	a5,32(s2)
+    80004e66:	9fa9                	addw	a5,a5,a0
+    80004e68:	02f92023          	sw	a5,32(s2)
+      iunlock(f->ip);
+    80004e6c:	01893503          	ld	a0,24(s2)
+    80004e70:	fffff097          	auipc	ra,0xfffff
+    80004e74:	f5a080e7          	jalr	-166(ra) # 80003dca <iunlock>
+      end_op();
+    80004e78:	00000097          	auipc	ra,0x0
+    80004e7c:	8ea080e7          	jalr	-1814(ra) # 80004762 <end_op>
+
+      if(r != n1){
+    80004e80:	009a9f63          	bne	s5,s1,80004e9e <filewrite+0xf6>
+        // error from writei
+        break;
+      }
+      i += r;
+    80004e84:	013489bb          	addw	s3,s1,s3
+    while(i < n){
+    80004e88:	0149db63          	bge	s3,s4,80004e9e <filewrite+0xf6>
+      int n1 = n - i;
+    80004e8c:	413a04bb          	subw	s1,s4,s3
+    80004e90:	0004879b          	sext.w	a5,s1
+    80004e94:	f8fbdce3          	bge	s7,a5,80004e2c <filewrite+0x84>
+    80004e98:	84e2                	mv	s1,s8
+    80004e9a:	bf49                	j	80004e2c <filewrite+0x84>
+    int i = 0;
+    80004e9c:	4981                	li	s3,0
+    }
+    ret = (i == n ? n : -1);
+    80004e9e:	013a1f63          	bne	s4,s3,80004ebc <filewrite+0x114>
+  } else {
+    panic("filewrite");
+  }
+
+  return ret;
+}
+    80004ea2:	8552                	mv	a0,s4
+    80004ea4:	60a6                	ld	ra,72(sp)
+    80004ea6:	6406                	ld	s0,64(sp)
+    80004ea8:	74e2                	ld	s1,56(sp)
+    80004eaa:	7942                	ld	s2,48(sp)
+    80004eac:	79a2                	ld	s3,40(sp)
+    80004eae:	7a02                	ld	s4,32(sp)
+    80004eb0:	6ae2                	ld	s5,24(sp)
+    80004eb2:	6b42                	ld	s6,16(sp)
+    80004eb4:	6ba2                	ld	s7,8(sp)
+    80004eb6:	6c02                	ld	s8,0(sp)
+    80004eb8:	6161                	addi	sp,sp,80
+    80004eba:	8082                	ret
+    ret = (i == n ? n : -1);
+    80004ebc:	5a7d                	li	s4,-1
+    80004ebe:	b7d5                	j	80004ea2 <filewrite+0xfa>
+    panic("filewrite");
+    80004ec0:	00004517          	auipc	a0,0x4
+    80004ec4:	86050513          	addi	a0,a0,-1952 # 80008720 <syscalls+0x298>
+    80004ec8:	ffffb097          	auipc	ra,0xffffb
+    80004ecc:	672080e7          	jalr	1650(ra) # 8000053a <panic>
+    return -1;
+    80004ed0:	5a7d                	li	s4,-1
+    80004ed2:	bfc1                	j	80004ea2 <filewrite+0xfa>
+      return -1;
+    80004ed4:	5a7d                	li	s4,-1
+    80004ed6:	b7f1                	j	80004ea2 <filewrite+0xfa>
+    80004ed8:	5a7d                	li	s4,-1
+    80004eda:	b7e1                	j	80004ea2 <filewrite+0xfa>
+
+0000000080004edc <pipealloc>:
+  int writeopen;  // write fd is still open
+};
+
+int
+pipealloc(struct file **f0, struct file **f1)
+{
+    80004edc:	7179                	addi	sp,sp,-48
+    80004ede:	f406                	sd	ra,40(sp)
+    80004ee0:	f022                	sd	s0,32(sp)
+    80004ee2:	ec26                	sd	s1,24(sp)
+    80004ee4:	e84a                	sd	s2,16(sp)
+    80004ee6:	e44e                	sd	s3,8(sp)
+    80004ee8:	e052                	sd	s4,0(sp)
+    80004eea:	1800                	addi	s0,sp,48
+    80004eec:	84aa                	mv	s1,a0
+    80004eee:	8a2e                	mv	s4,a1
+  struct pipe *pi;
+
+  pi = 0;
+  *f0 = *f1 = 0;
+    80004ef0:	0005b023          	sd	zero,0(a1)
+    80004ef4:	00053023          	sd	zero,0(a0)
+  if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
+    80004ef8:	00000097          	auipc	ra,0x0
+    80004efc:	bf8080e7          	jalr	-1032(ra) # 80004af0 <filealloc>
+    80004f00:	e088                	sd	a0,0(s1)
+    80004f02:	c551                	beqz	a0,80004f8e <pipealloc+0xb2>
+    80004f04:	00000097          	auipc	ra,0x0
+    80004f08:	bec080e7          	jalr	-1044(ra) # 80004af0 <filealloc>
+    80004f0c:	00aa3023          	sd	a0,0(s4)
+    80004f10:	c92d                	beqz	a0,80004f82 <pipealloc+0xa6>
+    goto bad;
+  if((pi = (struct pipe*)kalloc()) == 0)
+    80004f12:	ffffc097          	auipc	ra,0xffffc
+    80004f16:	bce080e7          	jalr	-1074(ra) # 80000ae0 <kalloc>
+    80004f1a:	892a                	mv	s2,a0
+    80004f1c:	c125                	beqz	a0,80004f7c <pipealloc+0xa0>
+    goto bad;
+  pi->readopen = 1;
+    80004f1e:	4985                	li	s3,1
+    80004f20:	23352023          	sw	s3,544(a0)
+  pi->writeopen = 1;
+    80004f24:	23352223          	sw	s3,548(a0)
+  pi->nwrite = 0;
+    80004f28:	20052e23          	sw	zero,540(a0)
+  pi->nread = 0;
+    80004f2c:	20052c23          	sw	zero,536(a0)
+  initlock(&pi->lock, "pipe");
+    80004f30:	00004597          	auipc	a1,0x4
+    80004f34:	80058593          	addi	a1,a1,-2048 # 80008730 <syscalls+0x2a8>
+    80004f38:	ffffc097          	auipc	ra,0xffffc
+    80004f3c:	c08080e7          	jalr	-1016(ra) # 80000b40 <initlock>
+  (*f0)->type = FD_PIPE;
+    80004f40:	609c                	ld	a5,0(s1)
+    80004f42:	0137a023          	sw	s3,0(a5)
+  (*f0)->readable = 1;
+    80004f46:	609c                	ld	a5,0(s1)
+    80004f48:	01378423          	sb	s3,8(a5)
+  (*f0)->writable = 0;
+    80004f4c:	609c                	ld	a5,0(s1)
+    80004f4e:	000784a3          	sb	zero,9(a5)
+  (*f0)->pipe = pi;
+    80004f52:	609c                	ld	a5,0(s1)
+    80004f54:	0127b823          	sd	s2,16(a5)
+  (*f1)->type = FD_PIPE;
+    80004f58:	000a3783          	ld	a5,0(s4)
+    80004f5c:	0137a023          	sw	s3,0(a5)
+  (*f1)->readable = 0;
+    80004f60:	000a3783          	ld	a5,0(s4)
+    80004f64:	00078423          	sb	zero,8(a5)
+  (*f1)->writable = 1;
+    80004f68:	000a3783          	ld	a5,0(s4)
+    80004f6c:	013784a3          	sb	s3,9(a5)
+  (*f1)->pipe = pi;
+    80004f70:	000a3783          	ld	a5,0(s4)
+    80004f74:	0127b823          	sd	s2,16(a5)
+  return 0;
+    80004f78:	4501                	li	a0,0
+    80004f7a:	a025                	j	80004fa2 <pipealloc+0xc6>
+
+ bad:
+  if(pi)
+    kfree((char*)pi);
+  if(*f0)
+    80004f7c:	6088                	ld	a0,0(s1)
+    80004f7e:	e501                	bnez	a0,80004f86 <pipealloc+0xaa>
+    80004f80:	a039                	j	80004f8e <pipealloc+0xb2>
+    80004f82:	6088                	ld	a0,0(s1)
+    80004f84:	c51d                	beqz	a0,80004fb2 <pipealloc+0xd6>
+    fileclose(*f0);
+    80004f86:	00000097          	auipc	ra,0x0
+    80004f8a:	c26080e7          	jalr	-986(ra) # 80004bac <fileclose>
+  if(*f1)
+    80004f8e:	000a3783          	ld	a5,0(s4)
+    fileclose(*f1);
+  return -1;
+    80004f92:	557d                	li	a0,-1
+  if(*f1)
+    80004f94:	c799                	beqz	a5,80004fa2 <pipealloc+0xc6>
+    fileclose(*f1);
+    80004f96:	853e                	mv	a0,a5
+    80004f98:	00000097          	auipc	ra,0x0
+    80004f9c:	c14080e7          	jalr	-1004(ra) # 80004bac <fileclose>
+  return -1;
+    80004fa0:	557d                	li	a0,-1
+}
+    80004fa2:	70a2                	ld	ra,40(sp)
+    80004fa4:	7402                	ld	s0,32(sp)
+    80004fa6:	64e2                	ld	s1,24(sp)
+    80004fa8:	6942                	ld	s2,16(sp)
+    80004faa:	69a2                	ld	s3,8(sp)
+    80004fac:	6a02                	ld	s4,0(sp)
+    80004fae:	6145                	addi	sp,sp,48
+    80004fb0:	8082                	ret
+  return -1;
+    80004fb2:	557d                	li	a0,-1
+    80004fb4:	b7fd                	j	80004fa2 <pipealloc+0xc6>
+
+0000000080004fb6 <pipeclose>:
+
+void
+pipeclose(struct pipe *pi, int writable)
+{
+    80004fb6:	1101                	addi	sp,sp,-32
+    80004fb8:	ec06                	sd	ra,24(sp)
+    80004fba:	e822                	sd	s0,16(sp)
+    80004fbc:	e426                	sd	s1,8(sp)
+    80004fbe:	e04a                	sd	s2,0(sp)
+    80004fc0:	1000                	addi	s0,sp,32
+    80004fc2:	84aa                	mv	s1,a0
+    80004fc4:	892e                	mv	s2,a1
+  acquire(&pi->lock);
+    80004fc6:	ffffc097          	auipc	ra,0xffffc
+    80004fca:	c0a080e7          	jalr	-1014(ra) # 80000bd0 <acquire>
+  if(writable){
+    80004fce:	02090d63          	beqz	s2,80005008 <pipeclose+0x52>
+    pi->writeopen = 0;
+    80004fd2:	2204a223          	sw	zero,548(s1)
+    wakeup(&pi->nread);
+    80004fd6:	21848513          	addi	a0,s1,536
+    80004fda:	ffffd097          	auipc	ra,0xffffd
+    80004fde:	75e080e7          	jalr	1886(ra) # 80002738 <wakeup>
+  } else {
+    pi->readopen = 0;
+    wakeup(&pi->nwrite);
+  }
+  if(pi->readopen == 0 && pi->writeopen == 0){
+    80004fe2:	2204b783          	ld	a5,544(s1)
+    80004fe6:	eb95                	bnez	a5,8000501a <pipeclose+0x64>
+    release(&pi->lock);
+    80004fe8:	8526                	mv	a0,s1
+    80004fea:	ffffc097          	auipc	ra,0xffffc
+    80004fee:	c9a080e7          	jalr	-870(ra) # 80000c84 <release>
+    kfree((char*)pi);
+    80004ff2:	8526                	mv	a0,s1
+    80004ff4:	ffffc097          	auipc	ra,0xffffc
+    80004ff8:	9ee080e7          	jalr	-1554(ra) # 800009e2 <kfree>
+  } else
+    release(&pi->lock);
+}
+    80004ffc:	60e2                	ld	ra,24(sp)
+    80004ffe:	6442                	ld	s0,16(sp)
+    80005000:	64a2                	ld	s1,8(sp)
+    80005002:	6902                	ld	s2,0(sp)
+    80005004:	6105                	addi	sp,sp,32
+    80005006:	8082                	ret
+    pi->readopen = 0;
+    80005008:	2204a023          	sw	zero,544(s1)
+    wakeup(&pi->nwrite);
+    8000500c:	21c48513          	addi	a0,s1,540
+    80005010:	ffffd097          	auipc	ra,0xffffd
+    80005014:	728080e7          	jalr	1832(ra) # 80002738 <wakeup>
+    80005018:	b7e9                	j	80004fe2 <pipeclose+0x2c>
+    release(&pi->lock);
+    8000501a:	8526                	mv	a0,s1
+    8000501c:	ffffc097          	auipc	ra,0xffffc
+    80005020:	c68080e7          	jalr	-920(ra) # 80000c84 <release>
+}
+    80005024:	bfe1                	j	80004ffc <pipeclose+0x46>
+
+0000000080005026 <pipewrite>:
+
+int
+pipewrite(struct pipe *pi, uint64 addr, int n)
+{
+    80005026:	711d                	addi	sp,sp,-96
+    80005028:	ec86                	sd	ra,88(sp)
+    8000502a:	e8a2                	sd	s0,80(sp)
+    8000502c:	e4a6                	sd	s1,72(sp)
+    8000502e:	e0ca                	sd	s2,64(sp)
+    80005030:	fc4e                	sd	s3,56(sp)
+    80005032:	f852                	sd	s4,48(sp)
+    80005034:	f456                	sd	s5,40(sp)
+    80005036:	f05a                	sd	s6,32(sp)
+    80005038:	ec5e                	sd	s7,24(sp)
+    8000503a:	e862                	sd	s8,16(sp)
+    8000503c:	1080                	addi	s0,sp,96
+    8000503e:	84aa                	mv	s1,a0
+    80005040:	8aae                	mv	s5,a1
+    80005042:	8a32                	mv	s4,a2
+  int i = 0;
+  struct proc *pr = myproc();
+    80005044:	ffffd097          	auipc	ra,0xffffd
+    80005048:	d32080e7          	jalr	-718(ra) # 80001d76 <myproc>
+    8000504c:	89aa                	mv	s3,a0
+
+  acquire(&pi->lock);
+    8000504e:	8526                	mv	a0,s1
+    80005050:	ffffc097          	auipc	ra,0xffffc
+    80005054:	b80080e7          	jalr	-1152(ra) # 80000bd0 <acquire>
+  while(i < n){
+    80005058:	0b405363          	blez	s4,800050fe <pipewrite+0xd8>
+  int i = 0;
+    8000505c:	4901                	li	s2,0
+    if(pi->nwrite == pi->nread + PIPESIZE){ //DOC: pipewrite-full
+      wakeup(&pi->nread);
+      sleep(&pi->nwrite, &pi->lock);
+    } else {
+      char ch;
+      if(copyin(pr->pagetable, &ch, addr + i, 1) == -1)
+    8000505e:	5b7d                	li	s6,-1
+      wakeup(&pi->nread);
+    80005060:	21848c13          	addi	s8,s1,536
+      sleep(&pi->nwrite, &pi->lock);
+    80005064:	21c48b93          	addi	s7,s1,540
+    80005068:	a089                	j	800050aa <pipewrite+0x84>
+      release(&pi->lock);
+    8000506a:	8526                	mv	a0,s1
+    8000506c:	ffffc097          	auipc	ra,0xffffc
+    80005070:	c18080e7          	jalr	-1000(ra) # 80000c84 <release>
+      return -1;
+    80005074:	597d                	li	s2,-1
+  }
+  wakeup(&pi->nread);
+  release(&pi->lock);
+
+  return i;
+}
+    80005076:	854a                	mv	a0,s2
+    80005078:	60e6                	ld	ra,88(sp)
+    8000507a:	6446                	ld	s0,80(sp)
+    8000507c:	64a6                	ld	s1,72(sp)
+    8000507e:	6906                	ld	s2,64(sp)
+    80005080:	79e2                	ld	s3,56(sp)
+    80005082:	7a42                	ld	s4,48(sp)
+    80005084:	7aa2                	ld	s5,40(sp)
+    80005086:	7b02                	ld	s6,32(sp)
+    80005088:	6be2                	ld	s7,24(sp)
+    8000508a:	6c42                	ld	s8,16(sp)
+    8000508c:	6125                	addi	sp,sp,96
+    8000508e:	8082                	ret
+      wakeup(&pi->nread);
+    80005090:	8562                	mv	a0,s8
+    80005092:	ffffd097          	auipc	ra,0xffffd
+    80005096:	6a6080e7          	jalr	1702(ra) # 80002738 <wakeup>
+      sleep(&pi->nwrite, &pi->lock);
+    8000509a:	85a6                	mv	a1,s1
+    8000509c:	855e                	mv	a0,s7
+    8000509e:	ffffd097          	auipc	ra,0xffffd
+    800050a2:	50e080e7          	jalr	1294(ra) # 800025ac <sleep>
+  while(i < n){
+    800050a6:	05495d63          	bge	s2,s4,80005100 <pipewrite+0xda>
+    if(pi->readopen == 0 || pr->killed){
+    800050aa:	2204a783          	lw	a5,544(s1)
+    800050ae:	dfd5                	beqz	a5,8000506a <pipewrite+0x44>
+    800050b0:	0289a783          	lw	a5,40(s3)
+    800050b4:	fbdd                	bnez	a5,8000506a <pipewrite+0x44>
+    if(pi->nwrite == pi->nread + PIPESIZE){ //DOC: pipewrite-full
+    800050b6:	2184a783          	lw	a5,536(s1)
+    800050ba:	21c4a703          	lw	a4,540(s1)
+    800050be:	2007879b          	addiw	a5,a5,512
+    800050c2:	fcf707e3          	beq	a4,a5,80005090 <pipewrite+0x6a>
+      if(copyin(pr->pagetable, &ch, addr + i, 1) == -1)
+    800050c6:	4685                	li	a3,1
+    800050c8:	01590633          	add	a2,s2,s5
+    800050cc:	faf40593          	addi	a1,s0,-81
+    800050d0:	0509b503          	ld	a0,80(s3)
+    800050d4:	ffffc097          	auipc	ra,0xffffc
+    800050d8:	61a080e7          	jalr	1562(ra) # 800016ee <copyin>
+    800050dc:	03650263          	beq	a0,s6,80005100 <pipewrite+0xda>
+      pi->data[pi->nwrite++ % PIPESIZE] = ch;
+    800050e0:	21c4a783          	lw	a5,540(s1)
+    800050e4:	0017871b          	addiw	a4,a5,1
+    800050e8:	20e4ae23          	sw	a4,540(s1)
+    800050ec:	1ff7f793          	andi	a5,a5,511
+    800050f0:	97a6                	add	a5,a5,s1
+    800050f2:	faf44703          	lbu	a4,-81(s0)
+    800050f6:	00e78c23          	sb	a4,24(a5)
+      i++;
+    800050fa:	2905                	addiw	s2,s2,1
+    800050fc:	b76d                	j	800050a6 <pipewrite+0x80>
+  int i = 0;
+    800050fe:	4901                	li	s2,0
+  wakeup(&pi->nread);
+    80005100:	21848513          	addi	a0,s1,536
+    80005104:	ffffd097          	auipc	ra,0xffffd
+    80005108:	634080e7          	jalr	1588(ra) # 80002738 <wakeup>
+  release(&pi->lock);
+    8000510c:	8526                	mv	a0,s1
+    8000510e:	ffffc097          	auipc	ra,0xffffc
+    80005112:	b76080e7          	jalr	-1162(ra) # 80000c84 <release>
+  return i;
+    80005116:	b785                	j	80005076 <pipewrite+0x50>
+
+0000000080005118 <piperead>:
+
+int
+piperead(struct pipe *pi, uint64 addr, int n)
+{
+    80005118:	715d                	addi	sp,sp,-80
+    8000511a:	e486                	sd	ra,72(sp)
+    8000511c:	e0a2                	sd	s0,64(sp)
+    8000511e:	fc26                	sd	s1,56(sp)
+    80005120:	f84a                	sd	s2,48(sp)
+    80005122:	f44e                	sd	s3,40(sp)
+    80005124:	f052                	sd	s4,32(sp)
+    80005126:	ec56                	sd	s5,24(sp)
+    80005128:	e85a                	sd	s6,16(sp)
+    8000512a:	0880                	addi	s0,sp,80
+    8000512c:	84aa                	mv	s1,a0
+    8000512e:	892e                	mv	s2,a1
+    80005130:	8ab2                	mv	s5,a2
+  int i;
+  struct proc *pr = myproc();
+    80005132:	ffffd097          	auipc	ra,0xffffd
+    80005136:	c44080e7          	jalr	-956(ra) # 80001d76 <myproc>
+    8000513a:	8a2a                	mv	s4,a0
+  char ch;
+
+  acquire(&pi->lock);
+    8000513c:	8526                	mv	a0,s1
+    8000513e:	ffffc097          	auipc	ra,0xffffc
+    80005142:	a92080e7          	jalr	-1390(ra) # 80000bd0 <acquire>
+  while(pi->nread == pi->nwrite && pi->writeopen){  //DOC: pipe-empty
+    80005146:	2184a703          	lw	a4,536(s1)
+    8000514a:	21c4a783          	lw	a5,540(s1)
+    if(pr->killed){
+      release(&pi->lock);
+      return -1;
+    }
+    sleep(&pi->nread, &pi->lock); //DOC: piperead-sleep
+    8000514e:	21848993          	addi	s3,s1,536
+  while(pi->nread == pi->nwrite && pi->writeopen){  //DOC: pipe-empty
+    80005152:	02f71463          	bne	a4,a5,8000517a <piperead+0x62>
+    80005156:	2244a783          	lw	a5,548(s1)
+    8000515a:	c385                	beqz	a5,8000517a <piperead+0x62>
+    if(pr->killed){
+    8000515c:	028a2783          	lw	a5,40(s4)
+    80005160:	ebc9                	bnez	a5,800051f2 <piperead+0xda>
+    sleep(&pi->nread, &pi->lock); //DOC: piperead-sleep
+    80005162:	85a6                	mv	a1,s1
+    80005164:	854e                	mv	a0,s3
+    80005166:	ffffd097          	auipc	ra,0xffffd
+    8000516a:	446080e7          	jalr	1094(ra) # 800025ac <sleep>
+  while(pi->nread == pi->nwrite && pi->writeopen){  //DOC: pipe-empty
+    8000516e:	2184a703          	lw	a4,536(s1)
+    80005172:	21c4a783          	lw	a5,540(s1)
+    80005176:	fef700e3          	beq	a4,a5,80005156 <piperead+0x3e>
+  }
+  for(i = 0; i < n; i++){  //DOC: piperead-copy
+    8000517a:	4981                	li	s3,0
+    if(pi->nread == pi->nwrite)
+      break;
+    ch = pi->data[pi->nread++ % PIPESIZE];
+    if(copyout(pr->pagetable, addr + i, &ch, 1) == -1)
+    8000517c:	5b7d                	li	s6,-1
+  for(i = 0; i < n; i++){  //DOC: piperead-copy
+    8000517e:	05505463          	blez	s5,800051c6 <piperead+0xae>
+    if(pi->nread == pi->nwrite)
+    80005182:	2184a783          	lw	a5,536(s1)
+    80005186:	21c4a703          	lw	a4,540(s1)
+    8000518a:	02f70e63          	beq	a4,a5,800051c6 <piperead+0xae>
+    ch = pi->data[pi->nread++ % PIPESIZE];
+    8000518e:	0017871b          	addiw	a4,a5,1
+    80005192:	20e4ac23          	sw	a4,536(s1)
+    80005196:	1ff7f793          	andi	a5,a5,511
+    8000519a:	97a6                	add	a5,a5,s1
+    8000519c:	0187c783          	lbu	a5,24(a5)
+    800051a0:	faf40fa3          	sb	a5,-65(s0)
+    if(copyout(pr->pagetable, addr + i, &ch, 1) == -1)
+    800051a4:	4685                	li	a3,1
+    800051a6:	fbf40613          	addi	a2,s0,-65
+    800051aa:	85ca                	mv	a1,s2
+    800051ac:	050a3503          	ld	a0,80(s4)
+    800051b0:	ffffc097          	auipc	ra,0xffffc
+    800051b4:	4b2080e7          	jalr	1202(ra) # 80001662 <copyout>
+    800051b8:	01650763          	beq	a0,s6,800051c6 <piperead+0xae>
+  for(i = 0; i < n; i++){  //DOC: piperead-copy
+    800051bc:	2985                	addiw	s3,s3,1
+    800051be:	0905                	addi	s2,s2,1
+    800051c0:	fd3a91e3          	bne	s5,s3,80005182 <piperead+0x6a>
+    800051c4:	89d6                	mv	s3,s5
+      break;
+  }
+  wakeup(&pi->nwrite);  //DOC: piperead-wakeup
+    800051c6:	21c48513          	addi	a0,s1,540
+    800051ca:	ffffd097          	auipc	ra,0xffffd
+    800051ce:	56e080e7          	jalr	1390(ra) # 80002738 <wakeup>
+  release(&pi->lock);
+    800051d2:	8526                	mv	a0,s1
+    800051d4:	ffffc097          	auipc	ra,0xffffc
+    800051d8:	ab0080e7          	jalr	-1360(ra) # 80000c84 <release>
+  return i;
+}
+    800051dc:	854e                	mv	a0,s3
+    800051de:	60a6                	ld	ra,72(sp)
+    800051e0:	6406                	ld	s0,64(sp)
+    800051e2:	74e2                	ld	s1,56(sp)
+    800051e4:	7942                	ld	s2,48(sp)
+    800051e6:	79a2                	ld	s3,40(sp)
+    800051e8:	7a02                	ld	s4,32(sp)
+    800051ea:	6ae2                	ld	s5,24(sp)
+    800051ec:	6b42                	ld	s6,16(sp)
+    800051ee:	6161                	addi	sp,sp,80
+    800051f0:	8082                	ret
+      release(&pi->lock);
+    800051f2:	8526                	mv	a0,s1
+    800051f4:	ffffc097          	auipc	ra,0xffffc
+    800051f8:	a90080e7          	jalr	-1392(ra) # 80000c84 <release>
+      return -1;
+    800051fc:	59fd                	li	s3,-1
+    800051fe:	bff9                	j	800051dc <piperead+0xc4>
+
+0000000080005200 <exec>:
+
+static int loadseg(pde_t *pgdir, uint64 addr, struct inode *ip, uint offset, uint sz);
+
+int
+exec(char *path, char **argv)
+{
+    80005200:	de010113          	addi	sp,sp,-544
+    80005204:	20113c23          	sd	ra,536(sp)
+    80005208:	20813823          	sd	s0,528(sp)
+    8000520c:	20913423          	sd	s1,520(sp)
+    80005210:	21213023          	sd	s2,512(sp)
+    80005214:	ffce                	sd	s3,504(sp)
+    80005216:	fbd2                	sd	s4,496(sp)
+    80005218:	f7d6                	sd	s5,488(sp)
+    8000521a:	f3da                	sd	s6,480(sp)
+    8000521c:	efde                	sd	s7,472(sp)
+    8000521e:	ebe2                	sd	s8,464(sp)
+    80005220:	e7e6                	sd	s9,456(sp)
+    80005222:	e3ea                	sd	s10,448(sp)
+    80005224:	ff6e                	sd	s11,440(sp)
+    80005226:	1400                	addi	s0,sp,544
+    80005228:	892a                	mv	s2,a0
+    8000522a:	dea43423          	sd	a0,-536(s0)
+    8000522e:	deb43823          	sd	a1,-528(s0)
+  uint64 argc, sz = 0, sp, ustack[MAXARG], stackbase;
+  struct elfhdr elf;
+  struct inode *ip;
+  struct proghdr ph;
+  pagetable_t pagetable = 0, oldpagetable;
+  struct proc *p = myproc();
+    80005232:	ffffd097          	auipc	ra,0xffffd
+    80005236:	b44080e7          	jalr	-1212(ra) # 80001d76 <myproc>
+    8000523a:	84aa                	mv	s1,a0
+
+  begin_op();
+    8000523c:	fffff097          	auipc	ra,0xfffff
+    80005240:	4a8080e7          	jalr	1192(ra) # 800046e4 <begin_op>
+
+  if((ip = namei(path)) == 0){
+    80005244:	854a                	mv	a0,s2
+    80005246:	fffff097          	auipc	ra,0xfffff
+    8000524a:	27e080e7          	jalr	638(ra) # 800044c4 <namei>
+    8000524e:	c93d                	beqz	a0,800052c4 <exec+0xc4>
+    80005250:	8aaa                	mv	s5,a0
+    end_op();
+    return -1;
+  }
+  ilock(ip);
+    80005252:	fffff097          	auipc	ra,0xfffff
+    80005256:	ab6080e7          	jalr	-1354(ra) # 80003d08 <ilock>
+
+  // Check ELF header
+  if(readi(ip, 0, (uint64)&elf, 0, sizeof(elf)) != sizeof(elf))
+    8000525a:	04000713          	li	a4,64
+    8000525e:	4681                	li	a3,0
+    80005260:	e5040613          	addi	a2,s0,-432
+    80005264:	4581                	li	a1,0
+    80005266:	8556                	mv	a0,s5
+    80005268:	fffff097          	auipc	ra,0xfffff
+    8000526c:	d54080e7          	jalr	-684(ra) # 80003fbc <readi>
+    80005270:	04000793          	li	a5,64
+    80005274:	00f51a63          	bne	a0,a5,80005288 <exec+0x88>
+    goto bad;
+  if(elf.magic != ELF_MAGIC)
+    80005278:	e5042703          	lw	a4,-432(s0)
+    8000527c:	464c47b7          	lui	a5,0x464c4
+    80005280:	57f78793          	addi	a5,a5,1407 # 464c457f <_entry-0x39b3ba81>
+    80005284:	04f70663          	beq	a4,a5,800052d0 <exec+0xd0>
+
+ bad:
+  if(pagetable)
+    proc_freepagetable(pagetable, sz);
+  if(ip){
+    iunlockput(ip);
+    80005288:	8556                	mv	a0,s5
+    8000528a:	fffff097          	auipc	ra,0xfffff
+    8000528e:	ce0080e7          	jalr	-800(ra) # 80003f6a <iunlockput>
+    end_op();
+    80005292:	fffff097          	auipc	ra,0xfffff
+    80005296:	4d0080e7          	jalr	1232(ra) # 80004762 <end_op>
+  }
+  return -1;
+    8000529a:	557d                	li	a0,-1
+}
+    8000529c:	21813083          	ld	ra,536(sp)
+    800052a0:	21013403          	ld	s0,528(sp)
+    800052a4:	20813483          	ld	s1,520(sp)
+    800052a8:	20013903          	ld	s2,512(sp)
+    800052ac:	79fe                	ld	s3,504(sp)
+    800052ae:	7a5e                	ld	s4,496(sp)
+    800052b0:	7abe                	ld	s5,488(sp)
+    800052b2:	7b1e                	ld	s6,480(sp)
+    800052b4:	6bfe                	ld	s7,472(sp)
+    800052b6:	6c5e                	ld	s8,464(sp)
+    800052b8:	6cbe                	ld	s9,456(sp)
+    800052ba:	6d1e                	ld	s10,448(sp)
+    800052bc:	7dfa                	ld	s11,440(sp)
+    800052be:	22010113          	addi	sp,sp,544
+    800052c2:	8082                	ret
+    end_op();
+    800052c4:	fffff097          	auipc	ra,0xfffff
+    800052c8:	49e080e7          	jalr	1182(ra) # 80004762 <end_op>
+    return -1;
+    800052cc:	557d                	li	a0,-1
+    800052ce:	b7f9                	j	8000529c <exec+0x9c>
+  if((pagetable = proc_pagetable(p)) == 0)
+    800052d0:	8526                	mv	a0,s1
+    800052d2:	ffffd097          	auipc	ra,0xffffd
+    800052d6:	b68080e7          	jalr	-1176(ra) # 80001e3a <proc_pagetable>
+    800052da:	8b2a                	mv	s6,a0
+    800052dc:	d555                	beqz	a0,80005288 <exec+0x88>
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+    800052de:	e7042783          	lw	a5,-400(s0)
+    800052e2:	e8845703          	lhu	a4,-376(s0)
+    800052e6:	c735                	beqz	a4,80005352 <exec+0x152>
+  uint64 argc, sz = 0, sp, ustack[MAXARG], stackbase;
+    800052e8:	4481                	li	s1,0
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+    800052ea:	e0043423          	sd	zero,-504(s0)
+    if((ph.vaddr % PGSIZE) != 0)
+    800052ee:	6a05                	lui	s4,0x1
+    800052f0:	fffa0713          	addi	a4,s4,-1 # fff <_entry-0x7ffff001>
+    800052f4:	dee43023          	sd	a4,-544(s0)
+loadseg(pagetable_t pagetable, uint64 va, struct inode *ip, uint offset, uint sz)
+{
+  uint i, n;
+  uint64 pa;
+
+  for(i = 0; i < sz; i += PGSIZE){
+    800052f8:	6d85                	lui	s11,0x1
+    800052fa:	7d7d                	lui	s10,0xfffff
+    800052fc:	ac1d                	j	80005532 <exec+0x332>
+    pa = walkaddr(pagetable, va + i);
+    if(pa == 0)
+      panic("loadseg: address should exist");
+    800052fe:	00003517          	auipc	a0,0x3
+    80005302:	43a50513          	addi	a0,a0,1082 # 80008738 <syscalls+0x2b0>
+    80005306:	ffffb097          	auipc	ra,0xffffb
+    8000530a:	234080e7          	jalr	564(ra) # 8000053a <panic>
+    if(sz - i < PGSIZE)
+      n = sz - i;
+    else
+      n = PGSIZE;
+    if(readi(ip, 0, (uint64)pa, offset+i, n) != n)
+    8000530e:	874a                	mv	a4,s2
+    80005310:	009c86bb          	addw	a3,s9,s1
+    80005314:	4581                	li	a1,0
+    80005316:	8556                	mv	a0,s5
+    80005318:	fffff097          	auipc	ra,0xfffff
+    8000531c:	ca4080e7          	jalr	-860(ra) # 80003fbc <readi>
+    80005320:	2501                	sext.w	a0,a0
+    80005322:	1aa91863          	bne	s2,a0,800054d2 <exec+0x2d2>
+  for(i = 0; i < sz; i += PGSIZE){
+    80005326:	009d84bb          	addw	s1,s11,s1
+    8000532a:	013d09bb          	addw	s3,s10,s3
+    8000532e:	1f74f263          	bgeu	s1,s7,80005512 <exec+0x312>
+    pa = walkaddr(pagetable, va + i);
+    80005332:	02049593          	slli	a1,s1,0x20
+    80005336:	9181                	srli	a1,a1,0x20
+    80005338:	95e2                	add	a1,a1,s8
+    8000533a:	855a                	mv	a0,s6
+    8000533c:	ffffc097          	auipc	ra,0xffffc
+    80005340:	d1e080e7          	jalr	-738(ra) # 8000105a <walkaddr>
+    80005344:	862a                	mv	a2,a0
+    if(pa == 0)
+    80005346:	dd45                	beqz	a0,800052fe <exec+0xfe>
+      n = PGSIZE;
+    80005348:	8952                	mv	s2,s4
+    if(sz - i < PGSIZE)
+    8000534a:	fd49f2e3          	bgeu	s3,s4,8000530e <exec+0x10e>
+      n = sz - i;
+    8000534e:	894e                	mv	s2,s3
+    80005350:	bf7d                	j	8000530e <exec+0x10e>
+  uint64 argc, sz = 0, sp, ustack[MAXARG], stackbase;
+    80005352:	4481                	li	s1,0
+  iunlockput(ip);
+    80005354:	8556                	mv	a0,s5
+    80005356:	fffff097          	auipc	ra,0xfffff
+    8000535a:	c14080e7          	jalr	-1004(ra) # 80003f6a <iunlockput>
+  end_op();
+    8000535e:	fffff097          	auipc	ra,0xfffff
+    80005362:	404080e7          	jalr	1028(ra) # 80004762 <end_op>
+  p = myproc();
+    80005366:	ffffd097          	auipc	ra,0xffffd
+    8000536a:	a10080e7          	jalr	-1520(ra) # 80001d76 <myproc>
+    8000536e:	8baa                	mv	s7,a0
+  uint64 oldsz = p->sz;
+    80005370:	04853d03          	ld	s10,72(a0)
+  sz = PGROUNDUP(sz);
+    80005374:	6785                	lui	a5,0x1
+    80005376:	17fd                	addi	a5,a5,-1 # fff <_entry-0x7ffff001>
+    80005378:	97a6                	add	a5,a5,s1
+    8000537a:	777d                	lui	a4,0xfffff
+    8000537c:	8ff9                	and	a5,a5,a4
+    8000537e:	def43c23          	sd	a5,-520(s0)
+  if((sz1 = uvmalloc(pagetable, sz, sz + 2*PGSIZE)) == 0)
+    80005382:	6609                	lui	a2,0x2
+    80005384:	963e                	add	a2,a2,a5
+    80005386:	85be                	mv	a1,a5
+    80005388:	855a                	mv	a0,s6
+    8000538a:	ffffc097          	auipc	ra,0xffffc
+    8000538e:	084080e7          	jalr	132(ra) # 8000140e <uvmalloc>
+    80005392:	8c2a                	mv	s8,a0
+  ip = 0;
+    80005394:	4a81                	li	s5,0
+  if((sz1 = uvmalloc(pagetable, sz, sz + 2*PGSIZE)) == 0)
+    80005396:	12050e63          	beqz	a0,800054d2 <exec+0x2d2>
+  uvmclear(pagetable, sz-2*PGSIZE);
+    8000539a:	75f9                	lui	a1,0xffffe
+    8000539c:	95aa                	add	a1,a1,a0
+    8000539e:	855a                	mv	a0,s6
+    800053a0:	ffffc097          	auipc	ra,0xffffc
+    800053a4:	290080e7          	jalr	656(ra) # 80001630 <uvmclear>
+  stackbase = sp - PGSIZE;
+    800053a8:	7afd                	lui	s5,0xfffff
+    800053aa:	9ae2                	add	s5,s5,s8
+  for(argc = 0; argv[argc]; argc++) {
+    800053ac:	df043783          	ld	a5,-528(s0)
+    800053b0:	6388                	ld	a0,0(a5)
+    800053b2:	c925                	beqz	a0,80005422 <exec+0x222>
+    800053b4:	e9040993          	addi	s3,s0,-368
+    800053b8:	f9040c93          	addi	s9,s0,-112
+  sp = sz;
+    800053bc:	8962                	mv	s2,s8
+  for(argc = 0; argv[argc]; argc++) {
+    800053be:	4481                	li	s1,0
+    sp -= strlen(argv[argc]) + 1;
+    800053c0:	ffffc097          	auipc	ra,0xffffc
+    800053c4:	a88080e7          	jalr	-1400(ra) # 80000e48 <strlen>
+    800053c8:	0015079b          	addiw	a5,a0,1
+    800053cc:	40f907b3          	sub	a5,s2,a5
+    sp -= sp % 16; // riscv sp must be 16-byte aligned
+    800053d0:	ff07f913          	andi	s2,a5,-16
+    if(sp < stackbase)
+    800053d4:	13596363          	bltu	s2,s5,800054fa <exec+0x2fa>
+    if(copyout(pagetable, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
+    800053d8:	df043d83          	ld	s11,-528(s0)
+    800053dc:	000dba03          	ld	s4,0(s11) # 1000 <_entry-0x7ffff000>
+    800053e0:	8552                	mv	a0,s4
+    800053e2:	ffffc097          	auipc	ra,0xffffc
+    800053e6:	a66080e7          	jalr	-1434(ra) # 80000e48 <strlen>
+    800053ea:	0015069b          	addiw	a3,a0,1
+    800053ee:	8652                	mv	a2,s4
+    800053f0:	85ca                	mv	a1,s2
+    800053f2:	855a                	mv	a0,s6
+    800053f4:	ffffc097          	auipc	ra,0xffffc
+    800053f8:	26e080e7          	jalr	622(ra) # 80001662 <copyout>
+    800053fc:	10054363          	bltz	a0,80005502 <exec+0x302>
+    ustack[argc] = sp;
+    80005400:	0129b023          	sd	s2,0(s3)
+  for(argc = 0; argv[argc]; argc++) {
+    80005404:	0485                	addi	s1,s1,1
+    80005406:	008d8793          	addi	a5,s11,8
+    8000540a:	def43823          	sd	a5,-528(s0)
+    8000540e:	008db503          	ld	a0,8(s11)
+    80005412:	c911                	beqz	a0,80005426 <exec+0x226>
+    if(argc >= MAXARG)
+    80005414:	09a1                	addi	s3,s3,8
+    80005416:	fb3c95e3          	bne	s9,s3,800053c0 <exec+0x1c0>
+  sz = sz1;
+    8000541a:	df843c23          	sd	s8,-520(s0)
+  ip = 0;
+    8000541e:	4a81                	li	s5,0
+    80005420:	a84d                	j	800054d2 <exec+0x2d2>
+  sp = sz;
+    80005422:	8962                	mv	s2,s8
+  for(argc = 0; argv[argc]; argc++) {
+    80005424:	4481                	li	s1,0
+  ustack[argc] = 0;
+    80005426:	00349793          	slli	a5,s1,0x3
+    8000542a:	f9078793          	addi	a5,a5,-112
+    8000542e:	97a2                	add	a5,a5,s0
+    80005430:	f007b023          	sd	zero,-256(a5)
+  sp -= (argc+1) * sizeof(uint64);
+    80005434:	00148693          	addi	a3,s1,1
+    80005438:	068e                	slli	a3,a3,0x3
+    8000543a:	40d90933          	sub	s2,s2,a3
+  sp -= sp % 16;
+    8000543e:	ff097913          	andi	s2,s2,-16
+  if(sp < stackbase)
+    80005442:	01597663          	bgeu	s2,s5,8000544e <exec+0x24e>
+  sz = sz1;
+    80005446:	df843c23          	sd	s8,-520(s0)
+  ip = 0;
+    8000544a:	4a81                	li	s5,0
+    8000544c:	a059                	j	800054d2 <exec+0x2d2>
+  if(copyout(pagetable, sp, (char *)ustack, (argc+1)*sizeof(uint64)) < 0)
+    8000544e:	e9040613          	addi	a2,s0,-368
+    80005452:	85ca                	mv	a1,s2
+    80005454:	855a                	mv	a0,s6
+    80005456:	ffffc097          	auipc	ra,0xffffc
+    8000545a:	20c080e7          	jalr	524(ra) # 80001662 <copyout>
+    8000545e:	0a054663          	bltz	a0,8000550a <exec+0x30a>
+  p->trapframe->a1 = sp;
+    80005462:	058bb783          	ld	a5,88(s7)
+    80005466:	0727bc23          	sd	s2,120(a5)
+  for(last=s=path; *s; s++)
+    8000546a:	de843783          	ld	a5,-536(s0)
+    8000546e:	0007c703          	lbu	a4,0(a5)
+    80005472:	cf11                	beqz	a4,8000548e <exec+0x28e>
+    80005474:	0785                	addi	a5,a5,1
+    if(*s == '/')
+    80005476:	02f00693          	li	a3,47
+    8000547a:	a039                	j	80005488 <exec+0x288>
+      last = s+1;
+    8000547c:	def43423          	sd	a5,-536(s0)
+  for(last=s=path; *s; s++)
+    80005480:	0785                	addi	a5,a5,1
+    80005482:	fff7c703          	lbu	a4,-1(a5)
+    80005486:	c701                	beqz	a4,8000548e <exec+0x28e>
+    if(*s == '/')
+    80005488:	fed71ce3          	bne	a4,a3,80005480 <exec+0x280>
+    8000548c:	bfc5                	j	8000547c <exec+0x27c>
+  safestrcpy(p->name, last, sizeof(p->name));
+    8000548e:	4641                	li	a2,16
+    80005490:	de843583          	ld	a1,-536(s0)
+    80005494:	1d8b8513          	addi	a0,s7,472
+    80005498:	ffffc097          	auipc	ra,0xffffc
+    8000549c:	97e080e7          	jalr	-1666(ra) # 80000e16 <safestrcpy>
+  oldpagetable = p->pagetable;
+    800054a0:	050bb503          	ld	a0,80(s7)
+  p->pagetable = pagetable;
+    800054a4:	056bb823          	sd	s6,80(s7)
+  p->sz = sz;
+    800054a8:	058bb423          	sd	s8,72(s7)
+  p->trapframe->epc = elf.entry;  // initial program counter = main
+    800054ac:	058bb783          	ld	a5,88(s7)
+    800054b0:	e6843703          	ld	a4,-408(s0)
+    800054b4:	ef98                	sd	a4,24(a5)
+  p->trapframe->sp = sp; // initial stack pointer
+    800054b6:	058bb783          	ld	a5,88(s7)
+    800054ba:	0327b823          	sd	s2,48(a5)
+  proc_freepagetable(oldpagetable, oldsz);
+    800054be:	85ea                	mv	a1,s10
+    800054c0:	ffffd097          	auipc	ra,0xffffd
+    800054c4:	a16080e7          	jalr	-1514(ra) # 80001ed6 <proc_freepagetable>
+  return argc; // this ends up in a0, the first argument to main(argc, argv)
+    800054c8:	0004851b          	sext.w	a0,s1
+    800054cc:	bbc1                	j	8000529c <exec+0x9c>
+    800054ce:	de943c23          	sd	s1,-520(s0)
+    proc_freepagetable(pagetable, sz);
+    800054d2:	df843583          	ld	a1,-520(s0)
+    800054d6:	855a                	mv	a0,s6
+    800054d8:	ffffd097          	auipc	ra,0xffffd
+    800054dc:	9fe080e7          	jalr	-1538(ra) # 80001ed6 <proc_freepagetable>
+  if(ip){
+    800054e0:	da0a94e3          	bnez	s5,80005288 <exec+0x88>
+  return -1;
+    800054e4:	557d                	li	a0,-1
+    800054e6:	bb5d                	j	8000529c <exec+0x9c>
+    800054e8:	de943c23          	sd	s1,-520(s0)
+    800054ec:	b7dd                	j	800054d2 <exec+0x2d2>
+    800054ee:	de943c23          	sd	s1,-520(s0)
+    800054f2:	b7c5                	j	800054d2 <exec+0x2d2>
+    800054f4:	de943c23          	sd	s1,-520(s0)
+    800054f8:	bfe9                	j	800054d2 <exec+0x2d2>
+  sz = sz1;
+    800054fa:	df843c23          	sd	s8,-520(s0)
+  ip = 0;
+    800054fe:	4a81                	li	s5,0
+    80005500:	bfc9                	j	800054d2 <exec+0x2d2>
+  sz = sz1;
+    80005502:	df843c23          	sd	s8,-520(s0)
+  ip = 0;
+    80005506:	4a81                	li	s5,0
+    80005508:	b7e9                	j	800054d2 <exec+0x2d2>
+  sz = sz1;
+    8000550a:	df843c23          	sd	s8,-520(s0)
+  ip = 0;
+    8000550e:	4a81                	li	s5,0
+    80005510:	b7c9                	j	800054d2 <exec+0x2d2>
+    if((sz1 = uvmalloc(pagetable, sz, ph.vaddr + ph.memsz)) == 0)
+    80005512:	df843483          	ld	s1,-520(s0)
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+    80005516:	e0843783          	ld	a5,-504(s0)
+    8000551a:	0017869b          	addiw	a3,a5,1
+    8000551e:	e0d43423          	sd	a3,-504(s0)
+    80005522:	e0043783          	ld	a5,-512(s0)
+    80005526:	0387879b          	addiw	a5,a5,56
+    8000552a:	e8845703          	lhu	a4,-376(s0)
+    8000552e:	e2e6d3e3          	bge	a3,a4,80005354 <exec+0x154>
+    if(readi(ip, 0, (uint64)&ph, off, sizeof(ph)) != sizeof(ph))
+    80005532:	2781                	sext.w	a5,a5
+    80005534:	e0f43023          	sd	a5,-512(s0)
+    80005538:	03800713          	li	a4,56
+    8000553c:	86be                	mv	a3,a5
+    8000553e:	e1840613          	addi	a2,s0,-488
+    80005542:	4581                	li	a1,0
+    80005544:	8556                	mv	a0,s5
+    80005546:	fffff097          	auipc	ra,0xfffff
+    8000554a:	a76080e7          	jalr	-1418(ra) # 80003fbc <readi>
+    8000554e:	03800793          	li	a5,56
+    80005552:	f6f51ee3          	bne	a0,a5,800054ce <exec+0x2ce>
+    if(ph.type != ELF_PROG_LOAD)
+    80005556:	e1842783          	lw	a5,-488(s0)
+    8000555a:	4705                	li	a4,1
+    8000555c:	fae79de3          	bne	a5,a4,80005516 <exec+0x316>
+    if(ph.memsz < ph.filesz)
+    80005560:	e4043603          	ld	a2,-448(s0)
+    80005564:	e3843783          	ld	a5,-456(s0)
+    80005568:	f8f660e3          	bltu	a2,a5,800054e8 <exec+0x2e8>
+    if(ph.vaddr + ph.memsz < ph.vaddr)
+    8000556c:	e2843783          	ld	a5,-472(s0)
+    80005570:	963e                	add	a2,a2,a5
+    80005572:	f6f66ee3          	bltu	a2,a5,800054ee <exec+0x2ee>
+    if((sz1 = uvmalloc(pagetable, sz, ph.vaddr + ph.memsz)) == 0)
+    80005576:	85a6                	mv	a1,s1
+    80005578:	855a                	mv	a0,s6
+    8000557a:	ffffc097          	auipc	ra,0xffffc
+    8000557e:	e94080e7          	jalr	-364(ra) # 8000140e <uvmalloc>
+    80005582:	dea43c23          	sd	a0,-520(s0)
+    80005586:	d53d                	beqz	a0,800054f4 <exec+0x2f4>
+    if((ph.vaddr % PGSIZE) != 0)
+    80005588:	e2843c03          	ld	s8,-472(s0)
+    8000558c:	de043783          	ld	a5,-544(s0)
+    80005590:	00fc77b3          	and	a5,s8,a5
+    80005594:	ff9d                	bnez	a5,800054d2 <exec+0x2d2>
+    if(loadseg(pagetable, ph.vaddr, ip, ph.off, ph.filesz) < 0)
+    80005596:	e2042c83          	lw	s9,-480(s0)
+    8000559a:	e3842b83          	lw	s7,-456(s0)
+  for(i = 0; i < sz; i += PGSIZE){
+    8000559e:	f60b8ae3          	beqz	s7,80005512 <exec+0x312>
+    800055a2:	89de                	mv	s3,s7
+    800055a4:	4481                	li	s1,0
+    800055a6:	b371                	j	80005332 <exec+0x132>
+
+00000000800055a8 <argfd>:
+
+// Fetch the nth word-sized system call argument as a file descriptor
+// and return both the descriptor and the corresponding struct file.
+static int
+argfd(int n, int *pfd, struct file **pf)
+{
+    800055a8:	7179                	addi	sp,sp,-48
+    800055aa:	f406                	sd	ra,40(sp)
+    800055ac:	f022                	sd	s0,32(sp)
+    800055ae:	ec26                	sd	s1,24(sp)
+    800055b0:	e84a                	sd	s2,16(sp)
+    800055b2:	1800                	addi	s0,sp,48
+    800055b4:	892e                	mv	s2,a1
+    800055b6:	84b2                	mv	s1,a2
+  int fd;
+  struct file *f;
+
+  if(argint(n, &fd) < 0)
+    800055b8:	fdc40593          	addi	a1,s0,-36
+    800055bc:	ffffe097          	auipc	ra,0xffffe
+    800055c0:	a96080e7          	jalr	-1386(ra) # 80003052 <argint>
+    800055c4:	04054063          	bltz	a0,80005604 <argfd+0x5c>
+    return -1;
+  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
+    800055c8:	fdc42703          	lw	a4,-36(s0)
+    800055cc:	47bd                	li	a5,15
+    800055ce:	02e7ed63          	bltu	a5,a4,80005608 <argfd+0x60>
+    800055d2:	ffffc097          	auipc	ra,0xffffc
+    800055d6:	7a4080e7          	jalr	1956(ra) # 80001d76 <myproc>
+    800055da:	fdc42703          	lw	a4,-36(s0)
+    800055de:	01a70793          	addi	a5,a4,26 # fffffffffffff01a <end+0xffffffff7ffd601a>
+    800055e2:	078e                	slli	a5,a5,0x3
+    800055e4:	953e                	add	a0,a0,a5
+    800055e6:	611c                	ld	a5,0(a0)
+    800055e8:	c395                	beqz	a5,8000560c <argfd+0x64>
+    return -1;
+  if(pfd)
+    800055ea:	00090463          	beqz	s2,800055f2 <argfd+0x4a>
+    *pfd = fd;
+    800055ee:	00e92023          	sw	a4,0(s2)
+  if(pf)
+    *pf = f;
+  return 0;
+    800055f2:	4501                	li	a0,0
+  if(pf)
+    800055f4:	c091                	beqz	s1,800055f8 <argfd+0x50>
+    *pf = f;
+    800055f6:	e09c                	sd	a5,0(s1)
+}
+    800055f8:	70a2                	ld	ra,40(sp)
+    800055fa:	7402                	ld	s0,32(sp)
+    800055fc:	64e2                	ld	s1,24(sp)
+    800055fe:	6942                	ld	s2,16(sp)
+    80005600:	6145                	addi	sp,sp,48
+    80005602:	8082                	ret
+    return -1;
+    80005604:	557d                	li	a0,-1
+    80005606:	bfcd                	j	800055f8 <argfd+0x50>
+    return -1;
+    80005608:	557d                	li	a0,-1
+    8000560a:	b7fd                	j	800055f8 <argfd+0x50>
+    8000560c:	557d                	li	a0,-1
+    8000560e:	b7ed                	j	800055f8 <argfd+0x50>
+
+0000000080005610 <fdalloc>:
+
+// Allocate a file descriptor for the given file.
+// Takes over file reference from caller on success.
+static int
+fdalloc(struct file *f)
+{
+    80005610:	1101                	addi	sp,sp,-32
+    80005612:	ec06                	sd	ra,24(sp)
+    80005614:	e822                	sd	s0,16(sp)
+    80005616:	e426                	sd	s1,8(sp)
+    80005618:	1000                	addi	s0,sp,32
+    8000561a:	84aa                	mv	s1,a0
+  int fd;
+  struct proc *p = myproc();
+    8000561c:	ffffc097          	auipc	ra,0xffffc
+    80005620:	75a080e7          	jalr	1882(ra) # 80001d76 <myproc>
+    80005624:	862a                	mv	a2,a0
+
+  for(fd = 0; fd < NOFILE; fd++){
+    80005626:	0d050793          	addi	a5,a0,208
+    8000562a:	4501                	li	a0,0
+    8000562c:	46c1                	li	a3,16
+    if(p->ofile[fd] == 0){
+    8000562e:	6398                	ld	a4,0(a5)
+    80005630:	cb19                	beqz	a4,80005646 <fdalloc+0x36>
+  for(fd = 0; fd < NOFILE; fd++){
+    80005632:	2505                	addiw	a0,a0,1
+    80005634:	07a1                	addi	a5,a5,8
+    80005636:	fed51ce3          	bne	a0,a3,8000562e <fdalloc+0x1e>
+      p->ofile[fd] = f;
+      return fd;
+    }
+  }
+  return -1;
+    8000563a:	557d                	li	a0,-1
+}
+    8000563c:	60e2                	ld	ra,24(sp)
+    8000563e:	6442                	ld	s0,16(sp)
+    80005640:	64a2                	ld	s1,8(sp)
+    80005642:	6105                	addi	sp,sp,32
+    80005644:	8082                	ret
+      p->ofile[fd] = f;
+    80005646:	01a50793          	addi	a5,a0,26
+    8000564a:	078e                	slli	a5,a5,0x3
+    8000564c:	963e                	add	a2,a2,a5
+    8000564e:	e204                	sd	s1,0(a2)
+      return fd;
+    80005650:	b7f5                	j	8000563c <fdalloc+0x2c>
+
+0000000080005652 <create>:
+  return -1;
+}
+
+static struct inode*
+create(char *path, short type, short major, short minor)
+{
+    80005652:	715d                	addi	sp,sp,-80
+    80005654:	e486                	sd	ra,72(sp)
+    80005656:	e0a2                	sd	s0,64(sp)
+    80005658:	fc26                	sd	s1,56(sp)
+    8000565a:	f84a                	sd	s2,48(sp)
+    8000565c:	f44e                	sd	s3,40(sp)
+    8000565e:	f052                	sd	s4,32(sp)
+    80005660:	ec56                	sd	s5,24(sp)
+    80005662:	0880                	addi	s0,sp,80
+    80005664:	89ae                	mv	s3,a1
+    80005666:	8ab2                	mv	s5,a2
+    80005668:	8a36                	mv	s4,a3
+  struct inode *ip, *dp;
+  char name[DIRSIZ];
+
+  if((dp = nameiparent(path, name)) == 0)
+    8000566a:	fb040593          	addi	a1,s0,-80
+    8000566e:	fffff097          	auipc	ra,0xfffff
+    80005672:	e74080e7          	jalr	-396(ra) # 800044e2 <nameiparent>
+    80005676:	892a                	mv	s2,a0
+    80005678:	12050e63          	beqz	a0,800057b4 <create+0x162>
+    return 0;
+
+  ilock(dp);
+    8000567c:	ffffe097          	auipc	ra,0xffffe
+    80005680:	68c080e7          	jalr	1676(ra) # 80003d08 <ilock>
+
+  if((ip = dirlookup(dp, name, 0)) != 0){
+    80005684:	4601                	li	a2,0
+    80005686:	fb040593          	addi	a1,s0,-80
+    8000568a:	854a                	mv	a0,s2
+    8000568c:	fffff097          	auipc	ra,0xfffff
+    80005690:	b60080e7          	jalr	-1184(ra) # 800041ec <dirlookup>
+    80005694:	84aa                	mv	s1,a0
+    80005696:	c921                	beqz	a0,800056e6 <create+0x94>
+    iunlockput(dp);
+    80005698:	854a                	mv	a0,s2
+    8000569a:	fffff097          	auipc	ra,0xfffff
+    8000569e:	8d0080e7          	jalr	-1840(ra) # 80003f6a <iunlockput>
+    ilock(ip);
+    800056a2:	8526                	mv	a0,s1
+    800056a4:	ffffe097          	auipc	ra,0xffffe
+    800056a8:	664080e7          	jalr	1636(ra) # 80003d08 <ilock>
+    if(type == T_FILE && (ip->type == T_FILE || ip->type == T_DEVICE))
+    800056ac:	2981                	sext.w	s3,s3
+    800056ae:	4789                	li	a5,2
+    800056b0:	02f99463          	bne	s3,a5,800056d8 <create+0x86>
+    800056b4:	0444d783          	lhu	a5,68(s1)
+    800056b8:	37f9                	addiw	a5,a5,-2
+    800056ba:	17c2                	slli	a5,a5,0x30
+    800056bc:	93c1                	srli	a5,a5,0x30
+    800056be:	4705                	li	a4,1
+    800056c0:	00f76c63          	bltu	a4,a5,800056d8 <create+0x86>
+    panic("create: dirlink");
+
+  iunlockput(dp);
+
+  return ip;
+}
+    800056c4:	8526                	mv	a0,s1
+    800056c6:	60a6                	ld	ra,72(sp)
+    800056c8:	6406                	ld	s0,64(sp)
+    800056ca:	74e2                	ld	s1,56(sp)
+    800056cc:	7942                	ld	s2,48(sp)
+    800056ce:	79a2                	ld	s3,40(sp)
+    800056d0:	7a02                	ld	s4,32(sp)
+    800056d2:	6ae2                	ld	s5,24(sp)
+    800056d4:	6161                	addi	sp,sp,80
+    800056d6:	8082                	ret
+    iunlockput(ip);
+    800056d8:	8526                	mv	a0,s1
+    800056da:	fffff097          	auipc	ra,0xfffff
+    800056de:	890080e7          	jalr	-1904(ra) # 80003f6a <iunlockput>
+    return 0;
+    800056e2:	4481                	li	s1,0
+    800056e4:	b7c5                	j	800056c4 <create+0x72>
+  if((ip = ialloc(dp->dev, type)) == 0)
+    800056e6:	85ce                	mv	a1,s3
+    800056e8:	00092503          	lw	a0,0(s2)
+    800056ec:	ffffe097          	auipc	ra,0xffffe
+    800056f0:	482080e7          	jalr	1154(ra) # 80003b6e <ialloc>
+    800056f4:	84aa                	mv	s1,a0
+    800056f6:	c521                	beqz	a0,8000573e <create+0xec>
+  ilock(ip);
+    800056f8:	ffffe097          	auipc	ra,0xffffe
+    800056fc:	610080e7          	jalr	1552(ra) # 80003d08 <ilock>
+  ip->major = major;
+    80005700:	05549323          	sh	s5,70(s1)
+  ip->minor = minor;
+    80005704:	05449423          	sh	s4,72(s1)
+  ip->nlink = 1;
+    80005708:	4a05                	li	s4,1
+    8000570a:	05449523          	sh	s4,74(s1)
+  iupdate(ip);
+    8000570e:	8526                	mv	a0,s1
+    80005710:	ffffe097          	auipc	ra,0xffffe
+    80005714:	52c080e7          	jalr	1324(ra) # 80003c3c <iupdate>
+  if(type == T_DIR){  // Create . and .. entries.
+    80005718:	2981                	sext.w	s3,s3
+    8000571a:	03498a63          	beq	s3,s4,8000574e <create+0xfc>
+  if(dirlink(dp, name, ip->inum) < 0)
+    8000571e:	40d0                	lw	a2,4(s1)
+    80005720:	fb040593          	addi	a1,s0,-80
+    80005724:	854a                	mv	a0,s2
+    80005726:	fffff097          	auipc	ra,0xfffff
+    8000572a:	cdc080e7          	jalr	-804(ra) # 80004402 <dirlink>
+    8000572e:	06054b63          	bltz	a0,800057a4 <create+0x152>
+  iunlockput(dp);
+    80005732:	854a                	mv	a0,s2
+    80005734:	fffff097          	auipc	ra,0xfffff
+    80005738:	836080e7          	jalr	-1994(ra) # 80003f6a <iunlockput>
+  return ip;
+    8000573c:	b761                	j	800056c4 <create+0x72>
+    panic("create: ialloc");
+    8000573e:	00003517          	auipc	a0,0x3
+    80005742:	01a50513          	addi	a0,a0,26 # 80008758 <syscalls+0x2d0>
+    80005746:	ffffb097          	auipc	ra,0xffffb
+    8000574a:	df4080e7          	jalr	-524(ra) # 8000053a <panic>
+    dp->nlink++;  // for ".."
+    8000574e:	04a95783          	lhu	a5,74(s2)
+    80005752:	2785                	addiw	a5,a5,1
+    80005754:	04f91523          	sh	a5,74(s2)
+    iupdate(dp);
+    80005758:	854a                	mv	a0,s2
+    8000575a:	ffffe097          	auipc	ra,0xffffe
+    8000575e:	4e2080e7          	jalr	1250(ra) # 80003c3c <iupdate>
+    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
+    80005762:	40d0                	lw	a2,4(s1)
+    80005764:	00003597          	auipc	a1,0x3
+    80005768:	00458593          	addi	a1,a1,4 # 80008768 <syscalls+0x2e0>
+    8000576c:	8526                	mv	a0,s1
+    8000576e:	fffff097          	auipc	ra,0xfffff
+    80005772:	c94080e7          	jalr	-876(ra) # 80004402 <dirlink>
+    80005776:	00054f63          	bltz	a0,80005794 <create+0x142>
+    8000577a:	00492603          	lw	a2,4(s2)
+    8000577e:	00003597          	auipc	a1,0x3
+    80005782:	ff258593          	addi	a1,a1,-14 # 80008770 <syscalls+0x2e8>
+    80005786:	8526                	mv	a0,s1
+    80005788:	fffff097          	auipc	ra,0xfffff
+    8000578c:	c7a080e7          	jalr	-902(ra) # 80004402 <dirlink>
+    80005790:	f80557e3          	bgez	a0,8000571e <create+0xcc>
+      panic("create dots");
+    80005794:	00003517          	auipc	a0,0x3
+    80005798:	fe450513          	addi	a0,a0,-28 # 80008778 <syscalls+0x2f0>
+    8000579c:	ffffb097          	auipc	ra,0xffffb
+    800057a0:	d9e080e7          	jalr	-610(ra) # 8000053a <panic>
+    panic("create: dirlink");
+    800057a4:	00003517          	auipc	a0,0x3
+    800057a8:	fe450513          	addi	a0,a0,-28 # 80008788 <syscalls+0x300>
+    800057ac:	ffffb097          	auipc	ra,0xffffb
+    800057b0:	d8e080e7          	jalr	-626(ra) # 8000053a <panic>
+    return 0;
+    800057b4:	84aa                	mv	s1,a0
+    800057b6:	b739                	j	800056c4 <create+0x72>
+
+00000000800057b8 <sys_dup>:
+{
+    800057b8:	7179                	addi	sp,sp,-48
+    800057ba:	f406                	sd	ra,40(sp)
+    800057bc:	f022                	sd	s0,32(sp)
+    800057be:	ec26                	sd	s1,24(sp)
+    800057c0:	e84a                	sd	s2,16(sp)
+    800057c2:	1800                	addi	s0,sp,48
+  if(argfd(0, 0, &f) < 0)
+    800057c4:	fd840613          	addi	a2,s0,-40
+    800057c8:	4581                	li	a1,0
+    800057ca:	4501                	li	a0,0
+    800057cc:	00000097          	auipc	ra,0x0
+    800057d0:	ddc080e7          	jalr	-548(ra) # 800055a8 <argfd>
+    return -1;
+    800057d4:	57fd                	li	a5,-1
+  if(argfd(0, 0, &f) < 0)
+    800057d6:	02054363          	bltz	a0,800057fc <sys_dup+0x44>
+  if((fd=fdalloc(f)) < 0)
+    800057da:	fd843903          	ld	s2,-40(s0)
+    800057de:	854a                	mv	a0,s2
+    800057e0:	00000097          	auipc	ra,0x0
+    800057e4:	e30080e7          	jalr	-464(ra) # 80005610 <fdalloc>
+    800057e8:	84aa                	mv	s1,a0
+    return -1;
+    800057ea:	57fd                	li	a5,-1
+  if((fd=fdalloc(f)) < 0)
+    800057ec:	00054863          	bltz	a0,800057fc <sys_dup+0x44>
+  filedup(f);
+    800057f0:	854a                	mv	a0,s2
+    800057f2:	fffff097          	auipc	ra,0xfffff
+    800057f6:	368080e7          	jalr	872(ra) # 80004b5a <filedup>
+  return fd;
+    800057fa:	87a6                	mv	a5,s1
+}
+    800057fc:	853e                	mv	a0,a5
+    800057fe:	70a2                	ld	ra,40(sp)
+    80005800:	7402                	ld	s0,32(sp)
+    80005802:	64e2                	ld	s1,24(sp)
+    80005804:	6942                	ld	s2,16(sp)
+    80005806:	6145                	addi	sp,sp,48
+    80005808:	8082                	ret
+
+000000008000580a <sys_read>:
+{
+    8000580a:	7179                	addi	sp,sp,-48
+    8000580c:	f406                	sd	ra,40(sp)
+    8000580e:	f022                	sd	s0,32(sp)
+    80005810:	1800                	addi	s0,sp,48
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
+    80005812:	fe840613          	addi	a2,s0,-24
+    80005816:	4581                	li	a1,0
+    80005818:	4501                	li	a0,0
+    8000581a:	00000097          	auipc	ra,0x0
+    8000581e:	d8e080e7          	jalr	-626(ra) # 800055a8 <argfd>
+    return -1;
+    80005822:	57fd                	li	a5,-1
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
+    80005824:	04054163          	bltz	a0,80005866 <sys_read+0x5c>
+    80005828:	fe440593          	addi	a1,s0,-28
+    8000582c:	4509                	li	a0,2
+    8000582e:	ffffe097          	auipc	ra,0xffffe
+    80005832:	824080e7          	jalr	-2012(ra) # 80003052 <argint>
+    return -1;
+    80005836:	57fd                	li	a5,-1
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
+    80005838:	02054763          	bltz	a0,80005866 <sys_read+0x5c>
+    8000583c:	fd840593          	addi	a1,s0,-40
+    80005840:	4505                	li	a0,1
+    80005842:	ffffe097          	auipc	ra,0xffffe
+    80005846:	832080e7          	jalr	-1998(ra) # 80003074 <argaddr>
+    return -1;
+    8000584a:	57fd                	li	a5,-1
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
+    8000584c:	00054d63          	bltz	a0,80005866 <sys_read+0x5c>
+  return fileread(f, p, n);
+    80005850:	fe442603          	lw	a2,-28(s0)
+    80005854:	fd843583          	ld	a1,-40(s0)
+    80005858:	fe843503          	ld	a0,-24(s0)
+    8000585c:	fffff097          	auipc	ra,0xfffff
+    80005860:	48a080e7          	jalr	1162(ra) # 80004ce6 <fileread>
+    80005864:	87aa                	mv	a5,a0
+}
+    80005866:	853e                	mv	a0,a5
+    80005868:	70a2                	ld	ra,40(sp)
+    8000586a:	7402                	ld	s0,32(sp)
+    8000586c:	6145                	addi	sp,sp,48
+    8000586e:	8082                	ret
+
+0000000080005870 <sys_write>:
+{
+    80005870:	7179                	addi	sp,sp,-48
+    80005872:	f406                	sd	ra,40(sp)
+    80005874:	f022                	sd	s0,32(sp)
+    80005876:	1800                	addi	s0,sp,48
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
+    80005878:	fe840613          	addi	a2,s0,-24
+    8000587c:	4581                	li	a1,0
+    8000587e:	4501                	li	a0,0
+    80005880:	00000097          	auipc	ra,0x0
+    80005884:	d28080e7          	jalr	-728(ra) # 800055a8 <argfd>
+    return -1;
+    80005888:	57fd                	li	a5,-1
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
+    8000588a:	04054163          	bltz	a0,800058cc <sys_write+0x5c>
+    8000588e:	fe440593          	addi	a1,s0,-28
+    80005892:	4509                	li	a0,2
+    80005894:	ffffd097          	auipc	ra,0xffffd
+    80005898:	7be080e7          	jalr	1982(ra) # 80003052 <argint>
+    return -1;
+    8000589c:	57fd                	li	a5,-1
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
+    8000589e:	02054763          	bltz	a0,800058cc <sys_write+0x5c>
+    800058a2:	fd840593          	addi	a1,s0,-40
+    800058a6:	4505                	li	a0,1
+    800058a8:	ffffd097          	auipc	ra,0xffffd
+    800058ac:	7cc080e7          	jalr	1996(ra) # 80003074 <argaddr>
+    return -1;
+    800058b0:	57fd                	li	a5,-1
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
+    800058b2:	00054d63          	bltz	a0,800058cc <sys_write+0x5c>
+  return filewrite(f, p, n);
+    800058b6:	fe442603          	lw	a2,-28(s0)
+    800058ba:	fd843583          	ld	a1,-40(s0)
+    800058be:	fe843503          	ld	a0,-24(s0)
+    800058c2:	fffff097          	auipc	ra,0xfffff
+    800058c6:	4e6080e7          	jalr	1254(ra) # 80004da8 <filewrite>
+    800058ca:	87aa                	mv	a5,a0
+}
+    800058cc:	853e                	mv	a0,a5
+    800058ce:	70a2                	ld	ra,40(sp)
+    800058d0:	7402                	ld	s0,32(sp)
+    800058d2:	6145                	addi	sp,sp,48
+    800058d4:	8082                	ret
+
+00000000800058d6 <sys_close>:
+{
+    800058d6:	1101                	addi	sp,sp,-32
+    800058d8:	ec06                	sd	ra,24(sp)
+    800058da:	e822                	sd	s0,16(sp)
+    800058dc:	1000                	addi	s0,sp,32
+  if(argfd(0, &fd, &f) < 0)
+    800058de:	fe040613          	addi	a2,s0,-32
+    800058e2:	fec40593          	addi	a1,s0,-20
+    800058e6:	4501                	li	a0,0
+    800058e8:	00000097          	auipc	ra,0x0
+    800058ec:	cc0080e7          	jalr	-832(ra) # 800055a8 <argfd>
+    return -1;
+    800058f0:	57fd                	li	a5,-1
+  if(argfd(0, &fd, &f) < 0)
+    800058f2:	02054463          	bltz	a0,8000591a <sys_close+0x44>
+  myproc()->ofile[fd] = 0;
+    800058f6:	ffffc097          	auipc	ra,0xffffc
+    800058fa:	480080e7          	jalr	1152(ra) # 80001d76 <myproc>
+    800058fe:	fec42783          	lw	a5,-20(s0)
+    80005902:	07e9                	addi	a5,a5,26
+    80005904:	078e                	slli	a5,a5,0x3
+    80005906:	953e                	add	a0,a0,a5
+    80005908:	00053023          	sd	zero,0(a0)
+  fileclose(f);
+    8000590c:	fe043503          	ld	a0,-32(s0)
+    80005910:	fffff097          	auipc	ra,0xfffff
+    80005914:	29c080e7          	jalr	668(ra) # 80004bac <fileclose>
+  return 0;
+    80005918:	4781                	li	a5,0
+}
+    8000591a:	853e                	mv	a0,a5
+    8000591c:	60e2                	ld	ra,24(sp)
+    8000591e:	6442                	ld	s0,16(sp)
+    80005920:	6105                	addi	sp,sp,32
+    80005922:	8082                	ret
+
+0000000080005924 <sys_fstat>:
+{
+    80005924:	1101                	addi	sp,sp,-32
+    80005926:	ec06                	sd	ra,24(sp)
+    80005928:	e822                	sd	s0,16(sp)
+    8000592a:	1000                	addi	s0,sp,32
+  if(argfd(0, 0, &f) < 0 || argaddr(1, &st) < 0)
+    8000592c:	fe840613          	addi	a2,s0,-24
+    80005930:	4581                	li	a1,0
+    80005932:	4501                	li	a0,0
+    80005934:	00000097          	auipc	ra,0x0
+    80005938:	c74080e7          	jalr	-908(ra) # 800055a8 <argfd>
+    return -1;
+    8000593c:	57fd                	li	a5,-1
+  if(argfd(0, 0, &f) < 0 || argaddr(1, &st) < 0)
+    8000593e:	02054563          	bltz	a0,80005968 <sys_fstat+0x44>
+    80005942:	fe040593          	addi	a1,s0,-32
+    80005946:	4505                	li	a0,1
+    80005948:	ffffd097          	auipc	ra,0xffffd
+    8000594c:	72c080e7          	jalr	1836(ra) # 80003074 <argaddr>
+    return -1;
+    80005950:	57fd                	li	a5,-1
+  if(argfd(0, 0, &f) < 0 || argaddr(1, &st) < 0)
+    80005952:	00054b63          	bltz	a0,80005968 <sys_fstat+0x44>
+  return filestat(f, st);
+    80005956:	fe043583          	ld	a1,-32(s0)
+    8000595a:	fe843503          	ld	a0,-24(s0)
+    8000595e:	fffff097          	auipc	ra,0xfffff
+    80005962:	316080e7          	jalr	790(ra) # 80004c74 <filestat>
+    80005966:	87aa                	mv	a5,a0
+}
+    80005968:	853e                	mv	a0,a5
+    8000596a:	60e2                	ld	ra,24(sp)
+    8000596c:	6442                	ld	s0,16(sp)
+    8000596e:	6105                	addi	sp,sp,32
+    80005970:	8082                	ret
+
+0000000080005972 <sys_link>:
+{
+    80005972:	7169                	addi	sp,sp,-304
+    80005974:	f606                	sd	ra,296(sp)
+    80005976:	f222                	sd	s0,288(sp)
+    80005978:	ee26                	sd	s1,280(sp)
+    8000597a:	ea4a                	sd	s2,272(sp)
+    8000597c:	1a00                	addi	s0,sp,304
+  if(argstr(0, old, MAXPATH) < 0 || argstr(1, new, MAXPATH) < 0)
+    8000597e:	08000613          	li	a2,128
+    80005982:	ed040593          	addi	a1,s0,-304
+    80005986:	4501                	li	a0,0
+    80005988:	ffffd097          	auipc	ra,0xffffd
+    8000598c:	70e080e7          	jalr	1806(ra) # 80003096 <argstr>
+    return -1;
+    80005990:	57fd                	li	a5,-1
+  if(argstr(0, old, MAXPATH) < 0 || argstr(1, new, MAXPATH) < 0)
+    80005992:	10054e63          	bltz	a0,80005aae <sys_link+0x13c>
+    80005996:	08000613          	li	a2,128
+    8000599a:	f5040593          	addi	a1,s0,-176
+    8000599e:	4505                	li	a0,1
+    800059a0:	ffffd097          	auipc	ra,0xffffd
+    800059a4:	6f6080e7          	jalr	1782(ra) # 80003096 <argstr>
+    return -1;
+    800059a8:	57fd                	li	a5,-1
+  if(argstr(0, old, MAXPATH) < 0 || argstr(1, new, MAXPATH) < 0)
+    800059aa:	10054263          	bltz	a0,80005aae <sys_link+0x13c>
+  begin_op();
+    800059ae:	fffff097          	auipc	ra,0xfffff
+    800059b2:	d36080e7          	jalr	-714(ra) # 800046e4 <begin_op>
+  if((ip = namei(old)) == 0){
+    800059b6:	ed040513          	addi	a0,s0,-304
+    800059ba:	fffff097          	auipc	ra,0xfffff
+    800059be:	b0a080e7          	jalr	-1270(ra) # 800044c4 <namei>
+    800059c2:	84aa                	mv	s1,a0
+    800059c4:	c551                	beqz	a0,80005a50 <sys_link+0xde>
+  ilock(ip);
+    800059c6:	ffffe097          	auipc	ra,0xffffe
+    800059ca:	342080e7          	jalr	834(ra) # 80003d08 <ilock>
+  if(ip->type == T_DIR){
+    800059ce:	04449703          	lh	a4,68(s1)
+    800059d2:	4785                	li	a5,1
+    800059d4:	08f70463          	beq	a4,a5,80005a5c <sys_link+0xea>
+  ip->nlink++;
+    800059d8:	04a4d783          	lhu	a5,74(s1)
+    800059dc:	2785                	addiw	a5,a5,1
+    800059de:	04f49523          	sh	a5,74(s1)
+  iupdate(ip);
+    800059e2:	8526                	mv	a0,s1
+    800059e4:	ffffe097          	auipc	ra,0xffffe
+    800059e8:	258080e7          	jalr	600(ra) # 80003c3c <iupdate>
+  iunlock(ip);
+    800059ec:	8526                	mv	a0,s1
+    800059ee:	ffffe097          	auipc	ra,0xffffe
+    800059f2:	3dc080e7          	jalr	988(ra) # 80003dca <iunlock>
+  if((dp = nameiparent(new, name)) == 0)
+    800059f6:	fd040593          	addi	a1,s0,-48
+    800059fa:	f5040513          	addi	a0,s0,-176
+    800059fe:	fffff097          	auipc	ra,0xfffff
+    80005a02:	ae4080e7          	jalr	-1308(ra) # 800044e2 <nameiparent>
+    80005a06:	892a                	mv	s2,a0
+    80005a08:	c935                	beqz	a0,80005a7c <sys_link+0x10a>
+  ilock(dp);
+    80005a0a:	ffffe097          	auipc	ra,0xffffe
+    80005a0e:	2fe080e7          	jalr	766(ra) # 80003d08 <ilock>
+  if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
+    80005a12:	00092703          	lw	a4,0(s2)
+    80005a16:	409c                	lw	a5,0(s1)
+    80005a18:	04f71d63          	bne	a4,a5,80005a72 <sys_link+0x100>
+    80005a1c:	40d0                	lw	a2,4(s1)
+    80005a1e:	fd040593          	addi	a1,s0,-48
+    80005a22:	854a                	mv	a0,s2
+    80005a24:	fffff097          	auipc	ra,0xfffff
+    80005a28:	9de080e7          	jalr	-1570(ra) # 80004402 <dirlink>
+    80005a2c:	04054363          	bltz	a0,80005a72 <sys_link+0x100>
+  iunlockput(dp);
+    80005a30:	854a                	mv	a0,s2
+    80005a32:	ffffe097          	auipc	ra,0xffffe
+    80005a36:	538080e7          	jalr	1336(ra) # 80003f6a <iunlockput>
+  iput(ip);
+    80005a3a:	8526                	mv	a0,s1
+    80005a3c:	ffffe097          	auipc	ra,0xffffe
+    80005a40:	486080e7          	jalr	1158(ra) # 80003ec2 <iput>
+  end_op();
+    80005a44:	fffff097          	auipc	ra,0xfffff
+    80005a48:	d1e080e7          	jalr	-738(ra) # 80004762 <end_op>
+  return 0;
+    80005a4c:	4781                	li	a5,0
+    80005a4e:	a085                	j	80005aae <sys_link+0x13c>
+    end_op();
+    80005a50:	fffff097          	auipc	ra,0xfffff
+    80005a54:	d12080e7          	jalr	-750(ra) # 80004762 <end_op>
+    return -1;
+    80005a58:	57fd                	li	a5,-1
+    80005a5a:	a891                	j	80005aae <sys_link+0x13c>
+    iunlockput(ip);
+    80005a5c:	8526                	mv	a0,s1
+    80005a5e:	ffffe097          	auipc	ra,0xffffe
+    80005a62:	50c080e7          	jalr	1292(ra) # 80003f6a <iunlockput>
+    end_op();
+    80005a66:	fffff097          	auipc	ra,0xfffff
+    80005a6a:	cfc080e7          	jalr	-772(ra) # 80004762 <end_op>
+    return -1;
+    80005a6e:	57fd                	li	a5,-1
+    80005a70:	a83d                	j	80005aae <sys_link+0x13c>
+    iunlockput(dp);
+    80005a72:	854a                	mv	a0,s2
+    80005a74:	ffffe097          	auipc	ra,0xffffe
+    80005a78:	4f6080e7          	jalr	1270(ra) # 80003f6a <iunlockput>
+  ilock(ip);
+    80005a7c:	8526                	mv	a0,s1
+    80005a7e:	ffffe097          	auipc	ra,0xffffe
+    80005a82:	28a080e7          	jalr	650(ra) # 80003d08 <ilock>
+  ip->nlink--;
+    80005a86:	04a4d783          	lhu	a5,74(s1)
+    80005a8a:	37fd                	addiw	a5,a5,-1
+    80005a8c:	04f49523          	sh	a5,74(s1)
+  iupdate(ip);
+    80005a90:	8526                	mv	a0,s1
+    80005a92:	ffffe097          	auipc	ra,0xffffe
+    80005a96:	1aa080e7          	jalr	426(ra) # 80003c3c <iupdate>
+  iunlockput(ip);
+    80005a9a:	8526                	mv	a0,s1
+    80005a9c:	ffffe097          	auipc	ra,0xffffe
+    80005aa0:	4ce080e7          	jalr	1230(ra) # 80003f6a <iunlockput>
+  end_op();
+    80005aa4:	fffff097          	auipc	ra,0xfffff
+    80005aa8:	cbe080e7          	jalr	-834(ra) # 80004762 <end_op>
+  return -1;
+    80005aac:	57fd                	li	a5,-1
+}
+    80005aae:	853e                	mv	a0,a5
+    80005ab0:	70b2                	ld	ra,296(sp)
+    80005ab2:	7412                	ld	s0,288(sp)
+    80005ab4:	64f2                	ld	s1,280(sp)
+    80005ab6:	6952                	ld	s2,272(sp)
+    80005ab8:	6155                	addi	sp,sp,304
+    80005aba:	8082                	ret
+
+0000000080005abc <sys_unlink>:
+{
+    80005abc:	7151                	addi	sp,sp,-240
+    80005abe:	f586                	sd	ra,232(sp)
+    80005ac0:	f1a2                	sd	s0,224(sp)
+    80005ac2:	eda6                	sd	s1,216(sp)
+    80005ac4:	e9ca                	sd	s2,208(sp)
+    80005ac6:	e5ce                	sd	s3,200(sp)
+    80005ac8:	1980                	addi	s0,sp,240
+  if(argstr(0, path, MAXPATH) < 0)
+    80005aca:	08000613          	li	a2,128
+    80005ace:	f3040593          	addi	a1,s0,-208
+    80005ad2:	4501                	li	a0,0
+    80005ad4:	ffffd097          	auipc	ra,0xffffd
+    80005ad8:	5c2080e7          	jalr	1474(ra) # 80003096 <argstr>
+    80005adc:	18054163          	bltz	a0,80005c5e <sys_unlink+0x1a2>
+  begin_op();
+    80005ae0:	fffff097          	auipc	ra,0xfffff
+    80005ae4:	c04080e7          	jalr	-1020(ra) # 800046e4 <begin_op>
+  if((dp = nameiparent(path, name)) == 0){
+    80005ae8:	fb040593          	addi	a1,s0,-80
+    80005aec:	f3040513          	addi	a0,s0,-208
+    80005af0:	fffff097          	auipc	ra,0xfffff
+    80005af4:	9f2080e7          	jalr	-1550(ra) # 800044e2 <nameiparent>
+    80005af8:	84aa                	mv	s1,a0
+    80005afa:	c979                	beqz	a0,80005bd0 <sys_unlink+0x114>
+  ilock(dp);
+    80005afc:	ffffe097          	auipc	ra,0xffffe
+    80005b00:	20c080e7          	jalr	524(ra) # 80003d08 <ilock>
+  if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
+    80005b04:	00003597          	auipc	a1,0x3
+    80005b08:	c6458593          	addi	a1,a1,-924 # 80008768 <syscalls+0x2e0>
+    80005b0c:	fb040513          	addi	a0,s0,-80
+    80005b10:	ffffe097          	auipc	ra,0xffffe
+    80005b14:	6c2080e7          	jalr	1730(ra) # 800041d2 <namecmp>
+    80005b18:	14050a63          	beqz	a0,80005c6c <sys_unlink+0x1b0>
+    80005b1c:	00003597          	auipc	a1,0x3
+    80005b20:	c5458593          	addi	a1,a1,-940 # 80008770 <syscalls+0x2e8>
+    80005b24:	fb040513          	addi	a0,s0,-80
+    80005b28:	ffffe097          	auipc	ra,0xffffe
+    80005b2c:	6aa080e7          	jalr	1706(ra) # 800041d2 <namecmp>
+    80005b30:	12050e63          	beqz	a0,80005c6c <sys_unlink+0x1b0>
+  if((ip = dirlookup(dp, name, &off)) == 0)
+    80005b34:	f2c40613          	addi	a2,s0,-212
+    80005b38:	fb040593          	addi	a1,s0,-80
+    80005b3c:	8526                	mv	a0,s1
+    80005b3e:	ffffe097          	auipc	ra,0xffffe
+    80005b42:	6ae080e7          	jalr	1710(ra) # 800041ec <dirlookup>
+    80005b46:	892a                	mv	s2,a0
+    80005b48:	12050263          	beqz	a0,80005c6c <sys_unlink+0x1b0>
+  ilock(ip);
+    80005b4c:	ffffe097          	auipc	ra,0xffffe
+    80005b50:	1bc080e7          	jalr	444(ra) # 80003d08 <ilock>
+  if(ip->nlink < 1)
+    80005b54:	04a91783          	lh	a5,74(s2)
+    80005b58:	08f05263          	blez	a5,80005bdc <sys_unlink+0x120>
+  if(ip->type == T_DIR && !isdirempty(ip)){
+    80005b5c:	04491703          	lh	a4,68(s2)
+    80005b60:	4785                	li	a5,1
+    80005b62:	08f70563          	beq	a4,a5,80005bec <sys_unlink+0x130>
+  memset(&de, 0, sizeof(de));
+    80005b66:	4641                	li	a2,16
+    80005b68:	4581                	li	a1,0
+    80005b6a:	fc040513          	addi	a0,s0,-64
+    80005b6e:	ffffb097          	auipc	ra,0xffffb
+    80005b72:	15e080e7          	jalr	350(ra) # 80000ccc <memset>
+  if(writei(dp, 0, (uint64)&de, off, sizeof(de)) != sizeof(de))
+    80005b76:	4741                	li	a4,16
+    80005b78:	f2c42683          	lw	a3,-212(s0)
+    80005b7c:	fc040613          	addi	a2,s0,-64
+    80005b80:	4581                	li	a1,0
+    80005b82:	8526                	mv	a0,s1
+    80005b84:	ffffe097          	auipc	ra,0xffffe
+    80005b88:	530080e7          	jalr	1328(ra) # 800040b4 <writei>
+    80005b8c:	47c1                	li	a5,16
+    80005b8e:	0af51563          	bne	a0,a5,80005c38 <sys_unlink+0x17c>
+  if(ip->type == T_DIR){
+    80005b92:	04491703          	lh	a4,68(s2)
+    80005b96:	4785                	li	a5,1
+    80005b98:	0af70863          	beq	a4,a5,80005c48 <sys_unlink+0x18c>
+  iunlockput(dp);
+    80005b9c:	8526                	mv	a0,s1
+    80005b9e:	ffffe097          	auipc	ra,0xffffe
+    80005ba2:	3cc080e7          	jalr	972(ra) # 80003f6a <iunlockput>
+  ip->nlink--;
+    80005ba6:	04a95783          	lhu	a5,74(s2)
+    80005baa:	37fd                	addiw	a5,a5,-1
+    80005bac:	04f91523          	sh	a5,74(s2)
+  iupdate(ip);
+    80005bb0:	854a                	mv	a0,s2
+    80005bb2:	ffffe097          	auipc	ra,0xffffe
+    80005bb6:	08a080e7          	jalr	138(ra) # 80003c3c <iupdate>
+  iunlockput(ip);
+    80005bba:	854a                	mv	a0,s2
+    80005bbc:	ffffe097          	auipc	ra,0xffffe
+    80005bc0:	3ae080e7          	jalr	942(ra) # 80003f6a <iunlockput>
+  end_op();
+    80005bc4:	fffff097          	auipc	ra,0xfffff
+    80005bc8:	b9e080e7          	jalr	-1122(ra) # 80004762 <end_op>
+  return 0;
+    80005bcc:	4501                	li	a0,0
+    80005bce:	a84d                	j	80005c80 <sys_unlink+0x1c4>
+    end_op();
+    80005bd0:	fffff097          	auipc	ra,0xfffff
+    80005bd4:	b92080e7          	jalr	-1134(ra) # 80004762 <end_op>
+    return -1;
+    80005bd8:	557d                	li	a0,-1
+    80005bda:	a05d                	j	80005c80 <sys_unlink+0x1c4>
+    panic("unlink: nlink < 1");
+    80005bdc:	00003517          	auipc	a0,0x3
+    80005be0:	bbc50513          	addi	a0,a0,-1092 # 80008798 <syscalls+0x310>
+    80005be4:	ffffb097          	auipc	ra,0xffffb
+    80005be8:	956080e7          	jalr	-1706(ra) # 8000053a <panic>
+  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
+    80005bec:	04c92703          	lw	a4,76(s2)
+    80005bf0:	02000793          	li	a5,32
+    80005bf4:	f6e7f9e3          	bgeu	a5,a4,80005b66 <sys_unlink+0xaa>
+    80005bf8:	02000993          	li	s3,32
+    if(readi(dp, 0, (uint64)&de, off, sizeof(de)) != sizeof(de))
+    80005bfc:	4741                	li	a4,16
+    80005bfe:	86ce                	mv	a3,s3
+    80005c00:	f1840613          	addi	a2,s0,-232
+    80005c04:	4581                	li	a1,0
+    80005c06:	854a                	mv	a0,s2
+    80005c08:	ffffe097          	auipc	ra,0xffffe
+    80005c0c:	3b4080e7          	jalr	948(ra) # 80003fbc <readi>
+    80005c10:	47c1                	li	a5,16
+    80005c12:	00f51b63          	bne	a0,a5,80005c28 <sys_unlink+0x16c>
+    if(de.inum != 0)
+    80005c16:	f1845783          	lhu	a5,-232(s0)
+    80005c1a:	e7a1                	bnez	a5,80005c62 <sys_unlink+0x1a6>
+  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
+    80005c1c:	29c1                	addiw	s3,s3,16
+    80005c1e:	04c92783          	lw	a5,76(s2)
+    80005c22:	fcf9ede3          	bltu	s3,a5,80005bfc <sys_unlink+0x140>
+    80005c26:	b781                	j	80005b66 <sys_unlink+0xaa>
+      panic("isdirempty: readi");
+    80005c28:	00003517          	auipc	a0,0x3
+    80005c2c:	b8850513          	addi	a0,a0,-1144 # 800087b0 <syscalls+0x328>
+    80005c30:	ffffb097          	auipc	ra,0xffffb
+    80005c34:	90a080e7          	jalr	-1782(ra) # 8000053a <panic>
+    panic("unlink: writei");
+    80005c38:	00003517          	auipc	a0,0x3
+    80005c3c:	b9050513          	addi	a0,a0,-1136 # 800087c8 <syscalls+0x340>
+    80005c40:	ffffb097          	auipc	ra,0xffffb
+    80005c44:	8fa080e7          	jalr	-1798(ra) # 8000053a <panic>
+    dp->nlink--;
+    80005c48:	04a4d783          	lhu	a5,74(s1)
+    80005c4c:	37fd                	addiw	a5,a5,-1
+    80005c4e:	04f49523          	sh	a5,74(s1)
+    iupdate(dp);
+    80005c52:	8526                	mv	a0,s1
+    80005c54:	ffffe097          	auipc	ra,0xffffe
+    80005c58:	fe8080e7          	jalr	-24(ra) # 80003c3c <iupdate>
+    80005c5c:	b781                	j	80005b9c <sys_unlink+0xe0>
+    return -1;
+    80005c5e:	557d                	li	a0,-1
+    80005c60:	a005                	j	80005c80 <sys_unlink+0x1c4>
+    iunlockput(ip);
+    80005c62:	854a                	mv	a0,s2
+    80005c64:	ffffe097          	auipc	ra,0xffffe
+    80005c68:	306080e7          	jalr	774(ra) # 80003f6a <iunlockput>
+  iunlockput(dp);
+    80005c6c:	8526                	mv	a0,s1
+    80005c6e:	ffffe097          	auipc	ra,0xffffe
+    80005c72:	2fc080e7          	jalr	764(ra) # 80003f6a <iunlockput>
+  end_op();
+    80005c76:	fffff097          	auipc	ra,0xfffff
+    80005c7a:	aec080e7          	jalr	-1300(ra) # 80004762 <end_op>
+  return -1;
+    80005c7e:	557d                	li	a0,-1
+}
+    80005c80:	70ae                	ld	ra,232(sp)
+    80005c82:	740e                	ld	s0,224(sp)
+    80005c84:	64ee                	ld	s1,216(sp)
+    80005c86:	694e                	ld	s2,208(sp)
+    80005c88:	69ae                	ld	s3,200(sp)
+    80005c8a:	616d                	addi	sp,sp,240
+    80005c8c:	8082                	ret
+
+0000000080005c8e <sys_open>:
+
+uint64
+sys_open(void)
+{
+    80005c8e:	7131                	addi	sp,sp,-192
+    80005c90:	fd06                	sd	ra,184(sp)
+    80005c92:	f922                	sd	s0,176(sp)
+    80005c94:	f526                	sd	s1,168(sp)
+    80005c96:	f14a                	sd	s2,160(sp)
+    80005c98:	ed4e                	sd	s3,152(sp)
+    80005c9a:	0180                	addi	s0,sp,192
+  int fd, omode;
+  struct file *f;
+  struct inode *ip;
+  int n;
+
+  if((n = argstr(0, path, MAXPATH)) < 0 || argint(1, &omode) < 0)
+    80005c9c:	08000613          	li	a2,128
+    80005ca0:	f5040593          	addi	a1,s0,-176
+    80005ca4:	4501                	li	a0,0
+    80005ca6:	ffffd097          	auipc	ra,0xffffd
+    80005caa:	3f0080e7          	jalr	1008(ra) # 80003096 <argstr>
+    return -1;
+    80005cae:	54fd                	li	s1,-1
+  if((n = argstr(0, path, MAXPATH)) < 0 || argint(1, &omode) < 0)
+    80005cb0:	0c054163          	bltz	a0,80005d72 <sys_open+0xe4>
+    80005cb4:	f4c40593          	addi	a1,s0,-180
+    80005cb8:	4505                	li	a0,1
+    80005cba:	ffffd097          	auipc	ra,0xffffd
+    80005cbe:	398080e7          	jalr	920(ra) # 80003052 <argint>
+    80005cc2:	0a054863          	bltz	a0,80005d72 <sys_open+0xe4>
+
+  begin_op();
+    80005cc6:	fffff097          	auipc	ra,0xfffff
+    80005cca:	a1e080e7          	jalr	-1506(ra) # 800046e4 <begin_op>
+
+  if(omode & O_CREATE){
+    80005cce:	f4c42783          	lw	a5,-180(s0)
+    80005cd2:	2007f793          	andi	a5,a5,512
+    80005cd6:	cbdd                	beqz	a5,80005d8c <sys_open+0xfe>
+    ip = create(path, T_FILE, 0, 0);
+    80005cd8:	4681                	li	a3,0
+    80005cda:	4601                	li	a2,0
+    80005cdc:	4589                	li	a1,2
+    80005cde:	f5040513          	addi	a0,s0,-176
+    80005ce2:	00000097          	auipc	ra,0x0
+    80005ce6:	970080e7          	jalr	-1680(ra) # 80005652 <create>
+    80005cea:	892a                	mv	s2,a0
+    if(ip == 0){
+    80005cec:	c959                	beqz	a0,80005d82 <sys_open+0xf4>
+      end_op();
+      return -1;
+    }
+  }
+
+  if(ip->type == T_DEVICE && (ip->major < 0 || ip->major >= NDEV)){
+    80005cee:	04491703          	lh	a4,68(s2)
+    80005cf2:	478d                	li	a5,3
+    80005cf4:	00f71763          	bne	a4,a5,80005d02 <sys_open+0x74>
+    80005cf8:	04695703          	lhu	a4,70(s2)
+    80005cfc:	47a5                	li	a5,9
+    80005cfe:	0ce7ec63          	bltu	a5,a4,80005dd6 <sys_open+0x148>
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+
+  if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
+    80005d02:	fffff097          	auipc	ra,0xfffff
+    80005d06:	dee080e7          	jalr	-530(ra) # 80004af0 <filealloc>
+    80005d0a:	89aa                	mv	s3,a0
+    80005d0c:	10050263          	beqz	a0,80005e10 <sys_open+0x182>
+    80005d10:	00000097          	auipc	ra,0x0
+    80005d14:	900080e7          	jalr	-1792(ra) # 80005610 <fdalloc>
+    80005d18:	84aa                	mv	s1,a0
+    80005d1a:	0e054663          	bltz	a0,80005e06 <sys_open+0x178>
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+
+  if(ip->type == T_DEVICE){
+    80005d1e:	04491703          	lh	a4,68(s2)
+    80005d22:	478d                	li	a5,3
+    80005d24:	0cf70463          	beq	a4,a5,80005dec <sys_open+0x15e>
+    f->type = FD_DEVICE;
+    f->major = ip->major;
+  } else {
+    f->type = FD_INODE;
+    80005d28:	4789                	li	a5,2
+    80005d2a:	00f9a023          	sw	a5,0(s3)
+    f->off = 0;
+    80005d2e:	0209a023          	sw	zero,32(s3)
+  }
+  f->ip = ip;
+    80005d32:	0129bc23          	sd	s2,24(s3)
+  f->readable = !(omode & O_WRONLY);
+    80005d36:	f4c42783          	lw	a5,-180(s0)
+    80005d3a:	0017c713          	xori	a4,a5,1
+    80005d3e:	8b05                	andi	a4,a4,1
+    80005d40:	00e98423          	sb	a4,8(s3)
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+    80005d44:	0037f713          	andi	a4,a5,3
+    80005d48:	00e03733          	snez	a4,a4
+    80005d4c:	00e984a3          	sb	a4,9(s3)
+
+  if((omode & O_TRUNC) && ip->type == T_FILE){
+    80005d50:	4007f793          	andi	a5,a5,1024
+    80005d54:	c791                	beqz	a5,80005d60 <sys_open+0xd2>
+    80005d56:	04491703          	lh	a4,68(s2)
+    80005d5a:	4789                	li	a5,2
+    80005d5c:	08f70f63          	beq	a4,a5,80005dfa <sys_open+0x16c>
+    itrunc(ip);
+  }
+
+  iunlock(ip);
+    80005d60:	854a                	mv	a0,s2
+    80005d62:	ffffe097          	auipc	ra,0xffffe
+    80005d66:	068080e7          	jalr	104(ra) # 80003dca <iunlock>
+  end_op();
+    80005d6a:	fffff097          	auipc	ra,0xfffff
+    80005d6e:	9f8080e7          	jalr	-1544(ra) # 80004762 <end_op>
+
+  return fd;
+}
+    80005d72:	8526                	mv	a0,s1
+    80005d74:	70ea                	ld	ra,184(sp)
+    80005d76:	744a                	ld	s0,176(sp)
+    80005d78:	74aa                	ld	s1,168(sp)
+    80005d7a:	790a                	ld	s2,160(sp)
+    80005d7c:	69ea                	ld	s3,152(sp)
+    80005d7e:	6129                	addi	sp,sp,192
+    80005d80:	8082                	ret
+      end_op();
+    80005d82:	fffff097          	auipc	ra,0xfffff
+    80005d86:	9e0080e7          	jalr	-1568(ra) # 80004762 <end_op>
+      return -1;
+    80005d8a:	b7e5                	j	80005d72 <sys_open+0xe4>
+    if((ip = namei(path)) == 0){
+    80005d8c:	f5040513          	addi	a0,s0,-176
+    80005d90:	ffffe097          	auipc	ra,0xffffe
+    80005d94:	734080e7          	jalr	1844(ra) # 800044c4 <namei>
+    80005d98:	892a                	mv	s2,a0
+    80005d9a:	c905                	beqz	a0,80005dca <sys_open+0x13c>
+    ilock(ip);
+    80005d9c:	ffffe097          	auipc	ra,0xffffe
+    80005da0:	f6c080e7          	jalr	-148(ra) # 80003d08 <ilock>
+    if(ip->type == T_DIR && omode != O_RDONLY){
+    80005da4:	04491703          	lh	a4,68(s2)
+    80005da8:	4785                	li	a5,1
+    80005daa:	f4f712e3          	bne	a4,a5,80005cee <sys_open+0x60>
+    80005dae:	f4c42783          	lw	a5,-180(s0)
+    80005db2:	dba1                	beqz	a5,80005d02 <sys_open+0x74>
+      iunlockput(ip);
+    80005db4:	854a                	mv	a0,s2
+    80005db6:	ffffe097          	auipc	ra,0xffffe
+    80005dba:	1b4080e7          	jalr	436(ra) # 80003f6a <iunlockput>
+      end_op();
+    80005dbe:	fffff097          	auipc	ra,0xfffff
+    80005dc2:	9a4080e7          	jalr	-1628(ra) # 80004762 <end_op>
+      return -1;
+    80005dc6:	54fd                	li	s1,-1
+    80005dc8:	b76d                	j	80005d72 <sys_open+0xe4>
+      end_op();
+    80005dca:	fffff097          	auipc	ra,0xfffff
+    80005dce:	998080e7          	jalr	-1640(ra) # 80004762 <end_op>
+      return -1;
+    80005dd2:	54fd                	li	s1,-1
+    80005dd4:	bf79                	j	80005d72 <sys_open+0xe4>
+    iunlockput(ip);
+    80005dd6:	854a                	mv	a0,s2
+    80005dd8:	ffffe097          	auipc	ra,0xffffe
+    80005ddc:	192080e7          	jalr	402(ra) # 80003f6a <iunlockput>
+    end_op();
+    80005de0:	fffff097          	auipc	ra,0xfffff
+    80005de4:	982080e7          	jalr	-1662(ra) # 80004762 <end_op>
+    return -1;
+    80005de8:	54fd                	li	s1,-1
+    80005dea:	b761                	j	80005d72 <sys_open+0xe4>
+    f->type = FD_DEVICE;
+    80005dec:	00f9a023          	sw	a5,0(s3)
+    f->major = ip->major;
+    80005df0:	04691783          	lh	a5,70(s2)
+    80005df4:	02f99223          	sh	a5,36(s3)
+    80005df8:	bf2d                	j	80005d32 <sys_open+0xa4>
+    itrunc(ip);
+    80005dfa:	854a                	mv	a0,s2
+    80005dfc:	ffffe097          	auipc	ra,0xffffe
+    80005e00:	01a080e7          	jalr	26(ra) # 80003e16 <itrunc>
+    80005e04:	bfb1                	j	80005d60 <sys_open+0xd2>
+      fileclose(f);
+    80005e06:	854e                	mv	a0,s3
+    80005e08:	fffff097          	auipc	ra,0xfffff
+    80005e0c:	da4080e7          	jalr	-604(ra) # 80004bac <fileclose>
+    iunlockput(ip);
+    80005e10:	854a                	mv	a0,s2
+    80005e12:	ffffe097          	auipc	ra,0xffffe
+    80005e16:	158080e7          	jalr	344(ra) # 80003f6a <iunlockput>
+    end_op();
+    80005e1a:	fffff097          	auipc	ra,0xfffff
+    80005e1e:	948080e7          	jalr	-1720(ra) # 80004762 <end_op>
+    return -1;
+    80005e22:	54fd                	li	s1,-1
+    80005e24:	b7b9                	j	80005d72 <sys_open+0xe4>
+
+0000000080005e26 <sys_mkdir>:
+
+uint64
+sys_mkdir(void)
+{
+    80005e26:	7175                	addi	sp,sp,-144
+    80005e28:	e506                	sd	ra,136(sp)
+    80005e2a:	e122                	sd	s0,128(sp)
+    80005e2c:	0900                	addi	s0,sp,144
+  char path[MAXPATH];
+  struct inode *ip;
+
+  begin_op();
+    80005e2e:	fffff097          	auipc	ra,0xfffff
+    80005e32:	8b6080e7          	jalr	-1866(ra) # 800046e4 <begin_op>
+  if(argstr(0, path, MAXPATH) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
+    80005e36:	08000613          	li	a2,128
+    80005e3a:	f7040593          	addi	a1,s0,-144
+    80005e3e:	4501                	li	a0,0
+    80005e40:	ffffd097          	auipc	ra,0xffffd
+    80005e44:	256080e7          	jalr	598(ra) # 80003096 <argstr>
+    80005e48:	02054963          	bltz	a0,80005e7a <sys_mkdir+0x54>
+    80005e4c:	4681                	li	a3,0
+    80005e4e:	4601                	li	a2,0
+    80005e50:	4585                	li	a1,1
+    80005e52:	f7040513          	addi	a0,s0,-144
+    80005e56:	fffff097          	auipc	ra,0xfffff
+    80005e5a:	7fc080e7          	jalr	2044(ra) # 80005652 <create>
+    80005e5e:	cd11                	beqz	a0,80005e7a <sys_mkdir+0x54>
+    end_op();
+    return -1;
+  }
+  iunlockput(ip);
+    80005e60:	ffffe097          	auipc	ra,0xffffe
+    80005e64:	10a080e7          	jalr	266(ra) # 80003f6a <iunlockput>
+  end_op();
+    80005e68:	fffff097          	auipc	ra,0xfffff
+    80005e6c:	8fa080e7          	jalr	-1798(ra) # 80004762 <end_op>
+  return 0;
+    80005e70:	4501                	li	a0,0
+}
+    80005e72:	60aa                	ld	ra,136(sp)
+    80005e74:	640a                	ld	s0,128(sp)
+    80005e76:	6149                	addi	sp,sp,144
+    80005e78:	8082                	ret
+    end_op();
+    80005e7a:	fffff097          	auipc	ra,0xfffff
+    80005e7e:	8e8080e7          	jalr	-1816(ra) # 80004762 <end_op>
+    return -1;
+    80005e82:	557d                	li	a0,-1
+    80005e84:	b7fd                	j	80005e72 <sys_mkdir+0x4c>
+
+0000000080005e86 <sys_mknod>:
+
+uint64
+sys_mknod(void)
+{
+    80005e86:	7135                	addi	sp,sp,-160
+    80005e88:	ed06                	sd	ra,152(sp)
+    80005e8a:	e922                	sd	s0,144(sp)
+    80005e8c:	1100                	addi	s0,sp,160
+  struct inode *ip;
+  char path[MAXPATH];
+  int major, minor;
+
+  begin_op();
+    80005e8e:	fffff097          	auipc	ra,0xfffff
+    80005e92:	856080e7          	jalr	-1962(ra) # 800046e4 <begin_op>
+  if((argstr(0, path, MAXPATH)) < 0 ||
+    80005e96:	08000613          	li	a2,128
+    80005e9a:	f7040593          	addi	a1,s0,-144
+    80005e9e:	4501                	li	a0,0
+    80005ea0:	ffffd097          	auipc	ra,0xffffd
+    80005ea4:	1f6080e7          	jalr	502(ra) # 80003096 <argstr>
+    80005ea8:	04054a63          	bltz	a0,80005efc <sys_mknod+0x76>
+     argint(1, &major) < 0 ||
+    80005eac:	f6c40593          	addi	a1,s0,-148
+    80005eb0:	4505                	li	a0,1
+    80005eb2:	ffffd097          	auipc	ra,0xffffd
+    80005eb6:	1a0080e7          	jalr	416(ra) # 80003052 <argint>
+  if((argstr(0, path, MAXPATH)) < 0 ||
+    80005eba:	04054163          	bltz	a0,80005efc <sys_mknod+0x76>
+     argint(2, &minor) < 0 ||
+    80005ebe:	f6840593          	addi	a1,s0,-152
+    80005ec2:	4509                	li	a0,2
+    80005ec4:	ffffd097          	auipc	ra,0xffffd
+    80005ec8:	18e080e7          	jalr	398(ra) # 80003052 <argint>
+     argint(1, &major) < 0 ||
+    80005ecc:	02054863          	bltz	a0,80005efc <sys_mknod+0x76>
+     (ip = create(path, T_DEVICE, major, minor)) == 0){
+    80005ed0:	f6841683          	lh	a3,-152(s0)
+    80005ed4:	f6c41603          	lh	a2,-148(s0)
+    80005ed8:	458d                	li	a1,3
+    80005eda:	f7040513          	addi	a0,s0,-144
+    80005ede:	fffff097          	auipc	ra,0xfffff
+    80005ee2:	774080e7          	jalr	1908(ra) # 80005652 <create>
+     argint(2, &minor) < 0 ||
+    80005ee6:	c919                	beqz	a0,80005efc <sys_mknod+0x76>
+    end_op();
+    return -1;
+  }
+  iunlockput(ip);
+    80005ee8:	ffffe097          	auipc	ra,0xffffe
+    80005eec:	082080e7          	jalr	130(ra) # 80003f6a <iunlockput>
+  end_op();
+    80005ef0:	fffff097          	auipc	ra,0xfffff
+    80005ef4:	872080e7          	jalr	-1934(ra) # 80004762 <end_op>
+  return 0;
+    80005ef8:	4501                	li	a0,0
+    80005efa:	a031                	j	80005f06 <sys_mknod+0x80>
+    end_op();
+    80005efc:	fffff097          	auipc	ra,0xfffff
+    80005f00:	866080e7          	jalr	-1946(ra) # 80004762 <end_op>
+    return -1;
+    80005f04:	557d                	li	a0,-1
+}
+    80005f06:	60ea                	ld	ra,152(sp)
+    80005f08:	644a                	ld	s0,144(sp)
+    80005f0a:	610d                	addi	sp,sp,160
+    80005f0c:	8082                	ret
+
+0000000080005f0e <sys_chdir>:
+
+uint64
+sys_chdir(void)
+{
+    80005f0e:	7135                	addi	sp,sp,-160
+    80005f10:	ed06                	sd	ra,152(sp)
+    80005f12:	e922                	sd	s0,144(sp)
+    80005f14:	e526                	sd	s1,136(sp)
+    80005f16:	e14a                	sd	s2,128(sp)
+    80005f18:	1100                	addi	s0,sp,160
+  char path[MAXPATH];
+  struct inode *ip;
+  struct proc *p = myproc();
+    80005f1a:	ffffc097          	auipc	ra,0xffffc
+    80005f1e:	e5c080e7          	jalr	-420(ra) # 80001d76 <myproc>
+    80005f22:	892a                	mv	s2,a0
+  
+  begin_op();
+    80005f24:	ffffe097          	auipc	ra,0xffffe
+    80005f28:	7c0080e7          	jalr	1984(ra) # 800046e4 <begin_op>
+  if(argstr(0, path, MAXPATH) < 0 || (ip = namei(path)) == 0){
+    80005f2c:	08000613          	li	a2,128
+    80005f30:	f6040593          	addi	a1,s0,-160
+    80005f34:	4501                	li	a0,0
+    80005f36:	ffffd097          	auipc	ra,0xffffd
+    80005f3a:	160080e7          	jalr	352(ra) # 80003096 <argstr>
+    80005f3e:	04054b63          	bltz	a0,80005f94 <sys_chdir+0x86>
+    80005f42:	f6040513          	addi	a0,s0,-160
+    80005f46:	ffffe097          	auipc	ra,0xffffe
+    80005f4a:	57e080e7          	jalr	1406(ra) # 800044c4 <namei>
+    80005f4e:	84aa                	mv	s1,a0
+    80005f50:	c131                	beqz	a0,80005f94 <sys_chdir+0x86>
+    end_op();
+    return -1;
+  }
+  ilock(ip);
+    80005f52:	ffffe097          	auipc	ra,0xffffe
+    80005f56:	db6080e7          	jalr	-586(ra) # 80003d08 <ilock>
+  if(ip->type != T_DIR){
+    80005f5a:	04449703          	lh	a4,68(s1)
+    80005f5e:	4785                	li	a5,1
+    80005f60:	04f71063          	bne	a4,a5,80005fa0 <sys_chdir+0x92>
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+  iunlock(ip);
+    80005f64:	8526                	mv	a0,s1
+    80005f66:	ffffe097          	auipc	ra,0xffffe
+    80005f6a:	e64080e7          	jalr	-412(ra) # 80003dca <iunlock>
+  iput(p->cwd);
+    80005f6e:	1d093503          	ld	a0,464(s2)
+    80005f72:	ffffe097          	auipc	ra,0xffffe
+    80005f76:	f50080e7          	jalr	-176(ra) # 80003ec2 <iput>
+  end_op();
+    80005f7a:	ffffe097          	auipc	ra,0xffffe
+    80005f7e:	7e8080e7          	jalr	2024(ra) # 80004762 <end_op>
+  p->cwd = ip;
+    80005f82:	1c993823          	sd	s1,464(s2)
+  return 0;
+    80005f86:	4501                	li	a0,0
+}
+    80005f88:	60ea                	ld	ra,152(sp)
+    80005f8a:	644a                	ld	s0,144(sp)
+    80005f8c:	64aa                	ld	s1,136(sp)
+    80005f8e:	690a                	ld	s2,128(sp)
+    80005f90:	610d                	addi	sp,sp,160
+    80005f92:	8082                	ret
+    end_op();
+    80005f94:	ffffe097          	auipc	ra,0xffffe
+    80005f98:	7ce080e7          	jalr	1998(ra) # 80004762 <end_op>
+    return -1;
+    80005f9c:	557d                	li	a0,-1
+    80005f9e:	b7ed                	j	80005f88 <sys_chdir+0x7a>
+    iunlockput(ip);
+    80005fa0:	8526                	mv	a0,s1
+    80005fa2:	ffffe097          	auipc	ra,0xffffe
+    80005fa6:	fc8080e7          	jalr	-56(ra) # 80003f6a <iunlockput>
+    end_op();
+    80005faa:	ffffe097          	auipc	ra,0xffffe
+    80005fae:	7b8080e7          	jalr	1976(ra) # 80004762 <end_op>
+    return -1;
+    80005fb2:	557d                	li	a0,-1
+    80005fb4:	bfd1                	j	80005f88 <sys_chdir+0x7a>
+
+0000000080005fb6 <sys_exec>:
+
+uint64
+sys_exec(void)
+{
+    80005fb6:	7145                	addi	sp,sp,-464
+    80005fb8:	e786                	sd	ra,456(sp)
+    80005fba:	e3a2                	sd	s0,448(sp)
+    80005fbc:	ff26                	sd	s1,440(sp)
+    80005fbe:	fb4a                	sd	s2,432(sp)
+    80005fc0:	f74e                	sd	s3,424(sp)
+    80005fc2:	f352                	sd	s4,416(sp)
+    80005fc4:	ef56                	sd	s5,408(sp)
+    80005fc6:	0b80                	addi	s0,sp,464
+  char path[MAXPATH], *argv[MAXARG];
+  int i;
+  uint64 uargv, uarg;
+
+  if(argstr(0, path, MAXPATH) < 0 || argaddr(1, &uargv) < 0){
+    80005fc8:	08000613          	li	a2,128
+    80005fcc:	f4040593          	addi	a1,s0,-192
+    80005fd0:	4501                	li	a0,0
+    80005fd2:	ffffd097          	auipc	ra,0xffffd
+    80005fd6:	0c4080e7          	jalr	196(ra) # 80003096 <argstr>
+    return -1;
+    80005fda:	597d                	li	s2,-1
+  if(argstr(0, path, MAXPATH) < 0 || argaddr(1, &uargv) < 0){
+    80005fdc:	0c054b63          	bltz	a0,800060b2 <sys_exec+0xfc>
+    80005fe0:	e3840593          	addi	a1,s0,-456
+    80005fe4:	4505                	li	a0,1
+    80005fe6:	ffffd097          	auipc	ra,0xffffd
+    80005fea:	08e080e7          	jalr	142(ra) # 80003074 <argaddr>
+    80005fee:	0c054263          	bltz	a0,800060b2 <sys_exec+0xfc>
+  }
+  memset(argv, 0, sizeof(argv));
+    80005ff2:	10000613          	li	a2,256
+    80005ff6:	4581                	li	a1,0
+    80005ff8:	e4040513          	addi	a0,s0,-448
+    80005ffc:	ffffb097          	auipc	ra,0xffffb
+    80006000:	cd0080e7          	jalr	-816(ra) # 80000ccc <memset>
+  for(i=0;; i++){
+    if(i >= NELEM(argv)){
+    80006004:	e4040493          	addi	s1,s0,-448
+  memset(argv, 0, sizeof(argv));
+    80006008:	89a6                	mv	s3,s1
+    8000600a:	4901                	li	s2,0
+    if(i >= NELEM(argv)){
+    8000600c:	02000a13          	li	s4,32
+    80006010:	00090a9b          	sext.w	s5,s2
+      goto bad;
+    }
+    if(fetchaddr(uargv+sizeof(uint64)*i, (uint64*)&uarg) < 0){
+    80006014:	00391513          	slli	a0,s2,0x3
+    80006018:	e3040593          	addi	a1,s0,-464
+    8000601c:	e3843783          	ld	a5,-456(s0)
+    80006020:	953e                	add	a0,a0,a5
+    80006022:	ffffd097          	auipc	ra,0xffffd
+    80006026:	f96080e7          	jalr	-106(ra) # 80002fb8 <fetchaddr>
+    8000602a:	02054a63          	bltz	a0,8000605e <sys_exec+0xa8>
+      goto bad;
+    }
+    if(uarg == 0){
+    8000602e:	e3043783          	ld	a5,-464(s0)
+    80006032:	c3b9                	beqz	a5,80006078 <sys_exec+0xc2>
+      argv[i] = 0;
+      break;
+    }
+    argv[i] = kalloc();
+    80006034:	ffffb097          	auipc	ra,0xffffb
+    80006038:	aac080e7          	jalr	-1364(ra) # 80000ae0 <kalloc>
+    8000603c:	85aa                	mv	a1,a0
+    8000603e:	00a9b023          	sd	a0,0(s3)
+    if(argv[i] == 0)
+    80006042:	cd11                	beqz	a0,8000605e <sys_exec+0xa8>
+      goto bad;
+    if(fetchstr(uarg, argv[i], PGSIZE) < 0)
+    80006044:	6605                	lui	a2,0x1
+    80006046:	e3043503          	ld	a0,-464(s0)
+    8000604a:	ffffd097          	auipc	ra,0xffffd
+    8000604e:	fc0080e7          	jalr	-64(ra) # 8000300a <fetchstr>
+    80006052:	00054663          	bltz	a0,8000605e <sys_exec+0xa8>
+    if(i >= NELEM(argv)){
+    80006056:	0905                	addi	s2,s2,1
+    80006058:	09a1                	addi	s3,s3,8
+    8000605a:	fb491be3          	bne	s2,s4,80006010 <sys_exec+0x5a>
+    kfree(argv[i]);
+
+  return ret;
+
+ bad:
+  for(i = 0; i < NELEM(argv) && argv[i] != 0; i++)
+    8000605e:	f4040913          	addi	s2,s0,-192
+    80006062:	6088                	ld	a0,0(s1)
+    80006064:	c531                	beqz	a0,800060b0 <sys_exec+0xfa>
+    kfree(argv[i]);
+    80006066:	ffffb097          	auipc	ra,0xffffb
+    8000606a:	97c080e7          	jalr	-1668(ra) # 800009e2 <kfree>
+  for(i = 0; i < NELEM(argv) && argv[i] != 0; i++)
+    8000606e:	04a1                	addi	s1,s1,8
+    80006070:	ff2499e3          	bne	s1,s2,80006062 <sys_exec+0xac>
+  return -1;
+    80006074:	597d                	li	s2,-1
+    80006076:	a835                	j	800060b2 <sys_exec+0xfc>
+      argv[i] = 0;
+    80006078:	0a8e                	slli	s5,s5,0x3
+    8000607a:	fc0a8793          	addi	a5,s5,-64 # ffffffffffffefc0 <end+0xffffffff7ffd5fc0>
+    8000607e:	00878ab3          	add	s5,a5,s0
+    80006082:	e80ab023          	sd	zero,-384(s5)
+  int ret = exec(path, argv);
+    80006086:	e4040593          	addi	a1,s0,-448
+    8000608a:	f4040513          	addi	a0,s0,-192
+    8000608e:	fffff097          	auipc	ra,0xfffff
+    80006092:	172080e7          	jalr	370(ra) # 80005200 <exec>
+    80006096:	892a                	mv	s2,a0
+  for(i = 0; i < NELEM(argv) && argv[i] != 0; i++)
+    80006098:	f4040993          	addi	s3,s0,-192
+    8000609c:	6088                	ld	a0,0(s1)
+    8000609e:	c911                	beqz	a0,800060b2 <sys_exec+0xfc>
+    kfree(argv[i]);
+    800060a0:	ffffb097          	auipc	ra,0xffffb
+    800060a4:	942080e7          	jalr	-1726(ra) # 800009e2 <kfree>
+  for(i = 0; i < NELEM(argv) && argv[i] != 0; i++)
+    800060a8:	04a1                	addi	s1,s1,8
+    800060aa:	ff3499e3          	bne	s1,s3,8000609c <sys_exec+0xe6>
+    800060ae:	a011                	j	800060b2 <sys_exec+0xfc>
+  return -1;
+    800060b0:	597d                	li	s2,-1
+}
+    800060b2:	854a                	mv	a0,s2
+    800060b4:	60be                	ld	ra,456(sp)
+    800060b6:	641e                	ld	s0,448(sp)
+    800060b8:	74fa                	ld	s1,440(sp)
+    800060ba:	795a                	ld	s2,432(sp)
+    800060bc:	79ba                	ld	s3,424(sp)
+    800060be:	7a1a                	ld	s4,416(sp)
+    800060c0:	6afa                	ld	s5,408(sp)
+    800060c2:	6179                	addi	sp,sp,464
+    800060c4:	8082                	ret
+
+00000000800060c6 <sys_pipe>:
+
+uint64
+sys_pipe(void)
+{
+    800060c6:	7139                	addi	sp,sp,-64
+    800060c8:	fc06                	sd	ra,56(sp)
+    800060ca:	f822                	sd	s0,48(sp)
+    800060cc:	f426                	sd	s1,40(sp)
+    800060ce:	0080                	addi	s0,sp,64
+  uint64 fdarray; // user pointer to array of two integers
+  struct file *rf, *wf;
+  int fd0, fd1;
+  struct proc *p = myproc();
+    800060d0:	ffffc097          	auipc	ra,0xffffc
+    800060d4:	ca6080e7          	jalr	-858(ra) # 80001d76 <myproc>
+    800060d8:	84aa                	mv	s1,a0
+
+  if(argaddr(0, &fdarray) < 0)
+    800060da:	fd840593          	addi	a1,s0,-40
+    800060de:	4501                	li	a0,0
+    800060e0:	ffffd097          	auipc	ra,0xffffd
+    800060e4:	f94080e7          	jalr	-108(ra) # 80003074 <argaddr>
+    return -1;
+    800060e8:	57fd                	li	a5,-1
+  if(argaddr(0, &fdarray) < 0)
+    800060ea:	0e054063          	bltz	a0,800061ca <sys_pipe+0x104>
+  if(pipealloc(&rf, &wf) < 0)
+    800060ee:	fc840593          	addi	a1,s0,-56
+    800060f2:	fd040513          	addi	a0,s0,-48
+    800060f6:	fffff097          	auipc	ra,0xfffff
+    800060fa:	de6080e7          	jalr	-538(ra) # 80004edc <pipealloc>
+    return -1;
+    800060fe:	57fd                	li	a5,-1
+  if(pipealloc(&rf, &wf) < 0)
+    80006100:	0c054563          	bltz	a0,800061ca <sys_pipe+0x104>
+  fd0 = -1;
+    80006104:	fcf42223          	sw	a5,-60(s0)
+  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
+    80006108:	fd043503          	ld	a0,-48(s0)
+    8000610c:	fffff097          	auipc	ra,0xfffff
+    80006110:	504080e7          	jalr	1284(ra) # 80005610 <fdalloc>
+    80006114:	fca42223          	sw	a0,-60(s0)
+    80006118:	08054c63          	bltz	a0,800061b0 <sys_pipe+0xea>
+    8000611c:	fc843503          	ld	a0,-56(s0)
+    80006120:	fffff097          	auipc	ra,0xfffff
+    80006124:	4f0080e7          	jalr	1264(ra) # 80005610 <fdalloc>
+    80006128:	fca42023          	sw	a0,-64(s0)
+    8000612c:	06054963          	bltz	a0,8000619e <sys_pipe+0xd8>
+      p->ofile[fd0] = 0;
+    fileclose(rf);
+    fileclose(wf);
+    return -1;
+  }
+  if(copyout(p->pagetable, fdarray, (char*)&fd0, sizeof(fd0)) < 0 ||
+    80006130:	4691                	li	a3,4
+    80006132:	fc440613          	addi	a2,s0,-60
+    80006136:	fd843583          	ld	a1,-40(s0)
+    8000613a:	68a8                	ld	a0,80(s1)
+    8000613c:	ffffb097          	auipc	ra,0xffffb
+    80006140:	526080e7          	jalr	1318(ra) # 80001662 <copyout>
+    80006144:	02054063          	bltz	a0,80006164 <sys_pipe+0x9e>
+     copyout(p->pagetable, fdarray+sizeof(fd0), (char *)&fd1, sizeof(fd1)) < 0){
+    80006148:	4691                	li	a3,4
+    8000614a:	fc040613          	addi	a2,s0,-64
+    8000614e:	fd843583          	ld	a1,-40(s0)
+    80006152:	0591                	addi	a1,a1,4
+    80006154:	68a8                	ld	a0,80(s1)
+    80006156:	ffffb097          	auipc	ra,0xffffb
+    8000615a:	50c080e7          	jalr	1292(ra) # 80001662 <copyout>
+    p->ofile[fd1] = 0;
+    fileclose(rf);
+    fileclose(wf);
+    return -1;
+  }
+  return 0;
+    8000615e:	4781                	li	a5,0
+  if(copyout(p->pagetable, fdarray, (char*)&fd0, sizeof(fd0)) < 0 ||
+    80006160:	06055563          	bgez	a0,800061ca <sys_pipe+0x104>
+    p->ofile[fd0] = 0;
+    80006164:	fc442783          	lw	a5,-60(s0)
+    80006168:	07e9                	addi	a5,a5,26
+    8000616a:	078e                	slli	a5,a5,0x3
+    8000616c:	97a6                	add	a5,a5,s1
+    8000616e:	0007b023          	sd	zero,0(a5)
+    p->ofile[fd1] = 0;
+    80006172:	fc042783          	lw	a5,-64(s0)
+    80006176:	07e9                	addi	a5,a5,26
+    80006178:	078e                	slli	a5,a5,0x3
+    8000617a:	00f48533          	add	a0,s1,a5
+    8000617e:	00053023          	sd	zero,0(a0)
+    fileclose(rf);
+    80006182:	fd043503          	ld	a0,-48(s0)
+    80006186:	fffff097          	auipc	ra,0xfffff
+    8000618a:	a26080e7          	jalr	-1498(ra) # 80004bac <fileclose>
+    fileclose(wf);
+    8000618e:	fc843503          	ld	a0,-56(s0)
+    80006192:	fffff097          	auipc	ra,0xfffff
+    80006196:	a1a080e7          	jalr	-1510(ra) # 80004bac <fileclose>
+    return -1;
+    8000619a:	57fd                	li	a5,-1
+    8000619c:	a03d                	j	800061ca <sys_pipe+0x104>
+    if(fd0 >= 0)
+    8000619e:	fc442783          	lw	a5,-60(s0)
+    800061a2:	0007c763          	bltz	a5,800061b0 <sys_pipe+0xea>
+      p->ofile[fd0] = 0;
+    800061a6:	07e9                	addi	a5,a5,26
+    800061a8:	078e                	slli	a5,a5,0x3
+    800061aa:	97a6                	add	a5,a5,s1
+    800061ac:	0007b023          	sd	zero,0(a5)
+    fileclose(rf);
+    800061b0:	fd043503          	ld	a0,-48(s0)
+    800061b4:	fffff097          	auipc	ra,0xfffff
+    800061b8:	9f8080e7          	jalr	-1544(ra) # 80004bac <fileclose>
+    fileclose(wf);
+    800061bc:	fc843503          	ld	a0,-56(s0)
+    800061c0:	fffff097          	auipc	ra,0xfffff
+    800061c4:	9ec080e7          	jalr	-1556(ra) # 80004bac <fileclose>
+    return -1;
+    800061c8:	57fd                	li	a5,-1
+}
+    800061ca:	853e                	mv	a0,a5
+    800061cc:	70e2                	ld	ra,56(sp)
+    800061ce:	7442                	ld	s0,48(sp)
+    800061d0:	74a2                	ld	s1,40(sp)
+    800061d2:	6121                	addi	sp,sp,64
+    800061d4:	8082                	ret
+	...
+
+00000000800061e0 <kernelvec>:
+    800061e0:	7111                	addi	sp,sp,-256
+    800061e2:	e006                	sd	ra,0(sp)
+    800061e4:	e40a                	sd	sp,8(sp)
+    800061e6:	e80e                	sd	gp,16(sp)
+    800061e8:	ec12                	sd	tp,24(sp)
+    800061ea:	f016                	sd	t0,32(sp)
+    800061ec:	f41a                	sd	t1,40(sp)
+    800061ee:	f81e                	sd	t2,48(sp)
+    800061f0:	fc22                	sd	s0,56(sp)
+    800061f2:	e0a6                	sd	s1,64(sp)
+    800061f4:	e4aa                	sd	a0,72(sp)
+    800061f6:	e8ae                	sd	a1,80(sp)
+    800061f8:	ecb2                	sd	a2,88(sp)
+    800061fa:	f0b6                	sd	a3,96(sp)
+    800061fc:	f4ba                	sd	a4,104(sp)
+    800061fe:	f8be                	sd	a5,112(sp)
+    80006200:	fcc2                	sd	a6,120(sp)
+    80006202:	e146                	sd	a7,128(sp)
+    80006204:	e54a                	sd	s2,136(sp)
+    80006206:	e94e                	sd	s3,144(sp)
+    80006208:	ed52                	sd	s4,152(sp)
+    8000620a:	f156                	sd	s5,160(sp)
+    8000620c:	f55a                	sd	s6,168(sp)
+    8000620e:	f95e                	sd	s7,176(sp)
+    80006210:	fd62                	sd	s8,184(sp)
+    80006212:	e1e6                	sd	s9,192(sp)
+    80006214:	e5ea                	sd	s10,200(sp)
+    80006216:	e9ee                	sd	s11,208(sp)
+    80006218:	edf2                	sd	t3,216(sp)
+    8000621a:	f1f6                	sd	t4,224(sp)
+    8000621c:	f5fa                	sd	t5,232(sp)
+    8000621e:	f9fe                	sd	t6,240(sp)
+    80006220:	c47fc0ef          	jal	ra,80002e66 <kerneltrap>
+    80006224:	6082                	ld	ra,0(sp)
+    80006226:	6122                	ld	sp,8(sp)
+    80006228:	61c2                	ld	gp,16(sp)
+    8000622a:	7282                	ld	t0,32(sp)
+    8000622c:	7322                	ld	t1,40(sp)
+    8000622e:	73c2                	ld	t2,48(sp)
+    80006230:	7462                	ld	s0,56(sp)
+    80006232:	6486                	ld	s1,64(sp)
+    80006234:	6526                	ld	a0,72(sp)
+    80006236:	65c6                	ld	a1,80(sp)
+    80006238:	6666                	ld	a2,88(sp)
+    8000623a:	7686                	ld	a3,96(sp)
+    8000623c:	7726                	ld	a4,104(sp)
+    8000623e:	77c6                	ld	a5,112(sp)
+    80006240:	7866                	ld	a6,120(sp)
+    80006242:	688a                	ld	a7,128(sp)
+    80006244:	692a                	ld	s2,136(sp)
+    80006246:	69ca                	ld	s3,144(sp)
+    80006248:	6a6a                	ld	s4,152(sp)
+    8000624a:	7a8a                	ld	s5,160(sp)
+    8000624c:	7b2a                	ld	s6,168(sp)
+    8000624e:	7bca                	ld	s7,176(sp)
+    80006250:	7c6a                	ld	s8,184(sp)
+    80006252:	6c8e                	ld	s9,192(sp)
+    80006254:	6d2e                	ld	s10,200(sp)
+    80006256:	6dce                	ld	s11,208(sp)
+    80006258:	6e6e                	ld	t3,216(sp)
+    8000625a:	7e8e                	ld	t4,224(sp)
+    8000625c:	7f2e                	ld	t5,232(sp)
+    8000625e:	7fce                	ld	t6,240(sp)
+    80006260:	6111                	addi	sp,sp,256
+    80006262:	10200073          	sret
+    80006266:	00000013          	nop
+    8000626a:	00000013          	nop
+    8000626e:	0001                	nop
+
+0000000080006270 <timervec>:
+    80006270:	34051573          	csrrw	a0,mscratch,a0
+    80006274:	e10c                	sd	a1,0(a0)
+    80006276:	e510                	sd	a2,8(a0)
+    80006278:	e914                	sd	a3,16(a0)
+    8000627a:	6d0c                	ld	a1,24(a0)
+    8000627c:	7110                	ld	a2,32(a0)
+    8000627e:	6194                	ld	a3,0(a1)
+    80006280:	96b2                	add	a3,a3,a2
+    80006282:	e194                	sd	a3,0(a1)
+    80006284:	4589                	li	a1,2
+    80006286:	14459073          	csrw	sip,a1
+    8000628a:	6914                	ld	a3,16(a0)
+    8000628c:	6510                	ld	a2,8(a0)
+    8000628e:	610c                	ld	a1,0(a0)
+    80006290:	34051573          	csrrw	a0,mscratch,a0
+    80006294:	30200073          	mret
+	...
+
+000000008000629a <plicinit>:
+// the riscv Platform Level Interrupt Controller (PLIC).
+//
+
+void
+plicinit(void)
+{
+    8000629a:	1141                	addi	sp,sp,-16
+    8000629c:	e422                	sd	s0,8(sp)
+    8000629e:	0800                	addi	s0,sp,16
+  // set desired IRQ priorities non-zero (otherwise disabled).
+  *(uint32*)(PLIC + UART0_IRQ*4) = 1;
+    800062a0:	0c0007b7          	lui	a5,0xc000
+    800062a4:	4705                	li	a4,1
+    800062a6:	d798                	sw	a4,40(a5)
+  *(uint32*)(PLIC + VIRTIO0_IRQ*4) = 1;
+    800062a8:	c3d8                	sw	a4,4(a5)
+}
+    800062aa:	6422                	ld	s0,8(sp)
+    800062ac:	0141                	addi	sp,sp,16
+    800062ae:	8082                	ret
+
+00000000800062b0 <plicinithart>:
+
+void
+plicinithart(void)
+{
+    800062b0:	1141                	addi	sp,sp,-16
+    800062b2:	e406                	sd	ra,8(sp)
+    800062b4:	e022                	sd	s0,0(sp)
+    800062b6:	0800                	addi	s0,sp,16
+  int hart = cpuid();
+    800062b8:	ffffc097          	auipc	ra,0xffffc
+    800062bc:	a92080e7          	jalr	-1390(ra) # 80001d4a <cpuid>
+  
+  // set uart's enable bit for this hart's S-mode. 
+  *(uint32*)PLIC_SENABLE(hart)= (1 << UART0_IRQ) | (1 << VIRTIO0_IRQ);
+    800062c0:	0085171b          	slliw	a4,a0,0x8
+    800062c4:	0c0027b7          	lui	a5,0xc002
+    800062c8:	97ba                	add	a5,a5,a4
+    800062ca:	40200713          	li	a4,1026
+    800062ce:	08e7a023          	sw	a4,128(a5) # c002080 <_entry-0x73ffdf80>
+
+  // set this hart's S-mode priority threshold to 0.
+  *(uint32*)PLIC_SPRIORITY(hart) = 0;
+    800062d2:	00d5151b          	slliw	a0,a0,0xd
+    800062d6:	0c2017b7          	lui	a5,0xc201
+    800062da:	97aa                	add	a5,a5,a0
+    800062dc:	0007a023          	sw	zero,0(a5) # c201000 <_entry-0x73dff000>
+}
+    800062e0:	60a2                	ld	ra,8(sp)
+    800062e2:	6402                	ld	s0,0(sp)
+    800062e4:	0141                	addi	sp,sp,16
+    800062e6:	8082                	ret
+
+00000000800062e8 <plic_claim>:
+
+// ask the PLIC what interrupt we should serve.
+int
+plic_claim(void)
+{
+    800062e8:	1141                	addi	sp,sp,-16
+    800062ea:	e406                	sd	ra,8(sp)
+    800062ec:	e022                	sd	s0,0(sp)
+    800062ee:	0800                	addi	s0,sp,16
+  int hart = cpuid();
+    800062f0:	ffffc097          	auipc	ra,0xffffc
+    800062f4:	a5a080e7          	jalr	-1446(ra) # 80001d4a <cpuid>
+  int irq = *(uint32*)PLIC_SCLAIM(hart);
+    800062f8:	00d5151b          	slliw	a0,a0,0xd
+    800062fc:	0c2017b7          	lui	a5,0xc201
+    80006300:	97aa                	add	a5,a5,a0
+  return irq;
+}
+    80006302:	43c8                	lw	a0,4(a5)
+    80006304:	60a2                	ld	ra,8(sp)
+    80006306:	6402                	ld	s0,0(sp)
+    80006308:	0141                	addi	sp,sp,16
+    8000630a:	8082                	ret
+
+000000008000630c <plic_complete>:
+
+// tell the PLIC we've served this IRQ.
+void
+plic_complete(int irq)
+{
+    8000630c:	1101                	addi	sp,sp,-32
+    8000630e:	ec06                	sd	ra,24(sp)
+    80006310:	e822                	sd	s0,16(sp)
+    80006312:	e426                	sd	s1,8(sp)
+    80006314:	1000                	addi	s0,sp,32
+    80006316:	84aa                	mv	s1,a0
+  int hart = cpuid();
+    80006318:	ffffc097          	auipc	ra,0xffffc
+    8000631c:	a32080e7          	jalr	-1486(ra) # 80001d4a <cpuid>
+  *(uint32*)PLIC_SCLAIM(hart) = irq;
+    80006320:	00d5151b          	slliw	a0,a0,0xd
+    80006324:	0c2017b7          	lui	a5,0xc201
+    80006328:	97aa                	add	a5,a5,a0
+    8000632a:	c3c4                	sw	s1,4(a5)
+}
+    8000632c:	60e2                	ld	ra,24(sp)
+    8000632e:	6442                	ld	s0,16(sp)
+    80006330:	64a2                	ld	s1,8(sp)
+    80006332:	6105                	addi	sp,sp,32
+    80006334:	8082                	ret
+
+0000000080006336 <free_desc>:
+}
+
+// mark a descriptor as free.
+static void
+free_desc(int i)
+{
+    80006336:	1141                	addi	sp,sp,-16
+    80006338:	e406                	sd	ra,8(sp)
+    8000633a:	e022                	sd	s0,0(sp)
+    8000633c:	0800                	addi	s0,sp,16
+  if(i >= NUM)
+    8000633e:	479d                	li	a5,7
+    80006340:	06a7c863          	blt	a5,a0,800063b0 <free_desc+0x7a>
+    panic("free_desc 1");
+  if(disk.free[i])
+    80006344:	00020717          	auipc	a4,0x20
+    80006348:	cbc70713          	addi	a4,a4,-836 # 80026000 <disk>
+    8000634c:	972a                	add	a4,a4,a0
+    8000634e:	6789                	lui	a5,0x2
+    80006350:	97ba                	add	a5,a5,a4
+    80006352:	0187c783          	lbu	a5,24(a5) # 2018 <_entry-0x7fffdfe8>
+    80006356:	e7ad                	bnez	a5,800063c0 <free_desc+0x8a>
+    panic("free_desc 2");
+  disk.desc[i].addr = 0;
+    80006358:	00451793          	slli	a5,a0,0x4
+    8000635c:	00022717          	auipc	a4,0x22
+    80006360:	ca470713          	addi	a4,a4,-860 # 80028000 <disk+0x2000>
+    80006364:	6314                	ld	a3,0(a4)
+    80006366:	96be                	add	a3,a3,a5
+    80006368:	0006b023          	sd	zero,0(a3)
+  disk.desc[i].len = 0;
+    8000636c:	6314                	ld	a3,0(a4)
+    8000636e:	96be                	add	a3,a3,a5
+    80006370:	0006a423          	sw	zero,8(a3)
+  disk.desc[i].flags = 0;
+    80006374:	6314                	ld	a3,0(a4)
+    80006376:	96be                	add	a3,a3,a5
+    80006378:	00069623          	sh	zero,12(a3)
+  disk.desc[i].next = 0;
+    8000637c:	6318                	ld	a4,0(a4)
+    8000637e:	97ba                	add	a5,a5,a4
+    80006380:	00079723          	sh	zero,14(a5)
+  disk.free[i] = 1;
+    80006384:	00020717          	auipc	a4,0x20
+    80006388:	c7c70713          	addi	a4,a4,-900 # 80026000 <disk>
+    8000638c:	972a                	add	a4,a4,a0
+    8000638e:	6789                	lui	a5,0x2
+    80006390:	97ba                	add	a5,a5,a4
+    80006392:	4705                	li	a4,1
+    80006394:	00e78c23          	sb	a4,24(a5) # 2018 <_entry-0x7fffdfe8>
+  wakeup(&disk.free[0]);
+    80006398:	00022517          	auipc	a0,0x22
+    8000639c:	c8050513          	addi	a0,a0,-896 # 80028018 <disk+0x2018>
+    800063a0:	ffffc097          	auipc	ra,0xffffc
+    800063a4:	398080e7          	jalr	920(ra) # 80002738 <wakeup>
+}
+    800063a8:	60a2                	ld	ra,8(sp)
+    800063aa:	6402                	ld	s0,0(sp)
+    800063ac:	0141                	addi	sp,sp,16
+    800063ae:	8082                	ret
+    panic("free_desc 1");
+    800063b0:	00002517          	auipc	a0,0x2
+    800063b4:	42850513          	addi	a0,a0,1064 # 800087d8 <syscalls+0x350>
+    800063b8:	ffffa097          	auipc	ra,0xffffa
+    800063bc:	182080e7          	jalr	386(ra) # 8000053a <panic>
+    panic("free_desc 2");
+    800063c0:	00002517          	auipc	a0,0x2
+    800063c4:	42850513          	addi	a0,a0,1064 # 800087e8 <syscalls+0x360>
+    800063c8:	ffffa097          	auipc	ra,0xffffa
+    800063cc:	172080e7          	jalr	370(ra) # 8000053a <panic>
+
+00000000800063d0 <virtio_disk_init>:
+{
+    800063d0:	1101                	addi	sp,sp,-32
+    800063d2:	ec06                	sd	ra,24(sp)
+    800063d4:	e822                	sd	s0,16(sp)
+    800063d6:	e426                	sd	s1,8(sp)
+    800063d8:	1000                	addi	s0,sp,32
+  initlock(&disk.vdisk_lock, "virtio_disk");
+    800063da:	00002597          	auipc	a1,0x2
+    800063de:	41e58593          	addi	a1,a1,1054 # 800087f8 <syscalls+0x370>
+    800063e2:	00022517          	auipc	a0,0x22
+    800063e6:	d4650513          	addi	a0,a0,-698 # 80028128 <disk+0x2128>
+    800063ea:	ffffa097          	auipc	ra,0xffffa
+    800063ee:	756080e7          	jalr	1878(ra) # 80000b40 <initlock>
+  if(*R(VIRTIO_MMIO_MAGIC_VALUE) != 0x74726976 ||
+    800063f2:	100017b7          	lui	a5,0x10001
+    800063f6:	4398                	lw	a4,0(a5)
+    800063f8:	2701                	sext.w	a4,a4
+    800063fa:	747277b7          	lui	a5,0x74727
+    800063fe:	97678793          	addi	a5,a5,-1674 # 74726976 <_entry-0xb8d968a>
+    80006402:	0ef71063          	bne	a4,a5,800064e2 <virtio_disk_init+0x112>
+     *R(VIRTIO_MMIO_VERSION) != 1 ||
+    80006406:	100017b7          	lui	a5,0x10001
+    8000640a:	43dc                	lw	a5,4(a5)
+    8000640c:	2781                	sext.w	a5,a5
+  if(*R(VIRTIO_MMIO_MAGIC_VALUE) != 0x74726976 ||
+    8000640e:	4705                	li	a4,1
+    80006410:	0ce79963          	bne	a5,a4,800064e2 <virtio_disk_init+0x112>
+     *R(VIRTIO_MMIO_DEVICE_ID) != 2 ||
+    80006414:	100017b7          	lui	a5,0x10001
+    80006418:	479c                	lw	a5,8(a5)
+    8000641a:	2781                	sext.w	a5,a5
+     *R(VIRTIO_MMIO_VERSION) != 1 ||
+    8000641c:	4709                	li	a4,2
+    8000641e:	0ce79263          	bne	a5,a4,800064e2 <virtio_disk_init+0x112>
+     *R(VIRTIO_MMIO_VENDOR_ID) != 0x554d4551){
+    80006422:	100017b7          	lui	a5,0x10001
+    80006426:	47d8                	lw	a4,12(a5)
+    80006428:	2701                	sext.w	a4,a4
+     *R(VIRTIO_MMIO_DEVICE_ID) != 2 ||
+    8000642a:	554d47b7          	lui	a5,0x554d4
+    8000642e:	55178793          	addi	a5,a5,1361 # 554d4551 <_entry-0x2ab2baaf>
+    80006432:	0af71863          	bne	a4,a5,800064e2 <virtio_disk_init+0x112>
+  *R(VIRTIO_MMIO_STATUS) = status;
+    80006436:	100017b7          	lui	a5,0x10001
+    8000643a:	4705                	li	a4,1
+    8000643c:	dbb8                	sw	a4,112(a5)
+  *R(VIRTIO_MMIO_STATUS) = status;
+    8000643e:	470d                	li	a4,3
+    80006440:	dbb8                	sw	a4,112(a5)
+  uint64 features = *R(VIRTIO_MMIO_DEVICE_FEATURES);
+    80006442:	4b98                	lw	a4,16(a5)
+  *R(VIRTIO_MMIO_DRIVER_FEATURES) = features;
+    80006444:	c7ffe6b7          	lui	a3,0xc7ffe
+    80006448:	75f68693          	addi	a3,a3,1887 # ffffffffc7ffe75f <end+0xffffffff47fd575f>
+    8000644c:	8f75                	and	a4,a4,a3
+    8000644e:	d398                	sw	a4,32(a5)
+  *R(VIRTIO_MMIO_STATUS) = status;
+    80006450:	472d                	li	a4,11
+    80006452:	dbb8                	sw	a4,112(a5)
+  *R(VIRTIO_MMIO_STATUS) = status;
+    80006454:	473d                	li	a4,15
+    80006456:	dbb8                	sw	a4,112(a5)
+  *R(VIRTIO_MMIO_GUEST_PAGE_SIZE) = PGSIZE;
+    80006458:	6705                	lui	a4,0x1
+    8000645a:	d798                	sw	a4,40(a5)
+  *R(VIRTIO_MMIO_QUEUE_SEL) = 0;
+    8000645c:	0207a823          	sw	zero,48(a5) # 10001030 <_entry-0x6fffefd0>
+  uint32 max = *R(VIRTIO_MMIO_QUEUE_NUM_MAX);
+    80006460:	5bdc                	lw	a5,52(a5)
+    80006462:	2781                	sext.w	a5,a5
+  if(max == 0)
+    80006464:	c7d9                	beqz	a5,800064f2 <virtio_disk_init+0x122>
+  if(max < NUM)
+    80006466:	471d                	li	a4,7
+    80006468:	08f77d63          	bgeu	a4,a5,80006502 <virtio_disk_init+0x132>
+  *R(VIRTIO_MMIO_QUEUE_NUM) = NUM;
+    8000646c:	100014b7          	lui	s1,0x10001
+    80006470:	47a1                	li	a5,8
+    80006472:	dc9c                	sw	a5,56(s1)
+  memset(disk.pages, 0, sizeof(disk.pages));
+    80006474:	6609                	lui	a2,0x2
+    80006476:	4581                	li	a1,0
+    80006478:	00020517          	auipc	a0,0x20
+    8000647c:	b8850513          	addi	a0,a0,-1144 # 80026000 <disk>
+    80006480:	ffffb097          	auipc	ra,0xffffb
+    80006484:	84c080e7          	jalr	-1972(ra) # 80000ccc <memset>
+  *R(VIRTIO_MMIO_QUEUE_PFN) = ((uint64)disk.pages) >> PGSHIFT;
+    80006488:	00020717          	auipc	a4,0x20
+    8000648c:	b7870713          	addi	a4,a4,-1160 # 80026000 <disk>
+    80006490:	00c75793          	srli	a5,a4,0xc
+    80006494:	2781                	sext.w	a5,a5
+    80006496:	c0bc                	sw	a5,64(s1)
+  disk.desc = (struct virtq_desc *) disk.pages;
+    80006498:	00022797          	auipc	a5,0x22
+    8000649c:	b6878793          	addi	a5,a5,-1176 # 80028000 <disk+0x2000>
+    800064a0:	e398                	sd	a4,0(a5)
+  disk.avail = (struct virtq_avail *)(disk.pages + NUM*sizeof(struct virtq_desc));
+    800064a2:	00020717          	auipc	a4,0x20
+    800064a6:	bde70713          	addi	a4,a4,-1058 # 80026080 <disk+0x80>
+    800064aa:	e798                	sd	a4,8(a5)
+  disk.used = (struct virtq_used *) (disk.pages + PGSIZE);
+    800064ac:	00021717          	auipc	a4,0x21
+    800064b0:	b5470713          	addi	a4,a4,-1196 # 80027000 <disk+0x1000>
+    800064b4:	eb98                	sd	a4,16(a5)
+    disk.free[i] = 1;
+    800064b6:	4705                	li	a4,1
+    800064b8:	00e78c23          	sb	a4,24(a5)
+    800064bc:	00e78ca3          	sb	a4,25(a5)
+    800064c0:	00e78d23          	sb	a4,26(a5)
+    800064c4:	00e78da3          	sb	a4,27(a5)
+    800064c8:	00e78e23          	sb	a4,28(a5)
+    800064cc:	00e78ea3          	sb	a4,29(a5)
+    800064d0:	00e78f23          	sb	a4,30(a5)
+    800064d4:	00e78fa3          	sb	a4,31(a5)
+}
+    800064d8:	60e2                	ld	ra,24(sp)
+    800064da:	6442                	ld	s0,16(sp)
+    800064dc:	64a2                	ld	s1,8(sp)
+    800064de:	6105                	addi	sp,sp,32
+    800064e0:	8082                	ret
+    panic("could not find virtio disk");
+    800064e2:	00002517          	auipc	a0,0x2
+    800064e6:	32650513          	addi	a0,a0,806 # 80008808 <syscalls+0x380>
+    800064ea:	ffffa097          	auipc	ra,0xffffa
+    800064ee:	050080e7          	jalr	80(ra) # 8000053a <panic>
+    panic("virtio disk has no queue 0");
+    800064f2:	00002517          	auipc	a0,0x2
+    800064f6:	33650513          	addi	a0,a0,822 # 80008828 <syscalls+0x3a0>
+    800064fa:	ffffa097          	auipc	ra,0xffffa
+    800064fe:	040080e7          	jalr	64(ra) # 8000053a <panic>
+    panic("virtio disk max queue too short");
+    80006502:	00002517          	auipc	a0,0x2
+    80006506:	34650513          	addi	a0,a0,838 # 80008848 <syscalls+0x3c0>
+    8000650a:	ffffa097          	auipc	ra,0xffffa
+    8000650e:	030080e7          	jalr	48(ra) # 8000053a <panic>
+
+0000000080006512 <virtio_disk_rw>:
+  return 0;
+}
+
+void
+virtio_disk_rw(struct buf *b, int write)
+{
+    80006512:	7119                	addi	sp,sp,-128
+    80006514:	fc86                	sd	ra,120(sp)
+    80006516:	f8a2                	sd	s0,112(sp)
+    80006518:	f4a6                	sd	s1,104(sp)
+    8000651a:	f0ca                	sd	s2,96(sp)
+    8000651c:	ecce                	sd	s3,88(sp)
+    8000651e:	e8d2                	sd	s4,80(sp)
+    80006520:	e4d6                	sd	s5,72(sp)
+    80006522:	e0da                	sd	s6,64(sp)
+    80006524:	fc5e                	sd	s7,56(sp)
+    80006526:	f862                	sd	s8,48(sp)
+    80006528:	f466                	sd	s9,40(sp)
+    8000652a:	f06a                	sd	s10,32(sp)
+    8000652c:	ec6e                	sd	s11,24(sp)
+    8000652e:	0100                	addi	s0,sp,128
+    80006530:	8aaa                	mv	s5,a0
+    80006532:	8d2e                	mv	s10,a1
+  uint64 sector = b->blockno * (BSIZE / 512);
+    80006534:	00c52c83          	lw	s9,12(a0)
+    80006538:	001c9c9b          	slliw	s9,s9,0x1
+    8000653c:	1c82                	slli	s9,s9,0x20
+    8000653e:	020cdc93          	srli	s9,s9,0x20
+
+  acquire(&disk.vdisk_lock);
+    80006542:	00022517          	auipc	a0,0x22
+    80006546:	be650513          	addi	a0,a0,-1050 # 80028128 <disk+0x2128>
+    8000654a:	ffffa097          	auipc	ra,0xffffa
+    8000654e:	686080e7          	jalr	1670(ra) # 80000bd0 <acquire>
+  for(int i = 0; i < 3; i++){
+    80006552:	4981                	li	s3,0
+  for(int i = 0; i < NUM; i++){
+    80006554:	44a1                	li	s1,8
+      disk.free[i] = 0;
+    80006556:	00020c17          	auipc	s8,0x20
+    8000655a:	aaac0c13          	addi	s8,s8,-1366 # 80026000 <disk>
+    8000655e:	6b89                	lui	s7,0x2
+  for(int i = 0; i < 3; i++){
+    80006560:	4b0d                	li	s6,3
+    80006562:	a0ad                	j	800065cc <virtio_disk_rw+0xba>
+      disk.free[i] = 0;
+    80006564:	00fc0733          	add	a4,s8,a5
+    80006568:	975e                	add	a4,a4,s7
+    8000656a:	00070c23          	sb	zero,24(a4)
+    idx[i] = alloc_desc();
+    8000656e:	c19c                	sw	a5,0(a1)
+    if(idx[i] < 0){
+    80006570:	0207c563          	bltz	a5,8000659a <virtio_disk_rw+0x88>
+  for(int i = 0; i < 3; i++){
+    80006574:	2905                	addiw	s2,s2,1
+    80006576:	0611                	addi	a2,a2,4 # 2004 <_entry-0x7fffdffc>
+    80006578:	19690c63          	beq	s2,s6,80006710 <virtio_disk_rw+0x1fe>
+    idx[i] = alloc_desc();
+    8000657c:	85b2                	mv	a1,a2
+  for(int i = 0; i < NUM; i++){
+    8000657e:	00022717          	auipc	a4,0x22
+    80006582:	a9a70713          	addi	a4,a4,-1382 # 80028018 <disk+0x2018>
+    80006586:	87ce                	mv	a5,s3
+    if(disk.free[i]){
+    80006588:	00074683          	lbu	a3,0(a4)
+    8000658c:	fee1                	bnez	a3,80006564 <virtio_disk_rw+0x52>
+  for(int i = 0; i < NUM; i++){
+    8000658e:	2785                	addiw	a5,a5,1
+    80006590:	0705                	addi	a4,a4,1
+    80006592:	fe979be3          	bne	a5,s1,80006588 <virtio_disk_rw+0x76>
+    idx[i] = alloc_desc();
+    80006596:	57fd                	li	a5,-1
+    80006598:	c19c                	sw	a5,0(a1)
+      for(int j = 0; j < i; j++)
+    8000659a:	01205d63          	blez	s2,800065b4 <virtio_disk_rw+0xa2>
+    8000659e:	8dce                	mv	s11,s3
+        free_desc(idx[j]);
+    800065a0:	000a2503          	lw	a0,0(s4)
+    800065a4:	00000097          	auipc	ra,0x0
+    800065a8:	d92080e7          	jalr	-622(ra) # 80006336 <free_desc>
+      for(int j = 0; j < i; j++)
+    800065ac:	2d85                	addiw	s11,s11,1
+    800065ae:	0a11                	addi	s4,s4,4
+    800065b0:	ff2d98e3          	bne	s11,s2,800065a0 <virtio_disk_rw+0x8e>
+  int idx[3];
+  while(1){
+    if(alloc3_desc(idx) == 0) {
+      break;
+    }
+    sleep(&disk.free[0], &disk.vdisk_lock);
+    800065b4:	00022597          	auipc	a1,0x22
+    800065b8:	b7458593          	addi	a1,a1,-1164 # 80028128 <disk+0x2128>
+    800065bc:	00022517          	auipc	a0,0x22
+    800065c0:	a5c50513          	addi	a0,a0,-1444 # 80028018 <disk+0x2018>
+    800065c4:	ffffc097          	auipc	ra,0xffffc
+    800065c8:	fe8080e7          	jalr	-24(ra) # 800025ac <sleep>
+  for(int i = 0; i < 3; i++){
+    800065cc:	f8040a13          	addi	s4,s0,-128
+{
+    800065d0:	8652                	mv	a2,s4
+  for(int i = 0; i < 3; i++){
+    800065d2:	894e                	mv	s2,s3
+    800065d4:	b765                	j	8000657c <virtio_disk_rw+0x6a>
+  disk.desc[idx[0]].next = idx[1];
+
+  disk.desc[idx[1]].addr = (uint64) b->data;
+  disk.desc[idx[1]].len = BSIZE;
+  if(write)
+    disk.desc[idx[1]].flags = 0; // device reads b->data
+    800065d6:	00022697          	auipc	a3,0x22
+    800065da:	a2a6b683          	ld	a3,-1494(a3) # 80028000 <disk+0x2000>
+    800065de:	96ba                	add	a3,a3,a4
+    800065e0:	00069623          	sh	zero,12(a3)
+  else
+    disk.desc[idx[1]].flags = VRING_DESC_F_WRITE; // device writes b->data
+  disk.desc[idx[1]].flags |= VRING_DESC_F_NEXT;
+    800065e4:	00020817          	auipc	a6,0x20
+    800065e8:	a1c80813          	addi	a6,a6,-1508 # 80026000 <disk>
+    800065ec:	00022697          	auipc	a3,0x22
+    800065f0:	a1468693          	addi	a3,a3,-1516 # 80028000 <disk+0x2000>
+    800065f4:	6290                	ld	a2,0(a3)
+    800065f6:	963a                	add	a2,a2,a4
+    800065f8:	00c65583          	lhu	a1,12(a2)
+    800065fc:	0015e593          	ori	a1,a1,1
+    80006600:	00b61623          	sh	a1,12(a2)
+  disk.desc[idx[1]].next = idx[2];
+    80006604:	f8842603          	lw	a2,-120(s0)
+    80006608:	628c                	ld	a1,0(a3)
+    8000660a:	972e                	add	a4,a4,a1
+    8000660c:	00c71723          	sh	a2,14(a4)
+
+  disk.info[idx[0]].status = 0xff; // device writes 0 on success
+    80006610:	20050593          	addi	a1,a0,512
+    80006614:	0592                	slli	a1,a1,0x4
+    80006616:	95c2                	add	a1,a1,a6
+    80006618:	577d                	li	a4,-1
+    8000661a:	02e58823          	sb	a4,48(a1)
+  disk.desc[idx[2]].addr = (uint64) &disk.info[idx[0]].status;
+    8000661e:	00461713          	slli	a4,a2,0x4
+    80006622:	6290                	ld	a2,0(a3)
+    80006624:	963a                	add	a2,a2,a4
+    80006626:	03078793          	addi	a5,a5,48
+    8000662a:	97c2                	add	a5,a5,a6
+    8000662c:	e21c                	sd	a5,0(a2)
+  disk.desc[idx[2]].len = 1;
+    8000662e:	629c                	ld	a5,0(a3)
+    80006630:	97ba                	add	a5,a5,a4
+    80006632:	4605                	li	a2,1
+    80006634:	c790                	sw	a2,8(a5)
+  disk.desc[idx[2]].flags = VRING_DESC_F_WRITE; // device writes the status
+    80006636:	629c                	ld	a5,0(a3)
+    80006638:	97ba                	add	a5,a5,a4
+    8000663a:	4809                	li	a6,2
+    8000663c:	01079623          	sh	a6,12(a5)
+  disk.desc[idx[2]].next = 0;
+    80006640:	629c                	ld	a5,0(a3)
+    80006642:	97ba                	add	a5,a5,a4
+    80006644:	00079723          	sh	zero,14(a5)
+
+  // record struct buf for virtio_disk_intr().
+  b->disk = 1;
+    80006648:	00caa223          	sw	a2,4(s5)
+  disk.info[idx[0]].b = b;
+    8000664c:	0355b423          	sd	s5,40(a1)
+
+  // tell the device the first index in our chain of descriptors.
+  disk.avail->ring[disk.avail->idx % NUM] = idx[0];
+    80006650:	6698                	ld	a4,8(a3)
+    80006652:	00275783          	lhu	a5,2(a4)
+    80006656:	8b9d                	andi	a5,a5,7
+    80006658:	0786                	slli	a5,a5,0x1
+    8000665a:	973e                	add	a4,a4,a5
+    8000665c:	00a71223          	sh	a0,4(a4)
+
+  __sync_synchronize();
+    80006660:	0ff0000f          	fence
+
+  // tell the device another avail ring entry is available.
+  disk.avail->idx += 1; // not % NUM ...
+    80006664:	6698                	ld	a4,8(a3)
+    80006666:	00275783          	lhu	a5,2(a4)
+    8000666a:	2785                	addiw	a5,a5,1
+    8000666c:	00f71123          	sh	a5,2(a4)
+
+  __sync_synchronize();
+    80006670:	0ff0000f          	fence
+
+  *R(VIRTIO_MMIO_QUEUE_NOTIFY) = 0; // value is queue number
+    80006674:	100017b7          	lui	a5,0x10001
+    80006678:	0407a823          	sw	zero,80(a5) # 10001050 <_entry-0x6fffefb0>
+
+  // Wait for virtio_disk_intr() to say request has finished.
+  while(b->disk == 1) {
+    8000667c:	004aa783          	lw	a5,4(s5)
+    80006680:	02c79163          	bne	a5,a2,800066a2 <virtio_disk_rw+0x190>
+    sleep(b, &disk.vdisk_lock);
+    80006684:	00022917          	auipc	s2,0x22
+    80006688:	aa490913          	addi	s2,s2,-1372 # 80028128 <disk+0x2128>
+  while(b->disk == 1) {
+    8000668c:	4485                	li	s1,1
+    sleep(b, &disk.vdisk_lock);
+    8000668e:	85ca                	mv	a1,s2
+    80006690:	8556                	mv	a0,s5
+    80006692:	ffffc097          	auipc	ra,0xffffc
+    80006696:	f1a080e7          	jalr	-230(ra) # 800025ac <sleep>
+  while(b->disk == 1) {
+    8000669a:	004aa783          	lw	a5,4(s5)
+    8000669e:	fe9788e3          	beq	a5,s1,8000668e <virtio_disk_rw+0x17c>
+  }
+
+  disk.info[idx[0]].b = 0;
+    800066a2:	f8042903          	lw	s2,-128(s0)
+    800066a6:	20090713          	addi	a4,s2,512
+    800066aa:	0712                	slli	a4,a4,0x4
+    800066ac:	00020797          	auipc	a5,0x20
+    800066b0:	95478793          	addi	a5,a5,-1708 # 80026000 <disk>
+    800066b4:	97ba                	add	a5,a5,a4
+    800066b6:	0207b423          	sd	zero,40(a5)
+    int flag = disk.desc[i].flags;
+    800066ba:	00022997          	auipc	s3,0x22
+    800066be:	94698993          	addi	s3,s3,-1722 # 80028000 <disk+0x2000>
+    800066c2:	00491713          	slli	a4,s2,0x4
+    800066c6:	0009b783          	ld	a5,0(s3)
+    800066ca:	97ba                	add	a5,a5,a4
+    800066cc:	00c7d483          	lhu	s1,12(a5)
+    int nxt = disk.desc[i].next;
+    800066d0:	854a                	mv	a0,s2
+    800066d2:	00e7d903          	lhu	s2,14(a5)
+    free_desc(i);
+    800066d6:	00000097          	auipc	ra,0x0
+    800066da:	c60080e7          	jalr	-928(ra) # 80006336 <free_desc>
+    if(flag & VRING_DESC_F_NEXT)
+    800066de:	8885                	andi	s1,s1,1
+    800066e0:	f0ed                	bnez	s1,800066c2 <virtio_disk_rw+0x1b0>
+  free_chain(idx[0]);
+
+  release(&disk.vdisk_lock);
+    800066e2:	00022517          	auipc	a0,0x22
+    800066e6:	a4650513          	addi	a0,a0,-1466 # 80028128 <disk+0x2128>
+    800066ea:	ffffa097          	auipc	ra,0xffffa
+    800066ee:	59a080e7          	jalr	1434(ra) # 80000c84 <release>
+}
+    800066f2:	70e6                	ld	ra,120(sp)
+    800066f4:	7446                	ld	s0,112(sp)
+    800066f6:	74a6                	ld	s1,104(sp)
+    800066f8:	7906                	ld	s2,96(sp)
+    800066fa:	69e6                	ld	s3,88(sp)
+    800066fc:	6a46                	ld	s4,80(sp)
+    800066fe:	6aa6                	ld	s5,72(sp)
+    80006700:	6b06                	ld	s6,64(sp)
+    80006702:	7be2                	ld	s7,56(sp)
+    80006704:	7c42                	ld	s8,48(sp)
+    80006706:	7ca2                	ld	s9,40(sp)
+    80006708:	7d02                	ld	s10,32(sp)
+    8000670a:	6de2                	ld	s11,24(sp)
+    8000670c:	6109                	addi	sp,sp,128
+    8000670e:	8082                	ret
+  struct virtio_blk_req *buf0 = &disk.ops[idx[0]];
+    80006710:	f8042503          	lw	a0,-128(s0)
+    80006714:	20050793          	addi	a5,a0,512
+    80006718:	0792                	slli	a5,a5,0x4
+  if(write)
+    8000671a:	00020817          	auipc	a6,0x20
+    8000671e:	8e680813          	addi	a6,a6,-1818 # 80026000 <disk>
+    80006722:	00f80733          	add	a4,a6,a5
+    80006726:	01a036b3          	snez	a3,s10
+    8000672a:	0ad72423          	sw	a3,168(a4)
+  buf0->reserved = 0;
+    8000672e:	0a072623          	sw	zero,172(a4)
+  buf0->sector = sector;
+    80006732:	0b973823          	sd	s9,176(a4)
+  disk.desc[idx[0]].addr = (uint64) buf0;
+    80006736:	7679                	lui	a2,0xffffe
+    80006738:	963e                	add	a2,a2,a5
+    8000673a:	00022697          	auipc	a3,0x22
+    8000673e:	8c668693          	addi	a3,a3,-1850 # 80028000 <disk+0x2000>
+    80006742:	6298                	ld	a4,0(a3)
+    80006744:	9732                	add	a4,a4,a2
+  struct virtio_blk_req *buf0 = &disk.ops[idx[0]];
+    80006746:	0a878593          	addi	a1,a5,168
+    8000674a:	95c2                	add	a1,a1,a6
+  disk.desc[idx[0]].addr = (uint64) buf0;
+    8000674c:	e30c                	sd	a1,0(a4)
+  disk.desc[idx[0]].len = sizeof(struct virtio_blk_req);
+    8000674e:	6298                	ld	a4,0(a3)
+    80006750:	9732                	add	a4,a4,a2
+    80006752:	45c1                	li	a1,16
+    80006754:	c70c                	sw	a1,8(a4)
+  disk.desc[idx[0]].flags = VRING_DESC_F_NEXT;
+    80006756:	6298                	ld	a4,0(a3)
+    80006758:	9732                	add	a4,a4,a2
+    8000675a:	4585                	li	a1,1
+    8000675c:	00b71623          	sh	a1,12(a4)
+  disk.desc[idx[0]].next = idx[1];
+    80006760:	f8442703          	lw	a4,-124(s0)
+    80006764:	628c                	ld	a1,0(a3)
+    80006766:	962e                	add	a2,a2,a1
+    80006768:	00e61723          	sh	a4,14(a2) # ffffffffffffe00e <end+0xffffffff7ffd500e>
+  disk.desc[idx[1]].addr = (uint64) b->data;
+    8000676c:	0712                	slli	a4,a4,0x4
+    8000676e:	6290                	ld	a2,0(a3)
+    80006770:	963a                	add	a2,a2,a4
+    80006772:	058a8593          	addi	a1,s5,88
+    80006776:	e20c                	sd	a1,0(a2)
+  disk.desc[idx[1]].len = BSIZE;
+    80006778:	6294                	ld	a3,0(a3)
+    8000677a:	96ba                	add	a3,a3,a4
+    8000677c:	40000613          	li	a2,1024
+    80006780:	c690                	sw	a2,8(a3)
+  if(write)
+    80006782:	e40d1ae3          	bnez	s10,800065d6 <virtio_disk_rw+0xc4>
+    disk.desc[idx[1]].flags = VRING_DESC_F_WRITE; // device writes b->data
+    80006786:	00022697          	auipc	a3,0x22
+    8000678a:	87a6b683          	ld	a3,-1926(a3) # 80028000 <disk+0x2000>
+    8000678e:	96ba                	add	a3,a3,a4
+    80006790:	4609                	li	a2,2
+    80006792:	00c69623          	sh	a2,12(a3)
+    80006796:	b5b9                	j	800065e4 <virtio_disk_rw+0xd2>
+
+0000000080006798 <virtio_disk_intr>:
+
+void
+virtio_disk_intr()
+{
+    80006798:	1101                	addi	sp,sp,-32
+    8000679a:	ec06                	sd	ra,24(sp)
+    8000679c:	e822                	sd	s0,16(sp)
+    8000679e:	e426                	sd	s1,8(sp)
+    800067a0:	e04a                	sd	s2,0(sp)
+    800067a2:	1000                	addi	s0,sp,32
+  acquire(&disk.vdisk_lock);
+    800067a4:	00022517          	auipc	a0,0x22
+    800067a8:	98450513          	addi	a0,a0,-1660 # 80028128 <disk+0x2128>
+    800067ac:	ffffa097          	auipc	ra,0xffffa
+    800067b0:	424080e7          	jalr	1060(ra) # 80000bd0 <acquire>
+  // we've seen this interrupt, which the following line does.
+  // this may race with the device writing new entries to
+  // the "used" ring, in which case we may process the new
+  // completion entries in this interrupt, and have nothing to do
+  // in the next interrupt, which is harmless.
+  *R(VIRTIO_MMIO_INTERRUPT_ACK) = *R(VIRTIO_MMIO_INTERRUPT_STATUS) & 0x3;
+    800067b4:	10001737          	lui	a4,0x10001
+    800067b8:	533c                	lw	a5,96(a4)
+    800067ba:	8b8d                	andi	a5,a5,3
+    800067bc:	d37c                	sw	a5,100(a4)
+
+  __sync_synchronize();
+    800067be:	0ff0000f          	fence
+
+  // the device increments disk.used->idx when it
+  // adds an entry to the used ring.
+
+  while(disk.used_idx != disk.used->idx){
+    800067c2:	00022797          	auipc	a5,0x22
+    800067c6:	83e78793          	addi	a5,a5,-1986 # 80028000 <disk+0x2000>
+    800067ca:	6b94                	ld	a3,16(a5)
+    800067cc:	0207d703          	lhu	a4,32(a5)
+    800067d0:	0026d783          	lhu	a5,2(a3)
+    800067d4:	06f70163          	beq	a4,a5,80006836 <virtio_disk_intr+0x9e>
+    __sync_synchronize();
+    int id = disk.used->ring[disk.used_idx % NUM].id;
+    800067d8:	00020917          	auipc	s2,0x20
+    800067dc:	82890913          	addi	s2,s2,-2008 # 80026000 <disk>
+    800067e0:	00022497          	auipc	s1,0x22
+    800067e4:	82048493          	addi	s1,s1,-2016 # 80028000 <disk+0x2000>
+    __sync_synchronize();
+    800067e8:	0ff0000f          	fence
+    int id = disk.used->ring[disk.used_idx % NUM].id;
+    800067ec:	6898                	ld	a4,16(s1)
+    800067ee:	0204d783          	lhu	a5,32(s1)
+    800067f2:	8b9d                	andi	a5,a5,7
+    800067f4:	078e                	slli	a5,a5,0x3
+    800067f6:	97ba                	add	a5,a5,a4
+    800067f8:	43dc                	lw	a5,4(a5)
+
+    if(disk.info[id].status != 0)
+    800067fa:	20078713          	addi	a4,a5,512
+    800067fe:	0712                	slli	a4,a4,0x4
+    80006800:	974a                	add	a4,a4,s2
+    80006802:	03074703          	lbu	a4,48(a4) # 10001030 <_entry-0x6fffefd0>
+    80006806:	e731                	bnez	a4,80006852 <virtio_disk_intr+0xba>
+      panic("virtio_disk_intr status");
+
+    struct buf *b = disk.info[id].b;
+    80006808:	20078793          	addi	a5,a5,512
+    8000680c:	0792                	slli	a5,a5,0x4
+    8000680e:	97ca                	add	a5,a5,s2
+    80006810:	7788                	ld	a0,40(a5)
+    b->disk = 0;   // disk is done with buf
+    80006812:	00052223          	sw	zero,4(a0)
+    wakeup(b);
+    80006816:	ffffc097          	auipc	ra,0xffffc
+    8000681a:	f22080e7          	jalr	-222(ra) # 80002738 <wakeup>
+
+    disk.used_idx += 1;
+    8000681e:	0204d783          	lhu	a5,32(s1)
+    80006822:	2785                	addiw	a5,a5,1
+    80006824:	17c2                	slli	a5,a5,0x30
+    80006826:	93c1                	srli	a5,a5,0x30
+    80006828:	02f49023          	sh	a5,32(s1)
+  while(disk.used_idx != disk.used->idx){
+    8000682c:	6898                	ld	a4,16(s1)
+    8000682e:	00275703          	lhu	a4,2(a4)
+    80006832:	faf71be3          	bne	a4,a5,800067e8 <virtio_disk_intr+0x50>
+  }
+
+  release(&disk.vdisk_lock);
+    80006836:	00022517          	auipc	a0,0x22
+    8000683a:	8f250513          	addi	a0,a0,-1806 # 80028128 <disk+0x2128>
+    8000683e:	ffffa097          	auipc	ra,0xffffa
+    80006842:	446080e7          	jalr	1094(ra) # 80000c84 <release>
+}
+    80006846:	60e2                	ld	ra,24(sp)
+    80006848:	6442                	ld	s0,16(sp)
+    8000684a:	64a2                	ld	s1,8(sp)
+    8000684c:	6902                	ld	s2,0(sp)
+    8000684e:	6105                	addi	sp,sp,32
+    80006850:	8082                	ret
+      panic("virtio_disk_intr status");
+    80006852:	00002517          	auipc	a0,0x2
+    80006856:	01650513          	addi	a0,a0,22 # 80008868 <syscalls+0x3e0>
+    8000685a:	ffffa097          	auipc	ra,0xffffa
+    8000685e:	ce0080e7          	jalr	-800(ra) # 8000053a <panic>
+	...
+
+0000000080007000 <_trampoline>:
+    80007000:	14051573          	csrrw	a0,sscratch,a0
+    80007004:	02153423          	sd	ra,40(a0)
+    80007008:	02253823          	sd	sp,48(a0)
+    8000700c:	02353c23          	sd	gp,56(a0)
+    80007010:	04453023          	sd	tp,64(a0)
+    80007014:	04553423          	sd	t0,72(a0)
+    80007018:	04653823          	sd	t1,80(a0)
+    8000701c:	04753c23          	sd	t2,88(a0)
+    80007020:	f120                	sd	s0,96(a0)
+    80007022:	f524                	sd	s1,104(a0)
+    80007024:	fd2c                	sd	a1,120(a0)
+    80007026:	e150                	sd	a2,128(a0)
+    80007028:	e554                	sd	a3,136(a0)
+    8000702a:	e958                	sd	a4,144(a0)
+    8000702c:	ed5c                	sd	a5,152(a0)
+    8000702e:	0b053023          	sd	a6,160(a0)
+    80007032:	0b153423          	sd	a7,168(a0)
+    80007036:	0b253823          	sd	s2,176(a0)
+    8000703a:	0b353c23          	sd	s3,184(a0)
+    8000703e:	0d453023          	sd	s4,192(a0)
+    80007042:	0d553423          	sd	s5,200(a0)
+    80007046:	0d653823          	sd	s6,208(a0)
+    8000704a:	0d753c23          	sd	s7,216(a0)
+    8000704e:	0f853023          	sd	s8,224(a0)
+    80007052:	0f953423          	sd	s9,232(a0)
+    80007056:	0fa53823          	sd	s10,240(a0)
+    8000705a:	0fb53c23          	sd	s11,248(a0)
+    8000705e:	11c53023          	sd	t3,256(a0)
+    80007062:	11d53423          	sd	t4,264(a0)
+    80007066:	11e53823          	sd	t5,272(a0)
+    8000706a:	11f53c23          	sd	t6,280(a0)
+    8000706e:	140022f3          	csrr	t0,sscratch
+    80007072:	06553823          	sd	t0,112(a0)
+    80007076:	00853103          	ld	sp,8(a0)
+    8000707a:	02053203          	ld	tp,32(a0)
+    8000707e:	01053283          	ld	t0,16(a0)
+    80007082:	00053303          	ld	t1,0(a0)
+    80007086:	18031073          	csrw	satp,t1
+    8000708a:	12000073          	sfence.vma
+    8000708e:	8282                	jr	t0
+
+0000000080007090 <userret>:
+    80007090:	18059073          	csrw	satp,a1
+    80007094:	12000073          	sfence.vma
+    80007098:	07053283          	ld	t0,112(a0)
+    8000709c:	14029073          	csrw	sscratch,t0
+    800070a0:	02853083          	ld	ra,40(a0)
+    800070a4:	03053103          	ld	sp,48(a0)
+    800070a8:	03853183          	ld	gp,56(a0)
+    800070ac:	04053203          	ld	tp,64(a0)
+    800070b0:	04853283          	ld	t0,72(a0)
+    800070b4:	05053303          	ld	t1,80(a0)
+    800070b8:	05853383          	ld	t2,88(a0)
+    800070bc:	7120                	ld	s0,96(a0)
+    800070be:	7524                	ld	s1,104(a0)
+    800070c0:	7d2c                	ld	a1,120(a0)
+    800070c2:	6150                	ld	a2,128(a0)
+    800070c4:	6554                	ld	a3,136(a0)
+    800070c6:	6958                	ld	a4,144(a0)
+    800070c8:	6d5c                	ld	a5,152(a0)
+    800070ca:	0a053803          	ld	a6,160(a0)
+    800070ce:	0a853883          	ld	a7,168(a0)
+    800070d2:	0b053903          	ld	s2,176(a0)
+    800070d6:	0b853983          	ld	s3,184(a0)
+    800070da:	0c053a03          	ld	s4,192(a0)
+    800070de:	0c853a83          	ld	s5,200(a0)
+    800070e2:	0d053b03          	ld	s6,208(a0)
+    800070e6:	0d853b83          	ld	s7,216(a0)
+    800070ea:	0e053c03          	ld	s8,224(a0)
+    800070ee:	0e853c83          	ld	s9,232(a0)
+    800070f2:	0f053d03          	ld	s10,240(a0)
+    800070f6:	0f853d83          	ld	s11,248(a0)
+    800070fa:	10053e03          	ld	t3,256(a0)
+    800070fe:	10853e83          	ld	t4,264(a0)
+    80007102:	11053f03          	ld	t5,272(a0)
+    80007106:	11853f83          	ld	t6,280(a0)
+    8000710a:	14051573          	csrrw	a0,sscratch,a0
+    8000710e:	10200073          	sret
+	...
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/kernel.sym os-workshop/kernel/kernel.sym
--- xv6-riscv/kernel/kernel.sym	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/kernel/kernel.sym	2022-05-28 22:34:29.000000000 -0300
@@ -0,0 +1,283 @@
+0000000080000000 .text
+0000000080008000 .rodata
+0000000080008880 .data
+0000000080009000 .bss
+0000000000000000 .riscv.attributes
+0000000000000000 .comment
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_loclists
+0000000000000000 .debug_aranges
+0000000000000000 .debug_rnglists
+0000000000000000 .debug_line
+0000000000000000 .debug_str
+0000000000000000 .debug_line_str
+0000000000000000 .debug_frame
+0000000000000000 entry.o
+000000008000001a spin
+0000000000000000 start.c
+0000000000000000 console.c
+0000000000000000 printf.c
+0000000080000496 printint
+0000000080008030 digits
+0000000080011228 pr
+0000000000000000 uart.c
+0000000000000000 kalloc.c
+0000000000000000 spinlock.c
+0000000000000000 string.c
+0000000000000000 main.c
+0000000080009018 started
+0000000000000000 vm.c
+0000000000000000 sem.c
+0000000000000000 proc.c
+0000000080001b4e makerunnable
+0000000080008880 first.1
+0000000080001f28 freeproc
+0000000080001f80 allocproc
+0000000080008300 states.0
+0000000000000000 swtch.o
+0000000000000000 trap.c
+0000000000000000 syscall.c
+0000000080002f50 argraw
+0000000080008488 syscalls
+0000000000000000 sysproc.c
+0000000000000000 syssem.c
+0000000000000000 bio.c
+0000000000000000 fs.c
+000000008000374c bfree
+00000000800037c8 balloc
+00000000800038f6 bmap
+00000000800039d2 iget
+000000008000429c namex
+0000000000000000 log.c
+00000000800044fe write_head
+000000008000457a install_trans
+0000000000000000 sleeplock.c
+0000000000000000 file.c
+0000000000000000 pipe.c
+0000000000000000 exec.c
+0000000000000000 sysfile.c
+00000000800055a8 argfd
+0000000080005610 fdalloc
+0000000080005652 create
+0000000000000000 kernelvec.o
+0000000000000000 plic.c
+0000000000000000 virtio_disk.c
+0000000080006336 free_desc
+0000000080026000 disk
+000000008000109c mappages
+000000008000177c copyinstr
+0000000080000164 consoleread
+0000000080000e16 safestrcpy
+00000000800058d6 sys_close
+0000000080002564 yield
+0000000080024868 log
+0000000080011280 kmem
+0000000080000796 uartinit
+0000000080002974 either_copyout
+000000008000001c timerinit
+00000000800126c8 proc
+0000000080004ce6 fileread
+0000000080000584 printf
+000000008000321a sys_sbrk
+0000000080007000 trampoline
+0000000080009000 panicked
+00000000800062e8 plic_claim
+00000000800112a0 sem
+0000000080011260 uart_tx_buf
+000000008000629a plicinit
+000000008000630c plic_complete
+000000008000248e sched
+0000000080000d28 memmove
+00000000800030c6 syscall
+0000000080001d4a cpuid
+00000000800040b4 writei
+00000000800031d0 sys_fork
+000000008001a6e0 bcache
+0000000080005e26 sys_mkdir
+0000000080001262 uvmunmap
+00000000800041d2 namecmp
+00000000800062b0 plicinithart
+00000000800027b4 reparent
+0000000080001a0a semdown
+0000000080003096 argstr
+00000000800013c6 uvmdealloc
+0000000080003180 sys_setp
+0000000080004b5a filedup
+00000000800044c4 namei
+0000000080003478 binit
+000000008000187e semget
+0000000080001630 uvmclear
+00000000800033be sys_semget
+000000008000580a sys_read
+0000000080003a8e fsinit
+0000000080000d84 memcpy
+000000008000113c kvmmap
+0000000080000832 uartstart
+00000000800009e2 kfree
+0000000080001d5a mycpu
+0000000080003ec2 iput
+000000008000116c kvmmake
+0000000080003384 sys_timeout
+0000000080002cb2 devintr
+0000000080008884 nextpid
+000000008000344e sys_semclose
+0000000080001996 semclose
+0000000080004ac8 fileinit
+0000000080007090 userret
+0000000080000b40 initlock
+0000000080001662 copyout
+00000000800025ac sleep
+00000000800061e0 kernelvec
+0000000080003f92 stati
+00000000800122b0 wait_lock
+0000000080003310 sys_kill
+0000000080004fb6 pipeclose
+0000000080005924 sys_fstat
+0000000080000100 consolewrite
+0000000080004762 end_op
+0000000080000a58 freerange
+0000000080000f90 kvminithart
+00000000800022c0 ageprocs
+000000008000140e uvmalloc
+0000000080001354 uvminit
+000000008000155e uvmcopy
+0000000080009028 initproc
+0000000080001ed6 proc_freepagetable
+0000000080003dca iunlock
+0000000080001e3a proc_pagetable
+0000000080009180 stack0
+0000000080003264 sys_sleep
+0000000080005972 sys_link
+0000000080004af0 filealloc
+0000000080002738 wakeup
+00000000800033fa sys_semdown
+00000000800063d0 virtio_disk_init
+0000000080001d76 myproc
+0000000080003cca idup
+0000000080009008 uart_tx_r
+0000000080000fb4 walk
+0000000080005c8e sys_open
+0000000080009010 uart_tx_w
+0000000080003fbc readi
+0000000080012240 mlf_lock
+00000000800002b8 consoleintr
+0000000080000276 consputc
+00000000800028f8 kill
+0000000080001df4 allocpid
+0000000080003b6e ialloc
+0000000080000992 uartintr
+00000000800016ee copyin
+0000000080002b74 trapinit
+0000000080001524 uvmfree
+0000000080029000 end
+0000000080003e16 itrunc
+0000000080004da8 filewrite
+0000000080002ad0 get_sid
+0000000080003052 argint
+0000000080005200 exec
+0000000080008000 etext
+0000000080005870 sys_write
+0000000080000c84 release
+000000008000300a fetchstr
+0000000080002610 wait
+0000000080002bb4 usertrapret
+0000000080002382 scheduler
+0000000080007000 _trampoline
+00000000800041ec dirlookup
+00000000800046e4 begin_op
+0000000080004bac fileclose
+0000000080002d54 usertrap
+0000000080000d9c strncmp
+000000008001a6c8 tickslock
+0000000080005026 pipewrite
+0000000080000dd8 strncpy
+00000000800249b0 ftable
+0000000080006798 virtio_disk_intr
+00000000800057b8 sys_dup
+000000008000053a panic
+0000000080001dae forkret
+0000000080000aa4 kinit
+0000000080000cee memcmp
+00000000800029ca either_copyin
+0000000080002150 fork
+0000000080002c52 clockintr
+00000000800122c8 cpus
+0000000080004a2e releasesleep
+0000000080000000 _entry
+0000000080000b56 holding
+0000000080022da0 sb
+0000000080000bd0 acquire
+00000000800044e2 nameiparent
+0000000080008890 initcode
+0000000080002b9c trapinithart
+0000000080003c3c iupdate
+0000000080000ccc memset
+0000000080000e72 main
+00000000800048ba log_write
+00000000800049d8 acquiresleep
+0000000080005abc sys_unlink
+0000000080007000 uservec
+0000000080001242 kvminit
+0000000080003710 bunpin
+0000000080003074 argaddr
+0000000080012258 mlf
+0000000080003342 sys_uptime
+000000008000096e uartgetc
+0000000080000764 printfinit
+0000000080011248 uart_tx_lock
+0000000080001326 uvmcreate
+00000000800020d8 growproc
+0000000080004a72 holdingsleep
+000000008000204e userinit
+0000000080003506 bread
+0000000080005118 piperead
+0000000080009030 ticks
+000000008000044a consoleinit
+000000008000105a walkaddr
+0000000080002a20 procdump
+00000000800008b8 uartputc
+0000000080001b0a semdup
+0000000080003636 brelse
+0000000080003d08 ilock
+0000000080005fb6 sys_exec
+0000000080002b0a swtch
+0000000080003f6a iunlockput
+0000000080000b84 push_off
+0000000080000c24 pop_off
+00000000800035f8 bwrite
+00000000800007e6 uartputc_sync
+000000008000280e exit
+00000000800014b8 freewalk
+00000000800031e8 sys_wait
+0000000080003132 sys_exit
+0000000080004402 dirlink
+000000008000499e initsleeplock
+000000008000008c start
+0000000080009020 kernel_pagetable
+000000008000182c seminit
+0000000080009040 timer_scratch
+0000000080006512 virtio_disk_rw
+0000000080000e48 strlen
+00000000800060c6 sys_pipe
+0000000080003b0e iinit
+0000000080001aa4 semup
+000000008000463e initlog
+0000000080011180 cons
+0000000080000ae0 kalloc
+0000000080002fb8 fetchaddr
+0000000080024910 devsw
+0000000080003166 sys_getpid
+0000000080004edc pipealloc
+0000000080005f0e sys_chdir
+0000000080001c14 proc_mapstacks
+0000000080003424 sys_semup
+0000000080006270 timervec
+0000000080001960 is_valid_sid
+0000000080002e66 kerneltrap
+00000000800036d4 bpin
+0000000080001c96 procinit
+0000000080022dc0 itable
+0000000080005e86 sys_mknod
+0000000080004c74 filestat
+0000000080012298 pid_lock
Binary files xv6-riscv/kernel/kernelvec.o and os-workshop/kernel/kernelvec.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/log.d os-workshop/kernel/log.d
--- xv6-riscv/kernel/log.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/kernel/log.d	2022-05-28 22:34:27.000000000 -0300
@@ -0,0 +1,3 @@
+kernel/log.o: kernel/log.c kernel/types.h kernel/riscv.h kernel/defs.h \
+ kernel/param.h kernel/spinlock.h kernel/sleeplock.h kernel/fs.h \
+ kernel/buf.h
Binary files xv6-riscv/kernel/log.o and os-workshop/kernel/log.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/main.c os-workshop/kernel/main.c
--- xv6-riscv/kernel/main.c	2022-05-28 22:43:35.000000000 -0300
+++ os-workshop/kernel/main.c	2022-05-26 17:09:31.000000000 -0300
@@ -19,6 +19,7 @@ main()
     kinit();         // physical page allocator
     kvminit();       // create kernel page table
     kvminithart();   // turn on paging
+    seminit();       // semaphore table
     procinit();      // process table
     trapinit();      // trap vectors
     trapinithart();  // install kernel trap vector
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/main.d os-workshop/kernel/main.d
--- xv6-riscv/kernel/main.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/kernel/main.d	2022-05-28 22:34:24.000000000 -0300
@@ -0,0 +1,2 @@
+kernel/main.o: kernel/main.c kernel/types.h kernel/param.h \
+ kernel/memlayout.h kernel/riscv.h kernel/defs.h
Binary files xv6-riscv/kernel/main.o and os-workshop/kernel/main.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/param.h os-workshop/kernel/param.h
--- xv6-riscv/kernel/param.h	2022-05-28 22:43:35.000000000 -0300
+++ os-workshop/kernel/param.h	2022-05-26 17:09:31.000000000 -0300
@@ -11,3 +11,10 @@
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       1000  // size of file system in blocks
 #define MAXPATH      128   // maximum file path name
+#define QUANTUM      2    // maximum number of ticks per process
+#define MLFLEVELS    4     // number of levels in multilevel feedback array
+#define MAXAGE       5     // process max age
+#define TIMEUNIT     10    // process time unit
+#define NOSEM        16    // open semaphores per processs
+#define NSEM         100   // open semaphores per system
+
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/pipe.d os-workshop/kernel/pipe.d
--- xv6-riscv/kernel/pipe.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/kernel/pipe.d	2022-05-28 22:34:27.000000000 -0300
@@ -0,0 +1,3 @@
+kernel/pipe.o: kernel/pipe.c kernel/types.h kernel/riscv.h kernel/defs.h \
+ kernel/param.h kernel/spinlock.h kernel/proc.h kernel/fs.h \
+ kernel/sleeplock.h kernel/file.h
Binary files xv6-riscv/kernel/pipe.o and os-workshop/kernel/pipe.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/plic.d os-workshop/kernel/plic.d
--- xv6-riscv/kernel/plic.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/kernel/plic.d	2022-05-28 22:34:28.000000000 -0300
@@ -0,0 +1,2 @@
+kernel/plic.o: kernel/plic.c kernel/types.h kernel/param.h \
+ kernel/memlayout.h kernel/riscv.h kernel/defs.h
Binary files xv6-riscv/kernel/plic.o and os-workshop/kernel/plic.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/printf.d os-workshop/kernel/printf.d
--- xv6-riscv/kernel/printf.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/kernel/printf.d	2022-05-28 22:34:23.000000000 -0300
@@ -0,0 +1,5 @@
+kernel/printf.o: kernel/printf.c \
+ /usr/local/Cellar/riscv-gnu-toolchain/main/lib/gcc/riscv64-unknown-elf/11.1.0/include/stdarg.h \
+ kernel/types.h kernel/param.h kernel/spinlock.h kernel/sleeplock.h \
+ kernel/fs.h kernel/file.h kernel/memlayout.h kernel/riscv.h \
+ kernel/defs.h kernel/proc.h
Binary files xv6-riscv/kernel/printf.o and os-workshop/kernel/printf.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/proc.c os-workshop/kernel/proc.c
--- xv6-riscv/kernel/proc.c	2022-05-28 22:43:35.000000000 -0300
+++ os-workshop/kernel/proc.c	2022-05-28 21:31:32.000000000 -0300
@@ -12,11 +12,16 @@ struct proc proc[NPROC];
 
 struct proc *initproc;
 
+struct mlf mlf[MLFLEVELS];
+struct spinlock mlf_lock;
+
 int nextpid = 1;
 struct spinlock pid_lock;
-
+extern uint ticks;
 extern void forkret(void);
 static void freeproc(struct proc *p);
+static void makerunnable(int level, struct proc *node);
+static struct proc* dequeue();
 
 extern char trampoline[]; // trampoline.S
 
@@ -50,6 +55,7 @@ procinit(void)
   
   initlock(&pid_lock, "nextpid");
   initlock(&wait_lock, "wait_lock");
+  initlock(&mlf_lock, "mlf");
   for(p = proc; p < &proc[NPROC]; p++) {
       initlock(&p->lock, "proc");
       p->kstack = KSTACK((int) (p - proc));
@@ -242,7 +248,7 @@ userinit(void)
   safestrcpy(p->name, "initcode", sizeof(p->name));
   p->cwd = namei("/");
 
-  p->state = RUNNABLE;
+  makerunnable(1,p);
 
   release(&p->lock);
 }
@@ -301,6 +307,11 @@ fork(void)
       np->ofile[i] = filedup(p->ofile[i]);
   np->cwd = idup(p->cwd);
 
+  // increment reference counts on semaphores descriptors.
+  for(i = 0; i < NOSEM; i++)
+    if(p->osem[i])
+      np->osem[i] = semdup(p->osem[i]);
+
   safestrcpy(np->name, p->name, sizeof(p->name));
 
   pid = np->pid;
@@ -312,12 +323,88 @@ fork(void)
   release(&wait_lock);
 
   acquire(&np->lock);
-  np->state = RUNNABLE;
+  //Add the new process at parent's level end 
+  makerunnable(p->mlflevel,np);
   release(&np->lock);
 
   return pid;
 }
 
+static void
+makerunnable(int level, struct proc *p){
+  int holding_status = holding(&mlf_lock);
+  if(!holding_status){
+    acquire(&mlf_lock);
+  }
+  if(level > MLFLEVELS){
+    level = MLFLEVELS;
+  }
+  else if(level < 1){
+    level = 1;
+  }
+  if(mlf[level-1].last == 0){
+    mlf[level-1].last = p;
+    mlf[level-1].top = p;
+  }
+  else{
+    struct proc *last = mlf[level-1].last;
+    last->next = p;
+    mlf[level-1].last = p;
+  }
+  p->next = 0;
+  p->age = ticks;
+  p->mlflevel = level;
+  p->state = RUNNABLE;
+  if(!holding_status){
+    release(&mlf_lock);
+  }
+}
+
+static struct proc*
+dequeue(){
+  acquire(&mlf_lock);
+  for(int index = 0; index < MLFLEVELS; index++){
+    if(mlf[index].top != 0){
+      struct proc *first = mlf[index].top;
+      mlf[index].top = first->next;
+      if(!mlf[index].top){
+        mlf[index].last = 0;
+      }
+      release(&mlf_lock);
+      return first;
+    }
+  }
+  release(&mlf_lock);
+  return 0;
+}
+
+// Apply the aging strategy to all runnable processes
+void
+ageprocs()
+{
+  acquire(&mlf_lock);
+  for(int index = 1; index < MLFLEVELS; index++){
+    struct proc *current = mlf[index].top;
+    if(!current || holding(&current->lock)){
+      continue;
+    }
+    acquire(&current->lock);
+    if(ticks - current->age > MAXAGE){
+      //Remove the process from the current level
+      if(current->next != 0){
+        mlf[index].top = current->next;
+      } else{
+        mlf[index].top = 0;
+        mlf[index].last = 0;
+      }
+      //Add the process in a higher priority level
+      makerunnable(index-1,current);
+    }
+    release(&current->lock);
+  }
+  release(&mlf_lock);
+}
+
 // Pass p's abandoned children to init.
 // Caller must hold wait_lock.
 void
@@ -352,6 +439,12 @@ exit(int status)
       p->ofile[fd] = 0;
     }
   }
+  
+
+  //Close all open semaphores
+  for(int position = 0; position <  NOSEM ; position++){
+    semclose(position);
+  }
 
   begin_op();
   iput(p->cwd);
@@ -445,22 +538,29 @@ scheduler(void)
     // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
 
-    for(p = proc; p < &proc[NPROC]; p++) {
-      acquire(&p->lock);
-      if(p->state == RUNNABLE) {
-        // Switch to chosen process.  It is the process's job
-        // to release its lock and then reacquire it
-        // before jumping back to us.
-        p->state = RUNNING;
-        c->proc = p;
-        swtch(&c->context, &p->context);
-
-        // Process is done running for now.
-        // It should have changed its p->state before coming back.
-        c->proc = 0;
-      }
-      release(&p->lock);
+    p = dequeue();
+    if(!p){
+      continue;
     }
+    
+    if(p->state != RUNNABLE){
+      printf("State is %d \n", p->state);
+      panic("Process is not in a runnable state");
+    }
+    acquire(&p->lock);
+    // Switch to chosen process.  It is the process's job
+    // to release its lock and then reacquire it
+    // before jumping back to us.
+    p->state = RUNNING;
+    p->age = ticks;
+    p->ticks = 0;
+    c->proc = p;
+    swtch(&c->context, &p->context);
+
+    // Process is done running for now.
+    // It should have changed its p->state before coming back.
+    c->proc = 0;
+    release(&p->lock);
   }
 }
 
@@ -497,7 +597,7 @@ yield(void)
 {
   struct proc *p = myproc();
   acquire(&p->lock);
-  p->state = RUNNABLE;
+  makerunnable(p->mlflevel+1,p);
   sched();
   release(&p->lock);
 }
@@ -565,7 +665,7 @@ wakeup(void *chan)
     if(p != myproc()){
       acquire(&p->lock);
       if(p->state == SLEEPING && p->chan == chan) {
-        p->state = RUNNABLE;
+        makerunnable(p->mlflevel-1,p);
       }
       release(&p->lock);
     }
@@ -580,13 +680,15 @@ kill(int pid)
 {
   struct proc *p;
 
-  for(p = proc; p < &proc[NPROC]; p++){
+  // Starts in proc + 1 because the init process has pid == 1,
+  // and we don't want to be able to kill it.
+  for(p = proc + 1; p < &proc[NPROC]; p++){
     acquire(&p->lock);
     if(p->pid == pid){
       p->killed = 1;
       if(p->state == SLEEPING){
         // Wake process from sleep().
-        p->state = RUNNABLE;
+        makerunnable(p->mlflevel,p);
       }
       release(&p->lock);
       return 0;
@@ -654,3 +756,15 @@ procdump(void)
     printf("\n");
   }
 }
+
+int
+get_sid(void)
+{
+  for(int position = 0; position <  NOSEM ; position++){
+    if(!myproc()->osem[position]){
+      return position;
+    }
+  }
+  return -1;
+}
+
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/proc.d os-workshop/kernel/proc.d
--- xv6-riscv/kernel/proc.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/kernel/proc.d	2022-05-28 22:34:25.000000000 -0300
@@ -0,0 +1,3 @@
+kernel/proc.o: kernel/proc.c kernel/types.h kernel/param.h \
+ kernel/memlayout.h kernel/riscv.h kernel/spinlock.h kernel/proc.h \
+ kernel/defs.h
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/proc.h os-workshop/kernel/proc.h
--- xv6-riscv/kernel/proc.h	2022-05-28 22:43:35.000000000 -0300
+++ os-workshop/kernel/proc.h	2022-05-26 17:09:31.000000000 -0300
@@ -103,6 +103,16 @@ struct proc {
   struct trapframe *trapframe; // data page for trampoline.S
   struct context context;      // swtch() here to run process
   struct file *ofile[NOFILE];  // Open files
+  struct sem *osem[NOSEM];     // Open semaphores
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  unsigned short ticks;        // Tick counter
+  struct proc *next;           // Pointer to the next process
+  int mlflevel;                // Level in which is running the process
+  int age;                     // Process age
+};
+
+struct mlf {
+  struct proc *top;           // First process of one level
+  struct proc *last;          // Last process of one level
 };
Binary files xv6-riscv/kernel/proc.o and os-workshop/kernel/proc.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/sem.c os-workshop/kernel/sem.c
--- xv6-riscv/kernel/sem.c	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/kernel/sem.c	2022-05-28 22:34:14.000000000 -0300
@@ -0,0 +1,141 @@
+#include "types.h"
+#include "riscv.h"
+#include "defs.h"
+#include "param.h"
+#include "fs.h"
+#include "spinlock.h"
+#include "sleeplock.h"
+#include "file.h"
+#include "stat.h"
+#include "proc.h"
+#include "sem.h"
+
+struct sem sem[NSEM];
+
+int is_valid_sid(int sid);
+
+void
+seminit()
+{
+  struct sem *s;
+  for(s = sem; s < sem + NSEM; s++){
+    initlock(&s->lock, "semlock");
+    s->key = -1;
+  }
+}
+
+int 
+semget(int key, int init_value)
+{
+  struct sem *s;
+  struct sem *save_free = 0;
+  
+
+  int sid = get_sid();
+  if(sid == -1){
+    return -1;
+  }
+
+  //Searching the key in all semaphores
+  for(s = sem; s < sem + NSEM; s++){
+    acquire(&s->lock);
+    // If the key was found, then jump to found: to update the ref count
+    if(s->key == key){
+      goto found;
+    }
+    // Save the first free one
+    if(s->ref_count == 0 && save_free == 0){
+      save_free = s;
+    }
+    else{
+      release(&s->lock);
+    }
+  }
+
+  // If the loop ends, then the key wasn't found,
+  // so if it was saved then there's an unused semaphore and an empty place in osem,
+  // so reinit and save to osem.
+  if(save_free != 0 ){
+    save_free->key = key;
+    save_free->value = init_value;
+    save_free->ref_count = 1;
+    // Add the sempaphore in osem
+    myproc()->osem[sid] = save_free;
+  }
+  release(&save_free->lock);
+  return sid;
+  
+  // The key was found
+  found:
+
+    // If the semaphore with the key was found, and one semaphore was saved, then free it.
+    if(save_free != 0){
+      release(&save_free->lock);
+    }
+
+    // Increment the ref count in the semaphore
+    s->ref_count++;
+
+    // If there's an empty position then add the semaphore to the process' semaphore table
+    myproc()->osem[sid] = s;
+    release(&s->lock);
+    return sid;
+}
+
+int 
+semclose(int sid)
+{
+  if(!is_valid_sid(sid)){
+    return -1;
+  }
+  acquire(&(myproc()->osem[sid]->lock));
+  myproc()->osem[sid]->ref_count--;
+  release(&(myproc()->osem[sid]->lock));
+  myproc()->osem[sid] = 0;
+  return 0;
+}
+
+int
+semdown(int sid)
+{
+  if(!is_valid_sid(sid)){
+    return -1;
+  }
+  acquire(&(myproc()->osem[sid]->lock));
+  if(myproc()->osem[sid]->value >= 1){
+    myproc()->osem[sid]->value--;
+    release(&(myproc()->osem[sid]->lock));
+    return 0;
+  }
+  release(&(myproc()->osem[sid]->lock));
+  return -1;
+}
+
+int
+semup(int sid)
+{
+  if(!is_valid_sid(sid)){
+    return -1;
+  }
+  acquire(&(myproc()->osem[sid]->lock));
+  myproc()->osem[sid]->value++;
+  release(&(myproc()->osem[sid]->lock));
+  return 0;
+}
+
+int
+is_valid_sid(int sid){
+  return sid >= 0 && sid <= NOSEM && myproc()->osem[sid];
+}
+
+// Increment ref count for e f.
+struct sem*
+semdup(struct sem *s)
+{
+  acquire(&s->lock);
+  if(s->ref_count < 1)
+    panic("semdup");
+  s->ref_count++;
+  release(&s->lock);
+  return s;
+}
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/sem.d os-workshop/kernel/sem.d
--- xv6-riscv/kernel/sem.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/kernel/sem.d	2022-05-28 22:34:25.000000000 -0300
@@ -0,0 +1,3 @@
+kernel/sem.o: kernel/sem.c kernel/types.h kernel/riscv.h kernel/defs.h \
+ kernel/param.h kernel/fs.h kernel/spinlock.h kernel/sleeplock.h \
+ kernel/file.h kernel/stat.h kernel/proc.h kernel/sem.h
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/sem.h os-workshop/kernel/sem.h
--- xv6-riscv/kernel/sem.h	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/kernel/sem.h	2022-05-27 22:26:10.000000000 -0300
@@ -0,0 +1,6 @@
+struct sem {
+  struct spinlock lock;
+  int value;
+  int key;
+  int ref_count;
+};
Binary files xv6-riscv/kernel/sem.o and os-workshop/kernel/sem.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/sleeplock.d os-workshop/kernel/sleeplock.d
--- xv6-riscv/kernel/sleeplock.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/kernel/sleeplock.d	2022-05-28 22:34:27.000000000 -0300
@@ -0,0 +1,3 @@
+kernel/sleeplock.o: kernel/sleeplock.c kernel/types.h kernel/riscv.h \
+ kernel/defs.h kernel/param.h kernel/memlayout.h kernel/spinlock.h \
+ kernel/proc.h kernel/sleeplock.h
Binary files xv6-riscv/kernel/sleeplock.o and os-workshop/kernel/sleeplock.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/spinlock.d os-workshop/kernel/spinlock.d
--- xv6-riscv/kernel/spinlock.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/kernel/spinlock.d	2022-05-28 22:34:24.000000000 -0300
@@ -0,0 +1,3 @@
+kernel/spinlock.o: kernel/spinlock.c kernel/types.h kernel/param.h \
+ kernel/memlayout.h kernel/spinlock.h kernel/riscv.h kernel/proc.h \
+ kernel/defs.h
Binary files xv6-riscv/kernel/spinlock.o and os-workshop/kernel/spinlock.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/start.d os-workshop/kernel/start.d
--- xv6-riscv/kernel/start.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/kernel/start.d	2022-05-28 22:34:23.000000000 -0300
@@ -0,0 +1,2 @@
+kernel/start.o: kernel/start.c kernel/types.h kernel/param.h \
+ kernel/memlayout.h kernel/riscv.h kernel/defs.h
Binary files xv6-riscv/kernel/start.o and os-workshop/kernel/start.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/string.d os-workshop/kernel/string.d
--- xv6-riscv/kernel/string.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/kernel/string.d	2022-05-28 22:34:24.000000000 -0300
@@ -0,0 +1 @@
+kernel/string.o: kernel/string.c kernel/types.h
Binary files xv6-riscv/kernel/string.o and os-workshop/kernel/string.o differ
Binary files xv6-riscv/kernel/swtch.o and os-workshop/kernel/swtch.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/syscall.c os-workshop/kernel/syscall.c
--- xv6-riscv/kernel/syscall.c	2022-05-28 22:43:35.000000000 -0300
+++ os-workshop/kernel/syscall.c	2022-05-28 21:50:03.000000000 -0300
@@ -104,6 +104,12 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_wait(void);
 extern uint64 sys_write(void);
 extern uint64 sys_uptime(void);
+extern uint64 sys_setp(void);
+extern uint64 sys_semget(void);
+extern uint64 sys_semdown(void);
+extern uint64 sys_semup(void);
+extern uint64 sys_semclose(void);
+extern uint64 sys_timeout(void);
 
 static uint64 (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -127,6 +133,12 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_setp]    sys_setp,
+[SYS_semget]  sys_semget,
+[SYS_semdown] sys_semdown,
+[SYS_semup]   sys_semup,
+[SYS_semclose]sys_semclose,
+[SYS_timeout] sys_timeout,
 };
 
 void
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/syscall.d os-workshop/kernel/syscall.d
--- xv6-riscv/kernel/syscall.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/kernel/syscall.d	2022-05-28 22:34:26.000000000 -0300
@@ -0,0 +1,3 @@
+kernel/syscall.o: kernel/syscall.c kernel/types.h kernel/param.h \
+ kernel/memlayout.h kernel/riscv.h kernel/spinlock.h kernel/proc.h \
+ kernel/syscall.h kernel/defs.h
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/syscall.h os-workshop/kernel/syscall.h
--- xv6-riscv/kernel/syscall.h	2022-05-28 22:43:35.000000000 -0300
+++ os-workshop/kernel/syscall.h	2022-05-28 21:57:45.000000000 -0300
@@ -1,22 +1,28 @@
 // System call numbers
-#define SYS_fork    1
-#define SYS_exit    2
-#define SYS_wait    3
-#define SYS_pipe    4
-#define SYS_read    5
-#define SYS_kill    6
-#define SYS_exec    7
-#define SYS_fstat   8
-#define SYS_chdir   9
-#define SYS_dup    10
-#define SYS_getpid 11
-#define SYS_sbrk   12
-#define SYS_sleep  13
-#define SYS_uptime 14
-#define SYS_open   15
-#define SYS_write  16
-#define SYS_mknod  17
-#define SYS_unlink 18
-#define SYS_link   19
-#define SYS_mkdir  20
-#define SYS_close  21
+#define SYS_fork      1
+#define SYS_exit      2
+#define SYS_wait      3
+#define SYS_pipe      4
+#define SYS_read      5
+#define SYS_kill      6
+#define SYS_exec      7
+#define SYS_fstat     8
+#define SYS_chdir     9
+#define SYS_dup      10
+#define SYS_getpid   11
+#define SYS_sbrk     12
+#define SYS_sleep    13
+#define SYS_uptime   14
+#define SYS_open     15
+#define SYS_write    16
+#define SYS_mknod    17
+#define SYS_unlink   18
+#define SYS_link     19
+#define SYS_mkdir    20
+#define SYS_close    21
+#define SYS_setp     22
+#define SYS_semget   23
+#define SYS_semdown  24
+#define SYS_semup    25
+#define SYS_semclose 26
+#define SYS_timeout  27
Binary files xv6-riscv/kernel/syscall.o and os-workshop/kernel/syscall.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/sysfile.d os-workshop/kernel/sysfile.d
--- xv6-riscv/kernel/sysfile.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/kernel/sysfile.d	2022-05-28 22:34:28.000000000 -0300
@@ -0,0 +1,4 @@
+kernel/sysfile.o: kernel/sysfile.c kernel/types.h kernel/riscv.h \
+ kernel/defs.h kernel/param.h kernel/stat.h kernel/spinlock.h \
+ kernel/proc.h kernel/fs.h kernel/sleeplock.h kernel/file.h \
+ kernel/fcntl.h
Binary files xv6-riscv/kernel/sysfile.o and os-workshop/kernel/sysfile.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/sysproc.c os-workshop/kernel/sysproc.c
--- xv6-riscv/kernel/sysproc.c	2022-05-28 22:43:35.000000000 -0300
+++ os-workshop/kernel/sysproc.c	2022-05-28 22:03:36.000000000 -0300
@@ -24,6 +24,21 @@ sys_getpid(void)
 }
 
 uint64
+sys_setp(void)
+{
+  int level;
+  argint(0, &level);  // fetch param from register
+  if(level > MLFLEVELS)
+    level = MLFLEVELS;
+  else if(level < 1)
+    level = 1;
+  struct proc *p = myproc();
+  uint64 prevlvl = p->mlflevel;
+  p->mlflevel = level;
+  return prevlvl;
+}
+
+uint64
 sys_fork(void)
 {
   return fork();
@@ -95,3 +110,12 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_timeout(void)
+{
+  int loops;
+  argint(0, &loops);  // fetch param from register
+  for (int i = 0; i < loops * 10000; i++) {};
+  return 0;
+}
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/sysproc.d os-workshop/kernel/sysproc.d
--- xv6-riscv/kernel/sysproc.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/kernel/sysproc.d	2022-05-28 22:34:26.000000000 -0300
@@ -0,0 +1,3 @@
+kernel/sysproc.o: kernel/sysproc.c kernel/types.h kernel/riscv.h \
+ kernel/defs.h kernel/date.h kernel/param.h kernel/memlayout.h \
+ kernel/spinlock.h kernel/proc.h
Binary files xv6-riscv/kernel/sysproc.o and os-workshop/kernel/sysproc.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/syssem.c os-workshop/kernel/syssem.c
--- xv6-riscv/kernel/syssem.c	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/kernel/syssem.c	2022-05-28 21:31:32.000000000 -0300
@@ -0,0 +1,43 @@
+#include "types.h"
+#include "riscv.h"
+#include "defs.h"
+#include "date.h"
+#include "param.h"
+#include "memlayout.h"
+#include "spinlock.h"
+#include "proc.h"
+#include "sem.h"
+
+uint64
+sys_semget(void)
+{
+  int key;
+  argint(0, &key);
+  int value;
+  argint(1, &value);
+  return semget(key,value);
+}
+
+uint64
+sys_semdown(void)
+{
+  int sid;
+  argint(0, &sid);
+  return semdown(sid);
+}
+
+uint64
+sys_semup(void)
+{
+  int sid;
+  argint(0, &sid);
+  return semup(sid);
+}
+
+uint64
+sys_semclose(void)
+{
+  int sid;
+  argint(0, &sid);
+  return semclose(sid);
+}
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/syssem.d os-workshop/kernel/syssem.d
--- xv6-riscv/kernel/syssem.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/kernel/syssem.d	2022-05-28 22:34:26.000000000 -0300
@@ -0,0 +1,3 @@
+kernel/syssem.o: kernel/syssem.c kernel/types.h kernel/riscv.h \
+ kernel/defs.h kernel/date.h kernel/param.h kernel/memlayout.h \
+ kernel/spinlock.h kernel/proc.h kernel/sem.h
Binary files xv6-riscv/kernel/syssem.o and os-workshop/kernel/syssem.o differ
Binary files xv6-riscv/kernel/trampoline.o and os-workshop/kernel/trampoline.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/trap.c os-workshop/kernel/trap.c
--- xv6-riscv/kernel/trap.c	2022-05-28 22:43:35.000000000 -0300
+++ os-workshop/kernel/trap.c	2022-04-28 18:28:00.000000000 -0300
@@ -15,6 +15,7 @@ extern char trampoline[], uservec[], use
 void kernelvec();
 
 extern int devintr();
+extern void ageprocs();
 
 void
 trapinit(void)
@@ -77,8 +78,15 @@ usertrap(void)
     exit(-1);
 
   // give up the CPU if this is a timer interrupt.
-  if(which_dev == 2)
-    yield();
+  if(which_dev == 2){
+
+    // increment the tick counter each time there is a timer interrupt, and
+    // yield if it reaches the quantum.
+    if((++myproc()->ticks) == QUANTUM){
+      /* printf("Process %d abandoned the CPU %d (USER CONTEXT) \n", myproc()->pid, cpuid()); */
+      yield();
+    }
+  }
 
   usertrapret();
 }
@@ -150,8 +158,15 @@ kerneltrap()
   }
 
   // give up the CPU if this is a timer interrupt.
-  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING)
-    yield();
+  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING){
+
+    // increment the tick counter each time there is a timer interrupt, and
+    // yield if it reaches the quantum.
+    if((++myproc()->ticks) == QUANTUM){
+      /* printf("Process %d abandoned the CPU %d (KERNEL CONTEXT) \n", myproc()->pid, cpuid()); */
+      yield();
+    }
+  }
 
   // the yield() may have caused some traps to occur,
   // so restore trap registers for use by kernelvec.S's sepc instruction.
@@ -164,6 +179,9 @@ clockintr()
 {
   acquire(&tickslock);
   ticks++;
+  if(ticks % TIMEUNIT == 0) { 
+    ageprocs(); 
+  } 
   wakeup(&ticks);
   release(&tickslock);
 }
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/trap.d os-workshop/kernel/trap.d
--- xv6-riscv/kernel/trap.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/kernel/trap.d	2022-05-28 22:34:25.000000000 -0300
@@ -0,0 +1,3 @@
+kernel/trap.o: kernel/trap.c kernel/types.h kernel/param.h \
+ kernel/memlayout.h kernel/riscv.h kernel/spinlock.h kernel/proc.h \
+ kernel/defs.h
Binary files xv6-riscv/kernel/trap.o and os-workshop/kernel/trap.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/uart.d os-workshop/kernel/uart.d
--- xv6-riscv/kernel/uart.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/kernel/uart.d	2022-05-28 22:34:23.000000000 -0300
@@ -0,0 +1,3 @@
+kernel/uart.o: kernel/uart.c kernel/types.h kernel/param.h \
+ kernel/memlayout.h kernel/riscv.h kernel/spinlock.h kernel/proc.h \
+ kernel/defs.h
Binary files xv6-riscv/kernel/uart.o and os-workshop/kernel/uart.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/virtio_disk.d os-workshop/kernel/virtio_disk.d
--- xv6-riscv/kernel/virtio_disk.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/kernel/virtio_disk.d	2022-05-28 22:34:28.000000000 -0300
@@ -0,0 +1,3 @@
+kernel/virtio_disk.o: kernel/virtio_disk.c kernel/types.h kernel/riscv.h \
+ kernel/defs.h kernel/param.h kernel/memlayout.h kernel/spinlock.h \
+ kernel/sleeplock.h kernel/fs.h kernel/buf.h kernel/virtio.h
Binary files xv6-riscv/kernel/virtio_disk.o and os-workshop/kernel/virtio_disk.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/vm.d os-workshop/kernel/vm.d
--- xv6-riscv/kernel/vm.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/kernel/vm.d	2022-05-28 22:34:24.000000000 -0300
@@ -0,0 +1,2 @@
+kernel/vm.o: kernel/vm.c kernel/param.h kernel/types.h kernel/memlayout.h \
+ kernel/elf.h kernel/riscv.h kernel/defs.h kernel/fs.h
Binary files xv6-riscv/kernel/vm.o and os-workshop/kernel/vm.o differ
Binary files xv6-riscv/mkfs/mkfs and os-workshop/mkfs/mkfs differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/patches/scheduler.patch os-workshop/patches/scheduler.patch
--- xv6-riscv/patches/scheduler.patch	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/patches/scheduler.patch	2022-04-28 18:42:47.000000000 -0300
@@ -0,0 +1,464 @@
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/Makefile os-workshop/Makefile
+--- xv6-riscv/Makefile	2022-04-28 18:33:10.000000000 -0300
++++ os-workshop/Makefile	2022-04-28 18:25:44.000000000 -0300
+@@ -116,6 +116,11 @@ mkfs/mkfs: mkfs/mkfs.c $K/fs.h $K/param.
+ .PRECIOUS: %.o
+ 
+ UPROGS=\
++	$U/_topprior\
++	$U/_midprior\
++	$U/_bottomprior\
++	$U/_helloworld\
++	$U/_infloop\
+ 	$U/_cat\
+ 	$U/_echo\
+ 	$U/_forktest\
+@@ -153,7 +158,7 @@ QEMUGDB = $(shell if $(QEMU) -help | gre
+ 	then echo "-gdb tcp::$(GDBPORT)"; \
+ 	else echo "-s -p $(GDBPORT)"; fi)
+ ifndef CPUS
+-CPUS := 3
++CPUS := 2
+ endif
+ 
+ QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/param.h os-workshop/kernel/param.h
+--- xv6-riscv/kernel/param.h	2022-04-28 18:33:10.000000000 -0300
++++ os-workshop/kernel/param.h	2022-04-28 18:25:44.000000000 -0300
+@@ -11,3 +11,7 @@
+ #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
+ #define FSSIZE       1000  // size of file system in blocks
+ #define MAXPATH      128   // maximum file path name
++#define QUANTUM      2    // maximum number of ticks per process
++#define MLFLEVELS    4     // number of levels in multilevel feedback array
++#define MAXAGE       5     // process max age
++#define TIMEUNIT     10    // process time unit
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/proc.c os-workshop/kernel/proc.c
+--- xv6-riscv/kernel/proc.c	2022-04-28 18:33:10.000000000 -0300
++++ os-workshop/kernel/proc.c	2022-04-28 18:29:35.000000000 -0300
+@@ -12,11 +12,16 @@ struct proc proc[NPROC];
+ 
+ struct proc *initproc;
+ 
++struct mlf mlf[MLFLEVELS];
++struct spinlock mlf_lock;
++
+ int nextpid = 1;
+ struct spinlock pid_lock;
+-
++extern uint ticks;
+ extern void forkret(void);
+ static void freeproc(struct proc *p);
++static void makerunnable(int level, struct proc *node);
++static struct proc* dequeue();
+ 
+ extern char trampoline[]; // trampoline.S
+ 
+@@ -50,6 +55,7 @@ procinit(void)
+   
+   initlock(&pid_lock, "nextpid");
+   initlock(&wait_lock, "wait_lock");
++  initlock(&mlf_lock, "mlf");
+   for(p = proc; p < &proc[NPROC]; p++) {
+       initlock(&p->lock, "proc");
+       p->kstack = KSTACK((int) (p - proc));
+@@ -242,7 +248,7 @@ userinit(void)
+   safestrcpy(p->name, "initcode", sizeof(p->name));
+   p->cwd = namei("/");
+ 
+-  p->state = RUNNABLE;
++  makerunnable(1,p);
+ 
+   release(&p->lock);
+ }
+@@ -312,12 +318,88 @@ fork(void)
+   release(&wait_lock);
+ 
+   acquire(&np->lock);
+-  np->state = RUNNABLE;
++  //Add the new process at parent's level end 
++  makerunnable(p->mlflevel,np);
+   release(&np->lock);
+ 
+   return pid;
+ }
+ 
++static void
++makerunnable(int level, struct proc *p){
++  int holding_status = holding(&mlf_lock);
++  if(!holding_status){
++    acquire(&mlf_lock);
++  }
++  if(level > MLFLEVELS){
++    level = MLFLEVELS;
++  }
++  else if(level < 1){
++    level = 1;
++  }
++  if(mlf[level-1].last == 0){
++    mlf[level-1].last = p;
++    mlf[level-1].top = p;
++  }
++  else{
++    struct proc *last = mlf[level-1].last;
++    last->next = p;
++    mlf[level-1].last = p;
++  }
++  p->next = 0;
++  p->age = ticks;
++  p->mlflevel = level;
++  p->state = RUNNABLE;
++  if(!holding_status){
++    release(&mlf_lock);
++  }
++}
++
++static struct proc*
++dequeue(){
++  acquire(&mlf_lock);
++  for(int index = 0; index < MLFLEVELS; index++){
++    if(mlf[index].top != 0){
++      struct proc *first = mlf[index].top;
++      mlf[index].top = first->next;
++      if(!mlf[index].top){
++        mlf[index].last = 0;
++      }
++      release(&mlf_lock);
++      return first;
++    }
++  }
++  release(&mlf_lock);
++  return 0;
++}
++
++// Apply the aging strategy to all runnable processes
++void
++ageprocs()
++{
++  acquire(&mlf_lock);
++  for(int index = 1; index < MLFLEVELS; index++){
++    struct proc *current = mlf[index].top;
++    if(!current || holding(&current->lock)){
++      continue;
++    }
++    acquire(&current->lock);
++    if(ticks - current->age > MAXAGE){
++      //Remove the process from the current level
++      if(current->next != 0){
++        mlf[index].top = current->next;
++      } else{
++        mlf[index].top = 0;
++        mlf[index].last = 0;
++      }
++      //Add the process in a higher priority level
++      makerunnable(index-1,current);
++    }
++    release(&current->lock);
++  }
++  release(&mlf_lock);
++}
++
+ // Pass p's abandoned children to init.
+ // Caller must hold wait_lock.
+ void
+@@ -445,22 +527,29 @@ scheduler(void)
+     // Avoid deadlock by ensuring that devices can interrupt.
+     intr_on();
+ 
+-    for(p = proc; p < &proc[NPROC]; p++) {
+-      acquire(&p->lock);
+-      if(p->state == RUNNABLE) {
+-        // Switch to chosen process.  It is the process's job
+-        // to release its lock and then reacquire it
+-        // before jumping back to us.
+-        p->state = RUNNING;
+-        c->proc = p;
+-        swtch(&c->context, &p->context);
+-
+-        // Process is done running for now.
+-        // It should have changed its p->state before coming back.
+-        c->proc = 0;
+-      }
+-      release(&p->lock);
++    p = dequeue();
++    if(!p){
++      continue;
++    }
++    
++    if(p->state != RUNNABLE){
++      printf("State is %d \n", p->state);
++      panic("Process is not in a runnable state");
+     }
++    acquire(&p->lock);
++    // Switch to chosen process.  It is the process's job
++    // to release its lock and then reacquire it
++    // before jumping back to us.
++    p->state = RUNNING;
++    p->age = ticks;
++    p->ticks = 0;
++    c->proc = p;
++    swtch(&c->context, &p->context);
++
++    // Process is done running for now.
++    // It should have changed its p->state before coming back.
++    c->proc = 0;
++    release(&p->lock);
+   }
+ }
+ 
+@@ -497,7 +586,7 @@ yield(void)
+ {
+   struct proc *p = myproc();
+   acquire(&p->lock);
+-  p->state = RUNNABLE;
++  makerunnable(p->mlflevel+1,p);
+   sched();
+   release(&p->lock);
+ }
+@@ -565,7 +654,7 @@ wakeup(void *chan)
+     if(p != myproc()){
+       acquire(&p->lock);
+       if(p->state == SLEEPING && p->chan == chan) {
+-        p->state = RUNNABLE;
++        makerunnable(p->mlflevel-1,p);
+       }
+       release(&p->lock);
+     }
+@@ -580,13 +669,15 @@ kill(int pid)
+ {
+   struct proc *p;
+ 
+-  for(p = proc; p < &proc[NPROC]; p++){
++  // Starts in proc + 1 because the init process has pid == 1,
++  // and we don't want to be able to kill it.
++  for(p = proc + 1; p < &proc[NPROC]; p++){
+     acquire(&p->lock);
+     if(p->pid == pid){
+       p->killed = 1;
+       if(p->state == SLEEPING){
+         // Wake process from sleep().
+-        p->state = RUNNABLE;
++        makerunnable(p->mlflevel,p);
+       }
+       release(&p->lock);
+       return 0;
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/proc.h os-workshop/kernel/proc.h
+--- xv6-riscv/kernel/proc.h	2022-04-28 18:33:10.000000000 -0300
++++ os-workshop/kernel/proc.h	2022-04-28 18:25:44.000000000 -0300
+@@ -105,4 +105,13 @@ struct proc {
+   struct file *ofile[NOFILE];  // Open files
+   struct inode *cwd;           // Current directory
+   char name[16];               // Process name (debugging)
++  unsigned short ticks;        // Tick counter
++  struct proc *next;           // Pointer to the next process
++  int mlflevel;                // Level in which is running the process
++  int age;                     // Process age
++};
++
++struct mlf {
++  struct proc *top;           // First process of one level
++  struct proc *last;          // Last process of one level
+ };
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/syscall.c os-workshop/kernel/syscall.c
+--- xv6-riscv/kernel/syscall.c	2022-04-28 18:33:10.000000000 -0300
++++ os-workshop/kernel/syscall.c	2022-04-28 18:25:44.000000000 -0300
+@@ -104,6 +104,7 @@ extern uint64 sys_unlink(void);
+ extern uint64 sys_wait(void);
+ extern uint64 sys_write(void);
+ extern uint64 sys_uptime(void);
++extern uint64 sys_setp(void);
+ 
+ static uint64 (*syscalls[])(void) = {
+ [SYS_fork]    sys_fork,
+@@ -127,6 +128,7 @@ static uint64 (*syscalls[])(void) = {
+ [SYS_link]    sys_link,
+ [SYS_mkdir]   sys_mkdir,
+ [SYS_close]   sys_close,
++[SYS_setp]    sys_setp,
+ };
+ 
+ void
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/syscall.h os-workshop/kernel/syscall.h
+--- xv6-riscv/kernel/syscall.h	2022-04-28 18:33:10.000000000 -0300
++++ os-workshop/kernel/syscall.h	2022-04-28 18:25:44.000000000 -0300
+@@ -20,3 +20,4 @@
+ #define SYS_link   19
+ #define SYS_mkdir  20
+ #define SYS_close  21
++#define SYS_setp   22
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/sysproc.c os-workshop/kernel/sysproc.c
+--- xv6-riscv/kernel/sysproc.c	2022-04-28 18:33:10.000000000 -0300
++++ os-workshop/kernel/sysproc.c	2022-04-28 18:25:44.000000000 -0300
+@@ -24,6 +24,21 @@ sys_getpid(void)
+ }
+ 
+ uint64
++sys_setp(void)
++{
++  int level;
++  argint(0, &level);  // fetch param from register
++  if(level > MLFLEVELS)
++    level = MLFLEVELS;
++  else if(level < 1)
++    level = 1;
++  struct proc *p = myproc();
++  uint64 prevlvl = p->mlflevel;
++  p->mlflevel = level;
++  return prevlvl;
++}
++
++uint64
+ sys_fork(void)
+ {
+   return fork();
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/trap.c os-workshop/kernel/trap.c
+--- xv6-riscv/kernel/trap.c	2022-04-28 18:33:10.000000000 -0300
++++ os-workshop/kernel/trap.c	2022-04-28 18:28:00.000000000 -0300
+@@ -15,6 +15,7 @@ extern char trampoline[], uservec[], use
+ void kernelvec();
+ 
+ extern int devintr();
++extern void ageprocs();
+ 
+ void
+ trapinit(void)
+@@ -77,8 +78,15 @@ usertrap(void)
+     exit(-1);
+ 
+   // give up the CPU if this is a timer interrupt.
+-  if(which_dev == 2)
+-    yield();
++  if(which_dev == 2){
++
++    // increment the tick counter each time there is a timer interrupt, and
++    // yield if it reaches the quantum.
++    if((++myproc()->ticks) == QUANTUM){
++      /* printf("Process %d abandoned the CPU %d (USER CONTEXT) \n", myproc()->pid, cpuid()); */
++      yield();
++    }
++  }
+ 
+   usertrapret();
+ }
+@@ -150,8 +158,15 @@ kerneltrap()
+   }
+ 
+   // give up the CPU if this is a timer interrupt.
+-  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING)
+-    yield();
++  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING){
++
++    // increment the tick counter each time there is a timer interrupt, and
++    // yield if it reaches the quantum.
++    if((++myproc()->ticks) == QUANTUM){
++      /* printf("Process %d abandoned the CPU %d (KERNEL CONTEXT) \n", myproc()->pid, cpuid()); */
++      yield();
++    }
++  }
+ 
+   // the yield() may have caused some traps to occur,
+   // so restore trap registers for use by kernelvec.S's sepc instruction.
+@@ -164,6 +179,9 @@ clockintr()
+ {
+   acquire(&tickslock);
+   ticks++;
++  if(ticks % TIMEUNIT == 0) { 
++    ageprocs(); 
++  } 
+   wakeup(&ticks);
+   release(&tickslock);
+ }
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/bottomprior.c os-workshop/user/bottomprior.c
+--- xv6-riscv/user/bottomprior.c	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/user/bottomprior.c	2022-04-28 18:25:44.000000000 -0300
+@@ -0,0 +1,10 @@
++#include "kernel/types.h"
++#include "kernel/stat.h"
++#include "user/user.h"
++
++int main() {
++  for(;;){
++    setp(4);
++  };
++  exit(0);
++}
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/helloworld.c os-workshop/user/helloworld.c
+--- xv6-riscv/user/helloworld.c	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/user/helloworld.c	2022-04-20 13:29:20.000000000 -0300
+@@ -0,0 +1,8 @@
++#include "kernel/types.h"
++#include "kernel/stat.h"
++#include "user/user.h"
++
++int main() {
++  printf("Hello world! \n");
++  exit(0);
++}
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/infloop.c os-workshop/user/infloop.c
+--- xv6-riscv/user/infloop.c	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/user/infloop.c	2022-04-28 18:25:44.000000000 -0300
+@@ -0,0 +1,8 @@
++
++#include "kernel/types.h"
++#include "kernel/stat.h"
++#include "user/user.h"
++
++int main() {
++  for (;;){};
++}
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/midprior.c os-workshop/user/midprior.c
+--- xv6-riscv/user/midprior.c	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/user/midprior.c	2022-04-28 18:25:44.000000000 -0300
+@@ -0,0 +1,10 @@
++#include "kernel/types.h"
++#include "kernel/stat.h"
++#include "user/user.h"
++
++int main() {
++  for(;;){
++    setp(2);
++  };
++  exit(0);
++}
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/topprior.c os-workshop/user/topprior.c
+--- xv6-riscv/user/topprior.c	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/user/topprior.c	2022-04-28 18:25:44.000000000 -0300
+@@ -0,0 +1,10 @@
++#include "kernel/types.h"
++#include "kernel/stat.h"
++#include "user/user.h"
++
++int main() {
++  for(;;){
++    setp(1);
++  }
++  exit(0);
++}
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/user.h os-workshop/user/user.h
+--- xv6-riscv/user/user.h	2022-04-28 18:33:10.000000000 -0300
++++ os-workshop/user/user.h	2022-04-28 18:25:44.000000000 -0300
+@@ -23,6 +23,7 @@ int getpid(void);
+ char* sbrk(int);
+ int sleep(int);
+ int uptime(void);
++int setp(int);
+ 
+ // ulib.c
+ int stat(const char*, struct stat*);
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/usys.pl os-workshop/user/usys.pl
+--- xv6-riscv/user/usys.pl	2022-04-28 18:33:10.000000000 -0300
++++ os-workshop/user/usys.pl	2022-04-28 18:25:44.000000000 -0300
+@@ -14,7 +14,7 @@ sub entry {
+     print " ecall\n";
+     print " ret\n";
+ }
+-	
++
+ entry("fork");
+ entry("exit");
+ entry("wait");
+@@ -36,3 +36,4 @@ entry("getpid");
+ entry("sbrk");
+ entry("sleep");
+ entry("uptime");
++entry("setp");
diff --exclude=.git --exclude=.github -rupN xv6-riscv/patches/semaphore.patch os-workshop/patches/semaphore.patch
--- xv6-riscv/patches/semaphore.patch	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/patches/semaphore.patch	2022-05-28 22:44:58.000000000 -0300
@@ -0,0 +1,15514 @@
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/.gitignore os-workshop/.gitignore
+--- xv6-riscv/.gitignore	2022-05-28 22:43:35.000000000 -0300
++++ os-workshop/.gitignore	2022-05-28 21:31:32.000000000 -0300
+@@ -15,3 +15,4 @@ mkfs
+ kernel/kernel
+ user/usys.S
+ .gdbinit
++.vscode
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/Makefile os-workshop/Makefile
+--- xv6-riscv/Makefile	2022-05-28 22:43:35.000000000 -0300
++++ os-workshop/Makefile	2022-05-28 21:31:32.000000000 -0300
+@@ -12,12 +12,14 @@ OBJS = \
+   $K/string.o \
+   $K/main.o \
+   $K/vm.o \
++  $K/sem.o \
+   $K/proc.o \
+   $K/swtch.o \
+   $K/trampoline.o \
+   $K/trap.o \
+   $K/syscall.o \
+   $K/sysproc.o \
++  $K/syssem.o \
+   $K/bio.o \
+   $K/fs.o \
+   $K/log.o \
+@@ -28,7 +30,7 @@ OBJS = \
+   $K/sysfile.o \
+   $K/kernelvec.o \
+   $K/plic.o \
+-  $K/virtio_disk.o
++  $K/virtio_disk.o 
+ 
+ # riscv64-unknown-elf- or riscv64-linux-gnu-
+ # perhaps in /opt/riscv/bin
+@@ -116,6 +118,11 @@ mkfs/mkfs: mkfs/mkfs.c $K/fs.h $K/param.
+ .PRECIOUS: %.o
+ 
+ UPROGS=\
++	$U/_topprior\
++	$U/_midprior\
++	$U/_bottomprior\
++	$U/_helloworld\
++	$U/_infloop\
+ 	$U/_cat\
+ 	$U/_echo\
+ 	$U/_forktest\
+@@ -132,6 +139,9 @@ UPROGS=\
+ 	$U/_grind\
+ 	$U/_wc\
+ 	$U/_zombie\
++	$U/_cons\
++	$U/_prod\
++	$U/_badtest\
+ 
+ fs.img: mkfs/mkfs README $(UPROGS)
+ 	mkfs/mkfs fs.img README $(UPROGS)
+@@ -153,7 +163,7 @@ QEMUGDB = $(shell if $(QEMU) -help | gre
+ 	then echo "-gdb tcp::$(GDBPORT)"; \
+ 	else echo "-s -p $(GDBPORT)"; fi)
+ ifndef CPUS
+-CPUS := 3
++CPUS := 2
+ endif
+ 
+ QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
+Binary files xv6-riscv/fs.img and os-workshop/fs.img differ
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/bio.d os-workshop/kernel/bio.d
+--- xv6-riscv/kernel/bio.d	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/kernel/bio.d	2022-05-28 22:34:26.000000000 -0300
+@@ -0,0 +1,3 @@
++kernel/bio.o: kernel/bio.c kernel/types.h kernel/param.h \
++ kernel/spinlock.h kernel/sleeplock.h kernel/riscv.h kernel/defs.h \
++ kernel/fs.h kernel/buf.h
+Binary files xv6-riscv/kernel/bio.o and os-workshop/kernel/bio.o differ
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/console.d os-workshop/kernel/console.d
+--- xv6-riscv/kernel/console.d	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/kernel/console.d	2022-05-28 22:34:23.000000000 -0300
+@@ -0,0 +1,5 @@
++kernel/console.o: kernel/console.c \
++ /usr/local/Cellar/riscv-gnu-toolchain/main/lib/gcc/riscv64-unknown-elf/11.1.0/include/stdarg.h \
++ kernel/types.h kernel/param.h kernel/spinlock.h kernel/sleeplock.h \
++ kernel/fs.h kernel/file.h kernel/memlayout.h kernel/riscv.h \
++ kernel/defs.h kernel/proc.h
+Binary files xv6-riscv/kernel/console.o and os-workshop/kernel/console.o differ
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/defs.h os-workshop/kernel/defs.h
+--- xv6-riscv/kernel/defs.h	2022-05-28 22:43:35.000000000 -0300
++++ os-workshop/kernel/defs.h	2022-05-28 21:31:32.000000000 -0300
+@@ -104,6 +104,7 @@ void            yield(void);
+ int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
+ int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
+ void            procdump(void);
++int             get_sid(void);
+ 
+ // swtch.S
+ void            swtch(struct context*, struct context*);
+@@ -182,5 +183,13 @@ void            virtio_disk_init(void);
+ void            virtio_disk_rw(struct buf *, int);
+ void            virtio_disk_intr(void);
+ 
++// sem.c
++void            seminit(void);
++int             semclose(int );
++int             semget(int,int );
++int             semdown(int);
++int             semup(int);
++struct sem*     semdup(struct sem*);
++
+ // number of elements in fixed-size array
+ #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
+Binary files xv6-riscv/kernel/entry.o and os-workshop/kernel/entry.o differ
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/exec.d os-workshop/kernel/exec.d
+--- xv6-riscv/kernel/exec.d	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/kernel/exec.d	2022-05-28 22:34:28.000000000 -0300
+@@ -0,0 +1,3 @@
++kernel/exec.o: kernel/exec.c kernel/types.h kernel/param.h \
++ kernel/memlayout.h kernel/riscv.h kernel/spinlock.h kernel/proc.h \
++ kernel/defs.h kernel/elf.h
+Binary files xv6-riscv/kernel/exec.o and os-workshop/kernel/exec.o differ
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/file.d os-workshop/kernel/file.d
+--- xv6-riscv/kernel/file.d	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/kernel/file.d	2022-05-28 22:34:27.000000000 -0300
+@@ -0,0 +1,3 @@
++kernel/file.o: kernel/file.c kernel/types.h kernel/riscv.h kernel/defs.h \
++ kernel/param.h kernel/fs.h kernel/spinlock.h kernel/sleeplock.h \
++ kernel/file.h kernel/stat.h kernel/proc.h
+Binary files xv6-riscv/kernel/file.o and os-workshop/kernel/file.o differ
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/fs.d os-workshop/kernel/fs.d
+--- xv6-riscv/kernel/fs.d	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/kernel/fs.d	2022-05-28 22:34:27.000000000 -0300
+@@ -0,0 +1,3 @@
++kernel/fs.o: kernel/fs.c kernel/types.h kernel/riscv.h kernel/defs.h \
++ kernel/param.h kernel/stat.h kernel/spinlock.h kernel/proc.h \
++ kernel/sleeplock.h kernel/fs.h kernel/buf.h kernel/file.h
+Binary files xv6-riscv/kernel/fs.o and os-workshop/kernel/fs.o differ
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/kalloc.d os-workshop/kernel/kalloc.d
+--- xv6-riscv/kernel/kalloc.d	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/kernel/kalloc.d	2022-05-28 22:34:24.000000000 -0300
+@@ -0,0 +1,2 @@
++kernel/kalloc.o: kernel/kalloc.c kernel/types.h kernel/param.h \
++ kernel/memlayout.h kernel/spinlock.h kernel/riscv.h kernel/defs.h
+Binary files xv6-riscv/kernel/kalloc.o and os-workshop/kernel/kalloc.o differ
+Binary files xv6-riscv/kernel/kernel and os-workshop/kernel/kernel differ
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/kernel.asm os-workshop/kernel/kernel.asm
+--- xv6-riscv/kernel/kernel.asm	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/kernel/kernel.asm	2022-05-28 22:34:29.000000000 -0300
+@@ -0,0 +1,13785 @@
++
++kernel/kernel:     file format elf64-littleriscv
++
++
++Disassembly of section .text:
++
++0000000080000000 <_entry>:
++    80000000:	00009117          	auipc	sp,0x9
++    80000004:	18010113          	addi	sp,sp,384 # 80009180 <stack0>
++    80000008:	6505                	lui	a0,0x1
++    8000000a:	f14025f3          	csrr	a1,mhartid
++    8000000e:	0585                	addi	a1,a1,1
++    80000010:	02b50533          	mul	a0,a0,a1
++    80000014:	912a                	add	sp,sp,a0
++    80000016:	076000ef          	jal	ra,8000008c <start>
++
++000000008000001a <spin>:
++    8000001a:	a001                	j	8000001a <spin>
++
++000000008000001c <timerinit>:
++// which arrive at timervec in kernelvec.S,
++// which turns them into software interrupts for
++// devintr() in trap.c.
++void
++timerinit()
++{
++    8000001c:	1141                	addi	sp,sp,-16
++    8000001e:	e422                	sd	s0,8(sp)
++    80000020:	0800                	addi	s0,sp,16
++// which hart (core) is this?
++static inline uint64
++r_mhartid()
++{
++  uint64 x;
++  asm volatile("csrr %0, mhartid" : "=r" (x) );
++    80000022:	f14027f3          	csrr	a5,mhartid
++  // each CPU has a separate source of timer interrupts.
++  int id = r_mhartid();
++    80000026:	0007859b          	sext.w	a1,a5
++
++  // ask the CLINT for a timer interrupt.
++  int interval = 1000000; // cycles; about 1/10th second in qemu.
++  *(uint64*)CLINT_MTIMECMP(id) = *(uint64*)CLINT_MTIME + interval;
++    8000002a:	0037979b          	slliw	a5,a5,0x3
++    8000002e:	02004737          	lui	a4,0x2004
++    80000032:	97ba                	add	a5,a5,a4
++    80000034:	0200c737          	lui	a4,0x200c
++    80000038:	ff873703          	ld	a4,-8(a4) # 200bff8 <_entry-0x7dff4008>
++    8000003c:	000f4637          	lui	a2,0xf4
++    80000040:	24060613          	addi	a2,a2,576 # f4240 <_entry-0x7ff0bdc0>
++    80000044:	9732                	add	a4,a4,a2
++    80000046:	e398                	sd	a4,0(a5)
++
++  // prepare information in scratch[] for timervec.
++  // scratch[0..2] : space for timervec to save registers.
++  // scratch[3] : address of CLINT MTIMECMP register.
++  // scratch[4] : desired interval (in cycles) between timer interrupts.
++  uint64 *scratch = &timer_scratch[id][0];
++    80000048:	00259693          	slli	a3,a1,0x2
++    8000004c:	96ae                	add	a3,a3,a1
++    8000004e:	068e                	slli	a3,a3,0x3
++    80000050:	00009717          	auipc	a4,0x9
++    80000054:	ff070713          	addi	a4,a4,-16 # 80009040 <timer_scratch>
++    80000058:	9736                	add	a4,a4,a3
++  scratch[3] = CLINT_MTIMECMP(id);
++    8000005a:	ef1c                	sd	a5,24(a4)
++  scratch[4] = interval;
++    8000005c:	f310                	sd	a2,32(a4)
++}
++
++static inline void 
++w_mscratch(uint64 x)
++{
++  asm volatile("csrw mscratch, %0" : : "r" (x));
++    8000005e:	34071073          	csrw	mscratch,a4
++  asm volatile("csrw mtvec, %0" : : "r" (x));
++    80000062:	00006797          	auipc	a5,0x6
++    80000066:	20e78793          	addi	a5,a5,526 # 80006270 <timervec>
++    8000006a:	30579073          	csrw	mtvec,a5
++  asm volatile("csrr %0, mstatus" : "=r" (x) );
++    8000006e:	300027f3          	csrr	a5,mstatus
++
++  // set the machine-mode trap handler.
++  w_mtvec((uint64)timervec);
++
++  // enable machine-mode interrupts.
++  w_mstatus(r_mstatus() | MSTATUS_MIE);
++    80000072:	0087e793          	ori	a5,a5,8
++  asm volatile("csrw mstatus, %0" : : "r" (x));
++    80000076:	30079073          	csrw	mstatus,a5
++  asm volatile("csrr %0, mie" : "=r" (x) );
++    8000007a:	304027f3          	csrr	a5,mie
++
++  // enable machine-mode timer interrupts.
++  w_mie(r_mie() | MIE_MTIE);
++    8000007e:	0807e793          	ori	a5,a5,128
++  asm volatile("csrw mie, %0" : : "r" (x));
++    80000082:	30479073          	csrw	mie,a5
++}
++    80000086:	6422                	ld	s0,8(sp)
++    80000088:	0141                	addi	sp,sp,16
++    8000008a:	8082                	ret
++
++000000008000008c <start>:
++{
++    8000008c:	1141                	addi	sp,sp,-16
++    8000008e:	e406                	sd	ra,8(sp)
++    80000090:	e022                	sd	s0,0(sp)
++    80000092:	0800                	addi	s0,sp,16
++  asm volatile("csrr %0, mstatus" : "=r" (x) );
++    80000094:	300027f3          	csrr	a5,mstatus
++  x &= ~MSTATUS_MPP_MASK;
++    80000098:	7779                	lui	a4,0xffffe
++    8000009a:	7ff70713          	addi	a4,a4,2047 # ffffffffffffe7ff <end+0xffffffff7ffd57ff>
++    8000009e:	8ff9                	and	a5,a5,a4
++  x |= MSTATUS_MPP_S;
++    800000a0:	6705                	lui	a4,0x1
++    800000a2:	80070713          	addi	a4,a4,-2048 # 800 <_entry-0x7ffff800>
++    800000a6:	8fd9                	or	a5,a5,a4
++  asm volatile("csrw mstatus, %0" : : "r" (x));
++    800000a8:	30079073          	csrw	mstatus,a5
++  asm volatile("csrw mepc, %0" : : "r" (x));
++    800000ac:	00001797          	auipc	a5,0x1
++    800000b0:	dc678793          	addi	a5,a5,-570 # 80000e72 <main>
++    800000b4:	34179073          	csrw	mepc,a5
++  asm volatile("csrw satp, %0" : : "r" (x));
++    800000b8:	4781                	li	a5,0
++    800000ba:	18079073          	csrw	satp,a5
++  asm volatile("csrw medeleg, %0" : : "r" (x));
++    800000be:	67c1                	lui	a5,0x10
++    800000c0:	17fd                	addi	a5,a5,-1 # ffff <_entry-0x7fff0001>
++    800000c2:	30279073          	csrw	medeleg,a5
++  asm volatile("csrw mideleg, %0" : : "r" (x));
++    800000c6:	30379073          	csrw	mideleg,a5
++  asm volatile("csrr %0, sie" : "=r" (x) );
++    800000ca:	104027f3          	csrr	a5,sie
++  w_sie(r_sie() | SIE_SEIE | SIE_STIE | SIE_SSIE);
++    800000ce:	2227e793          	ori	a5,a5,546
++  asm volatile("csrw sie, %0" : : "r" (x));
++    800000d2:	10479073          	csrw	sie,a5
++  asm volatile("csrw pmpaddr0, %0" : : "r" (x));
++    800000d6:	57fd                	li	a5,-1
++    800000d8:	83a9                	srli	a5,a5,0xa
++    800000da:	3b079073          	csrw	pmpaddr0,a5
++  asm volatile("csrw pmpcfg0, %0" : : "r" (x));
++    800000de:	47bd                	li	a5,15
++    800000e0:	3a079073          	csrw	pmpcfg0,a5
++  timerinit();
++    800000e4:	00000097          	auipc	ra,0x0
++    800000e8:	f38080e7          	jalr	-200(ra) # 8000001c <timerinit>
++  asm volatile("csrr %0, mhartid" : "=r" (x) );
++    800000ec:	f14027f3          	csrr	a5,mhartid
++  w_tp(id);
++    800000f0:	2781                	sext.w	a5,a5
++}
++
++static inline void 
++w_tp(uint64 x)
++{
++  asm volatile("mv tp, %0" : : "r" (x));
++    800000f2:	823e                	mv	tp,a5
++  asm volatile("mret");
++    800000f4:	30200073          	mret
++}
++    800000f8:	60a2                	ld	ra,8(sp)
++    800000fa:	6402                	ld	s0,0(sp)
++    800000fc:	0141                	addi	sp,sp,16
++    800000fe:	8082                	ret
++
++0000000080000100 <consolewrite>:
++//
++// user write()s to the console go here.
++//
++int
++consolewrite(int user_src, uint64 src, int n)
++{
++    80000100:	715d                	addi	sp,sp,-80
++    80000102:	e486                	sd	ra,72(sp)
++    80000104:	e0a2                	sd	s0,64(sp)
++    80000106:	fc26                	sd	s1,56(sp)
++    80000108:	f84a                	sd	s2,48(sp)
++    8000010a:	f44e                	sd	s3,40(sp)
++    8000010c:	f052                	sd	s4,32(sp)
++    8000010e:	ec56                	sd	s5,24(sp)
++    80000110:	0880                	addi	s0,sp,80
++  int i;
++
++  for(i = 0; i < n; i++){
++    80000112:	04c05763          	blez	a2,80000160 <consolewrite+0x60>
++    80000116:	8a2a                	mv	s4,a0
++    80000118:	84ae                	mv	s1,a1
++    8000011a:	89b2                	mv	s3,a2
++    8000011c:	4901                	li	s2,0
++    char c;
++    if(either_copyin(&c, user_src, src+i, 1) == -1)
++    8000011e:	5afd                	li	s5,-1
++    80000120:	4685                	li	a3,1
++    80000122:	8626                	mv	a2,s1
++    80000124:	85d2                	mv	a1,s4
++    80000126:	fbf40513          	addi	a0,s0,-65
++    8000012a:	00003097          	auipc	ra,0x3
++    8000012e:	8a0080e7          	jalr	-1888(ra) # 800029ca <either_copyin>
++    80000132:	01550d63          	beq	a0,s5,8000014c <consolewrite+0x4c>
++      break;
++    uartputc(c);
++    80000136:	fbf44503          	lbu	a0,-65(s0)
++    8000013a:	00000097          	auipc	ra,0x0
++    8000013e:	77e080e7          	jalr	1918(ra) # 800008b8 <uartputc>
++  for(i = 0; i < n; i++){
++    80000142:	2905                	addiw	s2,s2,1
++    80000144:	0485                	addi	s1,s1,1
++    80000146:	fd299de3          	bne	s3,s2,80000120 <consolewrite+0x20>
++    8000014a:	894e                	mv	s2,s3
++  }
++
++  return i;
++}
++    8000014c:	854a                	mv	a0,s2
++    8000014e:	60a6                	ld	ra,72(sp)
++    80000150:	6406                	ld	s0,64(sp)
++    80000152:	74e2                	ld	s1,56(sp)
++    80000154:	7942                	ld	s2,48(sp)
++    80000156:	79a2                	ld	s3,40(sp)
++    80000158:	7a02                	ld	s4,32(sp)
++    8000015a:	6ae2                	ld	s5,24(sp)
++    8000015c:	6161                	addi	sp,sp,80
++    8000015e:	8082                	ret
++  for(i = 0; i < n; i++){
++    80000160:	4901                	li	s2,0
++    80000162:	b7ed                	j	8000014c <consolewrite+0x4c>
++
++0000000080000164 <consoleread>:
++// user_dist indicates whether dst is a user
++// or kernel address.
++//
++int
++consoleread(int user_dst, uint64 dst, int n)
++{
++    80000164:	7159                	addi	sp,sp,-112
++    80000166:	f486                	sd	ra,104(sp)
++    80000168:	f0a2                	sd	s0,96(sp)
++    8000016a:	eca6                	sd	s1,88(sp)
++    8000016c:	e8ca                	sd	s2,80(sp)
++    8000016e:	e4ce                	sd	s3,72(sp)
++    80000170:	e0d2                	sd	s4,64(sp)
++    80000172:	fc56                	sd	s5,56(sp)
++    80000174:	f85a                	sd	s6,48(sp)
++    80000176:	f45e                	sd	s7,40(sp)
++    80000178:	f062                	sd	s8,32(sp)
++    8000017a:	ec66                	sd	s9,24(sp)
++    8000017c:	e86a                	sd	s10,16(sp)
++    8000017e:	1880                	addi	s0,sp,112
++    80000180:	8aaa                	mv	s5,a0
++    80000182:	8a2e                	mv	s4,a1
++    80000184:	89b2                	mv	s3,a2
++  uint target;
++  int c;
++  char cbuf;
++
++  target = n;
++    80000186:	00060b1b          	sext.w	s6,a2
++  acquire(&cons.lock);
++    8000018a:	00011517          	auipc	a0,0x11
++    8000018e:	ff650513          	addi	a0,a0,-10 # 80011180 <cons>
++    80000192:	00001097          	auipc	ra,0x1
++    80000196:	a3e080e7          	jalr	-1474(ra) # 80000bd0 <acquire>
++  while(n > 0){
++    // wait until interrupt handler has put some
++    // input into cons.buffer.
++    while(cons.r == cons.w){
++    8000019a:	00011497          	auipc	s1,0x11
++    8000019e:	fe648493          	addi	s1,s1,-26 # 80011180 <cons>
++      if(myproc()->killed){
++        release(&cons.lock);
++        return -1;
++      }
++      sleep(&cons.r, &cons.lock);
++    800001a2:	00011917          	auipc	s2,0x11
++    800001a6:	07690913          	addi	s2,s2,118 # 80011218 <cons+0x98>
++    }
++
++    c = cons.buf[cons.r++ % INPUT_BUF];
++
++    if(c == C('D')){  // end-of-file
++    800001aa:	4b91                	li	s7,4
++      break;
++    }
++
++    // copy the input byte to the user-space buffer.
++    cbuf = c;
++    if(either_copyout(user_dst, dst, &cbuf, 1) == -1)
++    800001ac:	5c7d                	li	s8,-1
++      break;
++
++    dst++;
++    --n;
++
++    if(c == '\n'){
++    800001ae:	4ca9                	li	s9,10
++  while(n > 0){
++    800001b0:	07305863          	blez	s3,80000220 <consoleread+0xbc>
++    while(cons.r == cons.w){
++    800001b4:	0984a783          	lw	a5,152(s1)
++    800001b8:	09c4a703          	lw	a4,156(s1)
++    800001bc:	02f71463          	bne	a4,a5,800001e4 <consoleread+0x80>
++      if(myproc()->killed){
++    800001c0:	00002097          	auipc	ra,0x2
++    800001c4:	bb6080e7          	jalr	-1098(ra) # 80001d76 <myproc>
++    800001c8:	551c                	lw	a5,40(a0)
++    800001ca:	e7b5                	bnez	a5,80000236 <consoleread+0xd2>
++      sleep(&cons.r, &cons.lock);
++    800001cc:	85a6                	mv	a1,s1
++    800001ce:	854a                	mv	a0,s2
++    800001d0:	00002097          	auipc	ra,0x2
++    800001d4:	3dc080e7          	jalr	988(ra) # 800025ac <sleep>
++    while(cons.r == cons.w){
++    800001d8:	0984a783          	lw	a5,152(s1)
++    800001dc:	09c4a703          	lw	a4,156(s1)
++    800001e0:	fef700e3          	beq	a4,a5,800001c0 <consoleread+0x5c>
++    c = cons.buf[cons.r++ % INPUT_BUF];
++    800001e4:	0017871b          	addiw	a4,a5,1
++    800001e8:	08e4ac23          	sw	a4,152(s1)
++    800001ec:	07f7f713          	andi	a4,a5,127
++    800001f0:	9726                	add	a4,a4,s1
++    800001f2:	01874703          	lbu	a4,24(a4)
++    800001f6:	00070d1b          	sext.w	s10,a4
++    if(c == C('D')){  // end-of-file
++    800001fa:	077d0563          	beq	s10,s7,80000264 <consoleread+0x100>
++    cbuf = c;
++    800001fe:	f8e40fa3          	sb	a4,-97(s0)
++    if(either_copyout(user_dst, dst, &cbuf, 1) == -1)
++    80000202:	4685                	li	a3,1
++    80000204:	f9f40613          	addi	a2,s0,-97
++    80000208:	85d2                	mv	a1,s4
++    8000020a:	8556                	mv	a0,s5
++    8000020c:	00002097          	auipc	ra,0x2
++    80000210:	768080e7          	jalr	1896(ra) # 80002974 <either_copyout>
++    80000214:	01850663          	beq	a0,s8,80000220 <consoleread+0xbc>
++    dst++;
++    80000218:	0a05                	addi	s4,s4,1
++    --n;
++    8000021a:	39fd                	addiw	s3,s3,-1
++    if(c == '\n'){
++    8000021c:	f99d1ae3          	bne	s10,s9,800001b0 <consoleread+0x4c>
++      // a whole line has arrived, return to
++      // the user-level read().
++      break;
++    }
++  }
++  release(&cons.lock);
++    80000220:	00011517          	auipc	a0,0x11
++    80000224:	f6050513          	addi	a0,a0,-160 # 80011180 <cons>
++    80000228:	00001097          	auipc	ra,0x1
++    8000022c:	a5c080e7          	jalr	-1444(ra) # 80000c84 <release>
++
++  return target - n;
++    80000230:	413b053b          	subw	a0,s6,s3
++    80000234:	a811                	j	80000248 <consoleread+0xe4>
++        release(&cons.lock);
++    80000236:	00011517          	auipc	a0,0x11
++    8000023a:	f4a50513          	addi	a0,a0,-182 # 80011180 <cons>
++    8000023e:	00001097          	auipc	ra,0x1
++    80000242:	a46080e7          	jalr	-1466(ra) # 80000c84 <release>
++        return -1;
++    80000246:	557d                	li	a0,-1
++}
++    80000248:	70a6                	ld	ra,104(sp)
++    8000024a:	7406                	ld	s0,96(sp)
++    8000024c:	64e6                	ld	s1,88(sp)
++    8000024e:	6946                	ld	s2,80(sp)
++    80000250:	69a6                	ld	s3,72(sp)
++    80000252:	6a06                	ld	s4,64(sp)
++    80000254:	7ae2                	ld	s5,56(sp)
++    80000256:	7b42                	ld	s6,48(sp)
++    80000258:	7ba2                	ld	s7,40(sp)
++    8000025a:	7c02                	ld	s8,32(sp)
++    8000025c:	6ce2                	ld	s9,24(sp)
++    8000025e:	6d42                	ld	s10,16(sp)
++    80000260:	6165                	addi	sp,sp,112
++    80000262:	8082                	ret
++      if(n < target){
++    80000264:	0009871b          	sext.w	a4,s3
++    80000268:	fb677ce3          	bgeu	a4,s6,80000220 <consoleread+0xbc>
++        cons.r--;
++    8000026c:	00011717          	auipc	a4,0x11
++    80000270:	faf72623          	sw	a5,-84(a4) # 80011218 <cons+0x98>
++    80000274:	b775                	j	80000220 <consoleread+0xbc>
++
++0000000080000276 <consputc>:
++{
++    80000276:	1141                	addi	sp,sp,-16
++    80000278:	e406                	sd	ra,8(sp)
++    8000027a:	e022                	sd	s0,0(sp)
++    8000027c:	0800                	addi	s0,sp,16
++  if(c == BACKSPACE){
++    8000027e:	10000793          	li	a5,256
++    80000282:	00f50a63          	beq	a0,a5,80000296 <consputc+0x20>
++    uartputc_sync(c);
++    80000286:	00000097          	auipc	ra,0x0
++    8000028a:	560080e7          	jalr	1376(ra) # 800007e6 <uartputc_sync>
++}
++    8000028e:	60a2                	ld	ra,8(sp)
++    80000290:	6402                	ld	s0,0(sp)
++    80000292:	0141                	addi	sp,sp,16
++    80000294:	8082                	ret
++    uartputc_sync('\b'); uartputc_sync(' '); uartputc_sync('\b');
++    80000296:	4521                	li	a0,8
++    80000298:	00000097          	auipc	ra,0x0
++    8000029c:	54e080e7          	jalr	1358(ra) # 800007e6 <uartputc_sync>
++    800002a0:	02000513          	li	a0,32
++    800002a4:	00000097          	auipc	ra,0x0
++    800002a8:	542080e7          	jalr	1346(ra) # 800007e6 <uartputc_sync>
++    800002ac:	4521                	li	a0,8
++    800002ae:	00000097          	auipc	ra,0x0
++    800002b2:	538080e7          	jalr	1336(ra) # 800007e6 <uartputc_sync>
++    800002b6:	bfe1                	j	8000028e <consputc+0x18>
++
++00000000800002b8 <consoleintr>:
++// do erase/kill processing, append to cons.buf,
++// wake up consoleread() if a whole line has arrived.
++//
++void
++consoleintr(int c)
++{
++    800002b8:	1101                	addi	sp,sp,-32
++    800002ba:	ec06                	sd	ra,24(sp)
++    800002bc:	e822                	sd	s0,16(sp)
++    800002be:	e426                	sd	s1,8(sp)
++    800002c0:	e04a                	sd	s2,0(sp)
++    800002c2:	1000                	addi	s0,sp,32
++    800002c4:	84aa                	mv	s1,a0
++  acquire(&cons.lock);
++    800002c6:	00011517          	auipc	a0,0x11
++    800002ca:	eba50513          	addi	a0,a0,-326 # 80011180 <cons>
++    800002ce:	00001097          	auipc	ra,0x1
++    800002d2:	902080e7          	jalr	-1790(ra) # 80000bd0 <acquire>
++
++  switch(c){
++    800002d6:	47d5                	li	a5,21
++    800002d8:	0af48663          	beq	s1,a5,80000384 <consoleintr+0xcc>
++    800002dc:	0297ca63          	blt	a5,s1,80000310 <consoleintr+0x58>
++    800002e0:	47a1                	li	a5,8
++    800002e2:	0ef48763          	beq	s1,a5,800003d0 <consoleintr+0x118>
++    800002e6:	47c1                	li	a5,16
++    800002e8:	10f49a63          	bne	s1,a5,800003fc <consoleintr+0x144>
++  case C('P'):  // Print process list.
++    procdump();
++    800002ec:	00002097          	auipc	ra,0x2
++    800002f0:	734080e7          	jalr	1844(ra) # 80002a20 <procdump>
++      }
++    }
++    break;
++  }
++  
++  release(&cons.lock);
++    800002f4:	00011517          	auipc	a0,0x11
++    800002f8:	e8c50513          	addi	a0,a0,-372 # 80011180 <cons>
++    800002fc:	00001097          	auipc	ra,0x1
++    80000300:	988080e7          	jalr	-1656(ra) # 80000c84 <release>
++}
++    80000304:	60e2                	ld	ra,24(sp)
++    80000306:	6442                	ld	s0,16(sp)
++    80000308:	64a2                	ld	s1,8(sp)
++    8000030a:	6902                	ld	s2,0(sp)
++    8000030c:	6105                	addi	sp,sp,32
++    8000030e:	8082                	ret
++  switch(c){
++    80000310:	07f00793          	li	a5,127
++    80000314:	0af48e63          	beq	s1,a5,800003d0 <consoleintr+0x118>
++    if(c != 0 && cons.e-cons.r < INPUT_BUF){
++    80000318:	00011717          	auipc	a4,0x11
++    8000031c:	e6870713          	addi	a4,a4,-408 # 80011180 <cons>
++    80000320:	0a072783          	lw	a5,160(a4)
++    80000324:	09872703          	lw	a4,152(a4)
++    80000328:	9f99                	subw	a5,a5,a4
++    8000032a:	07f00713          	li	a4,127
++    8000032e:	fcf763e3          	bltu	a4,a5,800002f4 <consoleintr+0x3c>
++      c = (c == '\r') ? '\n' : c;
++    80000332:	47b5                	li	a5,13
++    80000334:	0cf48763          	beq	s1,a5,80000402 <consoleintr+0x14a>
++      consputc(c);
++    80000338:	8526                	mv	a0,s1
++    8000033a:	00000097          	auipc	ra,0x0
++    8000033e:	f3c080e7          	jalr	-196(ra) # 80000276 <consputc>
++      cons.buf[cons.e++ % INPUT_BUF] = c;
++    80000342:	00011797          	auipc	a5,0x11
++    80000346:	e3e78793          	addi	a5,a5,-450 # 80011180 <cons>
++    8000034a:	0a07a703          	lw	a4,160(a5)
++    8000034e:	0017069b          	addiw	a3,a4,1
++    80000352:	0006861b          	sext.w	a2,a3
++    80000356:	0ad7a023          	sw	a3,160(a5)
++    8000035a:	07f77713          	andi	a4,a4,127
++    8000035e:	97ba                	add	a5,a5,a4
++    80000360:	00978c23          	sb	s1,24(a5)
++      if(c == '\n' || c == C('D') || cons.e == cons.r+INPUT_BUF){
++    80000364:	47a9                	li	a5,10
++    80000366:	0cf48563          	beq	s1,a5,80000430 <consoleintr+0x178>
++    8000036a:	4791                	li	a5,4
++    8000036c:	0cf48263          	beq	s1,a5,80000430 <consoleintr+0x178>
++    80000370:	00011797          	auipc	a5,0x11
++    80000374:	ea87a783          	lw	a5,-344(a5) # 80011218 <cons+0x98>
++    80000378:	0807879b          	addiw	a5,a5,128
++    8000037c:	f6f61ce3          	bne	a2,a5,800002f4 <consoleintr+0x3c>
++      cons.buf[cons.e++ % INPUT_BUF] = c;
++    80000380:	863e                	mv	a2,a5
++    80000382:	a07d                	j	80000430 <consoleintr+0x178>
++    while(cons.e != cons.w &&
++    80000384:	00011717          	auipc	a4,0x11
++    80000388:	dfc70713          	addi	a4,a4,-516 # 80011180 <cons>
++    8000038c:	0a072783          	lw	a5,160(a4)
++    80000390:	09c72703          	lw	a4,156(a4)
++          cons.buf[(cons.e-1) % INPUT_BUF] != '\n'){
++    80000394:	00011497          	auipc	s1,0x11
++    80000398:	dec48493          	addi	s1,s1,-532 # 80011180 <cons>
++    while(cons.e != cons.w &&
++    8000039c:	4929                	li	s2,10
++    8000039e:	f4f70be3          	beq	a4,a5,800002f4 <consoleintr+0x3c>
++          cons.buf[(cons.e-1) % INPUT_BUF] != '\n'){
++    800003a2:	37fd                	addiw	a5,a5,-1
++    800003a4:	07f7f713          	andi	a4,a5,127
++    800003a8:	9726                	add	a4,a4,s1
++    while(cons.e != cons.w &&
++    800003aa:	01874703          	lbu	a4,24(a4)
++    800003ae:	f52703e3          	beq	a4,s2,800002f4 <consoleintr+0x3c>
++      cons.e--;
++    800003b2:	0af4a023          	sw	a5,160(s1)
++      consputc(BACKSPACE);
++    800003b6:	10000513          	li	a0,256
++    800003ba:	00000097          	auipc	ra,0x0
++    800003be:	ebc080e7          	jalr	-324(ra) # 80000276 <consputc>
++    while(cons.e != cons.w &&
++    800003c2:	0a04a783          	lw	a5,160(s1)
++    800003c6:	09c4a703          	lw	a4,156(s1)
++    800003ca:	fcf71ce3          	bne	a4,a5,800003a2 <consoleintr+0xea>
++    800003ce:	b71d                	j	800002f4 <consoleintr+0x3c>
++    if(cons.e != cons.w){
++    800003d0:	00011717          	auipc	a4,0x11
++    800003d4:	db070713          	addi	a4,a4,-592 # 80011180 <cons>
++    800003d8:	0a072783          	lw	a5,160(a4)
++    800003dc:	09c72703          	lw	a4,156(a4)
++    800003e0:	f0f70ae3          	beq	a4,a5,800002f4 <consoleintr+0x3c>
++      cons.e--;
++    800003e4:	37fd                	addiw	a5,a5,-1
++    800003e6:	00011717          	auipc	a4,0x11
++    800003ea:	e2f72d23          	sw	a5,-454(a4) # 80011220 <cons+0xa0>
++      consputc(BACKSPACE);
++    800003ee:	10000513          	li	a0,256
++    800003f2:	00000097          	auipc	ra,0x0
++    800003f6:	e84080e7          	jalr	-380(ra) # 80000276 <consputc>
++    800003fa:	bded                	j	800002f4 <consoleintr+0x3c>
++    if(c != 0 && cons.e-cons.r < INPUT_BUF){
++    800003fc:	ee048ce3          	beqz	s1,800002f4 <consoleintr+0x3c>
++    80000400:	bf21                	j	80000318 <consoleintr+0x60>
++      consputc(c);
++    80000402:	4529                	li	a0,10
++    80000404:	00000097          	auipc	ra,0x0
++    80000408:	e72080e7          	jalr	-398(ra) # 80000276 <consputc>
++      cons.buf[cons.e++ % INPUT_BUF] = c;
++    8000040c:	00011797          	auipc	a5,0x11
++    80000410:	d7478793          	addi	a5,a5,-652 # 80011180 <cons>
++    80000414:	0a07a703          	lw	a4,160(a5)
++    80000418:	0017069b          	addiw	a3,a4,1
++    8000041c:	0006861b          	sext.w	a2,a3
++    80000420:	0ad7a023          	sw	a3,160(a5)
++    80000424:	07f77713          	andi	a4,a4,127
++    80000428:	97ba                	add	a5,a5,a4
++    8000042a:	4729                	li	a4,10
++    8000042c:	00e78c23          	sb	a4,24(a5)
++        cons.w = cons.e;
++    80000430:	00011797          	auipc	a5,0x11
++    80000434:	dec7a623          	sw	a2,-532(a5) # 8001121c <cons+0x9c>
++        wakeup(&cons.r);
++    80000438:	00011517          	auipc	a0,0x11
++    8000043c:	de050513          	addi	a0,a0,-544 # 80011218 <cons+0x98>
++    80000440:	00002097          	auipc	ra,0x2
++    80000444:	2f8080e7          	jalr	760(ra) # 80002738 <wakeup>
++    80000448:	b575                	j	800002f4 <consoleintr+0x3c>
++
++000000008000044a <consoleinit>:
++
++void
++consoleinit(void)
++{
++    8000044a:	1141                	addi	sp,sp,-16
++    8000044c:	e406                	sd	ra,8(sp)
++    8000044e:	e022                	sd	s0,0(sp)
++    80000450:	0800                	addi	s0,sp,16
++  initlock(&cons.lock, "cons");
++    80000452:	00008597          	auipc	a1,0x8
++    80000456:	bae58593          	addi	a1,a1,-1106 # 80008000 <etext>
++    8000045a:	00011517          	auipc	a0,0x11
++    8000045e:	d2650513          	addi	a0,a0,-730 # 80011180 <cons>
++    80000462:	00000097          	auipc	ra,0x0
++    80000466:	6de080e7          	jalr	1758(ra) # 80000b40 <initlock>
++
++  uartinit();
++    8000046a:	00000097          	auipc	ra,0x0
++    8000046e:	32c080e7          	jalr	812(ra) # 80000796 <uartinit>
++
++  // connect read and write system calls
++  // to consoleread and consolewrite.
++  devsw[CONSOLE].read = consoleread;
++    80000472:	00024797          	auipc	a5,0x24
++    80000476:	49e78793          	addi	a5,a5,1182 # 80024910 <devsw>
++    8000047a:	00000717          	auipc	a4,0x0
++    8000047e:	cea70713          	addi	a4,a4,-790 # 80000164 <consoleread>
++    80000482:	eb98                	sd	a4,16(a5)
++  devsw[CONSOLE].write = consolewrite;
++    80000484:	00000717          	auipc	a4,0x0
++    80000488:	c7c70713          	addi	a4,a4,-900 # 80000100 <consolewrite>
++    8000048c:	ef98                	sd	a4,24(a5)
++}
++    8000048e:	60a2                	ld	ra,8(sp)
++    80000490:	6402                	ld	s0,0(sp)
++    80000492:	0141                	addi	sp,sp,16
++    80000494:	8082                	ret
++
++0000000080000496 <printint>:
++
++static char digits[] = "0123456789abcdef";
++
++static void
++printint(int xx, int base, int sign)
++{
++    80000496:	7179                	addi	sp,sp,-48
++    80000498:	f406                	sd	ra,40(sp)
++    8000049a:	f022                	sd	s0,32(sp)
++    8000049c:	ec26                	sd	s1,24(sp)
++    8000049e:	e84a                	sd	s2,16(sp)
++    800004a0:	1800                	addi	s0,sp,48
++  char buf[16];
++  int i;
++  uint x;
++
++  if(sign && (sign = xx < 0))
++    800004a2:	c219                	beqz	a2,800004a8 <printint+0x12>
++    800004a4:	08054763          	bltz	a0,80000532 <printint+0x9c>
++    x = -xx;
++  else
++    x = xx;
++    800004a8:	2501                	sext.w	a0,a0
++    800004aa:	4881                	li	a7,0
++    800004ac:	fd040693          	addi	a3,s0,-48
++
++  i = 0;
++    800004b0:	4701                	li	a4,0
++  do {
++    buf[i++] = digits[x % base];
++    800004b2:	2581                	sext.w	a1,a1
++    800004b4:	00008617          	auipc	a2,0x8
++    800004b8:	b7c60613          	addi	a2,a2,-1156 # 80008030 <digits>
++    800004bc:	883a                	mv	a6,a4
++    800004be:	2705                	addiw	a4,a4,1
++    800004c0:	02b577bb          	remuw	a5,a0,a1
++    800004c4:	1782                	slli	a5,a5,0x20
++    800004c6:	9381                	srli	a5,a5,0x20
++    800004c8:	97b2                	add	a5,a5,a2
++    800004ca:	0007c783          	lbu	a5,0(a5)
++    800004ce:	00f68023          	sb	a5,0(a3)
++  } while((x /= base) != 0);
++    800004d2:	0005079b          	sext.w	a5,a0
++    800004d6:	02b5553b          	divuw	a0,a0,a1
++    800004da:	0685                	addi	a3,a3,1
++    800004dc:	feb7f0e3          	bgeu	a5,a1,800004bc <printint+0x26>
++
++  if(sign)
++    800004e0:	00088c63          	beqz	a7,800004f8 <printint+0x62>
++    buf[i++] = '-';
++    800004e4:	fe070793          	addi	a5,a4,-32
++    800004e8:	00878733          	add	a4,a5,s0
++    800004ec:	02d00793          	li	a5,45
++    800004f0:	fef70823          	sb	a5,-16(a4)
++    800004f4:	0028071b          	addiw	a4,a6,2
++
++  while(--i >= 0)
++    800004f8:	02e05763          	blez	a4,80000526 <printint+0x90>
++    800004fc:	fd040793          	addi	a5,s0,-48
++    80000500:	00e784b3          	add	s1,a5,a4
++    80000504:	fff78913          	addi	s2,a5,-1
++    80000508:	993a                	add	s2,s2,a4
++    8000050a:	377d                	addiw	a4,a4,-1
++    8000050c:	1702                	slli	a4,a4,0x20
++    8000050e:	9301                	srli	a4,a4,0x20
++    80000510:	40e90933          	sub	s2,s2,a4
++    consputc(buf[i]);
++    80000514:	fff4c503          	lbu	a0,-1(s1)
++    80000518:	00000097          	auipc	ra,0x0
++    8000051c:	d5e080e7          	jalr	-674(ra) # 80000276 <consputc>
++  while(--i >= 0)
++    80000520:	14fd                	addi	s1,s1,-1
++    80000522:	ff2499e3          	bne	s1,s2,80000514 <printint+0x7e>
++}
++    80000526:	70a2                	ld	ra,40(sp)
++    80000528:	7402                	ld	s0,32(sp)
++    8000052a:	64e2                	ld	s1,24(sp)
++    8000052c:	6942                	ld	s2,16(sp)
++    8000052e:	6145                	addi	sp,sp,48
++    80000530:	8082                	ret
++    x = -xx;
++    80000532:	40a0053b          	negw	a0,a0
++  if(sign && (sign = xx < 0))
++    80000536:	4885                	li	a7,1
++    x = -xx;
++    80000538:	bf95                	j	800004ac <printint+0x16>
++
++000000008000053a <panic>:
++    release(&pr.lock);
++}
++
++void
++panic(char *s)
++{
++    8000053a:	1101                	addi	sp,sp,-32
++    8000053c:	ec06                	sd	ra,24(sp)
++    8000053e:	e822                	sd	s0,16(sp)
++    80000540:	e426                	sd	s1,8(sp)
++    80000542:	1000                	addi	s0,sp,32
++    80000544:	84aa                	mv	s1,a0
++  pr.locking = 0;
++    80000546:	00011797          	auipc	a5,0x11
++    8000054a:	ce07ad23          	sw	zero,-774(a5) # 80011240 <pr+0x18>
++  printf("panic: ");
++    8000054e:	00008517          	auipc	a0,0x8
++    80000552:	aba50513          	addi	a0,a0,-1350 # 80008008 <etext+0x8>
++    80000556:	00000097          	auipc	ra,0x0
++    8000055a:	02e080e7          	jalr	46(ra) # 80000584 <printf>
++  printf(s);
++    8000055e:	8526                	mv	a0,s1
++    80000560:	00000097          	auipc	ra,0x0
++    80000564:	024080e7          	jalr	36(ra) # 80000584 <printf>
++  printf("\n");
++    80000568:	00008517          	auipc	a0,0x8
++    8000056c:	b5050513          	addi	a0,a0,-1200 # 800080b8 <digits+0x88>
++    80000570:	00000097          	auipc	ra,0x0
++    80000574:	014080e7          	jalr	20(ra) # 80000584 <printf>
++  panicked = 1; // freeze uart output from other CPUs
++    80000578:	4785                	li	a5,1
++    8000057a:	00009717          	auipc	a4,0x9
++    8000057e:	a8f72323          	sw	a5,-1402(a4) # 80009000 <panicked>
++  for(;;)
++    80000582:	a001                	j	80000582 <panic+0x48>
++
++0000000080000584 <printf>:
++{
++    80000584:	7131                	addi	sp,sp,-192
++    80000586:	fc86                	sd	ra,120(sp)
++    80000588:	f8a2                	sd	s0,112(sp)
++    8000058a:	f4a6                	sd	s1,104(sp)
++    8000058c:	f0ca                	sd	s2,96(sp)
++    8000058e:	ecce                	sd	s3,88(sp)
++    80000590:	e8d2                	sd	s4,80(sp)
++    80000592:	e4d6                	sd	s5,72(sp)
++    80000594:	e0da                	sd	s6,64(sp)
++    80000596:	fc5e                	sd	s7,56(sp)
++    80000598:	f862                	sd	s8,48(sp)
++    8000059a:	f466                	sd	s9,40(sp)
++    8000059c:	f06a                	sd	s10,32(sp)
++    8000059e:	ec6e                	sd	s11,24(sp)
++    800005a0:	0100                	addi	s0,sp,128
++    800005a2:	8a2a                	mv	s4,a0
++    800005a4:	e40c                	sd	a1,8(s0)
++    800005a6:	e810                	sd	a2,16(s0)
++    800005a8:	ec14                	sd	a3,24(s0)
++    800005aa:	f018                	sd	a4,32(s0)
++    800005ac:	f41c                	sd	a5,40(s0)
++    800005ae:	03043823          	sd	a6,48(s0)
++    800005b2:	03143c23          	sd	a7,56(s0)
++  locking = pr.locking;
++    800005b6:	00011d97          	auipc	s11,0x11
++    800005ba:	c8adad83          	lw	s11,-886(s11) # 80011240 <pr+0x18>
++  if(locking)
++    800005be:	020d9b63          	bnez	s11,800005f4 <printf+0x70>
++  if (fmt == 0)
++    800005c2:	040a0263          	beqz	s4,80000606 <printf+0x82>
++  va_start(ap, fmt);
++    800005c6:	00840793          	addi	a5,s0,8
++    800005ca:	f8f43423          	sd	a5,-120(s0)
++  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
++    800005ce:	000a4503          	lbu	a0,0(s4)
++    800005d2:	14050f63          	beqz	a0,80000730 <printf+0x1ac>
++    800005d6:	4981                	li	s3,0
++    if(c != '%'){
++    800005d8:	02500a93          	li	s5,37
++    switch(c){
++    800005dc:	07000b93          	li	s7,112
++  consputc('x');
++    800005e0:	4d41                	li	s10,16
++    consputc(digits[x >> (sizeof(uint64) * 8 - 4)]);
++    800005e2:	00008b17          	auipc	s6,0x8
++    800005e6:	a4eb0b13          	addi	s6,s6,-1458 # 80008030 <digits>
++    switch(c){
++    800005ea:	07300c93          	li	s9,115
++    800005ee:	06400c13          	li	s8,100
++    800005f2:	a82d                	j	8000062c <printf+0xa8>
++    acquire(&pr.lock);
++    800005f4:	00011517          	auipc	a0,0x11
++    800005f8:	c3450513          	addi	a0,a0,-972 # 80011228 <pr>
++    800005fc:	00000097          	auipc	ra,0x0
++    80000600:	5d4080e7          	jalr	1492(ra) # 80000bd0 <acquire>
++    80000604:	bf7d                	j	800005c2 <printf+0x3e>
++    panic("null fmt");
++    80000606:	00008517          	auipc	a0,0x8
++    8000060a:	a1250513          	addi	a0,a0,-1518 # 80008018 <etext+0x18>
++    8000060e:	00000097          	auipc	ra,0x0
++    80000612:	f2c080e7          	jalr	-212(ra) # 8000053a <panic>
++      consputc(c);
++    80000616:	00000097          	auipc	ra,0x0
++    8000061a:	c60080e7          	jalr	-928(ra) # 80000276 <consputc>
++  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
++    8000061e:	2985                	addiw	s3,s3,1
++    80000620:	013a07b3          	add	a5,s4,s3
++    80000624:	0007c503          	lbu	a0,0(a5)
++    80000628:	10050463          	beqz	a0,80000730 <printf+0x1ac>
++    if(c != '%'){
++    8000062c:	ff5515e3          	bne	a0,s5,80000616 <printf+0x92>
++    c = fmt[++i] & 0xff;
++    80000630:	2985                	addiw	s3,s3,1
++    80000632:	013a07b3          	add	a5,s4,s3
++    80000636:	0007c783          	lbu	a5,0(a5)
++    8000063a:	0007849b          	sext.w	s1,a5
++    if(c == 0)
++    8000063e:	cbed                	beqz	a5,80000730 <printf+0x1ac>
++    switch(c){
++    80000640:	05778a63          	beq	a5,s7,80000694 <printf+0x110>
++    80000644:	02fbf663          	bgeu	s7,a5,80000670 <printf+0xec>
++    80000648:	09978863          	beq	a5,s9,800006d8 <printf+0x154>
++    8000064c:	07800713          	li	a4,120
++    80000650:	0ce79563          	bne	a5,a4,8000071a <printf+0x196>
++      printint(va_arg(ap, int), 16, 1);
++    80000654:	f8843783          	ld	a5,-120(s0)
++    80000658:	00878713          	addi	a4,a5,8
++    8000065c:	f8e43423          	sd	a4,-120(s0)
++    80000660:	4605                	li	a2,1
++    80000662:	85ea                	mv	a1,s10
++    80000664:	4388                	lw	a0,0(a5)
++    80000666:	00000097          	auipc	ra,0x0
++    8000066a:	e30080e7          	jalr	-464(ra) # 80000496 <printint>
++      break;
++    8000066e:	bf45                	j	8000061e <printf+0x9a>
++    switch(c){
++    80000670:	09578f63          	beq	a5,s5,8000070e <printf+0x18a>
++    80000674:	0b879363          	bne	a5,s8,8000071a <printf+0x196>
++      printint(va_arg(ap, int), 10, 1);
++    80000678:	f8843783          	ld	a5,-120(s0)
++    8000067c:	00878713          	addi	a4,a5,8
++    80000680:	f8e43423          	sd	a4,-120(s0)
++    80000684:	4605                	li	a2,1
++    80000686:	45a9                	li	a1,10
++    80000688:	4388                	lw	a0,0(a5)
++    8000068a:	00000097          	auipc	ra,0x0
++    8000068e:	e0c080e7          	jalr	-500(ra) # 80000496 <printint>
++      break;
++    80000692:	b771                	j	8000061e <printf+0x9a>
++      printptr(va_arg(ap, uint64));
++    80000694:	f8843783          	ld	a5,-120(s0)
++    80000698:	00878713          	addi	a4,a5,8
++    8000069c:	f8e43423          	sd	a4,-120(s0)
++    800006a0:	0007b903          	ld	s2,0(a5)
++  consputc('0');
++    800006a4:	03000513          	li	a0,48
++    800006a8:	00000097          	auipc	ra,0x0
++    800006ac:	bce080e7          	jalr	-1074(ra) # 80000276 <consputc>
++  consputc('x');
++    800006b0:	07800513          	li	a0,120
++    800006b4:	00000097          	auipc	ra,0x0
++    800006b8:	bc2080e7          	jalr	-1086(ra) # 80000276 <consputc>
++    800006bc:	84ea                	mv	s1,s10
++    consputc(digits[x >> (sizeof(uint64) * 8 - 4)]);
++    800006be:	03c95793          	srli	a5,s2,0x3c
++    800006c2:	97da                	add	a5,a5,s6
++    800006c4:	0007c503          	lbu	a0,0(a5)
++    800006c8:	00000097          	auipc	ra,0x0
++    800006cc:	bae080e7          	jalr	-1106(ra) # 80000276 <consputc>
++  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
++    800006d0:	0912                	slli	s2,s2,0x4
++    800006d2:	34fd                	addiw	s1,s1,-1
++    800006d4:	f4ed                	bnez	s1,800006be <printf+0x13a>
++    800006d6:	b7a1                	j	8000061e <printf+0x9a>
++      if((s = va_arg(ap, char*)) == 0)
++    800006d8:	f8843783          	ld	a5,-120(s0)
++    800006dc:	00878713          	addi	a4,a5,8
++    800006e0:	f8e43423          	sd	a4,-120(s0)
++    800006e4:	6384                	ld	s1,0(a5)
++    800006e6:	cc89                	beqz	s1,80000700 <printf+0x17c>
++      for(; *s; s++)
++    800006e8:	0004c503          	lbu	a0,0(s1)
++    800006ec:	d90d                	beqz	a0,8000061e <printf+0x9a>
++        consputc(*s);
++    800006ee:	00000097          	auipc	ra,0x0
++    800006f2:	b88080e7          	jalr	-1144(ra) # 80000276 <consputc>
++      for(; *s; s++)
++    800006f6:	0485                	addi	s1,s1,1
++    800006f8:	0004c503          	lbu	a0,0(s1)
++    800006fc:	f96d                	bnez	a0,800006ee <printf+0x16a>
++    800006fe:	b705                	j	8000061e <printf+0x9a>
++        s = "(null)";
++    80000700:	00008497          	auipc	s1,0x8
++    80000704:	91048493          	addi	s1,s1,-1776 # 80008010 <etext+0x10>
++      for(; *s; s++)
++    80000708:	02800513          	li	a0,40
++    8000070c:	b7cd                	j	800006ee <printf+0x16a>
++      consputc('%');
++    8000070e:	8556                	mv	a0,s5
++    80000710:	00000097          	auipc	ra,0x0
++    80000714:	b66080e7          	jalr	-1178(ra) # 80000276 <consputc>
++      break;
++    80000718:	b719                	j	8000061e <printf+0x9a>
++      consputc('%');
++    8000071a:	8556                	mv	a0,s5
++    8000071c:	00000097          	auipc	ra,0x0
++    80000720:	b5a080e7          	jalr	-1190(ra) # 80000276 <consputc>
++      consputc(c);
++    80000724:	8526                	mv	a0,s1
++    80000726:	00000097          	auipc	ra,0x0
++    8000072a:	b50080e7          	jalr	-1200(ra) # 80000276 <consputc>
++      break;
++    8000072e:	bdc5                	j	8000061e <printf+0x9a>
++  if(locking)
++    80000730:	020d9163          	bnez	s11,80000752 <printf+0x1ce>
++}
++    80000734:	70e6                	ld	ra,120(sp)
++    80000736:	7446                	ld	s0,112(sp)
++    80000738:	74a6                	ld	s1,104(sp)
++    8000073a:	7906                	ld	s2,96(sp)
++    8000073c:	69e6                	ld	s3,88(sp)
++    8000073e:	6a46                	ld	s4,80(sp)
++    80000740:	6aa6                	ld	s5,72(sp)
++    80000742:	6b06                	ld	s6,64(sp)
++    80000744:	7be2                	ld	s7,56(sp)
++    80000746:	7c42                	ld	s8,48(sp)
++    80000748:	7ca2                	ld	s9,40(sp)
++    8000074a:	7d02                	ld	s10,32(sp)
++    8000074c:	6de2                	ld	s11,24(sp)
++    8000074e:	6129                	addi	sp,sp,192
++    80000750:	8082                	ret
++    release(&pr.lock);
++    80000752:	00011517          	auipc	a0,0x11
++    80000756:	ad650513          	addi	a0,a0,-1322 # 80011228 <pr>
++    8000075a:	00000097          	auipc	ra,0x0
++    8000075e:	52a080e7          	jalr	1322(ra) # 80000c84 <release>
++}
++    80000762:	bfc9                	j	80000734 <printf+0x1b0>
++
++0000000080000764 <printfinit>:
++    ;
++}
++
++void
++printfinit(void)
++{
++    80000764:	1101                	addi	sp,sp,-32
++    80000766:	ec06                	sd	ra,24(sp)
++    80000768:	e822                	sd	s0,16(sp)
++    8000076a:	e426                	sd	s1,8(sp)
++    8000076c:	1000                	addi	s0,sp,32
++  initlock(&pr.lock, "pr");
++    8000076e:	00011497          	auipc	s1,0x11
++    80000772:	aba48493          	addi	s1,s1,-1350 # 80011228 <pr>
++    80000776:	00008597          	auipc	a1,0x8
++    8000077a:	8b258593          	addi	a1,a1,-1870 # 80008028 <etext+0x28>
++    8000077e:	8526                	mv	a0,s1
++    80000780:	00000097          	auipc	ra,0x0
++    80000784:	3c0080e7          	jalr	960(ra) # 80000b40 <initlock>
++  pr.locking = 1;
++    80000788:	4785                	li	a5,1
++    8000078a:	cc9c                	sw	a5,24(s1)
++}
++    8000078c:	60e2                	ld	ra,24(sp)
++    8000078e:	6442                	ld	s0,16(sp)
++    80000790:	64a2                	ld	s1,8(sp)
++    80000792:	6105                	addi	sp,sp,32
++    80000794:	8082                	ret
++
++0000000080000796 <uartinit>:
++
++void uartstart();
++
++void
++uartinit(void)
++{
++    80000796:	1141                	addi	sp,sp,-16
++    80000798:	e406                	sd	ra,8(sp)
++    8000079a:	e022                	sd	s0,0(sp)
++    8000079c:	0800                	addi	s0,sp,16
++  // disable interrupts.
++  WriteReg(IER, 0x00);
++    8000079e:	100007b7          	lui	a5,0x10000
++    800007a2:	000780a3          	sb	zero,1(a5) # 10000001 <_entry-0x6fffffff>
++
++  // special mode to set baud rate.
++  WriteReg(LCR, LCR_BAUD_LATCH);
++    800007a6:	f8000713          	li	a4,-128
++    800007aa:	00e781a3          	sb	a4,3(a5)
++
++  // LSB for baud rate of 38.4K.
++  WriteReg(0, 0x03);
++    800007ae:	470d                	li	a4,3
++    800007b0:	00e78023          	sb	a4,0(a5)
++
++  // MSB for baud rate of 38.4K.
++  WriteReg(1, 0x00);
++    800007b4:	000780a3          	sb	zero,1(a5)
++
++  // leave set-baud mode,
++  // and set word length to 8 bits, no parity.
++  WriteReg(LCR, LCR_EIGHT_BITS);
++    800007b8:	00e781a3          	sb	a4,3(a5)
++
++  // reset and enable FIFOs.
++  WriteReg(FCR, FCR_FIFO_ENABLE | FCR_FIFO_CLEAR);
++    800007bc:	469d                	li	a3,7
++    800007be:	00d78123          	sb	a3,2(a5)
++
++  // enable transmit and receive interrupts.
++  WriteReg(IER, IER_TX_ENABLE | IER_RX_ENABLE);
++    800007c2:	00e780a3          	sb	a4,1(a5)
++
++  initlock(&uart_tx_lock, "uart");
++    800007c6:	00008597          	auipc	a1,0x8
++    800007ca:	88258593          	addi	a1,a1,-1918 # 80008048 <digits+0x18>
++    800007ce:	00011517          	auipc	a0,0x11
++    800007d2:	a7a50513          	addi	a0,a0,-1414 # 80011248 <uart_tx_lock>
++    800007d6:	00000097          	auipc	ra,0x0
++    800007da:	36a080e7          	jalr	874(ra) # 80000b40 <initlock>
++}
++    800007de:	60a2                	ld	ra,8(sp)
++    800007e0:	6402                	ld	s0,0(sp)
++    800007e2:	0141                	addi	sp,sp,16
++    800007e4:	8082                	ret
++
++00000000800007e6 <uartputc_sync>:
++// use interrupts, for use by kernel printf() and
++// to echo characters. it spins waiting for the uart's
++// output register to be empty.
++void
++uartputc_sync(int c)
++{
++    800007e6:	1101                	addi	sp,sp,-32
++    800007e8:	ec06                	sd	ra,24(sp)
++    800007ea:	e822                	sd	s0,16(sp)
++    800007ec:	e426                	sd	s1,8(sp)
++    800007ee:	1000                	addi	s0,sp,32
++    800007f0:	84aa                	mv	s1,a0
++  push_off();
++    800007f2:	00000097          	auipc	ra,0x0
++    800007f6:	392080e7          	jalr	914(ra) # 80000b84 <push_off>
++
++  if(panicked){
++    800007fa:	00009797          	auipc	a5,0x9
++    800007fe:	8067a783          	lw	a5,-2042(a5) # 80009000 <panicked>
++    for(;;)
++      ;
++  }
++
++  // wait for Transmit Holding Empty to be set in LSR.
++  while((ReadReg(LSR) & LSR_TX_IDLE) == 0)
++    80000802:	10000737          	lui	a4,0x10000
++  if(panicked){
++    80000806:	c391                	beqz	a5,8000080a <uartputc_sync+0x24>
++    for(;;)
++    80000808:	a001                	j	80000808 <uartputc_sync+0x22>
++  while((ReadReg(LSR) & LSR_TX_IDLE) == 0)
++    8000080a:	00574783          	lbu	a5,5(a4) # 10000005 <_entry-0x6ffffffb>
++    8000080e:	0207f793          	andi	a5,a5,32
++    80000812:	dfe5                	beqz	a5,8000080a <uartputc_sync+0x24>
++    ;
++  WriteReg(THR, c);
++    80000814:	0ff4f513          	zext.b	a0,s1
++    80000818:	100007b7          	lui	a5,0x10000
++    8000081c:	00a78023          	sb	a0,0(a5) # 10000000 <_entry-0x70000000>
++
++  pop_off();
++    80000820:	00000097          	auipc	ra,0x0
++    80000824:	404080e7          	jalr	1028(ra) # 80000c24 <pop_off>
++}
++    80000828:	60e2                	ld	ra,24(sp)
++    8000082a:	6442                	ld	s0,16(sp)
++    8000082c:	64a2                	ld	s1,8(sp)
++    8000082e:	6105                	addi	sp,sp,32
++    80000830:	8082                	ret
++
++0000000080000832 <uartstart>:
++// called from both the top- and bottom-half.
++void
++uartstart()
++{
++  while(1){
++    if(uart_tx_w == uart_tx_r){
++    80000832:	00008797          	auipc	a5,0x8
++    80000836:	7d67b783          	ld	a5,2006(a5) # 80009008 <uart_tx_r>
++    8000083a:	00008717          	auipc	a4,0x8
++    8000083e:	7d673703          	ld	a4,2006(a4) # 80009010 <uart_tx_w>
++    80000842:	06f70a63          	beq	a4,a5,800008b6 <uartstart+0x84>
++{
++    80000846:	7139                	addi	sp,sp,-64
++    80000848:	fc06                	sd	ra,56(sp)
++    8000084a:	f822                	sd	s0,48(sp)
++    8000084c:	f426                	sd	s1,40(sp)
++    8000084e:	f04a                	sd	s2,32(sp)
++    80000850:	ec4e                	sd	s3,24(sp)
++    80000852:	e852                	sd	s4,16(sp)
++    80000854:	e456                	sd	s5,8(sp)
++    80000856:	0080                	addi	s0,sp,64
++      // transmit buffer is empty.
++      return;
++    }
++    
++    if((ReadReg(LSR) & LSR_TX_IDLE) == 0){
++    80000858:	10000937          	lui	s2,0x10000
++      // so we cannot give it another byte.
++      // it will interrupt when it's ready for a new byte.
++      return;
++    }
++    
++    int c = uart_tx_buf[uart_tx_r % UART_TX_BUF_SIZE];
++    8000085c:	00011a17          	auipc	s4,0x11
++    80000860:	9eca0a13          	addi	s4,s4,-1556 # 80011248 <uart_tx_lock>
++    uart_tx_r += 1;
++    80000864:	00008497          	auipc	s1,0x8
++    80000868:	7a448493          	addi	s1,s1,1956 # 80009008 <uart_tx_r>
++    if(uart_tx_w == uart_tx_r){
++    8000086c:	00008997          	auipc	s3,0x8
++    80000870:	7a498993          	addi	s3,s3,1956 # 80009010 <uart_tx_w>
++    if((ReadReg(LSR) & LSR_TX_IDLE) == 0){
++    80000874:	00594703          	lbu	a4,5(s2) # 10000005 <_entry-0x6ffffffb>
++    80000878:	02077713          	andi	a4,a4,32
++    8000087c:	c705                	beqz	a4,800008a4 <uartstart+0x72>
++    int c = uart_tx_buf[uart_tx_r % UART_TX_BUF_SIZE];
++    8000087e:	01f7f713          	andi	a4,a5,31
++    80000882:	9752                	add	a4,a4,s4
++    80000884:	01874a83          	lbu	s5,24(a4)
++    uart_tx_r += 1;
++    80000888:	0785                	addi	a5,a5,1
++    8000088a:	e09c                	sd	a5,0(s1)
++    
++    // maybe uartputc() is waiting for space in the buffer.
++    wakeup(&uart_tx_r);
++    8000088c:	8526                	mv	a0,s1
++    8000088e:	00002097          	auipc	ra,0x2
++    80000892:	eaa080e7          	jalr	-342(ra) # 80002738 <wakeup>
++    
++    WriteReg(THR, c);
++    80000896:	01590023          	sb	s5,0(s2)
++    if(uart_tx_w == uart_tx_r){
++    8000089a:	609c                	ld	a5,0(s1)
++    8000089c:	0009b703          	ld	a4,0(s3)
++    800008a0:	fcf71ae3          	bne	a4,a5,80000874 <uartstart+0x42>
++  }
++}
++    800008a4:	70e2                	ld	ra,56(sp)
++    800008a6:	7442                	ld	s0,48(sp)
++    800008a8:	74a2                	ld	s1,40(sp)
++    800008aa:	7902                	ld	s2,32(sp)
++    800008ac:	69e2                	ld	s3,24(sp)
++    800008ae:	6a42                	ld	s4,16(sp)
++    800008b0:	6aa2                	ld	s5,8(sp)
++    800008b2:	6121                	addi	sp,sp,64
++    800008b4:	8082                	ret
++    800008b6:	8082                	ret
++
++00000000800008b8 <uartputc>:
++{
++    800008b8:	7179                	addi	sp,sp,-48
++    800008ba:	f406                	sd	ra,40(sp)
++    800008bc:	f022                	sd	s0,32(sp)
++    800008be:	ec26                	sd	s1,24(sp)
++    800008c0:	e84a                	sd	s2,16(sp)
++    800008c2:	e44e                	sd	s3,8(sp)
++    800008c4:	e052                	sd	s4,0(sp)
++    800008c6:	1800                	addi	s0,sp,48
++    800008c8:	8a2a                	mv	s4,a0
++  acquire(&uart_tx_lock);
++    800008ca:	00011517          	auipc	a0,0x11
++    800008ce:	97e50513          	addi	a0,a0,-1666 # 80011248 <uart_tx_lock>
++    800008d2:	00000097          	auipc	ra,0x0
++    800008d6:	2fe080e7          	jalr	766(ra) # 80000bd0 <acquire>
++  if(panicked){
++    800008da:	00008797          	auipc	a5,0x8
++    800008de:	7267a783          	lw	a5,1830(a5) # 80009000 <panicked>
++    800008e2:	c391                	beqz	a5,800008e6 <uartputc+0x2e>
++    for(;;)
++    800008e4:	a001                	j	800008e4 <uartputc+0x2c>
++    if(uart_tx_w == uart_tx_r + UART_TX_BUF_SIZE){
++    800008e6:	00008717          	auipc	a4,0x8
++    800008ea:	72a73703          	ld	a4,1834(a4) # 80009010 <uart_tx_w>
++    800008ee:	00008797          	auipc	a5,0x8
++    800008f2:	71a7b783          	ld	a5,1818(a5) # 80009008 <uart_tx_r>
++    800008f6:	02078793          	addi	a5,a5,32
++    800008fa:	02e79b63          	bne	a5,a4,80000930 <uartputc+0x78>
++      sleep(&uart_tx_r, &uart_tx_lock);
++    800008fe:	00011997          	auipc	s3,0x11
++    80000902:	94a98993          	addi	s3,s3,-1718 # 80011248 <uart_tx_lock>
++    80000906:	00008497          	auipc	s1,0x8
++    8000090a:	70248493          	addi	s1,s1,1794 # 80009008 <uart_tx_r>
++    if(uart_tx_w == uart_tx_r + UART_TX_BUF_SIZE){
++    8000090e:	00008917          	auipc	s2,0x8
++    80000912:	70290913          	addi	s2,s2,1794 # 80009010 <uart_tx_w>
++      sleep(&uart_tx_r, &uart_tx_lock);
++    80000916:	85ce                	mv	a1,s3
++    80000918:	8526                	mv	a0,s1
++    8000091a:	00002097          	auipc	ra,0x2
++    8000091e:	c92080e7          	jalr	-878(ra) # 800025ac <sleep>
++    if(uart_tx_w == uart_tx_r + UART_TX_BUF_SIZE){
++    80000922:	00093703          	ld	a4,0(s2)
++    80000926:	609c                	ld	a5,0(s1)
++    80000928:	02078793          	addi	a5,a5,32
++    8000092c:	fee785e3          	beq	a5,a4,80000916 <uartputc+0x5e>
++      uart_tx_buf[uart_tx_w % UART_TX_BUF_SIZE] = c;
++    80000930:	00011497          	auipc	s1,0x11
++    80000934:	91848493          	addi	s1,s1,-1768 # 80011248 <uart_tx_lock>
++    80000938:	01f77793          	andi	a5,a4,31
++    8000093c:	97a6                	add	a5,a5,s1
++    8000093e:	01478c23          	sb	s4,24(a5)
++      uart_tx_w += 1;
++    80000942:	0705                	addi	a4,a4,1
++    80000944:	00008797          	auipc	a5,0x8
++    80000948:	6ce7b623          	sd	a4,1740(a5) # 80009010 <uart_tx_w>
++      uartstart();
++    8000094c:	00000097          	auipc	ra,0x0
++    80000950:	ee6080e7          	jalr	-282(ra) # 80000832 <uartstart>
++      release(&uart_tx_lock);
++    80000954:	8526                	mv	a0,s1
++    80000956:	00000097          	auipc	ra,0x0
++    8000095a:	32e080e7          	jalr	814(ra) # 80000c84 <release>
++}
++    8000095e:	70a2                	ld	ra,40(sp)
++    80000960:	7402                	ld	s0,32(sp)
++    80000962:	64e2                	ld	s1,24(sp)
++    80000964:	6942                	ld	s2,16(sp)
++    80000966:	69a2                	ld	s3,8(sp)
++    80000968:	6a02                	ld	s4,0(sp)
++    8000096a:	6145                	addi	sp,sp,48
++    8000096c:	8082                	ret
++
++000000008000096e <uartgetc>:
++
++// read one input character from the UART.
++// return -1 if none is waiting.
++int
++uartgetc(void)
++{
++    8000096e:	1141                	addi	sp,sp,-16
++    80000970:	e422                	sd	s0,8(sp)
++    80000972:	0800                	addi	s0,sp,16
++  if(ReadReg(LSR) & 0x01){
++    80000974:	100007b7          	lui	a5,0x10000
++    80000978:	0057c783          	lbu	a5,5(a5) # 10000005 <_entry-0x6ffffffb>
++    8000097c:	8b85                	andi	a5,a5,1
++    8000097e:	cb81                	beqz	a5,8000098e <uartgetc+0x20>
++    // input data is ready.
++    return ReadReg(RHR);
++    80000980:	100007b7          	lui	a5,0x10000
++    80000984:	0007c503          	lbu	a0,0(a5) # 10000000 <_entry-0x70000000>
++  } else {
++    return -1;
++  }
++}
++    80000988:	6422                	ld	s0,8(sp)
++    8000098a:	0141                	addi	sp,sp,16
++    8000098c:	8082                	ret
++    return -1;
++    8000098e:	557d                	li	a0,-1
++    80000990:	bfe5                	j	80000988 <uartgetc+0x1a>
++
++0000000080000992 <uartintr>:
++// handle a uart interrupt, raised because input has
++// arrived, or the uart is ready for more output, or
++// both. called from trap.c.
++void
++uartintr(void)
++{
++    80000992:	1101                	addi	sp,sp,-32
++    80000994:	ec06                	sd	ra,24(sp)
++    80000996:	e822                	sd	s0,16(sp)
++    80000998:	e426                	sd	s1,8(sp)
++    8000099a:	1000                	addi	s0,sp,32
++  // read and process incoming characters.
++  while(1){
++    int c = uartgetc();
++    if(c == -1)
++    8000099c:	54fd                	li	s1,-1
++    8000099e:	a029                	j	800009a8 <uartintr+0x16>
++      break;
++    consoleintr(c);
++    800009a0:	00000097          	auipc	ra,0x0
++    800009a4:	918080e7          	jalr	-1768(ra) # 800002b8 <consoleintr>
++    int c = uartgetc();
++    800009a8:	00000097          	auipc	ra,0x0
++    800009ac:	fc6080e7          	jalr	-58(ra) # 8000096e <uartgetc>
++    if(c == -1)
++    800009b0:	fe9518e3          	bne	a0,s1,800009a0 <uartintr+0xe>
++  }
++
++  // send buffered characters.
++  acquire(&uart_tx_lock);
++    800009b4:	00011497          	auipc	s1,0x11
++    800009b8:	89448493          	addi	s1,s1,-1900 # 80011248 <uart_tx_lock>
++    800009bc:	8526                	mv	a0,s1
++    800009be:	00000097          	auipc	ra,0x0
++    800009c2:	212080e7          	jalr	530(ra) # 80000bd0 <acquire>
++  uartstart();
++    800009c6:	00000097          	auipc	ra,0x0
++    800009ca:	e6c080e7          	jalr	-404(ra) # 80000832 <uartstart>
++  release(&uart_tx_lock);
++    800009ce:	8526                	mv	a0,s1
++    800009d0:	00000097          	auipc	ra,0x0
++    800009d4:	2b4080e7          	jalr	692(ra) # 80000c84 <release>
++}
++    800009d8:	60e2                	ld	ra,24(sp)
++    800009da:	6442                	ld	s0,16(sp)
++    800009dc:	64a2                	ld	s1,8(sp)
++    800009de:	6105                	addi	sp,sp,32
++    800009e0:	8082                	ret
++
++00000000800009e2 <kfree>:
++// which normally should have been returned by a
++// call to kalloc().  (The exception is when
++// initializing the allocator; see kinit above.)
++void
++kfree(void *pa)
++{
++    800009e2:	1101                	addi	sp,sp,-32
++    800009e4:	ec06                	sd	ra,24(sp)
++    800009e6:	e822                	sd	s0,16(sp)
++    800009e8:	e426                	sd	s1,8(sp)
++    800009ea:	e04a                	sd	s2,0(sp)
++    800009ec:	1000                	addi	s0,sp,32
++  struct run *r;
++
++  if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
++    800009ee:	03451793          	slli	a5,a0,0x34
++    800009f2:	ebb9                	bnez	a5,80000a48 <kfree+0x66>
++    800009f4:	84aa                	mv	s1,a0
++    800009f6:	00028797          	auipc	a5,0x28
++    800009fa:	60a78793          	addi	a5,a5,1546 # 80029000 <end>
++    800009fe:	04f56563          	bltu	a0,a5,80000a48 <kfree+0x66>
++    80000a02:	47c5                	li	a5,17
++    80000a04:	07ee                	slli	a5,a5,0x1b
++    80000a06:	04f57163          	bgeu	a0,a5,80000a48 <kfree+0x66>
++    panic("kfree");
++
++  // Fill with junk to catch dangling refs.
++  memset(pa, 1, PGSIZE);
++    80000a0a:	6605                	lui	a2,0x1
++    80000a0c:	4585                	li	a1,1
++    80000a0e:	00000097          	auipc	ra,0x0
++    80000a12:	2be080e7          	jalr	702(ra) # 80000ccc <memset>
++
++  r = (struct run*)pa;
++
++  acquire(&kmem.lock);
++    80000a16:	00011917          	auipc	s2,0x11
++    80000a1a:	86a90913          	addi	s2,s2,-1942 # 80011280 <kmem>
++    80000a1e:	854a                	mv	a0,s2
++    80000a20:	00000097          	auipc	ra,0x0
++    80000a24:	1b0080e7          	jalr	432(ra) # 80000bd0 <acquire>
++  r->next = kmem.freelist;
++    80000a28:	01893783          	ld	a5,24(s2)
++    80000a2c:	e09c                	sd	a5,0(s1)
++  kmem.freelist = r;
++    80000a2e:	00993c23          	sd	s1,24(s2)
++  release(&kmem.lock);
++    80000a32:	854a                	mv	a0,s2
++    80000a34:	00000097          	auipc	ra,0x0
++    80000a38:	250080e7          	jalr	592(ra) # 80000c84 <release>
++}
++    80000a3c:	60e2                	ld	ra,24(sp)
++    80000a3e:	6442                	ld	s0,16(sp)
++    80000a40:	64a2                	ld	s1,8(sp)
++    80000a42:	6902                	ld	s2,0(sp)
++    80000a44:	6105                	addi	sp,sp,32
++    80000a46:	8082                	ret
++    panic("kfree");
++    80000a48:	00007517          	auipc	a0,0x7
++    80000a4c:	60850513          	addi	a0,a0,1544 # 80008050 <digits+0x20>
++    80000a50:	00000097          	auipc	ra,0x0
++    80000a54:	aea080e7          	jalr	-1302(ra) # 8000053a <panic>
++
++0000000080000a58 <freerange>:
++{
++    80000a58:	7179                	addi	sp,sp,-48
++    80000a5a:	f406                	sd	ra,40(sp)
++    80000a5c:	f022                	sd	s0,32(sp)
++    80000a5e:	ec26                	sd	s1,24(sp)
++    80000a60:	e84a                	sd	s2,16(sp)
++    80000a62:	e44e                	sd	s3,8(sp)
++    80000a64:	e052                	sd	s4,0(sp)
++    80000a66:	1800                	addi	s0,sp,48
++  p = (char*)PGROUNDUP((uint64)pa_start);
++    80000a68:	6785                	lui	a5,0x1
++    80000a6a:	fff78713          	addi	a4,a5,-1 # fff <_entry-0x7ffff001>
++    80000a6e:	00e504b3          	add	s1,a0,a4
++    80000a72:	777d                	lui	a4,0xfffff
++    80000a74:	8cf9                	and	s1,s1,a4
++  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE)
++    80000a76:	94be                	add	s1,s1,a5
++    80000a78:	0095ee63          	bltu	a1,s1,80000a94 <freerange+0x3c>
++    80000a7c:	892e                	mv	s2,a1
++    kfree(p);
++    80000a7e:	7a7d                	lui	s4,0xfffff
++  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE)
++    80000a80:	6985                	lui	s3,0x1
++    kfree(p);
++    80000a82:	01448533          	add	a0,s1,s4
++    80000a86:	00000097          	auipc	ra,0x0
++    80000a8a:	f5c080e7          	jalr	-164(ra) # 800009e2 <kfree>
++  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE)
++    80000a8e:	94ce                	add	s1,s1,s3
++    80000a90:	fe9979e3          	bgeu	s2,s1,80000a82 <freerange+0x2a>
++}
++    80000a94:	70a2                	ld	ra,40(sp)
++    80000a96:	7402                	ld	s0,32(sp)
++    80000a98:	64e2                	ld	s1,24(sp)
++    80000a9a:	6942                	ld	s2,16(sp)
++    80000a9c:	69a2                	ld	s3,8(sp)
++    80000a9e:	6a02                	ld	s4,0(sp)
++    80000aa0:	6145                	addi	sp,sp,48
++    80000aa2:	8082                	ret
++
++0000000080000aa4 <kinit>:
++{
++    80000aa4:	1141                	addi	sp,sp,-16
++    80000aa6:	e406                	sd	ra,8(sp)
++    80000aa8:	e022                	sd	s0,0(sp)
++    80000aaa:	0800                	addi	s0,sp,16
++  initlock(&kmem.lock, "kmem");
++    80000aac:	00007597          	auipc	a1,0x7
++    80000ab0:	5ac58593          	addi	a1,a1,1452 # 80008058 <digits+0x28>
++    80000ab4:	00010517          	auipc	a0,0x10
++    80000ab8:	7cc50513          	addi	a0,a0,1996 # 80011280 <kmem>
++    80000abc:	00000097          	auipc	ra,0x0
++    80000ac0:	084080e7          	jalr	132(ra) # 80000b40 <initlock>
++  freerange(end, (void*)PHYSTOP);
++    80000ac4:	45c5                	li	a1,17
++    80000ac6:	05ee                	slli	a1,a1,0x1b
++    80000ac8:	00028517          	auipc	a0,0x28
++    80000acc:	53850513          	addi	a0,a0,1336 # 80029000 <end>
++    80000ad0:	00000097          	auipc	ra,0x0
++    80000ad4:	f88080e7          	jalr	-120(ra) # 80000a58 <freerange>
++}
++    80000ad8:	60a2                	ld	ra,8(sp)
++    80000ada:	6402                	ld	s0,0(sp)
++    80000adc:	0141                	addi	sp,sp,16
++    80000ade:	8082                	ret
++
++0000000080000ae0 <kalloc>:
++// Allocate one 4096-byte page of physical memory.
++// Returns a pointer that the kernel can use.
++// Returns 0 if the memory cannot be allocated.
++void *
++kalloc(void)
++{
++    80000ae0:	1101                	addi	sp,sp,-32
++    80000ae2:	ec06                	sd	ra,24(sp)
++    80000ae4:	e822                	sd	s0,16(sp)
++    80000ae6:	e426                	sd	s1,8(sp)
++    80000ae8:	1000                	addi	s0,sp,32
++  struct run *r;
++
++  acquire(&kmem.lock);
++    80000aea:	00010497          	auipc	s1,0x10
++    80000aee:	79648493          	addi	s1,s1,1942 # 80011280 <kmem>
++    80000af2:	8526                	mv	a0,s1
++    80000af4:	00000097          	auipc	ra,0x0
++    80000af8:	0dc080e7          	jalr	220(ra) # 80000bd0 <acquire>
++  r = kmem.freelist;
++    80000afc:	6c84                	ld	s1,24(s1)
++  if(r)
++    80000afe:	c885                	beqz	s1,80000b2e <kalloc+0x4e>
++    kmem.freelist = r->next;
++    80000b00:	609c                	ld	a5,0(s1)
++    80000b02:	00010517          	auipc	a0,0x10
++    80000b06:	77e50513          	addi	a0,a0,1918 # 80011280 <kmem>
++    80000b0a:	ed1c                	sd	a5,24(a0)
++  release(&kmem.lock);
++    80000b0c:	00000097          	auipc	ra,0x0
++    80000b10:	178080e7          	jalr	376(ra) # 80000c84 <release>
++
++  if(r)
++    memset((char*)r, 5, PGSIZE); // fill with junk
++    80000b14:	6605                	lui	a2,0x1
++    80000b16:	4595                	li	a1,5
++    80000b18:	8526                	mv	a0,s1
++    80000b1a:	00000097          	auipc	ra,0x0
++    80000b1e:	1b2080e7          	jalr	434(ra) # 80000ccc <memset>
++  return (void*)r;
++}
++    80000b22:	8526                	mv	a0,s1
++    80000b24:	60e2                	ld	ra,24(sp)
++    80000b26:	6442                	ld	s0,16(sp)
++    80000b28:	64a2                	ld	s1,8(sp)
++    80000b2a:	6105                	addi	sp,sp,32
++    80000b2c:	8082                	ret
++  release(&kmem.lock);
++    80000b2e:	00010517          	auipc	a0,0x10
++    80000b32:	75250513          	addi	a0,a0,1874 # 80011280 <kmem>
++    80000b36:	00000097          	auipc	ra,0x0
++    80000b3a:	14e080e7          	jalr	334(ra) # 80000c84 <release>
++  if(r)
++    80000b3e:	b7d5                	j	80000b22 <kalloc+0x42>
++
++0000000080000b40 <initlock>:
++#include "proc.h"
++#include "defs.h"
++
++void
++initlock(struct spinlock *lk, char *name)
++{
++    80000b40:	1141                	addi	sp,sp,-16
++    80000b42:	e422                	sd	s0,8(sp)
++    80000b44:	0800                	addi	s0,sp,16
++  lk->name = name;
++    80000b46:	e50c                	sd	a1,8(a0)
++  lk->locked = 0;
++    80000b48:	00052023          	sw	zero,0(a0)
++  lk->cpu = 0;
++    80000b4c:	00053823          	sd	zero,16(a0)
++}
++    80000b50:	6422                	ld	s0,8(sp)
++    80000b52:	0141                	addi	sp,sp,16
++    80000b54:	8082                	ret
++
++0000000080000b56 <holding>:
++// Interrupts must be off.
++int
++holding(struct spinlock *lk)
++{
++  int r;
++  r = (lk->locked && lk->cpu == mycpu());
++    80000b56:	411c                	lw	a5,0(a0)
++    80000b58:	e399                	bnez	a5,80000b5e <holding+0x8>
++    80000b5a:	4501                	li	a0,0
++  return r;
++}
++    80000b5c:	8082                	ret
++{
++    80000b5e:	1101                	addi	sp,sp,-32
++    80000b60:	ec06                	sd	ra,24(sp)
++    80000b62:	e822                	sd	s0,16(sp)
++    80000b64:	e426                	sd	s1,8(sp)
++    80000b66:	1000                	addi	s0,sp,32
++  r = (lk->locked && lk->cpu == mycpu());
++    80000b68:	6904                	ld	s1,16(a0)
++    80000b6a:	00001097          	auipc	ra,0x1
++    80000b6e:	1f0080e7          	jalr	496(ra) # 80001d5a <mycpu>
++    80000b72:	40a48533          	sub	a0,s1,a0
++    80000b76:	00153513          	seqz	a0,a0
++}
++    80000b7a:	60e2                	ld	ra,24(sp)
++    80000b7c:	6442                	ld	s0,16(sp)
++    80000b7e:	64a2                	ld	s1,8(sp)
++    80000b80:	6105                	addi	sp,sp,32
++    80000b82:	8082                	ret
++
++0000000080000b84 <push_off>:
++// it takes two pop_off()s to undo two push_off()s.  Also, if interrupts
++// are initially off, then push_off, pop_off leaves them off.
++
++void
++push_off(void)
++{
++    80000b84:	1101                	addi	sp,sp,-32
++    80000b86:	ec06                	sd	ra,24(sp)
++    80000b88:	e822                	sd	s0,16(sp)
++    80000b8a:	e426                	sd	s1,8(sp)
++    80000b8c:	1000                	addi	s0,sp,32
++  asm volatile("csrr %0, sstatus" : "=r" (x) );
++    80000b8e:	100024f3          	csrr	s1,sstatus
++    80000b92:	100027f3          	csrr	a5,sstatus
++  w_sstatus(r_sstatus() & ~SSTATUS_SIE);
++    80000b96:	9bf5                	andi	a5,a5,-3
++  asm volatile("csrw sstatus, %0" : : "r" (x));
++    80000b98:	10079073          	csrw	sstatus,a5
++  int old = intr_get();
++
++  intr_off();
++  if(mycpu()->noff == 0)
++    80000b9c:	00001097          	auipc	ra,0x1
++    80000ba0:	1be080e7          	jalr	446(ra) # 80001d5a <mycpu>
++    80000ba4:	5d3c                	lw	a5,120(a0)
++    80000ba6:	cf89                	beqz	a5,80000bc0 <push_off+0x3c>
++    mycpu()->intena = old;
++  mycpu()->noff += 1;
++    80000ba8:	00001097          	auipc	ra,0x1
++    80000bac:	1b2080e7          	jalr	434(ra) # 80001d5a <mycpu>
++    80000bb0:	5d3c                	lw	a5,120(a0)
++    80000bb2:	2785                	addiw	a5,a5,1
++    80000bb4:	dd3c                	sw	a5,120(a0)
++}
++    80000bb6:	60e2                	ld	ra,24(sp)
++    80000bb8:	6442                	ld	s0,16(sp)
++    80000bba:	64a2                	ld	s1,8(sp)
++    80000bbc:	6105                	addi	sp,sp,32
++    80000bbe:	8082                	ret
++    mycpu()->intena = old;
++    80000bc0:	00001097          	auipc	ra,0x1
++    80000bc4:	19a080e7          	jalr	410(ra) # 80001d5a <mycpu>
++  return (x & SSTATUS_SIE) != 0;
++    80000bc8:	8085                	srli	s1,s1,0x1
++    80000bca:	8885                	andi	s1,s1,1
++    80000bcc:	dd64                	sw	s1,124(a0)
++    80000bce:	bfe9                	j	80000ba8 <push_off+0x24>
++
++0000000080000bd0 <acquire>:
++{
++    80000bd0:	1101                	addi	sp,sp,-32
++    80000bd2:	ec06                	sd	ra,24(sp)
++    80000bd4:	e822                	sd	s0,16(sp)
++    80000bd6:	e426                	sd	s1,8(sp)
++    80000bd8:	1000                	addi	s0,sp,32
++    80000bda:	84aa                	mv	s1,a0
++  push_off(); // disable interrupts to avoid deadlock.
++    80000bdc:	00000097          	auipc	ra,0x0
++    80000be0:	fa8080e7          	jalr	-88(ra) # 80000b84 <push_off>
++  if(holding(lk))
++    80000be4:	8526                	mv	a0,s1
++    80000be6:	00000097          	auipc	ra,0x0
++    80000bea:	f70080e7          	jalr	-144(ra) # 80000b56 <holding>
++  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
++    80000bee:	4705                	li	a4,1
++  if(holding(lk))
++    80000bf0:	e115                	bnez	a0,80000c14 <acquire+0x44>
++  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
++    80000bf2:	87ba                	mv	a5,a4
++    80000bf4:	0cf4a7af          	amoswap.w.aq	a5,a5,(s1)
++    80000bf8:	2781                	sext.w	a5,a5
++    80000bfa:	ffe5                	bnez	a5,80000bf2 <acquire+0x22>
++  __sync_synchronize();
++    80000bfc:	0ff0000f          	fence
++  lk->cpu = mycpu();
++    80000c00:	00001097          	auipc	ra,0x1
++    80000c04:	15a080e7          	jalr	346(ra) # 80001d5a <mycpu>
++    80000c08:	e888                	sd	a0,16(s1)
++}
++    80000c0a:	60e2                	ld	ra,24(sp)
++    80000c0c:	6442                	ld	s0,16(sp)
++    80000c0e:	64a2                	ld	s1,8(sp)
++    80000c10:	6105                	addi	sp,sp,32
++    80000c12:	8082                	ret
++    panic("acquire");
++    80000c14:	00007517          	auipc	a0,0x7
++    80000c18:	44c50513          	addi	a0,a0,1100 # 80008060 <digits+0x30>
++    80000c1c:	00000097          	auipc	ra,0x0
++    80000c20:	91e080e7          	jalr	-1762(ra) # 8000053a <panic>
++
++0000000080000c24 <pop_off>:
++
++void
++pop_off(void)
++{
++    80000c24:	1141                	addi	sp,sp,-16
++    80000c26:	e406                	sd	ra,8(sp)
++    80000c28:	e022                	sd	s0,0(sp)
++    80000c2a:	0800                	addi	s0,sp,16
++  struct cpu *c = mycpu();
++    80000c2c:	00001097          	auipc	ra,0x1
++    80000c30:	12e080e7          	jalr	302(ra) # 80001d5a <mycpu>
++  asm volatile("csrr %0, sstatus" : "=r" (x) );
++    80000c34:	100027f3          	csrr	a5,sstatus
++  return (x & SSTATUS_SIE) != 0;
++    80000c38:	8b89                	andi	a5,a5,2
++  if(intr_get())
++    80000c3a:	e78d                	bnez	a5,80000c64 <pop_off+0x40>
++    panic("pop_off - interruptible");
++  if(c->noff < 1)
++    80000c3c:	5d3c                	lw	a5,120(a0)
++    80000c3e:	02f05b63          	blez	a5,80000c74 <pop_off+0x50>
++    panic("pop_off");
++  c->noff -= 1;
++    80000c42:	37fd                	addiw	a5,a5,-1
++    80000c44:	0007871b          	sext.w	a4,a5
++    80000c48:	dd3c                	sw	a5,120(a0)
++  if(c->noff == 0 && c->intena)
++    80000c4a:	eb09                	bnez	a4,80000c5c <pop_off+0x38>
++    80000c4c:	5d7c                	lw	a5,124(a0)
++    80000c4e:	c799                	beqz	a5,80000c5c <pop_off+0x38>
++  asm volatile("csrr %0, sstatus" : "=r" (x) );
++    80000c50:	100027f3          	csrr	a5,sstatus
++  w_sstatus(r_sstatus() | SSTATUS_SIE);
++    80000c54:	0027e793          	ori	a5,a5,2
++  asm volatile("csrw sstatus, %0" : : "r" (x));
++    80000c58:	10079073          	csrw	sstatus,a5
++    intr_on();
++}
++    80000c5c:	60a2                	ld	ra,8(sp)
++    80000c5e:	6402                	ld	s0,0(sp)
++    80000c60:	0141                	addi	sp,sp,16
++    80000c62:	8082                	ret
++    panic("pop_off - interruptible");
++    80000c64:	00007517          	auipc	a0,0x7
++    80000c68:	40450513          	addi	a0,a0,1028 # 80008068 <digits+0x38>
++    80000c6c:	00000097          	auipc	ra,0x0
++    80000c70:	8ce080e7          	jalr	-1842(ra) # 8000053a <panic>
++    panic("pop_off");
++    80000c74:	00007517          	auipc	a0,0x7
++    80000c78:	40c50513          	addi	a0,a0,1036 # 80008080 <digits+0x50>
++    80000c7c:	00000097          	auipc	ra,0x0
++    80000c80:	8be080e7          	jalr	-1858(ra) # 8000053a <panic>
++
++0000000080000c84 <release>:
++{
++    80000c84:	1101                	addi	sp,sp,-32
++    80000c86:	ec06                	sd	ra,24(sp)
++    80000c88:	e822                	sd	s0,16(sp)
++    80000c8a:	e426                	sd	s1,8(sp)
++    80000c8c:	1000                	addi	s0,sp,32
++    80000c8e:	84aa                	mv	s1,a0
++  if(!holding(lk))
++    80000c90:	00000097          	auipc	ra,0x0
++    80000c94:	ec6080e7          	jalr	-314(ra) # 80000b56 <holding>
++    80000c98:	c115                	beqz	a0,80000cbc <release+0x38>
++  lk->cpu = 0;
++    80000c9a:	0004b823          	sd	zero,16(s1)
++  __sync_synchronize();
++    80000c9e:	0ff0000f          	fence
++  __sync_lock_release(&lk->locked);
++    80000ca2:	0f50000f          	fence	iorw,ow
++    80000ca6:	0804a02f          	amoswap.w	zero,zero,(s1)
++  pop_off();
++    80000caa:	00000097          	auipc	ra,0x0
++    80000cae:	f7a080e7          	jalr	-134(ra) # 80000c24 <pop_off>
++}
++    80000cb2:	60e2                	ld	ra,24(sp)
++    80000cb4:	6442                	ld	s0,16(sp)
++    80000cb6:	64a2                	ld	s1,8(sp)
++    80000cb8:	6105                	addi	sp,sp,32
++    80000cba:	8082                	ret
++    panic("release");
++    80000cbc:	00007517          	auipc	a0,0x7
++    80000cc0:	3cc50513          	addi	a0,a0,972 # 80008088 <digits+0x58>
++    80000cc4:	00000097          	auipc	ra,0x0
++    80000cc8:	876080e7          	jalr	-1930(ra) # 8000053a <panic>
++
++0000000080000ccc <memset>:
++#include "types.h"
++
++void*
++memset(void *dst, int c, uint n)
++{
++    80000ccc:	1141                	addi	sp,sp,-16
++    80000cce:	e422                	sd	s0,8(sp)
++    80000cd0:	0800                	addi	s0,sp,16
++  char *cdst = (char *) dst;
++  int i;
++  for(i = 0; i < n; i++){
++    80000cd2:	ca19                	beqz	a2,80000ce8 <memset+0x1c>
++    80000cd4:	87aa                	mv	a5,a0
++    80000cd6:	1602                	slli	a2,a2,0x20
++    80000cd8:	9201                	srli	a2,a2,0x20
++    80000cda:	00a60733          	add	a4,a2,a0
++    cdst[i] = c;
++    80000cde:	00b78023          	sb	a1,0(a5)
++  for(i = 0; i < n; i++){
++    80000ce2:	0785                	addi	a5,a5,1
++    80000ce4:	fee79de3          	bne	a5,a4,80000cde <memset+0x12>
++  }
++  return dst;
++}
++    80000ce8:	6422                	ld	s0,8(sp)
++    80000cea:	0141                	addi	sp,sp,16
++    80000cec:	8082                	ret
++
++0000000080000cee <memcmp>:
++
++int
++memcmp(const void *v1, const void *v2, uint n)
++{
++    80000cee:	1141                	addi	sp,sp,-16
++    80000cf0:	e422                	sd	s0,8(sp)
++    80000cf2:	0800                	addi	s0,sp,16
++  const uchar *s1, *s2;
++
++  s1 = v1;
++  s2 = v2;
++  while(n-- > 0){
++    80000cf4:	ca05                	beqz	a2,80000d24 <memcmp+0x36>
++    80000cf6:	fff6069b          	addiw	a3,a2,-1 # fff <_entry-0x7ffff001>
++    80000cfa:	1682                	slli	a3,a3,0x20
++    80000cfc:	9281                	srli	a3,a3,0x20
++    80000cfe:	0685                	addi	a3,a3,1
++    80000d00:	96aa                	add	a3,a3,a0
++    if(*s1 != *s2)
++    80000d02:	00054783          	lbu	a5,0(a0)
++    80000d06:	0005c703          	lbu	a4,0(a1)
++    80000d0a:	00e79863          	bne	a5,a4,80000d1a <memcmp+0x2c>
++      return *s1 - *s2;
++    s1++, s2++;
++    80000d0e:	0505                	addi	a0,a0,1
++    80000d10:	0585                	addi	a1,a1,1
++  while(n-- > 0){
++    80000d12:	fed518e3          	bne	a0,a3,80000d02 <memcmp+0x14>
++  }
++
++  return 0;
++    80000d16:	4501                	li	a0,0
++    80000d18:	a019                	j	80000d1e <memcmp+0x30>
++      return *s1 - *s2;
++    80000d1a:	40e7853b          	subw	a0,a5,a4
++}
++    80000d1e:	6422                	ld	s0,8(sp)
++    80000d20:	0141                	addi	sp,sp,16
++    80000d22:	8082                	ret
++  return 0;
++    80000d24:	4501                	li	a0,0
++    80000d26:	bfe5                	j	80000d1e <memcmp+0x30>
++
++0000000080000d28 <memmove>:
++
++void*
++memmove(void *dst, const void *src, uint n)
++{
++    80000d28:	1141                	addi	sp,sp,-16
++    80000d2a:	e422                	sd	s0,8(sp)
++    80000d2c:	0800                	addi	s0,sp,16
++  const char *s;
++  char *d;
++
++  if(n == 0)
++    80000d2e:	c205                	beqz	a2,80000d4e <memmove+0x26>
++    return dst;
++  
++  s = src;
++  d = dst;
++  if(s < d && s + n > d){
++    80000d30:	02a5e263          	bltu	a1,a0,80000d54 <memmove+0x2c>
++    s += n;
++    d += n;
++    while(n-- > 0)
++      *--d = *--s;
++  } else
++    while(n-- > 0)
++    80000d34:	1602                	slli	a2,a2,0x20
++    80000d36:	9201                	srli	a2,a2,0x20
++    80000d38:	00c587b3          	add	a5,a1,a2
++{
++    80000d3c:	872a                	mv	a4,a0
++      *d++ = *s++;
++    80000d3e:	0585                	addi	a1,a1,1
++    80000d40:	0705                	addi	a4,a4,1 # fffffffffffff001 <end+0xffffffff7ffd6001>
++    80000d42:	fff5c683          	lbu	a3,-1(a1)
++    80000d46:	fed70fa3          	sb	a3,-1(a4)
++    while(n-- > 0)
++    80000d4a:	fef59ae3          	bne	a1,a5,80000d3e <memmove+0x16>
++
++  return dst;
++}
++    80000d4e:	6422                	ld	s0,8(sp)
++    80000d50:	0141                	addi	sp,sp,16
++    80000d52:	8082                	ret
++  if(s < d && s + n > d){
++    80000d54:	02061693          	slli	a3,a2,0x20
++    80000d58:	9281                	srli	a3,a3,0x20
++    80000d5a:	00d58733          	add	a4,a1,a3
++    80000d5e:	fce57be3          	bgeu	a0,a4,80000d34 <memmove+0xc>
++    d += n;
++    80000d62:	96aa                	add	a3,a3,a0
++    while(n-- > 0)
++    80000d64:	fff6079b          	addiw	a5,a2,-1
++    80000d68:	1782                	slli	a5,a5,0x20
++    80000d6a:	9381                	srli	a5,a5,0x20
++    80000d6c:	fff7c793          	not	a5,a5
++    80000d70:	97ba                	add	a5,a5,a4
++      *--d = *--s;
++    80000d72:	177d                	addi	a4,a4,-1
++    80000d74:	16fd                	addi	a3,a3,-1
++    80000d76:	00074603          	lbu	a2,0(a4)
++    80000d7a:	00c68023          	sb	a2,0(a3)
++    while(n-- > 0)
++    80000d7e:	fee79ae3          	bne	a5,a4,80000d72 <memmove+0x4a>
++    80000d82:	b7f1                	j	80000d4e <memmove+0x26>
++
++0000000080000d84 <memcpy>:
++
++// memcpy exists to placate GCC.  Use memmove.
++void*
++memcpy(void *dst, const void *src, uint n)
++{
++    80000d84:	1141                	addi	sp,sp,-16
++    80000d86:	e406                	sd	ra,8(sp)
++    80000d88:	e022                	sd	s0,0(sp)
++    80000d8a:	0800                	addi	s0,sp,16
++  return memmove(dst, src, n);
++    80000d8c:	00000097          	auipc	ra,0x0
++    80000d90:	f9c080e7          	jalr	-100(ra) # 80000d28 <memmove>
++}
++    80000d94:	60a2                	ld	ra,8(sp)
++    80000d96:	6402                	ld	s0,0(sp)
++    80000d98:	0141                	addi	sp,sp,16
++    80000d9a:	8082                	ret
++
++0000000080000d9c <strncmp>:
++
++int
++strncmp(const char *p, const char *q, uint n)
++{
++    80000d9c:	1141                	addi	sp,sp,-16
++    80000d9e:	e422                	sd	s0,8(sp)
++    80000da0:	0800                	addi	s0,sp,16
++  while(n > 0 && *p && *p == *q)
++    80000da2:	ce11                	beqz	a2,80000dbe <strncmp+0x22>
++    80000da4:	00054783          	lbu	a5,0(a0)
++    80000da8:	cf89                	beqz	a5,80000dc2 <strncmp+0x26>
++    80000daa:	0005c703          	lbu	a4,0(a1)
++    80000dae:	00f71a63          	bne	a4,a5,80000dc2 <strncmp+0x26>
++    n--, p++, q++;
++    80000db2:	367d                	addiw	a2,a2,-1
++    80000db4:	0505                	addi	a0,a0,1
++    80000db6:	0585                	addi	a1,a1,1
++  while(n > 0 && *p && *p == *q)
++    80000db8:	f675                	bnez	a2,80000da4 <strncmp+0x8>
++  if(n == 0)
++    return 0;
++    80000dba:	4501                	li	a0,0
++    80000dbc:	a809                	j	80000dce <strncmp+0x32>
++    80000dbe:	4501                	li	a0,0
++    80000dc0:	a039                	j	80000dce <strncmp+0x32>
++  if(n == 0)
++    80000dc2:	ca09                	beqz	a2,80000dd4 <strncmp+0x38>
++  return (uchar)*p - (uchar)*q;
++    80000dc4:	00054503          	lbu	a0,0(a0)
++    80000dc8:	0005c783          	lbu	a5,0(a1)
++    80000dcc:	9d1d                	subw	a0,a0,a5
++}
++    80000dce:	6422                	ld	s0,8(sp)
++    80000dd0:	0141                	addi	sp,sp,16
++    80000dd2:	8082                	ret
++    return 0;
++    80000dd4:	4501                	li	a0,0
++    80000dd6:	bfe5                	j	80000dce <strncmp+0x32>
++
++0000000080000dd8 <strncpy>:
++
++char*
++strncpy(char *s, const char *t, int n)
++{
++    80000dd8:	1141                	addi	sp,sp,-16
++    80000dda:	e422                	sd	s0,8(sp)
++    80000ddc:	0800                	addi	s0,sp,16
++  char *os;
++
++  os = s;
++  while(n-- > 0 && (*s++ = *t++) != 0)
++    80000dde:	872a                	mv	a4,a0
++    80000de0:	8832                	mv	a6,a2
++    80000de2:	367d                	addiw	a2,a2,-1
++    80000de4:	01005963          	blez	a6,80000df6 <strncpy+0x1e>
++    80000de8:	0705                	addi	a4,a4,1
++    80000dea:	0005c783          	lbu	a5,0(a1)
++    80000dee:	fef70fa3          	sb	a5,-1(a4)
++    80000df2:	0585                	addi	a1,a1,1
++    80000df4:	f7f5                	bnez	a5,80000de0 <strncpy+0x8>
++    ;
++  while(n-- > 0)
++    80000df6:	86ba                	mv	a3,a4
++    80000df8:	00c05c63          	blez	a2,80000e10 <strncpy+0x38>
++    *s++ = 0;
++    80000dfc:	0685                	addi	a3,a3,1
++    80000dfe:	fe068fa3          	sb	zero,-1(a3)
++  while(n-- > 0)
++    80000e02:	40d707bb          	subw	a5,a4,a3
++    80000e06:	37fd                	addiw	a5,a5,-1
++    80000e08:	010787bb          	addw	a5,a5,a6
++    80000e0c:	fef048e3          	bgtz	a5,80000dfc <strncpy+0x24>
++  return os;
++}
++    80000e10:	6422                	ld	s0,8(sp)
++    80000e12:	0141                	addi	sp,sp,16
++    80000e14:	8082                	ret
++
++0000000080000e16 <safestrcpy>:
++
++// Like strncpy but guaranteed to NUL-terminate.
++char*
++safestrcpy(char *s, const char *t, int n)
++{
++    80000e16:	1141                	addi	sp,sp,-16
++    80000e18:	e422                	sd	s0,8(sp)
++    80000e1a:	0800                	addi	s0,sp,16
++  char *os;
++
++  os = s;
++  if(n <= 0)
++    80000e1c:	02c05363          	blez	a2,80000e42 <safestrcpy+0x2c>
++    80000e20:	fff6069b          	addiw	a3,a2,-1
++    80000e24:	1682                	slli	a3,a3,0x20
++    80000e26:	9281                	srli	a3,a3,0x20
++    80000e28:	96ae                	add	a3,a3,a1
++    80000e2a:	87aa                	mv	a5,a0
++    return os;
++  while(--n > 0 && (*s++ = *t++) != 0)
++    80000e2c:	00d58963          	beq	a1,a3,80000e3e <safestrcpy+0x28>
++    80000e30:	0585                	addi	a1,a1,1
++    80000e32:	0785                	addi	a5,a5,1
++    80000e34:	fff5c703          	lbu	a4,-1(a1)
++    80000e38:	fee78fa3          	sb	a4,-1(a5)
++    80000e3c:	fb65                	bnez	a4,80000e2c <safestrcpy+0x16>
++    ;
++  *s = 0;
++    80000e3e:	00078023          	sb	zero,0(a5)
++  return os;
++}
++    80000e42:	6422                	ld	s0,8(sp)
++    80000e44:	0141                	addi	sp,sp,16
++    80000e46:	8082                	ret
++
++0000000080000e48 <strlen>:
++
++int
++strlen(const char *s)
++{
++    80000e48:	1141                	addi	sp,sp,-16
++    80000e4a:	e422                	sd	s0,8(sp)
++    80000e4c:	0800                	addi	s0,sp,16
++  int n;
++
++  for(n = 0; s[n]; n++)
++    80000e4e:	00054783          	lbu	a5,0(a0)
++    80000e52:	cf91                	beqz	a5,80000e6e <strlen+0x26>
++    80000e54:	0505                	addi	a0,a0,1
++    80000e56:	87aa                	mv	a5,a0
++    80000e58:	4685                	li	a3,1
++    80000e5a:	9e89                	subw	a3,a3,a0
++    80000e5c:	00f6853b          	addw	a0,a3,a5
++    80000e60:	0785                	addi	a5,a5,1
++    80000e62:	fff7c703          	lbu	a4,-1(a5)
++    80000e66:	fb7d                	bnez	a4,80000e5c <strlen+0x14>
++    ;
++  return n;
++}
++    80000e68:	6422                	ld	s0,8(sp)
++    80000e6a:	0141                	addi	sp,sp,16
++    80000e6c:	8082                	ret
++  for(n = 0; s[n]; n++)
++    80000e6e:	4501                	li	a0,0
++    80000e70:	bfe5                	j	80000e68 <strlen+0x20>
++
++0000000080000e72 <main>:
++volatile static int started = 0;
++
++// start() jumps here in supervisor mode on all CPUs.
++void
++main()
++{
++    80000e72:	1141                	addi	sp,sp,-16
++    80000e74:	e406                	sd	ra,8(sp)
++    80000e76:	e022                	sd	s0,0(sp)
++    80000e78:	0800                	addi	s0,sp,16
++  if(cpuid() == 0){
++    80000e7a:	00001097          	auipc	ra,0x1
++    80000e7e:	ed0080e7          	jalr	-304(ra) # 80001d4a <cpuid>
++    virtio_disk_init(); // emulated hard disk
++    userinit();      // first user process
++    __sync_synchronize();
++    started = 1;
++  } else {
++    while(started == 0)
++    80000e82:	00008717          	auipc	a4,0x8
++    80000e86:	19670713          	addi	a4,a4,406 # 80009018 <started>
++  if(cpuid() == 0){
++    80000e8a:	c139                	beqz	a0,80000ed0 <main+0x5e>
++    while(started == 0)
++    80000e8c:	431c                	lw	a5,0(a4)
++    80000e8e:	2781                	sext.w	a5,a5
++    80000e90:	dff5                	beqz	a5,80000e8c <main+0x1a>
++      ;
++    __sync_synchronize();
++    80000e92:	0ff0000f          	fence
++    printf("hart %d starting\n", cpuid());
++    80000e96:	00001097          	auipc	ra,0x1
++    80000e9a:	eb4080e7          	jalr	-332(ra) # 80001d4a <cpuid>
++    80000e9e:	85aa                	mv	a1,a0
++    80000ea0:	00007517          	auipc	a0,0x7
++    80000ea4:	20850513          	addi	a0,a0,520 # 800080a8 <digits+0x78>
++    80000ea8:	fffff097          	auipc	ra,0xfffff
++    80000eac:	6dc080e7          	jalr	1756(ra) # 80000584 <printf>
++    kvminithart();    // turn on paging
++    80000eb0:	00000097          	auipc	ra,0x0
++    80000eb4:	0e0080e7          	jalr	224(ra) # 80000f90 <kvminithart>
++    trapinithart();   // install kernel trap vector
++    80000eb8:	00002097          	auipc	ra,0x2
++    80000ebc:	ce4080e7          	jalr	-796(ra) # 80002b9c <trapinithart>
++    plicinithart();   // ask PLIC for device interrupts
++    80000ec0:	00005097          	auipc	ra,0x5
++    80000ec4:	3f0080e7          	jalr	1008(ra) # 800062b0 <plicinithart>
++  }
++
++  scheduler();        
++    80000ec8:	00001097          	auipc	ra,0x1
++    80000ecc:	4ba080e7          	jalr	1210(ra) # 80002382 <scheduler>
++    consoleinit();
++    80000ed0:	fffff097          	auipc	ra,0xfffff
++    80000ed4:	57a080e7          	jalr	1402(ra) # 8000044a <consoleinit>
++    printfinit();
++    80000ed8:	00000097          	auipc	ra,0x0
++    80000edc:	88c080e7          	jalr	-1908(ra) # 80000764 <printfinit>
++    printf("\n");
++    80000ee0:	00007517          	auipc	a0,0x7
++    80000ee4:	1d850513          	addi	a0,a0,472 # 800080b8 <digits+0x88>
++    80000ee8:	fffff097          	auipc	ra,0xfffff
++    80000eec:	69c080e7          	jalr	1692(ra) # 80000584 <printf>
++    printf("xv6 kernel is booting\n");
++    80000ef0:	00007517          	auipc	a0,0x7
++    80000ef4:	1a050513          	addi	a0,a0,416 # 80008090 <digits+0x60>
++    80000ef8:	fffff097          	auipc	ra,0xfffff
++    80000efc:	68c080e7          	jalr	1676(ra) # 80000584 <printf>
++    printf("\n");
++    80000f00:	00007517          	auipc	a0,0x7
++    80000f04:	1b850513          	addi	a0,a0,440 # 800080b8 <digits+0x88>
++    80000f08:	fffff097          	auipc	ra,0xfffff
++    80000f0c:	67c080e7          	jalr	1660(ra) # 80000584 <printf>
++    kinit();         // physical page allocator
++    80000f10:	00000097          	auipc	ra,0x0
++    80000f14:	b94080e7          	jalr	-1132(ra) # 80000aa4 <kinit>
++    kvminit();       // create kernel page table
++    80000f18:	00000097          	auipc	ra,0x0
++    80000f1c:	32a080e7          	jalr	810(ra) # 80001242 <kvminit>
++    kvminithart();   // turn on paging
++    80000f20:	00000097          	auipc	ra,0x0
++    80000f24:	070080e7          	jalr	112(ra) # 80000f90 <kvminithart>
++    seminit();       // semaphore table
++    80000f28:	00001097          	auipc	ra,0x1
++    80000f2c:	904080e7          	jalr	-1788(ra) # 8000182c <seminit>
++    procinit();      // process table
++    80000f30:	00001097          	auipc	ra,0x1
++    80000f34:	d66080e7          	jalr	-666(ra) # 80001c96 <procinit>
++    trapinit();      // trap vectors
++    80000f38:	00002097          	auipc	ra,0x2
++    80000f3c:	c3c080e7          	jalr	-964(ra) # 80002b74 <trapinit>
++    trapinithart();  // install kernel trap vector
++    80000f40:	00002097          	auipc	ra,0x2
++    80000f44:	c5c080e7          	jalr	-932(ra) # 80002b9c <trapinithart>
++    plicinit();      // set up interrupt controller
++    80000f48:	00005097          	auipc	ra,0x5
++    80000f4c:	352080e7          	jalr	850(ra) # 8000629a <plicinit>
++    plicinithart();  // ask PLIC for device interrupts
++    80000f50:	00005097          	auipc	ra,0x5
++    80000f54:	360080e7          	jalr	864(ra) # 800062b0 <plicinithart>
++    binit();         // buffer cache
++    80000f58:	00002097          	auipc	ra,0x2
++    80000f5c:	520080e7          	jalr	1312(ra) # 80003478 <binit>
++    iinit();         // inode table
++    80000f60:	00003097          	auipc	ra,0x3
++    80000f64:	bae080e7          	jalr	-1106(ra) # 80003b0e <iinit>
++    fileinit();      // file table
++    80000f68:	00004097          	auipc	ra,0x4
++    80000f6c:	b60080e7          	jalr	-1184(ra) # 80004ac8 <fileinit>
++    virtio_disk_init(); // emulated hard disk
++    80000f70:	00005097          	auipc	ra,0x5
++    80000f74:	460080e7          	jalr	1120(ra) # 800063d0 <virtio_disk_init>
++    userinit();      // first user process
++    80000f78:	00001097          	auipc	ra,0x1
++    80000f7c:	0d6080e7          	jalr	214(ra) # 8000204e <userinit>
++    __sync_synchronize();
++    80000f80:	0ff0000f          	fence
++    started = 1;
++    80000f84:	4785                	li	a5,1
++    80000f86:	00008717          	auipc	a4,0x8
++    80000f8a:	08f72923          	sw	a5,146(a4) # 80009018 <started>
++    80000f8e:	bf2d                	j	80000ec8 <main+0x56>
++
++0000000080000f90 <kvminithart>:
++
++// Switch h/w page table register to the kernel's page table,
++// and enable paging.
++void
++kvminithart()
++{
++    80000f90:	1141                	addi	sp,sp,-16
++    80000f92:	e422                	sd	s0,8(sp)
++    80000f94:	0800                	addi	s0,sp,16
++  w_satp(MAKE_SATP(kernel_pagetable));
++    80000f96:	00008797          	auipc	a5,0x8
++    80000f9a:	08a7b783          	ld	a5,138(a5) # 80009020 <kernel_pagetable>
++    80000f9e:	83b1                	srli	a5,a5,0xc
++    80000fa0:	577d                	li	a4,-1
++    80000fa2:	177e                	slli	a4,a4,0x3f
++    80000fa4:	8fd9                	or	a5,a5,a4
++  asm volatile("csrw satp, %0" : : "r" (x));
++    80000fa6:	18079073          	csrw	satp,a5
++// flush the TLB.
++static inline void
++sfence_vma()
++{
++  // the zero, zero means flush all TLB entries.
++  asm volatile("sfence.vma zero, zero");
++    80000faa:	12000073          	sfence.vma
++  sfence_vma();
++}
++    80000fae:	6422                	ld	s0,8(sp)
++    80000fb0:	0141                	addi	sp,sp,16
++    80000fb2:	8082                	ret
++
++0000000080000fb4 <walk>:
++//   21..29 -- 9 bits of level-1 index.
++//   12..20 -- 9 bits of level-0 index.
++//    0..11 -- 12 bits of byte offset within the page.
++pte_t *
++walk(pagetable_t pagetable, uint64 va, int alloc)
++{
++    80000fb4:	7139                	addi	sp,sp,-64
++    80000fb6:	fc06                	sd	ra,56(sp)
++    80000fb8:	f822                	sd	s0,48(sp)
++    80000fba:	f426                	sd	s1,40(sp)
++    80000fbc:	f04a                	sd	s2,32(sp)
++    80000fbe:	ec4e                	sd	s3,24(sp)
++    80000fc0:	e852                	sd	s4,16(sp)
++    80000fc2:	e456                	sd	s5,8(sp)
++    80000fc4:	e05a                	sd	s6,0(sp)
++    80000fc6:	0080                	addi	s0,sp,64
++    80000fc8:	84aa                	mv	s1,a0
++    80000fca:	89ae                	mv	s3,a1
++    80000fcc:	8ab2                	mv	s5,a2
++  if(va >= MAXVA)
++    80000fce:	57fd                	li	a5,-1
++    80000fd0:	83e9                	srli	a5,a5,0x1a
++    80000fd2:	4a79                	li	s4,30
++    panic("walk");
++
++  for(int level = 2; level > 0; level--) {
++    80000fd4:	4b31                	li	s6,12
++  if(va >= MAXVA)
++    80000fd6:	04b7f263          	bgeu	a5,a1,8000101a <walk+0x66>
++    panic("walk");
++    80000fda:	00007517          	auipc	a0,0x7
++    80000fde:	0e650513          	addi	a0,a0,230 # 800080c0 <digits+0x90>
++    80000fe2:	fffff097          	auipc	ra,0xfffff
++    80000fe6:	558080e7          	jalr	1368(ra) # 8000053a <panic>
++    pte_t *pte = &pagetable[PX(level, va)];
++    if(*pte & PTE_V) {
++      pagetable = (pagetable_t)PTE2PA(*pte);
++    } else {
++      if(!alloc || (pagetable = (pde_t*)kalloc()) == 0)
++    80000fea:	060a8663          	beqz	s5,80001056 <walk+0xa2>
++    80000fee:	00000097          	auipc	ra,0x0
++    80000ff2:	af2080e7          	jalr	-1294(ra) # 80000ae0 <kalloc>
++    80000ff6:	84aa                	mv	s1,a0
++    80000ff8:	c529                	beqz	a0,80001042 <walk+0x8e>
++        return 0;
++      memset(pagetable, 0, PGSIZE);
++    80000ffa:	6605                	lui	a2,0x1
++    80000ffc:	4581                	li	a1,0
++    80000ffe:	00000097          	auipc	ra,0x0
++    80001002:	cce080e7          	jalr	-818(ra) # 80000ccc <memset>
++      *pte = PA2PTE(pagetable) | PTE_V;
++    80001006:	00c4d793          	srli	a5,s1,0xc
++    8000100a:	07aa                	slli	a5,a5,0xa
++    8000100c:	0017e793          	ori	a5,a5,1
++    80001010:	00f93023          	sd	a5,0(s2)
++  for(int level = 2; level > 0; level--) {
++    80001014:	3a5d                	addiw	s4,s4,-9 # ffffffffffffeff7 <end+0xffffffff7ffd5ff7>
++    80001016:	036a0063          	beq	s4,s6,80001036 <walk+0x82>
++    pte_t *pte = &pagetable[PX(level, va)];
++    8000101a:	0149d933          	srl	s2,s3,s4
++    8000101e:	1ff97913          	andi	s2,s2,511
++    80001022:	090e                	slli	s2,s2,0x3
++    80001024:	9926                	add	s2,s2,s1
++    if(*pte & PTE_V) {
++    80001026:	00093483          	ld	s1,0(s2)
++    8000102a:	0014f793          	andi	a5,s1,1
++    8000102e:	dfd5                	beqz	a5,80000fea <walk+0x36>
++      pagetable = (pagetable_t)PTE2PA(*pte);
++    80001030:	80a9                	srli	s1,s1,0xa
++    80001032:	04b2                	slli	s1,s1,0xc
++    80001034:	b7c5                	j	80001014 <walk+0x60>
++    }
++  }
++  return &pagetable[PX(0, va)];
++    80001036:	00c9d513          	srli	a0,s3,0xc
++    8000103a:	1ff57513          	andi	a0,a0,511
++    8000103e:	050e                	slli	a0,a0,0x3
++    80001040:	9526                	add	a0,a0,s1
++}
++    80001042:	70e2                	ld	ra,56(sp)
++    80001044:	7442                	ld	s0,48(sp)
++    80001046:	74a2                	ld	s1,40(sp)
++    80001048:	7902                	ld	s2,32(sp)
++    8000104a:	69e2                	ld	s3,24(sp)
++    8000104c:	6a42                	ld	s4,16(sp)
++    8000104e:	6aa2                	ld	s5,8(sp)
++    80001050:	6b02                	ld	s6,0(sp)
++    80001052:	6121                	addi	sp,sp,64
++    80001054:	8082                	ret
++        return 0;
++    80001056:	4501                	li	a0,0
++    80001058:	b7ed                	j	80001042 <walk+0x8e>
++
++000000008000105a <walkaddr>:
++walkaddr(pagetable_t pagetable, uint64 va)
++{
++  pte_t *pte;
++  uint64 pa;
++
++  if(va >= MAXVA)
++    8000105a:	57fd                	li	a5,-1
++    8000105c:	83e9                	srli	a5,a5,0x1a
++    8000105e:	00b7f463          	bgeu	a5,a1,80001066 <walkaddr+0xc>
++    return 0;
++    80001062:	4501                	li	a0,0
++    return 0;
++  if((*pte & PTE_U) == 0)
++    return 0;
++  pa = PTE2PA(*pte);
++  return pa;
++}
++    80001064:	8082                	ret
++{
++    80001066:	1141                	addi	sp,sp,-16
++    80001068:	e406                	sd	ra,8(sp)
++    8000106a:	e022                	sd	s0,0(sp)
++    8000106c:	0800                	addi	s0,sp,16
++  pte = walk(pagetable, va, 0);
++    8000106e:	4601                	li	a2,0
++    80001070:	00000097          	auipc	ra,0x0
++    80001074:	f44080e7          	jalr	-188(ra) # 80000fb4 <walk>
++  if(pte == 0)
++    80001078:	c105                	beqz	a0,80001098 <walkaddr+0x3e>
++  if((*pte & PTE_V) == 0)
++    8000107a:	611c                	ld	a5,0(a0)
++  if((*pte & PTE_U) == 0)
++    8000107c:	0117f693          	andi	a3,a5,17
++    80001080:	4745                	li	a4,17
++    return 0;
++    80001082:	4501                	li	a0,0
++  if((*pte & PTE_U) == 0)
++    80001084:	00e68663          	beq	a3,a4,80001090 <walkaddr+0x36>
++}
++    80001088:	60a2                	ld	ra,8(sp)
++    8000108a:	6402                	ld	s0,0(sp)
++    8000108c:	0141                	addi	sp,sp,16
++    8000108e:	8082                	ret
++  pa = PTE2PA(*pte);
++    80001090:	83a9                	srli	a5,a5,0xa
++    80001092:	00c79513          	slli	a0,a5,0xc
++  return pa;
++    80001096:	bfcd                	j	80001088 <walkaddr+0x2e>
++    return 0;
++    80001098:	4501                	li	a0,0
++    8000109a:	b7fd                	j	80001088 <walkaddr+0x2e>
++
++000000008000109c <mappages>:
++// physical addresses starting at pa. va and size might not
++// be page-aligned. Returns 0 on success, -1 if walk() couldn't
++// allocate a needed page-table page.
++int
++mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)
++{
++    8000109c:	715d                	addi	sp,sp,-80
++    8000109e:	e486                	sd	ra,72(sp)
++    800010a0:	e0a2                	sd	s0,64(sp)
++    800010a2:	fc26                	sd	s1,56(sp)
++    800010a4:	f84a                	sd	s2,48(sp)
++    800010a6:	f44e                	sd	s3,40(sp)
++    800010a8:	f052                	sd	s4,32(sp)
++    800010aa:	ec56                	sd	s5,24(sp)
++    800010ac:	e85a                	sd	s6,16(sp)
++    800010ae:	e45e                	sd	s7,8(sp)
++    800010b0:	0880                	addi	s0,sp,80
++  uint64 a, last;
++  pte_t *pte;
++
++  if(size == 0)
++    800010b2:	c639                	beqz	a2,80001100 <mappages+0x64>
++    800010b4:	8aaa                	mv	s5,a0
++    800010b6:	8b3a                	mv	s6,a4
++    panic("mappages: size");
++  
++  a = PGROUNDDOWN(va);
++    800010b8:	777d                	lui	a4,0xfffff
++    800010ba:	00e5f7b3          	and	a5,a1,a4
++  last = PGROUNDDOWN(va + size - 1);
++    800010be:	fff58993          	addi	s3,a1,-1
++    800010c2:	99b2                	add	s3,s3,a2
++    800010c4:	00e9f9b3          	and	s3,s3,a4
++  a = PGROUNDDOWN(va);
++    800010c8:	893e                	mv	s2,a5
++    800010ca:	40f68a33          	sub	s4,a3,a5
++    if(*pte & PTE_V)
++      panic("mappages: remap");
++    *pte = PA2PTE(pa) | perm | PTE_V;
++    if(a == last)
++      break;
++    a += PGSIZE;
++    800010ce:	6b85                	lui	s7,0x1
++    800010d0:	012a04b3          	add	s1,s4,s2
++    if((pte = walk(pagetable, a, 1)) == 0)
++    800010d4:	4605                	li	a2,1
++    800010d6:	85ca                	mv	a1,s2
++    800010d8:	8556                	mv	a0,s5
++    800010da:	00000097          	auipc	ra,0x0
++    800010de:	eda080e7          	jalr	-294(ra) # 80000fb4 <walk>
++    800010e2:	cd1d                	beqz	a0,80001120 <mappages+0x84>
++    if(*pte & PTE_V)
++    800010e4:	611c                	ld	a5,0(a0)
++    800010e6:	8b85                	andi	a5,a5,1
++    800010e8:	e785                	bnez	a5,80001110 <mappages+0x74>
++    *pte = PA2PTE(pa) | perm | PTE_V;
++    800010ea:	80b1                	srli	s1,s1,0xc
++    800010ec:	04aa                	slli	s1,s1,0xa
++    800010ee:	0164e4b3          	or	s1,s1,s6
++    800010f2:	0014e493          	ori	s1,s1,1
++    800010f6:	e104                	sd	s1,0(a0)
++    if(a == last)
++    800010f8:	05390063          	beq	s2,s3,80001138 <mappages+0x9c>
++    a += PGSIZE;
++    800010fc:	995e                	add	s2,s2,s7
++    if((pte = walk(pagetable, a, 1)) == 0)
++    800010fe:	bfc9                	j	800010d0 <mappages+0x34>
++    panic("mappages: size");
++    80001100:	00007517          	auipc	a0,0x7
++    80001104:	fc850513          	addi	a0,a0,-56 # 800080c8 <digits+0x98>
++    80001108:	fffff097          	auipc	ra,0xfffff
++    8000110c:	432080e7          	jalr	1074(ra) # 8000053a <panic>
++      panic("mappages: remap");
++    80001110:	00007517          	auipc	a0,0x7
++    80001114:	fc850513          	addi	a0,a0,-56 # 800080d8 <digits+0xa8>
++    80001118:	fffff097          	auipc	ra,0xfffff
++    8000111c:	422080e7          	jalr	1058(ra) # 8000053a <panic>
++      return -1;
++    80001120:	557d                	li	a0,-1
++    pa += PGSIZE;
++  }
++  return 0;
++}
++    80001122:	60a6                	ld	ra,72(sp)
++    80001124:	6406                	ld	s0,64(sp)
++    80001126:	74e2                	ld	s1,56(sp)
++    80001128:	7942                	ld	s2,48(sp)
++    8000112a:	79a2                	ld	s3,40(sp)
++    8000112c:	7a02                	ld	s4,32(sp)
++    8000112e:	6ae2                	ld	s5,24(sp)
++    80001130:	6b42                	ld	s6,16(sp)
++    80001132:	6ba2                	ld	s7,8(sp)
++    80001134:	6161                	addi	sp,sp,80
++    80001136:	8082                	ret
++  return 0;
++    80001138:	4501                	li	a0,0
++    8000113a:	b7e5                	j	80001122 <mappages+0x86>
++
++000000008000113c <kvmmap>:
++{
++    8000113c:	1141                	addi	sp,sp,-16
++    8000113e:	e406                	sd	ra,8(sp)
++    80001140:	e022                	sd	s0,0(sp)
++    80001142:	0800                	addi	s0,sp,16
++    80001144:	87b6                	mv	a5,a3
++  if(mappages(kpgtbl, va, sz, pa, perm) != 0)
++    80001146:	86b2                	mv	a3,a2
++    80001148:	863e                	mv	a2,a5
++    8000114a:	00000097          	auipc	ra,0x0
++    8000114e:	f52080e7          	jalr	-174(ra) # 8000109c <mappages>
++    80001152:	e509                	bnez	a0,8000115c <kvmmap+0x20>
++}
++    80001154:	60a2                	ld	ra,8(sp)
++    80001156:	6402                	ld	s0,0(sp)
++    80001158:	0141                	addi	sp,sp,16
++    8000115a:	8082                	ret
++    panic("kvmmap");
++    8000115c:	00007517          	auipc	a0,0x7
++    80001160:	f8c50513          	addi	a0,a0,-116 # 800080e8 <digits+0xb8>
++    80001164:	fffff097          	auipc	ra,0xfffff
++    80001168:	3d6080e7          	jalr	982(ra) # 8000053a <panic>
++
++000000008000116c <kvmmake>:
++{
++    8000116c:	1101                	addi	sp,sp,-32
++    8000116e:	ec06                	sd	ra,24(sp)
++    80001170:	e822                	sd	s0,16(sp)
++    80001172:	e426                	sd	s1,8(sp)
++    80001174:	e04a                	sd	s2,0(sp)
++    80001176:	1000                	addi	s0,sp,32
++  kpgtbl = (pagetable_t) kalloc();
++    80001178:	00000097          	auipc	ra,0x0
++    8000117c:	968080e7          	jalr	-1688(ra) # 80000ae0 <kalloc>
++    80001180:	84aa                	mv	s1,a0
++  memset(kpgtbl, 0, PGSIZE);
++    80001182:	6605                	lui	a2,0x1
++    80001184:	4581                	li	a1,0
++    80001186:	00000097          	auipc	ra,0x0
++    8000118a:	b46080e7          	jalr	-1210(ra) # 80000ccc <memset>
++  kvmmap(kpgtbl, UART0, UART0, PGSIZE, PTE_R | PTE_W);
++    8000118e:	4719                	li	a4,6
++    80001190:	6685                	lui	a3,0x1
++    80001192:	10000637          	lui	a2,0x10000
++    80001196:	100005b7          	lui	a1,0x10000
++    8000119a:	8526                	mv	a0,s1
++    8000119c:	00000097          	auipc	ra,0x0
++    800011a0:	fa0080e7          	jalr	-96(ra) # 8000113c <kvmmap>
++  kvmmap(kpgtbl, VIRTIO0, VIRTIO0, PGSIZE, PTE_R | PTE_W);
++    800011a4:	4719                	li	a4,6
++    800011a6:	6685                	lui	a3,0x1
++    800011a8:	10001637          	lui	a2,0x10001
++    800011ac:	100015b7          	lui	a1,0x10001
++    800011b0:	8526                	mv	a0,s1
++    800011b2:	00000097          	auipc	ra,0x0
++    800011b6:	f8a080e7          	jalr	-118(ra) # 8000113c <kvmmap>
++  kvmmap(kpgtbl, PLIC, PLIC, 0x400000, PTE_R | PTE_W);
++    800011ba:	4719                	li	a4,6
++    800011bc:	004006b7          	lui	a3,0x400
++    800011c0:	0c000637          	lui	a2,0xc000
++    800011c4:	0c0005b7          	lui	a1,0xc000
++    800011c8:	8526                	mv	a0,s1
++    800011ca:	00000097          	auipc	ra,0x0
++    800011ce:	f72080e7          	jalr	-142(ra) # 8000113c <kvmmap>
++  kvmmap(kpgtbl, KERNBASE, KERNBASE, (uint64)etext-KERNBASE, PTE_R | PTE_X);
++    800011d2:	00007917          	auipc	s2,0x7
++    800011d6:	e2e90913          	addi	s2,s2,-466 # 80008000 <etext>
++    800011da:	4729                	li	a4,10
++    800011dc:	80007697          	auipc	a3,0x80007
++    800011e0:	e2468693          	addi	a3,a3,-476 # 8000 <_entry-0x7fff8000>
++    800011e4:	4605                	li	a2,1
++    800011e6:	067e                	slli	a2,a2,0x1f
++    800011e8:	85b2                	mv	a1,a2
++    800011ea:	8526                	mv	a0,s1
++    800011ec:	00000097          	auipc	ra,0x0
++    800011f0:	f50080e7          	jalr	-176(ra) # 8000113c <kvmmap>
++  kvmmap(kpgtbl, (uint64)etext, (uint64)etext, PHYSTOP-(uint64)etext, PTE_R | PTE_W);
++    800011f4:	4719                	li	a4,6
++    800011f6:	46c5                	li	a3,17
++    800011f8:	06ee                	slli	a3,a3,0x1b
++    800011fa:	412686b3          	sub	a3,a3,s2
++    800011fe:	864a                	mv	a2,s2
++    80001200:	85ca                	mv	a1,s2
++    80001202:	8526                	mv	a0,s1
++    80001204:	00000097          	auipc	ra,0x0
++    80001208:	f38080e7          	jalr	-200(ra) # 8000113c <kvmmap>
++  kvmmap(kpgtbl, TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_R | PTE_X);
++    8000120c:	4729                	li	a4,10
++    8000120e:	6685                	lui	a3,0x1
++    80001210:	00006617          	auipc	a2,0x6
++    80001214:	df060613          	addi	a2,a2,-528 # 80007000 <_trampoline>
++    80001218:	040005b7          	lui	a1,0x4000
++    8000121c:	15fd                	addi	a1,a1,-1 # 3ffffff <_entry-0x7c000001>
++    8000121e:	05b2                	slli	a1,a1,0xc
++    80001220:	8526                	mv	a0,s1
++    80001222:	00000097          	auipc	ra,0x0
++    80001226:	f1a080e7          	jalr	-230(ra) # 8000113c <kvmmap>
++  proc_mapstacks(kpgtbl);
++    8000122a:	8526                	mv	a0,s1
++    8000122c:	00001097          	auipc	ra,0x1
++    80001230:	9e8080e7          	jalr	-1560(ra) # 80001c14 <proc_mapstacks>
++}
++    80001234:	8526                	mv	a0,s1
++    80001236:	60e2                	ld	ra,24(sp)
++    80001238:	6442                	ld	s0,16(sp)
++    8000123a:	64a2                	ld	s1,8(sp)
++    8000123c:	6902                	ld	s2,0(sp)
++    8000123e:	6105                	addi	sp,sp,32
++    80001240:	8082                	ret
++
++0000000080001242 <kvminit>:
++{
++    80001242:	1141                	addi	sp,sp,-16
++    80001244:	e406                	sd	ra,8(sp)
++    80001246:	e022                	sd	s0,0(sp)
++    80001248:	0800                	addi	s0,sp,16
++  kernel_pagetable = kvmmake();
++    8000124a:	00000097          	auipc	ra,0x0
++    8000124e:	f22080e7          	jalr	-222(ra) # 8000116c <kvmmake>
++    80001252:	00008797          	auipc	a5,0x8
++    80001256:	dca7b723          	sd	a0,-562(a5) # 80009020 <kernel_pagetable>
++}
++    8000125a:	60a2                	ld	ra,8(sp)
++    8000125c:	6402                	ld	s0,0(sp)
++    8000125e:	0141                	addi	sp,sp,16
++    80001260:	8082                	ret
++
++0000000080001262 <uvmunmap>:
++// Remove npages of mappings starting from va. va must be
++// page-aligned. The mappings must exist.
++// Optionally free the physical memory.
++void
++uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
++{
++    80001262:	715d                	addi	sp,sp,-80
++    80001264:	e486                	sd	ra,72(sp)
++    80001266:	e0a2                	sd	s0,64(sp)
++    80001268:	fc26                	sd	s1,56(sp)
++    8000126a:	f84a                	sd	s2,48(sp)
++    8000126c:	f44e                	sd	s3,40(sp)
++    8000126e:	f052                	sd	s4,32(sp)
++    80001270:	ec56                	sd	s5,24(sp)
++    80001272:	e85a                	sd	s6,16(sp)
++    80001274:	e45e                	sd	s7,8(sp)
++    80001276:	0880                	addi	s0,sp,80
++  uint64 a;
++  pte_t *pte;
++
++  if((va % PGSIZE) != 0)
++    80001278:	03459793          	slli	a5,a1,0x34
++    8000127c:	e795                	bnez	a5,800012a8 <uvmunmap+0x46>
++    8000127e:	8a2a                	mv	s4,a0
++    80001280:	892e                	mv	s2,a1
++    80001282:	8ab6                	mv	s5,a3
++    panic("uvmunmap: not aligned");
++
++  for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
++    80001284:	0632                	slli	a2,a2,0xc
++    80001286:	00b609b3          	add	s3,a2,a1
++    if((pte = walk(pagetable, a, 0)) == 0)
++      panic("uvmunmap: walk");
++    if((*pte & PTE_V) == 0)
++      panic("uvmunmap: not mapped");
++    if(PTE_FLAGS(*pte) == PTE_V)
++    8000128a:	4b85                	li	s7,1
++  for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
++    8000128c:	6b05                	lui	s6,0x1
++    8000128e:	0735e263          	bltu	a1,s3,800012f2 <uvmunmap+0x90>
++      uint64 pa = PTE2PA(*pte);
++      kfree((void*)pa);
++    }
++    *pte = 0;
++  }
++}
++    80001292:	60a6                	ld	ra,72(sp)
++    80001294:	6406                	ld	s0,64(sp)
++    80001296:	74e2                	ld	s1,56(sp)
++    80001298:	7942                	ld	s2,48(sp)
++    8000129a:	79a2                	ld	s3,40(sp)
++    8000129c:	7a02                	ld	s4,32(sp)
++    8000129e:	6ae2                	ld	s5,24(sp)
++    800012a0:	6b42                	ld	s6,16(sp)
++    800012a2:	6ba2                	ld	s7,8(sp)
++    800012a4:	6161                	addi	sp,sp,80
++    800012a6:	8082                	ret
++    panic("uvmunmap: not aligned");
++    800012a8:	00007517          	auipc	a0,0x7
++    800012ac:	e4850513          	addi	a0,a0,-440 # 800080f0 <digits+0xc0>
++    800012b0:	fffff097          	auipc	ra,0xfffff
++    800012b4:	28a080e7          	jalr	650(ra) # 8000053a <panic>
++      panic("uvmunmap: walk");
++    800012b8:	00007517          	auipc	a0,0x7
++    800012bc:	e5050513          	addi	a0,a0,-432 # 80008108 <digits+0xd8>
++    800012c0:	fffff097          	auipc	ra,0xfffff
++    800012c4:	27a080e7          	jalr	634(ra) # 8000053a <panic>
++      panic("uvmunmap: not mapped");
++    800012c8:	00007517          	auipc	a0,0x7
++    800012cc:	e5050513          	addi	a0,a0,-432 # 80008118 <digits+0xe8>
++    800012d0:	fffff097          	auipc	ra,0xfffff
++    800012d4:	26a080e7          	jalr	618(ra) # 8000053a <panic>
++      panic("uvmunmap: not a leaf");
++    800012d8:	00007517          	auipc	a0,0x7
++    800012dc:	e5850513          	addi	a0,a0,-424 # 80008130 <digits+0x100>
++    800012e0:	fffff097          	auipc	ra,0xfffff
++    800012e4:	25a080e7          	jalr	602(ra) # 8000053a <panic>
++    *pte = 0;
++    800012e8:	0004b023          	sd	zero,0(s1)
++  for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
++    800012ec:	995a                	add	s2,s2,s6
++    800012ee:	fb3972e3          	bgeu	s2,s3,80001292 <uvmunmap+0x30>
++    if((pte = walk(pagetable, a, 0)) == 0)
++    800012f2:	4601                	li	a2,0
++    800012f4:	85ca                	mv	a1,s2
++    800012f6:	8552                	mv	a0,s4
++    800012f8:	00000097          	auipc	ra,0x0
++    800012fc:	cbc080e7          	jalr	-836(ra) # 80000fb4 <walk>
++    80001300:	84aa                	mv	s1,a0
++    80001302:	d95d                	beqz	a0,800012b8 <uvmunmap+0x56>
++    if((*pte & PTE_V) == 0)
++    80001304:	6108                	ld	a0,0(a0)
++    80001306:	00157793          	andi	a5,a0,1
++    8000130a:	dfdd                	beqz	a5,800012c8 <uvmunmap+0x66>
++    if(PTE_FLAGS(*pte) == PTE_V)
++    8000130c:	3ff57793          	andi	a5,a0,1023
++    80001310:	fd7784e3          	beq	a5,s7,800012d8 <uvmunmap+0x76>
++    if(do_free){
++    80001314:	fc0a8ae3          	beqz	s5,800012e8 <uvmunmap+0x86>
++      uint64 pa = PTE2PA(*pte);
++    80001318:	8129                	srli	a0,a0,0xa
++      kfree((void*)pa);
++    8000131a:	0532                	slli	a0,a0,0xc
++    8000131c:	fffff097          	auipc	ra,0xfffff
++    80001320:	6c6080e7          	jalr	1734(ra) # 800009e2 <kfree>
++    80001324:	b7d1                	j	800012e8 <uvmunmap+0x86>
++
++0000000080001326 <uvmcreate>:
++
++// create an empty user page table.
++// returns 0 if out of memory.
++pagetable_t
++uvmcreate()
++{
++    80001326:	1101                	addi	sp,sp,-32
++    80001328:	ec06                	sd	ra,24(sp)
++    8000132a:	e822                	sd	s0,16(sp)
++    8000132c:	e426                	sd	s1,8(sp)
++    8000132e:	1000                	addi	s0,sp,32
++  pagetable_t pagetable;
++  pagetable = (pagetable_t) kalloc();
++    80001330:	fffff097          	auipc	ra,0xfffff
++    80001334:	7b0080e7          	jalr	1968(ra) # 80000ae0 <kalloc>
++    80001338:	84aa                	mv	s1,a0
++  if(pagetable == 0)
++    8000133a:	c519                	beqz	a0,80001348 <uvmcreate+0x22>
++    return 0;
++  memset(pagetable, 0, PGSIZE);
++    8000133c:	6605                	lui	a2,0x1
++    8000133e:	4581                	li	a1,0
++    80001340:	00000097          	auipc	ra,0x0
++    80001344:	98c080e7          	jalr	-1652(ra) # 80000ccc <memset>
++  return pagetable;
++}
++    80001348:	8526                	mv	a0,s1
++    8000134a:	60e2                	ld	ra,24(sp)
++    8000134c:	6442                	ld	s0,16(sp)
++    8000134e:	64a2                	ld	s1,8(sp)
++    80001350:	6105                	addi	sp,sp,32
++    80001352:	8082                	ret
++
++0000000080001354 <uvminit>:
++// Load the user initcode into address 0 of pagetable,
++// for the very first process.
++// sz must be less than a page.
++void
++uvminit(pagetable_t pagetable, uchar *src, uint sz)
++{
++    80001354:	7179                	addi	sp,sp,-48
++    80001356:	f406                	sd	ra,40(sp)
++    80001358:	f022                	sd	s0,32(sp)
++    8000135a:	ec26                	sd	s1,24(sp)
++    8000135c:	e84a                	sd	s2,16(sp)
++    8000135e:	e44e                	sd	s3,8(sp)
++    80001360:	e052                	sd	s4,0(sp)
++    80001362:	1800                	addi	s0,sp,48
++  char *mem;
++
++  if(sz >= PGSIZE)
++    80001364:	6785                	lui	a5,0x1
++    80001366:	04f67863          	bgeu	a2,a5,800013b6 <uvminit+0x62>
++    8000136a:	8a2a                	mv	s4,a0
++    8000136c:	89ae                	mv	s3,a1
++    8000136e:	84b2                	mv	s1,a2
++    panic("inituvm: more than a page");
++  mem = kalloc();
++    80001370:	fffff097          	auipc	ra,0xfffff
++    80001374:	770080e7          	jalr	1904(ra) # 80000ae0 <kalloc>
++    80001378:	892a                	mv	s2,a0
++  memset(mem, 0, PGSIZE);
++    8000137a:	6605                	lui	a2,0x1
++    8000137c:	4581                	li	a1,0
++    8000137e:	00000097          	auipc	ra,0x0
++    80001382:	94e080e7          	jalr	-1714(ra) # 80000ccc <memset>
++  mappages(pagetable, 0, PGSIZE, (uint64)mem, PTE_W|PTE_R|PTE_X|PTE_U);
++    80001386:	4779                	li	a4,30
++    80001388:	86ca                	mv	a3,s2
++    8000138a:	6605                	lui	a2,0x1
++    8000138c:	4581                	li	a1,0
++    8000138e:	8552                	mv	a0,s4
++    80001390:	00000097          	auipc	ra,0x0
++    80001394:	d0c080e7          	jalr	-756(ra) # 8000109c <mappages>
++  memmove(mem, src, sz);
++    80001398:	8626                	mv	a2,s1
++    8000139a:	85ce                	mv	a1,s3
++    8000139c:	854a                	mv	a0,s2
++    8000139e:	00000097          	auipc	ra,0x0
++    800013a2:	98a080e7          	jalr	-1654(ra) # 80000d28 <memmove>
++}
++    800013a6:	70a2                	ld	ra,40(sp)
++    800013a8:	7402                	ld	s0,32(sp)
++    800013aa:	64e2                	ld	s1,24(sp)
++    800013ac:	6942                	ld	s2,16(sp)
++    800013ae:	69a2                	ld	s3,8(sp)
++    800013b0:	6a02                	ld	s4,0(sp)
++    800013b2:	6145                	addi	sp,sp,48
++    800013b4:	8082                	ret
++    panic("inituvm: more than a page");
++    800013b6:	00007517          	auipc	a0,0x7
++    800013ba:	d9250513          	addi	a0,a0,-622 # 80008148 <digits+0x118>
++    800013be:	fffff097          	auipc	ra,0xfffff
++    800013c2:	17c080e7          	jalr	380(ra) # 8000053a <panic>
++
++00000000800013c6 <uvmdealloc>:
++// newsz.  oldsz and newsz need not be page-aligned, nor does newsz
++// need to be less than oldsz.  oldsz can be larger than the actual
++// process size.  Returns the new process size.
++uint64
++uvmdealloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz)
++{
++    800013c6:	1101                	addi	sp,sp,-32
++    800013c8:	ec06                	sd	ra,24(sp)
++    800013ca:	e822                	sd	s0,16(sp)
++    800013cc:	e426                	sd	s1,8(sp)
++    800013ce:	1000                	addi	s0,sp,32
++  if(newsz >= oldsz)
++    return oldsz;
++    800013d0:	84ae                	mv	s1,a1
++  if(newsz >= oldsz)
++    800013d2:	00b67d63          	bgeu	a2,a1,800013ec <uvmdealloc+0x26>
++    800013d6:	84b2                	mv	s1,a2
++
++  if(PGROUNDUP(newsz) < PGROUNDUP(oldsz)){
++    800013d8:	6785                	lui	a5,0x1
++    800013da:	17fd                	addi	a5,a5,-1 # fff <_entry-0x7ffff001>
++    800013dc:	00f60733          	add	a4,a2,a5
++    800013e0:	76fd                	lui	a3,0xfffff
++    800013e2:	8f75                	and	a4,a4,a3
++    800013e4:	97ae                	add	a5,a5,a1
++    800013e6:	8ff5                	and	a5,a5,a3
++    800013e8:	00f76863          	bltu	a4,a5,800013f8 <uvmdealloc+0x32>
++    int npages = (PGROUNDUP(oldsz) - PGROUNDUP(newsz)) / PGSIZE;
++    uvmunmap(pagetable, PGROUNDUP(newsz), npages, 1);
++  }
++
++  return newsz;
++}
++    800013ec:	8526                	mv	a0,s1
++    800013ee:	60e2                	ld	ra,24(sp)
++    800013f0:	6442                	ld	s0,16(sp)
++    800013f2:	64a2                	ld	s1,8(sp)
++    800013f4:	6105                	addi	sp,sp,32
++    800013f6:	8082                	ret
++    int npages = (PGROUNDUP(oldsz) - PGROUNDUP(newsz)) / PGSIZE;
++    800013f8:	8f99                	sub	a5,a5,a4
++    800013fa:	83b1                	srli	a5,a5,0xc
++    uvmunmap(pagetable, PGROUNDUP(newsz), npages, 1);
++    800013fc:	4685                	li	a3,1
++    800013fe:	0007861b          	sext.w	a2,a5
++    80001402:	85ba                	mv	a1,a4
++    80001404:	00000097          	auipc	ra,0x0
++    80001408:	e5e080e7          	jalr	-418(ra) # 80001262 <uvmunmap>
++    8000140c:	b7c5                	j	800013ec <uvmdealloc+0x26>
++
++000000008000140e <uvmalloc>:
++  if(newsz < oldsz)
++    8000140e:	0ab66163          	bltu	a2,a1,800014b0 <uvmalloc+0xa2>
++{
++    80001412:	7139                	addi	sp,sp,-64
++    80001414:	fc06                	sd	ra,56(sp)
++    80001416:	f822                	sd	s0,48(sp)
++    80001418:	f426                	sd	s1,40(sp)
++    8000141a:	f04a                	sd	s2,32(sp)
++    8000141c:	ec4e                	sd	s3,24(sp)
++    8000141e:	e852                	sd	s4,16(sp)
++    80001420:	e456                	sd	s5,8(sp)
++    80001422:	0080                	addi	s0,sp,64
++    80001424:	8aaa                	mv	s5,a0
++    80001426:	8a32                	mv	s4,a2
++  oldsz = PGROUNDUP(oldsz);
++    80001428:	6785                	lui	a5,0x1
++    8000142a:	17fd                	addi	a5,a5,-1 # fff <_entry-0x7ffff001>
++    8000142c:	95be                	add	a1,a1,a5
++    8000142e:	77fd                	lui	a5,0xfffff
++    80001430:	00f5f9b3          	and	s3,a1,a5
++  for(a = oldsz; a < newsz; a += PGSIZE){
++    80001434:	08c9f063          	bgeu	s3,a2,800014b4 <uvmalloc+0xa6>
++    80001438:	894e                	mv	s2,s3
++    mem = kalloc();
++    8000143a:	fffff097          	auipc	ra,0xfffff
++    8000143e:	6a6080e7          	jalr	1702(ra) # 80000ae0 <kalloc>
++    80001442:	84aa                	mv	s1,a0
++    if(mem == 0){
++    80001444:	c51d                	beqz	a0,80001472 <uvmalloc+0x64>
++    memset(mem, 0, PGSIZE);
++    80001446:	6605                	lui	a2,0x1
++    80001448:	4581                	li	a1,0
++    8000144a:	00000097          	auipc	ra,0x0
++    8000144e:	882080e7          	jalr	-1918(ra) # 80000ccc <memset>
++    if(mappages(pagetable, a, PGSIZE, (uint64)mem, PTE_W|PTE_X|PTE_R|PTE_U) != 0){
++    80001452:	4779                	li	a4,30
++    80001454:	86a6                	mv	a3,s1
++    80001456:	6605                	lui	a2,0x1
++    80001458:	85ca                	mv	a1,s2
++    8000145a:	8556                	mv	a0,s5
++    8000145c:	00000097          	auipc	ra,0x0
++    80001460:	c40080e7          	jalr	-960(ra) # 8000109c <mappages>
++    80001464:	e905                	bnez	a0,80001494 <uvmalloc+0x86>
++  for(a = oldsz; a < newsz; a += PGSIZE){
++    80001466:	6785                	lui	a5,0x1
++    80001468:	993e                	add	s2,s2,a5
++    8000146a:	fd4968e3          	bltu	s2,s4,8000143a <uvmalloc+0x2c>
++  return newsz;
++    8000146e:	8552                	mv	a0,s4
++    80001470:	a809                	j	80001482 <uvmalloc+0x74>
++      uvmdealloc(pagetable, a, oldsz);
++    80001472:	864e                	mv	a2,s3
++    80001474:	85ca                	mv	a1,s2
++    80001476:	8556                	mv	a0,s5
++    80001478:	00000097          	auipc	ra,0x0
++    8000147c:	f4e080e7          	jalr	-178(ra) # 800013c6 <uvmdealloc>
++      return 0;
++    80001480:	4501                	li	a0,0
++}
++    80001482:	70e2                	ld	ra,56(sp)
++    80001484:	7442                	ld	s0,48(sp)
++    80001486:	74a2                	ld	s1,40(sp)
++    80001488:	7902                	ld	s2,32(sp)
++    8000148a:	69e2                	ld	s3,24(sp)
++    8000148c:	6a42                	ld	s4,16(sp)
++    8000148e:	6aa2                	ld	s5,8(sp)
++    80001490:	6121                	addi	sp,sp,64
++    80001492:	8082                	ret
++      kfree(mem);
++    80001494:	8526                	mv	a0,s1
++    80001496:	fffff097          	auipc	ra,0xfffff
++    8000149a:	54c080e7          	jalr	1356(ra) # 800009e2 <kfree>
++      uvmdealloc(pagetable, a, oldsz);
++    8000149e:	864e                	mv	a2,s3
++    800014a0:	85ca                	mv	a1,s2
++    800014a2:	8556                	mv	a0,s5
++    800014a4:	00000097          	auipc	ra,0x0
++    800014a8:	f22080e7          	jalr	-222(ra) # 800013c6 <uvmdealloc>
++      return 0;
++    800014ac:	4501                	li	a0,0
++    800014ae:	bfd1                	j	80001482 <uvmalloc+0x74>
++    return oldsz;
++    800014b0:	852e                	mv	a0,a1
++}
++    800014b2:	8082                	ret
++  return newsz;
++    800014b4:	8532                	mv	a0,a2
++    800014b6:	b7f1                	j	80001482 <uvmalloc+0x74>
++
++00000000800014b8 <freewalk>:
++
++// Recursively free page-table pages.
++// All leaf mappings must already have been removed.
++void
++freewalk(pagetable_t pagetable)
++{
++    800014b8:	7179                	addi	sp,sp,-48
++    800014ba:	f406                	sd	ra,40(sp)
++    800014bc:	f022                	sd	s0,32(sp)
++    800014be:	ec26                	sd	s1,24(sp)
++    800014c0:	e84a                	sd	s2,16(sp)
++    800014c2:	e44e                	sd	s3,8(sp)
++    800014c4:	e052                	sd	s4,0(sp)
++    800014c6:	1800                	addi	s0,sp,48
++    800014c8:	8a2a                	mv	s4,a0
++  // there are 2^9 = 512 PTEs in a page table.
++  for(int i = 0; i < 512; i++){
++    800014ca:	84aa                	mv	s1,a0
++    800014cc:	6905                	lui	s2,0x1
++    800014ce:	992a                	add	s2,s2,a0
++    pte_t pte = pagetable[i];
++    if((pte & PTE_V) && (pte & (PTE_R|PTE_W|PTE_X)) == 0){
++    800014d0:	4985                	li	s3,1
++    800014d2:	a829                	j	800014ec <freewalk+0x34>
++      // this PTE points to a lower-level page table.
++      uint64 child = PTE2PA(pte);
++    800014d4:	83a9                	srli	a5,a5,0xa
++      freewalk((pagetable_t)child);
++    800014d6:	00c79513          	slli	a0,a5,0xc
++    800014da:	00000097          	auipc	ra,0x0
++    800014de:	fde080e7          	jalr	-34(ra) # 800014b8 <freewalk>
++      pagetable[i] = 0;
++    800014e2:	0004b023          	sd	zero,0(s1)
++  for(int i = 0; i < 512; i++){
++    800014e6:	04a1                	addi	s1,s1,8
++    800014e8:	03248163          	beq	s1,s2,8000150a <freewalk+0x52>
++    pte_t pte = pagetable[i];
++    800014ec:	609c                	ld	a5,0(s1)
++    if((pte & PTE_V) && (pte & (PTE_R|PTE_W|PTE_X)) == 0){
++    800014ee:	00f7f713          	andi	a4,a5,15
++    800014f2:	ff3701e3          	beq	a4,s3,800014d4 <freewalk+0x1c>
++    } else if(pte & PTE_V){
++    800014f6:	8b85                	andi	a5,a5,1
++    800014f8:	d7fd                	beqz	a5,800014e6 <freewalk+0x2e>
++      panic("freewalk: leaf");
++    800014fa:	00007517          	auipc	a0,0x7
++    800014fe:	c6e50513          	addi	a0,a0,-914 # 80008168 <digits+0x138>
++    80001502:	fffff097          	auipc	ra,0xfffff
++    80001506:	038080e7          	jalr	56(ra) # 8000053a <panic>
++    }
++  }
++  kfree((void*)pagetable);
++    8000150a:	8552                	mv	a0,s4
++    8000150c:	fffff097          	auipc	ra,0xfffff
++    80001510:	4d6080e7          	jalr	1238(ra) # 800009e2 <kfree>
++}
++    80001514:	70a2                	ld	ra,40(sp)
++    80001516:	7402                	ld	s0,32(sp)
++    80001518:	64e2                	ld	s1,24(sp)
++    8000151a:	6942                	ld	s2,16(sp)
++    8000151c:	69a2                	ld	s3,8(sp)
++    8000151e:	6a02                	ld	s4,0(sp)
++    80001520:	6145                	addi	sp,sp,48
++    80001522:	8082                	ret
++
++0000000080001524 <uvmfree>:
++
++// Free user memory pages,
++// then free page-table pages.
++void
++uvmfree(pagetable_t pagetable, uint64 sz)
++{
++    80001524:	1101                	addi	sp,sp,-32
++    80001526:	ec06                	sd	ra,24(sp)
++    80001528:	e822                	sd	s0,16(sp)
++    8000152a:	e426                	sd	s1,8(sp)
++    8000152c:	1000                	addi	s0,sp,32
++    8000152e:	84aa                	mv	s1,a0
++  if(sz > 0)
++    80001530:	e999                	bnez	a1,80001546 <uvmfree+0x22>
++    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1);
++  freewalk(pagetable);
++    80001532:	8526                	mv	a0,s1
++    80001534:	00000097          	auipc	ra,0x0
++    80001538:	f84080e7          	jalr	-124(ra) # 800014b8 <freewalk>
++}
++    8000153c:	60e2                	ld	ra,24(sp)
++    8000153e:	6442                	ld	s0,16(sp)
++    80001540:	64a2                	ld	s1,8(sp)
++    80001542:	6105                	addi	sp,sp,32
++    80001544:	8082                	ret
++    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1);
++    80001546:	6785                	lui	a5,0x1
++    80001548:	17fd                	addi	a5,a5,-1 # fff <_entry-0x7ffff001>
++    8000154a:	95be                	add	a1,a1,a5
++    8000154c:	4685                	li	a3,1
++    8000154e:	00c5d613          	srli	a2,a1,0xc
++    80001552:	4581                	li	a1,0
++    80001554:	00000097          	auipc	ra,0x0
++    80001558:	d0e080e7          	jalr	-754(ra) # 80001262 <uvmunmap>
++    8000155c:	bfd9                	j	80001532 <uvmfree+0xe>
++
++000000008000155e <uvmcopy>:
++  pte_t *pte;
++  uint64 pa, i;
++  uint flags;
++  char *mem;
++
++  for(i = 0; i < sz; i += PGSIZE){
++    8000155e:	c679                	beqz	a2,8000162c <uvmcopy+0xce>
++{
++    80001560:	715d                	addi	sp,sp,-80
++    80001562:	e486                	sd	ra,72(sp)
++    80001564:	e0a2                	sd	s0,64(sp)
++    80001566:	fc26                	sd	s1,56(sp)
++    80001568:	f84a                	sd	s2,48(sp)
++    8000156a:	f44e                	sd	s3,40(sp)
++    8000156c:	f052                	sd	s4,32(sp)
++    8000156e:	ec56                	sd	s5,24(sp)
++    80001570:	e85a                	sd	s6,16(sp)
++    80001572:	e45e                	sd	s7,8(sp)
++    80001574:	0880                	addi	s0,sp,80
++    80001576:	8b2a                	mv	s6,a0
++    80001578:	8aae                	mv	s5,a1
++    8000157a:	8a32                	mv	s4,a2
++  for(i = 0; i < sz; i += PGSIZE){
++    8000157c:	4981                	li	s3,0
++    if((pte = walk(old, i, 0)) == 0)
++    8000157e:	4601                	li	a2,0
++    80001580:	85ce                	mv	a1,s3
++    80001582:	855a                	mv	a0,s6
++    80001584:	00000097          	auipc	ra,0x0
++    80001588:	a30080e7          	jalr	-1488(ra) # 80000fb4 <walk>
++    8000158c:	c531                	beqz	a0,800015d8 <uvmcopy+0x7a>
++      panic("uvmcopy: pte should exist");
++    if((*pte & PTE_V) == 0)
++    8000158e:	6118                	ld	a4,0(a0)
++    80001590:	00177793          	andi	a5,a4,1
++    80001594:	cbb1                	beqz	a5,800015e8 <uvmcopy+0x8a>
++      panic("uvmcopy: page not present");
++    pa = PTE2PA(*pte);
++    80001596:	00a75593          	srli	a1,a4,0xa
++    8000159a:	00c59b93          	slli	s7,a1,0xc
++    flags = PTE_FLAGS(*pte);
++    8000159e:	3ff77493          	andi	s1,a4,1023
++    if((mem = kalloc()) == 0)
++    800015a2:	fffff097          	auipc	ra,0xfffff
++    800015a6:	53e080e7          	jalr	1342(ra) # 80000ae0 <kalloc>
++    800015aa:	892a                	mv	s2,a0
++    800015ac:	c939                	beqz	a0,80001602 <uvmcopy+0xa4>
++      goto err;
++    memmove(mem, (char*)pa, PGSIZE);
++    800015ae:	6605                	lui	a2,0x1
++    800015b0:	85de                	mv	a1,s7
++    800015b2:	fffff097          	auipc	ra,0xfffff
++    800015b6:	776080e7          	jalr	1910(ra) # 80000d28 <memmove>
++    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
++    800015ba:	8726                	mv	a4,s1
++    800015bc:	86ca                	mv	a3,s2
++    800015be:	6605                	lui	a2,0x1
++    800015c0:	85ce                	mv	a1,s3
++    800015c2:	8556                	mv	a0,s5
++    800015c4:	00000097          	auipc	ra,0x0
++    800015c8:	ad8080e7          	jalr	-1320(ra) # 8000109c <mappages>
++    800015cc:	e515                	bnez	a0,800015f8 <uvmcopy+0x9a>
++  for(i = 0; i < sz; i += PGSIZE){
++    800015ce:	6785                	lui	a5,0x1
++    800015d0:	99be                	add	s3,s3,a5
++    800015d2:	fb49e6e3          	bltu	s3,s4,8000157e <uvmcopy+0x20>
++    800015d6:	a081                	j	80001616 <uvmcopy+0xb8>
++      panic("uvmcopy: pte should exist");
++    800015d8:	00007517          	auipc	a0,0x7
++    800015dc:	ba050513          	addi	a0,a0,-1120 # 80008178 <digits+0x148>
++    800015e0:	fffff097          	auipc	ra,0xfffff
++    800015e4:	f5a080e7          	jalr	-166(ra) # 8000053a <panic>
++      panic("uvmcopy: page not present");
++    800015e8:	00007517          	auipc	a0,0x7
++    800015ec:	bb050513          	addi	a0,a0,-1104 # 80008198 <digits+0x168>
++    800015f0:	fffff097          	auipc	ra,0xfffff
++    800015f4:	f4a080e7          	jalr	-182(ra) # 8000053a <panic>
++      kfree(mem);
++    800015f8:	854a                	mv	a0,s2
++    800015fa:	fffff097          	auipc	ra,0xfffff
++    800015fe:	3e8080e7          	jalr	1000(ra) # 800009e2 <kfree>
++    }
++  }
++  return 0;
++
++ err:
++  uvmunmap(new, 0, i / PGSIZE, 1);
++    80001602:	4685                	li	a3,1
++    80001604:	00c9d613          	srli	a2,s3,0xc
++    80001608:	4581                	li	a1,0
++    8000160a:	8556                	mv	a0,s5
++    8000160c:	00000097          	auipc	ra,0x0
++    80001610:	c56080e7          	jalr	-938(ra) # 80001262 <uvmunmap>
++  return -1;
++    80001614:	557d                	li	a0,-1
++}
++    80001616:	60a6                	ld	ra,72(sp)
++    80001618:	6406                	ld	s0,64(sp)
++    8000161a:	74e2                	ld	s1,56(sp)
++    8000161c:	7942                	ld	s2,48(sp)
++    8000161e:	79a2                	ld	s3,40(sp)
++    80001620:	7a02                	ld	s4,32(sp)
++    80001622:	6ae2                	ld	s5,24(sp)
++    80001624:	6b42                	ld	s6,16(sp)
++    80001626:	6ba2                	ld	s7,8(sp)
++    80001628:	6161                	addi	sp,sp,80
++    8000162a:	8082                	ret
++  return 0;
++    8000162c:	4501                	li	a0,0
++}
++    8000162e:	8082                	ret
++
++0000000080001630 <uvmclear>:
++
++// mark a PTE invalid for user access.
++// used by exec for the user stack guard page.
++void
++uvmclear(pagetable_t pagetable, uint64 va)
++{
++    80001630:	1141                	addi	sp,sp,-16
++    80001632:	e406                	sd	ra,8(sp)
++    80001634:	e022                	sd	s0,0(sp)
++    80001636:	0800                	addi	s0,sp,16
++  pte_t *pte;
++  
++  pte = walk(pagetable, va, 0);
++    80001638:	4601                	li	a2,0
++    8000163a:	00000097          	auipc	ra,0x0
++    8000163e:	97a080e7          	jalr	-1670(ra) # 80000fb4 <walk>
++  if(pte == 0)
++    80001642:	c901                	beqz	a0,80001652 <uvmclear+0x22>
++    panic("uvmclear");
++  *pte &= ~PTE_U;
++    80001644:	611c                	ld	a5,0(a0)
++    80001646:	9bbd                	andi	a5,a5,-17
++    80001648:	e11c                	sd	a5,0(a0)
++}
++    8000164a:	60a2                	ld	ra,8(sp)
++    8000164c:	6402                	ld	s0,0(sp)
++    8000164e:	0141                	addi	sp,sp,16
++    80001650:	8082                	ret
++    panic("uvmclear");
++    80001652:	00007517          	auipc	a0,0x7
++    80001656:	b6650513          	addi	a0,a0,-1178 # 800081b8 <digits+0x188>
++    8000165a:	fffff097          	auipc	ra,0xfffff
++    8000165e:	ee0080e7          	jalr	-288(ra) # 8000053a <panic>
++
++0000000080001662 <copyout>:
++int
++copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
++{
++  uint64 n, va0, pa0;
++
++  while(len > 0){
++    80001662:	c6bd                	beqz	a3,800016d0 <copyout+0x6e>
++{
++    80001664:	715d                	addi	sp,sp,-80
++    80001666:	e486                	sd	ra,72(sp)
++    80001668:	e0a2                	sd	s0,64(sp)
++    8000166a:	fc26                	sd	s1,56(sp)
++    8000166c:	f84a                	sd	s2,48(sp)
++    8000166e:	f44e                	sd	s3,40(sp)
++    80001670:	f052                	sd	s4,32(sp)
++    80001672:	ec56                	sd	s5,24(sp)
++    80001674:	e85a                	sd	s6,16(sp)
++    80001676:	e45e                	sd	s7,8(sp)
++    80001678:	e062                	sd	s8,0(sp)
++    8000167a:	0880                	addi	s0,sp,80
++    8000167c:	8b2a                	mv	s6,a0
++    8000167e:	8c2e                	mv	s8,a1
++    80001680:	8a32                	mv	s4,a2
++    80001682:	89b6                	mv	s3,a3
++    va0 = PGROUNDDOWN(dstva);
++    80001684:	7bfd                	lui	s7,0xfffff
++    pa0 = walkaddr(pagetable, va0);
++    if(pa0 == 0)
++      return -1;
++    n = PGSIZE - (dstva - va0);
++    80001686:	6a85                	lui	s5,0x1
++    80001688:	a015                	j	800016ac <copyout+0x4a>
++    if(n > len)
++      n = len;
++    memmove((void *)(pa0 + (dstva - va0)), src, n);
++    8000168a:	9562                	add	a0,a0,s8
++    8000168c:	0004861b          	sext.w	a2,s1
++    80001690:	85d2                	mv	a1,s4
++    80001692:	41250533          	sub	a0,a0,s2
++    80001696:	fffff097          	auipc	ra,0xfffff
++    8000169a:	692080e7          	jalr	1682(ra) # 80000d28 <memmove>
++
++    len -= n;
++    8000169e:	409989b3          	sub	s3,s3,s1
++    src += n;
++    800016a2:	9a26                	add	s4,s4,s1
++    dstva = va0 + PGSIZE;
++    800016a4:	01590c33          	add	s8,s2,s5
++  while(len > 0){
++    800016a8:	02098263          	beqz	s3,800016cc <copyout+0x6a>
++    va0 = PGROUNDDOWN(dstva);
++    800016ac:	017c7933          	and	s2,s8,s7
++    pa0 = walkaddr(pagetable, va0);
++    800016b0:	85ca                	mv	a1,s2
++    800016b2:	855a                	mv	a0,s6
++    800016b4:	00000097          	auipc	ra,0x0
++    800016b8:	9a6080e7          	jalr	-1626(ra) # 8000105a <walkaddr>
++    if(pa0 == 0)
++    800016bc:	cd01                	beqz	a0,800016d4 <copyout+0x72>
++    n = PGSIZE - (dstva - va0);
++    800016be:	418904b3          	sub	s1,s2,s8
++    800016c2:	94d6                	add	s1,s1,s5
++    800016c4:	fc99f3e3          	bgeu	s3,s1,8000168a <copyout+0x28>
++    800016c8:	84ce                	mv	s1,s3
++    800016ca:	b7c1                	j	8000168a <copyout+0x28>
++  }
++  return 0;
++    800016cc:	4501                	li	a0,0
++    800016ce:	a021                	j	800016d6 <copyout+0x74>
++    800016d0:	4501                	li	a0,0
++}
++    800016d2:	8082                	ret
++      return -1;
++    800016d4:	557d                	li	a0,-1
++}
++    800016d6:	60a6                	ld	ra,72(sp)
++    800016d8:	6406                	ld	s0,64(sp)
++    800016da:	74e2                	ld	s1,56(sp)
++    800016dc:	7942                	ld	s2,48(sp)
++    800016de:	79a2                	ld	s3,40(sp)
++    800016e0:	7a02                	ld	s4,32(sp)
++    800016e2:	6ae2                	ld	s5,24(sp)
++    800016e4:	6b42                	ld	s6,16(sp)
++    800016e6:	6ba2                	ld	s7,8(sp)
++    800016e8:	6c02                	ld	s8,0(sp)
++    800016ea:	6161                	addi	sp,sp,80
++    800016ec:	8082                	ret
++
++00000000800016ee <copyin>:
++int
++copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
++{
++  uint64 n, va0, pa0;
++
++  while(len > 0){
++    800016ee:	caa5                	beqz	a3,8000175e <copyin+0x70>
++{
++    800016f0:	715d                	addi	sp,sp,-80
++    800016f2:	e486                	sd	ra,72(sp)
++    800016f4:	e0a2                	sd	s0,64(sp)
++    800016f6:	fc26                	sd	s1,56(sp)
++    800016f8:	f84a                	sd	s2,48(sp)
++    800016fa:	f44e                	sd	s3,40(sp)
++    800016fc:	f052                	sd	s4,32(sp)
++    800016fe:	ec56                	sd	s5,24(sp)
++    80001700:	e85a                	sd	s6,16(sp)
++    80001702:	e45e                	sd	s7,8(sp)
++    80001704:	e062                	sd	s8,0(sp)
++    80001706:	0880                	addi	s0,sp,80
++    80001708:	8b2a                	mv	s6,a0
++    8000170a:	8a2e                	mv	s4,a1
++    8000170c:	8c32                	mv	s8,a2
++    8000170e:	89b6                	mv	s3,a3
++    va0 = PGROUNDDOWN(srcva);
++    80001710:	7bfd                	lui	s7,0xfffff
++    pa0 = walkaddr(pagetable, va0);
++    if(pa0 == 0)
++      return -1;
++    n = PGSIZE - (srcva - va0);
++    80001712:	6a85                	lui	s5,0x1
++    80001714:	a01d                	j	8000173a <copyin+0x4c>
++    if(n > len)
++      n = len;
++    memmove(dst, (void *)(pa0 + (srcva - va0)), n);
++    80001716:	018505b3          	add	a1,a0,s8
++    8000171a:	0004861b          	sext.w	a2,s1
++    8000171e:	412585b3          	sub	a1,a1,s2
++    80001722:	8552                	mv	a0,s4
++    80001724:	fffff097          	auipc	ra,0xfffff
++    80001728:	604080e7          	jalr	1540(ra) # 80000d28 <memmove>
++
++    len -= n;
++    8000172c:	409989b3          	sub	s3,s3,s1
++    dst += n;
++    80001730:	9a26                	add	s4,s4,s1
++    srcva = va0 + PGSIZE;
++    80001732:	01590c33          	add	s8,s2,s5
++  while(len > 0){
++    80001736:	02098263          	beqz	s3,8000175a <copyin+0x6c>
++    va0 = PGROUNDDOWN(srcva);
++    8000173a:	017c7933          	and	s2,s8,s7
++    pa0 = walkaddr(pagetable, va0);
++    8000173e:	85ca                	mv	a1,s2
++    80001740:	855a                	mv	a0,s6
++    80001742:	00000097          	auipc	ra,0x0
++    80001746:	918080e7          	jalr	-1768(ra) # 8000105a <walkaddr>
++    if(pa0 == 0)
++    8000174a:	cd01                	beqz	a0,80001762 <copyin+0x74>
++    n = PGSIZE - (srcva - va0);
++    8000174c:	418904b3          	sub	s1,s2,s8
++    80001750:	94d6                	add	s1,s1,s5
++    80001752:	fc99f2e3          	bgeu	s3,s1,80001716 <copyin+0x28>
++    80001756:	84ce                	mv	s1,s3
++    80001758:	bf7d                	j	80001716 <copyin+0x28>
++  }
++  return 0;
++    8000175a:	4501                	li	a0,0
++    8000175c:	a021                	j	80001764 <copyin+0x76>
++    8000175e:	4501                	li	a0,0
++}
++    80001760:	8082                	ret
++      return -1;
++    80001762:	557d                	li	a0,-1
++}
++    80001764:	60a6                	ld	ra,72(sp)
++    80001766:	6406                	ld	s0,64(sp)
++    80001768:	74e2                	ld	s1,56(sp)
++    8000176a:	7942                	ld	s2,48(sp)
++    8000176c:	79a2                	ld	s3,40(sp)
++    8000176e:	7a02                	ld	s4,32(sp)
++    80001770:	6ae2                	ld	s5,24(sp)
++    80001772:	6b42                	ld	s6,16(sp)
++    80001774:	6ba2                	ld	s7,8(sp)
++    80001776:	6c02                	ld	s8,0(sp)
++    80001778:	6161                	addi	sp,sp,80
++    8000177a:	8082                	ret
++
++000000008000177c <copyinstr>:
++copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
++{
++  uint64 n, va0, pa0;
++  int got_null = 0;
++
++  while(got_null == 0 && max > 0){
++    8000177c:	c2dd                	beqz	a3,80001822 <copyinstr+0xa6>
++{
++    8000177e:	715d                	addi	sp,sp,-80
++    80001780:	e486                	sd	ra,72(sp)
++    80001782:	e0a2                	sd	s0,64(sp)
++    80001784:	fc26                	sd	s1,56(sp)
++    80001786:	f84a                	sd	s2,48(sp)
++    80001788:	f44e                	sd	s3,40(sp)
++    8000178a:	f052                	sd	s4,32(sp)
++    8000178c:	ec56                	sd	s5,24(sp)
++    8000178e:	e85a                	sd	s6,16(sp)
++    80001790:	e45e                	sd	s7,8(sp)
++    80001792:	0880                	addi	s0,sp,80
++    80001794:	8a2a                	mv	s4,a0
++    80001796:	8b2e                	mv	s6,a1
++    80001798:	8bb2                	mv	s7,a2
++    8000179a:	84b6                	mv	s1,a3
++    va0 = PGROUNDDOWN(srcva);
++    8000179c:	7afd                	lui	s5,0xfffff
++    pa0 = walkaddr(pagetable, va0);
++    if(pa0 == 0)
++      return -1;
++    n = PGSIZE - (srcva - va0);
++    8000179e:	6985                	lui	s3,0x1
++    800017a0:	a02d                	j	800017ca <copyinstr+0x4e>
++      n = max;
++
++    char *p = (char *) (pa0 + (srcva - va0));
++    while(n > 0){
++      if(*p == '\0'){
++        *dst = '\0';
++    800017a2:	00078023          	sb	zero,0(a5) # 1000 <_entry-0x7ffff000>
++    800017a6:	4785                	li	a5,1
++      dst++;
++    }
++
++    srcva = va0 + PGSIZE;
++  }
++  if(got_null){
++    800017a8:	37fd                	addiw	a5,a5,-1
++    800017aa:	0007851b          	sext.w	a0,a5
++    return 0;
++  } else {
++    return -1;
++  }
++}
++    800017ae:	60a6                	ld	ra,72(sp)
++    800017b0:	6406                	ld	s0,64(sp)
++    800017b2:	74e2                	ld	s1,56(sp)
++    800017b4:	7942                	ld	s2,48(sp)
++    800017b6:	79a2                	ld	s3,40(sp)
++    800017b8:	7a02                	ld	s4,32(sp)
++    800017ba:	6ae2                	ld	s5,24(sp)
++    800017bc:	6b42                	ld	s6,16(sp)
++    800017be:	6ba2                	ld	s7,8(sp)
++    800017c0:	6161                	addi	sp,sp,80
++    800017c2:	8082                	ret
++    srcva = va0 + PGSIZE;
++    800017c4:	01390bb3          	add	s7,s2,s3
++  while(got_null == 0 && max > 0){
++    800017c8:	c8a9                	beqz	s1,8000181a <copyinstr+0x9e>
++    va0 = PGROUNDDOWN(srcva);
++    800017ca:	015bf933          	and	s2,s7,s5
++    pa0 = walkaddr(pagetable, va0);
++    800017ce:	85ca                	mv	a1,s2
++    800017d0:	8552                	mv	a0,s4
++    800017d2:	00000097          	auipc	ra,0x0
++    800017d6:	888080e7          	jalr	-1912(ra) # 8000105a <walkaddr>
++    if(pa0 == 0)
++    800017da:	c131                	beqz	a0,8000181e <copyinstr+0xa2>
++    n = PGSIZE - (srcva - va0);
++    800017dc:	417906b3          	sub	a3,s2,s7
++    800017e0:	96ce                	add	a3,a3,s3
++    800017e2:	00d4f363          	bgeu	s1,a3,800017e8 <copyinstr+0x6c>
++    800017e6:	86a6                	mv	a3,s1
++    char *p = (char *) (pa0 + (srcva - va0));
++    800017e8:	955e                	add	a0,a0,s7
++    800017ea:	41250533          	sub	a0,a0,s2
++    while(n > 0){
++    800017ee:	daf9                	beqz	a3,800017c4 <copyinstr+0x48>
++    800017f0:	87da                	mv	a5,s6
++      if(*p == '\0'){
++    800017f2:	41650633          	sub	a2,a0,s6
++    800017f6:	fff48593          	addi	a1,s1,-1
++    800017fa:	95da                	add	a1,a1,s6
++    while(n > 0){
++    800017fc:	96da                	add	a3,a3,s6
++      if(*p == '\0'){
++    800017fe:	00f60733          	add	a4,a2,a5
++    80001802:	00074703          	lbu	a4,0(a4) # fffffffffffff000 <end+0xffffffff7ffd6000>
++    80001806:	df51                	beqz	a4,800017a2 <copyinstr+0x26>
++        *dst = *p;
++    80001808:	00e78023          	sb	a4,0(a5)
++      --max;
++    8000180c:	40f584b3          	sub	s1,a1,a5
++      dst++;
++    80001810:	0785                	addi	a5,a5,1
++    while(n > 0){
++    80001812:	fed796e3          	bne	a5,a3,800017fe <copyinstr+0x82>
++      dst++;
++    80001816:	8b3e                	mv	s6,a5
++    80001818:	b775                	j	800017c4 <copyinstr+0x48>
++    8000181a:	4781                	li	a5,0
++    8000181c:	b771                	j	800017a8 <copyinstr+0x2c>
++      return -1;
++    8000181e:	557d                	li	a0,-1
++    80001820:	b779                	j	800017ae <copyinstr+0x32>
++  int got_null = 0;
++    80001822:	4781                	li	a5,0
++  if(got_null){
++    80001824:	37fd                	addiw	a5,a5,-1
++    80001826:	0007851b          	sext.w	a0,a5
++}
++    8000182a:	8082                	ret
++
++000000008000182c <seminit>:
++
++int is_valid_sid(int sid);
++
++void
++seminit()
++{
++    8000182c:	7179                	addi	sp,sp,-48
++    8000182e:	f406                	sd	ra,40(sp)
++    80001830:	f022                	sd	s0,32(sp)
++    80001832:	ec26                	sd	s1,24(sp)
++    80001834:	e84a                	sd	s2,16(sp)
++    80001836:	e44e                	sd	s3,8(sp)
++    80001838:	e052                	sd	s4,0(sp)
++    8000183a:	1800                	addi	s0,sp,48
++  struct sem *s;
++  for(s = sem; s < sem + NSEM; s++){
++    8000183c:	00010497          	auipc	s1,0x10
++    80001840:	a6448493          	addi	s1,s1,-1436 # 800112a0 <sem>
++    initlock(&s->lock, "semlock");
++    80001844:	00007a17          	auipc	s4,0x7
++    80001848:	984a0a13          	addi	s4,s4,-1660 # 800081c8 <digits+0x198>
++    s->key = -1;
++    8000184c:	59fd                	li	s3,-1
++  for(s = sem; s < sem + NSEM; s++){
++    8000184e:	00011917          	auipc	s2,0x11
++    80001852:	9f290913          	addi	s2,s2,-1550 # 80012240 <mlf_lock>
++    initlock(&s->lock, "semlock");
++    80001856:	85d2                	mv	a1,s4
++    80001858:	8526                	mv	a0,s1
++    8000185a:	fffff097          	auipc	ra,0xfffff
++    8000185e:	2e6080e7          	jalr	742(ra) # 80000b40 <initlock>
++    s->key = -1;
++    80001862:	0134ae23          	sw	s3,28(s1)
++  for(s = sem; s < sem + NSEM; s++){
++    80001866:	02848493          	addi	s1,s1,40
++    8000186a:	ff2496e3          	bne	s1,s2,80001856 <seminit+0x2a>
++  }
++}
++    8000186e:	70a2                	ld	ra,40(sp)
++    80001870:	7402                	ld	s0,32(sp)
++    80001872:	64e2                	ld	s1,24(sp)
++    80001874:	6942                	ld	s2,16(sp)
++    80001876:	69a2                	ld	s3,8(sp)
++    80001878:	6a02                	ld	s4,0(sp)
++    8000187a:	6145                	addi	sp,sp,48
++    8000187c:	8082                	ret
++
++000000008000187e <semget>:
++
++int 
++semget(int key, int init_value)
++{
++    8000187e:	7139                	addi	sp,sp,-64
++    80001880:	fc06                	sd	ra,56(sp)
++    80001882:	f822                	sd	s0,48(sp)
++    80001884:	f426                	sd	s1,40(sp)
++    80001886:	f04a                	sd	s2,32(sp)
++    80001888:	ec4e                	sd	s3,24(sp)
++    8000188a:	e852                	sd	s4,16(sp)
++    8000188c:	e456                	sd	s5,8(sp)
++    8000188e:	e05a                	sd	s6,0(sp)
++    80001890:	0080                	addi	s0,sp,64
++    80001892:	892a                	mv	s2,a0
++    80001894:	8b2e                	mv	s6,a1
++  struct sem *s;
++  struct sem *save_free = 0;
++  
++
++  int sid = get_sid();
++    80001896:	00001097          	auipc	ra,0x1
++    8000189a:	23a080e7          	jalr	570(ra) # 80002ad0 <get_sid>
++    8000189e:	8aaa                	mv	s5,a0
++  if(sid == -1){
++    800018a0:	57fd                	li	a5,-1
++    800018a2:	04f50463          	beq	a0,a5,800018ea <semget+0x6c>
++  struct sem *save_free = 0;
++    800018a6:	4981                	li	s3,0
++    return -1;
++  }
++
++  //Searching the key in all semaphores
++  for(s = sem; s < sem + NSEM; s++){
++    800018a8:	00010497          	auipc	s1,0x10
++    800018ac:	9f848493          	addi	s1,s1,-1544 # 800112a0 <sem>
++    800018b0:	00011a17          	auipc	s4,0x11
++    800018b4:	990a0a13          	addi	s4,s4,-1648 # 80012240 <mlf_lock>
++    800018b8:	a8a9                	j	80001912 <semget+0x94>
++  
++  // The key was found
++  found:
++
++    // If the semaphore with the key was found, and one semaphore was saved, then free it.
++    if(save_free != 0){
++    800018ba:	00098763          	beqz	s3,800018c8 <semget+0x4a>
++      release(&save_free->lock);
++    800018be:	854e                	mv	a0,s3
++    800018c0:	fffff097          	auipc	ra,0xfffff
++    800018c4:	3c4080e7          	jalr	964(ra) # 80000c84 <release>
++    }
++
++    // Increment the ref count in the semaphore
++    s->ref_count++;
++    800018c8:	509c                	lw	a5,32(s1)
++    800018ca:	2785                	addiw	a5,a5,1
++    800018cc:	d09c                	sw	a5,32(s1)
++
++    // If there's an empty position then add the semaphore to the process' semaphore table
++    myproc()->osem[sid] = s;
++    800018ce:	00000097          	auipc	ra,0x0
++    800018d2:	4a8080e7          	jalr	1192(ra) # 80001d76 <myproc>
++    800018d6:	02aa8793          	addi	a5,s5,42 # fffffffffffff02a <end+0xffffffff7ffd602a>
++    800018da:	078e                	slli	a5,a5,0x3
++    800018dc:	953e                	add	a0,a0,a5
++    800018de:	e104                	sd	s1,0(a0)
++    release(&s->lock);
++    800018e0:	8526                	mv	a0,s1
++    800018e2:	fffff097          	auipc	ra,0xfffff
++    800018e6:	3a2080e7          	jalr	930(ra) # 80000c84 <release>
++    return sid;
++}
++    800018ea:	8556                	mv	a0,s5
++    800018ec:	70e2                	ld	ra,56(sp)
++    800018ee:	7442                	ld	s0,48(sp)
++    800018f0:	74a2                	ld	s1,40(sp)
++    800018f2:	7902                	ld	s2,32(sp)
++    800018f4:	69e2                	ld	s3,24(sp)
++    800018f6:	6a42                	ld	s4,16(sp)
++    800018f8:	6aa2                	ld	s5,8(sp)
++    800018fa:	6b02                	ld	s6,0(sp)
++    800018fc:	6121                	addi	sp,sp,64
++    800018fe:	8082                	ret
++      release(&s->lock);
++    80001900:	8526                	mv	a0,s1
++    80001902:	fffff097          	auipc	ra,0xfffff
++    80001906:	382080e7          	jalr	898(ra) # 80000c84 <release>
++  for(s = sem; s < sem + NSEM; s++){
++    8000190a:	02848493          	addi	s1,s1,40
++    8000190e:	03448063          	beq	s1,s4,8000192e <semget+0xb0>
++    acquire(&s->lock);
++    80001912:	8526                	mv	a0,s1
++    80001914:	fffff097          	auipc	ra,0xfffff
++    80001918:	2bc080e7          	jalr	700(ra) # 80000bd0 <acquire>
++    if(s->key == key){
++    8000191c:	4cdc                	lw	a5,28(s1)
++    8000191e:	f9278ee3          	beq	a5,s2,800018ba <semget+0x3c>
++    if(s->ref_count == 0 && save_free == 0){
++    80001922:	509c                	lw	a5,32(s1)
++    80001924:	fff1                	bnez	a5,80001900 <semget+0x82>
++    80001926:	fc099de3          	bnez	s3,80001900 <semget+0x82>
++    8000192a:	89a6                	mv	s3,s1
++    8000192c:	bff9                	j	8000190a <semget+0x8c>
++  if(save_free != 0 ){
++    8000192e:	02098363          	beqz	s3,80001954 <semget+0xd6>
++    save_free->key = key;
++    80001932:	0129ae23          	sw	s2,28(s3) # 101c <_entry-0x7fffefe4>
++    save_free->value = init_value;
++    80001936:	0169ac23          	sw	s6,24(s3)
++    save_free->ref_count = 1;
++    8000193a:	4785                	li	a5,1
++    8000193c:	02f9a023          	sw	a5,32(s3)
++    myproc()->osem[sid] = save_free;
++    80001940:	00000097          	auipc	ra,0x0
++    80001944:	436080e7          	jalr	1078(ra) # 80001d76 <myproc>
++    80001948:	02aa8793          	addi	a5,s5,42
++    8000194c:	078e                	slli	a5,a5,0x3
++    8000194e:	97aa                	add	a5,a5,a0
++    80001950:	0137b023          	sd	s3,0(a5)
++  release(&save_free->lock);
++    80001954:	854e                	mv	a0,s3
++    80001956:	fffff097          	auipc	ra,0xfffff
++    8000195a:	32e080e7          	jalr	814(ra) # 80000c84 <release>
++  return sid;
++    8000195e:	b771                	j	800018ea <semget+0x6c>
++
++0000000080001960 <is_valid_sid>:
++  return 0;
++}
++
++int
++is_valid_sid(int sid){
++  return sid >= 0 && sid <= NOSEM && myproc()->osem[sid];
++    80001960:	47c1                	li	a5,16
++    80001962:	00a7f463          	bgeu	a5,a0,8000196a <is_valid_sid+0xa>
++    80001966:	4501                	li	a0,0
++}
++    80001968:	8082                	ret
++is_valid_sid(int sid){
++    8000196a:	1101                	addi	sp,sp,-32
++    8000196c:	ec06                	sd	ra,24(sp)
++    8000196e:	e822                	sd	s0,16(sp)
++    80001970:	e426                	sd	s1,8(sp)
++    80001972:	1000                	addi	s0,sp,32
++    80001974:	84aa                	mv	s1,a0
++  return sid >= 0 && sid <= NOSEM && myproc()->osem[sid];
++    80001976:	00000097          	auipc	ra,0x0
++    8000197a:	400080e7          	jalr	1024(ra) # 80001d76 <myproc>
++    8000197e:	02a48493          	addi	s1,s1,42
++    80001982:	048e                	slli	s1,s1,0x3
++    80001984:	9526                	add	a0,a0,s1
++    80001986:	6108                	ld	a0,0(a0)
++    80001988:	00a03533          	snez	a0,a0
++}
++    8000198c:	60e2                	ld	ra,24(sp)
++    8000198e:	6442                	ld	s0,16(sp)
++    80001990:	64a2                	ld	s1,8(sp)
++    80001992:	6105                	addi	sp,sp,32
++    80001994:	8082                	ret
++
++0000000080001996 <semclose>:
++{
++    80001996:	1101                	addi	sp,sp,-32
++    80001998:	ec06                	sd	ra,24(sp)
++    8000199a:	e822                	sd	s0,16(sp)
++    8000199c:	e426                	sd	s1,8(sp)
++    8000199e:	1000                	addi	s0,sp,32
++    800019a0:	84aa                	mv	s1,a0
++  if(!is_valid_sid(sid)){
++    800019a2:	00000097          	auipc	ra,0x0
++    800019a6:	fbe080e7          	jalr	-66(ra) # 80001960 <is_valid_sid>
++    800019aa:	cd31                	beqz	a0,80001a06 <semclose+0x70>
++  acquire(&(myproc()->osem[sid]->lock));
++    800019ac:	00000097          	auipc	ra,0x0
++    800019b0:	3ca080e7          	jalr	970(ra) # 80001d76 <myproc>
++    800019b4:	02a48493          	addi	s1,s1,42
++    800019b8:	048e                	slli	s1,s1,0x3
++    800019ba:	9526                	add	a0,a0,s1
++    800019bc:	6108                	ld	a0,0(a0)
++    800019be:	fffff097          	auipc	ra,0xfffff
++    800019c2:	212080e7          	jalr	530(ra) # 80000bd0 <acquire>
++  myproc()->osem[sid]->ref_count--;
++    800019c6:	00000097          	auipc	ra,0x0
++    800019ca:	3b0080e7          	jalr	944(ra) # 80001d76 <myproc>
++    800019ce:	9526                	add	a0,a0,s1
++    800019d0:	6118                	ld	a4,0(a0)
++    800019d2:	531c                	lw	a5,32(a4)
++    800019d4:	37fd                	addiw	a5,a5,-1
++    800019d6:	d31c                	sw	a5,32(a4)
++  release(&(myproc()->osem[sid]->lock));
++    800019d8:	00000097          	auipc	ra,0x0
++    800019dc:	39e080e7          	jalr	926(ra) # 80001d76 <myproc>
++    800019e0:	9526                	add	a0,a0,s1
++    800019e2:	6108                	ld	a0,0(a0)
++    800019e4:	fffff097          	auipc	ra,0xfffff
++    800019e8:	2a0080e7          	jalr	672(ra) # 80000c84 <release>
++  myproc()->osem[sid] = 0;
++    800019ec:	00000097          	auipc	ra,0x0
++    800019f0:	38a080e7          	jalr	906(ra) # 80001d76 <myproc>
++    800019f4:	9526                	add	a0,a0,s1
++    800019f6:	00053023          	sd	zero,0(a0)
++  return 0;
++    800019fa:	4501                	li	a0,0
++}
++    800019fc:	60e2                	ld	ra,24(sp)
++    800019fe:	6442                	ld	s0,16(sp)
++    80001a00:	64a2                	ld	s1,8(sp)
++    80001a02:	6105                	addi	sp,sp,32
++    80001a04:	8082                	ret
++    return -1;
++    80001a06:	557d                	li	a0,-1
++    80001a08:	bfd5                	j	800019fc <semclose+0x66>
++
++0000000080001a0a <semdown>:
++{
++    80001a0a:	1101                	addi	sp,sp,-32
++    80001a0c:	ec06                	sd	ra,24(sp)
++    80001a0e:	e822                	sd	s0,16(sp)
++    80001a10:	e426                	sd	s1,8(sp)
++    80001a12:	e04a                	sd	s2,0(sp)
++    80001a14:	1000                	addi	s0,sp,32
++    80001a16:	84aa                	mv	s1,a0
++  if(!is_valid_sid(sid)){
++    80001a18:	00000097          	auipc	ra,0x0
++    80001a1c:	f48080e7          	jalr	-184(ra) # 80001960 <is_valid_sid>
++    80001a20:	c141                	beqz	a0,80001aa0 <semdown+0x96>
++  acquire(&(myproc()->osem[sid]->lock));
++    80001a22:	00000097          	auipc	ra,0x0
++    80001a26:	354080e7          	jalr	852(ra) # 80001d76 <myproc>
++    80001a2a:	02a48913          	addi	s2,s1,42
++    80001a2e:	090e                	slli	s2,s2,0x3
++    80001a30:	954a                	add	a0,a0,s2
++    80001a32:	6108                	ld	a0,0(a0)
++    80001a34:	fffff097          	auipc	ra,0xfffff
++    80001a38:	19c080e7          	jalr	412(ra) # 80000bd0 <acquire>
++  if(myproc()->osem[sid]->value >= 1){
++    80001a3c:	00000097          	auipc	ra,0x0
++    80001a40:	33a080e7          	jalr	826(ra) # 80001d76 <myproc>
++    80001a44:	954a                	add	a0,a0,s2
++    80001a46:	611c                	ld	a5,0(a0)
++    80001a48:	4f9c                	lw	a5,24(a5)
++    80001a4a:	02f05c63          	blez	a5,80001a82 <semdown+0x78>
++    myproc()->osem[sid]->value--;
++    80001a4e:	00000097          	auipc	ra,0x0
++    80001a52:	328080e7          	jalr	808(ra) # 80001d76 <myproc>
++    80001a56:	954a                	add	a0,a0,s2
++    80001a58:	6118                	ld	a4,0(a0)
++    80001a5a:	4f1c                	lw	a5,24(a4)
++    80001a5c:	37fd                	addiw	a5,a5,-1
++    80001a5e:	cf1c                	sw	a5,24(a4)
++    release(&(myproc()->osem[sid]->lock));
++    80001a60:	00000097          	auipc	ra,0x0
++    80001a64:	316080e7          	jalr	790(ra) # 80001d76 <myproc>
++    80001a68:	954a                	add	a0,a0,s2
++    80001a6a:	6108                	ld	a0,0(a0)
++    80001a6c:	fffff097          	auipc	ra,0xfffff
++    80001a70:	218080e7          	jalr	536(ra) # 80000c84 <release>
++    return 0;
++    80001a74:	4501                	li	a0,0
++}
++    80001a76:	60e2                	ld	ra,24(sp)
++    80001a78:	6442                	ld	s0,16(sp)
++    80001a7a:	64a2                	ld	s1,8(sp)
++    80001a7c:	6902                	ld	s2,0(sp)
++    80001a7e:	6105                	addi	sp,sp,32
++    80001a80:	8082                	ret
++  release(&(myproc()->osem[sid]->lock));
++    80001a82:	00000097          	auipc	ra,0x0
++    80001a86:	2f4080e7          	jalr	756(ra) # 80001d76 <myproc>
++    80001a8a:	02a48493          	addi	s1,s1,42
++    80001a8e:	048e                	slli	s1,s1,0x3
++    80001a90:	9526                	add	a0,a0,s1
++    80001a92:	6108                	ld	a0,0(a0)
++    80001a94:	fffff097          	auipc	ra,0xfffff
++    80001a98:	1f0080e7          	jalr	496(ra) # 80000c84 <release>
++  return -1;
++    80001a9c:	557d                	li	a0,-1
++    80001a9e:	bfe1                	j	80001a76 <semdown+0x6c>
++    return -1;
++    80001aa0:	557d                	li	a0,-1
++    80001aa2:	bfd1                	j	80001a76 <semdown+0x6c>
++
++0000000080001aa4 <semup>:
++{
++    80001aa4:	1101                	addi	sp,sp,-32
++    80001aa6:	ec06                	sd	ra,24(sp)
++    80001aa8:	e822                	sd	s0,16(sp)
++    80001aaa:	e426                	sd	s1,8(sp)
++    80001aac:	1000                	addi	s0,sp,32
++    80001aae:	84aa                	mv	s1,a0
++  if(!is_valid_sid(sid)){
++    80001ab0:	00000097          	auipc	ra,0x0
++    80001ab4:	eb0080e7          	jalr	-336(ra) # 80001960 <is_valid_sid>
++    80001ab8:	c539                	beqz	a0,80001b06 <semup+0x62>
++  acquire(&(myproc()->osem[sid]->lock));
++    80001aba:	00000097          	auipc	ra,0x0
++    80001abe:	2bc080e7          	jalr	700(ra) # 80001d76 <myproc>
++    80001ac2:	02a48493          	addi	s1,s1,42
++    80001ac6:	048e                	slli	s1,s1,0x3
++    80001ac8:	9526                	add	a0,a0,s1
++    80001aca:	6108                	ld	a0,0(a0)
++    80001acc:	fffff097          	auipc	ra,0xfffff
++    80001ad0:	104080e7          	jalr	260(ra) # 80000bd0 <acquire>
++  myproc()->osem[sid]->value++;
++    80001ad4:	00000097          	auipc	ra,0x0
++    80001ad8:	2a2080e7          	jalr	674(ra) # 80001d76 <myproc>
++    80001adc:	9526                	add	a0,a0,s1
++    80001ade:	6118                	ld	a4,0(a0)
++    80001ae0:	4f1c                	lw	a5,24(a4)
++    80001ae2:	2785                	addiw	a5,a5,1
++    80001ae4:	cf1c                	sw	a5,24(a4)
++  release(&(myproc()->osem[sid]->lock));
++    80001ae6:	00000097          	auipc	ra,0x0
++    80001aea:	290080e7          	jalr	656(ra) # 80001d76 <myproc>
++    80001aee:	9526                	add	a0,a0,s1
++    80001af0:	6108                	ld	a0,0(a0)
++    80001af2:	fffff097          	auipc	ra,0xfffff
++    80001af6:	192080e7          	jalr	402(ra) # 80000c84 <release>
++  return 0;
++    80001afa:	4501                	li	a0,0
++}
++    80001afc:	60e2                	ld	ra,24(sp)
++    80001afe:	6442                	ld	s0,16(sp)
++    80001b00:	64a2                	ld	s1,8(sp)
++    80001b02:	6105                	addi	sp,sp,32
++    80001b04:	8082                	ret
++    return -1;
++    80001b06:	557d                	li	a0,-1
++    80001b08:	bfd5                	j	80001afc <semup+0x58>
++
++0000000080001b0a <semdup>:
++
++// Increment ref count for e f.
++struct sem*
++semdup(struct sem *s)
++{
++    80001b0a:	1101                	addi	sp,sp,-32
++    80001b0c:	ec06                	sd	ra,24(sp)
++    80001b0e:	e822                	sd	s0,16(sp)
++    80001b10:	e426                	sd	s1,8(sp)
++    80001b12:	1000                	addi	s0,sp,32
++    80001b14:	84aa                	mv	s1,a0
++  acquire(&s->lock);
++    80001b16:	fffff097          	auipc	ra,0xfffff
++    80001b1a:	0ba080e7          	jalr	186(ra) # 80000bd0 <acquire>
++  if(s->ref_count < 1)
++    80001b1e:	509c                	lw	a5,32(s1)
++    80001b20:	00f05f63          	blez	a5,80001b3e <semdup+0x34>
++    panic("semdup");
++  s->ref_count++;
++    80001b24:	2785                	addiw	a5,a5,1
++    80001b26:	d09c                	sw	a5,32(s1)
++  release(&s->lock);
++    80001b28:	8526                	mv	a0,s1
++    80001b2a:	fffff097          	auipc	ra,0xfffff
++    80001b2e:	15a080e7          	jalr	346(ra) # 80000c84 <release>
++  return s;
++}
++    80001b32:	8526                	mv	a0,s1
++    80001b34:	60e2                	ld	ra,24(sp)
++    80001b36:	6442                	ld	s0,16(sp)
++    80001b38:	64a2                	ld	s1,8(sp)
++    80001b3a:	6105                	addi	sp,sp,32
++    80001b3c:	8082                	ret
++    panic("semdup");
++    80001b3e:	00006517          	auipc	a0,0x6
++    80001b42:	69250513          	addi	a0,a0,1682 # 800081d0 <digits+0x1a0>
++    80001b46:	fffff097          	auipc	ra,0xfffff
++    80001b4a:	9f4080e7          	jalr	-1548(ra) # 8000053a <panic>
++
++0000000080001b4e <makerunnable>:
++
++  return pid;
++}
++
++static void
++makerunnable(int level, struct proc *p){
++    80001b4e:	7179                	addi	sp,sp,-48
++    80001b50:	f406                	sd	ra,40(sp)
++    80001b52:	f022                	sd	s0,32(sp)
++    80001b54:	ec26                	sd	s1,24(sp)
++    80001b56:	e84a                	sd	s2,16(sp)
++    80001b58:	e44e                	sd	s3,8(sp)
++    80001b5a:	1800                	addi	s0,sp,48
++    80001b5c:	89aa                	mv	s3,a0
++    80001b5e:	84ae                	mv	s1,a1
++  int holding_status = holding(&mlf_lock);
++    80001b60:	00010517          	auipc	a0,0x10
++    80001b64:	6e050513          	addi	a0,a0,1760 # 80012240 <mlf_lock>
++    80001b68:	fffff097          	auipc	ra,0xfffff
++    80001b6c:	fee080e7          	jalr	-18(ra) # 80000b56 <holding>
++    80001b70:	892a                	mv	s2,a0
++  if(!holding_status){
++    80001b72:	c525                	beqz	a0,80001bda <makerunnable+0x8c>
++    acquire(&mlf_lock);
++  }
++  if(level > MLFLEVELS){
++    80001b74:	87ce                	mv	a5,s3
++    80001b76:	07305b63          	blez	s3,80001bec <makerunnable+0x9e>
++    80001b7a:	0007871b          	sext.w	a4,a5
++    80001b7e:	4691                	li	a3,4
++    80001b80:	00e6d363          	bge	a3,a4,80001b86 <makerunnable+0x38>
++    80001b84:	4791                	li	a5,4
++    80001b86:	0007869b          	sext.w	a3,a5
++    level = MLFLEVELS;
++  }
++  else if(level < 1){
++    level = 1;
++  }
++  if(mlf[level-1].last == 0){
++    80001b8a:	37fd                	addiw	a5,a5,-1
++    80001b8c:	00479613          	slli	a2,a5,0x4
++    80001b90:	00010717          	auipc	a4,0x10
++    80001b94:	6b070713          	addi	a4,a4,1712 # 80012240 <mlf_lock>
++    80001b98:	9732                	add	a4,a4,a2
++    80001b9a:	7318                	ld	a4,32(a4)
++    80001b9c:	cb31                	beqz	a4,80001bf0 <makerunnable+0xa2>
++    mlf[level-1].last = p;
++    mlf[level-1].top = p;
++  }
++  else{
++    struct proc *last = mlf[level-1].last;
++    last->next = p;
++    80001b9e:	1e973823          	sd	s1,496(a4)
++    mlf[level-1].last = p;
++    80001ba2:	0792                	slli	a5,a5,0x4
++    80001ba4:	00010717          	auipc	a4,0x10
++    80001ba8:	69c70713          	addi	a4,a4,1692 # 80012240 <mlf_lock>
++    80001bac:	97ba                	add	a5,a5,a4
++    80001bae:	f384                	sd	s1,32(a5)
++  }
++  p->next = 0;
++    80001bb0:	1e04b823          	sd	zero,496(s1)
++  p->age = ticks;
++    80001bb4:	00007797          	auipc	a5,0x7
++    80001bb8:	47c7a783          	lw	a5,1148(a5) # 80009030 <ticks>
++    80001bbc:	1ef4ae23          	sw	a5,508(s1)
++  p->mlflevel = level;
++    80001bc0:	1ed4ac23          	sw	a3,504(s1)
++  p->state = RUNNABLE;
++    80001bc4:	478d                	li	a5,3
++    80001bc6:	cc9c                	sw	a5,24(s1)
++  if(!holding_status){
++    80001bc8:	02090d63          	beqz	s2,80001c02 <makerunnable+0xb4>
++    release(&mlf_lock);
++  }
++}
++    80001bcc:	70a2                	ld	ra,40(sp)
++    80001bce:	7402                	ld	s0,32(sp)
++    80001bd0:	64e2                	ld	s1,24(sp)
++    80001bd2:	6942                	ld	s2,16(sp)
++    80001bd4:	69a2                	ld	s3,8(sp)
++    80001bd6:	6145                	addi	sp,sp,48
++    80001bd8:	8082                	ret
++    acquire(&mlf_lock);
++    80001bda:	00010517          	auipc	a0,0x10
++    80001bde:	66650513          	addi	a0,a0,1638 # 80012240 <mlf_lock>
++    80001be2:	fffff097          	auipc	ra,0xfffff
++    80001be6:	fee080e7          	jalr	-18(ra) # 80000bd0 <acquire>
++    80001bea:	b769                	j	80001b74 <makerunnable+0x26>
++    80001bec:	4785                	li	a5,1
++    80001bee:	b771                	j	80001b7a <makerunnable+0x2c>
++    mlf[level-1].last = p;
++    80001bf0:	00010717          	auipc	a4,0x10
++    80001bf4:	65070713          	addi	a4,a4,1616 # 80012240 <mlf_lock>
++    80001bf8:	00c707b3          	add	a5,a4,a2
++    80001bfc:	f384                	sd	s1,32(a5)
++    mlf[level-1].top = p;
++    80001bfe:	ef84                	sd	s1,24(a5)
++    80001c00:	bf45                	j	80001bb0 <makerunnable+0x62>
++    release(&mlf_lock);
++    80001c02:	00010517          	auipc	a0,0x10
++    80001c06:	63e50513          	addi	a0,a0,1598 # 80012240 <mlf_lock>
++    80001c0a:	fffff097          	auipc	ra,0xfffff
++    80001c0e:	07a080e7          	jalr	122(ra) # 80000c84 <release>
++}
++    80001c12:	bf6d                	j	80001bcc <makerunnable+0x7e>
++
++0000000080001c14 <proc_mapstacks>:
++proc_mapstacks(pagetable_t kpgtbl) {
++    80001c14:	7139                	addi	sp,sp,-64
++    80001c16:	fc06                	sd	ra,56(sp)
++    80001c18:	f822                	sd	s0,48(sp)
++    80001c1a:	f426                	sd	s1,40(sp)
++    80001c1c:	f04a                	sd	s2,32(sp)
++    80001c1e:	ec4e                	sd	s3,24(sp)
++    80001c20:	e852                	sd	s4,16(sp)
++    80001c22:	e456                	sd	s5,8(sp)
++    80001c24:	0080                	addi	s0,sp,64
++    80001c26:	89aa                	mv	s3,a0
++  for(p = proc; p < &proc[NPROC]; p++) {
++    80001c28:	00011497          	auipc	s1,0x11
++    80001c2c:	aa048493          	addi	s1,s1,-1376 # 800126c8 <proc>
++    uint64 va = KSTACK((int) (p - proc));
++    80001c30:	8a26                	mv	s4,s1
++    80001c32:	04000937          	lui	s2,0x4000
++    80001c36:	197d                	addi	s2,s2,-1 # 3ffffff <_entry-0x7c000001>
++    80001c38:	0932                	slli	s2,s2,0xc
++  for(p = proc; p < &proc[NPROC]; p++) {
++    80001c3a:	00019a97          	auipc	s5,0x19
++    80001c3e:	a8ea8a93          	addi	s5,s5,-1394 # 8001a6c8 <tickslock>
++    char *pa = kalloc();
++    80001c42:	fffff097          	auipc	ra,0xfffff
++    80001c46:	e9e080e7          	jalr	-354(ra) # 80000ae0 <kalloc>
++    80001c4a:	862a                	mv	a2,a0
++    if(pa == 0)
++    80001c4c:	cd0d                	beqz	a0,80001c86 <proc_mapstacks+0x72>
++    uint64 va = KSTACK((int) (p - proc));
++    80001c4e:	414485b3          	sub	a1,s1,s4
++    80001c52:	85a5                	srai	a1,a1,0x9
++    80001c54:	2585                	addiw	a1,a1,1
++    80001c56:	00d5959b          	slliw	a1,a1,0xd
++    kvmmap(kpgtbl, va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
++    80001c5a:	4719                	li	a4,6
++    80001c5c:	6685                	lui	a3,0x1
++    80001c5e:	40b905b3          	sub	a1,s2,a1
++    80001c62:	854e                	mv	a0,s3
++    80001c64:	fffff097          	auipc	ra,0xfffff
++    80001c68:	4d8080e7          	jalr	1240(ra) # 8000113c <kvmmap>
++  for(p = proc; p < &proc[NPROC]; p++) {
++    80001c6c:	20048493          	addi	s1,s1,512
++    80001c70:	fd5499e3          	bne	s1,s5,80001c42 <proc_mapstacks+0x2e>
++}
++    80001c74:	70e2                	ld	ra,56(sp)
++    80001c76:	7442                	ld	s0,48(sp)
++    80001c78:	74a2                	ld	s1,40(sp)
++    80001c7a:	7902                	ld	s2,32(sp)
++    80001c7c:	69e2                	ld	s3,24(sp)
++    80001c7e:	6a42                	ld	s4,16(sp)
++    80001c80:	6aa2                	ld	s5,8(sp)
++    80001c82:	6121                	addi	sp,sp,64
++    80001c84:	8082                	ret
++      panic("kalloc");
++    80001c86:	00006517          	auipc	a0,0x6
++    80001c8a:	55250513          	addi	a0,a0,1362 # 800081d8 <digits+0x1a8>
++    80001c8e:	fffff097          	auipc	ra,0xfffff
++    80001c92:	8ac080e7          	jalr	-1876(ra) # 8000053a <panic>
++
++0000000080001c96 <procinit>:
++{
++    80001c96:	7139                	addi	sp,sp,-64
++    80001c98:	fc06                	sd	ra,56(sp)
++    80001c9a:	f822                	sd	s0,48(sp)
++    80001c9c:	f426                	sd	s1,40(sp)
++    80001c9e:	f04a                	sd	s2,32(sp)
++    80001ca0:	ec4e                	sd	s3,24(sp)
++    80001ca2:	e852                	sd	s4,16(sp)
++    80001ca4:	e456                	sd	s5,8(sp)
++    80001ca6:	0080                	addi	s0,sp,64
++  initlock(&pid_lock, "nextpid");
++    80001ca8:	00006597          	auipc	a1,0x6
++    80001cac:	53858593          	addi	a1,a1,1336 # 800081e0 <digits+0x1b0>
++    80001cb0:	00010517          	auipc	a0,0x10
++    80001cb4:	5e850513          	addi	a0,a0,1512 # 80012298 <pid_lock>
++    80001cb8:	fffff097          	auipc	ra,0xfffff
++    80001cbc:	e88080e7          	jalr	-376(ra) # 80000b40 <initlock>
++  initlock(&wait_lock, "wait_lock");
++    80001cc0:	00006597          	auipc	a1,0x6
++    80001cc4:	52858593          	addi	a1,a1,1320 # 800081e8 <digits+0x1b8>
++    80001cc8:	00010517          	auipc	a0,0x10
++    80001ccc:	5e850513          	addi	a0,a0,1512 # 800122b0 <wait_lock>
++    80001cd0:	fffff097          	auipc	ra,0xfffff
++    80001cd4:	e70080e7          	jalr	-400(ra) # 80000b40 <initlock>
++  initlock(&mlf_lock, "mlf");
++    80001cd8:	00006597          	auipc	a1,0x6
++    80001cdc:	52058593          	addi	a1,a1,1312 # 800081f8 <digits+0x1c8>
++    80001ce0:	00010517          	auipc	a0,0x10
++    80001ce4:	56050513          	addi	a0,a0,1376 # 80012240 <mlf_lock>
++    80001ce8:	fffff097          	auipc	ra,0xfffff
++    80001cec:	e58080e7          	jalr	-424(ra) # 80000b40 <initlock>
++  for(p = proc; p < &proc[NPROC]; p++) {
++    80001cf0:	00011497          	auipc	s1,0x11
++    80001cf4:	9d848493          	addi	s1,s1,-1576 # 800126c8 <proc>
++      initlock(&p->lock, "proc");
++    80001cf8:	00006a17          	auipc	s4,0x6
++    80001cfc:	508a0a13          	addi	s4,s4,1288 # 80008200 <digits+0x1d0>
++      p->kstack = KSTACK((int) (p - proc));
++    80001d00:	89a6                	mv	s3,s1
++    80001d02:	04000937          	lui	s2,0x4000
++    80001d06:	197d                	addi	s2,s2,-1 # 3ffffff <_entry-0x7c000001>
++    80001d08:	0932                	slli	s2,s2,0xc
++  for(p = proc; p < &proc[NPROC]; p++) {
++    80001d0a:	00019a97          	auipc	s5,0x19
++    80001d0e:	9bea8a93          	addi	s5,s5,-1602 # 8001a6c8 <tickslock>
++      initlock(&p->lock, "proc");
++    80001d12:	85d2                	mv	a1,s4
++    80001d14:	8526                	mv	a0,s1
++    80001d16:	fffff097          	auipc	ra,0xfffff
++    80001d1a:	e2a080e7          	jalr	-470(ra) # 80000b40 <initlock>
++      p->kstack = KSTACK((int) (p - proc));
++    80001d1e:	413487b3          	sub	a5,s1,s3
++    80001d22:	87a5                	srai	a5,a5,0x9
++    80001d24:	2785                	addiw	a5,a5,1
++    80001d26:	00d7979b          	slliw	a5,a5,0xd
++    80001d2a:	40f907b3          	sub	a5,s2,a5
++    80001d2e:	e0bc                	sd	a5,64(s1)
++  for(p = proc; p < &proc[NPROC]; p++) {
++    80001d30:	20048493          	addi	s1,s1,512
++    80001d34:	fd549fe3          	bne	s1,s5,80001d12 <procinit+0x7c>
++}
++    80001d38:	70e2                	ld	ra,56(sp)
++    80001d3a:	7442                	ld	s0,48(sp)
++    80001d3c:	74a2                	ld	s1,40(sp)
++    80001d3e:	7902                	ld	s2,32(sp)
++    80001d40:	69e2                	ld	s3,24(sp)
++    80001d42:	6a42                	ld	s4,16(sp)
++    80001d44:	6aa2                	ld	s5,8(sp)
++    80001d46:	6121                	addi	sp,sp,64
++    80001d48:	8082                	ret
++
++0000000080001d4a <cpuid>:
++{
++    80001d4a:	1141                	addi	sp,sp,-16
++    80001d4c:	e422                	sd	s0,8(sp)
++    80001d4e:	0800                	addi	s0,sp,16
++  asm volatile("mv %0, tp" : "=r" (x) );
++    80001d50:	8512                	mv	a0,tp
++}
++    80001d52:	2501                	sext.w	a0,a0
++    80001d54:	6422                	ld	s0,8(sp)
++    80001d56:	0141                	addi	sp,sp,16
++    80001d58:	8082                	ret
++
++0000000080001d5a <mycpu>:
++mycpu(void) {
++    80001d5a:	1141                	addi	sp,sp,-16
++    80001d5c:	e422                	sd	s0,8(sp)
++    80001d5e:	0800                	addi	s0,sp,16
++    80001d60:	8792                	mv	a5,tp
++  struct cpu *c = &cpus[id];
++    80001d62:	2781                	sext.w	a5,a5
++    80001d64:	079e                	slli	a5,a5,0x7
++}
++    80001d66:	00010517          	auipc	a0,0x10
++    80001d6a:	56250513          	addi	a0,a0,1378 # 800122c8 <cpus>
++    80001d6e:	953e                	add	a0,a0,a5
++    80001d70:	6422                	ld	s0,8(sp)
++    80001d72:	0141                	addi	sp,sp,16
++    80001d74:	8082                	ret
++
++0000000080001d76 <myproc>:
++myproc(void) {
++    80001d76:	1101                	addi	sp,sp,-32
++    80001d78:	ec06                	sd	ra,24(sp)
++    80001d7a:	e822                	sd	s0,16(sp)
++    80001d7c:	e426                	sd	s1,8(sp)
++    80001d7e:	1000                	addi	s0,sp,32
++  push_off();
++    80001d80:	fffff097          	auipc	ra,0xfffff
++    80001d84:	e04080e7          	jalr	-508(ra) # 80000b84 <push_off>
++    80001d88:	8792                	mv	a5,tp
++  struct proc *p = c->proc;
++    80001d8a:	2781                	sext.w	a5,a5
++    80001d8c:	079e                	slli	a5,a5,0x7
++    80001d8e:	00010717          	auipc	a4,0x10
++    80001d92:	4b270713          	addi	a4,a4,1202 # 80012240 <mlf_lock>
++    80001d96:	97ba                	add	a5,a5,a4
++    80001d98:	67c4                	ld	s1,136(a5)
++  pop_off();
++    80001d9a:	fffff097          	auipc	ra,0xfffff
++    80001d9e:	e8a080e7          	jalr	-374(ra) # 80000c24 <pop_off>
++}
++    80001da2:	8526                	mv	a0,s1
++    80001da4:	60e2                	ld	ra,24(sp)
++    80001da6:	6442                	ld	s0,16(sp)
++    80001da8:	64a2                	ld	s1,8(sp)
++    80001daa:	6105                	addi	sp,sp,32
++    80001dac:	8082                	ret
++
++0000000080001dae <forkret>:
++
++// A fork child's very first scheduling by scheduler()
++// will swtch to forkret.
++void
++forkret(void)
++{
++    80001dae:	1141                	addi	sp,sp,-16
++    80001db0:	e406                	sd	ra,8(sp)
++    80001db2:	e022                	sd	s0,0(sp)
++    80001db4:	0800                	addi	s0,sp,16
++  static int first = 1;
++
++  // Still holding p->lock from scheduler.
++  release(&myproc()->lock);
++    80001db6:	00000097          	auipc	ra,0x0
++    80001dba:	fc0080e7          	jalr	-64(ra) # 80001d76 <myproc>
++    80001dbe:	fffff097          	auipc	ra,0xfffff
++    80001dc2:	ec6080e7          	jalr	-314(ra) # 80000c84 <release>
++
++  if (first) {
++    80001dc6:	00007797          	auipc	a5,0x7
++    80001dca:	aba7a783          	lw	a5,-1350(a5) # 80008880 <first.1>
++    80001dce:	eb89                	bnez	a5,80001de0 <forkret+0x32>
++    // be run from main().
++    first = 0;
++    fsinit(ROOTDEV);
++  }
++
++  usertrapret();
++    80001dd0:	00001097          	auipc	ra,0x1
++    80001dd4:	de4080e7          	jalr	-540(ra) # 80002bb4 <usertrapret>
++}
++    80001dd8:	60a2                	ld	ra,8(sp)
++    80001dda:	6402                	ld	s0,0(sp)
++    80001ddc:	0141                	addi	sp,sp,16
++    80001dde:	8082                	ret
++    first = 0;
++    80001de0:	00007797          	auipc	a5,0x7
++    80001de4:	aa07a023          	sw	zero,-1376(a5) # 80008880 <first.1>
++    fsinit(ROOTDEV);
++    80001de8:	4505                	li	a0,1
++    80001dea:	00002097          	auipc	ra,0x2
++    80001dee:	ca4080e7          	jalr	-860(ra) # 80003a8e <fsinit>
++    80001df2:	bff9                	j	80001dd0 <forkret+0x22>
++
++0000000080001df4 <allocpid>:
++allocpid() {
++    80001df4:	1101                	addi	sp,sp,-32
++    80001df6:	ec06                	sd	ra,24(sp)
++    80001df8:	e822                	sd	s0,16(sp)
++    80001dfa:	e426                	sd	s1,8(sp)
++    80001dfc:	e04a                	sd	s2,0(sp)
++    80001dfe:	1000                	addi	s0,sp,32
++  acquire(&pid_lock);
++    80001e00:	00010917          	auipc	s2,0x10
++    80001e04:	49890913          	addi	s2,s2,1176 # 80012298 <pid_lock>
++    80001e08:	854a                	mv	a0,s2
++    80001e0a:	fffff097          	auipc	ra,0xfffff
++    80001e0e:	dc6080e7          	jalr	-570(ra) # 80000bd0 <acquire>
++  pid = nextpid;
++    80001e12:	00007797          	auipc	a5,0x7
++    80001e16:	a7278793          	addi	a5,a5,-1422 # 80008884 <nextpid>
++    80001e1a:	4384                	lw	s1,0(a5)
++  nextpid = nextpid + 1;
++    80001e1c:	0014871b          	addiw	a4,s1,1
++    80001e20:	c398                	sw	a4,0(a5)
++  release(&pid_lock);
++    80001e22:	854a                	mv	a0,s2
++    80001e24:	fffff097          	auipc	ra,0xfffff
++    80001e28:	e60080e7          	jalr	-416(ra) # 80000c84 <release>
++}
++    80001e2c:	8526                	mv	a0,s1
++    80001e2e:	60e2                	ld	ra,24(sp)
++    80001e30:	6442                	ld	s0,16(sp)
++    80001e32:	64a2                	ld	s1,8(sp)
++    80001e34:	6902                	ld	s2,0(sp)
++    80001e36:	6105                	addi	sp,sp,32
++    80001e38:	8082                	ret
++
++0000000080001e3a <proc_pagetable>:
++{
++    80001e3a:	1101                	addi	sp,sp,-32
++    80001e3c:	ec06                	sd	ra,24(sp)
++    80001e3e:	e822                	sd	s0,16(sp)
++    80001e40:	e426                	sd	s1,8(sp)
++    80001e42:	e04a                	sd	s2,0(sp)
++    80001e44:	1000                	addi	s0,sp,32
++    80001e46:	892a                	mv	s2,a0
++  pagetable = uvmcreate();
++    80001e48:	fffff097          	auipc	ra,0xfffff
++    80001e4c:	4de080e7          	jalr	1246(ra) # 80001326 <uvmcreate>
++    80001e50:	84aa                	mv	s1,a0
++  if(pagetable == 0)
++    80001e52:	c121                	beqz	a0,80001e92 <proc_pagetable+0x58>
++  if(mappages(pagetable, TRAMPOLINE, PGSIZE,
++    80001e54:	4729                	li	a4,10
++    80001e56:	00005697          	auipc	a3,0x5
++    80001e5a:	1aa68693          	addi	a3,a3,426 # 80007000 <_trampoline>
++    80001e5e:	6605                	lui	a2,0x1
++    80001e60:	040005b7          	lui	a1,0x4000
++    80001e64:	15fd                	addi	a1,a1,-1 # 3ffffff <_entry-0x7c000001>
++    80001e66:	05b2                	slli	a1,a1,0xc
++    80001e68:	fffff097          	auipc	ra,0xfffff
++    80001e6c:	234080e7          	jalr	564(ra) # 8000109c <mappages>
++    80001e70:	02054863          	bltz	a0,80001ea0 <proc_pagetable+0x66>
++  if(mappages(pagetable, TRAPFRAME, PGSIZE,
++    80001e74:	4719                	li	a4,6
++    80001e76:	05893683          	ld	a3,88(s2)
++    80001e7a:	6605                	lui	a2,0x1
++    80001e7c:	020005b7          	lui	a1,0x2000
++    80001e80:	15fd                	addi	a1,a1,-1 # 1ffffff <_entry-0x7e000001>
++    80001e82:	05b6                	slli	a1,a1,0xd
++    80001e84:	8526                	mv	a0,s1
++    80001e86:	fffff097          	auipc	ra,0xfffff
++    80001e8a:	216080e7          	jalr	534(ra) # 8000109c <mappages>
++    80001e8e:	02054163          	bltz	a0,80001eb0 <proc_pagetable+0x76>
++}
++    80001e92:	8526                	mv	a0,s1
++    80001e94:	60e2                	ld	ra,24(sp)
++    80001e96:	6442                	ld	s0,16(sp)
++    80001e98:	64a2                	ld	s1,8(sp)
++    80001e9a:	6902                	ld	s2,0(sp)
++    80001e9c:	6105                	addi	sp,sp,32
++    80001e9e:	8082                	ret
++    uvmfree(pagetable, 0);
++    80001ea0:	4581                	li	a1,0
++    80001ea2:	8526                	mv	a0,s1
++    80001ea4:	fffff097          	auipc	ra,0xfffff
++    80001ea8:	680080e7          	jalr	1664(ra) # 80001524 <uvmfree>
++    return 0;
++    80001eac:	4481                	li	s1,0
++    80001eae:	b7d5                	j	80001e92 <proc_pagetable+0x58>
++    uvmunmap(pagetable, TRAMPOLINE, 1, 0);
++    80001eb0:	4681                	li	a3,0
++    80001eb2:	4605                	li	a2,1
++    80001eb4:	040005b7          	lui	a1,0x4000
++    80001eb8:	15fd                	addi	a1,a1,-1 # 3ffffff <_entry-0x7c000001>
++    80001eba:	05b2                	slli	a1,a1,0xc
++    80001ebc:	8526                	mv	a0,s1
++    80001ebe:	fffff097          	auipc	ra,0xfffff
++    80001ec2:	3a4080e7          	jalr	932(ra) # 80001262 <uvmunmap>
++    uvmfree(pagetable, 0);
++    80001ec6:	4581                	li	a1,0
++    80001ec8:	8526                	mv	a0,s1
++    80001eca:	fffff097          	auipc	ra,0xfffff
++    80001ece:	65a080e7          	jalr	1626(ra) # 80001524 <uvmfree>
++    return 0;
++    80001ed2:	4481                	li	s1,0
++    80001ed4:	bf7d                	j	80001e92 <proc_pagetable+0x58>
++
++0000000080001ed6 <proc_freepagetable>:
++{
++    80001ed6:	1101                	addi	sp,sp,-32
++    80001ed8:	ec06                	sd	ra,24(sp)
++    80001eda:	e822                	sd	s0,16(sp)
++    80001edc:	e426                	sd	s1,8(sp)
++    80001ede:	e04a                	sd	s2,0(sp)
++    80001ee0:	1000                	addi	s0,sp,32
++    80001ee2:	84aa                	mv	s1,a0
++    80001ee4:	892e                	mv	s2,a1
++  uvmunmap(pagetable, TRAMPOLINE, 1, 0);
++    80001ee6:	4681                	li	a3,0
++    80001ee8:	4605                	li	a2,1
++    80001eea:	040005b7          	lui	a1,0x4000
++    80001eee:	15fd                	addi	a1,a1,-1 # 3ffffff <_entry-0x7c000001>
++    80001ef0:	05b2                	slli	a1,a1,0xc
++    80001ef2:	fffff097          	auipc	ra,0xfffff
++    80001ef6:	370080e7          	jalr	880(ra) # 80001262 <uvmunmap>
++  uvmunmap(pagetable, TRAPFRAME, 1, 0);
++    80001efa:	4681                	li	a3,0
++    80001efc:	4605                	li	a2,1
++    80001efe:	020005b7          	lui	a1,0x2000
++    80001f02:	15fd                	addi	a1,a1,-1 # 1ffffff <_entry-0x7e000001>
++    80001f04:	05b6                	slli	a1,a1,0xd
++    80001f06:	8526                	mv	a0,s1
++    80001f08:	fffff097          	auipc	ra,0xfffff
++    80001f0c:	35a080e7          	jalr	858(ra) # 80001262 <uvmunmap>
++  uvmfree(pagetable, sz);
++    80001f10:	85ca                	mv	a1,s2
++    80001f12:	8526                	mv	a0,s1
++    80001f14:	fffff097          	auipc	ra,0xfffff
++    80001f18:	610080e7          	jalr	1552(ra) # 80001524 <uvmfree>
++}
++    80001f1c:	60e2                	ld	ra,24(sp)
++    80001f1e:	6442                	ld	s0,16(sp)
++    80001f20:	64a2                	ld	s1,8(sp)
++    80001f22:	6902                	ld	s2,0(sp)
++    80001f24:	6105                	addi	sp,sp,32
++    80001f26:	8082                	ret
++
++0000000080001f28 <freeproc>:
++{
++    80001f28:	1101                	addi	sp,sp,-32
++    80001f2a:	ec06                	sd	ra,24(sp)
++    80001f2c:	e822                	sd	s0,16(sp)
++    80001f2e:	e426                	sd	s1,8(sp)
++    80001f30:	1000                	addi	s0,sp,32
++    80001f32:	84aa                	mv	s1,a0
++  if(p->trapframe)
++    80001f34:	6d28                	ld	a0,88(a0)
++    80001f36:	c509                	beqz	a0,80001f40 <freeproc+0x18>
++    kfree((void*)p->trapframe);
++    80001f38:	fffff097          	auipc	ra,0xfffff
++    80001f3c:	aaa080e7          	jalr	-1366(ra) # 800009e2 <kfree>
++  p->trapframe = 0;
++    80001f40:	0404bc23          	sd	zero,88(s1)
++  if(p->pagetable)
++    80001f44:	68a8                	ld	a0,80(s1)
++    80001f46:	c511                	beqz	a0,80001f52 <freeproc+0x2a>
++    proc_freepagetable(p->pagetable, p->sz);
++    80001f48:	64ac                	ld	a1,72(s1)
++    80001f4a:	00000097          	auipc	ra,0x0
++    80001f4e:	f8c080e7          	jalr	-116(ra) # 80001ed6 <proc_freepagetable>
++  p->pagetable = 0;
++    80001f52:	0404b823          	sd	zero,80(s1)
++  p->sz = 0;
++    80001f56:	0404b423          	sd	zero,72(s1)
++  p->pid = 0;
++    80001f5a:	0204a823          	sw	zero,48(s1)
++  p->parent = 0;
++    80001f5e:	0204bc23          	sd	zero,56(s1)
++  p->name[0] = 0;
++    80001f62:	1c048c23          	sb	zero,472(s1)
++  p->chan = 0;
++    80001f66:	0204b023          	sd	zero,32(s1)
++  p->killed = 0;
++    80001f6a:	0204a423          	sw	zero,40(s1)
++  p->xstate = 0;
++    80001f6e:	0204a623          	sw	zero,44(s1)
++  p->state = UNUSED;
++    80001f72:	0004ac23          	sw	zero,24(s1)
++}
++    80001f76:	60e2                	ld	ra,24(sp)
++    80001f78:	6442                	ld	s0,16(sp)
++    80001f7a:	64a2                	ld	s1,8(sp)
++    80001f7c:	6105                	addi	sp,sp,32
++    80001f7e:	8082                	ret
++
++0000000080001f80 <allocproc>:
++{
++    80001f80:	1101                	addi	sp,sp,-32
++    80001f82:	ec06                	sd	ra,24(sp)
++    80001f84:	e822                	sd	s0,16(sp)
++    80001f86:	e426                	sd	s1,8(sp)
++    80001f88:	e04a                	sd	s2,0(sp)
++    80001f8a:	1000                	addi	s0,sp,32
++  for(p = proc; p < &proc[NPROC]; p++) {
++    80001f8c:	00010497          	auipc	s1,0x10
++    80001f90:	73c48493          	addi	s1,s1,1852 # 800126c8 <proc>
++    80001f94:	00018917          	auipc	s2,0x18
++    80001f98:	73490913          	addi	s2,s2,1844 # 8001a6c8 <tickslock>
++    acquire(&p->lock);
++    80001f9c:	8526                	mv	a0,s1
++    80001f9e:	fffff097          	auipc	ra,0xfffff
++    80001fa2:	c32080e7          	jalr	-974(ra) # 80000bd0 <acquire>
++    if(p->state == UNUSED) {
++    80001fa6:	4c9c                	lw	a5,24(s1)
++    80001fa8:	cf81                	beqz	a5,80001fc0 <allocproc+0x40>
++      release(&p->lock);
++    80001faa:	8526                	mv	a0,s1
++    80001fac:	fffff097          	auipc	ra,0xfffff
++    80001fb0:	cd8080e7          	jalr	-808(ra) # 80000c84 <release>
++  for(p = proc; p < &proc[NPROC]; p++) {
++    80001fb4:	20048493          	addi	s1,s1,512
++    80001fb8:	ff2492e3          	bne	s1,s2,80001f9c <allocproc+0x1c>
++  return 0;
++    80001fbc:	4481                	li	s1,0
++    80001fbe:	a889                	j	80002010 <allocproc+0x90>
++  p->pid = allocpid();
++    80001fc0:	00000097          	auipc	ra,0x0
++    80001fc4:	e34080e7          	jalr	-460(ra) # 80001df4 <allocpid>
++    80001fc8:	d888                	sw	a0,48(s1)
++  p->state = USED;
++    80001fca:	4785                	li	a5,1
++    80001fcc:	cc9c                	sw	a5,24(s1)
++  if((p->trapframe = (struct trapframe *)kalloc()) == 0){
++    80001fce:	fffff097          	auipc	ra,0xfffff
++    80001fd2:	b12080e7          	jalr	-1262(ra) # 80000ae0 <kalloc>
++    80001fd6:	892a                	mv	s2,a0
++    80001fd8:	eca8                	sd	a0,88(s1)
++    80001fda:	c131                	beqz	a0,8000201e <allocproc+0x9e>
++  p->pagetable = proc_pagetable(p);
++    80001fdc:	8526                	mv	a0,s1
++    80001fde:	00000097          	auipc	ra,0x0
++    80001fe2:	e5c080e7          	jalr	-420(ra) # 80001e3a <proc_pagetable>
++    80001fe6:	892a                	mv	s2,a0
++    80001fe8:	e8a8                	sd	a0,80(s1)
++  if(p->pagetable == 0){
++    80001fea:	c531                	beqz	a0,80002036 <allocproc+0xb6>
++  memset(&p->context, 0, sizeof(p->context));
++    80001fec:	07000613          	li	a2,112
++    80001ff0:	4581                	li	a1,0
++    80001ff2:	06048513          	addi	a0,s1,96
++    80001ff6:	fffff097          	auipc	ra,0xfffff
++    80001ffa:	cd6080e7          	jalr	-810(ra) # 80000ccc <memset>
++  p->context.ra = (uint64)forkret;
++    80001ffe:	00000797          	auipc	a5,0x0
++    80002002:	db078793          	addi	a5,a5,-592 # 80001dae <forkret>
++    80002006:	f0bc                	sd	a5,96(s1)
++  p->context.sp = p->kstack + PGSIZE;
++    80002008:	60bc                	ld	a5,64(s1)
++    8000200a:	6705                	lui	a4,0x1
++    8000200c:	97ba                	add	a5,a5,a4
++    8000200e:	f4bc                	sd	a5,104(s1)
++}
++    80002010:	8526                	mv	a0,s1
++    80002012:	60e2                	ld	ra,24(sp)
++    80002014:	6442                	ld	s0,16(sp)
++    80002016:	64a2                	ld	s1,8(sp)
++    80002018:	6902                	ld	s2,0(sp)
++    8000201a:	6105                	addi	sp,sp,32
++    8000201c:	8082                	ret
++    freeproc(p);
++    8000201e:	8526                	mv	a0,s1
++    80002020:	00000097          	auipc	ra,0x0
++    80002024:	f08080e7          	jalr	-248(ra) # 80001f28 <freeproc>
++    release(&p->lock);
++    80002028:	8526                	mv	a0,s1
++    8000202a:	fffff097          	auipc	ra,0xfffff
++    8000202e:	c5a080e7          	jalr	-934(ra) # 80000c84 <release>
++    return 0;
++    80002032:	84ca                	mv	s1,s2
++    80002034:	bff1                	j	80002010 <allocproc+0x90>
++    freeproc(p);
++    80002036:	8526                	mv	a0,s1
++    80002038:	00000097          	auipc	ra,0x0
++    8000203c:	ef0080e7          	jalr	-272(ra) # 80001f28 <freeproc>
++    release(&p->lock);
++    80002040:	8526                	mv	a0,s1
++    80002042:	fffff097          	auipc	ra,0xfffff
++    80002046:	c42080e7          	jalr	-958(ra) # 80000c84 <release>
++    return 0;
++    8000204a:	84ca                	mv	s1,s2
++    8000204c:	b7d1                	j	80002010 <allocproc+0x90>
++
++000000008000204e <userinit>:
++{
++    8000204e:	1101                	addi	sp,sp,-32
++    80002050:	ec06                	sd	ra,24(sp)
++    80002052:	e822                	sd	s0,16(sp)
++    80002054:	e426                	sd	s1,8(sp)
++    80002056:	1000                	addi	s0,sp,32
++  p = allocproc();
++    80002058:	00000097          	auipc	ra,0x0
++    8000205c:	f28080e7          	jalr	-216(ra) # 80001f80 <allocproc>
++    80002060:	84aa                	mv	s1,a0
++  initproc = p;
++    80002062:	00007797          	auipc	a5,0x7
++    80002066:	fca7b323          	sd	a0,-58(a5) # 80009028 <initproc>
++  uvminit(p->pagetable, initcode, sizeof(initcode));
++    8000206a:	03400613          	li	a2,52
++    8000206e:	00007597          	auipc	a1,0x7
++    80002072:	82258593          	addi	a1,a1,-2014 # 80008890 <initcode>
++    80002076:	6928                	ld	a0,80(a0)
++    80002078:	fffff097          	auipc	ra,0xfffff
++    8000207c:	2dc080e7          	jalr	732(ra) # 80001354 <uvminit>
++  p->sz = PGSIZE;
++    80002080:	6785                	lui	a5,0x1
++    80002082:	e4bc                	sd	a5,72(s1)
++  p->trapframe->epc = 0;      // user program counter
++    80002084:	6cb8                	ld	a4,88(s1)
++    80002086:	00073c23          	sd	zero,24(a4) # 1018 <_entry-0x7fffefe8>
++  p->trapframe->sp = PGSIZE;  // user stack pointer
++    8000208a:	6cb8                	ld	a4,88(s1)
++    8000208c:	fb1c                	sd	a5,48(a4)
++  safestrcpy(p->name, "initcode", sizeof(p->name));
++    8000208e:	4641                	li	a2,16
++    80002090:	00006597          	auipc	a1,0x6
++    80002094:	17858593          	addi	a1,a1,376 # 80008208 <digits+0x1d8>
++    80002098:	1d848513          	addi	a0,s1,472
++    8000209c:	fffff097          	auipc	ra,0xfffff
++    800020a0:	d7a080e7          	jalr	-646(ra) # 80000e16 <safestrcpy>
++  p->cwd = namei("/");
++    800020a4:	00006517          	auipc	a0,0x6
++    800020a8:	17450513          	addi	a0,a0,372 # 80008218 <digits+0x1e8>
++    800020ac:	00002097          	auipc	ra,0x2
++    800020b0:	418080e7          	jalr	1048(ra) # 800044c4 <namei>
++    800020b4:	1ca4b823          	sd	a0,464(s1)
++  makerunnable(1,p);
++    800020b8:	85a6                	mv	a1,s1
++    800020ba:	4505                	li	a0,1
++    800020bc:	00000097          	auipc	ra,0x0
++    800020c0:	a92080e7          	jalr	-1390(ra) # 80001b4e <makerunnable>
++  release(&p->lock);
++    800020c4:	8526                	mv	a0,s1
++    800020c6:	fffff097          	auipc	ra,0xfffff
++    800020ca:	bbe080e7          	jalr	-1090(ra) # 80000c84 <release>
++}
++    800020ce:	60e2                	ld	ra,24(sp)
++    800020d0:	6442                	ld	s0,16(sp)
++    800020d2:	64a2                	ld	s1,8(sp)
++    800020d4:	6105                	addi	sp,sp,32
++    800020d6:	8082                	ret
++
++00000000800020d8 <growproc>:
++{
++    800020d8:	1101                	addi	sp,sp,-32
++    800020da:	ec06                	sd	ra,24(sp)
++    800020dc:	e822                	sd	s0,16(sp)
++    800020de:	e426                	sd	s1,8(sp)
++    800020e0:	e04a                	sd	s2,0(sp)
++    800020e2:	1000                	addi	s0,sp,32
++    800020e4:	84aa                	mv	s1,a0
++  struct proc *p = myproc();
++    800020e6:	00000097          	auipc	ra,0x0
++    800020ea:	c90080e7          	jalr	-880(ra) # 80001d76 <myproc>
++    800020ee:	892a                	mv	s2,a0
++  sz = p->sz;
++    800020f0:	652c                	ld	a1,72(a0)
++    800020f2:	0005879b          	sext.w	a5,a1
++  if(n > 0){
++    800020f6:	00904f63          	bgtz	s1,80002114 <growproc+0x3c>
++  } else if(n < 0){
++    800020fa:	0204cd63          	bltz	s1,80002134 <growproc+0x5c>
++  p->sz = sz;
++    800020fe:	1782                	slli	a5,a5,0x20
++    80002100:	9381                	srli	a5,a5,0x20
++    80002102:	04f93423          	sd	a5,72(s2)
++  return 0;
++    80002106:	4501                	li	a0,0
++}
++    80002108:	60e2                	ld	ra,24(sp)
++    8000210a:	6442                	ld	s0,16(sp)
++    8000210c:	64a2                	ld	s1,8(sp)
++    8000210e:	6902                	ld	s2,0(sp)
++    80002110:	6105                	addi	sp,sp,32
++    80002112:	8082                	ret
++    if((sz = uvmalloc(p->pagetable, sz, sz + n)) == 0) {
++    80002114:	00f4863b          	addw	a2,s1,a5
++    80002118:	1602                	slli	a2,a2,0x20
++    8000211a:	9201                	srli	a2,a2,0x20
++    8000211c:	1582                	slli	a1,a1,0x20
++    8000211e:	9181                	srli	a1,a1,0x20
++    80002120:	6928                	ld	a0,80(a0)
++    80002122:	fffff097          	auipc	ra,0xfffff
++    80002126:	2ec080e7          	jalr	748(ra) # 8000140e <uvmalloc>
++    8000212a:	0005079b          	sext.w	a5,a0
++    8000212e:	fbe1                	bnez	a5,800020fe <growproc+0x26>
++      return -1;
++    80002130:	557d                	li	a0,-1
++    80002132:	bfd9                	j	80002108 <growproc+0x30>
++    sz = uvmdealloc(p->pagetable, sz, sz + n);
++    80002134:	00f4863b          	addw	a2,s1,a5
++    80002138:	1602                	slli	a2,a2,0x20
++    8000213a:	9201                	srli	a2,a2,0x20
++    8000213c:	1582                	slli	a1,a1,0x20
++    8000213e:	9181                	srli	a1,a1,0x20
++    80002140:	6928                	ld	a0,80(a0)
++    80002142:	fffff097          	auipc	ra,0xfffff
++    80002146:	284080e7          	jalr	644(ra) # 800013c6 <uvmdealloc>
++    8000214a:	0005079b          	sext.w	a5,a0
++    8000214e:	bf45                	j	800020fe <growproc+0x26>
++
++0000000080002150 <fork>:
++{
++    80002150:	7139                	addi	sp,sp,-64
++    80002152:	fc06                	sd	ra,56(sp)
++    80002154:	f822                	sd	s0,48(sp)
++    80002156:	f426                	sd	s1,40(sp)
++    80002158:	f04a                	sd	s2,32(sp)
++    8000215a:	ec4e                	sd	s3,24(sp)
++    8000215c:	e852                	sd	s4,16(sp)
++    8000215e:	e456                	sd	s5,8(sp)
++    80002160:	0080                	addi	s0,sp,64
++  struct proc *p = myproc();
++    80002162:	00000097          	auipc	ra,0x0
++    80002166:	c14080e7          	jalr	-1004(ra) # 80001d76 <myproc>
++    8000216a:	8a2a                	mv	s4,a0
++  if((np = allocproc()) == 0){
++    8000216c:	00000097          	auipc	ra,0x0
++    80002170:	e14080e7          	jalr	-492(ra) # 80001f80 <allocproc>
++    80002174:	14050463          	beqz	a0,800022bc <fork+0x16c>
++    80002178:	89aa                	mv	s3,a0
++  if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
++    8000217a:	048a3603          	ld	a2,72(s4)
++    8000217e:	692c                	ld	a1,80(a0)
++    80002180:	050a3503          	ld	a0,80(s4)
++    80002184:	fffff097          	auipc	ra,0xfffff
++    80002188:	3da080e7          	jalr	986(ra) # 8000155e <uvmcopy>
++    8000218c:	04054863          	bltz	a0,800021dc <fork+0x8c>
++  np->sz = p->sz;
++    80002190:	048a3783          	ld	a5,72(s4)
++    80002194:	04f9b423          	sd	a5,72(s3)
++  *(np->trapframe) = *(p->trapframe);
++    80002198:	058a3683          	ld	a3,88(s4)
++    8000219c:	87b6                	mv	a5,a3
++    8000219e:	0589b703          	ld	a4,88(s3)
++    800021a2:	12068693          	addi	a3,a3,288
++    800021a6:	0007b803          	ld	a6,0(a5) # 1000 <_entry-0x7ffff000>
++    800021aa:	6788                	ld	a0,8(a5)
++    800021ac:	6b8c                	ld	a1,16(a5)
++    800021ae:	6f90                	ld	a2,24(a5)
++    800021b0:	01073023          	sd	a6,0(a4)
++    800021b4:	e708                	sd	a0,8(a4)
++    800021b6:	eb0c                	sd	a1,16(a4)
++    800021b8:	ef10                	sd	a2,24(a4)
++    800021ba:	02078793          	addi	a5,a5,32
++    800021be:	02070713          	addi	a4,a4,32
++    800021c2:	fed792e3          	bne	a5,a3,800021a6 <fork+0x56>
++  np->trapframe->a0 = 0;
++    800021c6:	0589b783          	ld	a5,88(s3)
++    800021ca:	0607b823          	sd	zero,112(a5)
++  for(i = 0; i < NOFILE; i++)
++    800021ce:	0d0a0493          	addi	s1,s4,208
++    800021d2:	0d098913          	addi	s2,s3,208
++    800021d6:	150a0a93          	addi	s5,s4,336
++    800021da:	a00d                	j	800021fc <fork+0xac>
++    freeproc(np);
++    800021dc:	854e                	mv	a0,s3
++    800021de:	00000097          	auipc	ra,0x0
++    800021e2:	d4a080e7          	jalr	-694(ra) # 80001f28 <freeproc>
++    release(&np->lock);
++    800021e6:	854e                	mv	a0,s3
++    800021e8:	fffff097          	auipc	ra,0xfffff
++    800021ec:	a9c080e7          	jalr	-1380(ra) # 80000c84 <release>
++    return -1;
++    800021f0:	597d                	li	s2,-1
++    800021f2:	a85d                	j	800022a8 <fork+0x158>
++  for(i = 0; i < NOFILE; i++)
++    800021f4:	04a1                	addi	s1,s1,8
++    800021f6:	0921                	addi	s2,s2,8
++    800021f8:	01548b63          	beq	s1,s5,8000220e <fork+0xbe>
++    if(p->ofile[i])
++    800021fc:	6088                	ld	a0,0(s1)
++    800021fe:	d97d                	beqz	a0,800021f4 <fork+0xa4>
++      np->ofile[i] = filedup(p->ofile[i]);
++    80002200:	00003097          	auipc	ra,0x3
++    80002204:	95a080e7          	jalr	-1702(ra) # 80004b5a <filedup>
++    80002208:	00a93023          	sd	a0,0(s2)
++    8000220c:	b7e5                	j	800021f4 <fork+0xa4>
++  np->cwd = idup(p->cwd);
++    8000220e:	1d0a3503          	ld	a0,464(s4)
++    80002212:	00002097          	auipc	ra,0x2
++    80002216:	ab8080e7          	jalr	-1352(ra) # 80003cca <idup>
++    8000221a:	1ca9b823          	sd	a0,464(s3)
++  for(i = 0; i < NOSEM; i++)
++    8000221e:	150a0493          	addi	s1,s4,336
++    80002222:	15098913          	addi	s2,s3,336
++    80002226:	1d0a0a93          	addi	s5,s4,464
++    8000222a:	a029                	j	80002234 <fork+0xe4>
++    8000222c:	04a1                	addi	s1,s1,8
++    8000222e:	0921                	addi	s2,s2,8
++    80002230:	01548b63          	beq	s1,s5,80002246 <fork+0xf6>
++    if(p->osem[i])
++    80002234:	6088                	ld	a0,0(s1)
++    80002236:	d97d                	beqz	a0,8000222c <fork+0xdc>
++      np->osem[i] = semdup(p->osem[i]);
++    80002238:	00000097          	auipc	ra,0x0
++    8000223c:	8d2080e7          	jalr	-1838(ra) # 80001b0a <semdup>
++    80002240:	00a93023          	sd	a0,0(s2)
++    80002244:	b7e5                	j	8000222c <fork+0xdc>
++  safestrcpy(np->name, p->name, sizeof(p->name));
++    80002246:	4641                	li	a2,16
++    80002248:	1d8a0593          	addi	a1,s4,472
++    8000224c:	1d898513          	addi	a0,s3,472
++    80002250:	fffff097          	auipc	ra,0xfffff
++    80002254:	bc6080e7          	jalr	-1082(ra) # 80000e16 <safestrcpy>
++  pid = np->pid;
++    80002258:	0309a903          	lw	s2,48(s3)
++  release(&np->lock);
++    8000225c:	854e                	mv	a0,s3
++    8000225e:	fffff097          	auipc	ra,0xfffff
++    80002262:	a26080e7          	jalr	-1498(ra) # 80000c84 <release>
++  acquire(&wait_lock);
++    80002266:	00010497          	auipc	s1,0x10
++    8000226a:	04a48493          	addi	s1,s1,74 # 800122b0 <wait_lock>
++    8000226e:	8526                	mv	a0,s1
++    80002270:	fffff097          	auipc	ra,0xfffff
++    80002274:	960080e7          	jalr	-1696(ra) # 80000bd0 <acquire>
++  np->parent = p;
++    80002278:	0349bc23          	sd	s4,56(s3)
++  release(&wait_lock);
++    8000227c:	8526                	mv	a0,s1
++    8000227e:	fffff097          	auipc	ra,0xfffff
++    80002282:	a06080e7          	jalr	-1530(ra) # 80000c84 <release>
++  acquire(&np->lock);
++    80002286:	854e                	mv	a0,s3
++    80002288:	fffff097          	auipc	ra,0xfffff
++    8000228c:	948080e7          	jalr	-1720(ra) # 80000bd0 <acquire>
++  makerunnable(p->mlflevel,np);
++    80002290:	85ce                	mv	a1,s3
++    80002292:	1f8a2503          	lw	a0,504(s4)
++    80002296:	00000097          	auipc	ra,0x0
++    8000229a:	8b8080e7          	jalr	-1864(ra) # 80001b4e <makerunnable>
++  release(&np->lock);
++    8000229e:	854e                	mv	a0,s3
++    800022a0:	fffff097          	auipc	ra,0xfffff
++    800022a4:	9e4080e7          	jalr	-1564(ra) # 80000c84 <release>
++}
++    800022a8:	854a                	mv	a0,s2
++    800022aa:	70e2                	ld	ra,56(sp)
++    800022ac:	7442                	ld	s0,48(sp)
++    800022ae:	74a2                	ld	s1,40(sp)
++    800022b0:	7902                	ld	s2,32(sp)
++    800022b2:	69e2                	ld	s3,24(sp)
++    800022b4:	6a42                	ld	s4,16(sp)
++    800022b6:	6aa2                	ld	s5,8(sp)
++    800022b8:	6121                	addi	sp,sp,64
++    800022ba:	8082                	ret
++    return -1;
++    800022bc:	597d                	li	s2,-1
++    800022be:	b7ed                	j	800022a8 <fork+0x158>
++
++00000000800022c0 <ageprocs>:
++{
++    800022c0:	715d                	addi	sp,sp,-80
++    800022c2:	e486                	sd	ra,72(sp)
++    800022c4:	e0a2                	sd	s0,64(sp)
++    800022c6:	fc26                	sd	s1,56(sp)
++    800022c8:	f84a                	sd	s2,48(sp)
++    800022ca:	f44e                	sd	s3,40(sp)
++    800022cc:	f052                	sd	s4,32(sp)
++    800022ce:	ec56                	sd	s5,24(sp)
++    800022d0:	e85a                	sd	s6,16(sp)
++    800022d2:	e45e                	sd	s7,8(sp)
++    800022d4:	0880                	addi	s0,sp,80
++  acquire(&mlf_lock);
++    800022d6:	00010517          	auipc	a0,0x10
++    800022da:	f6a50513          	addi	a0,a0,-150 # 80012240 <mlf_lock>
++    800022de:	fffff097          	auipc	ra,0xfffff
++    800022e2:	8f2080e7          	jalr	-1806(ra) # 80000bd0 <acquire>
++  for(int index = 1; index < MLFLEVELS; index++){
++    800022e6:	00010497          	auipc	s1,0x10
++    800022ea:	f7248493          	addi	s1,s1,-142 # 80012258 <mlf>
++  acquire(&mlf_lock);
++    800022ee:	4981                	li	s3,0
++    if(ticks - current->age > MAXAGE){
++    800022f0:	00007b97          	auipc	s7,0x7
++    800022f4:	d40b8b93          	addi	s7,s7,-704 # 80009030 <ticks>
++    800022f8:	4b15                	li	s6,5
++  for(int index = 1; index < MLFLEVELS; index++){
++    800022fa:	4a0d                	li	s4,3
++    800022fc:	a02d                	j	80002326 <ageprocs+0x66>
++        mlf[index].top = 0;
++    800022fe:	0004b823          	sd	zero,16(s1)
++        mlf[index].last = 0;
++    80002302:	0004bc23          	sd	zero,24(s1)
++      makerunnable(index-1,current);
++    80002306:	85ca                	mv	a1,s2
++    80002308:	0009851b          	sext.w	a0,s3
++    8000230c:	00000097          	auipc	ra,0x0
++    80002310:	842080e7          	jalr	-1982(ra) # 80001b4e <makerunnable>
++    release(&current->lock);
++    80002314:	854a                	mv	a0,s2
++    80002316:	fffff097          	auipc	ra,0xfffff
++    8000231a:	96e080e7          	jalr	-1682(ra) # 80000c84 <release>
++  for(int index = 1; index < MLFLEVELS; index++){
++    8000231e:	0985                	addi	s3,s3,1
++    80002320:	04c1                	addi	s1,s1,16
++    80002322:	03498d63          	beq	s3,s4,8000235c <ageprocs+0x9c>
++    struct proc *current = mlf[index].top;
++    80002326:	0104b903          	ld	s2,16(s1)
++    if(!current || holding(&current->lock)){
++    8000232a:	fe090ae3          	beqz	s2,8000231e <ageprocs+0x5e>
++    8000232e:	854a                	mv	a0,s2
++    80002330:	fffff097          	auipc	ra,0xfffff
++    80002334:	826080e7          	jalr	-2010(ra) # 80000b56 <holding>
++    80002338:	f17d                	bnez	a0,8000231e <ageprocs+0x5e>
++    acquire(&current->lock);
++    8000233a:	854a                	mv	a0,s2
++    8000233c:	fffff097          	auipc	ra,0xfffff
++    80002340:	894080e7          	jalr	-1900(ra) # 80000bd0 <acquire>
++    if(ticks - current->age > MAXAGE){
++    80002344:	000ba783          	lw	a5,0(s7)
++    80002348:	1fc92703          	lw	a4,508(s2)
++    8000234c:	9f99                	subw	a5,a5,a4
++    8000234e:	fcfb73e3          	bgeu	s6,a5,80002314 <ageprocs+0x54>
++      if(current->next != 0){
++    80002352:	1f093783          	ld	a5,496(s2)
++    80002356:	d7c5                	beqz	a5,800022fe <ageprocs+0x3e>
++        mlf[index].top = current->next;
++    80002358:	e89c                	sd	a5,16(s1)
++    8000235a:	b775                	j	80002306 <ageprocs+0x46>
++  release(&mlf_lock);
++    8000235c:	00010517          	auipc	a0,0x10
++    80002360:	ee450513          	addi	a0,a0,-284 # 80012240 <mlf_lock>
++    80002364:	fffff097          	auipc	ra,0xfffff
++    80002368:	920080e7          	jalr	-1760(ra) # 80000c84 <release>
++}
++    8000236c:	60a6                	ld	ra,72(sp)
++    8000236e:	6406                	ld	s0,64(sp)
++    80002370:	74e2                	ld	s1,56(sp)
++    80002372:	7942                	ld	s2,48(sp)
++    80002374:	79a2                	ld	s3,40(sp)
++    80002376:	7a02                	ld	s4,32(sp)
++    80002378:	6ae2                	ld	s5,24(sp)
++    8000237a:	6b42                	ld	s6,16(sp)
++    8000237c:	6ba2                	ld	s7,8(sp)
++    8000237e:	6161                	addi	sp,sp,80
++    80002380:	8082                	ret
++
++0000000080002382 <scheduler>:
++{
++    80002382:	715d                	addi	sp,sp,-80
++    80002384:	e486                	sd	ra,72(sp)
++    80002386:	e0a2                	sd	s0,64(sp)
++    80002388:	fc26                	sd	s1,56(sp)
++    8000238a:	f84a                	sd	s2,48(sp)
++    8000238c:	f44e                	sd	s3,40(sp)
++    8000238e:	f052                	sd	s4,32(sp)
++    80002390:	ec56                	sd	s5,24(sp)
++    80002392:	e85a                	sd	s6,16(sp)
++    80002394:	e45e                	sd	s7,8(sp)
++    80002396:	e062                	sd	s8,0(sp)
++    80002398:	0880                	addi	s0,sp,80
++    8000239a:	8a12                	mv	s4,tp
++  int id = r_tp();
++    8000239c:	2a01                	sext.w	s4,s4
++  c->proc = 0;
++    8000239e:	007a1a93          	slli	s5,s4,0x7
++    800023a2:	00010797          	auipc	a5,0x10
++    800023a6:	e9e78793          	addi	a5,a5,-354 # 80012240 <mlf_lock>
++    800023aa:	97d6                	add	a5,a5,s5
++    800023ac:	0807b423          	sd	zero,136(a5)
++    swtch(&c->context, &p->context);
++    800023b0:	00010797          	auipc	a5,0x10
++    800023b4:	f2078793          	addi	a5,a5,-224 # 800122d0 <cpus+0x8>
++    800023b8:	9abe                	add	s5,s5,a5
++  acquire(&mlf_lock);
++    800023ba:	00010997          	auipc	s3,0x10
++    800023be:	e8698993          	addi	s3,s3,-378 # 80012240 <mlf_lock>
++  for(int index = 0; index < MLFLEVELS; index++){
++    800023c2:	4b01                	li	s6,0
++    800023c4:	4911                	li	s2,4
++    if(p->state != RUNNABLE){
++    800023c6:	4c0d                	li	s8,3
++    p->age = ticks;
++    800023c8:	00007b97          	auipc	s7,0x7
++    800023cc:	c68b8b93          	addi	s7,s7,-920 # 80009030 <ticks>
++    c->proc = p;
++    800023d0:	0a1e                	slli	s4,s4,0x7
++    800023d2:	9a4e                	add	s4,s4,s3
++    800023d4:	a0b5                	j	80002440 <scheduler+0xbe>
++      mlf[index].top = first->next;
++    800023d6:	1f04b683          	ld	a3,496(s1)
++    800023da:	00479713          	slli	a4,a5,0x4
++    800023de:	974e                	add	a4,a4,s3
++    800023e0:	ef14                	sd	a3,24(a4)
++      if(!mlf[index].top){
++    800023e2:	c6b9                	beqz	a3,80002430 <scheduler+0xae>
++      release(&mlf_lock);
++    800023e4:	854e                	mv	a0,s3
++    800023e6:	fffff097          	auipc	ra,0xfffff
++    800023ea:	89e080e7          	jalr	-1890(ra) # 80000c84 <release>
++    if(p->state != RUNNABLE){
++    800023ee:	4c8c                	lw	a1,24(s1)
++    800023f0:	07859f63          	bne	a1,s8,8000246e <scheduler+0xec>
++    acquire(&p->lock);
++    800023f4:	8526                	mv	a0,s1
++    800023f6:	ffffe097          	auipc	ra,0xffffe
++    800023fa:	7da080e7          	jalr	2010(ra) # 80000bd0 <acquire>
++    p->state = RUNNING;
++    800023fe:	0124ac23          	sw	s2,24(s1)
++    p->age = ticks;
++    80002402:	000ba783          	lw	a5,0(s7)
++    80002406:	1ef4ae23          	sw	a5,508(s1)
++    p->ticks = 0;
++    8000240a:	1e049423          	sh	zero,488(s1)
++    c->proc = p;
++    8000240e:	089a3423          	sd	s1,136(s4)
++    swtch(&c->context, &p->context);
++    80002412:	06048593          	addi	a1,s1,96
++    80002416:	8556                	mv	a0,s5
++    80002418:	00000097          	auipc	ra,0x0
++    8000241c:	6f2080e7          	jalr	1778(ra) # 80002b0a <swtch>
++    c->proc = 0;
++    80002420:	080a3423          	sd	zero,136(s4)
++    release(&p->lock);
++    80002424:	8526                	mv	a0,s1
++    80002426:	fffff097          	auipc	ra,0xfffff
++    8000242a:	85e080e7          	jalr	-1954(ra) # 80000c84 <release>
++    8000242e:	a809                	j	80002440 <scheduler+0xbe>
++        mlf[index].last = 0;
++    80002430:	02073023          	sd	zero,32(a4)
++    80002434:	bf45                	j	800023e4 <scheduler+0x62>
++  release(&mlf_lock);
++    80002436:	854e                	mv	a0,s3
++    80002438:	fffff097          	auipc	ra,0xfffff
++    8000243c:	84c080e7          	jalr	-1972(ra) # 80000c84 <release>
++  asm volatile("csrr %0, sstatus" : "=r" (x) );
++    80002440:	100027f3          	csrr	a5,sstatus
++  w_sstatus(r_sstatus() | SSTATUS_SIE);
++    80002444:	0027e793          	ori	a5,a5,2
++  asm volatile("csrw sstatus, %0" : : "r" (x));
++    80002448:	10079073          	csrw	sstatus,a5
++  acquire(&mlf_lock);
++    8000244c:	854e                	mv	a0,s3
++    8000244e:	ffffe097          	auipc	ra,0xffffe
++    80002452:	782080e7          	jalr	1922(ra) # 80000bd0 <acquire>
++  for(int index = 0; index < MLFLEVELS; index++){
++    80002456:	00010717          	auipc	a4,0x10
++    8000245a:	e0270713          	addi	a4,a4,-510 # 80012258 <mlf>
++    8000245e:	87da                	mv	a5,s6
++    if(mlf[index].top != 0){
++    80002460:	6304                	ld	s1,0(a4)
++    80002462:	f8b5                	bnez	s1,800023d6 <scheduler+0x54>
++  for(int index = 0; index < MLFLEVELS; index++){
++    80002464:	2785                	addiw	a5,a5,1
++    80002466:	0741                	addi	a4,a4,16
++    80002468:	ff279ce3          	bne	a5,s2,80002460 <scheduler+0xde>
++    8000246c:	b7e9                	j	80002436 <scheduler+0xb4>
++      printf("State is %d \n", p->state);
++    8000246e:	00006517          	auipc	a0,0x6
++    80002472:	db250513          	addi	a0,a0,-590 # 80008220 <digits+0x1f0>
++    80002476:	ffffe097          	auipc	ra,0xffffe
++    8000247a:	10e080e7          	jalr	270(ra) # 80000584 <printf>
++      panic("Process is not in a runnable state");
++    8000247e:	00006517          	auipc	a0,0x6
++    80002482:	db250513          	addi	a0,a0,-590 # 80008230 <digits+0x200>
++    80002486:	ffffe097          	auipc	ra,0xffffe
++    8000248a:	0b4080e7          	jalr	180(ra) # 8000053a <panic>
++
++000000008000248e <sched>:
++{
++    8000248e:	7179                	addi	sp,sp,-48
++    80002490:	f406                	sd	ra,40(sp)
++    80002492:	f022                	sd	s0,32(sp)
++    80002494:	ec26                	sd	s1,24(sp)
++    80002496:	e84a                	sd	s2,16(sp)
++    80002498:	e44e                	sd	s3,8(sp)
++    8000249a:	1800                	addi	s0,sp,48
++  struct proc *p = myproc();
++    8000249c:	00000097          	auipc	ra,0x0
++    800024a0:	8da080e7          	jalr	-1830(ra) # 80001d76 <myproc>
++    800024a4:	84aa                	mv	s1,a0
++  if(!holding(&p->lock))
++    800024a6:	ffffe097          	auipc	ra,0xffffe
++    800024aa:	6b0080e7          	jalr	1712(ra) # 80000b56 <holding>
++    800024ae:	c93d                	beqz	a0,80002524 <sched+0x96>
++  asm volatile("mv %0, tp" : "=r" (x) );
++    800024b0:	8792                	mv	a5,tp
++  if(mycpu()->noff != 1)
++    800024b2:	2781                	sext.w	a5,a5
++    800024b4:	079e                	slli	a5,a5,0x7
++    800024b6:	00010717          	auipc	a4,0x10
++    800024ba:	d8a70713          	addi	a4,a4,-630 # 80012240 <mlf_lock>
++    800024be:	97ba                	add	a5,a5,a4
++    800024c0:	1007a703          	lw	a4,256(a5)
++    800024c4:	4785                	li	a5,1
++    800024c6:	06f71763          	bne	a4,a5,80002534 <sched+0xa6>
++  if(p->state == RUNNING)
++    800024ca:	4c98                	lw	a4,24(s1)
++    800024cc:	4791                	li	a5,4
++    800024ce:	06f70b63          	beq	a4,a5,80002544 <sched+0xb6>
++  asm volatile("csrr %0, sstatus" : "=r" (x) );
++    800024d2:	100027f3          	csrr	a5,sstatus
++  return (x & SSTATUS_SIE) != 0;
++    800024d6:	8b89                	andi	a5,a5,2
++  if(intr_get())
++    800024d8:	efb5                	bnez	a5,80002554 <sched+0xc6>
++  asm volatile("mv %0, tp" : "=r" (x) );
++    800024da:	8792                	mv	a5,tp
++  intena = mycpu()->intena;
++    800024dc:	00010917          	auipc	s2,0x10
++    800024e0:	d6490913          	addi	s2,s2,-668 # 80012240 <mlf_lock>
++    800024e4:	2781                	sext.w	a5,a5
++    800024e6:	079e                	slli	a5,a5,0x7
++    800024e8:	97ca                	add	a5,a5,s2
++    800024ea:	1047a983          	lw	s3,260(a5)
++    800024ee:	8792                	mv	a5,tp
++  swtch(&p->context, &mycpu()->context);
++    800024f0:	2781                	sext.w	a5,a5
++    800024f2:	079e                	slli	a5,a5,0x7
++    800024f4:	00010597          	auipc	a1,0x10
++    800024f8:	ddc58593          	addi	a1,a1,-548 # 800122d0 <cpus+0x8>
++    800024fc:	95be                	add	a1,a1,a5
++    800024fe:	06048513          	addi	a0,s1,96
++    80002502:	00000097          	auipc	ra,0x0
++    80002506:	608080e7          	jalr	1544(ra) # 80002b0a <swtch>
++    8000250a:	8792                	mv	a5,tp
++  mycpu()->intena = intena;
++    8000250c:	2781                	sext.w	a5,a5
++    8000250e:	079e                	slli	a5,a5,0x7
++    80002510:	993e                	add	s2,s2,a5
++    80002512:	11392223          	sw	s3,260(s2)
++}
++    80002516:	70a2                	ld	ra,40(sp)
++    80002518:	7402                	ld	s0,32(sp)
++    8000251a:	64e2                	ld	s1,24(sp)
++    8000251c:	6942                	ld	s2,16(sp)
++    8000251e:	69a2                	ld	s3,8(sp)
++    80002520:	6145                	addi	sp,sp,48
++    80002522:	8082                	ret
++    panic("sched p->lock");
++    80002524:	00006517          	auipc	a0,0x6
++    80002528:	d3450513          	addi	a0,a0,-716 # 80008258 <digits+0x228>
++    8000252c:	ffffe097          	auipc	ra,0xffffe
++    80002530:	00e080e7          	jalr	14(ra) # 8000053a <panic>
++    panic("sched locks");
++    80002534:	00006517          	auipc	a0,0x6
++    80002538:	d3450513          	addi	a0,a0,-716 # 80008268 <digits+0x238>
++    8000253c:	ffffe097          	auipc	ra,0xffffe
++    80002540:	ffe080e7          	jalr	-2(ra) # 8000053a <panic>
++    panic("sched running");
++    80002544:	00006517          	auipc	a0,0x6
++    80002548:	d3450513          	addi	a0,a0,-716 # 80008278 <digits+0x248>
++    8000254c:	ffffe097          	auipc	ra,0xffffe
++    80002550:	fee080e7          	jalr	-18(ra) # 8000053a <panic>
++    panic("sched interruptible");
++    80002554:	00006517          	auipc	a0,0x6
++    80002558:	d3450513          	addi	a0,a0,-716 # 80008288 <digits+0x258>
++    8000255c:	ffffe097          	auipc	ra,0xffffe
++    80002560:	fde080e7          	jalr	-34(ra) # 8000053a <panic>
++
++0000000080002564 <yield>:
++{
++    80002564:	1101                	addi	sp,sp,-32
++    80002566:	ec06                	sd	ra,24(sp)
++    80002568:	e822                	sd	s0,16(sp)
++    8000256a:	e426                	sd	s1,8(sp)
++    8000256c:	1000                	addi	s0,sp,32
++  struct proc *p = myproc();
++    8000256e:	00000097          	auipc	ra,0x0
++    80002572:	808080e7          	jalr	-2040(ra) # 80001d76 <myproc>
++    80002576:	84aa                	mv	s1,a0
++  acquire(&p->lock);
++    80002578:	ffffe097          	auipc	ra,0xffffe
++    8000257c:	658080e7          	jalr	1624(ra) # 80000bd0 <acquire>
++  makerunnable(p->mlflevel+1,p);
++    80002580:	1f84a503          	lw	a0,504(s1)
++    80002584:	85a6                	mv	a1,s1
++    80002586:	2505                	addiw	a0,a0,1
++    80002588:	fffff097          	auipc	ra,0xfffff
++    8000258c:	5c6080e7          	jalr	1478(ra) # 80001b4e <makerunnable>
++  sched();
++    80002590:	00000097          	auipc	ra,0x0
++    80002594:	efe080e7          	jalr	-258(ra) # 8000248e <sched>
++  release(&p->lock);
++    80002598:	8526                	mv	a0,s1
++    8000259a:	ffffe097          	auipc	ra,0xffffe
++    8000259e:	6ea080e7          	jalr	1770(ra) # 80000c84 <release>
++}
++    800025a2:	60e2                	ld	ra,24(sp)
++    800025a4:	6442                	ld	s0,16(sp)
++    800025a6:	64a2                	ld	s1,8(sp)
++    800025a8:	6105                	addi	sp,sp,32
++    800025aa:	8082                	ret
++
++00000000800025ac <sleep>:
++
++// Atomically release lock and sleep on chan.
++// Reacquires lock when awakened.
++void
++sleep(void *chan, struct spinlock *lk)
++{
++    800025ac:	7179                	addi	sp,sp,-48
++    800025ae:	f406                	sd	ra,40(sp)
++    800025b0:	f022                	sd	s0,32(sp)
++    800025b2:	ec26                	sd	s1,24(sp)
++    800025b4:	e84a                	sd	s2,16(sp)
++    800025b6:	e44e                	sd	s3,8(sp)
++    800025b8:	1800                	addi	s0,sp,48
++    800025ba:	89aa                	mv	s3,a0
++    800025bc:	892e                	mv	s2,a1
++  struct proc *p = myproc();
++    800025be:	fffff097          	auipc	ra,0xfffff
++    800025c2:	7b8080e7          	jalr	1976(ra) # 80001d76 <myproc>
++    800025c6:	84aa                	mv	s1,a0
++  // Once we hold p->lock, we can be
++  // guaranteed that we won't miss any wakeup
++  // (wakeup locks p->lock),
++  // so it's okay to release lk.
++
++  acquire(&p->lock);  //DOC: sleeplock1
++    800025c8:	ffffe097          	auipc	ra,0xffffe
++    800025cc:	608080e7          	jalr	1544(ra) # 80000bd0 <acquire>
++  release(lk);
++    800025d0:	854a                	mv	a0,s2
++    800025d2:	ffffe097          	auipc	ra,0xffffe
++    800025d6:	6b2080e7          	jalr	1714(ra) # 80000c84 <release>
++
++  // Go to sleep.
++  p->chan = chan;
++    800025da:	0334b023          	sd	s3,32(s1)
++  p->state = SLEEPING;
++    800025de:	4789                	li	a5,2
++    800025e0:	cc9c                	sw	a5,24(s1)
++
++  sched();
++    800025e2:	00000097          	auipc	ra,0x0
++    800025e6:	eac080e7          	jalr	-340(ra) # 8000248e <sched>
++
++  // Tidy up.
++  p->chan = 0;
++    800025ea:	0204b023          	sd	zero,32(s1)
++
++  // Reacquire original lock.
++  release(&p->lock);
++    800025ee:	8526                	mv	a0,s1
++    800025f0:	ffffe097          	auipc	ra,0xffffe
++    800025f4:	694080e7          	jalr	1684(ra) # 80000c84 <release>
++  acquire(lk);
++    800025f8:	854a                	mv	a0,s2
++    800025fa:	ffffe097          	auipc	ra,0xffffe
++    800025fe:	5d6080e7          	jalr	1494(ra) # 80000bd0 <acquire>
++}
++    80002602:	70a2                	ld	ra,40(sp)
++    80002604:	7402                	ld	s0,32(sp)
++    80002606:	64e2                	ld	s1,24(sp)
++    80002608:	6942                	ld	s2,16(sp)
++    8000260a:	69a2                	ld	s3,8(sp)
++    8000260c:	6145                	addi	sp,sp,48
++    8000260e:	8082                	ret
++
++0000000080002610 <wait>:
++{
++    80002610:	715d                	addi	sp,sp,-80
++    80002612:	e486                	sd	ra,72(sp)
++    80002614:	e0a2                	sd	s0,64(sp)
++    80002616:	fc26                	sd	s1,56(sp)
++    80002618:	f84a                	sd	s2,48(sp)
++    8000261a:	f44e                	sd	s3,40(sp)
++    8000261c:	f052                	sd	s4,32(sp)
++    8000261e:	ec56                	sd	s5,24(sp)
++    80002620:	e85a                	sd	s6,16(sp)
++    80002622:	e45e                	sd	s7,8(sp)
++    80002624:	e062                	sd	s8,0(sp)
++    80002626:	0880                	addi	s0,sp,80
++    80002628:	8b2a                	mv	s6,a0
++  struct proc *p = myproc();
++    8000262a:	fffff097          	auipc	ra,0xfffff
++    8000262e:	74c080e7          	jalr	1868(ra) # 80001d76 <myproc>
++    80002632:	892a                	mv	s2,a0
++  acquire(&wait_lock);
++    80002634:	00010517          	auipc	a0,0x10
++    80002638:	c7c50513          	addi	a0,a0,-900 # 800122b0 <wait_lock>
++    8000263c:	ffffe097          	auipc	ra,0xffffe
++    80002640:	594080e7          	jalr	1428(ra) # 80000bd0 <acquire>
++    havekids = 0;
++    80002644:	4b81                	li	s7,0
++        if(np->state == ZOMBIE){
++    80002646:	4a15                	li	s4,5
++        havekids = 1;
++    80002648:	4a85                	li	s5,1
++    for(np = proc; np < &proc[NPROC]; np++){
++    8000264a:	00018997          	auipc	s3,0x18
++    8000264e:	07e98993          	addi	s3,s3,126 # 8001a6c8 <tickslock>
++    sleep(p, &wait_lock);  //DOC: wait-sleep
++    80002652:	00010c17          	auipc	s8,0x10
++    80002656:	c5ec0c13          	addi	s8,s8,-930 # 800122b0 <wait_lock>
++    havekids = 0;
++    8000265a:	875e                	mv	a4,s7
++    for(np = proc; np < &proc[NPROC]; np++){
++    8000265c:	00010497          	auipc	s1,0x10
++    80002660:	06c48493          	addi	s1,s1,108 # 800126c8 <proc>
++    80002664:	a0bd                	j	800026d2 <wait+0xc2>
++          pid = np->pid;
++    80002666:	0304a983          	lw	s3,48(s1)
++          if(addr != 0 && copyout(p->pagetable, addr, (char *)&np->xstate,
++    8000266a:	000b0e63          	beqz	s6,80002686 <wait+0x76>
++    8000266e:	4691                	li	a3,4
++    80002670:	02c48613          	addi	a2,s1,44
++    80002674:	85da                	mv	a1,s6
++    80002676:	05093503          	ld	a0,80(s2)
++    8000267a:	fffff097          	auipc	ra,0xfffff
++    8000267e:	fe8080e7          	jalr	-24(ra) # 80001662 <copyout>
++    80002682:	02054563          	bltz	a0,800026ac <wait+0x9c>
++          freeproc(np);
++    80002686:	8526                	mv	a0,s1
++    80002688:	00000097          	auipc	ra,0x0
++    8000268c:	8a0080e7          	jalr	-1888(ra) # 80001f28 <freeproc>
++          release(&np->lock);
++    80002690:	8526                	mv	a0,s1
++    80002692:	ffffe097          	auipc	ra,0xffffe
++    80002696:	5f2080e7          	jalr	1522(ra) # 80000c84 <release>
++          release(&wait_lock);
++    8000269a:	00010517          	auipc	a0,0x10
++    8000269e:	c1650513          	addi	a0,a0,-1002 # 800122b0 <wait_lock>
++    800026a2:	ffffe097          	auipc	ra,0xffffe
++    800026a6:	5e2080e7          	jalr	1506(ra) # 80000c84 <release>
++          return pid;
++    800026aa:	a09d                	j	80002710 <wait+0x100>
++            release(&np->lock);
++    800026ac:	8526                	mv	a0,s1
++    800026ae:	ffffe097          	auipc	ra,0xffffe
++    800026b2:	5d6080e7          	jalr	1494(ra) # 80000c84 <release>
++            release(&wait_lock);
++    800026b6:	00010517          	auipc	a0,0x10
++    800026ba:	bfa50513          	addi	a0,a0,-1030 # 800122b0 <wait_lock>
++    800026be:	ffffe097          	auipc	ra,0xffffe
++    800026c2:	5c6080e7          	jalr	1478(ra) # 80000c84 <release>
++            return -1;
++    800026c6:	59fd                	li	s3,-1
++    800026c8:	a0a1                	j	80002710 <wait+0x100>
++    for(np = proc; np < &proc[NPROC]; np++){
++    800026ca:	20048493          	addi	s1,s1,512
++    800026ce:	03348463          	beq	s1,s3,800026f6 <wait+0xe6>
++      if(np->parent == p){
++    800026d2:	7c9c                	ld	a5,56(s1)
++    800026d4:	ff279be3          	bne	a5,s2,800026ca <wait+0xba>
++        acquire(&np->lock);
++    800026d8:	8526                	mv	a0,s1
++    800026da:	ffffe097          	auipc	ra,0xffffe
++    800026de:	4f6080e7          	jalr	1270(ra) # 80000bd0 <acquire>
++        if(np->state == ZOMBIE){
++    800026e2:	4c9c                	lw	a5,24(s1)
++    800026e4:	f94781e3          	beq	a5,s4,80002666 <wait+0x56>
++        release(&np->lock);
++    800026e8:	8526                	mv	a0,s1
++    800026ea:	ffffe097          	auipc	ra,0xffffe
++    800026ee:	59a080e7          	jalr	1434(ra) # 80000c84 <release>
++        havekids = 1;
++    800026f2:	8756                	mv	a4,s5
++    800026f4:	bfd9                	j	800026ca <wait+0xba>
++    if(!havekids || p->killed){
++    800026f6:	c701                	beqz	a4,800026fe <wait+0xee>
++    800026f8:	02892783          	lw	a5,40(s2)
++    800026fc:	c79d                	beqz	a5,8000272a <wait+0x11a>
++      release(&wait_lock);
++    800026fe:	00010517          	auipc	a0,0x10
++    80002702:	bb250513          	addi	a0,a0,-1102 # 800122b0 <wait_lock>
++    80002706:	ffffe097          	auipc	ra,0xffffe
++    8000270a:	57e080e7          	jalr	1406(ra) # 80000c84 <release>
++      return -1;
++    8000270e:	59fd                	li	s3,-1
++}
++    80002710:	854e                	mv	a0,s3
++    80002712:	60a6                	ld	ra,72(sp)
++    80002714:	6406                	ld	s0,64(sp)
++    80002716:	74e2                	ld	s1,56(sp)
++    80002718:	7942                	ld	s2,48(sp)
++    8000271a:	79a2                	ld	s3,40(sp)
++    8000271c:	7a02                	ld	s4,32(sp)
++    8000271e:	6ae2                	ld	s5,24(sp)
++    80002720:	6b42                	ld	s6,16(sp)
++    80002722:	6ba2                	ld	s7,8(sp)
++    80002724:	6c02                	ld	s8,0(sp)
++    80002726:	6161                	addi	sp,sp,80
++    80002728:	8082                	ret
++    sleep(p, &wait_lock);  //DOC: wait-sleep
++    8000272a:	85e2                	mv	a1,s8
++    8000272c:	854a                	mv	a0,s2
++    8000272e:	00000097          	auipc	ra,0x0
++    80002732:	e7e080e7          	jalr	-386(ra) # 800025ac <sleep>
++    havekids = 0;
++    80002736:	b715                	j	8000265a <wait+0x4a>
++
++0000000080002738 <wakeup>:
++
++// Wake up all processes sleeping on chan.
++// Must be called without any p->lock.
++void
++wakeup(void *chan)
++{
++    80002738:	7179                	addi	sp,sp,-48
++    8000273a:	f406                	sd	ra,40(sp)
++    8000273c:	f022                	sd	s0,32(sp)
++    8000273e:	ec26                	sd	s1,24(sp)
++    80002740:	e84a                	sd	s2,16(sp)
++    80002742:	e44e                	sd	s3,8(sp)
++    80002744:	e052                	sd	s4,0(sp)
++    80002746:	1800                	addi	s0,sp,48
++    80002748:	8a2a                	mv	s4,a0
++  struct proc *p;
++
++  for(p = proc; p < &proc[NPROC]; p++) {
++    8000274a:	00010497          	auipc	s1,0x10
++    8000274e:	f7e48493          	addi	s1,s1,-130 # 800126c8 <proc>
++    if(p != myproc()){
++      acquire(&p->lock);
++      if(p->state == SLEEPING && p->chan == chan) {
++    80002752:	4989                	li	s3,2
++  for(p = proc; p < &proc[NPROC]; p++) {
++    80002754:	00018917          	auipc	s2,0x18
++    80002758:	f7490913          	addi	s2,s2,-140 # 8001a6c8 <tickslock>
++    8000275c:	a811                	j	80002770 <wakeup+0x38>
++        makerunnable(p->mlflevel-1,p);
++      }
++      release(&p->lock);
++    8000275e:	8526                	mv	a0,s1
++    80002760:	ffffe097          	auipc	ra,0xffffe
++    80002764:	524080e7          	jalr	1316(ra) # 80000c84 <release>
++  for(p = proc; p < &proc[NPROC]; p++) {
++    80002768:	20048493          	addi	s1,s1,512
++    8000276c:	03248c63          	beq	s1,s2,800027a4 <wakeup+0x6c>
++    if(p != myproc()){
++    80002770:	fffff097          	auipc	ra,0xfffff
++    80002774:	606080e7          	jalr	1542(ra) # 80001d76 <myproc>
++    80002778:	fea488e3          	beq	s1,a0,80002768 <wakeup+0x30>
++      acquire(&p->lock);
++    8000277c:	8526                	mv	a0,s1
++    8000277e:	ffffe097          	auipc	ra,0xffffe
++    80002782:	452080e7          	jalr	1106(ra) # 80000bd0 <acquire>
++      if(p->state == SLEEPING && p->chan == chan) {
++    80002786:	4c9c                	lw	a5,24(s1)
++    80002788:	fd379be3          	bne	a5,s3,8000275e <wakeup+0x26>
++    8000278c:	709c                	ld	a5,32(s1)
++    8000278e:	fd4798e3          	bne	a5,s4,8000275e <wakeup+0x26>
++        makerunnable(p->mlflevel-1,p);
++    80002792:	1f84a503          	lw	a0,504(s1)
++    80002796:	85a6                	mv	a1,s1
++    80002798:	357d                	addiw	a0,a0,-1
++    8000279a:	fffff097          	auipc	ra,0xfffff
++    8000279e:	3b4080e7          	jalr	948(ra) # 80001b4e <makerunnable>
++    800027a2:	bf75                	j	8000275e <wakeup+0x26>
++    }
++  }
++}
++    800027a4:	70a2                	ld	ra,40(sp)
++    800027a6:	7402                	ld	s0,32(sp)
++    800027a8:	64e2                	ld	s1,24(sp)
++    800027aa:	6942                	ld	s2,16(sp)
++    800027ac:	69a2                	ld	s3,8(sp)
++    800027ae:	6a02                	ld	s4,0(sp)
++    800027b0:	6145                	addi	sp,sp,48
++    800027b2:	8082                	ret
++
++00000000800027b4 <reparent>:
++{
++    800027b4:	7179                	addi	sp,sp,-48
++    800027b6:	f406                	sd	ra,40(sp)
++    800027b8:	f022                	sd	s0,32(sp)
++    800027ba:	ec26                	sd	s1,24(sp)
++    800027bc:	e84a                	sd	s2,16(sp)
++    800027be:	e44e                	sd	s3,8(sp)
++    800027c0:	e052                	sd	s4,0(sp)
++    800027c2:	1800                	addi	s0,sp,48
++    800027c4:	892a                	mv	s2,a0
++  for(pp = proc; pp < &proc[NPROC]; pp++){
++    800027c6:	00010497          	auipc	s1,0x10
++    800027ca:	f0248493          	addi	s1,s1,-254 # 800126c8 <proc>
++      pp->parent = initproc;
++    800027ce:	00007a17          	auipc	s4,0x7
++    800027d2:	85aa0a13          	addi	s4,s4,-1958 # 80009028 <initproc>
++  for(pp = proc; pp < &proc[NPROC]; pp++){
++    800027d6:	00018997          	auipc	s3,0x18
++    800027da:	ef298993          	addi	s3,s3,-270 # 8001a6c8 <tickslock>
++    800027de:	a029                	j	800027e8 <reparent+0x34>
++    800027e0:	20048493          	addi	s1,s1,512
++    800027e4:	01348d63          	beq	s1,s3,800027fe <reparent+0x4a>
++    if(pp->parent == p){
++    800027e8:	7c9c                	ld	a5,56(s1)
++    800027ea:	ff279be3          	bne	a5,s2,800027e0 <reparent+0x2c>
++      pp->parent = initproc;
++    800027ee:	000a3503          	ld	a0,0(s4)
++    800027f2:	fc88                	sd	a0,56(s1)
++      wakeup(initproc);
++    800027f4:	00000097          	auipc	ra,0x0
++    800027f8:	f44080e7          	jalr	-188(ra) # 80002738 <wakeup>
++    800027fc:	b7d5                	j	800027e0 <reparent+0x2c>
++}
++    800027fe:	70a2                	ld	ra,40(sp)
++    80002800:	7402                	ld	s0,32(sp)
++    80002802:	64e2                	ld	s1,24(sp)
++    80002804:	6942                	ld	s2,16(sp)
++    80002806:	69a2                	ld	s3,8(sp)
++    80002808:	6a02                	ld	s4,0(sp)
++    8000280a:	6145                	addi	sp,sp,48
++    8000280c:	8082                	ret
++
++000000008000280e <exit>:
++{
++    8000280e:	7179                	addi	sp,sp,-48
++    80002810:	f406                	sd	ra,40(sp)
++    80002812:	f022                	sd	s0,32(sp)
++    80002814:	ec26                	sd	s1,24(sp)
++    80002816:	e84a                	sd	s2,16(sp)
++    80002818:	e44e                	sd	s3,8(sp)
++    8000281a:	e052                	sd	s4,0(sp)
++    8000281c:	1800                	addi	s0,sp,48
++    8000281e:	8a2a                	mv	s4,a0
++  struct proc *p = myproc();
++    80002820:	fffff097          	auipc	ra,0xfffff
++    80002824:	556080e7          	jalr	1366(ra) # 80001d76 <myproc>
++    80002828:	89aa                	mv	s3,a0
++  if(p == initproc)
++    8000282a:	00006797          	auipc	a5,0x6
++    8000282e:	7fe7b783          	ld	a5,2046(a5) # 80009028 <initproc>
++    80002832:	0d050493          	addi	s1,a0,208
++    80002836:	15050913          	addi	s2,a0,336
++    8000283a:	02a79363          	bne	a5,a0,80002860 <exit+0x52>
++    panic("init exiting");
++    8000283e:	00006517          	auipc	a0,0x6
++    80002842:	a6250513          	addi	a0,a0,-1438 # 800082a0 <digits+0x270>
++    80002846:	ffffe097          	auipc	ra,0xffffe
++    8000284a:	cf4080e7          	jalr	-780(ra) # 8000053a <panic>
++      fileclose(f);
++    8000284e:	00002097          	auipc	ra,0x2
++    80002852:	35e080e7          	jalr	862(ra) # 80004bac <fileclose>
++      p->ofile[fd] = 0;
++    80002856:	0004b023          	sd	zero,0(s1)
++  for(int fd = 0; fd < NOFILE; fd++){
++    8000285a:	04a1                	addi	s1,s1,8
++    8000285c:	01248563          	beq	s1,s2,80002866 <exit+0x58>
++    if(p->ofile[fd]){
++    80002860:	6088                	ld	a0,0(s1)
++    80002862:	f575                	bnez	a0,8000284e <exit+0x40>
++    80002864:	bfdd                	j	8000285a <exit+0x4c>
++  for(int position = 0; position <  NOSEM ; position++){
++    80002866:	4481                	li	s1,0
++    80002868:	4941                	li	s2,16
++    semclose(position);
++    8000286a:	8526                	mv	a0,s1
++    8000286c:	fffff097          	auipc	ra,0xfffff
++    80002870:	12a080e7          	jalr	298(ra) # 80001996 <semclose>
++  for(int position = 0; position <  NOSEM ; position++){
++    80002874:	2485                	addiw	s1,s1,1
++    80002876:	ff249ae3          	bne	s1,s2,8000286a <exit+0x5c>
++  begin_op();
++    8000287a:	00002097          	auipc	ra,0x2
++    8000287e:	e6a080e7          	jalr	-406(ra) # 800046e4 <begin_op>
++  iput(p->cwd);
++    80002882:	1d09b503          	ld	a0,464(s3)
++    80002886:	00001097          	auipc	ra,0x1
++    8000288a:	63c080e7          	jalr	1596(ra) # 80003ec2 <iput>
++  end_op();
++    8000288e:	00002097          	auipc	ra,0x2
++    80002892:	ed4080e7          	jalr	-300(ra) # 80004762 <end_op>
++  p->cwd = 0;
++    80002896:	1c09b823          	sd	zero,464(s3)
++  acquire(&wait_lock);
++    8000289a:	00010497          	auipc	s1,0x10
++    8000289e:	a1648493          	addi	s1,s1,-1514 # 800122b0 <wait_lock>
++    800028a2:	8526                	mv	a0,s1
++    800028a4:	ffffe097          	auipc	ra,0xffffe
++    800028a8:	32c080e7          	jalr	812(ra) # 80000bd0 <acquire>
++  reparent(p);
++    800028ac:	854e                	mv	a0,s3
++    800028ae:	00000097          	auipc	ra,0x0
++    800028b2:	f06080e7          	jalr	-250(ra) # 800027b4 <reparent>
++  wakeup(p->parent);
++    800028b6:	0389b503          	ld	a0,56(s3)
++    800028ba:	00000097          	auipc	ra,0x0
++    800028be:	e7e080e7          	jalr	-386(ra) # 80002738 <wakeup>
++  acquire(&p->lock);
++    800028c2:	854e                	mv	a0,s3
++    800028c4:	ffffe097          	auipc	ra,0xffffe
++    800028c8:	30c080e7          	jalr	780(ra) # 80000bd0 <acquire>
++  p->xstate = status;
++    800028cc:	0349a623          	sw	s4,44(s3)
++  p->state = ZOMBIE;
++    800028d0:	4795                	li	a5,5
++    800028d2:	00f9ac23          	sw	a5,24(s3)
++  release(&wait_lock);
++    800028d6:	8526                	mv	a0,s1
++    800028d8:	ffffe097          	auipc	ra,0xffffe
++    800028dc:	3ac080e7          	jalr	940(ra) # 80000c84 <release>
++  sched();
++    800028e0:	00000097          	auipc	ra,0x0
++    800028e4:	bae080e7          	jalr	-1106(ra) # 8000248e <sched>
++  panic("zombie exit");
++    800028e8:	00006517          	auipc	a0,0x6
++    800028ec:	9c850513          	addi	a0,a0,-1592 # 800082b0 <digits+0x280>
++    800028f0:	ffffe097          	auipc	ra,0xffffe
++    800028f4:	c4a080e7          	jalr	-950(ra) # 8000053a <panic>
++
++00000000800028f8 <kill>:
++// Kill the process with the given pid.
++// The victim won't exit until it tries to return
++// to user space (see usertrap() in trap.c).
++int
++kill(int pid)
++{
++    800028f8:	7179                	addi	sp,sp,-48
++    800028fa:	f406                	sd	ra,40(sp)
++    800028fc:	f022                	sd	s0,32(sp)
++    800028fe:	ec26                	sd	s1,24(sp)
++    80002900:	e84a                	sd	s2,16(sp)
++    80002902:	e44e                	sd	s3,8(sp)
++    80002904:	1800                	addi	s0,sp,48
++    80002906:	892a                	mv	s2,a0
++  struct proc *p;
++
++  // Starts in proc + 1 because the init process has pid == 1,
++  // and we don't want to be able to kill it.
++  for(p = proc + 1; p < &proc[NPROC]; p++){
++    80002908:	00010497          	auipc	s1,0x10
++    8000290c:	fc048493          	addi	s1,s1,-64 # 800128c8 <proc+0x200>
++    80002910:	00018997          	auipc	s3,0x18
++    80002914:	db898993          	addi	s3,s3,-584 # 8001a6c8 <tickslock>
++    acquire(&p->lock);
++    80002918:	8526                	mv	a0,s1
++    8000291a:	ffffe097          	auipc	ra,0xffffe
++    8000291e:	2b6080e7          	jalr	694(ra) # 80000bd0 <acquire>
++    if(p->pid == pid){
++    80002922:	589c                	lw	a5,48(s1)
++    80002924:	01278d63          	beq	a5,s2,8000293e <kill+0x46>
++        makerunnable(p->mlflevel,p);
++      }
++      release(&p->lock);
++      return 0;
++    }
++    release(&p->lock);
++    80002928:	8526                	mv	a0,s1
++    8000292a:	ffffe097          	auipc	ra,0xffffe
++    8000292e:	35a080e7          	jalr	858(ra) # 80000c84 <release>
++  for(p = proc + 1; p < &proc[NPROC]; p++){
++    80002932:	20048493          	addi	s1,s1,512
++    80002936:	ff3491e3          	bne	s1,s3,80002918 <kill+0x20>
++  }
++  return -1;
++    8000293a:	557d                	li	a0,-1
++    8000293c:	a829                	j	80002956 <kill+0x5e>
++      p->killed = 1;
++    8000293e:	4785                	li	a5,1
++    80002940:	d49c                	sw	a5,40(s1)
++      if(p->state == SLEEPING){
++    80002942:	4c98                	lw	a4,24(s1)
++    80002944:	4789                	li	a5,2
++    80002946:	00f70f63          	beq	a4,a5,80002964 <kill+0x6c>
++      release(&p->lock);
++    8000294a:	8526                	mv	a0,s1
++    8000294c:	ffffe097          	auipc	ra,0xffffe
++    80002950:	338080e7          	jalr	824(ra) # 80000c84 <release>
++      return 0;
++    80002954:	4501                	li	a0,0
++}
++    80002956:	70a2                	ld	ra,40(sp)
++    80002958:	7402                	ld	s0,32(sp)
++    8000295a:	64e2                	ld	s1,24(sp)
++    8000295c:	6942                	ld	s2,16(sp)
++    8000295e:	69a2                	ld	s3,8(sp)
++    80002960:	6145                	addi	sp,sp,48
++    80002962:	8082                	ret
++        makerunnable(p->mlflevel,p);
++    80002964:	85a6                	mv	a1,s1
++    80002966:	1f84a503          	lw	a0,504(s1)
++    8000296a:	fffff097          	auipc	ra,0xfffff
++    8000296e:	1e4080e7          	jalr	484(ra) # 80001b4e <makerunnable>
++    80002972:	bfe1                	j	8000294a <kill+0x52>
++
++0000000080002974 <either_copyout>:
++// Copy to either a user address, or kernel address,
++// depending on usr_dst.
++// Returns 0 on success, -1 on error.
++int
++either_copyout(int user_dst, uint64 dst, void *src, uint64 len)
++{
++    80002974:	7179                	addi	sp,sp,-48
++    80002976:	f406                	sd	ra,40(sp)
++    80002978:	f022                	sd	s0,32(sp)
++    8000297a:	ec26                	sd	s1,24(sp)
++    8000297c:	e84a                	sd	s2,16(sp)
++    8000297e:	e44e                	sd	s3,8(sp)
++    80002980:	e052                	sd	s4,0(sp)
++    80002982:	1800                	addi	s0,sp,48
++    80002984:	84aa                	mv	s1,a0
++    80002986:	892e                	mv	s2,a1
++    80002988:	89b2                	mv	s3,a2
++    8000298a:	8a36                	mv	s4,a3
++  struct proc *p = myproc();
++    8000298c:	fffff097          	auipc	ra,0xfffff
++    80002990:	3ea080e7          	jalr	1002(ra) # 80001d76 <myproc>
++  if(user_dst){
++    80002994:	c08d                	beqz	s1,800029b6 <either_copyout+0x42>
++    return copyout(p->pagetable, dst, src, len);
++    80002996:	86d2                	mv	a3,s4
++    80002998:	864e                	mv	a2,s3
++    8000299a:	85ca                	mv	a1,s2
++    8000299c:	6928                	ld	a0,80(a0)
++    8000299e:	fffff097          	auipc	ra,0xfffff
++    800029a2:	cc4080e7          	jalr	-828(ra) # 80001662 <copyout>
++  } else {
++    memmove((char *)dst, src, len);
++    return 0;
++  }
++}
++    800029a6:	70a2                	ld	ra,40(sp)
++    800029a8:	7402                	ld	s0,32(sp)
++    800029aa:	64e2                	ld	s1,24(sp)
++    800029ac:	6942                	ld	s2,16(sp)
++    800029ae:	69a2                	ld	s3,8(sp)
++    800029b0:	6a02                	ld	s4,0(sp)
++    800029b2:	6145                	addi	sp,sp,48
++    800029b4:	8082                	ret
++    memmove((char *)dst, src, len);
++    800029b6:	000a061b          	sext.w	a2,s4
++    800029ba:	85ce                	mv	a1,s3
++    800029bc:	854a                	mv	a0,s2
++    800029be:	ffffe097          	auipc	ra,0xffffe
++    800029c2:	36a080e7          	jalr	874(ra) # 80000d28 <memmove>
++    return 0;
++    800029c6:	8526                	mv	a0,s1
++    800029c8:	bff9                	j	800029a6 <either_copyout+0x32>
++
++00000000800029ca <either_copyin>:
++// Copy from either a user address, or kernel address,
++// depending on usr_src.
++// Returns 0 on success, -1 on error.
++int
++either_copyin(void *dst, int user_src, uint64 src, uint64 len)
++{
++    800029ca:	7179                	addi	sp,sp,-48
++    800029cc:	f406                	sd	ra,40(sp)
++    800029ce:	f022                	sd	s0,32(sp)
++    800029d0:	ec26                	sd	s1,24(sp)
++    800029d2:	e84a                	sd	s2,16(sp)
++    800029d4:	e44e                	sd	s3,8(sp)
++    800029d6:	e052                	sd	s4,0(sp)
++    800029d8:	1800                	addi	s0,sp,48
++    800029da:	892a                	mv	s2,a0
++    800029dc:	84ae                	mv	s1,a1
++    800029de:	89b2                	mv	s3,a2
++    800029e0:	8a36                	mv	s4,a3
++  struct proc *p = myproc();
++    800029e2:	fffff097          	auipc	ra,0xfffff
++    800029e6:	394080e7          	jalr	916(ra) # 80001d76 <myproc>
++  if(user_src){
++    800029ea:	c08d                	beqz	s1,80002a0c <either_copyin+0x42>
++    return copyin(p->pagetable, dst, src, len);
++    800029ec:	86d2                	mv	a3,s4
++    800029ee:	864e                	mv	a2,s3
++    800029f0:	85ca                	mv	a1,s2
++    800029f2:	6928                	ld	a0,80(a0)
++    800029f4:	fffff097          	auipc	ra,0xfffff
++    800029f8:	cfa080e7          	jalr	-774(ra) # 800016ee <copyin>
++  } else {
++    memmove(dst, (char*)src, len);
++    return 0;
++  }
++}
++    800029fc:	70a2                	ld	ra,40(sp)
++    800029fe:	7402                	ld	s0,32(sp)
++    80002a00:	64e2                	ld	s1,24(sp)
++    80002a02:	6942                	ld	s2,16(sp)
++    80002a04:	69a2                	ld	s3,8(sp)
++    80002a06:	6a02                	ld	s4,0(sp)
++    80002a08:	6145                	addi	sp,sp,48
++    80002a0a:	8082                	ret
++    memmove(dst, (char*)src, len);
++    80002a0c:	000a061b          	sext.w	a2,s4
++    80002a10:	85ce                	mv	a1,s3
++    80002a12:	854a                	mv	a0,s2
++    80002a14:	ffffe097          	auipc	ra,0xffffe
++    80002a18:	314080e7          	jalr	788(ra) # 80000d28 <memmove>
++    return 0;
++    80002a1c:	8526                	mv	a0,s1
++    80002a1e:	bff9                	j	800029fc <either_copyin+0x32>
++
++0000000080002a20 <procdump>:
++// Print a process listing to console.  For debugging.
++// Runs when user types ^P on console.
++// No lock to avoid wedging a stuck machine further.
++void
++procdump(void)
++{
++    80002a20:	715d                	addi	sp,sp,-80
++    80002a22:	e486                	sd	ra,72(sp)
++    80002a24:	e0a2                	sd	s0,64(sp)
++    80002a26:	fc26                	sd	s1,56(sp)
++    80002a28:	f84a                	sd	s2,48(sp)
++    80002a2a:	f44e                	sd	s3,40(sp)
++    80002a2c:	f052                	sd	s4,32(sp)
++    80002a2e:	ec56                	sd	s5,24(sp)
++    80002a30:	e85a                	sd	s6,16(sp)
++    80002a32:	e45e                	sd	s7,8(sp)
++    80002a34:	0880                	addi	s0,sp,80
++  [ZOMBIE]    "zombie"
++  };
++  struct proc *p;
++  char *state;
++
++  printf("\n");
++    80002a36:	00005517          	auipc	a0,0x5
++    80002a3a:	68250513          	addi	a0,a0,1666 # 800080b8 <digits+0x88>
++    80002a3e:	ffffe097          	auipc	ra,0xffffe
++    80002a42:	b46080e7          	jalr	-1210(ra) # 80000584 <printf>
++  for(p = proc; p < &proc[NPROC]; p++){
++    80002a46:	00010497          	auipc	s1,0x10
++    80002a4a:	e5a48493          	addi	s1,s1,-422 # 800128a0 <proc+0x1d8>
++    80002a4e:	00018917          	auipc	s2,0x18
++    80002a52:	e5290913          	addi	s2,s2,-430 # 8001a8a0 <bcache+0x1c0>
++    if(p->state == UNUSED)
++      continue;
++    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
++    80002a56:	4b15                	li	s6,5
++      state = states[p->state];
++    else
++      state = "???";
++    80002a58:	00006997          	auipc	s3,0x6
++    80002a5c:	86898993          	addi	s3,s3,-1944 # 800082c0 <digits+0x290>
++    printf("%d %s %s", p->pid, state, p->name);
++    80002a60:	00006a97          	auipc	s5,0x6
++    80002a64:	868a8a93          	addi	s5,s5,-1944 # 800082c8 <digits+0x298>
++    printf("\n");
++    80002a68:	00005a17          	auipc	s4,0x5
++    80002a6c:	650a0a13          	addi	s4,s4,1616 # 800080b8 <digits+0x88>
++    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
++    80002a70:	00006b97          	auipc	s7,0x6
++    80002a74:	890b8b93          	addi	s7,s7,-1904 # 80008300 <states.0>
++    80002a78:	a00d                	j	80002a9a <procdump+0x7a>
++    printf("%d %s %s", p->pid, state, p->name);
++    80002a7a:	e586a583          	lw	a1,-424(a3)
++    80002a7e:	8556                	mv	a0,s5
++    80002a80:	ffffe097          	auipc	ra,0xffffe
++    80002a84:	b04080e7          	jalr	-1276(ra) # 80000584 <printf>
++    printf("\n");
++    80002a88:	8552                	mv	a0,s4
++    80002a8a:	ffffe097          	auipc	ra,0xffffe
++    80002a8e:	afa080e7          	jalr	-1286(ra) # 80000584 <printf>
++  for(p = proc; p < &proc[NPROC]; p++){
++    80002a92:	20048493          	addi	s1,s1,512
++    80002a96:	03248263          	beq	s1,s2,80002aba <procdump+0x9a>
++    if(p->state == UNUSED)
++    80002a9a:	86a6                	mv	a3,s1
++    80002a9c:	e404a783          	lw	a5,-448(s1)
++    80002aa0:	dbed                	beqz	a5,80002a92 <procdump+0x72>
++      state = "???";
++    80002aa2:	864e                	mv	a2,s3
++    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
++    80002aa4:	fcfb6be3          	bltu	s6,a5,80002a7a <procdump+0x5a>
++    80002aa8:	02079713          	slli	a4,a5,0x20
++    80002aac:	01d75793          	srli	a5,a4,0x1d
++    80002ab0:	97de                	add	a5,a5,s7
++    80002ab2:	6390                	ld	a2,0(a5)
++    80002ab4:	f279                	bnez	a2,80002a7a <procdump+0x5a>
++      state = "???";
++    80002ab6:	864e                	mv	a2,s3
++    80002ab8:	b7c9                	j	80002a7a <procdump+0x5a>
++  }
++}
++    80002aba:	60a6                	ld	ra,72(sp)
++    80002abc:	6406                	ld	s0,64(sp)
++    80002abe:	74e2                	ld	s1,56(sp)
++    80002ac0:	7942                	ld	s2,48(sp)
++    80002ac2:	79a2                	ld	s3,40(sp)
++    80002ac4:	7a02                	ld	s4,32(sp)
++    80002ac6:	6ae2                	ld	s5,24(sp)
++    80002ac8:	6b42                	ld	s6,16(sp)
++    80002aca:	6ba2                	ld	s7,8(sp)
++    80002acc:	6161                	addi	sp,sp,80
++    80002ace:	8082                	ret
++
++0000000080002ad0 <get_sid>:
++
++int
++get_sid(void)
++{
++    80002ad0:	1101                	addi	sp,sp,-32
++    80002ad2:	ec06                	sd	ra,24(sp)
++    80002ad4:	e822                	sd	s0,16(sp)
++    80002ad6:	e426                	sd	s1,8(sp)
++    80002ad8:	e04a                	sd	s2,0(sp)
++    80002ada:	1000                	addi	s0,sp,32
++  for(int position = 0; position <  NOSEM ; position++){
++    80002adc:	4481                	li	s1,0
++    80002ade:	4941                	li	s2,16
++    if(!myproc()->osem[position]){
++    80002ae0:	fffff097          	auipc	ra,0xfffff
++    80002ae4:	296080e7          	jalr	662(ra) # 80001d76 <myproc>
++    80002ae8:	02a48793          	addi	a5,s1,42
++    80002aec:	078e                	slli	a5,a5,0x3
++    80002aee:	953e                	add	a0,a0,a5
++    80002af0:	611c                	ld	a5,0(a0)
++    80002af2:	c789                	beqz	a5,80002afc <get_sid+0x2c>
++  for(int position = 0; position <  NOSEM ; position++){
++    80002af4:	2485                	addiw	s1,s1,1
++    80002af6:	ff2495e3          	bne	s1,s2,80002ae0 <get_sid+0x10>
++      return position;
++    }
++  }
++  return -1;
++    80002afa:	54fd                	li	s1,-1
++}
++    80002afc:	8526                	mv	a0,s1
++    80002afe:	60e2                	ld	ra,24(sp)
++    80002b00:	6442                	ld	s0,16(sp)
++    80002b02:	64a2                	ld	s1,8(sp)
++    80002b04:	6902                	ld	s2,0(sp)
++    80002b06:	6105                	addi	sp,sp,32
++    80002b08:	8082                	ret
++
++0000000080002b0a <swtch>:
++    80002b0a:	00153023          	sd	ra,0(a0)
++    80002b0e:	00253423          	sd	sp,8(a0)
++    80002b12:	e900                	sd	s0,16(a0)
++    80002b14:	ed04                	sd	s1,24(a0)
++    80002b16:	03253023          	sd	s2,32(a0)
++    80002b1a:	03353423          	sd	s3,40(a0)
++    80002b1e:	03453823          	sd	s4,48(a0)
++    80002b22:	03553c23          	sd	s5,56(a0)
++    80002b26:	05653023          	sd	s6,64(a0)
++    80002b2a:	05753423          	sd	s7,72(a0)
++    80002b2e:	05853823          	sd	s8,80(a0)
++    80002b32:	05953c23          	sd	s9,88(a0)
++    80002b36:	07a53023          	sd	s10,96(a0)
++    80002b3a:	07b53423          	sd	s11,104(a0)
++    80002b3e:	0005b083          	ld	ra,0(a1)
++    80002b42:	0085b103          	ld	sp,8(a1)
++    80002b46:	6980                	ld	s0,16(a1)
++    80002b48:	6d84                	ld	s1,24(a1)
++    80002b4a:	0205b903          	ld	s2,32(a1)
++    80002b4e:	0285b983          	ld	s3,40(a1)
++    80002b52:	0305ba03          	ld	s4,48(a1)
++    80002b56:	0385ba83          	ld	s5,56(a1)
++    80002b5a:	0405bb03          	ld	s6,64(a1)
++    80002b5e:	0485bb83          	ld	s7,72(a1)
++    80002b62:	0505bc03          	ld	s8,80(a1)
++    80002b66:	0585bc83          	ld	s9,88(a1)
++    80002b6a:	0605bd03          	ld	s10,96(a1)
++    80002b6e:	0685bd83          	ld	s11,104(a1)
++    80002b72:	8082                	ret
++
++0000000080002b74 <trapinit>:
++extern int devintr();
++extern void ageprocs();
++
++void
++trapinit(void)
++{
++    80002b74:	1141                	addi	sp,sp,-16
++    80002b76:	e406                	sd	ra,8(sp)
++    80002b78:	e022                	sd	s0,0(sp)
++    80002b7a:	0800                	addi	s0,sp,16
++  initlock(&tickslock, "time");
++    80002b7c:	00005597          	auipc	a1,0x5
++    80002b80:	7b458593          	addi	a1,a1,1972 # 80008330 <states.0+0x30>
++    80002b84:	00018517          	auipc	a0,0x18
++    80002b88:	b4450513          	addi	a0,a0,-1212 # 8001a6c8 <tickslock>
++    80002b8c:	ffffe097          	auipc	ra,0xffffe
++    80002b90:	fb4080e7          	jalr	-76(ra) # 80000b40 <initlock>
++}
++    80002b94:	60a2                	ld	ra,8(sp)
++    80002b96:	6402                	ld	s0,0(sp)
++    80002b98:	0141                	addi	sp,sp,16
++    80002b9a:	8082                	ret
++
++0000000080002b9c <trapinithart>:
++
++// set up to take exceptions and traps while in the kernel.
++void
++trapinithart(void)
++{
++    80002b9c:	1141                	addi	sp,sp,-16
++    80002b9e:	e422                	sd	s0,8(sp)
++    80002ba0:	0800                	addi	s0,sp,16
++  asm volatile("csrw stvec, %0" : : "r" (x));
++    80002ba2:	00003797          	auipc	a5,0x3
++    80002ba6:	63e78793          	addi	a5,a5,1598 # 800061e0 <kernelvec>
++    80002baa:	10579073          	csrw	stvec,a5
++  w_stvec((uint64)kernelvec);
++}
++    80002bae:	6422                	ld	s0,8(sp)
++    80002bb0:	0141                	addi	sp,sp,16
++    80002bb2:	8082                	ret
++
++0000000080002bb4 <usertrapret>:
++//
++// return to user space
++//
++void
++usertrapret(void)
++{
++    80002bb4:	1141                	addi	sp,sp,-16
++    80002bb6:	e406                	sd	ra,8(sp)
++    80002bb8:	e022                	sd	s0,0(sp)
++    80002bba:	0800                	addi	s0,sp,16
++  struct proc *p = myproc();
++    80002bbc:	fffff097          	auipc	ra,0xfffff
++    80002bc0:	1ba080e7          	jalr	442(ra) # 80001d76 <myproc>
++  asm volatile("csrr %0, sstatus" : "=r" (x) );
++    80002bc4:	100027f3          	csrr	a5,sstatus
++  w_sstatus(r_sstatus() & ~SSTATUS_SIE);
++    80002bc8:	9bf5                	andi	a5,a5,-3
++  asm volatile("csrw sstatus, %0" : : "r" (x));
++    80002bca:	10079073          	csrw	sstatus,a5
++  // kerneltrap() to usertrap(), so turn off interrupts until
++  // we're back in user space, where usertrap() is correct.
++  intr_off();
++
++  // send syscalls, interrupts, and exceptions to trampoline.S
++  w_stvec(TRAMPOLINE + (uservec - trampoline));
++    80002bce:	00004697          	auipc	a3,0x4
++    80002bd2:	43268693          	addi	a3,a3,1074 # 80007000 <_trampoline>
++    80002bd6:	00004717          	auipc	a4,0x4
++    80002bda:	42a70713          	addi	a4,a4,1066 # 80007000 <_trampoline>
++    80002bde:	8f15                	sub	a4,a4,a3
++    80002be0:	040007b7          	lui	a5,0x4000
++    80002be4:	17fd                	addi	a5,a5,-1 # 3ffffff <_entry-0x7c000001>
++    80002be6:	07b2                	slli	a5,a5,0xc
++    80002be8:	973e                	add	a4,a4,a5
++  asm volatile("csrw stvec, %0" : : "r" (x));
++    80002bea:	10571073          	csrw	stvec,a4
++
++  // set up trapframe values that uservec will need when
++  // the process next re-enters the kernel.
++  p->trapframe->kernel_satp = r_satp();         // kernel page table
++    80002bee:	6d38                	ld	a4,88(a0)
++  asm volatile("csrr %0, satp" : "=r" (x) );
++    80002bf0:	18002673          	csrr	a2,satp
++    80002bf4:	e310                	sd	a2,0(a4)
++  p->trapframe->kernel_sp = p->kstack + PGSIZE; // process's kernel stack
++    80002bf6:	6d30                	ld	a2,88(a0)
++    80002bf8:	6138                	ld	a4,64(a0)
++    80002bfa:	6585                	lui	a1,0x1
++    80002bfc:	972e                	add	a4,a4,a1
++    80002bfe:	e618                	sd	a4,8(a2)
++  p->trapframe->kernel_trap = (uint64)usertrap;
++    80002c00:	6d38                	ld	a4,88(a0)
++    80002c02:	00000617          	auipc	a2,0x0
++    80002c06:	15260613          	addi	a2,a2,338 # 80002d54 <usertrap>
++    80002c0a:	eb10                	sd	a2,16(a4)
++  p->trapframe->kernel_hartid = r_tp();         // hartid for cpuid()
++    80002c0c:	6d38                	ld	a4,88(a0)
++  asm volatile("mv %0, tp" : "=r" (x) );
++    80002c0e:	8612                	mv	a2,tp
++    80002c10:	f310                	sd	a2,32(a4)
++  asm volatile("csrr %0, sstatus" : "=r" (x) );
++    80002c12:	10002773          	csrr	a4,sstatus
++  // set up the registers that trampoline.S's sret will use
++  // to get to user space.
++  
++  // set S Previous Privilege mode to User.
++  unsigned long x = r_sstatus();
++  x &= ~SSTATUS_SPP; // clear SPP to 0 for user mode
++    80002c16:	eff77713          	andi	a4,a4,-257
++  x |= SSTATUS_SPIE; // enable interrupts in user mode
++    80002c1a:	02076713          	ori	a4,a4,32
++  asm volatile("csrw sstatus, %0" : : "r" (x));
++    80002c1e:	10071073          	csrw	sstatus,a4
++  w_sstatus(x);
++
++  // set S Exception Program Counter to the saved user pc.
++  w_sepc(p->trapframe->epc);
++    80002c22:	6d38                	ld	a4,88(a0)
++  asm volatile("csrw sepc, %0" : : "r" (x));
++    80002c24:	6f18                	ld	a4,24(a4)
++    80002c26:	14171073          	csrw	sepc,a4
++
++  // tell trampoline.S the user page table to switch to.
++  uint64 satp = MAKE_SATP(p->pagetable);
++    80002c2a:	692c                	ld	a1,80(a0)
++    80002c2c:	81b1                	srli	a1,a1,0xc
++
++  // jump to trampoline.S at the top of memory, which 
++  // switches to the user page table, restores user registers,
++  // and switches to user mode with sret.
++  uint64 fn = TRAMPOLINE + (userret - trampoline);
++    80002c2e:	00004717          	auipc	a4,0x4
++    80002c32:	46270713          	addi	a4,a4,1122 # 80007090 <userret>
++    80002c36:	8f15                	sub	a4,a4,a3
++    80002c38:	97ba                	add	a5,a5,a4
++  ((void (*)(uint64,uint64))fn)(TRAPFRAME, satp);
++    80002c3a:	577d                	li	a4,-1
++    80002c3c:	177e                	slli	a4,a4,0x3f
++    80002c3e:	8dd9                	or	a1,a1,a4
++    80002c40:	02000537          	lui	a0,0x2000
++    80002c44:	157d                	addi	a0,a0,-1 # 1ffffff <_entry-0x7e000001>
++    80002c46:	0536                	slli	a0,a0,0xd
++    80002c48:	9782                	jalr	a5
++}
++    80002c4a:	60a2                	ld	ra,8(sp)
++    80002c4c:	6402                	ld	s0,0(sp)
++    80002c4e:	0141                	addi	sp,sp,16
++    80002c50:	8082                	ret
++
++0000000080002c52 <clockintr>:
++  w_sstatus(sstatus);
++}
++
++void
++clockintr()
++{
++    80002c52:	1141                	addi	sp,sp,-16
++    80002c54:	e406                	sd	ra,8(sp)
++    80002c56:	e022                	sd	s0,0(sp)
++    80002c58:	0800                	addi	s0,sp,16
++  acquire(&tickslock);
++    80002c5a:	00018517          	auipc	a0,0x18
++    80002c5e:	a6e50513          	addi	a0,a0,-1426 # 8001a6c8 <tickslock>
++    80002c62:	ffffe097          	auipc	ra,0xffffe
++    80002c66:	f6e080e7          	jalr	-146(ra) # 80000bd0 <acquire>
++  ticks++;
++    80002c6a:	00006717          	auipc	a4,0x6
++    80002c6e:	3c670713          	addi	a4,a4,966 # 80009030 <ticks>
++    80002c72:	431c                	lw	a5,0(a4)
++    80002c74:	2785                	addiw	a5,a5,1
++    80002c76:	c31c                	sw	a5,0(a4)
++  if(ticks % TIMEUNIT == 0) { 
++    80002c78:	4729                	li	a4,10
++    80002c7a:	02e7f7bb          	remuw	a5,a5,a4
++    80002c7e:	c78d                	beqz	a5,80002ca8 <clockintr+0x56>
++    ageprocs(); 
++  } 
++  wakeup(&ticks);
++    80002c80:	00006517          	auipc	a0,0x6
++    80002c84:	3b050513          	addi	a0,a0,944 # 80009030 <ticks>
++    80002c88:	00000097          	auipc	ra,0x0
++    80002c8c:	ab0080e7          	jalr	-1360(ra) # 80002738 <wakeup>
++  release(&tickslock);
++    80002c90:	00018517          	auipc	a0,0x18
++    80002c94:	a3850513          	addi	a0,a0,-1480 # 8001a6c8 <tickslock>
++    80002c98:	ffffe097          	auipc	ra,0xffffe
++    80002c9c:	fec080e7          	jalr	-20(ra) # 80000c84 <release>
++}
++    80002ca0:	60a2                	ld	ra,8(sp)
++    80002ca2:	6402                	ld	s0,0(sp)
++    80002ca4:	0141                	addi	sp,sp,16
++    80002ca6:	8082                	ret
++    ageprocs(); 
++    80002ca8:	fffff097          	auipc	ra,0xfffff
++    80002cac:	618080e7          	jalr	1560(ra) # 800022c0 <ageprocs>
++    80002cb0:	bfc1                	j	80002c80 <clockintr+0x2e>
++
++0000000080002cb2 <devintr>:
++// returns 2 if timer interrupt,
++// 1 if other device,
++// 0 if not recognized.
++int
++devintr()
++{
++    80002cb2:	1101                	addi	sp,sp,-32
++    80002cb4:	ec06                	sd	ra,24(sp)
++    80002cb6:	e822                	sd	s0,16(sp)
++    80002cb8:	e426                	sd	s1,8(sp)
++    80002cba:	1000                	addi	s0,sp,32
++  asm volatile("csrr %0, scause" : "=r" (x) );
++    80002cbc:	14202773          	csrr	a4,scause
++  uint64 scause = r_scause();
++
++  if((scause & 0x8000000000000000L) &&
++    80002cc0:	00074d63          	bltz	a4,80002cda <devintr+0x28>
++    // now allowed to interrupt again.
++    if(irq)
++      plic_complete(irq);
++
++    return 1;
++  } else if(scause == 0x8000000000000001L){
++    80002cc4:	57fd                	li	a5,-1
++    80002cc6:	17fe                	slli	a5,a5,0x3f
++    80002cc8:	0785                	addi	a5,a5,1
++    // the SSIP bit in sip.
++    w_sip(r_sip() & ~2);
++
++    return 2;
++  } else {
++    return 0;
++    80002cca:	4501                	li	a0,0
++  } else if(scause == 0x8000000000000001L){
++    80002ccc:	06f70363          	beq	a4,a5,80002d32 <devintr+0x80>
++  }
++}
++    80002cd0:	60e2                	ld	ra,24(sp)
++    80002cd2:	6442                	ld	s0,16(sp)
++    80002cd4:	64a2                	ld	s1,8(sp)
++    80002cd6:	6105                	addi	sp,sp,32
++    80002cd8:	8082                	ret
++     (scause & 0xff) == 9){
++    80002cda:	0ff77793          	zext.b	a5,a4
++  if((scause & 0x8000000000000000L) &&
++    80002cde:	46a5                	li	a3,9
++    80002ce0:	fed792e3          	bne	a5,a3,80002cc4 <devintr+0x12>
++    int irq = plic_claim();
++    80002ce4:	00003097          	auipc	ra,0x3
++    80002ce8:	604080e7          	jalr	1540(ra) # 800062e8 <plic_claim>
++    80002cec:	84aa                	mv	s1,a0
++    if(irq == UART0_IRQ){
++    80002cee:	47a9                	li	a5,10
++    80002cf0:	02f50763          	beq	a0,a5,80002d1e <devintr+0x6c>
++    } else if(irq == VIRTIO0_IRQ){
++    80002cf4:	4785                	li	a5,1
++    80002cf6:	02f50963          	beq	a0,a5,80002d28 <devintr+0x76>
++    return 1;
++    80002cfa:	4505                	li	a0,1
++    } else if(irq){
++    80002cfc:	d8f1                	beqz	s1,80002cd0 <devintr+0x1e>
++      printf("unexpected interrupt irq=%d\n", irq);
++    80002cfe:	85a6                	mv	a1,s1
++    80002d00:	00005517          	auipc	a0,0x5
++    80002d04:	63850513          	addi	a0,a0,1592 # 80008338 <states.0+0x38>
++    80002d08:	ffffe097          	auipc	ra,0xffffe
++    80002d0c:	87c080e7          	jalr	-1924(ra) # 80000584 <printf>
++      plic_complete(irq);
++    80002d10:	8526                	mv	a0,s1
++    80002d12:	00003097          	auipc	ra,0x3
++    80002d16:	5fa080e7          	jalr	1530(ra) # 8000630c <plic_complete>
++    return 1;
++    80002d1a:	4505                	li	a0,1
++    80002d1c:	bf55                	j	80002cd0 <devintr+0x1e>
++      uartintr();
++    80002d1e:	ffffe097          	auipc	ra,0xffffe
++    80002d22:	c74080e7          	jalr	-908(ra) # 80000992 <uartintr>
++    80002d26:	b7ed                	j	80002d10 <devintr+0x5e>
++      virtio_disk_intr();
++    80002d28:	00004097          	auipc	ra,0x4
++    80002d2c:	a70080e7          	jalr	-1424(ra) # 80006798 <virtio_disk_intr>
++    80002d30:	b7c5                	j	80002d10 <devintr+0x5e>
++    if(cpuid() == 0){
++    80002d32:	fffff097          	auipc	ra,0xfffff
++    80002d36:	018080e7          	jalr	24(ra) # 80001d4a <cpuid>
++    80002d3a:	c901                	beqz	a0,80002d4a <devintr+0x98>
++  asm volatile("csrr %0, sip" : "=r" (x) );
++    80002d3c:	144027f3          	csrr	a5,sip
++    w_sip(r_sip() & ~2);
++    80002d40:	9bf5                	andi	a5,a5,-3
++  asm volatile("csrw sip, %0" : : "r" (x));
++    80002d42:	14479073          	csrw	sip,a5
++    return 2;
++    80002d46:	4509                	li	a0,2
++    80002d48:	b761                	j	80002cd0 <devintr+0x1e>
++      clockintr();
++    80002d4a:	00000097          	auipc	ra,0x0
++    80002d4e:	f08080e7          	jalr	-248(ra) # 80002c52 <clockintr>
++    80002d52:	b7ed                	j	80002d3c <devintr+0x8a>
++
++0000000080002d54 <usertrap>:
++{
++    80002d54:	1101                	addi	sp,sp,-32
++    80002d56:	ec06                	sd	ra,24(sp)
++    80002d58:	e822                	sd	s0,16(sp)
++    80002d5a:	e426                	sd	s1,8(sp)
++    80002d5c:	e04a                	sd	s2,0(sp)
++    80002d5e:	1000                	addi	s0,sp,32
++  asm volatile("csrr %0, sstatus" : "=r" (x) );
++    80002d60:	100027f3          	csrr	a5,sstatus
++  if((r_sstatus() & SSTATUS_SPP) != 0)
++    80002d64:	1007f793          	andi	a5,a5,256
++    80002d68:	e3ad                	bnez	a5,80002dca <usertrap+0x76>
++  asm volatile("csrw stvec, %0" : : "r" (x));
++    80002d6a:	00003797          	auipc	a5,0x3
++    80002d6e:	47678793          	addi	a5,a5,1142 # 800061e0 <kernelvec>
++    80002d72:	10579073          	csrw	stvec,a5
++  struct proc *p = myproc();
++    80002d76:	fffff097          	auipc	ra,0xfffff
++    80002d7a:	000080e7          	jalr	ra # 80001d76 <myproc>
++    80002d7e:	84aa                	mv	s1,a0
++  p->trapframe->epc = r_sepc();
++    80002d80:	6d3c                	ld	a5,88(a0)
++  asm volatile("csrr %0, sepc" : "=r" (x) );
++    80002d82:	14102773          	csrr	a4,sepc
++    80002d86:	ef98                	sd	a4,24(a5)
++  asm volatile("csrr %0, scause" : "=r" (x) );
++    80002d88:	14202773          	csrr	a4,scause
++  if(r_scause() == 8){
++    80002d8c:	47a1                	li	a5,8
++    80002d8e:	04f71c63          	bne	a4,a5,80002de6 <usertrap+0x92>
++    if(p->killed)
++    80002d92:	551c                	lw	a5,40(a0)
++    80002d94:	e3b9                	bnez	a5,80002dda <usertrap+0x86>
++    p->trapframe->epc += 4;
++    80002d96:	6cb8                	ld	a4,88(s1)
++    80002d98:	6f1c                	ld	a5,24(a4)
++    80002d9a:	0791                	addi	a5,a5,4
++    80002d9c:	ef1c                	sd	a5,24(a4)
++  asm volatile("csrr %0, sstatus" : "=r" (x) );
++    80002d9e:	100027f3          	csrr	a5,sstatus
++  w_sstatus(r_sstatus() | SSTATUS_SIE);
++    80002da2:	0027e793          	ori	a5,a5,2
++  asm volatile("csrw sstatus, %0" : : "r" (x));
++    80002da6:	10079073          	csrw	sstatus,a5
++    syscall();
++    80002daa:	00000097          	auipc	ra,0x0
++    80002dae:	31c080e7          	jalr	796(ra) # 800030c6 <syscall>
++  if(p->killed)
++    80002db2:	549c                	lw	a5,40(s1)
++    80002db4:	e7dd                	bnez	a5,80002e62 <usertrap+0x10e>
++  usertrapret();
++    80002db6:	00000097          	auipc	ra,0x0
++    80002dba:	dfe080e7          	jalr	-514(ra) # 80002bb4 <usertrapret>
++}
++    80002dbe:	60e2                	ld	ra,24(sp)
++    80002dc0:	6442                	ld	s0,16(sp)
++    80002dc2:	64a2                	ld	s1,8(sp)
++    80002dc4:	6902                	ld	s2,0(sp)
++    80002dc6:	6105                	addi	sp,sp,32
++    80002dc8:	8082                	ret
++    panic("usertrap: not from user mode");
++    80002dca:	00005517          	auipc	a0,0x5
++    80002dce:	58e50513          	addi	a0,a0,1422 # 80008358 <states.0+0x58>
++    80002dd2:	ffffd097          	auipc	ra,0xffffd
++    80002dd6:	768080e7          	jalr	1896(ra) # 8000053a <panic>
++      exit(-1);
++    80002dda:	557d                	li	a0,-1
++    80002ddc:	00000097          	auipc	ra,0x0
++    80002de0:	a32080e7          	jalr	-1486(ra) # 8000280e <exit>
++    80002de4:	bf4d                	j	80002d96 <usertrap+0x42>
++  } else if((which_dev = devintr()) != 0){
++    80002de6:	00000097          	auipc	ra,0x0
++    80002dea:	ecc080e7          	jalr	-308(ra) # 80002cb2 <devintr>
++    80002dee:	892a                	mv	s2,a0
++    80002df0:	c501                	beqz	a0,80002df8 <usertrap+0xa4>
++  if(p->killed)
++    80002df2:	549c                	lw	a5,40(s1)
++    80002df4:	c3a1                	beqz	a5,80002e34 <usertrap+0xe0>
++    80002df6:	a815                	j	80002e2a <usertrap+0xd6>
++  asm volatile("csrr %0, scause" : "=r" (x) );
++    80002df8:	142025f3          	csrr	a1,scause
++    printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
++    80002dfc:	5890                	lw	a2,48(s1)
++    80002dfe:	00005517          	auipc	a0,0x5
++    80002e02:	57a50513          	addi	a0,a0,1402 # 80008378 <states.0+0x78>
++    80002e06:	ffffd097          	auipc	ra,0xffffd
++    80002e0a:	77e080e7          	jalr	1918(ra) # 80000584 <printf>
++  asm volatile("csrr %0, sepc" : "=r" (x) );
++    80002e0e:	141025f3          	csrr	a1,sepc
++  asm volatile("csrr %0, stval" : "=r" (x) );
++    80002e12:	14302673          	csrr	a2,stval
++    printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
++    80002e16:	00005517          	auipc	a0,0x5
++    80002e1a:	59250513          	addi	a0,a0,1426 # 800083a8 <states.0+0xa8>
++    80002e1e:	ffffd097          	auipc	ra,0xffffd
++    80002e22:	766080e7          	jalr	1894(ra) # 80000584 <printf>
++    p->killed = 1;
++    80002e26:	4785                	li	a5,1
++    80002e28:	d49c                	sw	a5,40(s1)
++    exit(-1);
++    80002e2a:	557d                	li	a0,-1
++    80002e2c:	00000097          	auipc	ra,0x0
++    80002e30:	9e2080e7          	jalr	-1566(ra) # 8000280e <exit>
++  if(which_dev == 2){
++    80002e34:	4789                	li	a5,2
++    80002e36:	f8f910e3          	bne	s2,a5,80002db6 <usertrap+0x62>
++    if((++myproc()->ticks) == QUANTUM){
++    80002e3a:	fffff097          	auipc	ra,0xfffff
++    80002e3e:	f3c080e7          	jalr	-196(ra) # 80001d76 <myproc>
++    80002e42:	1e855783          	lhu	a5,488(a0)
++    80002e46:	2785                	addiw	a5,a5,1
++    80002e48:	17c2                	slli	a5,a5,0x30
++    80002e4a:	93c1                	srli	a5,a5,0x30
++    80002e4c:	1ef51423          	sh	a5,488(a0)
++    80002e50:	2781                	sext.w	a5,a5
++    80002e52:	4709                	li	a4,2
++    80002e54:	f6e791e3          	bne	a5,a4,80002db6 <usertrap+0x62>
++      yield();
++    80002e58:	fffff097          	auipc	ra,0xfffff
++    80002e5c:	70c080e7          	jalr	1804(ra) # 80002564 <yield>
++    80002e60:	bf99                	j	80002db6 <usertrap+0x62>
++  int which_dev = 0;
++    80002e62:	4901                	li	s2,0
++    80002e64:	b7d9                	j	80002e2a <usertrap+0xd6>
++
++0000000080002e66 <kerneltrap>:
++{
++    80002e66:	7179                	addi	sp,sp,-48
++    80002e68:	f406                	sd	ra,40(sp)
++    80002e6a:	f022                	sd	s0,32(sp)
++    80002e6c:	ec26                	sd	s1,24(sp)
++    80002e6e:	e84a                	sd	s2,16(sp)
++    80002e70:	e44e                	sd	s3,8(sp)
++    80002e72:	1800                	addi	s0,sp,48
++  asm volatile("csrr %0, sepc" : "=r" (x) );
++    80002e74:	14102973          	csrr	s2,sepc
++  asm volatile("csrr %0, sstatus" : "=r" (x) );
++    80002e78:	100024f3          	csrr	s1,sstatus
++  asm volatile("csrr %0, scause" : "=r" (x) );
++    80002e7c:	142029f3          	csrr	s3,scause
++  if((sstatus & SSTATUS_SPP) == 0)
++    80002e80:	1004f793          	andi	a5,s1,256
++    80002e84:	cb85                	beqz	a5,80002eb4 <kerneltrap+0x4e>
++  asm volatile("csrr %0, sstatus" : "=r" (x) );
++    80002e86:	100027f3          	csrr	a5,sstatus
++  return (x & SSTATUS_SIE) != 0;
++    80002e8a:	8b89                	andi	a5,a5,2
++  if(intr_get() != 0)
++    80002e8c:	ef85                	bnez	a5,80002ec4 <kerneltrap+0x5e>
++  if((which_dev = devintr()) == 0){
++    80002e8e:	00000097          	auipc	ra,0x0
++    80002e92:	e24080e7          	jalr	-476(ra) # 80002cb2 <devintr>
++    80002e96:	cd1d                	beqz	a0,80002ed4 <kerneltrap+0x6e>
++  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING){
++    80002e98:	4789                	li	a5,2
++    80002e9a:	06f50a63          	beq	a0,a5,80002f0e <kerneltrap+0xa8>
++  asm volatile("csrw sepc, %0" : : "r" (x));
++    80002e9e:	14191073          	csrw	sepc,s2
++  asm volatile("csrw sstatus, %0" : : "r" (x));
++    80002ea2:	10049073          	csrw	sstatus,s1
++}
++    80002ea6:	70a2                	ld	ra,40(sp)
++    80002ea8:	7402                	ld	s0,32(sp)
++    80002eaa:	64e2                	ld	s1,24(sp)
++    80002eac:	6942                	ld	s2,16(sp)
++    80002eae:	69a2                	ld	s3,8(sp)
++    80002eb0:	6145                	addi	sp,sp,48
++    80002eb2:	8082                	ret
++    panic("kerneltrap: not from supervisor mode");
++    80002eb4:	00005517          	auipc	a0,0x5
++    80002eb8:	51450513          	addi	a0,a0,1300 # 800083c8 <states.0+0xc8>
++    80002ebc:	ffffd097          	auipc	ra,0xffffd
++    80002ec0:	67e080e7          	jalr	1662(ra) # 8000053a <panic>
++    panic("kerneltrap: interrupts enabled");
++    80002ec4:	00005517          	auipc	a0,0x5
++    80002ec8:	52c50513          	addi	a0,a0,1324 # 800083f0 <states.0+0xf0>
++    80002ecc:	ffffd097          	auipc	ra,0xffffd
++    80002ed0:	66e080e7          	jalr	1646(ra) # 8000053a <panic>
++    printf("scause %p\n", scause);
++    80002ed4:	85ce                	mv	a1,s3
++    80002ed6:	00005517          	auipc	a0,0x5
++    80002eda:	53a50513          	addi	a0,a0,1338 # 80008410 <states.0+0x110>
++    80002ede:	ffffd097          	auipc	ra,0xffffd
++    80002ee2:	6a6080e7          	jalr	1702(ra) # 80000584 <printf>
++  asm volatile("csrr %0, sepc" : "=r" (x) );
++    80002ee6:	141025f3          	csrr	a1,sepc
++  asm volatile("csrr %0, stval" : "=r" (x) );
++    80002eea:	14302673          	csrr	a2,stval
++    printf("sepc=%p stval=%p\n", r_sepc(), r_stval());
++    80002eee:	00005517          	auipc	a0,0x5
++    80002ef2:	53250513          	addi	a0,a0,1330 # 80008420 <states.0+0x120>
++    80002ef6:	ffffd097          	auipc	ra,0xffffd
++    80002efa:	68e080e7          	jalr	1678(ra) # 80000584 <printf>
++    panic("kerneltrap");
++    80002efe:	00005517          	auipc	a0,0x5
++    80002f02:	53a50513          	addi	a0,a0,1338 # 80008438 <states.0+0x138>
++    80002f06:	ffffd097          	auipc	ra,0xffffd
++    80002f0a:	634080e7          	jalr	1588(ra) # 8000053a <panic>
++  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING){
++    80002f0e:	fffff097          	auipc	ra,0xfffff
++    80002f12:	e68080e7          	jalr	-408(ra) # 80001d76 <myproc>
++    80002f16:	d541                	beqz	a0,80002e9e <kerneltrap+0x38>
++    80002f18:	fffff097          	auipc	ra,0xfffff
++    80002f1c:	e5e080e7          	jalr	-418(ra) # 80001d76 <myproc>
++    80002f20:	4d18                	lw	a4,24(a0)
++    80002f22:	4791                	li	a5,4
++    80002f24:	f6f71de3          	bne	a4,a5,80002e9e <kerneltrap+0x38>
++    if((++myproc()->ticks) == QUANTUM){
++    80002f28:	fffff097          	auipc	ra,0xfffff
++    80002f2c:	e4e080e7          	jalr	-434(ra) # 80001d76 <myproc>
++    80002f30:	1e855783          	lhu	a5,488(a0)
++    80002f34:	2785                	addiw	a5,a5,1
++    80002f36:	17c2                	slli	a5,a5,0x30
++    80002f38:	93c1                	srli	a5,a5,0x30
++    80002f3a:	1ef51423          	sh	a5,488(a0)
++    80002f3e:	2781                	sext.w	a5,a5
++    80002f40:	4709                	li	a4,2
++    80002f42:	f4e79ee3          	bne	a5,a4,80002e9e <kerneltrap+0x38>
++      yield();
++    80002f46:	fffff097          	auipc	ra,0xfffff
++    80002f4a:	61e080e7          	jalr	1566(ra) # 80002564 <yield>
++    80002f4e:	bf81                	j	80002e9e <kerneltrap+0x38>
++
++0000000080002f50 <argraw>:
++  return strlen(buf);
++}
++
++static uint64
++argraw(int n)
++{
++    80002f50:	1101                	addi	sp,sp,-32
++    80002f52:	ec06                	sd	ra,24(sp)
++    80002f54:	e822                	sd	s0,16(sp)
++    80002f56:	e426                	sd	s1,8(sp)
++    80002f58:	1000                	addi	s0,sp,32
++    80002f5a:	84aa                	mv	s1,a0
++  struct proc *p = myproc();
++    80002f5c:	fffff097          	auipc	ra,0xfffff
++    80002f60:	e1a080e7          	jalr	-486(ra) # 80001d76 <myproc>
++  switch (n) {
++    80002f64:	4795                	li	a5,5
++    80002f66:	0497e163          	bltu	a5,s1,80002fa8 <argraw+0x58>
++    80002f6a:	048a                	slli	s1,s1,0x2
++    80002f6c:	00005717          	auipc	a4,0x5
++    80002f70:	50470713          	addi	a4,a4,1284 # 80008470 <states.0+0x170>
++    80002f74:	94ba                	add	s1,s1,a4
++    80002f76:	409c                	lw	a5,0(s1)
++    80002f78:	97ba                	add	a5,a5,a4
++    80002f7a:	8782                	jr	a5
++  case 0:
++    return p->trapframe->a0;
++    80002f7c:	6d3c                	ld	a5,88(a0)
++    80002f7e:	7ba8                	ld	a0,112(a5)
++  case 5:
++    return p->trapframe->a5;
++  }
++  panic("argraw");
++  return -1;
++}
++    80002f80:	60e2                	ld	ra,24(sp)
++    80002f82:	6442                	ld	s0,16(sp)
++    80002f84:	64a2                	ld	s1,8(sp)
++    80002f86:	6105                	addi	sp,sp,32
++    80002f88:	8082                	ret
++    return p->trapframe->a1;
++    80002f8a:	6d3c                	ld	a5,88(a0)
++    80002f8c:	7fa8                	ld	a0,120(a5)
++    80002f8e:	bfcd                	j	80002f80 <argraw+0x30>
++    return p->trapframe->a2;
++    80002f90:	6d3c                	ld	a5,88(a0)
++    80002f92:	63c8                	ld	a0,128(a5)
++    80002f94:	b7f5                	j	80002f80 <argraw+0x30>
++    return p->trapframe->a3;
++    80002f96:	6d3c                	ld	a5,88(a0)
++    80002f98:	67c8                	ld	a0,136(a5)
++    80002f9a:	b7dd                	j	80002f80 <argraw+0x30>
++    return p->trapframe->a4;
++    80002f9c:	6d3c                	ld	a5,88(a0)
++    80002f9e:	6bc8                	ld	a0,144(a5)
++    80002fa0:	b7c5                	j	80002f80 <argraw+0x30>
++    return p->trapframe->a5;
++    80002fa2:	6d3c                	ld	a5,88(a0)
++    80002fa4:	6fc8                	ld	a0,152(a5)
++    80002fa6:	bfe9                	j	80002f80 <argraw+0x30>
++  panic("argraw");
++    80002fa8:	00005517          	auipc	a0,0x5
++    80002fac:	4a050513          	addi	a0,a0,1184 # 80008448 <states.0+0x148>
++    80002fb0:	ffffd097          	auipc	ra,0xffffd
++    80002fb4:	58a080e7          	jalr	1418(ra) # 8000053a <panic>
++
++0000000080002fb8 <fetchaddr>:
++{
++    80002fb8:	1101                	addi	sp,sp,-32
++    80002fba:	ec06                	sd	ra,24(sp)
++    80002fbc:	e822                	sd	s0,16(sp)
++    80002fbe:	e426                	sd	s1,8(sp)
++    80002fc0:	e04a                	sd	s2,0(sp)
++    80002fc2:	1000                	addi	s0,sp,32
++    80002fc4:	84aa                	mv	s1,a0
++    80002fc6:	892e                	mv	s2,a1
++  struct proc *p = myproc();
++    80002fc8:	fffff097          	auipc	ra,0xfffff
++    80002fcc:	dae080e7          	jalr	-594(ra) # 80001d76 <myproc>
++  if(addr >= p->sz || addr+sizeof(uint64) > p->sz)
++    80002fd0:	653c                	ld	a5,72(a0)
++    80002fd2:	02f4f863          	bgeu	s1,a5,80003002 <fetchaddr+0x4a>
++    80002fd6:	00848713          	addi	a4,s1,8
++    80002fda:	02e7e663          	bltu	a5,a4,80003006 <fetchaddr+0x4e>
++  if(copyin(p->pagetable, (char *)ip, addr, sizeof(*ip)) != 0)
++    80002fde:	46a1                	li	a3,8
++    80002fe0:	8626                	mv	a2,s1
++    80002fe2:	85ca                	mv	a1,s2
++    80002fe4:	6928                	ld	a0,80(a0)
++    80002fe6:	ffffe097          	auipc	ra,0xffffe
++    80002fea:	708080e7          	jalr	1800(ra) # 800016ee <copyin>
++    80002fee:	00a03533          	snez	a0,a0
++    80002ff2:	40a00533          	neg	a0,a0
++}
++    80002ff6:	60e2                	ld	ra,24(sp)
++    80002ff8:	6442                	ld	s0,16(sp)
++    80002ffa:	64a2                	ld	s1,8(sp)
++    80002ffc:	6902                	ld	s2,0(sp)
++    80002ffe:	6105                	addi	sp,sp,32
++    80003000:	8082                	ret
++    return -1;
++    80003002:	557d                	li	a0,-1
++    80003004:	bfcd                	j	80002ff6 <fetchaddr+0x3e>
++    80003006:	557d                	li	a0,-1
++    80003008:	b7fd                	j	80002ff6 <fetchaddr+0x3e>
++
++000000008000300a <fetchstr>:
++{
++    8000300a:	7179                	addi	sp,sp,-48
++    8000300c:	f406                	sd	ra,40(sp)
++    8000300e:	f022                	sd	s0,32(sp)
++    80003010:	ec26                	sd	s1,24(sp)
++    80003012:	e84a                	sd	s2,16(sp)
++    80003014:	e44e                	sd	s3,8(sp)
++    80003016:	1800                	addi	s0,sp,48
++    80003018:	892a                	mv	s2,a0
++    8000301a:	84ae                	mv	s1,a1
++    8000301c:	89b2                	mv	s3,a2
++  struct proc *p = myproc();
++    8000301e:	fffff097          	auipc	ra,0xfffff
++    80003022:	d58080e7          	jalr	-680(ra) # 80001d76 <myproc>
++  int err = copyinstr(p->pagetable, buf, addr, max);
++    80003026:	86ce                	mv	a3,s3
++    80003028:	864a                	mv	a2,s2
++    8000302a:	85a6                	mv	a1,s1
++    8000302c:	6928                	ld	a0,80(a0)
++    8000302e:	ffffe097          	auipc	ra,0xffffe
++    80003032:	74e080e7          	jalr	1870(ra) # 8000177c <copyinstr>
++  if(err < 0)
++    80003036:	00054763          	bltz	a0,80003044 <fetchstr+0x3a>
++  return strlen(buf);
++    8000303a:	8526                	mv	a0,s1
++    8000303c:	ffffe097          	auipc	ra,0xffffe
++    80003040:	e0c080e7          	jalr	-500(ra) # 80000e48 <strlen>
++}
++    80003044:	70a2                	ld	ra,40(sp)
++    80003046:	7402                	ld	s0,32(sp)
++    80003048:	64e2                	ld	s1,24(sp)
++    8000304a:	6942                	ld	s2,16(sp)
++    8000304c:	69a2                	ld	s3,8(sp)
++    8000304e:	6145                	addi	sp,sp,48
++    80003050:	8082                	ret
++
++0000000080003052 <argint>:
++
++// Fetch the nth 32-bit system call argument.
++int
++argint(int n, int *ip)
++{
++    80003052:	1101                	addi	sp,sp,-32
++    80003054:	ec06                	sd	ra,24(sp)
++    80003056:	e822                	sd	s0,16(sp)
++    80003058:	e426                	sd	s1,8(sp)
++    8000305a:	1000                	addi	s0,sp,32
++    8000305c:	84ae                	mv	s1,a1
++  *ip = argraw(n);
++    8000305e:	00000097          	auipc	ra,0x0
++    80003062:	ef2080e7          	jalr	-270(ra) # 80002f50 <argraw>
++    80003066:	c088                	sw	a0,0(s1)
++  return 0;
++}
++    80003068:	4501                	li	a0,0
++    8000306a:	60e2                	ld	ra,24(sp)
++    8000306c:	6442                	ld	s0,16(sp)
++    8000306e:	64a2                	ld	s1,8(sp)
++    80003070:	6105                	addi	sp,sp,32
++    80003072:	8082                	ret
++
++0000000080003074 <argaddr>:
++// Retrieve an argument as a pointer.
++// Doesn't check for legality, since
++// copyin/copyout will do that.
++int
++argaddr(int n, uint64 *ip)
++{
++    80003074:	1101                	addi	sp,sp,-32
++    80003076:	ec06                	sd	ra,24(sp)
++    80003078:	e822                	sd	s0,16(sp)
++    8000307a:	e426                	sd	s1,8(sp)
++    8000307c:	1000                	addi	s0,sp,32
++    8000307e:	84ae                	mv	s1,a1
++  *ip = argraw(n);
++    80003080:	00000097          	auipc	ra,0x0
++    80003084:	ed0080e7          	jalr	-304(ra) # 80002f50 <argraw>
++    80003088:	e088                	sd	a0,0(s1)
++  return 0;
++}
++    8000308a:	4501                	li	a0,0
++    8000308c:	60e2                	ld	ra,24(sp)
++    8000308e:	6442                	ld	s0,16(sp)
++    80003090:	64a2                	ld	s1,8(sp)
++    80003092:	6105                	addi	sp,sp,32
++    80003094:	8082                	ret
++
++0000000080003096 <argstr>:
++// Fetch the nth word-sized system call argument as a null-terminated string.
++// Copies into buf, at most max.
++// Returns string length if OK (including nul), -1 if error.
++int
++argstr(int n, char *buf, int max)
++{
++    80003096:	1101                	addi	sp,sp,-32
++    80003098:	ec06                	sd	ra,24(sp)
++    8000309a:	e822                	sd	s0,16(sp)
++    8000309c:	e426                	sd	s1,8(sp)
++    8000309e:	e04a                	sd	s2,0(sp)
++    800030a0:	1000                	addi	s0,sp,32
++    800030a2:	84ae                	mv	s1,a1
++    800030a4:	8932                	mv	s2,a2
++  *ip = argraw(n);
++    800030a6:	00000097          	auipc	ra,0x0
++    800030aa:	eaa080e7          	jalr	-342(ra) # 80002f50 <argraw>
++  uint64 addr;
++  if(argaddr(n, &addr) < 0)
++    return -1;
++  return fetchstr(addr, buf, max);
++    800030ae:	864a                	mv	a2,s2
++    800030b0:	85a6                	mv	a1,s1
++    800030b2:	00000097          	auipc	ra,0x0
++    800030b6:	f58080e7          	jalr	-168(ra) # 8000300a <fetchstr>
++}
++    800030ba:	60e2                	ld	ra,24(sp)
++    800030bc:	6442                	ld	s0,16(sp)
++    800030be:	64a2                	ld	s1,8(sp)
++    800030c0:	6902                	ld	s2,0(sp)
++    800030c2:	6105                	addi	sp,sp,32
++    800030c4:	8082                	ret
++
++00000000800030c6 <syscall>:
++[SYS_timeout] sys_timeout,
++};
++
++void
++syscall(void)
++{
++    800030c6:	1101                	addi	sp,sp,-32
++    800030c8:	ec06                	sd	ra,24(sp)
++    800030ca:	e822                	sd	s0,16(sp)
++    800030cc:	e426                	sd	s1,8(sp)
++    800030ce:	e04a                	sd	s2,0(sp)
++    800030d0:	1000                	addi	s0,sp,32
++  int num;
++  struct proc *p = myproc();
++    800030d2:	fffff097          	auipc	ra,0xfffff
++    800030d6:	ca4080e7          	jalr	-860(ra) # 80001d76 <myproc>
++    800030da:	84aa                	mv	s1,a0
++
++  num = p->trapframe->a7;
++    800030dc:	05853903          	ld	s2,88(a0)
++    800030e0:	0a893783          	ld	a5,168(s2)
++    800030e4:	0007869b          	sext.w	a3,a5
++  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
++    800030e8:	37fd                	addiw	a5,a5,-1
++    800030ea:	4769                	li	a4,26
++    800030ec:	00f76f63          	bltu	a4,a5,8000310a <syscall+0x44>
++    800030f0:	00369713          	slli	a4,a3,0x3
++    800030f4:	00005797          	auipc	a5,0x5
++    800030f8:	39478793          	addi	a5,a5,916 # 80008488 <syscalls>
++    800030fc:	97ba                	add	a5,a5,a4
++    800030fe:	639c                	ld	a5,0(a5)
++    80003100:	c789                	beqz	a5,8000310a <syscall+0x44>
++    p->trapframe->a0 = syscalls[num]();
++    80003102:	9782                	jalr	a5
++    80003104:	06a93823          	sd	a0,112(s2)
++    80003108:	a839                	j	80003126 <syscall+0x60>
++  } else {
++    printf("%d %s: unknown sys call %d\n",
++    8000310a:	1d848613          	addi	a2,s1,472
++    8000310e:	588c                	lw	a1,48(s1)
++    80003110:	00005517          	auipc	a0,0x5
++    80003114:	34050513          	addi	a0,a0,832 # 80008450 <states.0+0x150>
++    80003118:	ffffd097          	auipc	ra,0xffffd
++    8000311c:	46c080e7          	jalr	1132(ra) # 80000584 <printf>
++            p->pid, p->name, num);
++    p->trapframe->a0 = -1;
++    80003120:	6cbc                	ld	a5,88(s1)
++    80003122:	577d                	li	a4,-1
++    80003124:	fbb8                	sd	a4,112(a5)
++  }
++}
++    80003126:	60e2                	ld	ra,24(sp)
++    80003128:	6442                	ld	s0,16(sp)
++    8000312a:	64a2                	ld	s1,8(sp)
++    8000312c:	6902                	ld	s2,0(sp)
++    8000312e:	6105                	addi	sp,sp,32
++    80003130:	8082                	ret
++
++0000000080003132 <sys_exit>:
++#include "spinlock.h"
++#include "proc.h"
++
++uint64
++sys_exit(void)
++{
++    80003132:	1101                	addi	sp,sp,-32
++    80003134:	ec06                	sd	ra,24(sp)
++    80003136:	e822                	sd	s0,16(sp)
++    80003138:	1000                	addi	s0,sp,32
++  int n;
++  if(argint(0, &n) < 0)
++    8000313a:	fec40593          	addi	a1,s0,-20
++    8000313e:	4501                	li	a0,0
++    80003140:	00000097          	auipc	ra,0x0
++    80003144:	f12080e7          	jalr	-238(ra) # 80003052 <argint>
++    return -1;
++    80003148:	57fd                	li	a5,-1
++  if(argint(0, &n) < 0)
++    8000314a:	00054963          	bltz	a0,8000315c <sys_exit+0x2a>
++  exit(n);
++    8000314e:	fec42503          	lw	a0,-20(s0)
++    80003152:	fffff097          	auipc	ra,0xfffff
++    80003156:	6bc080e7          	jalr	1724(ra) # 8000280e <exit>
++  return 0;  // not reached
++    8000315a:	4781                	li	a5,0
++}
++    8000315c:	853e                	mv	a0,a5
++    8000315e:	60e2                	ld	ra,24(sp)
++    80003160:	6442                	ld	s0,16(sp)
++    80003162:	6105                	addi	sp,sp,32
++    80003164:	8082                	ret
++
++0000000080003166 <sys_getpid>:
++
++uint64
++sys_getpid(void)
++{
++    80003166:	1141                	addi	sp,sp,-16
++    80003168:	e406                	sd	ra,8(sp)
++    8000316a:	e022                	sd	s0,0(sp)
++    8000316c:	0800                	addi	s0,sp,16
++  return myproc()->pid;
++    8000316e:	fffff097          	auipc	ra,0xfffff
++    80003172:	c08080e7          	jalr	-1016(ra) # 80001d76 <myproc>
++}
++    80003176:	5908                	lw	a0,48(a0)
++    80003178:	60a2                	ld	ra,8(sp)
++    8000317a:	6402                	ld	s0,0(sp)
++    8000317c:	0141                	addi	sp,sp,16
++    8000317e:	8082                	ret
++
++0000000080003180 <sys_setp>:
++
++uint64
++sys_setp(void)
++{
++    80003180:	1101                	addi	sp,sp,-32
++    80003182:	ec06                	sd	ra,24(sp)
++    80003184:	e822                	sd	s0,16(sp)
++    80003186:	1000                	addi	s0,sp,32
++  int level;
++  argint(0, &level);  // fetch param from register
++    80003188:	fec40593          	addi	a1,s0,-20
++    8000318c:	4501                	li	a0,0
++    8000318e:	00000097          	auipc	ra,0x0
++    80003192:	ec4080e7          	jalr	-316(ra) # 80003052 <argint>
++  if(level > MLFLEVELS)
++    80003196:	fec42783          	lw	a5,-20(s0)
++    8000319a:	4711                	li	a4,4
++    8000319c:	02f75463          	bge	a4,a5,800031c4 <sys_setp+0x44>
++    level = MLFLEVELS;
++    800031a0:	4791                	li	a5,4
++    800031a2:	fef42623          	sw	a5,-20(s0)
++  else if(level < 1)
++    level = 1;
++  struct proc *p = myproc();
++    800031a6:	fffff097          	auipc	ra,0xfffff
++    800031aa:	bd0080e7          	jalr	-1072(ra) # 80001d76 <myproc>
++    800031ae:	87aa                	mv	a5,a0
++  uint64 prevlvl = p->mlflevel;
++    800031b0:	1f852503          	lw	a0,504(a0)
++  p->mlflevel = level;
++    800031b4:	fec42703          	lw	a4,-20(s0)
++    800031b8:	1ee7ac23          	sw	a4,504(a5)
++  return prevlvl;
++}
++    800031bc:	60e2                	ld	ra,24(sp)
++    800031be:	6442                	ld	s0,16(sp)
++    800031c0:	6105                	addi	sp,sp,32
++    800031c2:	8082                	ret
++  else if(level < 1)
++    800031c4:	fef041e3          	bgtz	a5,800031a6 <sys_setp+0x26>
++    level = 1;
++    800031c8:	4785                	li	a5,1
++    800031ca:	fef42623          	sw	a5,-20(s0)
++    800031ce:	bfe1                	j	800031a6 <sys_setp+0x26>
++
++00000000800031d0 <sys_fork>:
++
++uint64
++sys_fork(void)
++{
++    800031d0:	1141                	addi	sp,sp,-16
++    800031d2:	e406                	sd	ra,8(sp)
++    800031d4:	e022                	sd	s0,0(sp)
++    800031d6:	0800                	addi	s0,sp,16
++  return fork();
++    800031d8:	fffff097          	auipc	ra,0xfffff
++    800031dc:	f78080e7          	jalr	-136(ra) # 80002150 <fork>
++}
++    800031e0:	60a2                	ld	ra,8(sp)
++    800031e2:	6402                	ld	s0,0(sp)
++    800031e4:	0141                	addi	sp,sp,16
++    800031e6:	8082                	ret
++
++00000000800031e8 <sys_wait>:
++
++uint64
++sys_wait(void)
++{
++    800031e8:	1101                	addi	sp,sp,-32
++    800031ea:	ec06                	sd	ra,24(sp)
++    800031ec:	e822                	sd	s0,16(sp)
++    800031ee:	1000                	addi	s0,sp,32
++  uint64 p;
++  if(argaddr(0, &p) < 0)
++    800031f0:	fe840593          	addi	a1,s0,-24
++    800031f4:	4501                	li	a0,0
++    800031f6:	00000097          	auipc	ra,0x0
++    800031fa:	e7e080e7          	jalr	-386(ra) # 80003074 <argaddr>
++    800031fe:	87aa                	mv	a5,a0
++    return -1;
++    80003200:	557d                	li	a0,-1
++  if(argaddr(0, &p) < 0)
++    80003202:	0007c863          	bltz	a5,80003212 <sys_wait+0x2a>
++  return wait(p);
++    80003206:	fe843503          	ld	a0,-24(s0)
++    8000320a:	fffff097          	auipc	ra,0xfffff
++    8000320e:	406080e7          	jalr	1030(ra) # 80002610 <wait>
++}
++    80003212:	60e2                	ld	ra,24(sp)
++    80003214:	6442                	ld	s0,16(sp)
++    80003216:	6105                	addi	sp,sp,32
++    80003218:	8082                	ret
++
++000000008000321a <sys_sbrk>:
++
++uint64
++sys_sbrk(void)
++{
++    8000321a:	7179                	addi	sp,sp,-48
++    8000321c:	f406                	sd	ra,40(sp)
++    8000321e:	f022                	sd	s0,32(sp)
++    80003220:	ec26                	sd	s1,24(sp)
++    80003222:	1800                	addi	s0,sp,48
++  int addr;
++  int n;
++
++  if(argint(0, &n) < 0)
++    80003224:	fdc40593          	addi	a1,s0,-36
++    80003228:	4501                	li	a0,0
++    8000322a:	00000097          	auipc	ra,0x0
++    8000322e:	e28080e7          	jalr	-472(ra) # 80003052 <argint>
++    80003232:	87aa                	mv	a5,a0
++    return -1;
++    80003234:	557d                	li	a0,-1
++  if(argint(0, &n) < 0)
++    80003236:	0207c063          	bltz	a5,80003256 <sys_sbrk+0x3c>
++  addr = myproc()->sz;
++    8000323a:	fffff097          	auipc	ra,0xfffff
++    8000323e:	b3c080e7          	jalr	-1220(ra) # 80001d76 <myproc>
++    80003242:	4524                	lw	s1,72(a0)
++  if(growproc(n) < 0)
++    80003244:	fdc42503          	lw	a0,-36(s0)
++    80003248:	fffff097          	auipc	ra,0xfffff
++    8000324c:	e90080e7          	jalr	-368(ra) # 800020d8 <growproc>
++    80003250:	00054863          	bltz	a0,80003260 <sys_sbrk+0x46>
++    return -1;
++  return addr;
++    80003254:	8526                	mv	a0,s1
++}
++    80003256:	70a2                	ld	ra,40(sp)
++    80003258:	7402                	ld	s0,32(sp)
++    8000325a:	64e2                	ld	s1,24(sp)
++    8000325c:	6145                	addi	sp,sp,48
++    8000325e:	8082                	ret
++    return -1;
++    80003260:	557d                	li	a0,-1
++    80003262:	bfd5                	j	80003256 <sys_sbrk+0x3c>
++
++0000000080003264 <sys_sleep>:
++
++uint64
++sys_sleep(void)
++{
++    80003264:	7139                	addi	sp,sp,-64
++    80003266:	fc06                	sd	ra,56(sp)
++    80003268:	f822                	sd	s0,48(sp)
++    8000326a:	f426                	sd	s1,40(sp)
++    8000326c:	f04a                	sd	s2,32(sp)
++    8000326e:	ec4e                	sd	s3,24(sp)
++    80003270:	0080                	addi	s0,sp,64
++  int n;
++  uint ticks0;
++
++  if(argint(0, &n) < 0)
++    80003272:	fcc40593          	addi	a1,s0,-52
++    80003276:	4501                	li	a0,0
++    80003278:	00000097          	auipc	ra,0x0
++    8000327c:	dda080e7          	jalr	-550(ra) # 80003052 <argint>
++    return -1;
++    80003280:	57fd                	li	a5,-1
++  if(argint(0, &n) < 0)
++    80003282:	06054563          	bltz	a0,800032ec <sys_sleep+0x88>
++  acquire(&tickslock);
++    80003286:	00017517          	auipc	a0,0x17
++    8000328a:	44250513          	addi	a0,a0,1090 # 8001a6c8 <tickslock>
++    8000328e:	ffffe097          	auipc	ra,0xffffe
++    80003292:	942080e7          	jalr	-1726(ra) # 80000bd0 <acquire>
++  ticks0 = ticks;
++    80003296:	00006917          	auipc	s2,0x6
++    8000329a:	d9a92903          	lw	s2,-614(s2) # 80009030 <ticks>
++  while(ticks - ticks0 < n){
++    8000329e:	fcc42783          	lw	a5,-52(s0)
++    800032a2:	cf85                	beqz	a5,800032da <sys_sleep+0x76>
++    if(myproc()->killed){
++      release(&tickslock);
++      return -1;
++    }
++    sleep(&ticks, &tickslock);
++    800032a4:	00017997          	auipc	s3,0x17
++    800032a8:	42498993          	addi	s3,s3,1060 # 8001a6c8 <tickslock>
++    800032ac:	00006497          	auipc	s1,0x6
++    800032b0:	d8448493          	addi	s1,s1,-636 # 80009030 <ticks>
++    if(myproc()->killed){
++    800032b4:	fffff097          	auipc	ra,0xfffff
++    800032b8:	ac2080e7          	jalr	-1342(ra) # 80001d76 <myproc>
++    800032bc:	551c                	lw	a5,40(a0)
++    800032be:	ef9d                	bnez	a5,800032fc <sys_sleep+0x98>
++    sleep(&ticks, &tickslock);
++    800032c0:	85ce                	mv	a1,s3
++    800032c2:	8526                	mv	a0,s1
++    800032c4:	fffff097          	auipc	ra,0xfffff
++    800032c8:	2e8080e7          	jalr	744(ra) # 800025ac <sleep>
++  while(ticks - ticks0 < n){
++    800032cc:	409c                	lw	a5,0(s1)
++    800032ce:	412787bb          	subw	a5,a5,s2
++    800032d2:	fcc42703          	lw	a4,-52(s0)
++    800032d6:	fce7efe3          	bltu	a5,a4,800032b4 <sys_sleep+0x50>
++  }
++  release(&tickslock);
++    800032da:	00017517          	auipc	a0,0x17
++    800032de:	3ee50513          	addi	a0,a0,1006 # 8001a6c8 <tickslock>
++    800032e2:	ffffe097          	auipc	ra,0xffffe
++    800032e6:	9a2080e7          	jalr	-1630(ra) # 80000c84 <release>
++  return 0;
++    800032ea:	4781                	li	a5,0
++}
++    800032ec:	853e                	mv	a0,a5
++    800032ee:	70e2                	ld	ra,56(sp)
++    800032f0:	7442                	ld	s0,48(sp)
++    800032f2:	74a2                	ld	s1,40(sp)
++    800032f4:	7902                	ld	s2,32(sp)
++    800032f6:	69e2                	ld	s3,24(sp)
++    800032f8:	6121                	addi	sp,sp,64
++    800032fa:	8082                	ret
++      release(&tickslock);
++    800032fc:	00017517          	auipc	a0,0x17
++    80003300:	3cc50513          	addi	a0,a0,972 # 8001a6c8 <tickslock>
++    80003304:	ffffe097          	auipc	ra,0xffffe
++    80003308:	980080e7          	jalr	-1664(ra) # 80000c84 <release>
++      return -1;
++    8000330c:	57fd                	li	a5,-1
++    8000330e:	bff9                	j	800032ec <sys_sleep+0x88>
++
++0000000080003310 <sys_kill>:
++
++uint64
++sys_kill(void)
++{
++    80003310:	1101                	addi	sp,sp,-32
++    80003312:	ec06                	sd	ra,24(sp)
++    80003314:	e822                	sd	s0,16(sp)
++    80003316:	1000                	addi	s0,sp,32
++  int pid;
++
++  if(argint(0, &pid) < 0)
++    80003318:	fec40593          	addi	a1,s0,-20
++    8000331c:	4501                	li	a0,0
++    8000331e:	00000097          	auipc	ra,0x0
++    80003322:	d34080e7          	jalr	-716(ra) # 80003052 <argint>
++    80003326:	87aa                	mv	a5,a0
++    return -1;
++    80003328:	557d                	li	a0,-1
++  if(argint(0, &pid) < 0)
++    8000332a:	0007c863          	bltz	a5,8000333a <sys_kill+0x2a>
++  return kill(pid);
++    8000332e:	fec42503          	lw	a0,-20(s0)
++    80003332:	fffff097          	auipc	ra,0xfffff
++    80003336:	5c6080e7          	jalr	1478(ra) # 800028f8 <kill>
++}
++    8000333a:	60e2                	ld	ra,24(sp)
++    8000333c:	6442                	ld	s0,16(sp)
++    8000333e:	6105                	addi	sp,sp,32
++    80003340:	8082                	ret
++
++0000000080003342 <sys_uptime>:
++
++// return how many clock tick interrupts have occurred
++// since start.
++uint64
++sys_uptime(void)
++{
++    80003342:	1101                	addi	sp,sp,-32
++    80003344:	ec06                	sd	ra,24(sp)
++    80003346:	e822                	sd	s0,16(sp)
++    80003348:	e426                	sd	s1,8(sp)
++    8000334a:	1000                	addi	s0,sp,32
++  uint xticks;
++
++  acquire(&tickslock);
++    8000334c:	00017517          	auipc	a0,0x17
++    80003350:	37c50513          	addi	a0,a0,892 # 8001a6c8 <tickslock>
++    80003354:	ffffe097          	auipc	ra,0xffffe
++    80003358:	87c080e7          	jalr	-1924(ra) # 80000bd0 <acquire>
++  xticks = ticks;
++    8000335c:	00006497          	auipc	s1,0x6
++    80003360:	cd44a483          	lw	s1,-812(s1) # 80009030 <ticks>
++  release(&tickslock);
++    80003364:	00017517          	auipc	a0,0x17
++    80003368:	36450513          	addi	a0,a0,868 # 8001a6c8 <tickslock>
++    8000336c:	ffffe097          	auipc	ra,0xffffe
++    80003370:	918080e7          	jalr	-1768(ra) # 80000c84 <release>
++  return xticks;
++}
++    80003374:	02049513          	slli	a0,s1,0x20
++    80003378:	9101                	srli	a0,a0,0x20
++    8000337a:	60e2                	ld	ra,24(sp)
++    8000337c:	6442                	ld	s0,16(sp)
++    8000337e:	64a2                	ld	s1,8(sp)
++    80003380:	6105                	addi	sp,sp,32
++    80003382:	8082                	ret
++
++0000000080003384 <sys_timeout>:
++
++uint64
++sys_timeout(void)
++{
++    80003384:	1101                	addi	sp,sp,-32
++    80003386:	ec06                	sd	ra,24(sp)
++    80003388:	e822                	sd	s0,16(sp)
++    8000338a:	1000                	addi	s0,sp,32
++  int loops;
++  argint(0, &loops);  // fetch param from register
++    8000338c:	fec40593          	addi	a1,s0,-20
++    80003390:	4501                	li	a0,0
++    80003392:	00000097          	auipc	ra,0x0
++    80003396:	cc0080e7          	jalr	-832(ra) # 80003052 <argint>
++  for (int i = 0; i < loops * 10000; i++) {};
++    8000339a:	fec42783          	lw	a5,-20(s0)
++    8000339e:	6709                	lui	a4,0x2
++    800033a0:	7107071b          	addiw	a4,a4,1808 # 2710 <_entry-0x7fffd8f0>
++    800033a4:	02f7073b          	mulw	a4,a4,a5
++    800033a8:	00e05663          	blez	a4,800033b4 <sys_timeout+0x30>
++    800033ac:	4781                	li	a5,0
++    800033ae:	2785                	addiw	a5,a5,1
++    800033b0:	fee79fe3          	bne	a5,a4,800033ae <sys_timeout+0x2a>
++  return 0;
++}
++    800033b4:	4501                	li	a0,0
++    800033b6:	60e2                	ld	ra,24(sp)
++    800033b8:	6442                	ld	s0,16(sp)
++    800033ba:	6105                	addi	sp,sp,32
++    800033bc:	8082                	ret
++
++00000000800033be <sys_semget>:
++#include "proc.h"
++#include "sem.h"
++
++uint64
++sys_semget(void)
++{
++    800033be:	1101                	addi	sp,sp,-32
++    800033c0:	ec06                	sd	ra,24(sp)
++    800033c2:	e822                	sd	s0,16(sp)
++    800033c4:	1000                	addi	s0,sp,32
++  int key;
++  argint(0, &key);
++    800033c6:	fec40593          	addi	a1,s0,-20
++    800033ca:	4501                	li	a0,0
++    800033cc:	00000097          	auipc	ra,0x0
++    800033d0:	c86080e7          	jalr	-890(ra) # 80003052 <argint>
++  int value;
++  argint(1, &value);
++    800033d4:	fe840593          	addi	a1,s0,-24
++    800033d8:	4505                	li	a0,1
++    800033da:	00000097          	auipc	ra,0x0
++    800033de:	c78080e7          	jalr	-904(ra) # 80003052 <argint>
++  return semget(key,value);
++    800033e2:	fe842583          	lw	a1,-24(s0)
++    800033e6:	fec42503          	lw	a0,-20(s0)
++    800033ea:	ffffe097          	auipc	ra,0xffffe
++    800033ee:	494080e7          	jalr	1172(ra) # 8000187e <semget>
++}
++    800033f2:	60e2                	ld	ra,24(sp)
++    800033f4:	6442                	ld	s0,16(sp)
++    800033f6:	6105                	addi	sp,sp,32
++    800033f8:	8082                	ret
++
++00000000800033fa <sys_semdown>:
++
++uint64
++sys_semdown(void)
++{
++    800033fa:	1101                	addi	sp,sp,-32
++    800033fc:	ec06                	sd	ra,24(sp)
++    800033fe:	e822                	sd	s0,16(sp)
++    80003400:	1000                	addi	s0,sp,32
++  int sid;
++  argint(0, &sid);
++    80003402:	fec40593          	addi	a1,s0,-20
++    80003406:	4501                	li	a0,0
++    80003408:	00000097          	auipc	ra,0x0
++    8000340c:	c4a080e7          	jalr	-950(ra) # 80003052 <argint>
++  return semdown(sid);
++    80003410:	fec42503          	lw	a0,-20(s0)
++    80003414:	ffffe097          	auipc	ra,0xffffe
++    80003418:	5f6080e7          	jalr	1526(ra) # 80001a0a <semdown>
++}
++    8000341c:	60e2                	ld	ra,24(sp)
++    8000341e:	6442                	ld	s0,16(sp)
++    80003420:	6105                	addi	sp,sp,32
++    80003422:	8082                	ret
++
++0000000080003424 <sys_semup>:
++
++uint64
++sys_semup(void)
++{
++    80003424:	1101                	addi	sp,sp,-32
++    80003426:	ec06                	sd	ra,24(sp)
++    80003428:	e822                	sd	s0,16(sp)
++    8000342a:	1000                	addi	s0,sp,32
++  int sid;
++  argint(0, &sid);
++    8000342c:	fec40593          	addi	a1,s0,-20
++    80003430:	4501                	li	a0,0
++    80003432:	00000097          	auipc	ra,0x0
++    80003436:	c20080e7          	jalr	-992(ra) # 80003052 <argint>
++  return semup(sid);
++    8000343a:	fec42503          	lw	a0,-20(s0)
++    8000343e:	ffffe097          	auipc	ra,0xffffe
++    80003442:	666080e7          	jalr	1638(ra) # 80001aa4 <semup>
++}
++    80003446:	60e2                	ld	ra,24(sp)
++    80003448:	6442                	ld	s0,16(sp)
++    8000344a:	6105                	addi	sp,sp,32
++    8000344c:	8082                	ret
++
++000000008000344e <sys_semclose>:
++
++uint64
++sys_semclose(void)
++{
++    8000344e:	1101                	addi	sp,sp,-32
++    80003450:	ec06                	sd	ra,24(sp)
++    80003452:	e822                	sd	s0,16(sp)
++    80003454:	1000                	addi	s0,sp,32
++  int sid;
++  argint(0, &sid);
++    80003456:	fec40593          	addi	a1,s0,-20
++    8000345a:	4501                	li	a0,0
++    8000345c:	00000097          	auipc	ra,0x0
++    80003460:	bf6080e7          	jalr	-1034(ra) # 80003052 <argint>
++  return semclose(sid);
++    80003464:	fec42503          	lw	a0,-20(s0)
++    80003468:	ffffe097          	auipc	ra,0xffffe
++    8000346c:	52e080e7          	jalr	1326(ra) # 80001996 <semclose>
++}
++    80003470:	60e2                	ld	ra,24(sp)
++    80003472:	6442                	ld	s0,16(sp)
++    80003474:	6105                	addi	sp,sp,32
++    80003476:	8082                	ret
++
++0000000080003478 <binit>:
++  struct buf head;
++} bcache;
++
++void
++binit(void)
++{
++    80003478:	7179                	addi	sp,sp,-48
++    8000347a:	f406                	sd	ra,40(sp)
++    8000347c:	f022                	sd	s0,32(sp)
++    8000347e:	ec26                	sd	s1,24(sp)
++    80003480:	e84a                	sd	s2,16(sp)
++    80003482:	e44e                	sd	s3,8(sp)
++    80003484:	e052                	sd	s4,0(sp)
++    80003486:	1800                	addi	s0,sp,48
++  struct buf *b;
++
++  initlock(&bcache.lock, "bcache");
++    80003488:	00005597          	auipc	a1,0x5
++    8000348c:	0e058593          	addi	a1,a1,224 # 80008568 <syscalls+0xe0>
++    80003490:	00017517          	auipc	a0,0x17
++    80003494:	25050513          	addi	a0,a0,592 # 8001a6e0 <bcache>
++    80003498:	ffffd097          	auipc	ra,0xffffd
++    8000349c:	6a8080e7          	jalr	1704(ra) # 80000b40 <initlock>
++
++  // Create linked list of buffers
++  bcache.head.prev = &bcache.head;
++    800034a0:	0001f797          	auipc	a5,0x1f
++    800034a4:	24078793          	addi	a5,a5,576 # 800226e0 <bcache+0x8000>
++    800034a8:	0001f717          	auipc	a4,0x1f
++    800034ac:	4a070713          	addi	a4,a4,1184 # 80022948 <bcache+0x8268>
++    800034b0:	2ae7b823          	sd	a4,688(a5)
++  bcache.head.next = &bcache.head;
++    800034b4:	2ae7bc23          	sd	a4,696(a5)
++  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
++    800034b8:	00017497          	auipc	s1,0x17
++    800034bc:	24048493          	addi	s1,s1,576 # 8001a6f8 <bcache+0x18>
++    b->next = bcache.head.next;
++    800034c0:	893e                	mv	s2,a5
++    b->prev = &bcache.head;
++    800034c2:	89ba                	mv	s3,a4
++    initsleeplock(&b->lock, "buffer");
++    800034c4:	00005a17          	auipc	s4,0x5
++    800034c8:	0aca0a13          	addi	s4,s4,172 # 80008570 <syscalls+0xe8>
++    b->next = bcache.head.next;
++    800034cc:	2b893783          	ld	a5,696(s2)
++    800034d0:	e8bc                	sd	a5,80(s1)
++    b->prev = &bcache.head;
++    800034d2:	0534b423          	sd	s3,72(s1)
++    initsleeplock(&b->lock, "buffer");
++    800034d6:	85d2                	mv	a1,s4
++    800034d8:	01048513          	addi	a0,s1,16
++    800034dc:	00001097          	auipc	ra,0x1
++    800034e0:	4c2080e7          	jalr	1218(ra) # 8000499e <initsleeplock>
++    bcache.head.next->prev = b;
++    800034e4:	2b893783          	ld	a5,696(s2)
++    800034e8:	e7a4                	sd	s1,72(a5)
++    bcache.head.next = b;
++    800034ea:	2a993c23          	sd	s1,696(s2)
++  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
++    800034ee:	45848493          	addi	s1,s1,1112
++    800034f2:	fd349de3          	bne	s1,s3,800034cc <binit+0x54>
++  }
++}
++    800034f6:	70a2                	ld	ra,40(sp)
++    800034f8:	7402                	ld	s0,32(sp)
++    800034fa:	64e2                	ld	s1,24(sp)
++    800034fc:	6942                	ld	s2,16(sp)
++    800034fe:	69a2                	ld	s3,8(sp)
++    80003500:	6a02                	ld	s4,0(sp)
++    80003502:	6145                	addi	sp,sp,48
++    80003504:	8082                	ret
++
++0000000080003506 <bread>:
++}
++
++// Return a locked buf with the contents of the indicated block.
++struct buf*
++bread(uint dev, uint blockno)
++{
++    80003506:	7179                	addi	sp,sp,-48
++    80003508:	f406                	sd	ra,40(sp)
++    8000350a:	f022                	sd	s0,32(sp)
++    8000350c:	ec26                	sd	s1,24(sp)
++    8000350e:	e84a                	sd	s2,16(sp)
++    80003510:	e44e                	sd	s3,8(sp)
++    80003512:	1800                	addi	s0,sp,48
++    80003514:	892a                	mv	s2,a0
++    80003516:	89ae                	mv	s3,a1
++  acquire(&bcache.lock);
++    80003518:	00017517          	auipc	a0,0x17
++    8000351c:	1c850513          	addi	a0,a0,456 # 8001a6e0 <bcache>
++    80003520:	ffffd097          	auipc	ra,0xffffd
++    80003524:	6b0080e7          	jalr	1712(ra) # 80000bd0 <acquire>
++  for(b = bcache.head.next; b != &bcache.head; b = b->next){
++    80003528:	0001f497          	auipc	s1,0x1f
++    8000352c:	4704b483          	ld	s1,1136(s1) # 80022998 <bcache+0x82b8>
++    80003530:	0001f797          	auipc	a5,0x1f
++    80003534:	41878793          	addi	a5,a5,1048 # 80022948 <bcache+0x8268>
++    80003538:	02f48f63          	beq	s1,a5,80003576 <bread+0x70>
++    8000353c:	873e                	mv	a4,a5
++    8000353e:	a021                	j	80003546 <bread+0x40>
++    80003540:	68a4                	ld	s1,80(s1)
++    80003542:	02e48a63          	beq	s1,a4,80003576 <bread+0x70>
++    if(b->dev == dev && b->blockno == blockno){
++    80003546:	449c                	lw	a5,8(s1)
++    80003548:	ff279ce3          	bne	a5,s2,80003540 <bread+0x3a>
++    8000354c:	44dc                	lw	a5,12(s1)
++    8000354e:	ff3799e3          	bne	a5,s3,80003540 <bread+0x3a>
++      b->refcnt++;
++    80003552:	40bc                	lw	a5,64(s1)
++    80003554:	2785                	addiw	a5,a5,1
++    80003556:	c0bc                	sw	a5,64(s1)
++      release(&bcache.lock);
++    80003558:	00017517          	auipc	a0,0x17
++    8000355c:	18850513          	addi	a0,a0,392 # 8001a6e0 <bcache>
++    80003560:	ffffd097          	auipc	ra,0xffffd
++    80003564:	724080e7          	jalr	1828(ra) # 80000c84 <release>
++      acquiresleep(&b->lock);
++    80003568:	01048513          	addi	a0,s1,16
++    8000356c:	00001097          	auipc	ra,0x1
++    80003570:	46c080e7          	jalr	1132(ra) # 800049d8 <acquiresleep>
++      return b;
++    80003574:	a8b9                	j	800035d2 <bread+0xcc>
++  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
++    80003576:	0001f497          	auipc	s1,0x1f
++    8000357a:	41a4b483          	ld	s1,1050(s1) # 80022990 <bcache+0x82b0>
++    8000357e:	0001f797          	auipc	a5,0x1f
++    80003582:	3ca78793          	addi	a5,a5,970 # 80022948 <bcache+0x8268>
++    80003586:	00f48863          	beq	s1,a5,80003596 <bread+0x90>
++    8000358a:	873e                	mv	a4,a5
++    if(b->refcnt == 0) {
++    8000358c:	40bc                	lw	a5,64(s1)
++    8000358e:	cf81                	beqz	a5,800035a6 <bread+0xa0>
++  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
++    80003590:	64a4                	ld	s1,72(s1)
++    80003592:	fee49de3          	bne	s1,a4,8000358c <bread+0x86>
++  panic("bget: no buffers");
++    80003596:	00005517          	auipc	a0,0x5
++    8000359a:	fe250513          	addi	a0,a0,-30 # 80008578 <syscalls+0xf0>
++    8000359e:	ffffd097          	auipc	ra,0xffffd
++    800035a2:	f9c080e7          	jalr	-100(ra) # 8000053a <panic>
++      b->dev = dev;
++    800035a6:	0124a423          	sw	s2,8(s1)
++      b->blockno = blockno;
++    800035aa:	0134a623          	sw	s3,12(s1)
++      b->valid = 0;
++    800035ae:	0004a023          	sw	zero,0(s1)
++      b->refcnt = 1;
++    800035b2:	4785                	li	a5,1
++    800035b4:	c0bc                	sw	a5,64(s1)
++      release(&bcache.lock);
++    800035b6:	00017517          	auipc	a0,0x17
++    800035ba:	12a50513          	addi	a0,a0,298 # 8001a6e0 <bcache>
++    800035be:	ffffd097          	auipc	ra,0xffffd
++    800035c2:	6c6080e7          	jalr	1734(ra) # 80000c84 <release>
++      acquiresleep(&b->lock);
++    800035c6:	01048513          	addi	a0,s1,16
++    800035ca:	00001097          	auipc	ra,0x1
++    800035ce:	40e080e7          	jalr	1038(ra) # 800049d8 <acquiresleep>
++  struct buf *b;
++
++  b = bget(dev, blockno);
++  if(!b->valid) {
++    800035d2:	409c                	lw	a5,0(s1)
++    800035d4:	cb89                	beqz	a5,800035e6 <bread+0xe0>
++    virtio_disk_rw(b, 0);
++    b->valid = 1;
++  }
++  return b;
++}
++    800035d6:	8526                	mv	a0,s1
++    800035d8:	70a2                	ld	ra,40(sp)
++    800035da:	7402                	ld	s0,32(sp)
++    800035dc:	64e2                	ld	s1,24(sp)
++    800035de:	6942                	ld	s2,16(sp)
++    800035e0:	69a2                	ld	s3,8(sp)
++    800035e2:	6145                	addi	sp,sp,48
++    800035e4:	8082                	ret
++    virtio_disk_rw(b, 0);
++    800035e6:	4581                	li	a1,0
++    800035e8:	8526                	mv	a0,s1
++    800035ea:	00003097          	auipc	ra,0x3
++    800035ee:	f28080e7          	jalr	-216(ra) # 80006512 <virtio_disk_rw>
++    b->valid = 1;
++    800035f2:	4785                	li	a5,1
++    800035f4:	c09c                	sw	a5,0(s1)
++  return b;
++    800035f6:	b7c5                	j	800035d6 <bread+0xd0>
++
++00000000800035f8 <bwrite>:
++
++// Write b's contents to disk.  Must be locked.
++void
++bwrite(struct buf *b)
++{
++    800035f8:	1101                	addi	sp,sp,-32
++    800035fa:	ec06                	sd	ra,24(sp)
++    800035fc:	e822                	sd	s0,16(sp)
++    800035fe:	e426                	sd	s1,8(sp)
++    80003600:	1000                	addi	s0,sp,32
++    80003602:	84aa                	mv	s1,a0
++  if(!holdingsleep(&b->lock))
++    80003604:	0541                	addi	a0,a0,16
++    80003606:	00001097          	auipc	ra,0x1
++    8000360a:	46c080e7          	jalr	1132(ra) # 80004a72 <holdingsleep>
++    8000360e:	cd01                	beqz	a0,80003626 <bwrite+0x2e>
++    panic("bwrite");
++  virtio_disk_rw(b, 1);
++    80003610:	4585                	li	a1,1
++    80003612:	8526                	mv	a0,s1
++    80003614:	00003097          	auipc	ra,0x3
++    80003618:	efe080e7          	jalr	-258(ra) # 80006512 <virtio_disk_rw>
++}
++    8000361c:	60e2                	ld	ra,24(sp)
++    8000361e:	6442                	ld	s0,16(sp)
++    80003620:	64a2                	ld	s1,8(sp)
++    80003622:	6105                	addi	sp,sp,32
++    80003624:	8082                	ret
++    panic("bwrite");
++    80003626:	00005517          	auipc	a0,0x5
++    8000362a:	f6a50513          	addi	a0,a0,-150 # 80008590 <syscalls+0x108>
++    8000362e:	ffffd097          	auipc	ra,0xffffd
++    80003632:	f0c080e7          	jalr	-244(ra) # 8000053a <panic>
++
++0000000080003636 <brelse>:
++
++// Release a locked buffer.
++// Move to the head of the most-recently-used list.
++void
++brelse(struct buf *b)
++{
++    80003636:	1101                	addi	sp,sp,-32
++    80003638:	ec06                	sd	ra,24(sp)
++    8000363a:	e822                	sd	s0,16(sp)
++    8000363c:	e426                	sd	s1,8(sp)
++    8000363e:	e04a                	sd	s2,0(sp)
++    80003640:	1000                	addi	s0,sp,32
++    80003642:	84aa                	mv	s1,a0
++  if(!holdingsleep(&b->lock))
++    80003644:	01050913          	addi	s2,a0,16
++    80003648:	854a                	mv	a0,s2
++    8000364a:	00001097          	auipc	ra,0x1
++    8000364e:	428080e7          	jalr	1064(ra) # 80004a72 <holdingsleep>
++    80003652:	c92d                	beqz	a0,800036c4 <brelse+0x8e>
++    panic("brelse");
++
++  releasesleep(&b->lock);
++    80003654:	854a                	mv	a0,s2
++    80003656:	00001097          	auipc	ra,0x1
++    8000365a:	3d8080e7          	jalr	984(ra) # 80004a2e <releasesleep>
++
++  acquire(&bcache.lock);
++    8000365e:	00017517          	auipc	a0,0x17
++    80003662:	08250513          	addi	a0,a0,130 # 8001a6e0 <bcache>
++    80003666:	ffffd097          	auipc	ra,0xffffd
++    8000366a:	56a080e7          	jalr	1386(ra) # 80000bd0 <acquire>
++  b->refcnt--;
++    8000366e:	40bc                	lw	a5,64(s1)
++    80003670:	37fd                	addiw	a5,a5,-1
++    80003672:	0007871b          	sext.w	a4,a5
++    80003676:	c0bc                	sw	a5,64(s1)
++  if (b->refcnt == 0) {
++    80003678:	eb05                	bnez	a4,800036a8 <brelse+0x72>
++    // no one is waiting for it.
++    b->next->prev = b->prev;
++    8000367a:	68bc                	ld	a5,80(s1)
++    8000367c:	64b8                	ld	a4,72(s1)
++    8000367e:	e7b8                	sd	a4,72(a5)
++    b->prev->next = b->next;
++    80003680:	64bc                	ld	a5,72(s1)
++    80003682:	68b8                	ld	a4,80(s1)
++    80003684:	ebb8                	sd	a4,80(a5)
++    b->next = bcache.head.next;
++    80003686:	0001f797          	auipc	a5,0x1f
++    8000368a:	05a78793          	addi	a5,a5,90 # 800226e0 <bcache+0x8000>
++    8000368e:	2b87b703          	ld	a4,696(a5)
++    80003692:	e8b8                	sd	a4,80(s1)
++    b->prev = &bcache.head;
++    80003694:	0001f717          	auipc	a4,0x1f
++    80003698:	2b470713          	addi	a4,a4,692 # 80022948 <bcache+0x8268>
++    8000369c:	e4b8                	sd	a4,72(s1)
++    bcache.head.next->prev = b;
++    8000369e:	2b87b703          	ld	a4,696(a5)
++    800036a2:	e724                	sd	s1,72(a4)
++    bcache.head.next = b;
++    800036a4:	2a97bc23          	sd	s1,696(a5)
++  }
++  
++  release(&bcache.lock);
++    800036a8:	00017517          	auipc	a0,0x17
++    800036ac:	03850513          	addi	a0,a0,56 # 8001a6e0 <bcache>
++    800036b0:	ffffd097          	auipc	ra,0xffffd
++    800036b4:	5d4080e7          	jalr	1492(ra) # 80000c84 <release>
++}
++    800036b8:	60e2                	ld	ra,24(sp)
++    800036ba:	6442                	ld	s0,16(sp)
++    800036bc:	64a2                	ld	s1,8(sp)
++    800036be:	6902                	ld	s2,0(sp)
++    800036c0:	6105                	addi	sp,sp,32
++    800036c2:	8082                	ret
++    panic("brelse");
++    800036c4:	00005517          	auipc	a0,0x5
++    800036c8:	ed450513          	addi	a0,a0,-300 # 80008598 <syscalls+0x110>
++    800036cc:	ffffd097          	auipc	ra,0xffffd
++    800036d0:	e6e080e7          	jalr	-402(ra) # 8000053a <panic>
++
++00000000800036d4 <bpin>:
++
++void
++bpin(struct buf *b) {
++    800036d4:	1101                	addi	sp,sp,-32
++    800036d6:	ec06                	sd	ra,24(sp)
++    800036d8:	e822                	sd	s0,16(sp)
++    800036da:	e426                	sd	s1,8(sp)
++    800036dc:	1000                	addi	s0,sp,32
++    800036de:	84aa                	mv	s1,a0
++  acquire(&bcache.lock);
++    800036e0:	00017517          	auipc	a0,0x17
++    800036e4:	00050513          	mv	a0,a0
++    800036e8:	ffffd097          	auipc	ra,0xffffd
++    800036ec:	4e8080e7          	jalr	1256(ra) # 80000bd0 <acquire>
++  b->refcnt++;
++    800036f0:	40bc                	lw	a5,64(s1)
++    800036f2:	2785                	addiw	a5,a5,1
++    800036f4:	c0bc                	sw	a5,64(s1)
++  release(&bcache.lock);
++    800036f6:	00017517          	auipc	a0,0x17
++    800036fa:	fea50513          	addi	a0,a0,-22 # 8001a6e0 <bcache>
++    800036fe:	ffffd097          	auipc	ra,0xffffd
++    80003702:	586080e7          	jalr	1414(ra) # 80000c84 <release>
++}
++    80003706:	60e2                	ld	ra,24(sp)
++    80003708:	6442                	ld	s0,16(sp)
++    8000370a:	64a2                	ld	s1,8(sp)
++    8000370c:	6105                	addi	sp,sp,32
++    8000370e:	8082                	ret
++
++0000000080003710 <bunpin>:
++
++void
++bunpin(struct buf *b) {
++    80003710:	1101                	addi	sp,sp,-32
++    80003712:	ec06                	sd	ra,24(sp)
++    80003714:	e822                	sd	s0,16(sp)
++    80003716:	e426                	sd	s1,8(sp)
++    80003718:	1000                	addi	s0,sp,32
++    8000371a:	84aa                	mv	s1,a0
++  acquire(&bcache.lock);
++    8000371c:	00017517          	auipc	a0,0x17
++    80003720:	fc450513          	addi	a0,a0,-60 # 8001a6e0 <bcache>
++    80003724:	ffffd097          	auipc	ra,0xffffd
++    80003728:	4ac080e7          	jalr	1196(ra) # 80000bd0 <acquire>
++  b->refcnt--;
++    8000372c:	40bc                	lw	a5,64(s1)
++    8000372e:	37fd                	addiw	a5,a5,-1
++    80003730:	c0bc                	sw	a5,64(s1)
++  release(&bcache.lock);
++    80003732:	00017517          	auipc	a0,0x17
++    80003736:	fae50513          	addi	a0,a0,-82 # 8001a6e0 <bcache>
++    8000373a:	ffffd097          	auipc	ra,0xffffd
++    8000373e:	54a080e7          	jalr	1354(ra) # 80000c84 <release>
++}
++    80003742:	60e2                	ld	ra,24(sp)
++    80003744:	6442                	ld	s0,16(sp)
++    80003746:	64a2                	ld	s1,8(sp)
++    80003748:	6105                	addi	sp,sp,32
++    8000374a:	8082                	ret
++
++000000008000374c <bfree>:
++}
++
++// Free a disk block.
++static void
++bfree(int dev, uint b)
++{
++    8000374c:	1101                	addi	sp,sp,-32
++    8000374e:	ec06                	sd	ra,24(sp)
++    80003750:	e822                	sd	s0,16(sp)
++    80003752:	e426                	sd	s1,8(sp)
++    80003754:	e04a                	sd	s2,0(sp)
++    80003756:	1000                	addi	s0,sp,32
++    80003758:	84ae                	mv	s1,a1
++  struct buf *bp;
++  int bi, m;
++
++  bp = bread(dev, BBLOCK(b, sb));
++    8000375a:	00d5d59b          	srliw	a1,a1,0xd
++    8000375e:	0001f797          	auipc	a5,0x1f
++    80003762:	65e7a783          	lw	a5,1630(a5) # 80022dbc <sb+0x1c>
++    80003766:	9dbd                	addw	a1,a1,a5
++    80003768:	00000097          	auipc	ra,0x0
++    8000376c:	d9e080e7          	jalr	-610(ra) # 80003506 <bread>
++  bi = b % BPB;
++  m = 1 << (bi % 8);
++    80003770:	0074f713          	andi	a4,s1,7
++    80003774:	4785                	li	a5,1
++    80003776:	00e797bb          	sllw	a5,a5,a4
++  if((bp->data[bi/8] & m) == 0)
++    8000377a:	14ce                	slli	s1,s1,0x33
++    8000377c:	90d9                	srli	s1,s1,0x36
++    8000377e:	00950733          	add	a4,a0,s1
++    80003782:	05874703          	lbu	a4,88(a4)
++    80003786:	00e7f6b3          	and	a3,a5,a4
++    8000378a:	c69d                	beqz	a3,800037b8 <bfree+0x6c>
++    8000378c:	892a                	mv	s2,a0
++    panic("freeing free block");
++  bp->data[bi/8] &= ~m;
++    8000378e:	94aa                	add	s1,s1,a0
++    80003790:	fff7c793          	not	a5,a5
++    80003794:	8f7d                	and	a4,a4,a5
++    80003796:	04e48c23          	sb	a4,88(s1)
++  log_write(bp);
++    8000379a:	00001097          	auipc	ra,0x1
++    8000379e:	120080e7          	jalr	288(ra) # 800048ba <log_write>
++  brelse(bp);
++    800037a2:	854a                	mv	a0,s2
++    800037a4:	00000097          	auipc	ra,0x0
++    800037a8:	e92080e7          	jalr	-366(ra) # 80003636 <brelse>
++}
++    800037ac:	60e2                	ld	ra,24(sp)
++    800037ae:	6442                	ld	s0,16(sp)
++    800037b0:	64a2                	ld	s1,8(sp)
++    800037b2:	6902                	ld	s2,0(sp)
++    800037b4:	6105                	addi	sp,sp,32
++    800037b6:	8082                	ret
++    panic("freeing free block");
++    800037b8:	00005517          	auipc	a0,0x5
++    800037bc:	de850513          	addi	a0,a0,-536 # 800085a0 <syscalls+0x118>
++    800037c0:	ffffd097          	auipc	ra,0xffffd
++    800037c4:	d7a080e7          	jalr	-646(ra) # 8000053a <panic>
++
++00000000800037c8 <balloc>:
++{
++    800037c8:	711d                	addi	sp,sp,-96
++    800037ca:	ec86                	sd	ra,88(sp)
++    800037cc:	e8a2                	sd	s0,80(sp)
++    800037ce:	e4a6                	sd	s1,72(sp)
++    800037d0:	e0ca                	sd	s2,64(sp)
++    800037d2:	fc4e                	sd	s3,56(sp)
++    800037d4:	f852                	sd	s4,48(sp)
++    800037d6:	f456                	sd	s5,40(sp)
++    800037d8:	f05a                	sd	s6,32(sp)
++    800037da:	ec5e                	sd	s7,24(sp)
++    800037dc:	e862                	sd	s8,16(sp)
++    800037de:	e466                	sd	s9,8(sp)
++    800037e0:	1080                	addi	s0,sp,96
++  for(b = 0; b < sb.size; b += BPB){
++    800037e2:	0001f797          	auipc	a5,0x1f
++    800037e6:	5c27a783          	lw	a5,1474(a5) # 80022da4 <sb+0x4>
++    800037ea:	cbc1                	beqz	a5,8000387a <balloc+0xb2>
++    800037ec:	8baa                	mv	s7,a0
++    800037ee:	4a81                	li	s5,0
++    bp = bread(dev, BBLOCK(b, sb));
++    800037f0:	0001fb17          	auipc	s6,0x1f
++    800037f4:	5b0b0b13          	addi	s6,s6,1456 # 80022da0 <sb>
++    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
++    800037f8:	4c01                	li	s8,0
++      m = 1 << (bi % 8);
++    800037fa:	4985                	li	s3,1
++    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
++    800037fc:	6a09                	lui	s4,0x2
++  for(b = 0; b < sb.size; b += BPB){
++    800037fe:	6c89                	lui	s9,0x2
++    80003800:	a831                	j	8000381c <balloc+0x54>
++    brelse(bp);
++    80003802:	854a                	mv	a0,s2
++    80003804:	00000097          	auipc	ra,0x0
++    80003808:	e32080e7          	jalr	-462(ra) # 80003636 <brelse>
++  for(b = 0; b < sb.size; b += BPB){
++    8000380c:	015c87bb          	addw	a5,s9,s5
++    80003810:	00078a9b          	sext.w	s5,a5
++    80003814:	004b2703          	lw	a4,4(s6)
++    80003818:	06eaf163          	bgeu	s5,a4,8000387a <balloc+0xb2>
++    bp = bread(dev, BBLOCK(b, sb));
++    8000381c:	41fad79b          	sraiw	a5,s5,0x1f
++    80003820:	0137d79b          	srliw	a5,a5,0x13
++    80003824:	015787bb          	addw	a5,a5,s5
++    80003828:	40d7d79b          	sraiw	a5,a5,0xd
++    8000382c:	01cb2583          	lw	a1,28(s6)
++    80003830:	9dbd                	addw	a1,a1,a5
++    80003832:	855e                	mv	a0,s7
++    80003834:	00000097          	auipc	ra,0x0
++    80003838:	cd2080e7          	jalr	-814(ra) # 80003506 <bread>
++    8000383c:	892a                	mv	s2,a0
++    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
++    8000383e:	004b2503          	lw	a0,4(s6)
++    80003842:	000a849b          	sext.w	s1,s5
++    80003846:	8762                	mv	a4,s8
++    80003848:	faa4fde3          	bgeu	s1,a0,80003802 <balloc+0x3a>
++      m = 1 << (bi % 8);
++    8000384c:	00777693          	andi	a3,a4,7
++    80003850:	00d996bb          	sllw	a3,s3,a3
++      if((bp->data[bi/8] & m) == 0){  // Is block free?
++    80003854:	41f7579b          	sraiw	a5,a4,0x1f
++    80003858:	01d7d79b          	srliw	a5,a5,0x1d
++    8000385c:	9fb9                	addw	a5,a5,a4
++    8000385e:	4037d79b          	sraiw	a5,a5,0x3
++    80003862:	00f90633          	add	a2,s2,a5
++    80003866:	05864603          	lbu	a2,88(a2)
++    8000386a:	00c6f5b3          	and	a1,a3,a2
++    8000386e:	cd91                	beqz	a1,8000388a <balloc+0xc2>
++    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
++    80003870:	2705                	addiw	a4,a4,1
++    80003872:	2485                	addiw	s1,s1,1
++    80003874:	fd471ae3          	bne	a4,s4,80003848 <balloc+0x80>
++    80003878:	b769                	j	80003802 <balloc+0x3a>
++  panic("balloc: out of blocks");
++    8000387a:	00005517          	auipc	a0,0x5
++    8000387e:	d3e50513          	addi	a0,a0,-706 # 800085b8 <syscalls+0x130>
++    80003882:	ffffd097          	auipc	ra,0xffffd
++    80003886:	cb8080e7          	jalr	-840(ra) # 8000053a <panic>
++        bp->data[bi/8] |= m;  // Mark block in use.
++    8000388a:	97ca                	add	a5,a5,s2
++    8000388c:	8e55                	or	a2,a2,a3
++    8000388e:	04c78c23          	sb	a2,88(a5)
++        log_write(bp);
++    80003892:	854a                	mv	a0,s2
++    80003894:	00001097          	auipc	ra,0x1
++    80003898:	026080e7          	jalr	38(ra) # 800048ba <log_write>
++        brelse(bp);
++    8000389c:	854a                	mv	a0,s2
++    8000389e:	00000097          	auipc	ra,0x0
++    800038a2:	d98080e7          	jalr	-616(ra) # 80003636 <brelse>
++  bp = bread(dev, bno);
++    800038a6:	85a6                	mv	a1,s1
++    800038a8:	855e                	mv	a0,s7
++    800038aa:	00000097          	auipc	ra,0x0
++    800038ae:	c5c080e7          	jalr	-932(ra) # 80003506 <bread>
++    800038b2:	892a                	mv	s2,a0
++  memset(bp->data, 0, BSIZE);
++    800038b4:	40000613          	li	a2,1024
++    800038b8:	4581                	li	a1,0
++    800038ba:	05850513          	addi	a0,a0,88
++    800038be:	ffffd097          	auipc	ra,0xffffd
++    800038c2:	40e080e7          	jalr	1038(ra) # 80000ccc <memset>
++  log_write(bp);
++    800038c6:	854a                	mv	a0,s2
++    800038c8:	00001097          	auipc	ra,0x1
++    800038cc:	ff2080e7          	jalr	-14(ra) # 800048ba <log_write>
++  brelse(bp);
++    800038d0:	854a                	mv	a0,s2
++    800038d2:	00000097          	auipc	ra,0x0
++    800038d6:	d64080e7          	jalr	-668(ra) # 80003636 <brelse>
++}
++    800038da:	8526                	mv	a0,s1
++    800038dc:	60e6                	ld	ra,88(sp)
++    800038de:	6446                	ld	s0,80(sp)
++    800038e0:	64a6                	ld	s1,72(sp)
++    800038e2:	6906                	ld	s2,64(sp)
++    800038e4:	79e2                	ld	s3,56(sp)
++    800038e6:	7a42                	ld	s4,48(sp)
++    800038e8:	7aa2                	ld	s5,40(sp)
++    800038ea:	7b02                	ld	s6,32(sp)
++    800038ec:	6be2                	ld	s7,24(sp)
++    800038ee:	6c42                	ld	s8,16(sp)
++    800038f0:	6ca2                	ld	s9,8(sp)
++    800038f2:	6125                	addi	sp,sp,96
++    800038f4:	8082                	ret
++
++00000000800038f6 <bmap>:
++
++// Return the disk block address of the nth block in inode ip.
++// If there is no such block, bmap allocates one.
++static uint
++bmap(struct inode *ip, uint bn)
++{
++    800038f6:	7179                	addi	sp,sp,-48
++    800038f8:	f406                	sd	ra,40(sp)
++    800038fa:	f022                	sd	s0,32(sp)
++    800038fc:	ec26                	sd	s1,24(sp)
++    800038fe:	e84a                	sd	s2,16(sp)
++    80003900:	e44e                	sd	s3,8(sp)
++    80003902:	e052                	sd	s4,0(sp)
++    80003904:	1800                	addi	s0,sp,48
++    80003906:	892a                	mv	s2,a0
++  uint addr, *a;
++  struct buf *bp;
++
++  if(bn < NDIRECT){
++    80003908:	47ad                	li	a5,11
++    8000390a:	04b7fe63          	bgeu	a5,a1,80003966 <bmap+0x70>
++    if((addr = ip->addrs[bn]) == 0)
++      ip->addrs[bn] = addr = balloc(ip->dev);
++    return addr;
++  }
++  bn -= NDIRECT;
++    8000390e:	ff45849b          	addiw	s1,a1,-12
++    80003912:	0004871b          	sext.w	a4,s1
++
++  if(bn < NINDIRECT){
++    80003916:	0ff00793          	li	a5,255
++    8000391a:	0ae7e463          	bltu	a5,a4,800039c2 <bmap+0xcc>
++    // Load indirect block, allocating if necessary.
++    if((addr = ip->addrs[NDIRECT]) == 0)
++    8000391e:	08052583          	lw	a1,128(a0)
++    80003922:	c5b5                	beqz	a1,8000398e <bmap+0x98>
++      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
++    bp = bread(ip->dev, addr);
++    80003924:	00092503          	lw	a0,0(s2)
++    80003928:	00000097          	auipc	ra,0x0
++    8000392c:	bde080e7          	jalr	-1058(ra) # 80003506 <bread>
++    80003930:	8a2a                	mv	s4,a0
++    a = (uint*)bp->data;
++    80003932:	05850793          	addi	a5,a0,88
++    if((addr = a[bn]) == 0){
++    80003936:	02049713          	slli	a4,s1,0x20
++    8000393a:	01e75593          	srli	a1,a4,0x1e
++    8000393e:	00b784b3          	add	s1,a5,a1
++    80003942:	0004a983          	lw	s3,0(s1)
++    80003946:	04098e63          	beqz	s3,800039a2 <bmap+0xac>
++      a[bn] = addr = balloc(ip->dev);
++      log_write(bp);
++    }
++    brelse(bp);
++    8000394a:	8552                	mv	a0,s4
++    8000394c:	00000097          	auipc	ra,0x0
++    80003950:	cea080e7          	jalr	-790(ra) # 80003636 <brelse>
++    return addr;
++  }
++
++  panic("bmap: out of range");
++}
++    80003954:	854e                	mv	a0,s3
++    80003956:	70a2                	ld	ra,40(sp)
++    80003958:	7402                	ld	s0,32(sp)
++    8000395a:	64e2                	ld	s1,24(sp)
++    8000395c:	6942                	ld	s2,16(sp)
++    8000395e:	69a2                	ld	s3,8(sp)
++    80003960:	6a02                	ld	s4,0(sp)
++    80003962:	6145                	addi	sp,sp,48
++    80003964:	8082                	ret
++    if((addr = ip->addrs[bn]) == 0)
++    80003966:	02059793          	slli	a5,a1,0x20
++    8000396a:	01e7d593          	srli	a1,a5,0x1e
++    8000396e:	00b504b3          	add	s1,a0,a1
++    80003972:	0504a983          	lw	s3,80(s1)
++    80003976:	fc099fe3          	bnez	s3,80003954 <bmap+0x5e>
++      ip->addrs[bn] = addr = balloc(ip->dev);
++    8000397a:	4108                	lw	a0,0(a0)
++    8000397c:	00000097          	auipc	ra,0x0
++    80003980:	e4c080e7          	jalr	-436(ra) # 800037c8 <balloc>
++    80003984:	0005099b          	sext.w	s3,a0
++    80003988:	0534a823          	sw	s3,80(s1)
++    8000398c:	b7e1                	j	80003954 <bmap+0x5e>
++      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
++    8000398e:	4108                	lw	a0,0(a0)
++    80003990:	00000097          	auipc	ra,0x0
++    80003994:	e38080e7          	jalr	-456(ra) # 800037c8 <balloc>
++    80003998:	0005059b          	sext.w	a1,a0
++    8000399c:	08b92023          	sw	a1,128(s2)
++    800039a0:	b751                	j	80003924 <bmap+0x2e>
++      a[bn] = addr = balloc(ip->dev);
++    800039a2:	00092503          	lw	a0,0(s2)
++    800039a6:	00000097          	auipc	ra,0x0
++    800039aa:	e22080e7          	jalr	-478(ra) # 800037c8 <balloc>
++    800039ae:	0005099b          	sext.w	s3,a0
++    800039b2:	0134a023          	sw	s3,0(s1)
++      log_write(bp);
++    800039b6:	8552                	mv	a0,s4
++    800039b8:	00001097          	auipc	ra,0x1
++    800039bc:	f02080e7          	jalr	-254(ra) # 800048ba <log_write>
++    800039c0:	b769                	j	8000394a <bmap+0x54>
++  panic("bmap: out of range");
++    800039c2:	00005517          	auipc	a0,0x5
++    800039c6:	c0e50513          	addi	a0,a0,-1010 # 800085d0 <syscalls+0x148>
++    800039ca:	ffffd097          	auipc	ra,0xffffd
++    800039ce:	b70080e7          	jalr	-1168(ra) # 8000053a <panic>
++
++00000000800039d2 <iget>:
++{
++    800039d2:	7179                	addi	sp,sp,-48
++    800039d4:	f406                	sd	ra,40(sp)
++    800039d6:	f022                	sd	s0,32(sp)
++    800039d8:	ec26                	sd	s1,24(sp)
++    800039da:	e84a                	sd	s2,16(sp)
++    800039dc:	e44e                	sd	s3,8(sp)
++    800039de:	e052                	sd	s4,0(sp)
++    800039e0:	1800                	addi	s0,sp,48
++    800039e2:	89aa                	mv	s3,a0
++    800039e4:	8a2e                	mv	s4,a1
++  acquire(&itable.lock);
++    800039e6:	0001f517          	auipc	a0,0x1f
++    800039ea:	3da50513          	addi	a0,a0,986 # 80022dc0 <itable>
++    800039ee:	ffffd097          	auipc	ra,0xffffd
++    800039f2:	1e2080e7          	jalr	482(ra) # 80000bd0 <acquire>
++  empty = 0;
++    800039f6:	4901                	li	s2,0
++  for(ip = &itable.inode[0]; ip < &itable.inode[NINODE]; ip++){
++    800039f8:	0001f497          	auipc	s1,0x1f
++    800039fc:	3e048493          	addi	s1,s1,992 # 80022dd8 <itable+0x18>
++    80003a00:	00021697          	auipc	a3,0x21
++    80003a04:	e6868693          	addi	a3,a3,-408 # 80024868 <log>
++    80003a08:	a039                	j	80003a16 <iget+0x44>
++    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
++    80003a0a:	02090b63          	beqz	s2,80003a40 <iget+0x6e>
++  for(ip = &itable.inode[0]; ip < &itable.inode[NINODE]; ip++){
++    80003a0e:	08848493          	addi	s1,s1,136
++    80003a12:	02d48a63          	beq	s1,a3,80003a46 <iget+0x74>
++    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
++    80003a16:	449c                	lw	a5,8(s1)
++    80003a18:	fef059e3          	blez	a5,80003a0a <iget+0x38>
++    80003a1c:	4098                	lw	a4,0(s1)
++    80003a1e:	ff3716e3          	bne	a4,s3,80003a0a <iget+0x38>
++    80003a22:	40d8                	lw	a4,4(s1)
++    80003a24:	ff4713e3          	bne	a4,s4,80003a0a <iget+0x38>
++      ip->ref++;
++    80003a28:	2785                	addiw	a5,a5,1
++    80003a2a:	c49c                	sw	a5,8(s1)
++      release(&itable.lock);
++    80003a2c:	0001f517          	auipc	a0,0x1f
++    80003a30:	39450513          	addi	a0,a0,916 # 80022dc0 <itable>
++    80003a34:	ffffd097          	auipc	ra,0xffffd
++    80003a38:	250080e7          	jalr	592(ra) # 80000c84 <release>
++      return ip;
++    80003a3c:	8926                	mv	s2,s1
++    80003a3e:	a03d                	j	80003a6c <iget+0x9a>
++    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
++    80003a40:	f7f9                	bnez	a5,80003a0e <iget+0x3c>
++    80003a42:	8926                	mv	s2,s1
++    80003a44:	b7e9                	j	80003a0e <iget+0x3c>
++  if(empty == 0)
++    80003a46:	02090c63          	beqz	s2,80003a7e <iget+0xac>
++  ip->dev = dev;
++    80003a4a:	01392023          	sw	s3,0(s2)
++  ip->inum = inum;
++    80003a4e:	01492223          	sw	s4,4(s2)
++  ip->ref = 1;
++    80003a52:	4785                	li	a5,1
++    80003a54:	00f92423          	sw	a5,8(s2)
++  ip->valid = 0;
++    80003a58:	04092023          	sw	zero,64(s2)
++  release(&itable.lock);
++    80003a5c:	0001f517          	auipc	a0,0x1f
++    80003a60:	36450513          	addi	a0,a0,868 # 80022dc0 <itable>
++    80003a64:	ffffd097          	auipc	ra,0xffffd
++    80003a68:	220080e7          	jalr	544(ra) # 80000c84 <release>
++}
++    80003a6c:	854a                	mv	a0,s2
++    80003a6e:	70a2                	ld	ra,40(sp)
++    80003a70:	7402                	ld	s0,32(sp)
++    80003a72:	64e2                	ld	s1,24(sp)
++    80003a74:	6942                	ld	s2,16(sp)
++    80003a76:	69a2                	ld	s3,8(sp)
++    80003a78:	6a02                	ld	s4,0(sp)
++    80003a7a:	6145                	addi	sp,sp,48
++    80003a7c:	8082                	ret
++    panic("iget: no inodes");
++    80003a7e:	00005517          	auipc	a0,0x5
++    80003a82:	b6a50513          	addi	a0,a0,-1174 # 800085e8 <syscalls+0x160>
++    80003a86:	ffffd097          	auipc	ra,0xffffd
++    80003a8a:	ab4080e7          	jalr	-1356(ra) # 8000053a <panic>
++
++0000000080003a8e <fsinit>:
++fsinit(int dev) {
++    80003a8e:	7179                	addi	sp,sp,-48
++    80003a90:	f406                	sd	ra,40(sp)
++    80003a92:	f022                	sd	s0,32(sp)
++    80003a94:	ec26                	sd	s1,24(sp)
++    80003a96:	e84a                	sd	s2,16(sp)
++    80003a98:	e44e                	sd	s3,8(sp)
++    80003a9a:	1800                	addi	s0,sp,48
++    80003a9c:	892a                	mv	s2,a0
++  bp = bread(dev, 1);
++    80003a9e:	4585                	li	a1,1
++    80003aa0:	00000097          	auipc	ra,0x0
++    80003aa4:	a66080e7          	jalr	-1434(ra) # 80003506 <bread>
++    80003aa8:	84aa                	mv	s1,a0
++  memmove(sb, bp->data, sizeof(*sb));
++    80003aaa:	0001f997          	auipc	s3,0x1f
++    80003aae:	2f698993          	addi	s3,s3,758 # 80022da0 <sb>
++    80003ab2:	02000613          	li	a2,32
++    80003ab6:	05850593          	addi	a1,a0,88
++    80003aba:	854e                	mv	a0,s3
++    80003abc:	ffffd097          	auipc	ra,0xffffd
++    80003ac0:	26c080e7          	jalr	620(ra) # 80000d28 <memmove>
++  brelse(bp);
++    80003ac4:	8526                	mv	a0,s1
++    80003ac6:	00000097          	auipc	ra,0x0
++    80003aca:	b70080e7          	jalr	-1168(ra) # 80003636 <brelse>
++  if(sb.magic != FSMAGIC)
++    80003ace:	0009a703          	lw	a4,0(s3)
++    80003ad2:	102037b7          	lui	a5,0x10203
++    80003ad6:	04078793          	addi	a5,a5,64 # 10203040 <_entry-0x6fdfcfc0>
++    80003ada:	02f71263          	bne	a4,a5,80003afe <fsinit+0x70>
++  initlog(dev, &sb);
++    80003ade:	0001f597          	auipc	a1,0x1f
++    80003ae2:	2c258593          	addi	a1,a1,706 # 80022da0 <sb>
++    80003ae6:	854a                	mv	a0,s2
++    80003ae8:	00001097          	auipc	ra,0x1
++    80003aec:	b56080e7          	jalr	-1194(ra) # 8000463e <initlog>
++}
++    80003af0:	70a2                	ld	ra,40(sp)
++    80003af2:	7402                	ld	s0,32(sp)
++    80003af4:	64e2                	ld	s1,24(sp)
++    80003af6:	6942                	ld	s2,16(sp)
++    80003af8:	69a2                	ld	s3,8(sp)
++    80003afa:	6145                	addi	sp,sp,48
++    80003afc:	8082                	ret
++    panic("invalid file system");
++    80003afe:	00005517          	auipc	a0,0x5
++    80003b02:	afa50513          	addi	a0,a0,-1286 # 800085f8 <syscalls+0x170>
++    80003b06:	ffffd097          	auipc	ra,0xffffd
++    80003b0a:	a34080e7          	jalr	-1484(ra) # 8000053a <panic>
++
++0000000080003b0e <iinit>:
++{
++    80003b0e:	7179                	addi	sp,sp,-48
++    80003b10:	f406                	sd	ra,40(sp)
++    80003b12:	f022                	sd	s0,32(sp)
++    80003b14:	ec26                	sd	s1,24(sp)
++    80003b16:	e84a                	sd	s2,16(sp)
++    80003b18:	e44e                	sd	s3,8(sp)
++    80003b1a:	1800                	addi	s0,sp,48
++  initlock(&itable.lock, "itable");
++    80003b1c:	00005597          	auipc	a1,0x5
++    80003b20:	af458593          	addi	a1,a1,-1292 # 80008610 <syscalls+0x188>
++    80003b24:	0001f517          	auipc	a0,0x1f
++    80003b28:	29c50513          	addi	a0,a0,668 # 80022dc0 <itable>
++    80003b2c:	ffffd097          	auipc	ra,0xffffd
++    80003b30:	014080e7          	jalr	20(ra) # 80000b40 <initlock>
++  for(i = 0; i < NINODE; i++) {
++    80003b34:	0001f497          	auipc	s1,0x1f
++    80003b38:	2b448493          	addi	s1,s1,692 # 80022de8 <itable+0x28>
++    80003b3c:	00021997          	auipc	s3,0x21
++    80003b40:	d3c98993          	addi	s3,s3,-708 # 80024878 <log+0x10>
++    initsleeplock(&itable.inode[i].lock, "inode");
++    80003b44:	00005917          	auipc	s2,0x5
++    80003b48:	ad490913          	addi	s2,s2,-1324 # 80008618 <syscalls+0x190>
++    80003b4c:	85ca                	mv	a1,s2
++    80003b4e:	8526                	mv	a0,s1
++    80003b50:	00001097          	auipc	ra,0x1
++    80003b54:	e4e080e7          	jalr	-434(ra) # 8000499e <initsleeplock>
++  for(i = 0; i < NINODE; i++) {
++    80003b58:	08848493          	addi	s1,s1,136
++    80003b5c:	ff3498e3          	bne	s1,s3,80003b4c <iinit+0x3e>
++}
++    80003b60:	70a2                	ld	ra,40(sp)
++    80003b62:	7402                	ld	s0,32(sp)
++    80003b64:	64e2                	ld	s1,24(sp)
++    80003b66:	6942                	ld	s2,16(sp)
++    80003b68:	69a2                	ld	s3,8(sp)
++    80003b6a:	6145                	addi	sp,sp,48
++    80003b6c:	8082                	ret
++
++0000000080003b6e <ialloc>:
++{
++    80003b6e:	715d                	addi	sp,sp,-80
++    80003b70:	e486                	sd	ra,72(sp)
++    80003b72:	e0a2                	sd	s0,64(sp)
++    80003b74:	fc26                	sd	s1,56(sp)
++    80003b76:	f84a                	sd	s2,48(sp)
++    80003b78:	f44e                	sd	s3,40(sp)
++    80003b7a:	f052                	sd	s4,32(sp)
++    80003b7c:	ec56                	sd	s5,24(sp)
++    80003b7e:	e85a                	sd	s6,16(sp)
++    80003b80:	e45e                	sd	s7,8(sp)
++    80003b82:	0880                	addi	s0,sp,80
++  for(inum = 1; inum < sb.ninodes; inum++){
++    80003b84:	0001f717          	auipc	a4,0x1f
++    80003b88:	22872703          	lw	a4,552(a4) # 80022dac <sb+0xc>
++    80003b8c:	4785                	li	a5,1
++    80003b8e:	04e7fa63          	bgeu	a5,a4,80003be2 <ialloc+0x74>
++    80003b92:	8aaa                	mv	s5,a0
++    80003b94:	8bae                	mv	s7,a1
++    80003b96:	4485                	li	s1,1
++    bp = bread(dev, IBLOCK(inum, sb));
++    80003b98:	0001fa17          	auipc	s4,0x1f
++    80003b9c:	208a0a13          	addi	s4,s4,520 # 80022da0 <sb>
++    80003ba0:	00048b1b          	sext.w	s6,s1
++    80003ba4:	0044d593          	srli	a1,s1,0x4
++    80003ba8:	018a2783          	lw	a5,24(s4)
++    80003bac:	9dbd                	addw	a1,a1,a5
++    80003bae:	8556                	mv	a0,s5
++    80003bb0:	00000097          	auipc	ra,0x0
++    80003bb4:	956080e7          	jalr	-1706(ra) # 80003506 <bread>
++    80003bb8:	892a                	mv	s2,a0
++    dip = (struct dinode*)bp->data + inum%IPB;
++    80003bba:	05850993          	addi	s3,a0,88
++    80003bbe:	00f4f793          	andi	a5,s1,15
++    80003bc2:	079a                	slli	a5,a5,0x6
++    80003bc4:	99be                	add	s3,s3,a5
++    if(dip->type == 0){  // a free inode
++    80003bc6:	00099783          	lh	a5,0(s3)
++    80003bca:	c785                	beqz	a5,80003bf2 <ialloc+0x84>
++    brelse(bp);
++    80003bcc:	00000097          	auipc	ra,0x0
++    80003bd0:	a6a080e7          	jalr	-1430(ra) # 80003636 <brelse>
++  for(inum = 1; inum < sb.ninodes; inum++){
++    80003bd4:	0485                	addi	s1,s1,1
++    80003bd6:	00ca2703          	lw	a4,12(s4)
++    80003bda:	0004879b          	sext.w	a5,s1
++    80003bde:	fce7e1e3          	bltu	a5,a4,80003ba0 <ialloc+0x32>
++  panic("ialloc: no inodes");
++    80003be2:	00005517          	auipc	a0,0x5
++    80003be6:	a3e50513          	addi	a0,a0,-1474 # 80008620 <syscalls+0x198>
++    80003bea:	ffffd097          	auipc	ra,0xffffd
++    80003bee:	950080e7          	jalr	-1712(ra) # 8000053a <panic>
++      memset(dip, 0, sizeof(*dip));
++    80003bf2:	04000613          	li	a2,64
++    80003bf6:	4581                	li	a1,0
++    80003bf8:	854e                	mv	a0,s3
++    80003bfa:	ffffd097          	auipc	ra,0xffffd
++    80003bfe:	0d2080e7          	jalr	210(ra) # 80000ccc <memset>
++      dip->type = type;
++    80003c02:	01799023          	sh	s7,0(s3)
++      log_write(bp);   // mark it allocated on the disk
++    80003c06:	854a                	mv	a0,s2
++    80003c08:	00001097          	auipc	ra,0x1
++    80003c0c:	cb2080e7          	jalr	-846(ra) # 800048ba <log_write>
++      brelse(bp);
++    80003c10:	854a                	mv	a0,s2
++    80003c12:	00000097          	auipc	ra,0x0
++    80003c16:	a24080e7          	jalr	-1500(ra) # 80003636 <brelse>
++      return iget(dev, inum);
++    80003c1a:	85da                	mv	a1,s6
++    80003c1c:	8556                	mv	a0,s5
++    80003c1e:	00000097          	auipc	ra,0x0
++    80003c22:	db4080e7          	jalr	-588(ra) # 800039d2 <iget>
++}
++    80003c26:	60a6                	ld	ra,72(sp)
++    80003c28:	6406                	ld	s0,64(sp)
++    80003c2a:	74e2                	ld	s1,56(sp)
++    80003c2c:	7942                	ld	s2,48(sp)
++    80003c2e:	79a2                	ld	s3,40(sp)
++    80003c30:	7a02                	ld	s4,32(sp)
++    80003c32:	6ae2                	ld	s5,24(sp)
++    80003c34:	6b42                	ld	s6,16(sp)
++    80003c36:	6ba2                	ld	s7,8(sp)
++    80003c38:	6161                	addi	sp,sp,80
++    80003c3a:	8082                	ret
++
++0000000080003c3c <iupdate>:
++{
++    80003c3c:	1101                	addi	sp,sp,-32
++    80003c3e:	ec06                	sd	ra,24(sp)
++    80003c40:	e822                	sd	s0,16(sp)
++    80003c42:	e426                	sd	s1,8(sp)
++    80003c44:	e04a                	sd	s2,0(sp)
++    80003c46:	1000                	addi	s0,sp,32
++    80003c48:	84aa                	mv	s1,a0
++  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
++    80003c4a:	415c                	lw	a5,4(a0)
++    80003c4c:	0047d79b          	srliw	a5,a5,0x4
++    80003c50:	0001f597          	auipc	a1,0x1f
++    80003c54:	1685a583          	lw	a1,360(a1) # 80022db8 <sb+0x18>
++    80003c58:	9dbd                	addw	a1,a1,a5
++    80003c5a:	4108                	lw	a0,0(a0)
++    80003c5c:	00000097          	auipc	ra,0x0
++    80003c60:	8aa080e7          	jalr	-1878(ra) # 80003506 <bread>
++    80003c64:	892a                	mv	s2,a0
++  dip = (struct dinode*)bp->data + ip->inum%IPB;
++    80003c66:	05850793          	addi	a5,a0,88
++    80003c6a:	40d8                	lw	a4,4(s1)
++    80003c6c:	8b3d                	andi	a4,a4,15
++    80003c6e:	071a                	slli	a4,a4,0x6
++    80003c70:	97ba                	add	a5,a5,a4
++  dip->type = ip->type;
++    80003c72:	04449703          	lh	a4,68(s1)
++    80003c76:	00e79023          	sh	a4,0(a5)
++  dip->major = ip->major;
++    80003c7a:	04649703          	lh	a4,70(s1)
++    80003c7e:	00e79123          	sh	a4,2(a5)
++  dip->minor = ip->minor;
++    80003c82:	04849703          	lh	a4,72(s1)
++    80003c86:	00e79223          	sh	a4,4(a5)
++  dip->nlink = ip->nlink;
++    80003c8a:	04a49703          	lh	a4,74(s1)
++    80003c8e:	00e79323          	sh	a4,6(a5)
++  dip->size = ip->size;
++    80003c92:	44f8                	lw	a4,76(s1)
++    80003c94:	c798                	sw	a4,8(a5)
++  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
++    80003c96:	03400613          	li	a2,52
++    80003c9a:	05048593          	addi	a1,s1,80
++    80003c9e:	00c78513          	addi	a0,a5,12
++    80003ca2:	ffffd097          	auipc	ra,0xffffd
++    80003ca6:	086080e7          	jalr	134(ra) # 80000d28 <memmove>
++  log_write(bp);
++    80003caa:	854a                	mv	a0,s2
++    80003cac:	00001097          	auipc	ra,0x1
++    80003cb0:	c0e080e7          	jalr	-1010(ra) # 800048ba <log_write>
++  brelse(bp);
++    80003cb4:	854a                	mv	a0,s2
++    80003cb6:	00000097          	auipc	ra,0x0
++    80003cba:	980080e7          	jalr	-1664(ra) # 80003636 <brelse>
++}
++    80003cbe:	60e2                	ld	ra,24(sp)
++    80003cc0:	6442                	ld	s0,16(sp)
++    80003cc2:	64a2                	ld	s1,8(sp)
++    80003cc4:	6902                	ld	s2,0(sp)
++    80003cc6:	6105                	addi	sp,sp,32
++    80003cc8:	8082                	ret
++
++0000000080003cca <idup>:
++{
++    80003cca:	1101                	addi	sp,sp,-32
++    80003ccc:	ec06                	sd	ra,24(sp)
++    80003cce:	e822                	sd	s0,16(sp)
++    80003cd0:	e426                	sd	s1,8(sp)
++    80003cd2:	1000                	addi	s0,sp,32
++    80003cd4:	84aa                	mv	s1,a0
++  acquire(&itable.lock);
++    80003cd6:	0001f517          	auipc	a0,0x1f
++    80003cda:	0ea50513          	addi	a0,a0,234 # 80022dc0 <itable>
++    80003cde:	ffffd097          	auipc	ra,0xffffd
++    80003ce2:	ef2080e7          	jalr	-270(ra) # 80000bd0 <acquire>
++  ip->ref++;
++    80003ce6:	449c                	lw	a5,8(s1)
++    80003ce8:	2785                	addiw	a5,a5,1
++    80003cea:	c49c                	sw	a5,8(s1)
++  release(&itable.lock);
++    80003cec:	0001f517          	auipc	a0,0x1f
++    80003cf0:	0d450513          	addi	a0,a0,212 # 80022dc0 <itable>
++    80003cf4:	ffffd097          	auipc	ra,0xffffd
++    80003cf8:	f90080e7          	jalr	-112(ra) # 80000c84 <release>
++}
++    80003cfc:	8526                	mv	a0,s1
++    80003cfe:	60e2                	ld	ra,24(sp)
++    80003d00:	6442                	ld	s0,16(sp)
++    80003d02:	64a2                	ld	s1,8(sp)
++    80003d04:	6105                	addi	sp,sp,32
++    80003d06:	8082                	ret
++
++0000000080003d08 <ilock>:
++{
++    80003d08:	1101                	addi	sp,sp,-32
++    80003d0a:	ec06                	sd	ra,24(sp)
++    80003d0c:	e822                	sd	s0,16(sp)
++    80003d0e:	e426                	sd	s1,8(sp)
++    80003d10:	e04a                	sd	s2,0(sp)
++    80003d12:	1000                	addi	s0,sp,32
++  if(ip == 0 || ip->ref < 1)
++    80003d14:	c115                	beqz	a0,80003d38 <ilock+0x30>
++    80003d16:	84aa                	mv	s1,a0
++    80003d18:	451c                	lw	a5,8(a0)
++    80003d1a:	00f05f63          	blez	a5,80003d38 <ilock+0x30>
++  acquiresleep(&ip->lock);
++    80003d1e:	0541                	addi	a0,a0,16
++    80003d20:	00001097          	auipc	ra,0x1
++    80003d24:	cb8080e7          	jalr	-840(ra) # 800049d8 <acquiresleep>
++  if(ip->valid == 0){
++    80003d28:	40bc                	lw	a5,64(s1)
++    80003d2a:	cf99                	beqz	a5,80003d48 <ilock+0x40>
++}
++    80003d2c:	60e2                	ld	ra,24(sp)
++    80003d2e:	6442                	ld	s0,16(sp)
++    80003d30:	64a2                	ld	s1,8(sp)
++    80003d32:	6902                	ld	s2,0(sp)
++    80003d34:	6105                	addi	sp,sp,32
++    80003d36:	8082                	ret
++    panic("ilock");
++    80003d38:	00005517          	auipc	a0,0x5
++    80003d3c:	90050513          	addi	a0,a0,-1792 # 80008638 <syscalls+0x1b0>
++    80003d40:	ffffc097          	auipc	ra,0xffffc
++    80003d44:	7fa080e7          	jalr	2042(ra) # 8000053a <panic>
++    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
++    80003d48:	40dc                	lw	a5,4(s1)
++    80003d4a:	0047d79b          	srliw	a5,a5,0x4
++    80003d4e:	0001f597          	auipc	a1,0x1f
++    80003d52:	06a5a583          	lw	a1,106(a1) # 80022db8 <sb+0x18>
++    80003d56:	9dbd                	addw	a1,a1,a5
++    80003d58:	4088                	lw	a0,0(s1)
++    80003d5a:	fffff097          	auipc	ra,0xfffff
++    80003d5e:	7ac080e7          	jalr	1964(ra) # 80003506 <bread>
++    80003d62:	892a                	mv	s2,a0
++    dip = (struct dinode*)bp->data + ip->inum%IPB;
++    80003d64:	05850593          	addi	a1,a0,88
++    80003d68:	40dc                	lw	a5,4(s1)
++    80003d6a:	8bbd                	andi	a5,a5,15
++    80003d6c:	079a                	slli	a5,a5,0x6
++    80003d6e:	95be                	add	a1,a1,a5
++    ip->type = dip->type;
++    80003d70:	00059783          	lh	a5,0(a1)
++    80003d74:	04f49223          	sh	a5,68(s1)
++    ip->major = dip->major;
++    80003d78:	00259783          	lh	a5,2(a1)
++    80003d7c:	04f49323          	sh	a5,70(s1)
++    ip->minor = dip->minor;
++    80003d80:	00459783          	lh	a5,4(a1)
++    80003d84:	04f49423          	sh	a5,72(s1)
++    ip->nlink = dip->nlink;
++    80003d88:	00659783          	lh	a5,6(a1)
++    80003d8c:	04f49523          	sh	a5,74(s1)
++    ip->size = dip->size;
++    80003d90:	459c                	lw	a5,8(a1)
++    80003d92:	c4fc                	sw	a5,76(s1)
++    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
++    80003d94:	03400613          	li	a2,52
++    80003d98:	05b1                	addi	a1,a1,12
++    80003d9a:	05048513          	addi	a0,s1,80
++    80003d9e:	ffffd097          	auipc	ra,0xffffd
++    80003da2:	f8a080e7          	jalr	-118(ra) # 80000d28 <memmove>
++    brelse(bp);
++    80003da6:	854a                	mv	a0,s2
++    80003da8:	00000097          	auipc	ra,0x0
++    80003dac:	88e080e7          	jalr	-1906(ra) # 80003636 <brelse>
++    ip->valid = 1;
++    80003db0:	4785                	li	a5,1
++    80003db2:	c0bc                	sw	a5,64(s1)
++    if(ip->type == 0)
++    80003db4:	04449783          	lh	a5,68(s1)
++    80003db8:	fbb5                	bnez	a5,80003d2c <ilock+0x24>
++      panic("ilock: no type");
++    80003dba:	00005517          	auipc	a0,0x5
++    80003dbe:	88650513          	addi	a0,a0,-1914 # 80008640 <syscalls+0x1b8>
++    80003dc2:	ffffc097          	auipc	ra,0xffffc
++    80003dc6:	778080e7          	jalr	1912(ra) # 8000053a <panic>
++
++0000000080003dca <iunlock>:
++{
++    80003dca:	1101                	addi	sp,sp,-32
++    80003dcc:	ec06                	sd	ra,24(sp)
++    80003dce:	e822                	sd	s0,16(sp)
++    80003dd0:	e426                	sd	s1,8(sp)
++    80003dd2:	e04a                	sd	s2,0(sp)
++    80003dd4:	1000                	addi	s0,sp,32
++  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
++    80003dd6:	c905                	beqz	a0,80003e06 <iunlock+0x3c>
++    80003dd8:	84aa                	mv	s1,a0
++    80003dda:	01050913          	addi	s2,a0,16
++    80003dde:	854a                	mv	a0,s2
++    80003de0:	00001097          	auipc	ra,0x1
++    80003de4:	c92080e7          	jalr	-878(ra) # 80004a72 <holdingsleep>
++    80003de8:	cd19                	beqz	a0,80003e06 <iunlock+0x3c>
++    80003dea:	449c                	lw	a5,8(s1)
++    80003dec:	00f05d63          	blez	a5,80003e06 <iunlock+0x3c>
++  releasesleep(&ip->lock);
++    80003df0:	854a                	mv	a0,s2
++    80003df2:	00001097          	auipc	ra,0x1
++    80003df6:	c3c080e7          	jalr	-964(ra) # 80004a2e <releasesleep>
++}
++    80003dfa:	60e2                	ld	ra,24(sp)
++    80003dfc:	6442                	ld	s0,16(sp)
++    80003dfe:	64a2                	ld	s1,8(sp)
++    80003e00:	6902                	ld	s2,0(sp)
++    80003e02:	6105                	addi	sp,sp,32
++    80003e04:	8082                	ret
++    panic("iunlock");
++    80003e06:	00005517          	auipc	a0,0x5
++    80003e0a:	84a50513          	addi	a0,a0,-1974 # 80008650 <syscalls+0x1c8>
++    80003e0e:	ffffc097          	auipc	ra,0xffffc
++    80003e12:	72c080e7          	jalr	1836(ra) # 8000053a <panic>
++
++0000000080003e16 <itrunc>:
++
++// Truncate inode (discard contents).
++// Caller must hold ip->lock.
++void
++itrunc(struct inode *ip)
++{
++    80003e16:	7179                	addi	sp,sp,-48
++    80003e18:	f406                	sd	ra,40(sp)
++    80003e1a:	f022                	sd	s0,32(sp)
++    80003e1c:	ec26                	sd	s1,24(sp)
++    80003e1e:	e84a                	sd	s2,16(sp)
++    80003e20:	e44e                	sd	s3,8(sp)
++    80003e22:	e052                	sd	s4,0(sp)
++    80003e24:	1800                	addi	s0,sp,48
++    80003e26:	89aa                	mv	s3,a0
++  int i, j;
++  struct buf *bp;
++  uint *a;
++
++  for(i = 0; i < NDIRECT; i++){
++    80003e28:	05050493          	addi	s1,a0,80
++    80003e2c:	08050913          	addi	s2,a0,128
++    80003e30:	a021                	j	80003e38 <itrunc+0x22>
++    80003e32:	0491                	addi	s1,s1,4
++    80003e34:	01248d63          	beq	s1,s2,80003e4e <itrunc+0x38>
++    if(ip->addrs[i]){
++    80003e38:	408c                	lw	a1,0(s1)
++    80003e3a:	dde5                	beqz	a1,80003e32 <itrunc+0x1c>
++      bfree(ip->dev, ip->addrs[i]);
++    80003e3c:	0009a503          	lw	a0,0(s3)
++    80003e40:	00000097          	auipc	ra,0x0
++    80003e44:	90c080e7          	jalr	-1780(ra) # 8000374c <bfree>
++      ip->addrs[i] = 0;
++    80003e48:	0004a023          	sw	zero,0(s1)
++    80003e4c:	b7dd                	j	80003e32 <itrunc+0x1c>
++    }
++  }
++
++  if(ip->addrs[NDIRECT]){
++    80003e4e:	0809a583          	lw	a1,128(s3)
++    80003e52:	e185                	bnez	a1,80003e72 <itrunc+0x5c>
++    brelse(bp);
++    bfree(ip->dev, ip->addrs[NDIRECT]);
++    ip->addrs[NDIRECT] = 0;
++  }
++
++  ip->size = 0;
++    80003e54:	0409a623          	sw	zero,76(s3)
++  iupdate(ip);
++    80003e58:	854e                	mv	a0,s3
++    80003e5a:	00000097          	auipc	ra,0x0
++    80003e5e:	de2080e7          	jalr	-542(ra) # 80003c3c <iupdate>
++}
++    80003e62:	70a2                	ld	ra,40(sp)
++    80003e64:	7402                	ld	s0,32(sp)
++    80003e66:	64e2                	ld	s1,24(sp)
++    80003e68:	6942                	ld	s2,16(sp)
++    80003e6a:	69a2                	ld	s3,8(sp)
++    80003e6c:	6a02                	ld	s4,0(sp)
++    80003e6e:	6145                	addi	sp,sp,48
++    80003e70:	8082                	ret
++    bp = bread(ip->dev, ip->addrs[NDIRECT]);
++    80003e72:	0009a503          	lw	a0,0(s3)
++    80003e76:	fffff097          	auipc	ra,0xfffff
++    80003e7a:	690080e7          	jalr	1680(ra) # 80003506 <bread>
++    80003e7e:	8a2a                	mv	s4,a0
++    for(j = 0; j < NINDIRECT; j++){
++    80003e80:	05850493          	addi	s1,a0,88
++    80003e84:	45850913          	addi	s2,a0,1112
++    80003e88:	a021                	j	80003e90 <itrunc+0x7a>
++    80003e8a:	0491                	addi	s1,s1,4
++    80003e8c:	01248b63          	beq	s1,s2,80003ea2 <itrunc+0x8c>
++      if(a[j])
++    80003e90:	408c                	lw	a1,0(s1)
++    80003e92:	dde5                	beqz	a1,80003e8a <itrunc+0x74>
++        bfree(ip->dev, a[j]);
++    80003e94:	0009a503          	lw	a0,0(s3)
++    80003e98:	00000097          	auipc	ra,0x0
++    80003e9c:	8b4080e7          	jalr	-1868(ra) # 8000374c <bfree>
++    80003ea0:	b7ed                	j	80003e8a <itrunc+0x74>
++    brelse(bp);
++    80003ea2:	8552                	mv	a0,s4
++    80003ea4:	fffff097          	auipc	ra,0xfffff
++    80003ea8:	792080e7          	jalr	1938(ra) # 80003636 <brelse>
++    bfree(ip->dev, ip->addrs[NDIRECT]);
++    80003eac:	0809a583          	lw	a1,128(s3)
++    80003eb0:	0009a503          	lw	a0,0(s3)
++    80003eb4:	00000097          	auipc	ra,0x0
++    80003eb8:	898080e7          	jalr	-1896(ra) # 8000374c <bfree>
++    ip->addrs[NDIRECT] = 0;
++    80003ebc:	0809a023          	sw	zero,128(s3)
++    80003ec0:	bf51                	j	80003e54 <itrunc+0x3e>
++
++0000000080003ec2 <iput>:
++{
++    80003ec2:	1101                	addi	sp,sp,-32
++    80003ec4:	ec06                	sd	ra,24(sp)
++    80003ec6:	e822                	sd	s0,16(sp)
++    80003ec8:	e426                	sd	s1,8(sp)
++    80003eca:	e04a                	sd	s2,0(sp)
++    80003ecc:	1000                	addi	s0,sp,32
++    80003ece:	84aa                	mv	s1,a0
++  acquire(&itable.lock);
++    80003ed0:	0001f517          	auipc	a0,0x1f
++    80003ed4:	ef050513          	addi	a0,a0,-272 # 80022dc0 <itable>
++    80003ed8:	ffffd097          	auipc	ra,0xffffd
++    80003edc:	cf8080e7          	jalr	-776(ra) # 80000bd0 <acquire>
++  if(ip->ref == 1 && ip->valid && ip->nlink == 0){
++    80003ee0:	4498                	lw	a4,8(s1)
++    80003ee2:	4785                	li	a5,1
++    80003ee4:	02f70363          	beq	a4,a5,80003f0a <iput+0x48>
++  ip->ref--;
++    80003ee8:	449c                	lw	a5,8(s1)
++    80003eea:	37fd                	addiw	a5,a5,-1
++    80003eec:	c49c                	sw	a5,8(s1)
++  release(&itable.lock);
++    80003eee:	0001f517          	auipc	a0,0x1f
++    80003ef2:	ed250513          	addi	a0,a0,-302 # 80022dc0 <itable>
++    80003ef6:	ffffd097          	auipc	ra,0xffffd
++    80003efa:	d8e080e7          	jalr	-626(ra) # 80000c84 <release>
++}
++    80003efe:	60e2                	ld	ra,24(sp)
++    80003f00:	6442                	ld	s0,16(sp)
++    80003f02:	64a2                	ld	s1,8(sp)
++    80003f04:	6902                	ld	s2,0(sp)
++    80003f06:	6105                	addi	sp,sp,32
++    80003f08:	8082                	ret
++  if(ip->ref == 1 && ip->valid && ip->nlink == 0){
++    80003f0a:	40bc                	lw	a5,64(s1)
++    80003f0c:	dff1                	beqz	a5,80003ee8 <iput+0x26>
++    80003f0e:	04a49783          	lh	a5,74(s1)
++    80003f12:	fbf9                	bnez	a5,80003ee8 <iput+0x26>
++    acquiresleep(&ip->lock);
++    80003f14:	01048913          	addi	s2,s1,16
++    80003f18:	854a                	mv	a0,s2
++    80003f1a:	00001097          	auipc	ra,0x1
++    80003f1e:	abe080e7          	jalr	-1346(ra) # 800049d8 <acquiresleep>
++    release(&itable.lock);
++    80003f22:	0001f517          	auipc	a0,0x1f
++    80003f26:	e9e50513          	addi	a0,a0,-354 # 80022dc0 <itable>
++    80003f2a:	ffffd097          	auipc	ra,0xffffd
++    80003f2e:	d5a080e7          	jalr	-678(ra) # 80000c84 <release>
++    itrunc(ip);
++    80003f32:	8526                	mv	a0,s1
++    80003f34:	00000097          	auipc	ra,0x0
++    80003f38:	ee2080e7          	jalr	-286(ra) # 80003e16 <itrunc>
++    ip->type = 0;
++    80003f3c:	04049223          	sh	zero,68(s1)
++    iupdate(ip);
++    80003f40:	8526                	mv	a0,s1
++    80003f42:	00000097          	auipc	ra,0x0
++    80003f46:	cfa080e7          	jalr	-774(ra) # 80003c3c <iupdate>
++    ip->valid = 0;
++    80003f4a:	0404a023          	sw	zero,64(s1)
++    releasesleep(&ip->lock);
++    80003f4e:	854a                	mv	a0,s2
++    80003f50:	00001097          	auipc	ra,0x1
++    80003f54:	ade080e7          	jalr	-1314(ra) # 80004a2e <releasesleep>
++    acquire(&itable.lock);
++    80003f58:	0001f517          	auipc	a0,0x1f
++    80003f5c:	e6850513          	addi	a0,a0,-408 # 80022dc0 <itable>
++    80003f60:	ffffd097          	auipc	ra,0xffffd
++    80003f64:	c70080e7          	jalr	-912(ra) # 80000bd0 <acquire>
++    80003f68:	b741                	j	80003ee8 <iput+0x26>
++
++0000000080003f6a <iunlockput>:
++{
++    80003f6a:	1101                	addi	sp,sp,-32
++    80003f6c:	ec06                	sd	ra,24(sp)
++    80003f6e:	e822                	sd	s0,16(sp)
++    80003f70:	e426                	sd	s1,8(sp)
++    80003f72:	1000                	addi	s0,sp,32
++    80003f74:	84aa                	mv	s1,a0
++  iunlock(ip);
++    80003f76:	00000097          	auipc	ra,0x0
++    80003f7a:	e54080e7          	jalr	-428(ra) # 80003dca <iunlock>
++  iput(ip);
++    80003f7e:	8526                	mv	a0,s1
++    80003f80:	00000097          	auipc	ra,0x0
++    80003f84:	f42080e7          	jalr	-190(ra) # 80003ec2 <iput>
++}
++    80003f88:	60e2                	ld	ra,24(sp)
++    80003f8a:	6442                	ld	s0,16(sp)
++    80003f8c:	64a2                	ld	s1,8(sp)
++    80003f8e:	6105                	addi	sp,sp,32
++    80003f90:	8082                	ret
++
++0000000080003f92 <stati>:
++
++// Copy stat information from inode.
++// Caller must hold ip->lock.
++void
++stati(struct inode *ip, struct stat *st)
++{
++    80003f92:	1141                	addi	sp,sp,-16
++    80003f94:	e422                	sd	s0,8(sp)
++    80003f96:	0800                	addi	s0,sp,16
++  st->dev = ip->dev;
++    80003f98:	411c                	lw	a5,0(a0)
++    80003f9a:	c19c                	sw	a5,0(a1)
++  st->ino = ip->inum;
++    80003f9c:	415c                	lw	a5,4(a0)
++    80003f9e:	c1dc                	sw	a5,4(a1)
++  st->type = ip->type;
++    80003fa0:	04451783          	lh	a5,68(a0)
++    80003fa4:	00f59423          	sh	a5,8(a1)
++  st->nlink = ip->nlink;
++    80003fa8:	04a51783          	lh	a5,74(a0)
++    80003fac:	00f59523          	sh	a5,10(a1)
++  st->size = ip->size;
++    80003fb0:	04c56783          	lwu	a5,76(a0)
++    80003fb4:	e99c                	sd	a5,16(a1)
++}
++    80003fb6:	6422                	ld	s0,8(sp)
++    80003fb8:	0141                	addi	sp,sp,16
++    80003fba:	8082                	ret
++
++0000000080003fbc <readi>:
++readi(struct inode *ip, int user_dst, uint64 dst, uint off, uint n)
++{
++  uint tot, m;
++  struct buf *bp;
++
++  if(off > ip->size || off + n < off)
++    80003fbc:	457c                	lw	a5,76(a0)
++    80003fbe:	0ed7e963          	bltu	a5,a3,800040b0 <readi+0xf4>
++{
++    80003fc2:	7159                	addi	sp,sp,-112
++    80003fc4:	f486                	sd	ra,104(sp)
++    80003fc6:	f0a2                	sd	s0,96(sp)
++    80003fc8:	eca6                	sd	s1,88(sp)
++    80003fca:	e8ca                	sd	s2,80(sp)
++    80003fcc:	e4ce                	sd	s3,72(sp)
++    80003fce:	e0d2                	sd	s4,64(sp)
++    80003fd0:	fc56                	sd	s5,56(sp)
++    80003fd2:	f85a                	sd	s6,48(sp)
++    80003fd4:	f45e                	sd	s7,40(sp)
++    80003fd6:	f062                	sd	s8,32(sp)
++    80003fd8:	ec66                	sd	s9,24(sp)
++    80003fda:	e86a                	sd	s10,16(sp)
++    80003fdc:	e46e                	sd	s11,8(sp)
++    80003fde:	1880                	addi	s0,sp,112
++    80003fe0:	8baa                	mv	s7,a0
++    80003fe2:	8c2e                	mv	s8,a1
++    80003fe4:	8ab2                	mv	s5,a2
++    80003fe6:	84b6                	mv	s1,a3
++    80003fe8:	8b3a                	mv	s6,a4
++  if(off > ip->size || off + n < off)
++    80003fea:	9f35                	addw	a4,a4,a3
++    return 0;
++    80003fec:	4501                	li	a0,0
++  if(off > ip->size || off + n < off)
++    80003fee:	0ad76063          	bltu	a4,a3,8000408e <readi+0xd2>
++  if(off + n > ip->size)
++    80003ff2:	00e7f463          	bgeu	a5,a4,80003ffa <readi+0x3e>
++    n = ip->size - off;
++    80003ff6:	40d78b3b          	subw	s6,a5,a3
++
++  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
++    80003ffa:	0a0b0963          	beqz	s6,800040ac <readi+0xf0>
++    80003ffe:	4981                	li	s3,0
++    bp = bread(ip->dev, bmap(ip, off/BSIZE));
++    m = min(n - tot, BSIZE - off%BSIZE);
++    80004000:	40000d13          	li	s10,1024
++    if(either_copyout(user_dst, dst, bp->data + (off % BSIZE), m) == -1) {
++    80004004:	5cfd                	li	s9,-1
++    80004006:	a82d                	j	80004040 <readi+0x84>
++    80004008:	020a1d93          	slli	s11,s4,0x20
++    8000400c:	020ddd93          	srli	s11,s11,0x20
++    80004010:	05890613          	addi	a2,s2,88
++    80004014:	86ee                	mv	a3,s11
++    80004016:	963a                	add	a2,a2,a4
++    80004018:	85d6                	mv	a1,s5
++    8000401a:	8562                	mv	a0,s8
++    8000401c:	fffff097          	auipc	ra,0xfffff
++    80004020:	958080e7          	jalr	-1704(ra) # 80002974 <either_copyout>
++    80004024:	05950d63          	beq	a0,s9,8000407e <readi+0xc2>
++      brelse(bp);
++      tot = -1;
++      break;
++    }
++    brelse(bp);
++    80004028:	854a                	mv	a0,s2
++    8000402a:	fffff097          	auipc	ra,0xfffff
++    8000402e:	60c080e7          	jalr	1548(ra) # 80003636 <brelse>
++  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
++    80004032:	013a09bb          	addw	s3,s4,s3
++    80004036:	009a04bb          	addw	s1,s4,s1
++    8000403a:	9aee                	add	s5,s5,s11
++    8000403c:	0569f763          	bgeu	s3,s6,8000408a <readi+0xce>
++    bp = bread(ip->dev, bmap(ip, off/BSIZE));
++    80004040:	000ba903          	lw	s2,0(s7)
++    80004044:	00a4d59b          	srliw	a1,s1,0xa
++    80004048:	855e                	mv	a0,s7
++    8000404a:	00000097          	auipc	ra,0x0
++    8000404e:	8ac080e7          	jalr	-1876(ra) # 800038f6 <bmap>
++    80004052:	0005059b          	sext.w	a1,a0
++    80004056:	854a                	mv	a0,s2
++    80004058:	fffff097          	auipc	ra,0xfffff
++    8000405c:	4ae080e7          	jalr	1198(ra) # 80003506 <bread>
++    80004060:	892a                	mv	s2,a0
++    m = min(n - tot, BSIZE - off%BSIZE);
++    80004062:	3ff4f713          	andi	a4,s1,1023
++    80004066:	40ed07bb          	subw	a5,s10,a4
++    8000406a:	413b06bb          	subw	a3,s6,s3
++    8000406e:	8a3e                	mv	s4,a5
++    80004070:	2781                	sext.w	a5,a5
++    80004072:	0006861b          	sext.w	a2,a3
++    80004076:	f8f679e3          	bgeu	a2,a5,80004008 <readi+0x4c>
++    8000407a:	8a36                	mv	s4,a3
++    8000407c:	b771                	j	80004008 <readi+0x4c>
++      brelse(bp);
++    8000407e:	854a                	mv	a0,s2
++    80004080:	fffff097          	auipc	ra,0xfffff
++    80004084:	5b6080e7          	jalr	1462(ra) # 80003636 <brelse>
++      tot = -1;
++    80004088:	59fd                	li	s3,-1
++  }
++  return tot;
++    8000408a:	0009851b          	sext.w	a0,s3
++}
++    8000408e:	70a6                	ld	ra,104(sp)
++    80004090:	7406                	ld	s0,96(sp)
++    80004092:	64e6                	ld	s1,88(sp)
++    80004094:	6946                	ld	s2,80(sp)
++    80004096:	69a6                	ld	s3,72(sp)
++    80004098:	6a06                	ld	s4,64(sp)
++    8000409a:	7ae2                	ld	s5,56(sp)
++    8000409c:	7b42                	ld	s6,48(sp)
++    8000409e:	7ba2                	ld	s7,40(sp)
++    800040a0:	7c02                	ld	s8,32(sp)
++    800040a2:	6ce2                	ld	s9,24(sp)
++    800040a4:	6d42                	ld	s10,16(sp)
++    800040a6:	6da2                	ld	s11,8(sp)
++    800040a8:	6165                	addi	sp,sp,112
++    800040aa:	8082                	ret
++  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
++    800040ac:	89da                	mv	s3,s6
++    800040ae:	bff1                	j	8000408a <readi+0xce>
++    return 0;
++    800040b0:	4501                	li	a0,0
++}
++    800040b2:	8082                	ret
++
++00000000800040b4 <writei>:
++writei(struct inode *ip, int user_src, uint64 src, uint off, uint n)
++{
++  uint tot, m;
++  struct buf *bp;
++
++  if(off > ip->size || off + n < off)
++    800040b4:	457c                	lw	a5,76(a0)
++    800040b6:	10d7e863          	bltu	a5,a3,800041c6 <writei+0x112>
++{
++    800040ba:	7159                	addi	sp,sp,-112
++    800040bc:	f486                	sd	ra,104(sp)
++    800040be:	f0a2                	sd	s0,96(sp)
++    800040c0:	eca6                	sd	s1,88(sp)
++    800040c2:	e8ca                	sd	s2,80(sp)
++    800040c4:	e4ce                	sd	s3,72(sp)
++    800040c6:	e0d2                	sd	s4,64(sp)
++    800040c8:	fc56                	sd	s5,56(sp)
++    800040ca:	f85a                	sd	s6,48(sp)
++    800040cc:	f45e                	sd	s7,40(sp)
++    800040ce:	f062                	sd	s8,32(sp)
++    800040d0:	ec66                	sd	s9,24(sp)
++    800040d2:	e86a                	sd	s10,16(sp)
++    800040d4:	e46e                	sd	s11,8(sp)
++    800040d6:	1880                	addi	s0,sp,112
++    800040d8:	8b2a                	mv	s6,a0
++    800040da:	8c2e                	mv	s8,a1
++    800040dc:	8ab2                	mv	s5,a2
++    800040de:	8936                	mv	s2,a3
++    800040e0:	8bba                	mv	s7,a4
++  if(off > ip->size || off + n < off)
++    800040e2:	00e687bb          	addw	a5,a3,a4
++    800040e6:	0ed7e263          	bltu	a5,a3,800041ca <writei+0x116>
++    return -1;
++  if(off + n > MAXFILE*BSIZE)
++    800040ea:	00043737          	lui	a4,0x43
++    800040ee:	0ef76063          	bltu	a4,a5,800041ce <writei+0x11a>
++    return -1;
++
++  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
++    800040f2:	0c0b8863          	beqz	s7,800041c2 <writei+0x10e>
++    800040f6:	4a01                	li	s4,0
++    bp = bread(ip->dev, bmap(ip, off/BSIZE));
++    m = min(n - tot, BSIZE - off%BSIZE);
++    800040f8:	40000d13          	li	s10,1024
++    if(either_copyin(bp->data + (off % BSIZE), user_src, src, m) == -1) {
++    800040fc:	5cfd                	li	s9,-1
++    800040fe:	a091                	j	80004142 <writei+0x8e>
++    80004100:	02099d93          	slli	s11,s3,0x20
++    80004104:	020ddd93          	srli	s11,s11,0x20
++    80004108:	05848513          	addi	a0,s1,88
++    8000410c:	86ee                	mv	a3,s11
++    8000410e:	8656                	mv	a2,s5
++    80004110:	85e2                	mv	a1,s8
++    80004112:	953a                	add	a0,a0,a4
++    80004114:	fffff097          	auipc	ra,0xfffff
++    80004118:	8b6080e7          	jalr	-1866(ra) # 800029ca <either_copyin>
++    8000411c:	07950263          	beq	a0,s9,80004180 <writei+0xcc>
++      brelse(bp);
++      break;
++    }
++    log_write(bp);
++    80004120:	8526                	mv	a0,s1
++    80004122:	00000097          	auipc	ra,0x0
++    80004126:	798080e7          	jalr	1944(ra) # 800048ba <log_write>
++    brelse(bp);
++    8000412a:	8526                	mv	a0,s1
++    8000412c:	fffff097          	auipc	ra,0xfffff
++    80004130:	50a080e7          	jalr	1290(ra) # 80003636 <brelse>
++  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
++    80004134:	01498a3b          	addw	s4,s3,s4
++    80004138:	0129893b          	addw	s2,s3,s2
++    8000413c:	9aee                	add	s5,s5,s11
++    8000413e:	057a7663          	bgeu	s4,s7,8000418a <writei+0xd6>
++    bp = bread(ip->dev, bmap(ip, off/BSIZE));
++    80004142:	000b2483          	lw	s1,0(s6)
++    80004146:	00a9559b          	srliw	a1,s2,0xa
++    8000414a:	855a                	mv	a0,s6
++    8000414c:	fffff097          	auipc	ra,0xfffff
++    80004150:	7aa080e7          	jalr	1962(ra) # 800038f6 <bmap>
++    80004154:	0005059b          	sext.w	a1,a0
++    80004158:	8526                	mv	a0,s1
++    8000415a:	fffff097          	auipc	ra,0xfffff
++    8000415e:	3ac080e7          	jalr	940(ra) # 80003506 <bread>
++    80004162:	84aa                	mv	s1,a0
++    m = min(n - tot, BSIZE - off%BSIZE);
++    80004164:	3ff97713          	andi	a4,s2,1023
++    80004168:	40ed07bb          	subw	a5,s10,a4
++    8000416c:	414b86bb          	subw	a3,s7,s4
++    80004170:	89be                	mv	s3,a5
++    80004172:	2781                	sext.w	a5,a5
++    80004174:	0006861b          	sext.w	a2,a3
++    80004178:	f8f674e3          	bgeu	a2,a5,80004100 <writei+0x4c>
++    8000417c:	89b6                	mv	s3,a3
++    8000417e:	b749                	j	80004100 <writei+0x4c>
++      brelse(bp);
++    80004180:	8526                	mv	a0,s1
++    80004182:	fffff097          	auipc	ra,0xfffff
++    80004186:	4b4080e7          	jalr	1204(ra) # 80003636 <brelse>
++  }
++
++  if(off > ip->size)
++    8000418a:	04cb2783          	lw	a5,76(s6)
++    8000418e:	0127f463          	bgeu	a5,s2,80004196 <writei+0xe2>
++    ip->size = off;
++    80004192:	052b2623          	sw	s2,76(s6)
++
++  // write the i-node back to disk even if the size didn't change
++  // because the loop above might have called bmap() and added a new
++  // block to ip->addrs[].
++  iupdate(ip);
++    80004196:	855a                	mv	a0,s6
++    80004198:	00000097          	auipc	ra,0x0
++    8000419c:	aa4080e7          	jalr	-1372(ra) # 80003c3c <iupdate>
++
++  return tot;
++    800041a0:	000a051b          	sext.w	a0,s4
++}
++    800041a4:	70a6                	ld	ra,104(sp)
++    800041a6:	7406                	ld	s0,96(sp)
++    800041a8:	64e6                	ld	s1,88(sp)
++    800041aa:	6946                	ld	s2,80(sp)
++    800041ac:	69a6                	ld	s3,72(sp)
++    800041ae:	6a06                	ld	s4,64(sp)
++    800041b0:	7ae2                	ld	s5,56(sp)
++    800041b2:	7b42                	ld	s6,48(sp)
++    800041b4:	7ba2                	ld	s7,40(sp)
++    800041b6:	7c02                	ld	s8,32(sp)
++    800041b8:	6ce2                	ld	s9,24(sp)
++    800041ba:	6d42                	ld	s10,16(sp)
++    800041bc:	6da2                	ld	s11,8(sp)
++    800041be:	6165                	addi	sp,sp,112
++    800041c0:	8082                	ret
++  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
++    800041c2:	8a5e                	mv	s4,s7
++    800041c4:	bfc9                	j	80004196 <writei+0xe2>
++    return -1;
++    800041c6:	557d                	li	a0,-1
++}
++    800041c8:	8082                	ret
++    return -1;
++    800041ca:	557d                	li	a0,-1
++    800041cc:	bfe1                	j	800041a4 <writei+0xf0>
++    return -1;
++    800041ce:	557d                	li	a0,-1
++    800041d0:	bfd1                	j	800041a4 <writei+0xf0>
++
++00000000800041d2 <namecmp>:
++
++// Directories
++
++int
++namecmp(const char *s, const char *t)
++{
++    800041d2:	1141                	addi	sp,sp,-16
++    800041d4:	e406                	sd	ra,8(sp)
++    800041d6:	e022                	sd	s0,0(sp)
++    800041d8:	0800                	addi	s0,sp,16
++  return strncmp(s, t, DIRSIZ);
++    800041da:	4639                	li	a2,14
++    800041dc:	ffffd097          	auipc	ra,0xffffd
++    800041e0:	bc0080e7          	jalr	-1088(ra) # 80000d9c <strncmp>
++}
++    800041e4:	60a2                	ld	ra,8(sp)
++    800041e6:	6402                	ld	s0,0(sp)
++    800041e8:	0141                	addi	sp,sp,16
++    800041ea:	8082                	ret
++
++00000000800041ec <dirlookup>:
++
++// Look for a directory entry in a directory.
++// If found, set *poff to byte offset of entry.
++struct inode*
++dirlookup(struct inode *dp, char *name, uint *poff)
++{
++    800041ec:	7139                	addi	sp,sp,-64
++    800041ee:	fc06                	sd	ra,56(sp)
++    800041f0:	f822                	sd	s0,48(sp)
++    800041f2:	f426                	sd	s1,40(sp)
++    800041f4:	f04a                	sd	s2,32(sp)
++    800041f6:	ec4e                	sd	s3,24(sp)
++    800041f8:	e852                	sd	s4,16(sp)
++    800041fa:	0080                	addi	s0,sp,64
++  uint off, inum;
++  struct dirent de;
++
++  if(dp->type != T_DIR)
++    800041fc:	04451703          	lh	a4,68(a0)
++    80004200:	4785                	li	a5,1
++    80004202:	00f71a63          	bne	a4,a5,80004216 <dirlookup+0x2a>
++    80004206:	892a                	mv	s2,a0
++    80004208:	89ae                	mv	s3,a1
++    8000420a:	8a32                	mv	s4,a2
++    panic("dirlookup not DIR");
++
++  for(off = 0; off < dp->size; off += sizeof(de)){
++    8000420c:	457c                	lw	a5,76(a0)
++    8000420e:	4481                	li	s1,0
++      inum = de.inum;
++      return iget(dp->dev, inum);
++    }
++  }
++
++  return 0;
++    80004210:	4501                	li	a0,0
++  for(off = 0; off < dp->size; off += sizeof(de)){
++    80004212:	e79d                	bnez	a5,80004240 <dirlookup+0x54>
++    80004214:	a8a5                	j	8000428c <dirlookup+0xa0>
++    panic("dirlookup not DIR");
++    80004216:	00004517          	auipc	a0,0x4
++    8000421a:	44250513          	addi	a0,a0,1090 # 80008658 <syscalls+0x1d0>
++    8000421e:	ffffc097          	auipc	ra,0xffffc
++    80004222:	31c080e7          	jalr	796(ra) # 8000053a <panic>
++      panic("dirlookup read");
++    80004226:	00004517          	auipc	a0,0x4
++    8000422a:	44a50513          	addi	a0,a0,1098 # 80008670 <syscalls+0x1e8>
++    8000422e:	ffffc097          	auipc	ra,0xffffc
++    80004232:	30c080e7          	jalr	780(ra) # 8000053a <panic>
++  for(off = 0; off < dp->size; off += sizeof(de)){
++    80004236:	24c1                	addiw	s1,s1,16
++    80004238:	04c92783          	lw	a5,76(s2)
++    8000423c:	04f4f763          	bgeu	s1,a5,8000428a <dirlookup+0x9e>
++    if(readi(dp, 0, (uint64)&de, off, sizeof(de)) != sizeof(de))
++    80004240:	4741                	li	a4,16
++    80004242:	86a6                	mv	a3,s1
++    80004244:	fc040613          	addi	a2,s0,-64
++    80004248:	4581                	li	a1,0
++    8000424a:	854a                	mv	a0,s2
++    8000424c:	00000097          	auipc	ra,0x0
++    80004250:	d70080e7          	jalr	-656(ra) # 80003fbc <readi>
++    80004254:	47c1                	li	a5,16
++    80004256:	fcf518e3          	bne	a0,a5,80004226 <dirlookup+0x3a>
++    if(de.inum == 0)
++    8000425a:	fc045783          	lhu	a5,-64(s0)
++    8000425e:	dfe1                	beqz	a5,80004236 <dirlookup+0x4a>
++    if(namecmp(name, de.name) == 0){
++    80004260:	fc240593          	addi	a1,s0,-62
++    80004264:	854e                	mv	a0,s3
++    80004266:	00000097          	auipc	ra,0x0
++    8000426a:	f6c080e7          	jalr	-148(ra) # 800041d2 <namecmp>
++    8000426e:	f561                	bnez	a0,80004236 <dirlookup+0x4a>
++      if(poff)
++    80004270:	000a0463          	beqz	s4,80004278 <dirlookup+0x8c>
++        *poff = off;
++    80004274:	009a2023          	sw	s1,0(s4)
++      return iget(dp->dev, inum);
++    80004278:	fc045583          	lhu	a1,-64(s0)
++    8000427c:	00092503          	lw	a0,0(s2)
++    80004280:	fffff097          	auipc	ra,0xfffff
++    80004284:	752080e7          	jalr	1874(ra) # 800039d2 <iget>
++    80004288:	a011                	j	8000428c <dirlookup+0xa0>
++  return 0;
++    8000428a:	4501                	li	a0,0
++}
++    8000428c:	70e2                	ld	ra,56(sp)
++    8000428e:	7442                	ld	s0,48(sp)
++    80004290:	74a2                	ld	s1,40(sp)
++    80004292:	7902                	ld	s2,32(sp)
++    80004294:	69e2                	ld	s3,24(sp)
++    80004296:	6a42                	ld	s4,16(sp)
++    80004298:	6121                	addi	sp,sp,64
++    8000429a:	8082                	ret
++
++000000008000429c <namex>:
++// If parent != 0, return the inode for the parent and copy the final
++// path element into name, which must have room for DIRSIZ bytes.
++// Must be called inside a transaction since it calls iput().
++static struct inode*
++namex(char *path, int nameiparent, char *name)
++{
++    8000429c:	711d                	addi	sp,sp,-96
++    8000429e:	ec86                	sd	ra,88(sp)
++    800042a0:	e8a2                	sd	s0,80(sp)
++    800042a2:	e4a6                	sd	s1,72(sp)
++    800042a4:	e0ca                	sd	s2,64(sp)
++    800042a6:	fc4e                	sd	s3,56(sp)
++    800042a8:	f852                	sd	s4,48(sp)
++    800042aa:	f456                	sd	s5,40(sp)
++    800042ac:	f05a                	sd	s6,32(sp)
++    800042ae:	ec5e                	sd	s7,24(sp)
++    800042b0:	e862                	sd	s8,16(sp)
++    800042b2:	e466                	sd	s9,8(sp)
++    800042b4:	e06a                	sd	s10,0(sp)
++    800042b6:	1080                	addi	s0,sp,96
++    800042b8:	84aa                	mv	s1,a0
++    800042ba:	8b2e                	mv	s6,a1
++    800042bc:	8ab2                	mv	s5,a2
++  struct inode *ip, *next;
++
++  if(*path == '/')
++    800042be:	00054703          	lbu	a4,0(a0)
++    800042c2:	02f00793          	li	a5,47
++    800042c6:	02f70363          	beq	a4,a5,800042ec <namex+0x50>
++    ip = iget(ROOTDEV, ROOTINO);
++  else
++    ip = idup(myproc()->cwd);
++    800042ca:	ffffe097          	auipc	ra,0xffffe
++    800042ce:	aac080e7          	jalr	-1364(ra) # 80001d76 <myproc>
++    800042d2:	1d053503          	ld	a0,464(a0)
++    800042d6:	00000097          	auipc	ra,0x0
++    800042da:	9f4080e7          	jalr	-1548(ra) # 80003cca <idup>
++    800042de:	8a2a                	mv	s4,a0
++  while(*path == '/')
++    800042e0:	02f00913          	li	s2,47
++  if(len >= DIRSIZ)
++    800042e4:	4cb5                	li	s9,13
++  len = path - s;
++    800042e6:	4b81                	li	s7,0
++
++  while((path = skipelem(path, name)) != 0){
++    ilock(ip);
++    if(ip->type != T_DIR){
++    800042e8:	4c05                	li	s8,1
++    800042ea:	a87d                	j	800043a8 <namex+0x10c>
++    ip = iget(ROOTDEV, ROOTINO);
++    800042ec:	4585                	li	a1,1
++    800042ee:	4505                	li	a0,1
++    800042f0:	fffff097          	auipc	ra,0xfffff
++    800042f4:	6e2080e7          	jalr	1762(ra) # 800039d2 <iget>
++    800042f8:	8a2a                	mv	s4,a0
++    800042fa:	b7dd                	j	800042e0 <namex+0x44>
++      iunlockput(ip);
++    800042fc:	8552                	mv	a0,s4
++    800042fe:	00000097          	auipc	ra,0x0
++    80004302:	c6c080e7          	jalr	-916(ra) # 80003f6a <iunlockput>
++      return 0;
++    80004306:	4a01                	li	s4,0
++  if(nameiparent){
++    iput(ip);
++    return 0;
++  }
++  return ip;
++}
++    80004308:	8552                	mv	a0,s4
++    8000430a:	60e6                	ld	ra,88(sp)
++    8000430c:	6446                	ld	s0,80(sp)
++    8000430e:	64a6                	ld	s1,72(sp)
++    80004310:	6906                	ld	s2,64(sp)
++    80004312:	79e2                	ld	s3,56(sp)
++    80004314:	7a42                	ld	s4,48(sp)
++    80004316:	7aa2                	ld	s5,40(sp)
++    80004318:	7b02                	ld	s6,32(sp)
++    8000431a:	6be2                	ld	s7,24(sp)
++    8000431c:	6c42                	ld	s8,16(sp)
++    8000431e:	6ca2                	ld	s9,8(sp)
++    80004320:	6d02                	ld	s10,0(sp)
++    80004322:	6125                	addi	sp,sp,96
++    80004324:	8082                	ret
++      iunlock(ip);
++    80004326:	8552                	mv	a0,s4
++    80004328:	00000097          	auipc	ra,0x0
++    8000432c:	aa2080e7          	jalr	-1374(ra) # 80003dca <iunlock>
++      return ip;
++    80004330:	bfe1                	j	80004308 <namex+0x6c>
++      iunlockput(ip);
++    80004332:	8552                	mv	a0,s4
++    80004334:	00000097          	auipc	ra,0x0
++    80004338:	c36080e7          	jalr	-970(ra) # 80003f6a <iunlockput>
++      return 0;
++    8000433c:	8a4e                	mv	s4,s3
++    8000433e:	b7e9                	j	80004308 <namex+0x6c>
++  len = path - s;
++    80004340:	40998633          	sub	a2,s3,s1
++    80004344:	00060d1b          	sext.w	s10,a2
++  if(len >= DIRSIZ)
++    80004348:	09acd863          	bge	s9,s10,800043d8 <namex+0x13c>
++    memmove(name, s, DIRSIZ);
++    8000434c:	4639                	li	a2,14
++    8000434e:	85a6                	mv	a1,s1
++    80004350:	8556                	mv	a0,s5
++    80004352:	ffffd097          	auipc	ra,0xffffd
++    80004356:	9d6080e7          	jalr	-1578(ra) # 80000d28 <memmove>
++    8000435a:	84ce                	mv	s1,s3
++  while(*path == '/')
++    8000435c:	0004c783          	lbu	a5,0(s1)
++    80004360:	01279763          	bne	a5,s2,8000436e <namex+0xd2>
++    path++;
++    80004364:	0485                	addi	s1,s1,1
++  while(*path == '/')
++    80004366:	0004c783          	lbu	a5,0(s1)
++    8000436a:	ff278de3          	beq	a5,s2,80004364 <namex+0xc8>
++    ilock(ip);
++    8000436e:	8552                	mv	a0,s4
++    80004370:	00000097          	auipc	ra,0x0
++    80004374:	998080e7          	jalr	-1640(ra) # 80003d08 <ilock>
++    if(ip->type != T_DIR){
++    80004378:	044a1783          	lh	a5,68(s4)
++    8000437c:	f98790e3          	bne	a5,s8,800042fc <namex+0x60>
++    if(nameiparent && *path == '\0'){
++    80004380:	000b0563          	beqz	s6,8000438a <namex+0xee>
++    80004384:	0004c783          	lbu	a5,0(s1)
++    80004388:	dfd9                	beqz	a5,80004326 <namex+0x8a>
++    if((next = dirlookup(ip, name, 0)) == 0){
++    8000438a:	865e                	mv	a2,s7
++    8000438c:	85d6                	mv	a1,s5
++    8000438e:	8552                	mv	a0,s4
++    80004390:	00000097          	auipc	ra,0x0
++    80004394:	e5c080e7          	jalr	-420(ra) # 800041ec <dirlookup>
++    80004398:	89aa                	mv	s3,a0
++    8000439a:	dd41                	beqz	a0,80004332 <namex+0x96>
++    iunlockput(ip);
++    8000439c:	8552                	mv	a0,s4
++    8000439e:	00000097          	auipc	ra,0x0
++    800043a2:	bcc080e7          	jalr	-1076(ra) # 80003f6a <iunlockput>
++    ip = next;
++    800043a6:	8a4e                	mv	s4,s3
++  while(*path == '/')
++    800043a8:	0004c783          	lbu	a5,0(s1)
++    800043ac:	01279763          	bne	a5,s2,800043ba <namex+0x11e>
++    path++;
++    800043b0:	0485                	addi	s1,s1,1
++  while(*path == '/')
++    800043b2:	0004c783          	lbu	a5,0(s1)
++    800043b6:	ff278de3          	beq	a5,s2,800043b0 <namex+0x114>
++  if(*path == 0)
++    800043ba:	cb9d                	beqz	a5,800043f0 <namex+0x154>
++  while(*path != '/' && *path != 0)
++    800043bc:	0004c783          	lbu	a5,0(s1)
++    800043c0:	89a6                	mv	s3,s1
++  len = path - s;
++    800043c2:	8d5e                	mv	s10,s7
++    800043c4:	865e                	mv	a2,s7
++  while(*path != '/' && *path != 0)
++    800043c6:	01278963          	beq	a5,s2,800043d8 <namex+0x13c>
++    800043ca:	dbbd                	beqz	a5,80004340 <namex+0xa4>
++    path++;
++    800043cc:	0985                	addi	s3,s3,1
++  while(*path != '/' && *path != 0)
++    800043ce:	0009c783          	lbu	a5,0(s3)
++    800043d2:	ff279ce3          	bne	a5,s2,800043ca <namex+0x12e>
++    800043d6:	b7ad                	j	80004340 <namex+0xa4>
++    memmove(name, s, len);
++    800043d8:	2601                	sext.w	a2,a2
++    800043da:	85a6                	mv	a1,s1
++    800043dc:	8556                	mv	a0,s5
++    800043de:	ffffd097          	auipc	ra,0xffffd
++    800043e2:	94a080e7          	jalr	-1718(ra) # 80000d28 <memmove>
++    name[len] = 0;
++    800043e6:	9d56                	add	s10,s10,s5
++    800043e8:	000d0023          	sb	zero,0(s10)
++    800043ec:	84ce                	mv	s1,s3
++    800043ee:	b7bd                	j	8000435c <namex+0xc0>
++  if(nameiparent){
++    800043f0:	f00b0ce3          	beqz	s6,80004308 <namex+0x6c>
++    iput(ip);
++    800043f4:	8552                	mv	a0,s4
++    800043f6:	00000097          	auipc	ra,0x0
++    800043fa:	acc080e7          	jalr	-1332(ra) # 80003ec2 <iput>
++    return 0;
++    800043fe:	4a01                	li	s4,0
++    80004400:	b721                	j	80004308 <namex+0x6c>
++
++0000000080004402 <dirlink>:
++{
++    80004402:	7139                	addi	sp,sp,-64
++    80004404:	fc06                	sd	ra,56(sp)
++    80004406:	f822                	sd	s0,48(sp)
++    80004408:	f426                	sd	s1,40(sp)
++    8000440a:	f04a                	sd	s2,32(sp)
++    8000440c:	ec4e                	sd	s3,24(sp)
++    8000440e:	e852                	sd	s4,16(sp)
++    80004410:	0080                	addi	s0,sp,64
++    80004412:	892a                	mv	s2,a0
++    80004414:	8a2e                	mv	s4,a1
++    80004416:	89b2                	mv	s3,a2
++  if((ip = dirlookup(dp, name, 0)) != 0){
++    80004418:	4601                	li	a2,0
++    8000441a:	00000097          	auipc	ra,0x0
++    8000441e:	dd2080e7          	jalr	-558(ra) # 800041ec <dirlookup>
++    80004422:	e93d                	bnez	a0,80004498 <dirlink+0x96>
++  for(off = 0; off < dp->size; off += sizeof(de)){
++    80004424:	04c92483          	lw	s1,76(s2)
++    80004428:	c49d                	beqz	s1,80004456 <dirlink+0x54>
++    8000442a:	4481                	li	s1,0
++    if(readi(dp, 0, (uint64)&de, off, sizeof(de)) != sizeof(de))
++    8000442c:	4741                	li	a4,16
++    8000442e:	86a6                	mv	a3,s1
++    80004430:	fc040613          	addi	a2,s0,-64
++    80004434:	4581                	li	a1,0
++    80004436:	854a                	mv	a0,s2
++    80004438:	00000097          	auipc	ra,0x0
++    8000443c:	b84080e7          	jalr	-1148(ra) # 80003fbc <readi>
++    80004440:	47c1                	li	a5,16
++    80004442:	06f51163          	bne	a0,a5,800044a4 <dirlink+0xa2>
++    if(de.inum == 0)
++    80004446:	fc045783          	lhu	a5,-64(s0)
++    8000444a:	c791                	beqz	a5,80004456 <dirlink+0x54>
++  for(off = 0; off < dp->size; off += sizeof(de)){
++    8000444c:	24c1                	addiw	s1,s1,16
++    8000444e:	04c92783          	lw	a5,76(s2)
++    80004452:	fcf4ede3          	bltu	s1,a5,8000442c <dirlink+0x2a>
++  strncpy(de.name, name, DIRSIZ);
++    80004456:	4639                	li	a2,14
++    80004458:	85d2                	mv	a1,s4
++    8000445a:	fc240513          	addi	a0,s0,-62
++    8000445e:	ffffd097          	auipc	ra,0xffffd
++    80004462:	97a080e7          	jalr	-1670(ra) # 80000dd8 <strncpy>
++  de.inum = inum;
++    80004466:	fd341023          	sh	s3,-64(s0)
++  if(writei(dp, 0, (uint64)&de, off, sizeof(de)) != sizeof(de))
++    8000446a:	4741                	li	a4,16
++    8000446c:	86a6                	mv	a3,s1
++    8000446e:	fc040613          	addi	a2,s0,-64
++    80004472:	4581                	li	a1,0
++    80004474:	854a                	mv	a0,s2
++    80004476:	00000097          	auipc	ra,0x0
++    8000447a:	c3e080e7          	jalr	-962(ra) # 800040b4 <writei>
++    8000447e:	872a                	mv	a4,a0
++    80004480:	47c1                	li	a5,16
++  return 0;
++    80004482:	4501                	li	a0,0
++  if(writei(dp, 0, (uint64)&de, off, sizeof(de)) != sizeof(de))
++    80004484:	02f71863          	bne	a4,a5,800044b4 <dirlink+0xb2>
++}
++    80004488:	70e2                	ld	ra,56(sp)
++    8000448a:	7442                	ld	s0,48(sp)
++    8000448c:	74a2                	ld	s1,40(sp)
++    8000448e:	7902                	ld	s2,32(sp)
++    80004490:	69e2                	ld	s3,24(sp)
++    80004492:	6a42                	ld	s4,16(sp)
++    80004494:	6121                	addi	sp,sp,64
++    80004496:	8082                	ret
++    iput(ip);
++    80004498:	00000097          	auipc	ra,0x0
++    8000449c:	a2a080e7          	jalr	-1494(ra) # 80003ec2 <iput>
++    return -1;
++    800044a0:	557d                	li	a0,-1
++    800044a2:	b7dd                	j	80004488 <dirlink+0x86>
++      panic("dirlink read");
++    800044a4:	00004517          	auipc	a0,0x4
++    800044a8:	1dc50513          	addi	a0,a0,476 # 80008680 <syscalls+0x1f8>
++    800044ac:	ffffc097          	auipc	ra,0xffffc
++    800044b0:	08e080e7          	jalr	142(ra) # 8000053a <panic>
++    panic("dirlink");
++    800044b4:	00004517          	auipc	a0,0x4
++    800044b8:	2dc50513          	addi	a0,a0,732 # 80008790 <syscalls+0x308>
++    800044bc:	ffffc097          	auipc	ra,0xffffc
++    800044c0:	07e080e7          	jalr	126(ra) # 8000053a <panic>
++
++00000000800044c4 <namei>:
++
++struct inode*
++namei(char *path)
++{
++    800044c4:	1101                	addi	sp,sp,-32
++    800044c6:	ec06                	sd	ra,24(sp)
++    800044c8:	e822                	sd	s0,16(sp)
++    800044ca:	1000                	addi	s0,sp,32
++  char name[DIRSIZ];
++  return namex(path, 0, name);
++    800044cc:	fe040613          	addi	a2,s0,-32
++    800044d0:	4581                	li	a1,0
++    800044d2:	00000097          	auipc	ra,0x0
++    800044d6:	dca080e7          	jalr	-566(ra) # 8000429c <namex>
++}
++    800044da:	60e2                	ld	ra,24(sp)
++    800044dc:	6442                	ld	s0,16(sp)
++    800044de:	6105                	addi	sp,sp,32
++    800044e0:	8082                	ret
++
++00000000800044e2 <nameiparent>:
++
++struct inode*
++nameiparent(char *path, char *name)
++{
++    800044e2:	1141                	addi	sp,sp,-16
++    800044e4:	e406                	sd	ra,8(sp)
++    800044e6:	e022                	sd	s0,0(sp)
++    800044e8:	0800                	addi	s0,sp,16
++    800044ea:	862e                	mv	a2,a1
++  return namex(path, 1, name);
++    800044ec:	4585                	li	a1,1
++    800044ee:	00000097          	auipc	ra,0x0
++    800044f2:	dae080e7          	jalr	-594(ra) # 8000429c <namex>
++}
++    800044f6:	60a2                	ld	ra,8(sp)
++    800044f8:	6402                	ld	s0,0(sp)
++    800044fa:	0141                	addi	sp,sp,16
++    800044fc:	8082                	ret
++
++00000000800044fe <write_head>:
++// Write in-memory log header to disk.
++// This is the true point at which the
++// current transaction commits.
++static void
++write_head(void)
++{
++    800044fe:	1101                	addi	sp,sp,-32
++    80004500:	ec06                	sd	ra,24(sp)
++    80004502:	e822                	sd	s0,16(sp)
++    80004504:	e426                	sd	s1,8(sp)
++    80004506:	e04a                	sd	s2,0(sp)
++    80004508:	1000                	addi	s0,sp,32
++  struct buf *buf = bread(log.dev, log.start);
++    8000450a:	00020917          	auipc	s2,0x20
++    8000450e:	35e90913          	addi	s2,s2,862 # 80024868 <log>
++    80004512:	01892583          	lw	a1,24(s2)
++    80004516:	02892503          	lw	a0,40(s2)
++    8000451a:	fffff097          	auipc	ra,0xfffff
++    8000451e:	fec080e7          	jalr	-20(ra) # 80003506 <bread>
++    80004522:	84aa                	mv	s1,a0
++  struct logheader *hb = (struct logheader *) (buf->data);
++  int i;
++  hb->n = log.lh.n;
++    80004524:	02c92683          	lw	a3,44(s2)
++    80004528:	cd34                	sw	a3,88(a0)
++  for (i = 0; i < log.lh.n; i++) {
++    8000452a:	02d05863          	blez	a3,8000455a <write_head+0x5c>
++    8000452e:	00020797          	auipc	a5,0x20
++    80004532:	36a78793          	addi	a5,a5,874 # 80024898 <log+0x30>
++    80004536:	05c50713          	addi	a4,a0,92
++    8000453a:	36fd                	addiw	a3,a3,-1
++    8000453c:	02069613          	slli	a2,a3,0x20
++    80004540:	01e65693          	srli	a3,a2,0x1e
++    80004544:	00020617          	auipc	a2,0x20
++    80004548:	35860613          	addi	a2,a2,856 # 8002489c <log+0x34>
++    8000454c:	96b2                	add	a3,a3,a2
++    hb->block[i] = log.lh.block[i];
++    8000454e:	4390                	lw	a2,0(a5)
++    80004550:	c310                	sw	a2,0(a4)
++  for (i = 0; i < log.lh.n; i++) {
++    80004552:	0791                	addi	a5,a5,4
++    80004554:	0711                	addi	a4,a4,4 # 43004 <_entry-0x7ffbcffc>
++    80004556:	fed79ce3          	bne	a5,a3,8000454e <write_head+0x50>
++  }
++  bwrite(buf);
++    8000455a:	8526                	mv	a0,s1
++    8000455c:	fffff097          	auipc	ra,0xfffff
++    80004560:	09c080e7          	jalr	156(ra) # 800035f8 <bwrite>
++  brelse(buf);
++    80004564:	8526                	mv	a0,s1
++    80004566:	fffff097          	auipc	ra,0xfffff
++    8000456a:	0d0080e7          	jalr	208(ra) # 80003636 <brelse>
++}
++    8000456e:	60e2                	ld	ra,24(sp)
++    80004570:	6442                	ld	s0,16(sp)
++    80004572:	64a2                	ld	s1,8(sp)
++    80004574:	6902                	ld	s2,0(sp)
++    80004576:	6105                	addi	sp,sp,32
++    80004578:	8082                	ret
++
++000000008000457a <install_trans>:
++  for (tail = 0; tail < log.lh.n; tail++) {
++    8000457a:	00020797          	auipc	a5,0x20
++    8000457e:	31a7a783          	lw	a5,794(a5) # 80024894 <log+0x2c>
++    80004582:	0af05d63          	blez	a5,8000463c <install_trans+0xc2>
++{
++    80004586:	7139                	addi	sp,sp,-64
++    80004588:	fc06                	sd	ra,56(sp)
++    8000458a:	f822                	sd	s0,48(sp)
++    8000458c:	f426                	sd	s1,40(sp)
++    8000458e:	f04a                	sd	s2,32(sp)
++    80004590:	ec4e                	sd	s3,24(sp)
++    80004592:	e852                	sd	s4,16(sp)
++    80004594:	e456                	sd	s5,8(sp)
++    80004596:	e05a                	sd	s6,0(sp)
++    80004598:	0080                	addi	s0,sp,64
++    8000459a:	8b2a                	mv	s6,a0
++    8000459c:	00020a97          	auipc	s5,0x20
++    800045a0:	2fca8a93          	addi	s5,s5,764 # 80024898 <log+0x30>
++  for (tail = 0; tail < log.lh.n; tail++) {
++    800045a4:	4a01                	li	s4,0
++    struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
++    800045a6:	00020997          	auipc	s3,0x20
++    800045aa:	2c298993          	addi	s3,s3,706 # 80024868 <log>
++    800045ae:	a00d                	j	800045d0 <install_trans+0x56>
++    brelse(lbuf);
++    800045b0:	854a                	mv	a0,s2
++    800045b2:	fffff097          	auipc	ra,0xfffff
++    800045b6:	084080e7          	jalr	132(ra) # 80003636 <brelse>
++    brelse(dbuf);
++    800045ba:	8526                	mv	a0,s1
++    800045bc:	fffff097          	auipc	ra,0xfffff
++    800045c0:	07a080e7          	jalr	122(ra) # 80003636 <brelse>
++  for (tail = 0; tail < log.lh.n; tail++) {
++    800045c4:	2a05                	addiw	s4,s4,1
++    800045c6:	0a91                	addi	s5,s5,4
++    800045c8:	02c9a783          	lw	a5,44(s3)
++    800045cc:	04fa5e63          	bge	s4,a5,80004628 <install_trans+0xae>
++    struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
++    800045d0:	0189a583          	lw	a1,24(s3)
++    800045d4:	014585bb          	addw	a1,a1,s4
++    800045d8:	2585                	addiw	a1,a1,1
++    800045da:	0289a503          	lw	a0,40(s3)
++    800045de:	fffff097          	auipc	ra,0xfffff
++    800045e2:	f28080e7          	jalr	-216(ra) # 80003506 <bread>
++    800045e6:	892a                	mv	s2,a0
++    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
++    800045e8:	000aa583          	lw	a1,0(s5)
++    800045ec:	0289a503          	lw	a0,40(s3)
++    800045f0:	fffff097          	auipc	ra,0xfffff
++    800045f4:	f16080e7          	jalr	-234(ra) # 80003506 <bread>
++    800045f8:	84aa                	mv	s1,a0
++    memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
++    800045fa:	40000613          	li	a2,1024
++    800045fe:	05890593          	addi	a1,s2,88
++    80004602:	05850513          	addi	a0,a0,88
++    80004606:	ffffc097          	auipc	ra,0xffffc
++    8000460a:	722080e7          	jalr	1826(ra) # 80000d28 <memmove>
++    bwrite(dbuf);  // write dst to disk
++    8000460e:	8526                	mv	a0,s1
++    80004610:	fffff097          	auipc	ra,0xfffff
++    80004614:	fe8080e7          	jalr	-24(ra) # 800035f8 <bwrite>
++    if(recovering == 0)
++    80004618:	f80b1ce3          	bnez	s6,800045b0 <install_trans+0x36>
++      bunpin(dbuf);
++    8000461c:	8526                	mv	a0,s1
++    8000461e:	fffff097          	auipc	ra,0xfffff
++    80004622:	0f2080e7          	jalr	242(ra) # 80003710 <bunpin>
++    80004626:	b769                	j	800045b0 <install_trans+0x36>
++}
++    80004628:	70e2                	ld	ra,56(sp)
++    8000462a:	7442                	ld	s0,48(sp)
++    8000462c:	74a2                	ld	s1,40(sp)
++    8000462e:	7902                	ld	s2,32(sp)
++    80004630:	69e2                	ld	s3,24(sp)
++    80004632:	6a42                	ld	s4,16(sp)
++    80004634:	6aa2                	ld	s5,8(sp)
++    80004636:	6b02                	ld	s6,0(sp)
++    80004638:	6121                	addi	sp,sp,64
++    8000463a:	8082                	ret
++    8000463c:	8082                	ret
++
++000000008000463e <initlog>:
++{
++    8000463e:	7179                	addi	sp,sp,-48
++    80004640:	f406                	sd	ra,40(sp)
++    80004642:	f022                	sd	s0,32(sp)
++    80004644:	ec26                	sd	s1,24(sp)
++    80004646:	e84a                	sd	s2,16(sp)
++    80004648:	e44e                	sd	s3,8(sp)
++    8000464a:	1800                	addi	s0,sp,48
++    8000464c:	892a                	mv	s2,a0
++    8000464e:	89ae                	mv	s3,a1
++  initlock(&log.lock, "log");
++    80004650:	00020497          	auipc	s1,0x20
++    80004654:	21848493          	addi	s1,s1,536 # 80024868 <log>
++    80004658:	00004597          	auipc	a1,0x4
++    8000465c:	03858593          	addi	a1,a1,56 # 80008690 <syscalls+0x208>
++    80004660:	8526                	mv	a0,s1
++    80004662:	ffffc097          	auipc	ra,0xffffc
++    80004666:	4de080e7          	jalr	1246(ra) # 80000b40 <initlock>
++  log.start = sb->logstart;
++    8000466a:	0149a583          	lw	a1,20(s3)
++    8000466e:	cc8c                	sw	a1,24(s1)
++  log.size = sb->nlog;
++    80004670:	0109a783          	lw	a5,16(s3)
++    80004674:	ccdc                	sw	a5,28(s1)
++  log.dev = dev;
++    80004676:	0324a423          	sw	s2,40(s1)
++  struct buf *buf = bread(log.dev, log.start);
++    8000467a:	854a                	mv	a0,s2
++    8000467c:	fffff097          	auipc	ra,0xfffff
++    80004680:	e8a080e7          	jalr	-374(ra) # 80003506 <bread>
++  log.lh.n = lh->n;
++    80004684:	4d34                	lw	a3,88(a0)
++    80004686:	d4d4                	sw	a3,44(s1)
++  for (i = 0; i < log.lh.n; i++) {
++    80004688:	02d05663          	blez	a3,800046b4 <initlog+0x76>
++    8000468c:	05c50793          	addi	a5,a0,92
++    80004690:	00020717          	auipc	a4,0x20
++    80004694:	20870713          	addi	a4,a4,520 # 80024898 <log+0x30>
++    80004698:	36fd                	addiw	a3,a3,-1
++    8000469a:	02069613          	slli	a2,a3,0x20
++    8000469e:	01e65693          	srli	a3,a2,0x1e
++    800046a2:	06050613          	addi	a2,a0,96
++    800046a6:	96b2                	add	a3,a3,a2
++    log.lh.block[i] = lh->block[i];
++    800046a8:	4390                	lw	a2,0(a5)
++    800046aa:	c310                	sw	a2,0(a4)
++  for (i = 0; i < log.lh.n; i++) {
++    800046ac:	0791                	addi	a5,a5,4
++    800046ae:	0711                	addi	a4,a4,4
++    800046b0:	fed79ce3          	bne	a5,a3,800046a8 <initlog+0x6a>
++  brelse(buf);
++    800046b4:	fffff097          	auipc	ra,0xfffff
++    800046b8:	f82080e7          	jalr	-126(ra) # 80003636 <brelse>
++
++static void
++recover_from_log(void)
++{
++  read_head();
++  install_trans(1); // if committed, copy from log to disk
++    800046bc:	4505                	li	a0,1
++    800046be:	00000097          	auipc	ra,0x0
++    800046c2:	ebc080e7          	jalr	-324(ra) # 8000457a <install_trans>
++  log.lh.n = 0;
++    800046c6:	00020797          	auipc	a5,0x20
++    800046ca:	1c07a723          	sw	zero,462(a5) # 80024894 <log+0x2c>
++  write_head(); // clear the log
++    800046ce:	00000097          	auipc	ra,0x0
++    800046d2:	e30080e7          	jalr	-464(ra) # 800044fe <write_head>
++}
++    800046d6:	70a2                	ld	ra,40(sp)
++    800046d8:	7402                	ld	s0,32(sp)
++    800046da:	64e2                	ld	s1,24(sp)
++    800046dc:	6942                	ld	s2,16(sp)
++    800046de:	69a2                	ld	s3,8(sp)
++    800046e0:	6145                	addi	sp,sp,48
++    800046e2:	8082                	ret
++
++00000000800046e4 <begin_op>:
++}
++
++// called at the start of each FS system call.
++void
++begin_op(void)
++{
++    800046e4:	1101                	addi	sp,sp,-32
++    800046e6:	ec06                	sd	ra,24(sp)
++    800046e8:	e822                	sd	s0,16(sp)
++    800046ea:	e426                	sd	s1,8(sp)
++    800046ec:	e04a                	sd	s2,0(sp)
++    800046ee:	1000                	addi	s0,sp,32
++  acquire(&log.lock);
++    800046f0:	00020517          	auipc	a0,0x20
++    800046f4:	17850513          	addi	a0,a0,376 # 80024868 <log>
++    800046f8:	ffffc097          	auipc	ra,0xffffc
++    800046fc:	4d8080e7          	jalr	1240(ra) # 80000bd0 <acquire>
++  while(1){
++    if(log.committing){
++    80004700:	00020497          	auipc	s1,0x20
++    80004704:	16848493          	addi	s1,s1,360 # 80024868 <log>
++      sleep(&log, &log.lock);
++    } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
++    80004708:	4979                	li	s2,30
++    8000470a:	a039                	j	80004718 <begin_op+0x34>
++      sleep(&log, &log.lock);
++    8000470c:	85a6                	mv	a1,s1
++    8000470e:	8526                	mv	a0,s1
++    80004710:	ffffe097          	auipc	ra,0xffffe
++    80004714:	e9c080e7          	jalr	-356(ra) # 800025ac <sleep>
++    if(log.committing){
++    80004718:	50dc                	lw	a5,36(s1)
++    8000471a:	fbed                	bnez	a5,8000470c <begin_op+0x28>
++    } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
++    8000471c:	5098                	lw	a4,32(s1)
++    8000471e:	2705                	addiw	a4,a4,1
++    80004720:	0007069b          	sext.w	a3,a4
++    80004724:	0027179b          	slliw	a5,a4,0x2
++    80004728:	9fb9                	addw	a5,a5,a4
++    8000472a:	0017979b          	slliw	a5,a5,0x1
++    8000472e:	54d8                	lw	a4,44(s1)
++    80004730:	9fb9                	addw	a5,a5,a4
++    80004732:	00f95963          	bge	s2,a5,80004744 <begin_op+0x60>
++      // this op might exhaust log space; wait for commit.
++      sleep(&log, &log.lock);
++    80004736:	85a6                	mv	a1,s1
++    80004738:	8526                	mv	a0,s1
++    8000473a:	ffffe097          	auipc	ra,0xffffe
++    8000473e:	e72080e7          	jalr	-398(ra) # 800025ac <sleep>
++    80004742:	bfd9                	j	80004718 <begin_op+0x34>
++    } else {
++      log.outstanding += 1;
++    80004744:	00020517          	auipc	a0,0x20
++    80004748:	12450513          	addi	a0,a0,292 # 80024868 <log>
++    8000474c:	d114                	sw	a3,32(a0)
++      release(&log.lock);
++    8000474e:	ffffc097          	auipc	ra,0xffffc
++    80004752:	536080e7          	jalr	1334(ra) # 80000c84 <release>
++      break;
++    }
++  }
++}
++    80004756:	60e2                	ld	ra,24(sp)
++    80004758:	6442                	ld	s0,16(sp)
++    8000475a:	64a2                	ld	s1,8(sp)
++    8000475c:	6902                	ld	s2,0(sp)
++    8000475e:	6105                	addi	sp,sp,32
++    80004760:	8082                	ret
++
++0000000080004762 <end_op>:
++
++// called at the end of each FS system call.
++// commits if this was the last outstanding operation.
++void
++end_op(void)
++{
++    80004762:	7139                	addi	sp,sp,-64
++    80004764:	fc06                	sd	ra,56(sp)
++    80004766:	f822                	sd	s0,48(sp)
++    80004768:	f426                	sd	s1,40(sp)
++    8000476a:	f04a                	sd	s2,32(sp)
++    8000476c:	ec4e                	sd	s3,24(sp)
++    8000476e:	e852                	sd	s4,16(sp)
++    80004770:	e456                	sd	s5,8(sp)
++    80004772:	0080                	addi	s0,sp,64
++  int do_commit = 0;
++
++  acquire(&log.lock);
++    80004774:	00020497          	auipc	s1,0x20
++    80004778:	0f448493          	addi	s1,s1,244 # 80024868 <log>
++    8000477c:	8526                	mv	a0,s1
++    8000477e:	ffffc097          	auipc	ra,0xffffc
++    80004782:	452080e7          	jalr	1106(ra) # 80000bd0 <acquire>
++  log.outstanding -= 1;
++    80004786:	509c                	lw	a5,32(s1)
++    80004788:	37fd                	addiw	a5,a5,-1
++    8000478a:	0007891b          	sext.w	s2,a5
++    8000478e:	d09c                	sw	a5,32(s1)
++  if(log.committing)
++    80004790:	50dc                	lw	a5,36(s1)
++    80004792:	e7b9                	bnez	a5,800047e0 <end_op+0x7e>
++    panic("log.committing");
++  if(log.outstanding == 0){
++    80004794:	04091e63          	bnez	s2,800047f0 <end_op+0x8e>
++    do_commit = 1;
++    log.committing = 1;
++    80004798:	00020497          	auipc	s1,0x20
++    8000479c:	0d048493          	addi	s1,s1,208 # 80024868 <log>
++    800047a0:	4785                	li	a5,1
++    800047a2:	d0dc                	sw	a5,36(s1)
++    // begin_op() may be waiting for log space,
++    // and decrementing log.outstanding has decreased
++    // the amount of reserved space.
++    wakeup(&log);
++  }
++  release(&log.lock);
++    800047a4:	8526                	mv	a0,s1
++    800047a6:	ffffc097          	auipc	ra,0xffffc
++    800047aa:	4de080e7          	jalr	1246(ra) # 80000c84 <release>
++}
++
++static void
++commit()
++{
++  if (log.lh.n > 0) {
++    800047ae:	54dc                	lw	a5,44(s1)
++    800047b0:	06f04763          	bgtz	a5,8000481e <end_op+0xbc>
++    acquire(&log.lock);
++    800047b4:	00020497          	auipc	s1,0x20
++    800047b8:	0b448493          	addi	s1,s1,180 # 80024868 <log>
++    800047bc:	8526                	mv	a0,s1
++    800047be:	ffffc097          	auipc	ra,0xffffc
++    800047c2:	412080e7          	jalr	1042(ra) # 80000bd0 <acquire>
++    log.committing = 0;
++    800047c6:	0204a223          	sw	zero,36(s1)
++    wakeup(&log);
++    800047ca:	8526                	mv	a0,s1
++    800047cc:	ffffe097          	auipc	ra,0xffffe
++    800047d0:	f6c080e7          	jalr	-148(ra) # 80002738 <wakeup>
++    release(&log.lock);
++    800047d4:	8526                	mv	a0,s1
++    800047d6:	ffffc097          	auipc	ra,0xffffc
++    800047da:	4ae080e7          	jalr	1198(ra) # 80000c84 <release>
++}
++    800047de:	a03d                	j	8000480c <end_op+0xaa>
++    panic("log.committing");
++    800047e0:	00004517          	auipc	a0,0x4
++    800047e4:	eb850513          	addi	a0,a0,-328 # 80008698 <syscalls+0x210>
++    800047e8:	ffffc097          	auipc	ra,0xffffc
++    800047ec:	d52080e7          	jalr	-686(ra) # 8000053a <panic>
++    wakeup(&log);
++    800047f0:	00020497          	auipc	s1,0x20
++    800047f4:	07848493          	addi	s1,s1,120 # 80024868 <log>
++    800047f8:	8526                	mv	a0,s1
++    800047fa:	ffffe097          	auipc	ra,0xffffe
++    800047fe:	f3e080e7          	jalr	-194(ra) # 80002738 <wakeup>
++  release(&log.lock);
++    80004802:	8526                	mv	a0,s1
++    80004804:	ffffc097          	auipc	ra,0xffffc
++    80004808:	480080e7          	jalr	1152(ra) # 80000c84 <release>
++}
++    8000480c:	70e2                	ld	ra,56(sp)
++    8000480e:	7442                	ld	s0,48(sp)
++    80004810:	74a2                	ld	s1,40(sp)
++    80004812:	7902                	ld	s2,32(sp)
++    80004814:	69e2                	ld	s3,24(sp)
++    80004816:	6a42                	ld	s4,16(sp)
++    80004818:	6aa2                	ld	s5,8(sp)
++    8000481a:	6121                	addi	sp,sp,64
++    8000481c:	8082                	ret
++  for (tail = 0; tail < log.lh.n; tail++) {
++    8000481e:	00020a97          	auipc	s5,0x20
++    80004822:	07aa8a93          	addi	s5,s5,122 # 80024898 <log+0x30>
++    struct buf *to = bread(log.dev, log.start+tail+1); // log block
++    80004826:	00020a17          	auipc	s4,0x20
++    8000482a:	042a0a13          	addi	s4,s4,66 # 80024868 <log>
++    8000482e:	018a2583          	lw	a1,24(s4)
++    80004832:	012585bb          	addw	a1,a1,s2
++    80004836:	2585                	addiw	a1,a1,1
++    80004838:	028a2503          	lw	a0,40(s4)
++    8000483c:	fffff097          	auipc	ra,0xfffff
++    80004840:	cca080e7          	jalr	-822(ra) # 80003506 <bread>
++    80004844:	84aa                	mv	s1,a0
++    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
++    80004846:	000aa583          	lw	a1,0(s5)
++    8000484a:	028a2503          	lw	a0,40(s4)
++    8000484e:	fffff097          	auipc	ra,0xfffff
++    80004852:	cb8080e7          	jalr	-840(ra) # 80003506 <bread>
++    80004856:	89aa                	mv	s3,a0
++    memmove(to->data, from->data, BSIZE);
++    80004858:	40000613          	li	a2,1024
++    8000485c:	05850593          	addi	a1,a0,88
++    80004860:	05848513          	addi	a0,s1,88
++    80004864:	ffffc097          	auipc	ra,0xffffc
++    80004868:	4c4080e7          	jalr	1220(ra) # 80000d28 <memmove>
++    bwrite(to);  // write the log
++    8000486c:	8526                	mv	a0,s1
++    8000486e:	fffff097          	auipc	ra,0xfffff
++    80004872:	d8a080e7          	jalr	-630(ra) # 800035f8 <bwrite>
++    brelse(from);
++    80004876:	854e                	mv	a0,s3
++    80004878:	fffff097          	auipc	ra,0xfffff
++    8000487c:	dbe080e7          	jalr	-578(ra) # 80003636 <brelse>
++    brelse(to);
++    80004880:	8526                	mv	a0,s1
++    80004882:	fffff097          	auipc	ra,0xfffff
++    80004886:	db4080e7          	jalr	-588(ra) # 80003636 <brelse>
++  for (tail = 0; tail < log.lh.n; tail++) {
++    8000488a:	2905                	addiw	s2,s2,1
++    8000488c:	0a91                	addi	s5,s5,4
++    8000488e:	02ca2783          	lw	a5,44(s4)
++    80004892:	f8f94ee3          	blt	s2,a5,8000482e <end_op+0xcc>
++    write_log();     // Write modified blocks from cache to log
++    write_head();    // Write header to disk -- the real commit
++    80004896:	00000097          	auipc	ra,0x0
++    8000489a:	c68080e7          	jalr	-920(ra) # 800044fe <write_head>
++    install_trans(0); // Now install writes to home locations
++    8000489e:	4501                	li	a0,0
++    800048a0:	00000097          	auipc	ra,0x0
++    800048a4:	cda080e7          	jalr	-806(ra) # 8000457a <install_trans>
++    log.lh.n = 0;
++    800048a8:	00020797          	auipc	a5,0x20
++    800048ac:	fe07a623          	sw	zero,-20(a5) # 80024894 <log+0x2c>
++    write_head();    // Erase the transaction from the log
++    800048b0:	00000097          	auipc	ra,0x0
++    800048b4:	c4e080e7          	jalr	-946(ra) # 800044fe <write_head>
++    800048b8:	bdf5                	j	800047b4 <end_op+0x52>
++
++00000000800048ba <log_write>:
++//   modify bp->data[]
++//   log_write(bp)
++//   brelse(bp)
++void
++log_write(struct buf *b)
++{
++    800048ba:	1101                	addi	sp,sp,-32
++    800048bc:	ec06                	sd	ra,24(sp)
++    800048be:	e822                	sd	s0,16(sp)
++    800048c0:	e426                	sd	s1,8(sp)
++    800048c2:	e04a                	sd	s2,0(sp)
++    800048c4:	1000                	addi	s0,sp,32
++    800048c6:	84aa                	mv	s1,a0
++  int i;
++
++  acquire(&log.lock);
++    800048c8:	00020917          	auipc	s2,0x20
++    800048cc:	fa090913          	addi	s2,s2,-96 # 80024868 <log>
++    800048d0:	854a                	mv	a0,s2
++    800048d2:	ffffc097          	auipc	ra,0xffffc
++    800048d6:	2fe080e7          	jalr	766(ra) # 80000bd0 <acquire>
++  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
++    800048da:	02c92603          	lw	a2,44(s2)
++    800048de:	47f5                	li	a5,29
++    800048e0:	06c7c563          	blt	a5,a2,8000494a <log_write+0x90>
++    800048e4:	00020797          	auipc	a5,0x20
++    800048e8:	fa07a783          	lw	a5,-96(a5) # 80024884 <log+0x1c>
++    800048ec:	37fd                	addiw	a5,a5,-1
++    800048ee:	04f65e63          	bge	a2,a5,8000494a <log_write+0x90>
++    panic("too big a transaction");
++  if (log.outstanding < 1)
++    800048f2:	00020797          	auipc	a5,0x20
++    800048f6:	f967a783          	lw	a5,-106(a5) # 80024888 <log+0x20>
++    800048fa:	06f05063          	blez	a5,8000495a <log_write+0xa0>
++    panic("log_write outside of trans");
++
++  for (i = 0; i < log.lh.n; i++) {
++    800048fe:	4781                	li	a5,0
++    80004900:	06c05563          	blez	a2,8000496a <log_write+0xb0>
++    if (log.lh.block[i] == b->blockno)   // log absorption
++    80004904:	44cc                	lw	a1,12(s1)
++    80004906:	00020717          	auipc	a4,0x20
++    8000490a:	f9270713          	addi	a4,a4,-110 # 80024898 <log+0x30>
++  for (i = 0; i < log.lh.n; i++) {
++    8000490e:	4781                	li	a5,0
++    if (log.lh.block[i] == b->blockno)   // log absorption
++    80004910:	4314                	lw	a3,0(a4)
++    80004912:	04b68c63          	beq	a3,a1,8000496a <log_write+0xb0>
++  for (i = 0; i < log.lh.n; i++) {
++    80004916:	2785                	addiw	a5,a5,1
++    80004918:	0711                	addi	a4,a4,4
++    8000491a:	fef61be3          	bne	a2,a5,80004910 <log_write+0x56>
++      break;
++  }
++  log.lh.block[i] = b->blockno;
++    8000491e:	0621                	addi	a2,a2,8
++    80004920:	060a                	slli	a2,a2,0x2
++    80004922:	00020797          	auipc	a5,0x20
++    80004926:	f4678793          	addi	a5,a5,-186 # 80024868 <log>
++    8000492a:	97b2                	add	a5,a5,a2
++    8000492c:	44d8                	lw	a4,12(s1)
++    8000492e:	cb98                	sw	a4,16(a5)
++  if (i == log.lh.n) {  // Add new block to log?
++    bpin(b);
++    80004930:	8526                	mv	a0,s1
++    80004932:	fffff097          	auipc	ra,0xfffff
++    80004936:	da2080e7          	jalr	-606(ra) # 800036d4 <bpin>
++    log.lh.n++;
++    8000493a:	00020717          	auipc	a4,0x20
++    8000493e:	f2e70713          	addi	a4,a4,-210 # 80024868 <log>
++    80004942:	575c                	lw	a5,44(a4)
++    80004944:	2785                	addiw	a5,a5,1
++    80004946:	d75c                	sw	a5,44(a4)
++    80004948:	a82d                	j	80004982 <log_write+0xc8>
++    panic("too big a transaction");
++    8000494a:	00004517          	auipc	a0,0x4
++    8000494e:	d5e50513          	addi	a0,a0,-674 # 800086a8 <syscalls+0x220>
++    80004952:	ffffc097          	auipc	ra,0xffffc
++    80004956:	be8080e7          	jalr	-1048(ra) # 8000053a <panic>
++    panic("log_write outside of trans");
++    8000495a:	00004517          	auipc	a0,0x4
++    8000495e:	d6650513          	addi	a0,a0,-666 # 800086c0 <syscalls+0x238>
++    80004962:	ffffc097          	auipc	ra,0xffffc
++    80004966:	bd8080e7          	jalr	-1064(ra) # 8000053a <panic>
++  log.lh.block[i] = b->blockno;
++    8000496a:	00878693          	addi	a3,a5,8
++    8000496e:	068a                	slli	a3,a3,0x2
++    80004970:	00020717          	auipc	a4,0x20
++    80004974:	ef870713          	addi	a4,a4,-264 # 80024868 <log>
++    80004978:	9736                	add	a4,a4,a3
++    8000497a:	44d4                	lw	a3,12(s1)
++    8000497c:	cb14                	sw	a3,16(a4)
++  if (i == log.lh.n) {  // Add new block to log?
++    8000497e:	faf609e3          	beq	a2,a5,80004930 <log_write+0x76>
++  }
++  release(&log.lock);
++    80004982:	00020517          	auipc	a0,0x20
++    80004986:	ee650513          	addi	a0,a0,-282 # 80024868 <log>
++    8000498a:	ffffc097          	auipc	ra,0xffffc
++    8000498e:	2fa080e7          	jalr	762(ra) # 80000c84 <release>
++}
++    80004992:	60e2                	ld	ra,24(sp)
++    80004994:	6442                	ld	s0,16(sp)
++    80004996:	64a2                	ld	s1,8(sp)
++    80004998:	6902                	ld	s2,0(sp)
++    8000499a:	6105                	addi	sp,sp,32
++    8000499c:	8082                	ret
++
++000000008000499e <initsleeplock>:
++#include "proc.h"
++#include "sleeplock.h"
++
++void
++initsleeplock(struct sleeplock *lk, char *name)
++{
++    8000499e:	1101                	addi	sp,sp,-32
++    800049a0:	ec06                	sd	ra,24(sp)
++    800049a2:	e822                	sd	s0,16(sp)
++    800049a4:	e426                	sd	s1,8(sp)
++    800049a6:	e04a                	sd	s2,0(sp)
++    800049a8:	1000                	addi	s0,sp,32
++    800049aa:	84aa                	mv	s1,a0
++    800049ac:	892e                	mv	s2,a1
++  initlock(&lk->lk, "sleep lock");
++    800049ae:	00004597          	auipc	a1,0x4
++    800049b2:	d3258593          	addi	a1,a1,-718 # 800086e0 <syscalls+0x258>
++    800049b6:	0521                	addi	a0,a0,8
++    800049b8:	ffffc097          	auipc	ra,0xffffc
++    800049bc:	188080e7          	jalr	392(ra) # 80000b40 <initlock>
++  lk->name = name;
++    800049c0:	0324b023          	sd	s2,32(s1)
++  lk->locked = 0;
++    800049c4:	0004a023          	sw	zero,0(s1)
++  lk->pid = 0;
++    800049c8:	0204a423          	sw	zero,40(s1)
++}
++    800049cc:	60e2                	ld	ra,24(sp)
++    800049ce:	6442                	ld	s0,16(sp)
++    800049d0:	64a2                	ld	s1,8(sp)
++    800049d2:	6902                	ld	s2,0(sp)
++    800049d4:	6105                	addi	sp,sp,32
++    800049d6:	8082                	ret
++
++00000000800049d8 <acquiresleep>:
++
++void
++acquiresleep(struct sleeplock *lk)
++{
++    800049d8:	1101                	addi	sp,sp,-32
++    800049da:	ec06                	sd	ra,24(sp)
++    800049dc:	e822                	sd	s0,16(sp)
++    800049de:	e426                	sd	s1,8(sp)
++    800049e0:	e04a                	sd	s2,0(sp)
++    800049e2:	1000                	addi	s0,sp,32
++    800049e4:	84aa                	mv	s1,a0
++  acquire(&lk->lk);
++    800049e6:	00850913          	addi	s2,a0,8
++    800049ea:	854a                	mv	a0,s2
++    800049ec:	ffffc097          	auipc	ra,0xffffc
++    800049f0:	1e4080e7          	jalr	484(ra) # 80000bd0 <acquire>
++  while (lk->locked) {
++    800049f4:	409c                	lw	a5,0(s1)
++    800049f6:	cb89                	beqz	a5,80004a08 <acquiresleep+0x30>
++    sleep(lk, &lk->lk);
++    800049f8:	85ca                	mv	a1,s2
++    800049fa:	8526                	mv	a0,s1
++    800049fc:	ffffe097          	auipc	ra,0xffffe
++    80004a00:	bb0080e7          	jalr	-1104(ra) # 800025ac <sleep>
++  while (lk->locked) {
++    80004a04:	409c                	lw	a5,0(s1)
++    80004a06:	fbed                	bnez	a5,800049f8 <acquiresleep+0x20>
++  }
++  lk->locked = 1;
++    80004a08:	4785                	li	a5,1
++    80004a0a:	c09c                	sw	a5,0(s1)
++  lk->pid = myproc()->pid;
++    80004a0c:	ffffd097          	auipc	ra,0xffffd
++    80004a10:	36a080e7          	jalr	874(ra) # 80001d76 <myproc>
++    80004a14:	591c                	lw	a5,48(a0)
++    80004a16:	d49c                	sw	a5,40(s1)
++  release(&lk->lk);
++    80004a18:	854a                	mv	a0,s2
++    80004a1a:	ffffc097          	auipc	ra,0xffffc
++    80004a1e:	26a080e7          	jalr	618(ra) # 80000c84 <release>
++}
++    80004a22:	60e2                	ld	ra,24(sp)
++    80004a24:	6442                	ld	s0,16(sp)
++    80004a26:	64a2                	ld	s1,8(sp)
++    80004a28:	6902                	ld	s2,0(sp)
++    80004a2a:	6105                	addi	sp,sp,32
++    80004a2c:	8082                	ret
++
++0000000080004a2e <releasesleep>:
++
++void
++releasesleep(struct sleeplock *lk)
++{
++    80004a2e:	1101                	addi	sp,sp,-32
++    80004a30:	ec06                	sd	ra,24(sp)
++    80004a32:	e822                	sd	s0,16(sp)
++    80004a34:	e426                	sd	s1,8(sp)
++    80004a36:	e04a                	sd	s2,0(sp)
++    80004a38:	1000                	addi	s0,sp,32
++    80004a3a:	84aa                	mv	s1,a0
++  acquire(&lk->lk);
++    80004a3c:	00850913          	addi	s2,a0,8
++    80004a40:	854a                	mv	a0,s2
++    80004a42:	ffffc097          	auipc	ra,0xffffc
++    80004a46:	18e080e7          	jalr	398(ra) # 80000bd0 <acquire>
++  lk->locked = 0;
++    80004a4a:	0004a023          	sw	zero,0(s1)
++  lk->pid = 0;
++    80004a4e:	0204a423          	sw	zero,40(s1)
++  wakeup(lk);
++    80004a52:	8526                	mv	a0,s1
++    80004a54:	ffffe097          	auipc	ra,0xffffe
++    80004a58:	ce4080e7          	jalr	-796(ra) # 80002738 <wakeup>
++  release(&lk->lk);
++    80004a5c:	854a                	mv	a0,s2
++    80004a5e:	ffffc097          	auipc	ra,0xffffc
++    80004a62:	226080e7          	jalr	550(ra) # 80000c84 <release>
++}
++    80004a66:	60e2                	ld	ra,24(sp)
++    80004a68:	6442                	ld	s0,16(sp)
++    80004a6a:	64a2                	ld	s1,8(sp)
++    80004a6c:	6902                	ld	s2,0(sp)
++    80004a6e:	6105                	addi	sp,sp,32
++    80004a70:	8082                	ret
++
++0000000080004a72 <holdingsleep>:
++
++int
++holdingsleep(struct sleeplock *lk)
++{
++    80004a72:	7179                	addi	sp,sp,-48
++    80004a74:	f406                	sd	ra,40(sp)
++    80004a76:	f022                	sd	s0,32(sp)
++    80004a78:	ec26                	sd	s1,24(sp)
++    80004a7a:	e84a                	sd	s2,16(sp)
++    80004a7c:	e44e                	sd	s3,8(sp)
++    80004a7e:	1800                	addi	s0,sp,48
++    80004a80:	84aa                	mv	s1,a0
++  int r;
++  
++  acquire(&lk->lk);
++    80004a82:	00850913          	addi	s2,a0,8
++    80004a86:	854a                	mv	a0,s2
++    80004a88:	ffffc097          	auipc	ra,0xffffc
++    80004a8c:	148080e7          	jalr	328(ra) # 80000bd0 <acquire>
++  r = lk->locked && (lk->pid == myproc()->pid);
++    80004a90:	409c                	lw	a5,0(s1)
++    80004a92:	ef99                	bnez	a5,80004ab0 <holdingsleep+0x3e>
++    80004a94:	4481                	li	s1,0
++  release(&lk->lk);
++    80004a96:	854a                	mv	a0,s2
++    80004a98:	ffffc097          	auipc	ra,0xffffc
++    80004a9c:	1ec080e7          	jalr	492(ra) # 80000c84 <release>
++  return r;
++}
++    80004aa0:	8526                	mv	a0,s1
++    80004aa2:	70a2                	ld	ra,40(sp)
++    80004aa4:	7402                	ld	s0,32(sp)
++    80004aa6:	64e2                	ld	s1,24(sp)
++    80004aa8:	6942                	ld	s2,16(sp)
++    80004aaa:	69a2                	ld	s3,8(sp)
++    80004aac:	6145                	addi	sp,sp,48
++    80004aae:	8082                	ret
++  r = lk->locked && (lk->pid == myproc()->pid);
++    80004ab0:	0284a983          	lw	s3,40(s1)
++    80004ab4:	ffffd097          	auipc	ra,0xffffd
++    80004ab8:	2c2080e7          	jalr	706(ra) # 80001d76 <myproc>
++    80004abc:	5904                	lw	s1,48(a0)
++    80004abe:	413484b3          	sub	s1,s1,s3
++    80004ac2:	0014b493          	seqz	s1,s1
++    80004ac6:	bfc1                	j	80004a96 <holdingsleep+0x24>
++
++0000000080004ac8 <fileinit>:
++  struct file file[NFILE];
++} ftable;
++
++void
++fileinit(void)
++{
++    80004ac8:	1141                	addi	sp,sp,-16
++    80004aca:	e406                	sd	ra,8(sp)
++    80004acc:	e022                	sd	s0,0(sp)
++    80004ace:	0800                	addi	s0,sp,16
++  initlock(&ftable.lock, "ftable");
++    80004ad0:	00004597          	auipc	a1,0x4
++    80004ad4:	c2058593          	addi	a1,a1,-992 # 800086f0 <syscalls+0x268>
++    80004ad8:	00020517          	auipc	a0,0x20
++    80004adc:	ed850513          	addi	a0,a0,-296 # 800249b0 <ftable>
++    80004ae0:	ffffc097          	auipc	ra,0xffffc
++    80004ae4:	060080e7          	jalr	96(ra) # 80000b40 <initlock>
++}
++    80004ae8:	60a2                	ld	ra,8(sp)
++    80004aea:	6402                	ld	s0,0(sp)
++    80004aec:	0141                	addi	sp,sp,16
++    80004aee:	8082                	ret
++
++0000000080004af0 <filealloc>:
++
++// Allocate a file structure.
++struct file*
++filealloc(void)
++{
++    80004af0:	1101                	addi	sp,sp,-32
++    80004af2:	ec06                	sd	ra,24(sp)
++    80004af4:	e822                	sd	s0,16(sp)
++    80004af6:	e426                	sd	s1,8(sp)
++    80004af8:	1000                	addi	s0,sp,32
++  struct file *f;
++
++  acquire(&ftable.lock);
++    80004afa:	00020517          	auipc	a0,0x20
++    80004afe:	eb650513          	addi	a0,a0,-330 # 800249b0 <ftable>
++    80004b02:	ffffc097          	auipc	ra,0xffffc
++    80004b06:	0ce080e7          	jalr	206(ra) # 80000bd0 <acquire>
++  for(f = ftable.file; f < ftable.file + NFILE; f++){
++    80004b0a:	00020497          	auipc	s1,0x20
++    80004b0e:	ebe48493          	addi	s1,s1,-322 # 800249c8 <ftable+0x18>
++    80004b12:	00021717          	auipc	a4,0x21
++    80004b16:	e5670713          	addi	a4,a4,-426 # 80025968 <ftable+0xfb8>
++    if(f->ref == 0){
++    80004b1a:	40dc                	lw	a5,4(s1)
++    80004b1c:	cf99                	beqz	a5,80004b3a <filealloc+0x4a>
++  for(f = ftable.file; f < ftable.file + NFILE; f++){
++    80004b1e:	02848493          	addi	s1,s1,40
++    80004b22:	fee49ce3          	bne	s1,a4,80004b1a <filealloc+0x2a>
++      f->ref = 1;
++      release(&ftable.lock);
++      return f;
++    }
++  }
++  release(&ftable.lock);
++    80004b26:	00020517          	auipc	a0,0x20
++    80004b2a:	e8a50513          	addi	a0,a0,-374 # 800249b0 <ftable>
++    80004b2e:	ffffc097          	auipc	ra,0xffffc
++    80004b32:	156080e7          	jalr	342(ra) # 80000c84 <release>
++  return 0;
++    80004b36:	4481                	li	s1,0
++    80004b38:	a819                	j	80004b4e <filealloc+0x5e>
++      f->ref = 1;
++    80004b3a:	4785                	li	a5,1
++    80004b3c:	c0dc                	sw	a5,4(s1)
++      release(&ftable.lock);
++    80004b3e:	00020517          	auipc	a0,0x20
++    80004b42:	e7250513          	addi	a0,a0,-398 # 800249b0 <ftable>
++    80004b46:	ffffc097          	auipc	ra,0xffffc
++    80004b4a:	13e080e7          	jalr	318(ra) # 80000c84 <release>
++}
++    80004b4e:	8526                	mv	a0,s1
++    80004b50:	60e2                	ld	ra,24(sp)
++    80004b52:	6442                	ld	s0,16(sp)
++    80004b54:	64a2                	ld	s1,8(sp)
++    80004b56:	6105                	addi	sp,sp,32
++    80004b58:	8082                	ret
++
++0000000080004b5a <filedup>:
++
++// Increment ref count for file f.
++struct file*
++filedup(struct file *f)
++{
++    80004b5a:	1101                	addi	sp,sp,-32
++    80004b5c:	ec06                	sd	ra,24(sp)
++    80004b5e:	e822                	sd	s0,16(sp)
++    80004b60:	e426                	sd	s1,8(sp)
++    80004b62:	1000                	addi	s0,sp,32
++    80004b64:	84aa                	mv	s1,a0
++  acquire(&ftable.lock);
++    80004b66:	00020517          	auipc	a0,0x20
++    80004b6a:	e4a50513          	addi	a0,a0,-438 # 800249b0 <ftable>
++    80004b6e:	ffffc097          	auipc	ra,0xffffc
++    80004b72:	062080e7          	jalr	98(ra) # 80000bd0 <acquire>
++  if(f->ref < 1)
++    80004b76:	40dc                	lw	a5,4(s1)
++    80004b78:	02f05263          	blez	a5,80004b9c <filedup+0x42>
++    panic("filedup");
++  f->ref++;
++    80004b7c:	2785                	addiw	a5,a5,1
++    80004b7e:	c0dc                	sw	a5,4(s1)
++  release(&ftable.lock);
++    80004b80:	00020517          	auipc	a0,0x20
++    80004b84:	e3050513          	addi	a0,a0,-464 # 800249b0 <ftable>
++    80004b88:	ffffc097          	auipc	ra,0xffffc
++    80004b8c:	0fc080e7          	jalr	252(ra) # 80000c84 <release>
++  return f;
++}
++    80004b90:	8526                	mv	a0,s1
++    80004b92:	60e2                	ld	ra,24(sp)
++    80004b94:	6442                	ld	s0,16(sp)
++    80004b96:	64a2                	ld	s1,8(sp)
++    80004b98:	6105                	addi	sp,sp,32
++    80004b9a:	8082                	ret
++    panic("filedup");
++    80004b9c:	00004517          	auipc	a0,0x4
++    80004ba0:	b5c50513          	addi	a0,a0,-1188 # 800086f8 <syscalls+0x270>
++    80004ba4:	ffffc097          	auipc	ra,0xffffc
++    80004ba8:	996080e7          	jalr	-1642(ra) # 8000053a <panic>
++
++0000000080004bac <fileclose>:
++
++// Close file f.  (Decrement ref count, close when reaches 0.)
++void
++fileclose(struct file *f)
++{
++    80004bac:	7139                	addi	sp,sp,-64
++    80004bae:	fc06                	sd	ra,56(sp)
++    80004bb0:	f822                	sd	s0,48(sp)
++    80004bb2:	f426                	sd	s1,40(sp)
++    80004bb4:	f04a                	sd	s2,32(sp)
++    80004bb6:	ec4e                	sd	s3,24(sp)
++    80004bb8:	e852                	sd	s4,16(sp)
++    80004bba:	e456                	sd	s5,8(sp)
++    80004bbc:	0080                	addi	s0,sp,64
++    80004bbe:	84aa                	mv	s1,a0
++  struct file ff;
++
++  acquire(&ftable.lock);
++    80004bc0:	00020517          	auipc	a0,0x20
++    80004bc4:	df050513          	addi	a0,a0,-528 # 800249b0 <ftable>
++    80004bc8:	ffffc097          	auipc	ra,0xffffc
++    80004bcc:	008080e7          	jalr	8(ra) # 80000bd0 <acquire>
++  if(f->ref < 1)
++    80004bd0:	40dc                	lw	a5,4(s1)
++    80004bd2:	06f05163          	blez	a5,80004c34 <fileclose+0x88>
++    panic("fileclose");
++  if(--f->ref > 0){
++    80004bd6:	37fd                	addiw	a5,a5,-1
++    80004bd8:	0007871b          	sext.w	a4,a5
++    80004bdc:	c0dc                	sw	a5,4(s1)
++    80004bde:	06e04363          	bgtz	a4,80004c44 <fileclose+0x98>
++    release(&ftable.lock);
++    return;
++  }
++  ff = *f;
++    80004be2:	0004a903          	lw	s2,0(s1)
++    80004be6:	0094ca83          	lbu	s5,9(s1)
++    80004bea:	0104ba03          	ld	s4,16(s1)
++    80004bee:	0184b983          	ld	s3,24(s1)
++  f->ref = 0;
++    80004bf2:	0004a223          	sw	zero,4(s1)
++  f->type = FD_NONE;
++    80004bf6:	0004a023          	sw	zero,0(s1)
++  release(&ftable.lock);
++    80004bfa:	00020517          	auipc	a0,0x20
++    80004bfe:	db650513          	addi	a0,a0,-586 # 800249b0 <ftable>
++    80004c02:	ffffc097          	auipc	ra,0xffffc
++    80004c06:	082080e7          	jalr	130(ra) # 80000c84 <release>
++
++  if(ff.type == FD_PIPE){
++    80004c0a:	4785                	li	a5,1
++    80004c0c:	04f90d63          	beq	s2,a5,80004c66 <fileclose+0xba>
++    pipeclose(ff.pipe, ff.writable);
++  } else if(ff.type == FD_INODE || ff.type == FD_DEVICE){
++    80004c10:	3979                	addiw	s2,s2,-2
++    80004c12:	4785                	li	a5,1
++    80004c14:	0527e063          	bltu	a5,s2,80004c54 <fileclose+0xa8>
++    begin_op();
++    80004c18:	00000097          	auipc	ra,0x0
++    80004c1c:	acc080e7          	jalr	-1332(ra) # 800046e4 <begin_op>
++    iput(ff.ip);
++    80004c20:	854e                	mv	a0,s3
++    80004c22:	fffff097          	auipc	ra,0xfffff
++    80004c26:	2a0080e7          	jalr	672(ra) # 80003ec2 <iput>
++    end_op();
++    80004c2a:	00000097          	auipc	ra,0x0
++    80004c2e:	b38080e7          	jalr	-1224(ra) # 80004762 <end_op>
++    80004c32:	a00d                	j	80004c54 <fileclose+0xa8>
++    panic("fileclose");
++    80004c34:	00004517          	auipc	a0,0x4
++    80004c38:	acc50513          	addi	a0,a0,-1332 # 80008700 <syscalls+0x278>
++    80004c3c:	ffffc097          	auipc	ra,0xffffc
++    80004c40:	8fe080e7          	jalr	-1794(ra) # 8000053a <panic>
++    release(&ftable.lock);
++    80004c44:	00020517          	auipc	a0,0x20
++    80004c48:	d6c50513          	addi	a0,a0,-660 # 800249b0 <ftable>
++    80004c4c:	ffffc097          	auipc	ra,0xffffc
++    80004c50:	038080e7          	jalr	56(ra) # 80000c84 <release>
++  }
++}
++    80004c54:	70e2                	ld	ra,56(sp)
++    80004c56:	7442                	ld	s0,48(sp)
++    80004c58:	74a2                	ld	s1,40(sp)
++    80004c5a:	7902                	ld	s2,32(sp)
++    80004c5c:	69e2                	ld	s3,24(sp)
++    80004c5e:	6a42                	ld	s4,16(sp)
++    80004c60:	6aa2                	ld	s5,8(sp)
++    80004c62:	6121                	addi	sp,sp,64
++    80004c64:	8082                	ret
++    pipeclose(ff.pipe, ff.writable);
++    80004c66:	85d6                	mv	a1,s5
++    80004c68:	8552                	mv	a0,s4
++    80004c6a:	00000097          	auipc	ra,0x0
++    80004c6e:	34c080e7          	jalr	844(ra) # 80004fb6 <pipeclose>
++    80004c72:	b7cd                	j	80004c54 <fileclose+0xa8>
++
++0000000080004c74 <filestat>:
++
++// Get metadata about file f.
++// addr is a user virtual address, pointing to a struct stat.
++int
++filestat(struct file *f, uint64 addr)
++{
++    80004c74:	715d                	addi	sp,sp,-80
++    80004c76:	e486                	sd	ra,72(sp)
++    80004c78:	e0a2                	sd	s0,64(sp)
++    80004c7a:	fc26                	sd	s1,56(sp)
++    80004c7c:	f84a                	sd	s2,48(sp)
++    80004c7e:	f44e                	sd	s3,40(sp)
++    80004c80:	0880                	addi	s0,sp,80
++    80004c82:	84aa                	mv	s1,a0
++    80004c84:	89ae                	mv	s3,a1
++  struct proc *p = myproc();
++    80004c86:	ffffd097          	auipc	ra,0xffffd
++    80004c8a:	0f0080e7          	jalr	240(ra) # 80001d76 <myproc>
++  struct stat st;
++  
++  if(f->type == FD_INODE || f->type == FD_DEVICE){
++    80004c8e:	409c                	lw	a5,0(s1)
++    80004c90:	37f9                	addiw	a5,a5,-2
++    80004c92:	4705                	li	a4,1
++    80004c94:	04f76763          	bltu	a4,a5,80004ce2 <filestat+0x6e>
++    80004c98:	892a                	mv	s2,a0
++    ilock(f->ip);
++    80004c9a:	6c88                	ld	a0,24(s1)
++    80004c9c:	fffff097          	auipc	ra,0xfffff
++    80004ca0:	06c080e7          	jalr	108(ra) # 80003d08 <ilock>
++    stati(f->ip, &st);
++    80004ca4:	fb840593          	addi	a1,s0,-72
++    80004ca8:	6c88                	ld	a0,24(s1)
++    80004caa:	fffff097          	auipc	ra,0xfffff
++    80004cae:	2e8080e7          	jalr	744(ra) # 80003f92 <stati>
++    iunlock(f->ip);
++    80004cb2:	6c88                	ld	a0,24(s1)
++    80004cb4:	fffff097          	auipc	ra,0xfffff
++    80004cb8:	116080e7          	jalr	278(ra) # 80003dca <iunlock>
++    if(copyout(p->pagetable, addr, (char *)&st, sizeof(st)) < 0)
++    80004cbc:	46e1                	li	a3,24
++    80004cbe:	fb840613          	addi	a2,s0,-72
++    80004cc2:	85ce                	mv	a1,s3
++    80004cc4:	05093503          	ld	a0,80(s2)
++    80004cc8:	ffffd097          	auipc	ra,0xffffd
++    80004ccc:	99a080e7          	jalr	-1638(ra) # 80001662 <copyout>
++    80004cd0:	41f5551b          	sraiw	a0,a0,0x1f
++      return -1;
++    return 0;
++  }
++  return -1;
++}
++    80004cd4:	60a6                	ld	ra,72(sp)
++    80004cd6:	6406                	ld	s0,64(sp)
++    80004cd8:	74e2                	ld	s1,56(sp)
++    80004cda:	7942                	ld	s2,48(sp)
++    80004cdc:	79a2                	ld	s3,40(sp)
++    80004cde:	6161                	addi	sp,sp,80
++    80004ce0:	8082                	ret
++  return -1;
++    80004ce2:	557d                	li	a0,-1
++    80004ce4:	bfc5                	j	80004cd4 <filestat+0x60>
++
++0000000080004ce6 <fileread>:
++
++// Read from file f.
++// addr is a user virtual address.
++int
++fileread(struct file *f, uint64 addr, int n)
++{
++    80004ce6:	7179                	addi	sp,sp,-48
++    80004ce8:	f406                	sd	ra,40(sp)
++    80004cea:	f022                	sd	s0,32(sp)
++    80004cec:	ec26                	sd	s1,24(sp)
++    80004cee:	e84a                	sd	s2,16(sp)
++    80004cf0:	e44e                	sd	s3,8(sp)
++    80004cf2:	1800                	addi	s0,sp,48
++  int r = 0;
++
++  if(f->readable == 0)
++    80004cf4:	00854783          	lbu	a5,8(a0)
++    80004cf8:	c3d5                	beqz	a5,80004d9c <fileread+0xb6>
++    80004cfa:	84aa                	mv	s1,a0
++    80004cfc:	89ae                	mv	s3,a1
++    80004cfe:	8932                	mv	s2,a2
++    return -1;
++
++  if(f->type == FD_PIPE){
++    80004d00:	411c                	lw	a5,0(a0)
++    80004d02:	4705                	li	a4,1
++    80004d04:	04e78963          	beq	a5,a4,80004d56 <fileread+0x70>
++    r = piperead(f->pipe, addr, n);
++  } else if(f->type == FD_DEVICE){
++    80004d08:	470d                	li	a4,3
++    80004d0a:	04e78d63          	beq	a5,a4,80004d64 <fileread+0x7e>
++    if(f->major < 0 || f->major >= NDEV || !devsw[f->major].read)
++      return -1;
++    r = devsw[f->major].read(1, addr, n);
++  } else if(f->type == FD_INODE){
++    80004d0e:	4709                	li	a4,2
++    80004d10:	06e79e63          	bne	a5,a4,80004d8c <fileread+0xa6>
++    ilock(f->ip);
++    80004d14:	6d08                	ld	a0,24(a0)
++    80004d16:	fffff097          	auipc	ra,0xfffff
++    80004d1a:	ff2080e7          	jalr	-14(ra) # 80003d08 <ilock>
++    if((r = readi(f->ip, 1, addr, f->off, n)) > 0)
++    80004d1e:	874a                	mv	a4,s2
++    80004d20:	5094                	lw	a3,32(s1)
++    80004d22:	864e                	mv	a2,s3
++    80004d24:	4585                	li	a1,1
++    80004d26:	6c88                	ld	a0,24(s1)
++    80004d28:	fffff097          	auipc	ra,0xfffff
++    80004d2c:	294080e7          	jalr	660(ra) # 80003fbc <readi>
++    80004d30:	892a                	mv	s2,a0
++    80004d32:	00a05563          	blez	a0,80004d3c <fileread+0x56>
++      f->off += r;
++    80004d36:	509c                	lw	a5,32(s1)
++    80004d38:	9fa9                	addw	a5,a5,a0
++    80004d3a:	d09c                	sw	a5,32(s1)
++    iunlock(f->ip);
++    80004d3c:	6c88                	ld	a0,24(s1)
++    80004d3e:	fffff097          	auipc	ra,0xfffff
++    80004d42:	08c080e7          	jalr	140(ra) # 80003dca <iunlock>
++  } else {
++    panic("fileread");
++  }
++
++  return r;
++}
++    80004d46:	854a                	mv	a0,s2
++    80004d48:	70a2                	ld	ra,40(sp)
++    80004d4a:	7402                	ld	s0,32(sp)
++    80004d4c:	64e2                	ld	s1,24(sp)
++    80004d4e:	6942                	ld	s2,16(sp)
++    80004d50:	69a2                	ld	s3,8(sp)
++    80004d52:	6145                	addi	sp,sp,48
++    80004d54:	8082                	ret
++    r = piperead(f->pipe, addr, n);
++    80004d56:	6908                	ld	a0,16(a0)
++    80004d58:	00000097          	auipc	ra,0x0
++    80004d5c:	3c0080e7          	jalr	960(ra) # 80005118 <piperead>
++    80004d60:	892a                	mv	s2,a0
++    80004d62:	b7d5                	j	80004d46 <fileread+0x60>
++    if(f->major < 0 || f->major >= NDEV || !devsw[f->major].read)
++    80004d64:	02451783          	lh	a5,36(a0)
++    80004d68:	03079693          	slli	a3,a5,0x30
++    80004d6c:	92c1                	srli	a3,a3,0x30
++    80004d6e:	4725                	li	a4,9
++    80004d70:	02d76863          	bltu	a4,a3,80004da0 <fileread+0xba>
++    80004d74:	0792                	slli	a5,a5,0x4
++    80004d76:	00020717          	auipc	a4,0x20
++    80004d7a:	b9a70713          	addi	a4,a4,-1126 # 80024910 <devsw>
++    80004d7e:	97ba                	add	a5,a5,a4
++    80004d80:	639c                	ld	a5,0(a5)
++    80004d82:	c38d                	beqz	a5,80004da4 <fileread+0xbe>
++    r = devsw[f->major].read(1, addr, n);
++    80004d84:	4505                	li	a0,1
++    80004d86:	9782                	jalr	a5
++    80004d88:	892a                	mv	s2,a0
++    80004d8a:	bf75                	j	80004d46 <fileread+0x60>
++    panic("fileread");
++    80004d8c:	00004517          	auipc	a0,0x4
++    80004d90:	98450513          	addi	a0,a0,-1660 # 80008710 <syscalls+0x288>
++    80004d94:	ffffb097          	auipc	ra,0xffffb
++    80004d98:	7a6080e7          	jalr	1958(ra) # 8000053a <panic>
++    return -1;
++    80004d9c:	597d                	li	s2,-1
++    80004d9e:	b765                	j	80004d46 <fileread+0x60>
++      return -1;
++    80004da0:	597d                	li	s2,-1
++    80004da2:	b755                	j	80004d46 <fileread+0x60>
++    80004da4:	597d                	li	s2,-1
++    80004da6:	b745                	j	80004d46 <fileread+0x60>
++
++0000000080004da8 <filewrite>:
++
++// Write to file f.
++// addr is a user virtual address.
++int
++filewrite(struct file *f, uint64 addr, int n)
++{
++    80004da8:	715d                	addi	sp,sp,-80
++    80004daa:	e486                	sd	ra,72(sp)
++    80004dac:	e0a2                	sd	s0,64(sp)
++    80004dae:	fc26                	sd	s1,56(sp)
++    80004db0:	f84a                	sd	s2,48(sp)
++    80004db2:	f44e                	sd	s3,40(sp)
++    80004db4:	f052                	sd	s4,32(sp)
++    80004db6:	ec56                	sd	s5,24(sp)
++    80004db8:	e85a                	sd	s6,16(sp)
++    80004dba:	e45e                	sd	s7,8(sp)
++    80004dbc:	e062                	sd	s8,0(sp)
++    80004dbe:	0880                	addi	s0,sp,80
++  int r, ret = 0;
++
++  if(f->writable == 0)
++    80004dc0:	00954783          	lbu	a5,9(a0)
++    80004dc4:	10078663          	beqz	a5,80004ed0 <filewrite+0x128>
++    80004dc8:	892a                	mv	s2,a0
++    80004dca:	8b2e                	mv	s6,a1
++    80004dcc:	8a32                	mv	s4,a2
++    return -1;
++
++  if(f->type == FD_PIPE){
++    80004dce:	411c                	lw	a5,0(a0)
++    80004dd0:	4705                	li	a4,1
++    80004dd2:	02e78263          	beq	a5,a4,80004df6 <filewrite+0x4e>
++    ret = pipewrite(f->pipe, addr, n);
++  } else if(f->type == FD_DEVICE){
++    80004dd6:	470d                	li	a4,3
++    80004dd8:	02e78663          	beq	a5,a4,80004e04 <filewrite+0x5c>
++    if(f->major < 0 || f->major >= NDEV || !devsw[f->major].write)
++      return -1;
++    ret = devsw[f->major].write(1, addr, n);
++  } else if(f->type == FD_INODE){
++    80004ddc:	4709                	li	a4,2
++    80004dde:	0ee79163          	bne	a5,a4,80004ec0 <filewrite+0x118>
++    // and 2 blocks of slop for non-aligned writes.
++    // this really belongs lower down, since writei()
++    // might be writing a device like the console.
++    int max = ((MAXOPBLOCKS-1-1-2) / 2) * BSIZE;
++    int i = 0;
++    while(i < n){
++    80004de2:	0ac05d63          	blez	a2,80004e9c <filewrite+0xf4>
++    int i = 0;
++    80004de6:	4981                	li	s3,0
++    80004de8:	6b85                	lui	s7,0x1
++    80004dea:	c00b8b93          	addi	s7,s7,-1024 # c00 <_entry-0x7ffff400>
++    80004dee:	6c05                	lui	s8,0x1
++    80004df0:	c00c0c1b          	addiw	s8,s8,-1024 # c00 <_entry-0x7ffff400>
++    80004df4:	a861                	j	80004e8c <filewrite+0xe4>
++    ret = pipewrite(f->pipe, addr, n);
++    80004df6:	6908                	ld	a0,16(a0)
++    80004df8:	00000097          	auipc	ra,0x0
++    80004dfc:	22e080e7          	jalr	558(ra) # 80005026 <pipewrite>
++    80004e00:	8a2a                	mv	s4,a0
++    80004e02:	a045                	j	80004ea2 <filewrite+0xfa>
++    if(f->major < 0 || f->major >= NDEV || !devsw[f->major].write)
++    80004e04:	02451783          	lh	a5,36(a0)
++    80004e08:	03079693          	slli	a3,a5,0x30
++    80004e0c:	92c1                	srli	a3,a3,0x30
++    80004e0e:	4725                	li	a4,9
++    80004e10:	0cd76263          	bltu	a4,a3,80004ed4 <filewrite+0x12c>
++    80004e14:	0792                	slli	a5,a5,0x4
++    80004e16:	00020717          	auipc	a4,0x20
++    80004e1a:	afa70713          	addi	a4,a4,-1286 # 80024910 <devsw>
++    80004e1e:	97ba                	add	a5,a5,a4
++    80004e20:	679c                	ld	a5,8(a5)
++    80004e22:	cbdd                	beqz	a5,80004ed8 <filewrite+0x130>
++    ret = devsw[f->major].write(1, addr, n);
++    80004e24:	4505                	li	a0,1
++    80004e26:	9782                	jalr	a5
++    80004e28:	8a2a                	mv	s4,a0
++    80004e2a:	a8a5                	j	80004ea2 <filewrite+0xfa>
++    80004e2c:	00048a9b          	sext.w	s5,s1
++      int n1 = n - i;
++      if(n1 > max)
++        n1 = max;
++
++      begin_op();
++    80004e30:	00000097          	auipc	ra,0x0
++    80004e34:	8b4080e7          	jalr	-1868(ra) # 800046e4 <begin_op>
++      ilock(f->ip);
++    80004e38:	01893503          	ld	a0,24(s2)
++    80004e3c:	fffff097          	auipc	ra,0xfffff
++    80004e40:	ecc080e7          	jalr	-308(ra) # 80003d08 <ilock>
++      if ((r = writei(f->ip, 1, addr + i, f->off, n1)) > 0)
++    80004e44:	8756                	mv	a4,s5
++    80004e46:	02092683          	lw	a3,32(s2)
++    80004e4a:	01698633          	add	a2,s3,s6
++    80004e4e:	4585                	li	a1,1
++    80004e50:	01893503          	ld	a0,24(s2)
++    80004e54:	fffff097          	auipc	ra,0xfffff
++    80004e58:	260080e7          	jalr	608(ra) # 800040b4 <writei>
++    80004e5c:	84aa                	mv	s1,a0
++    80004e5e:	00a05763          	blez	a0,80004e6c <filewrite+0xc4>
++        f->off += r;
++    80004e62:	02092783          	lw	a5,32(s2)
++    80004e66:	9fa9                	addw	a5,a5,a0
++    80004e68:	02f92023          	sw	a5,32(s2)
++      iunlock(f->ip);
++    80004e6c:	01893503          	ld	a0,24(s2)
++    80004e70:	fffff097          	auipc	ra,0xfffff
++    80004e74:	f5a080e7          	jalr	-166(ra) # 80003dca <iunlock>
++      end_op();
++    80004e78:	00000097          	auipc	ra,0x0
++    80004e7c:	8ea080e7          	jalr	-1814(ra) # 80004762 <end_op>
++
++      if(r != n1){
++    80004e80:	009a9f63          	bne	s5,s1,80004e9e <filewrite+0xf6>
++        // error from writei
++        break;
++      }
++      i += r;
++    80004e84:	013489bb          	addw	s3,s1,s3
++    while(i < n){
++    80004e88:	0149db63          	bge	s3,s4,80004e9e <filewrite+0xf6>
++      int n1 = n - i;
++    80004e8c:	413a04bb          	subw	s1,s4,s3
++    80004e90:	0004879b          	sext.w	a5,s1
++    80004e94:	f8fbdce3          	bge	s7,a5,80004e2c <filewrite+0x84>
++    80004e98:	84e2                	mv	s1,s8
++    80004e9a:	bf49                	j	80004e2c <filewrite+0x84>
++    int i = 0;
++    80004e9c:	4981                	li	s3,0
++    }
++    ret = (i == n ? n : -1);
++    80004e9e:	013a1f63          	bne	s4,s3,80004ebc <filewrite+0x114>
++  } else {
++    panic("filewrite");
++  }
++
++  return ret;
++}
++    80004ea2:	8552                	mv	a0,s4
++    80004ea4:	60a6                	ld	ra,72(sp)
++    80004ea6:	6406                	ld	s0,64(sp)
++    80004ea8:	74e2                	ld	s1,56(sp)
++    80004eaa:	7942                	ld	s2,48(sp)
++    80004eac:	79a2                	ld	s3,40(sp)
++    80004eae:	7a02                	ld	s4,32(sp)
++    80004eb0:	6ae2                	ld	s5,24(sp)
++    80004eb2:	6b42                	ld	s6,16(sp)
++    80004eb4:	6ba2                	ld	s7,8(sp)
++    80004eb6:	6c02                	ld	s8,0(sp)
++    80004eb8:	6161                	addi	sp,sp,80
++    80004eba:	8082                	ret
++    ret = (i == n ? n : -1);
++    80004ebc:	5a7d                	li	s4,-1
++    80004ebe:	b7d5                	j	80004ea2 <filewrite+0xfa>
++    panic("filewrite");
++    80004ec0:	00004517          	auipc	a0,0x4
++    80004ec4:	86050513          	addi	a0,a0,-1952 # 80008720 <syscalls+0x298>
++    80004ec8:	ffffb097          	auipc	ra,0xffffb
++    80004ecc:	672080e7          	jalr	1650(ra) # 8000053a <panic>
++    return -1;
++    80004ed0:	5a7d                	li	s4,-1
++    80004ed2:	bfc1                	j	80004ea2 <filewrite+0xfa>
++      return -1;
++    80004ed4:	5a7d                	li	s4,-1
++    80004ed6:	b7f1                	j	80004ea2 <filewrite+0xfa>
++    80004ed8:	5a7d                	li	s4,-1
++    80004eda:	b7e1                	j	80004ea2 <filewrite+0xfa>
++
++0000000080004edc <pipealloc>:
++  int writeopen;  // write fd is still open
++};
++
++int
++pipealloc(struct file **f0, struct file **f1)
++{
++    80004edc:	7179                	addi	sp,sp,-48
++    80004ede:	f406                	sd	ra,40(sp)
++    80004ee0:	f022                	sd	s0,32(sp)
++    80004ee2:	ec26                	sd	s1,24(sp)
++    80004ee4:	e84a                	sd	s2,16(sp)
++    80004ee6:	e44e                	sd	s3,8(sp)
++    80004ee8:	e052                	sd	s4,0(sp)
++    80004eea:	1800                	addi	s0,sp,48
++    80004eec:	84aa                	mv	s1,a0
++    80004eee:	8a2e                	mv	s4,a1
++  struct pipe *pi;
++
++  pi = 0;
++  *f0 = *f1 = 0;
++    80004ef0:	0005b023          	sd	zero,0(a1)
++    80004ef4:	00053023          	sd	zero,0(a0)
++  if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
++    80004ef8:	00000097          	auipc	ra,0x0
++    80004efc:	bf8080e7          	jalr	-1032(ra) # 80004af0 <filealloc>
++    80004f00:	e088                	sd	a0,0(s1)
++    80004f02:	c551                	beqz	a0,80004f8e <pipealloc+0xb2>
++    80004f04:	00000097          	auipc	ra,0x0
++    80004f08:	bec080e7          	jalr	-1044(ra) # 80004af0 <filealloc>
++    80004f0c:	00aa3023          	sd	a0,0(s4)
++    80004f10:	c92d                	beqz	a0,80004f82 <pipealloc+0xa6>
++    goto bad;
++  if((pi = (struct pipe*)kalloc()) == 0)
++    80004f12:	ffffc097          	auipc	ra,0xffffc
++    80004f16:	bce080e7          	jalr	-1074(ra) # 80000ae0 <kalloc>
++    80004f1a:	892a                	mv	s2,a0
++    80004f1c:	c125                	beqz	a0,80004f7c <pipealloc+0xa0>
++    goto bad;
++  pi->readopen = 1;
++    80004f1e:	4985                	li	s3,1
++    80004f20:	23352023          	sw	s3,544(a0)
++  pi->writeopen = 1;
++    80004f24:	23352223          	sw	s3,548(a0)
++  pi->nwrite = 0;
++    80004f28:	20052e23          	sw	zero,540(a0)
++  pi->nread = 0;
++    80004f2c:	20052c23          	sw	zero,536(a0)
++  initlock(&pi->lock, "pipe");
++    80004f30:	00004597          	auipc	a1,0x4
++    80004f34:	80058593          	addi	a1,a1,-2048 # 80008730 <syscalls+0x2a8>
++    80004f38:	ffffc097          	auipc	ra,0xffffc
++    80004f3c:	c08080e7          	jalr	-1016(ra) # 80000b40 <initlock>
++  (*f0)->type = FD_PIPE;
++    80004f40:	609c                	ld	a5,0(s1)
++    80004f42:	0137a023          	sw	s3,0(a5)
++  (*f0)->readable = 1;
++    80004f46:	609c                	ld	a5,0(s1)
++    80004f48:	01378423          	sb	s3,8(a5)
++  (*f0)->writable = 0;
++    80004f4c:	609c                	ld	a5,0(s1)
++    80004f4e:	000784a3          	sb	zero,9(a5)
++  (*f0)->pipe = pi;
++    80004f52:	609c                	ld	a5,0(s1)
++    80004f54:	0127b823          	sd	s2,16(a5)
++  (*f1)->type = FD_PIPE;
++    80004f58:	000a3783          	ld	a5,0(s4)
++    80004f5c:	0137a023          	sw	s3,0(a5)
++  (*f1)->readable = 0;
++    80004f60:	000a3783          	ld	a5,0(s4)
++    80004f64:	00078423          	sb	zero,8(a5)
++  (*f1)->writable = 1;
++    80004f68:	000a3783          	ld	a5,0(s4)
++    80004f6c:	013784a3          	sb	s3,9(a5)
++  (*f1)->pipe = pi;
++    80004f70:	000a3783          	ld	a5,0(s4)
++    80004f74:	0127b823          	sd	s2,16(a5)
++  return 0;
++    80004f78:	4501                	li	a0,0
++    80004f7a:	a025                	j	80004fa2 <pipealloc+0xc6>
++
++ bad:
++  if(pi)
++    kfree((char*)pi);
++  if(*f0)
++    80004f7c:	6088                	ld	a0,0(s1)
++    80004f7e:	e501                	bnez	a0,80004f86 <pipealloc+0xaa>
++    80004f80:	a039                	j	80004f8e <pipealloc+0xb2>
++    80004f82:	6088                	ld	a0,0(s1)
++    80004f84:	c51d                	beqz	a0,80004fb2 <pipealloc+0xd6>
++    fileclose(*f0);
++    80004f86:	00000097          	auipc	ra,0x0
++    80004f8a:	c26080e7          	jalr	-986(ra) # 80004bac <fileclose>
++  if(*f1)
++    80004f8e:	000a3783          	ld	a5,0(s4)
++    fileclose(*f1);
++  return -1;
++    80004f92:	557d                	li	a0,-1
++  if(*f1)
++    80004f94:	c799                	beqz	a5,80004fa2 <pipealloc+0xc6>
++    fileclose(*f1);
++    80004f96:	853e                	mv	a0,a5
++    80004f98:	00000097          	auipc	ra,0x0
++    80004f9c:	c14080e7          	jalr	-1004(ra) # 80004bac <fileclose>
++  return -1;
++    80004fa0:	557d                	li	a0,-1
++}
++    80004fa2:	70a2                	ld	ra,40(sp)
++    80004fa4:	7402                	ld	s0,32(sp)
++    80004fa6:	64e2                	ld	s1,24(sp)
++    80004fa8:	6942                	ld	s2,16(sp)
++    80004faa:	69a2                	ld	s3,8(sp)
++    80004fac:	6a02                	ld	s4,0(sp)
++    80004fae:	6145                	addi	sp,sp,48
++    80004fb0:	8082                	ret
++  return -1;
++    80004fb2:	557d                	li	a0,-1
++    80004fb4:	b7fd                	j	80004fa2 <pipealloc+0xc6>
++
++0000000080004fb6 <pipeclose>:
++
++void
++pipeclose(struct pipe *pi, int writable)
++{
++    80004fb6:	1101                	addi	sp,sp,-32
++    80004fb8:	ec06                	sd	ra,24(sp)
++    80004fba:	e822                	sd	s0,16(sp)
++    80004fbc:	e426                	sd	s1,8(sp)
++    80004fbe:	e04a                	sd	s2,0(sp)
++    80004fc0:	1000                	addi	s0,sp,32
++    80004fc2:	84aa                	mv	s1,a0
++    80004fc4:	892e                	mv	s2,a1
++  acquire(&pi->lock);
++    80004fc6:	ffffc097          	auipc	ra,0xffffc
++    80004fca:	c0a080e7          	jalr	-1014(ra) # 80000bd0 <acquire>
++  if(writable){
++    80004fce:	02090d63          	beqz	s2,80005008 <pipeclose+0x52>
++    pi->writeopen = 0;
++    80004fd2:	2204a223          	sw	zero,548(s1)
++    wakeup(&pi->nread);
++    80004fd6:	21848513          	addi	a0,s1,536
++    80004fda:	ffffd097          	auipc	ra,0xffffd
++    80004fde:	75e080e7          	jalr	1886(ra) # 80002738 <wakeup>
++  } else {
++    pi->readopen = 0;
++    wakeup(&pi->nwrite);
++  }
++  if(pi->readopen == 0 && pi->writeopen == 0){
++    80004fe2:	2204b783          	ld	a5,544(s1)
++    80004fe6:	eb95                	bnez	a5,8000501a <pipeclose+0x64>
++    release(&pi->lock);
++    80004fe8:	8526                	mv	a0,s1
++    80004fea:	ffffc097          	auipc	ra,0xffffc
++    80004fee:	c9a080e7          	jalr	-870(ra) # 80000c84 <release>
++    kfree((char*)pi);
++    80004ff2:	8526                	mv	a0,s1
++    80004ff4:	ffffc097          	auipc	ra,0xffffc
++    80004ff8:	9ee080e7          	jalr	-1554(ra) # 800009e2 <kfree>
++  } else
++    release(&pi->lock);
++}
++    80004ffc:	60e2                	ld	ra,24(sp)
++    80004ffe:	6442                	ld	s0,16(sp)
++    80005000:	64a2                	ld	s1,8(sp)
++    80005002:	6902                	ld	s2,0(sp)
++    80005004:	6105                	addi	sp,sp,32
++    80005006:	8082                	ret
++    pi->readopen = 0;
++    80005008:	2204a023          	sw	zero,544(s1)
++    wakeup(&pi->nwrite);
++    8000500c:	21c48513          	addi	a0,s1,540
++    80005010:	ffffd097          	auipc	ra,0xffffd
++    80005014:	728080e7          	jalr	1832(ra) # 80002738 <wakeup>
++    80005018:	b7e9                	j	80004fe2 <pipeclose+0x2c>
++    release(&pi->lock);
++    8000501a:	8526                	mv	a0,s1
++    8000501c:	ffffc097          	auipc	ra,0xffffc
++    80005020:	c68080e7          	jalr	-920(ra) # 80000c84 <release>
++}
++    80005024:	bfe1                	j	80004ffc <pipeclose+0x46>
++
++0000000080005026 <pipewrite>:
++
++int
++pipewrite(struct pipe *pi, uint64 addr, int n)
++{
++    80005026:	711d                	addi	sp,sp,-96
++    80005028:	ec86                	sd	ra,88(sp)
++    8000502a:	e8a2                	sd	s0,80(sp)
++    8000502c:	e4a6                	sd	s1,72(sp)
++    8000502e:	e0ca                	sd	s2,64(sp)
++    80005030:	fc4e                	sd	s3,56(sp)
++    80005032:	f852                	sd	s4,48(sp)
++    80005034:	f456                	sd	s5,40(sp)
++    80005036:	f05a                	sd	s6,32(sp)
++    80005038:	ec5e                	sd	s7,24(sp)
++    8000503a:	e862                	sd	s8,16(sp)
++    8000503c:	1080                	addi	s0,sp,96
++    8000503e:	84aa                	mv	s1,a0
++    80005040:	8aae                	mv	s5,a1
++    80005042:	8a32                	mv	s4,a2
++  int i = 0;
++  struct proc *pr = myproc();
++    80005044:	ffffd097          	auipc	ra,0xffffd
++    80005048:	d32080e7          	jalr	-718(ra) # 80001d76 <myproc>
++    8000504c:	89aa                	mv	s3,a0
++
++  acquire(&pi->lock);
++    8000504e:	8526                	mv	a0,s1
++    80005050:	ffffc097          	auipc	ra,0xffffc
++    80005054:	b80080e7          	jalr	-1152(ra) # 80000bd0 <acquire>
++  while(i < n){
++    80005058:	0b405363          	blez	s4,800050fe <pipewrite+0xd8>
++  int i = 0;
++    8000505c:	4901                	li	s2,0
++    if(pi->nwrite == pi->nread + PIPESIZE){ //DOC: pipewrite-full
++      wakeup(&pi->nread);
++      sleep(&pi->nwrite, &pi->lock);
++    } else {
++      char ch;
++      if(copyin(pr->pagetable, &ch, addr + i, 1) == -1)
++    8000505e:	5b7d                	li	s6,-1
++      wakeup(&pi->nread);
++    80005060:	21848c13          	addi	s8,s1,536
++      sleep(&pi->nwrite, &pi->lock);
++    80005064:	21c48b93          	addi	s7,s1,540
++    80005068:	a089                	j	800050aa <pipewrite+0x84>
++      release(&pi->lock);
++    8000506a:	8526                	mv	a0,s1
++    8000506c:	ffffc097          	auipc	ra,0xffffc
++    80005070:	c18080e7          	jalr	-1000(ra) # 80000c84 <release>
++      return -1;
++    80005074:	597d                	li	s2,-1
++  }
++  wakeup(&pi->nread);
++  release(&pi->lock);
++
++  return i;
++}
++    80005076:	854a                	mv	a0,s2
++    80005078:	60e6                	ld	ra,88(sp)
++    8000507a:	6446                	ld	s0,80(sp)
++    8000507c:	64a6                	ld	s1,72(sp)
++    8000507e:	6906                	ld	s2,64(sp)
++    80005080:	79e2                	ld	s3,56(sp)
++    80005082:	7a42                	ld	s4,48(sp)
++    80005084:	7aa2                	ld	s5,40(sp)
++    80005086:	7b02                	ld	s6,32(sp)
++    80005088:	6be2                	ld	s7,24(sp)
++    8000508a:	6c42                	ld	s8,16(sp)
++    8000508c:	6125                	addi	sp,sp,96
++    8000508e:	8082                	ret
++      wakeup(&pi->nread);
++    80005090:	8562                	mv	a0,s8
++    80005092:	ffffd097          	auipc	ra,0xffffd
++    80005096:	6a6080e7          	jalr	1702(ra) # 80002738 <wakeup>
++      sleep(&pi->nwrite, &pi->lock);
++    8000509a:	85a6                	mv	a1,s1
++    8000509c:	855e                	mv	a0,s7
++    8000509e:	ffffd097          	auipc	ra,0xffffd
++    800050a2:	50e080e7          	jalr	1294(ra) # 800025ac <sleep>
++  while(i < n){
++    800050a6:	05495d63          	bge	s2,s4,80005100 <pipewrite+0xda>
++    if(pi->readopen == 0 || pr->killed){
++    800050aa:	2204a783          	lw	a5,544(s1)
++    800050ae:	dfd5                	beqz	a5,8000506a <pipewrite+0x44>
++    800050b0:	0289a783          	lw	a5,40(s3)
++    800050b4:	fbdd                	bnez	a5,8000506a <pipewrite+0x44>
++    if(pi->nwrite == pi->nread + PIPESIZE){ //DOC: pipewrite-full
++    800050b6:	2184a783          	lw	a5,536(s1)
++    800050ba:	21c4a703          	lw	a4,540(s1)
++    800050be:	2007879b          	addiw	a5,a5,512
++    800050c2:	fcf707e3          	beq	a4,a5,80005090 <pipewrite+0x6a>
++      if(copyin(pr->pagetable, &ch, addr + i, 1) == -1)
++    800050c6:	4685                	li	a3,1
++    800050c8:	01590633          	add	a2,s2,s5
++    800050cc:	faf40593          	addi	a1,s0,-81
++    800050d0:	0509b503          	ld	a0,80(s3)
++    800050d4:	ffffc097          	auipc	ra,0xffffc
++    800050d8:	61a080e7          	jalr	1562(ra) # 800016ee <copyin>
++    800050dc:	03650263          	beq	a0,s6,80005100 <pipewrite+0xda>
++      pi->data[pi->nwrite++ % PIPESIZE] = ch;
++    800050e0:	21c4a783          	lw	a5,540(s1)
++    800050e4:	0017871b          	addiw	a4,a5,1
++    800050e8:	20e4ae23          	sw	a4,540(s1)
++    800050ec:	1ff7f793          	andi	a5,a5,511
++    800050f0:	97a6                	add	a5,a5,s1
++    800050f2:	faf44703          	lbu	a4,-81(s0)
++    800050f6:	00e78c23          	sb	a4,24(a5)
++      i++;
++    800050fa:	2905                	addiw	s2,s2,1
++    800050fc:	b76d                	j	800050a6 <pipewrite+0x80>
++  int i = 0;
++    800050fe:	4901                	li	s2,0
++  wakeup(&pi->nread);
++    80005100:	21848513          	addi	a0,s1,536
++    80005104:	ffffd097          	auipc	ra,0xffffd
++    80005108:	634080e7          	jalr	1588(ra) # 80002738 <wakeup>
++  release(&pi->lock);
++    8000510c:	8526                	mv	a0,s1
++    8000510e:	ffffc097          	auipc	ra,0xffffc
++    80005112:	b76080e7          	jalr	-1162(ra) # 80000c84 <release>
++  return i;
++    80005116:	b785                	j	80005076 <pipewrite+0x50>
++
++0000000080005118 <piperead>:
++
++int
++piperead(struct pipe *pi, uint64 addr, int n)
++{
++    80005118:	715d                	addi	sp,sp,-80
++    8000511a:	e486                	sd	ra,72(sp)
++    8000511c:	e0a2                	sd	s0,64(sp)
++    8000511e:	fc26                	sd	s1,56(sp)
++    80005120:	f84a                	sd	s2,48(sp)
++    80005122:	f44e                	sd	s3,40(sp)
++    80005124:	f052                	sd	s4,32(sp)
++    80005126:	ec56                	sd	s5,24(sp)
++    80005128:	e85a                	sd	s6,16(sp)
++    8000512a:	0880                	addi	s0,sp,80
++    8000512c:	84aa                	mv	s1,a0
++    8000512e:	892e                	mv	s2,a1
++    80005130:	8ab2                	mv	s5,a2
++  int i;
++  struct proc *pr = myproc();
++    80005132:	ffffd097          	auipc	ra,0xffffd
++    80005136:	c44080e7          	jalr	-956(ra) # 80001d76 <myproc>
++    8000513a:	8a2a                	mv	s4,a0
++  char ch;
++
++  acquire(&pi->lock);
++    8000513c:	8526                	mv	a0,s1
++    8000513e:	ffffc097          	auipc	ra,0xffffc
++    80005142:	a92080e7          	jalr	-1390(ra) # 80000bd0 <acquire>
++  while(pi->nread == pi->nwrite && pi->writeopen){  //DOC: pipe-empty
++    80005146:	2184a703          	lw	a4,536(s1)
++    8000514a:	21c4a783          	lw	a5,540(s1)
++    if(pr->killed){
++      release(&pi->lock);
++      return -1;
++    }
++    sleep(&pi->nread, &pi->lock); //DOC: piperead-sleep
++    8000514e:	21848993          	addi	s3,s1,536
++  while(pi->nread == pi->nwrite && pi->writeopen){  //DOC: pipe-empty
++    80005152:	02f71463          	bne	a4,a5,8000517a <piperead+0x62>
++    80005156:	2244a783          	lw	a5,548(s1)
++    8000515a:	c385                	beqz	a5,8000517a <piperead+0x62>
++    if(pr->killed){
++    8000515c:	028a2783          	lw	a5,40(s4)
++    80005160:	ebc9                	bnez	a5,800051f2 <piperead+0xda>
++    sleep(&pi->nread, &pi->lock); //DOC: piperead-sleep
++    80005162:	85a6                	mv	a1,s1
++    80005164:	854e                	mv	a0,s3
++    80005166:	ffffd097          	auipc	ra,0xffffd
++    8000516a:	446080e7          	jalr	1094(ra) # 800025ac <sleep>
++  while(pi->nread == pi->nwrite && pi->writeopen){  //DOC: pipe-empty
++    8000516e:	2184a703          	lw	a4,536(s1)
++    80005172:	21c4a783          	lw	a5,540(s1)
++    80005176:	fef700e3          	beq	a4,a5,80005156 <piperead+0x3e>
++  }
++  for(i = 0; i < n; i++){  //DOC: piperead-copy
++    8000517a:	4981                	li	s3,0
++    if(pi->nread == pi->nwrite)
++      break;
++    ch = pi->data[pi->nread++ % PIPESIZE];
++    if(copyout(pr->pagetable, addr + i, &ch, 1) == -1)
++    8000517c:	5b7d                	li	s6,-1
++  for(i = 0; i < n; i++){  //DOC: piperead-copy
++    8000517e:	05505463          	blez	s5,800051c6 <piperead+0xae>
++    if(pi->nread == pi->nwrite)
++    80005182:	2184a783          	lw	a5,536(s1)
++    80005186:	21c4a703          	lw	a4,540(s1)
++    8000518a:	02f70e63          	beq	a4,a5,800051c6 <piperead+0xae>
++    ch = pi->data[pi->nread++ % PIPESIZE];
++    8000518e:	0017871b          	addiw	a4,a5,1
++    80005192:	20e4ac23          	sw	a4,536(s1)
++    80005196:	1ff7f793          	andi	a5,a5,511
++    8000519a:	97a6                	add	a5,a5,s1
++    8000519c:	0187c783          	lbu	a5,24(a5)
++    800051a0:	faf40fa3          	sb	a5,-65(s0)
++    if(copyout(pr->pagetable, addr + i, &ch, 1) == -1)
++    800051a4:	4685                	li	a3,1
++    800051a6:	fbf40613          	addi	a2,s0,-65
++    800051aa:	85ca                	mv	a1,s2
++    800051ac:	050a3503          	ld	a0,80(s4)
++    800051b0:	ffffc097          	auipc	ra,0xffffc
++    800051b4:	4b2080e7          	jalr	1202(ra) # 80001662 <copyout>
++    800051b8:	01650763          	beq	a0,s6,800051c6 <piperead+0xae>
++  for(i = 0; i < n; i++){  //DOC: piperead-copy
++    800051bc:	2985                	addiw	s3,s3,1
++    800051be:	0905                	addi	s2,s2,1
++    800051c0:	fd3a91e3          	bne	s5,s3,80005182 <piperead+0x6a>
++    800051c4:	89d6                	mv	s3,s5
++      break;
++  }
++  wakeup(&pi->nwrite);  //DOC: piperead-wakeup
++    800051c6:	21c48513          	addi	a0,s1,540
++    800051ca:	ffffd097          	auipc	ra,0xffffd
++    800051ce:	56e080e7          	jalr	1390(ra) # 80002738 <wakeup>
++  release(&pi->lock);
++    800051d2:	8526                	mv	a0,s1
++    800051d4:	ffffc097          	auipc	ra,0xffffc
++    800051d8:	ab0080e7          	jalr	-1360(ra) # 80000c84 <release>
++  return i;
++}
++    800051dc:	854e                	mv	a0,s3
++    800051de:	60a6                	ld	ra,72(sp)
++    800051e0:	6406                	ld	s0,64(sp)
++    800051e2:	74e2                	ld	s1,56(sp)
++    800051e4:	7942                	ld	s2,48(sp)
++    800051e6:	79a2                	ld	s3,40(sp)
++    800051e8:	7a02                	ld	s4,32(sp)
++    800051ea:	6ae2                	ld	s5,24(sp)
++    800051ec:	6b42                	ld	s6,16(sp)
++    800051ee:	6161                	addi	sp,sp,80
++    800051f0:	8082                	ret
++      release(&pi->lock);
++    800051f2:	8526                	mv	a0,s1
++    800051f4:	ffffc097          	auipc	ra,0xffffc
++    800051f8:	a90080e7          	jalr	-1392(ra) # 80000c84 <release>
++      return -1;
++    800051fc:	59fd                	li	s3,-1
++    800051fe:	bff9                	j	800051dc <piperead+0xc4>
++
++0000000080005200 <exec>:
++
++static int loadseg(pde_t *pgdir, uint64 addr, struct inode *ip, uint offset, uint sz);
++
++int
++exec(char *path, char **argv)
++{
++    80005200:	de010113          	addi	sp,sp,-544
++    80005204:	20113c23          	sd	ra,536(sp)
++    80005208:	20813823          	sd	s0,528(sp)
++    8000520c:	20913423          	sd	s1,520(sp)
++    80005210:	21213023          	sd	s2,512(sp)
++    80005214:	ffce                	sd	s3,504(sp)
++    80005216:	fbd2                	sd	s4,496(sp)
++    80005218:	f7d6                	sd	s5,488(sp)
++    8000521a:	f3da                	sd	s6,480(sp)
++    8000521c:	efde                	sd	s7,472(sp)
++    8000521e:	ebe2                	sd	s8,464(sp)
++    80005220:	e7e6                	sd	s9,456(sp)
++    80005222:	e3ea                	sd	s10,448(sp)
++    80005224:	ff6e                	sd	s11,440(sp)
++    80005226:	1400                	addi	s0,sp,544
++    80005228:	892a                	mv	s2,a0
++    8000522a:	dea43423          	sd	a0,-536(s0)
++    8000522e:	deb43823          	sd	a1,-528(s0)
++  uint64 argc, sz = 0, sp, ustack[MAXARG], stackbase;
++  struct elfhdr elf;
++  struct inode *ip;
++  struct proghdr ph;
++  pagetable_t pagetable = 0, oldpagetable;
++  struct proc *p = myproc();
++    80005232:	ffffd097          	auipc	ra,0xffffd
++    80005236:	b44080e7          	jalr	-1212(ra) # 80001d76 <myproc>
++    8000523a:	84aa                	mv	s1,a0
++
++  begin_op();
++    8000523c:	fffff097          	auipc	ra,0xfffff
++    80005240:	4a8080e7          	jalr	1192(ra) # 800046e4 <begin_op>
++
++  if((ip = namei(path)) == 0){
++    80005244:	854a                	mv	a0,s2
++    80005246:	fffff097          	auipc	ra,0xfffff
++    8000524a:	27e080e7          	jalr	638(ra) # 800044c4 <namei>
++    8000524e:	c93d                	beqz	a0,800052c4 <exec+0xc4>
++    80005250:	8aaa                	mv	s5,a0
++    end_op();
++    return -1;
++  }
++  ilock(ip);
++    80005252:	fffff097          	auipc	ra,0xfffff
++    80005256:	ab6080e7          	jalr	-1354(ra) # 80003d08 <ilock>
++
++  // Check ELF header
++  if(readi(ip, 0, (uint64)&elf, 0, sizeof(elf)) != sizeof(elf))
++    8000525a:	04000713          	li	a4,64
++    8000525e:	4681                	li	a3,0
++    80005260:	e5040613          	addi	a2,s0,-432
++    80005264:	4581                	li	a1,0
++    80005266:	8556                	mv	a0,s5
++    80005268:	fffff097          	auipc	ra,0xfffff
++    8000526c:	d54080e7          	jalr	-684(ra) # 80003fbc <readi>
++    80005270:	04000793          	li	a5,64
++    80005274:	00f51a63          	bne	a0,a5,80005288 <exec+0x88>
++    goto bad;
++  if(elf.magic != ELF_MAGIC)
++    80005278:	e5042703          	lw	a4,-432(s0)
++    8000527c:	464c47b7          	lui	a5,0x464c4
++    80005280:	57f78793          	addi	a5,a5,1407 # 464c457f <_entry-0x39b3ba81>
++    80005284:	04f70663          	beq	a4,a5,800052d0 <exec+0xd0>
++
++ bad:
++  if(pagetable)
++    proc_freepagetable(pagetable, sz);
++  if(ip){
++    iunlockput(ip);
++    80005288:	8556                	mv	a0,s5
++    8000528a:	fffff097          	auipc	ra,0xfffff
++    8000528e:	ce0080e7          	jalr	-800(ra) # 80003f6a <iunlockput>
++    end_op();
++    80005292:	fffff097          	auipc	ra,0xfffff
++    80005296:	4d0080e7          	jalr	1232(ra) # 80004762 <end_op>
++  }
++  return -1;
++    8000529a:	557d                	li	a0,-1
++}
++    8000529c:	21813083          	ld	ra,536(sp)
++    800052a0:	21013403          	ld	s0,528(sp)
++    800052a4:	20813483          	ld	s1,520(sp)
++    800052a8:	20013903          	ld	s2,512(sp)
++    800052ac:	79fe                	ld	s3,504(sp)
++    800052ae:	7a5e                	ld	s4,496(sp)
++    800052b0:	7abe                	ld	s5,488(sp)
++    800052b2:	7b1e                	ld	s6,480(sp)
++    800052b4:	6bfe                	ld	s7,472(sp)
++    800052b6:	6c5e                	ld	s8,464(sp)
++    800052b8:	6cbe                	ld	s9,456(sp)
++    800052ba:	6d1e                	ld	s10,448(sp)
++    800052bc:	7dfa                	ld	s11,440(sp)
++    800052be:	22010113          	addi	sp,sp,544
++    800052c2:	8082                	ret
++    end_op();
++    800052c4:	fffff097          	auipc	ra,0xfffff
++    800052c8:	49e080e7          	jalr	1182(ra) # 80004762 <end_op>
++    return -1;
++    800052cc:	557d                	li	a0,-1
++    800052ce:	b7f9                	j	8000529c <exec+0x9c>
++  if((pagetable = proc_pagetable(p)) == 0)
++    800052d0:	8526                	mv	a0,s1
++    800052d2:	ffffd097          	auipc	ra,0xffffd
++    800052d6:	b68080e7          	jalr	-1176(ra) # 80001e3a <proc_pagetable>
++    800052da:	8b2a                	mv	s6,a0
++    800052dc:	d555                	beqz	a0,80005288 <exec+0x88>
++  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
++    800052de:	e7042783          	lw	a5,-400(s0)
++    800052e2:	e8845703          	lhu	a4,-376(s0)
++    800052e6:	c735                	beqz	a4,80005352 <exec+0x152>
++  uint64 argc, sz = 0, sp, ustack[MAXARG], stackbase;
++    800052e8:	4481                	li	s1,0
++  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
++    800052ea:	e0043423          	sd	zero,-504(s0)
++    if((ph.vaddr % PGSIZE) != 0)
++    800052ee:	6a05                	lui	s4,0x1
++    800052f0:	fffa0713          	addi	a4,s4,-1 # fff <_entry-0x7ffff001>
++    800052f4:	dee43023          	sd	a4,-544(s0)
++loadseg(pagetable_t pagetable, uint64 va, struct inode *ip, uint offset, uint sz)
++{
++  uint i, n;
++  uint64 pa;
++
++  for(i = 0; i < sz; i += PGSIZE){
++    800052f8:	6d85                	lui	s11,0x1
++    800052fa:	7d7d                	lui	s10,0xfffff
++    800052fc:	ac1d                	j	80005532 <exec+0x332>
++    pa = walkaddr(pagetable, va + i);
++    if(pa == 0)
++      panic("loadseg: address should exist");
++    800052fe:	00003517          	auipc	a0,0x3
++    80005302:	43a50513          	addi	a0,a0,1082 # 80008738 <syscalls+0x2b0>
++    80005306:	ffffb097          	auipc	ra,0xffffb
++    8000530a:	234080e7          	jalr	564(ra) # 8000053a <panic>
++    if(sz - i < PGSIZE)
++      n = sz - i;
++    else
++      n = PGSIZE;
++    if(readi(ip, 0, (uint64)pa, offset+i, n) != n)
++    8000530e:	874a                	mv	a4,s2
++    80005310:	009c86bb          	addw	a3,s9,s1
++    80005314:	4581                	li	a1,0
++    80005316:	8556                	mv	a0,s5
++    80005318:	fffff097          	auipc	ra,0xfffff
++    8000531c:	ca4080e7          	jalr	-860(ra) # 80003fbc <readi>
++    80005320:	2501                	sext.w	a0,a0
++    80005322:	1aa91863          	bne	s2,a0,800054d2 <exec+0x2d2>
++  for(i = 0; i < sz; i += PGSIZE){
++    80005326:	009d84bb          	addw	s1,s11,s1
++    8000532a:	013d09bb          	addw	s3,s10,s3
++    8000532e:	1f74f263          	bgeu	s1,s7,80005512 <exec+0x312>
++    pa = walkaddr(pagetable, va + i);
++    80005332:	02049593          	slli	a1,s1,0x20
++    80005336:	9181                	srli	a1,a1,0x20
++    80005338:	95e2                	add	a1,a1,s8
++    8000533a:	855a                	mv	a0,s6
++    8000533c:	ffffc097          	auipc	ra,0xffffc
++    80005340:	d1e080e7          	jalr	-738(ra) # 8000105a <walkaddr>
++    80005344:	862a                	mv	a2,a0
++    if(pa == 0)
++    80005346:	dd45                	beqz	a0,800052fe <exec+0xfe>
++      n = PGSIZE;
++    80005348:	8952                	mv	s2,s4
++    if(sz - i < PGSIZE)
++    8000534a:	fd49f2e3          	bgeu	s3,s4,8000530e <exec+0x10e>
++      n = sz - i;
++    8000534e:	894e                	mv	s2,s3
++    80005350:	bf7d                	j	8000530e <exec+0x10e>
++  uint64 argc, sz = 0, sp, ustack[MAXARG], stackbase;
++    80005352:	4481                	li	s1,0
++  iunlockput(ip);
++    80005354:	8556                	mv	a0,s5
++    80005356:	fffff097          	auipc	ra,0xfffff
++    8000535a:	c14080e7          	jalr	-1004(ra) # 80003f6a <iunlockput>
++  end_op();
++    8000535e:	fffff097          	auipc	ra,0xfffff
++    80005362:	404080e7          	jalr	1028(ra) # 80004762 <end_op>
++  p = myproc();
++    80005366:	ffffd097          	auipc	ra,0xffffd
++    8000536a:	a10080e7          	jalr	-1520(ra) # 80001d76 <myproc>
++    8000536e:	8baa                	mv	s7,a0
++  uint64 oldsz = p->sz;
++    80005370:	04853d03          	ld	s10,72(a0)
++  sz = PGROUNDUP(sz);
++    80005374:	6785                	lui	a5,0x1
++    80005376:	17fd                	addi	a5,a5,-1 # fff <_entry-0x7ffff001>
++    80005378:	97a6                	add	a5,a5,s1
++    8000537a:	777d                	lui	a4,0xfffff
++    8000537c:	8ff9                	and	a5,a5,a4
++    8000537e:	def43c23          	sd	a5,-520(s0)
++  if((sz1 = uvmalloc(pagetable, sz, sz + 2*PGSIZE)) == 0)
++    80005382:	6609                	lui	a2,0x2
++    80005384:	963e                	add	a2,a2,a5
++    80005386:	85be                	mv	a1,a5
++    80005388:	855a                	mv	a0,s6
++    8000538a:	ffffc097          	auipc	ra,0xffffc
++    8000538e:	084080e7          	jalr	132(ra) # 8000140e <uvmalloc>
++    80005392:	8c2a                	mv	s8,a0
++  ip = 0;
++    80005394:	4a81                	li	s5,0
++  if((sz1 = uvmalloc(pagetable, sz, sz + 2*PGSIZE)) == 0)
++    80005396:	12050e63          	beqz	a0,800054d2 <exec+0x2d2>
++  uvmclear(pagetable, sz-2*PGSIZE);
++    8000539a:	75f9                	lui	a1,0xffffe
++    8000539c:	95aa                	add	a1,a1,a0
++    8000539e:	855a                	mv	a0,s6
++    800053a0:	ffffc097          	auipc	ra,0xffffc
++    800053a4:	290080e7          	jalr	656(ra) # 80001630 <uvmclear>
++  stackbase = sp - PGSIZE;
++    800053a8:	7afd                	lui	s5,0xfffff
++    800053aa:	9ae2                	add	s5,s5,s8
++  for(argc = 0; argv[argc]; argc++) {
++    800053ac:	df043783          	ld	a5,-528(s0)
++    800053b0:	6388                	ld	a0,0(a5)
++    800053b2:	c925                	beqz	a0,80005422 <exec+0x222>
++    800053b4:	e9040993          	addi	s3,s0,-368
++    800053b8:	f9040c93          	addi	s9,s0,-112
++  sp = sz;
++    800053bc:	8962                	mv	s2,s8
++  for(argc = 0; argv[argc]; argc++) {
++    800053be:	4481                	li	s1,0
++    sp -= strlen(argv[argc]) + 1;
++    800053c0:	ffffc097          	auipc	ra,0xffffc
++    800053c4:	a88080e7          	jalr	-1400(ra) # 80000e48 <strlen>
++    800053c8:	0015079b          	addiw	a5,a0,1
++    800053cc:	40f907b3          	sub	a5,s2,a5
++    sp -= sp % 16; // riscv sp must be 16-byte aligned
++    800053d0:	ff07f913          	andi	s2,a5,-16
++    if(sp < stackbase)
++    800053d4:	13596363          	bltu	s2,s5,800054fa <exec+0x2fa>
++    if(copyout(pagetable, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
++    800053d8:	df043d83          	ld	s11,-528(s0)
++    800053dc:	000dba03          	ld	s4,0(s11) # 1000 <_entry-0x7ffff000>
++    800053e0:	8552                	mv	a0,s4
++    800053e2:	ffffc097          	auipc	ra,0xffffc
++    800053e6:	a66080e7          	jalr	-1434(ra) # 80000e48 <strlen>
++    800053ea:	0015069b          	addiw	a3,a0,1
++    800053ee:	8652                	mv	a2,s4
++    800053f0:	85ca                	mv	a1,s2
++    800053f2:	855a                	mv	a0,s6
++    800053f4:	ffffc097          	auipc	ra,0xffffc
++    800053f8:	26e080e7          	jalr	622(ra) # 80001662 <copyout>
++    800053fc:	10054363          	bltz	a0,80005502 <exec+0x302>
++    ustack[argc] = sp;
++    80005400:	0129b023          	sd	s2,0(s3)
++  for(argc = 0; argv[argc]; argc++) {
++    80005404:	0485                	addi	s1,s1,1
++    80005406:	008d8793          	addi	a5,s11,8
++    8000540a:	def43823          	sd	a5,-528(s0)
++    8000540e:	008db503          	ld	a0,8(s11)
++    80005412:	c911                	beqz	a0,80005426 <exec+0x226>
++    if(argc >= MAXARG)
++    80005414:	09a1                	addi	s3,s3,8
++    80005416:	fb3c95e3          	bne	s9,s3,800053c0 <exec+0x1c0>
++  sz = sz1;
++    8000541a:	df843c23          	sd	s8,-520(s0)
++  ip = 0;
++    8000541e:	4a81                	li	s5,0
++    80005420:	a84d                	j	800054d2 <exec+0x2d2>
++  sp = sz;
++    80005422:	8962                	mv	s2,s8
++  for(argc = 0; argv[argc]; argc++) {
++    80005424:	4481                	li	s1,0
++  ustack[argc] = 0;
++    80005426:	00349793          	slli	a5,s1,0x3
++    8000542a:	f9078793          	addi	a5,a5,-112
++    8000542e:	97a2                	add	a5,a5,s0
++    80005430:	f007b023          	sd	zero,-256(a5)
++  sp -= (argc+1) * sizeof(uint64);
++    80005434:	00148693          	addi	a3,s1,1
++    80005438:	068e                	slli	a3,a3,0x3
++    8000543a:	40d90933          	sub	s2,s2,a3
++  sp -= sp % 16;
++    8000543e:	ff097913          	andi	s2,s2,-16
++  if(sp < stackbase)
++    80005442:	01597663          	bgeu	s2,s5,8000544e <exec+0x24e>
++  sz = sz1;
++    80005446:	df843c23          	sd	s8,-520(s0)
++  ip = 0;
++    8000544a:	4a81                	li	s5,0
++    8000544c:	a059                	j	800054d2 <exec+0x2d2>
++  if(copyout(pagetable, sp, (char *)ustack, (argc+1)*sizeof(uint64)) < 0)
++    8000544e:	e9040613          	addi	a2,s0,-368
++    80005452:	85ca                	mv	a1,s2
++    80005454:	855a                	mv	a0,s6
++    80005456:	ffffc097          	auipc	ra,0xffffc
++    8000545a:	20c080e7          	jalr	524(ra) # 80001662 <copyout>
++    8000545e:	0a054663          	bltz	a0,8000550a <exec+0x30a>
++  p->trapframe->a1 = sp;
++    80005462:	058bb783          	ld	a5,88(s7)
++    80005466:	0727bc23          	sd	s2,120(a5)
++  for(last=s=path; *s; s++)
++    8000546a:	de843783          	ld	a5,-536(s0)
++    8000546e:	0007c703          	lbu	a4,0(a5)
++    80005472:	cf11                	beqz	a4,8000548e <exec+0x28e>
++    80005474:	0785                	addi	a5,a5,1
++    if(*s == '/')
++    80005476:	02f00693          	li	a3,47
++    8000547a:	a039                	j	80005488 <exec+0x288>
++      last = s+1;
++    8000547c:	def43423          	sd	a5,-536(s0)
++  for(last=s=path; *s; s++)
++    80005480:	0785                	addi	a5,a5,1
++    80005482:	fff7c703          	lbu	a4,-1(a5)
++    80005486:	c701                	beqz	a4,8000548e <exec+0x28e>
++    if(*s == '/')
++    80005488:	fed71ce3          	bne	a4,a3,80005480 <exec+0x280>
++    8000548c:	bfc5                	j	8000547c <exec+0x27c>
++  safestrcpy(p->name, last, sizeof(p->name));
++    8000548e:	4641                	li	a2,16
++    80005490:	de843583          	ld	a1,-536(s0)
++    80005494:	1d8b8513          	addi	a0,s7,472
++    80005498:	ffffc097          	auipc	ra,0xffffc
++    8000549c:	97e080e7          	jalr	-1666(ra) # 80000e16 <safestrcpy>
++  oldpagetable = p->pagetable;
++    800054a0:	050bb503          	ld	a0,80(s7)
++  p->pagetable = pagetable;
++    800054a4:	056bb823          	sd	s6,80(s7)
++  p->sz = sz;
++    800054a8:	058bb423          	sd	s8,72(s7)
++  p->trapframe->epc = elf.entry;  // initial program counter = main
++    800054ac:	058bb783          	ld	a5,88(s7)
++    800054b0:	e6843703          	ld	a4,-408(s0)
++    800054b4:	ef98                	sd	a4,24(a5)
++  p->trapframe->sp = sp; // initial stack pointer
++    800054b6:	058bb783          	ld	a5,88(s7)
++    800054ba:	0327b823          	sd	s2,48(a5)
++  proc_freepagetable(oldpagetable, oldsz);
++    800054be:	85ea                	mv	a1,s10
++    800054c0:	ffffd097          	auipc	ra,0xffffd
++    800054c4:	a16080e7          	jalr	-1514(ra) # 80001ed6 <proc_freepagetable>
++  return argc; // this ends up in a0, the first argument to main(argc, argv)
++    800054c8:	0004851b          	sext.w	a0,s1
++    800054cc:	bbc1                	j	8000529c <exec+0x9c>
++    800054ce:	de943c23          	sd	s1,-520(s0)
++    proc_freepagetable(pagetable, sz);
++    800054d2:	df843583          	ld	a1,-520(s0)
++    800054d6:	855a                	mv	a0,s6
++    800054d8:	ffffd097          	auipc	ra,0xffffd
++    800054dc:	9fe080e7          	jalr	-1538(ra) # 80001ed6 <proc_freepagetable>
++  if(ip){
++    800054e0:	da0a94e3          	bnez	s5,80005288 <exec+0x88>
++  return -1;
++    800054e4:	557d                	li	a0,-1
++    800054e6:	bb5d                	j	8000529c <exec+0x9c>
++    800054e8:	de943c23          	sd	s1,-520(s0)
++    800054ec:	b7dd                	j	800054d2 <exec+0x2d2>
++    800054ee:	de943c23          	sd	s1,-520(s0)
++    800054f2:	b7c5                	j	800054d2 <exec+0x2d2>
++    800054f4:	de943c23          	sd	s1,-520(s0)
++    800054f8:	bfe9                	j	800054d2 <exec+0x2d2>
++  sz = sz1;
++    800054fa:	df843c23          	sd	s8,-520(s0)
++  ip = 0;
++    800054fe:	4a81                	li	s5,0
++    80005500:	bfc9                	j	800054d2 <exec+0x2d2>
++  sz = sz1;
++    80005502:	df843c23          	sd	s8,-520(s0)
++  ip = 0;
++    80005506:	4a81                	li	s5,0
++    80005508:	b7e9                	j	800054d2 <exec+0x2d2>
++  sz = sz1;
++    8000550a:	df843c23          	sd	s8,-520(s0)
++  ip = 0;
++    8000550e:	4a81                	li	s5,0
++    80005510:	b7c9                	j	800054d2 <exec+0x2d2>
++    if((sz1 = uvmalloc(pagetable, sz, ph.vaddr + ph.memsz)) == 0)
++    80005512:	df843483          	ld	s1,-520(s0)
++  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
++    80005516:	e0843783          	ld	a5,-504(s0)
++    8000551a:	0017869b          	addiw	a3,a5,1
++    8000551e:	e0d43423          	sd	a3,-504(s0)
++    80005522:	e0043783          	ld	a5,-512(s0)
++    80005526:	0387879b          	addiw	a5,a5,56
++    8000552a:	e8845703          	lhu	a4,-376(s0)
++    8000552e:	e2e6d3e3          	bge	a3,a4,80005354 <exec+0x154>
++    if(readi(ip, 0, (uint64)&ph, off, sizeof(ph)) != sizeof(ph))
++    80005532:	2781                	sext.w	a5,a5
++    80005534:	e0f43023          	sd	a5,-512(s0)
++    80005538:	03800713          	li	a4,56
++    8000553c:	86be                	mv	a3,a5
++    8000553e:	e1840613          	addi	a2,s0,-488
++    80005542:	4581                	li	a1,0
++    80005544:	8556                	mv	a0,s5
++    80005546:	fffff097          	auipc	ra,0xfffff
++    8000554a:	a76080e7          	jalr	-1418(ra) # 80003fbc <readi>
++    8000554e:	03800793          	li	a5,56
++    80005552:	f6f51ee3          	bne	a0,a5,800054ce <exec+0x2ce>
++    if(ph.type != ELF_PROG_LOAD)
++    80005556:	e1842783          	lw	a5,-488(s0)
++    8000555a:	4705                	li	a4,1
++    8000555c:	fae79de3          	bne	a5,a4,80005516 <exec+0x316>
++    if(ph.memsz < ph.filesz)
++    80005560:	e4043603          	ld	a2,-448(s0)
++    80005564:	e3843783          	ld	a5,-456(s0)
++    80005568:	f8f660e3          	bltu	a2,a5,800054e8 <exec+0x2e8>
++    if(ph.vaddr + ph.memsz < ph.vaddr)
++    8000556c:	e2843783          	ld	a5,-472(s0)
++    80005570:	963e                	add	a2,a2,a5
++    80005572:	f6f66ee3          	bltu	a2,a5,800054ee <exec+0x2ee>
++    if((sz1 = uvmalloc(pagetable, sz, ph.vaddr + ph.memsz)) == 0)
++    80005576:	85a6                	mv	a1,s1
++    80005578:	855a                	mv	a0,s6
++    8000557a:	ffffc097          	auipc	ra,0xffffc
++    8000557e:	e94080e7          	jalr	-364(ra) # 8000140e <uvmalloc>
++    80005582:	dea43c23          	sd	a0,-520(s0)
++    80005586:	d53d                	beqz	a0,800054f4 <exec+0x2f4>
++    if((ph.vaddr % PGSIZE) != 0)
++    80005588:	e2843c03          	ld	s8,-472(s0)
++    8000558c:	de043783          	ld	a5,-544(s0)
++    80005590:	00fc77b3          	and	a5,s8,a5
++    80005594:	ff9d                	bnez	a5,800054d2 <exec+0x2d2>
++    if(loadseg(pagetable, ph.vaddr, ip, ph.off, ph.filesz) < 0)
++    80005596:	e2042c83          	lw	s9,-480(s0)
++    8000559a:	e3842b83          	lw	s7,-456(s0)
++  for(i = 0; i < sz; i += PGSIZE){
++    8000559e:	f60b8ae3          	beqz	s7,80005512 <exec+0x312>
++    800055a2:	89de                	mv	s3,s7
++    800055a4:	4481                	li	s1,0
++    800055a6:	b371                	j	80005332 <exec+0x132>
++
++00000000800055a8 <argfd>:
++
++// Fetch the nth word-sized system call argument as a file descriptor
++// and return both the descriptor and the corresponding struct file.
++static int
++argfd(int n, int *pfd, struct file **pf)
++{
++    800055a8:	7179                	addi	sp,sp,-48
++    800055aa:	f406                	sd	ra,40(sp)
++    800055ac:	f022                	sd	s0,32(sp)
++    800055ae:	ec26                	sd	s1,24(sp)
++    800055b0:	e84a                	sd	s2,16(sp)
++    800055b2:	1800                	addi	s0,sp,48
++    800055b4:	892e                	mv	s2,a1
++    800055b6:	84b2                	mv	s1,a2
++  int fd;
++  struct file *f;
++
++  if(argint(n, &fd) < 0)
++    800055b8:	fdc40593          	addi	a1,s0,-36
++    800055bc:	ffffe097          	auipc	ra,0xffffe
++    800055c0:	a96080e7          	jalr	-1386(ra) # 80003052 <argint>
++    800055c4:	04054063          	bltz	a0,80005604 <argfd+0x5c>
++    return -1;
++  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
++    800055c8:	fdc42703          	lw	a4,-36(s0)
++    800055cc:	47bd                	li	a5,15
++    800055ce:	02e7ed63          	bltu	a5,a4,80005608 <argfd+0x60>
++    800055d2:	ffffc097          	auipc	ra,0xffffc
++    800055d6:	7a4080e7          	jalr	1956(ra) # 80001d76 <myproc>
++    800055da:	fdc42703          	lw	a4,-36(s0)
++    800055de:	01a70793          	addi	a5,a4,26 # fffffffffffff01a <end+0xffffffff7ffd601a>
++    800055e2:	078e                	slli	a5,a5,0x3
++    800055e4:	953e                	add	a0,a0,a5
++    800055e6:	611c                	ld	a5,0(a0)
++    800055e8:	c395                	beqz	a5,8000560c <argfd+0x64>
++    return -1;
++  if(pfd)
++    800055ea:	00090463          	beqz	s2,800055f2 <argfd+0x4a>
++    *pfd = fd;
++    800055ee:	00e92023          	sw	a4,0(s2)
++  if(pf)
++    *pf = f;
++  return 0;
++    800055f2:	4501                	li	a0,0
++  if(pf)
++    800055f4:	c091                	beqz	s1,800055f8 <argfd+0x50>
++    *pf = f;
++    800055f6:	e09c                	sd	a5,0(s1)
++}
++    800055f8:	70a2                	ld	ra,40(sp)
++    800055fa:	7402                	ld	s0,32(sp)
++    800055fc:	64e2                	ld	s1,24(sp)
++    800055fe:	6942                	ld	s2,16(sp)
++    80005600:	6145                	addi	sp,sp,48
++    80005602:	8082                	ret
++    return -1;
++    80005604:	557d                	li	a0,-1
++    80005606:	bfcd                	j	800055f8 <argfd+0x50>
++    return -1;
++    80005608:	557d                	li	a0,-1
++    8000560a:	b7fd                	j	800055f8 <argfd+0x50>
++    8000560c:	557d                	li	a0,-1
++    8000560e:	b7ed                	j	800055f8 <argfd+0x50>
++
++0000000080005610 <fdalloc>:
++
++// Allocate a file descriptor for the given file.
++// Takes over file reference from caller on success.
++static int
++fdalloc(struct file *f)
++{
++    80005610:	1101                	addi	sp,sp,-32
++    80005612:	ec06                	sd	ra,24(sp)
++    80005614:	e822                	sd	s0,16(sp)
++    80005616:	e426                	sd	s1,8(sp)
++    80005618:	1000                	addi	s0,sp,32
++    8000561a:	84aa                	mv	s1,a0
++  int fd;
++  struct proc *p = myproc();
++    8000561c:	ffffc097          	auipc	ra,0xffffc
++    80005620:	75a080e7          	jalr	1882(ra) # 80001d76 <myproc>
++    80005624:	862a                	mv	a2,a0
++
++  for(fd = 0; fd < NOFILE; fd++){
++    80005626:	0d050793          	addi	a5,a0,208
++    8000562a:	4501                	li	a0,0
++    8000562c:	46c1                	li	a3,16
++    if(p->ofile[fd] == 0){
++    8000562e:	6398                	ld	a4,0(a5)
++    80005630:	cb19                	beqz	a4,80005646 <fdalloc+0x36>
++  for(fd = 0; fd < NOFILE; fd++){
++    80005632:	2505                	addiw	a0,a0,1
++    80005634:	07a1                	addi	a5,a5,8
++    80005636:	fed51ce3          	bne	a0,a3,8000562e <fdalloc+0x1e>
++      p->ofile[fd] = f;
++      return fd;
++    }
++  }
++  return -1;
++    8000563a:	557d                	li	a0,-1
++}
++    8000563c:	60e2                	ld	ra,24(sp)
++    8000563e:	6442                	ld	s0,16(sp)
++    80005640:	64a2                	ld	s1,8(sp)
++    80005642:	6105                	addi	sp,sp,32
++    80005644:	8082                	ret
++      p->ofile[fd] = f;
++    80005646:	01a50793          	addi	a5,a0,26
++    8000564a:	078e                	slli	a5,a5,0x3
++    8000564c:	963e                	add	a2,a2,a5
++    8000564e:	e204                	sd	s1,0(a2)
++      return fd;
++    80005650:	b7f5                	j	8000563c <fdalloc+0x2c>
++
++0000000080005652 <create>:
++  return -1;
++}
++
++static struct inode*
++create(char *path, short type, short major, short minor)
++{
++    80005652:	715d                	addi	sp,sp,-80
++    80005654:	e486                	sd	ra,72(sp)
++    80005656:	e0a2                	sd	s0,64(sp)
++    80005658:	fc26                	sd	s1,56(sp)
++    8000565a:	f84a                	sd	s2,48(sp)
++    8000565c:	f44e                	sd	s3,40(sp)
++    8000565e:	f052                	sd	s4,32(sp)
++    80005660:	ec56                	sd	s5,24(sp)
++    80005662:	0880                	addi	s0,sp,80
++    80005664:	89ae                	mv	s3,a1
++    80005666:	8ab2                	mv	s5,a2
++    80005668:	8a36                	mv	s4,a3
++  struct inode *ip, *dp;
++  char name[DIRSIZ];
++
++  if((dp = nameiparent(path, name)) == 0)
++    8000566a:	fb040593          	addi	a1,s0,-80
++    8000566e:	fffff097          	auipc	ra,0xfffff
++    80005672:	e74080e7          	jalr	-396(ra) # 800044e2 <nameiparent>
++    80005676:	892a                	mv	s2,a0
++    80005678:	12050e63          	beqz	a0,800057b4 <create+0x162>
++    return 0;
++
++  ilock(dp);
++    8000567c:	ffffe097          	auipc	ra,0xffffe
++    80005680:	68c080e7          	jalr	1676(ra) # 80003d08 <ilock>
++
++  if((ip = dirlookup(dp, name, 0)) != 0){
++    80005684:	4601                	li	a2,0
++    80005686:	fb040593          	addi	a1,s0,-80
++    8000568a:	854a                	mv	a0,s2
++    8000568c:	fffff097          	auipc	ra,0xfffff
++    80005690:	b60080e7          	jalr	-1184(ra) # 800041ec <dirlookup>
++    80005694:	84aa                	mv	s1,a0
++    80005696:	c921                	beqz	a0,800056e6 <create+0x94>
++    iunlockput(dp);
++    80005698:	854a                	mv	a0,s2
++    8000569a:	fffff097          	auipc	ra,0xfffff
++    8000569e:	8d0080e7          	jalr	-1840(ra) # 80003f6a <iunlockput>
++    ilock(ip);
++    800056a2:	8526                	mv	a0,s1
++    800056a4:	ffffe097          	auipc	ra,0xffffe
++    800056a8:	664080e7          	jalr	1636(ra) # 80003d08 <ilock>
++    if(type == T_FILE && (ip->type == T_FILE || ip->type == T_DEVICE))
++    800056ac:	2981                	sext.w	s3,s3
++    800056ae:	4789                	li	a5,2
++    800056b0:	02f99463          	bne	s3,a5,800056d8 <create+0x86>
++    800056b4:	0444d783          	lhu	a5,68(s1)
++    800056b8:	37f9                	addiw	a5,a5,-2
++    800056ba:	17c2                	slli	a5,a5,0x30
++    800056bc:	93c1                	srli	a5,a5,0x30
++    800056be:	4705                	li	a4,1
++    800056c0:	00f76c63          	bltu	a4,a5,800056d8 <create+0x86>
++    panic("create: dirlink");
++
++  iunlockput(dp);
++
++  return ip;
++}
++    800056c4:	8526                	mv	a0,s1
++    800056c6:	60a6                	ld	ra,72(sp)
++    800056c8:	6406                	ld	s0,64(sp)
++    800056ca:	74e2                	ld	s1,56(sp)
++    800056cc:	7942                	ld	s2,48(sp)
++    800056ce:	79a2                	ld	s3,40(sp)
++    800056d0:	7a02                	ld	s4,32(sp)
++    800056d2:	6ae2                	ld	s5,24(sp)
++    800056d4:	6161                	addi	sp,sp,80
++    800056d6:	8082                	ret
++    iunlockput(ip);
++    800056d8:	8526                	mv	a0,s1
++    800056da:	fffff097          	auipc	ra,0xfffff
++    800056de:	890080e7          	jalr	-1904(ra) # 80003f6a <iunlockput>
++    return 0;
++    800056e2:	4481                	li	s1,0
++    800056e4:	b7c5                	j	800056c4 <create+0x72>
++  if((ip = ialloc(dp->dev, type)) == 0)
++    800056e6:	85ce                	mv	a1,s3
++    800056e8:	00092503          	lw	a0,0(s2)
++    800056ec:	ffffe097          	auipc	ra,0xffffe
++    800056f0:	482080e7          	jalr	1154(ra) # 80003b6e <ialloc>
++    800056f4:	84aa                	mv	s1,a0
++    800056f6:	c521                	beqz	a0,8000573e <create+0xec>
++  ilock(ip);
++    800056f8:	ffffe097          	auipc	ra,0xffffe
++    800056fc:	610080e7          	jalr	1552(ra) # 80003d08 <ilock>
++  ip->major = major;
++    80005700:	05549323          	sh	s5,70(s1)
++  ip->minor = minor;
++    80005704:	05449423          	sh	s4,72(s1)
++  ip->nlink = 1;
++    80005708:	4a05                	li	s4,1
++    8000570a:	05449523          	sh	s4,74(s1)
++  iupdate(ip);
++    8000570e:	8526                	mv	a0,s1
++    80005710:	ffffe097          	auipc	ra,0xffffe
++    80005714:	52c080e7          	jalr	1324(ra) # 80003c3c <iupdate>
++  if(type == T_DIR){  // Create . and .. entries.
++    80005718:	2981                	sext.w	s3,s3
++    8000571a:	03498a63          	beq	s3,s4,8000574e <create+0xfc>
++  if(dirlink(dp, name, ip->inum) < 0)
++    8000571e:	40d0                	lw	a2,4(s1)
++    80005720:	fb040593          	addi	a1,s0,-80
++    80005724:	854a                	mv	a0,s2
++    80005726:	fffff097          	auipc	ra,0xfffff
++    8000572a:	cdc080e7          	jalr	-804(ra) # 80004402 <dirlink>
++    8000572e:	06054b63          	bltz	a0,800057a4 <create+0x152>
++  iunlockput(dp);
++    80005732:	854a                	mv	a0,s2
++    80005734:	fffff097          	auipc	ra,0xfffff
++    80005738:	836080e7          	jalr	-1994(ra) # 80003f6a <iunlockput>
++  return ip;
++    8000573c:	b761                	j	800056c4 <create+0x72>
++    panic("create: ialloc");
++    8000573e:	00003517          	auipc	a0,0x3
++    80005742:	01a50513          	addi	a0,a0,26 # 80008758 <syscalls+0x2d0>
++    80005746:	ffffb097          	auipc	ra,0xffffb
++    8000574a:	df4080e7          	jalr	-524(ra) # 8000053a <panic>
++    dp->nlink++;  // for ".."
++    8000574e:	04a95783          	lhu	a5,74(s2)
++    80005752:	2785                	addiw	a5,a5,1
++    80005754:	04f91523          	sh	a5,74(s2)
++    iupdate(dp);
++    80005758:	854a                	mv	a0,s2
++    8000575a:	ffffe097          	auipc	ra,0xffffe
++    8000575e:	4e2080e7          	jalr	1250(ra) # 80003c3c <iupdate>
++    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
++    80005762:	40d0                	lw	a2,4(s1)
++    80005764:	00003597          	auipc	a1,0x3
++    80005768:	00458593          	addi	a1,a1,4 # 80008768 <syscalls+0x2e0>
++    8000576c:	8526                	mv	a0,s1
++    8000576e:	fffff097          	auipc	ra,0xfffff
++    80005772:	c94080e7          	jalr	-876(ra) # 80004402 <dirlink>
++    80005776:	00054f63          	bltz	a0,80005794 <create+0x142>
++    8000577a:	00492603          	lw	a2,4(s2)
++    8000577e:	00003597          	auipc	a1,0x3
++    80005782:	ff258593          	addi	a1,a1,-14 # 80008770 <syscalls+0x2e8>
++    80005786:	8526                	mv	a0,s1
++    80005788:	fffff097          	auipc	ra,0xfffff
++    8000578c:	c7a080e7          	jalr	-902(ra) # 80004402 <dirlink>
++    80005790:	f80557e3          	bgez	a0,8000571e <create+0xcc>
++      panic("create dots");
++    80005794:	00003517          	auipc	a0,0x3
++    80005798:	fe450513          	addi	a0,a0,-28 # 80008778 <syscalls+0x2f0>
++    8000579c:	ffffb097          	auipc	ra,0xffffb
++    800057a0:	d9e080e7          	jalr	-610(ra) # 8000053a <panic>
++    panic("create: dirlink");
++    800057a4:	00003517          	auipc	a0,0x3
++    800057a8:	fe450513          	addi	a0,a0,-28 # 80008788 <syscalls+0x300>
++    800057ac:	ffffb097          	auipc	ra,0xffffb
++    800057b0:	d8e080e7          	jalr	-626(ra) # 8000053a <panic>
++    return 0;
++    800057b4:	84aa                	mv	s1,a0
++    800057b6:	b739                	j	800056c4 <create+0x72>
++
++00000000800057b8 <sys_dup>:
++{
++    800057b8:	7179                	addi	sp,sp,-48
++    800057ba:	f406                	sd	ra,40(sp)
++    800057bc:	f022                	sd	s0,32(sp)
++    800057be:	ec26                	sd	s1,24(sp)
++    800057c0:	e84a                	sd	s2,16(sp)
++    800057c2:	1800                	addi	s0,sp,48
++  if(argfd(0, 0, &f) < 0)
++    800057c4:	fd840613          	addi	a2,s0,-40
++    800057c8:	4581                	li	a1,0
++    800057ca:	4501                	li	a0,0
++    800057cc:	00000097          	auipc	ra,0x0
++    800057d0:	ddc080e7          	jalr	-548(ra) # 800055a8 <argfd>
++    return -1;
++    800057d4:	57fd                	li	a5,-1
++  if(argfd(0, 0, &f) < 0)
++    800057d6:	02054363          	bltz	a0,800057fc <sys_dup+0x44>
++  if((fd=fdalloc(f)) < 0)
++    800057da:	fd843903          	ld	s2,-40(s0)
++    800057de:	854a                	mv	a0,s2
++    800057e0:	00000097          	auipc	ra,0x0
++    800057e4:	e30080e7          	jalr	-464(ra) # 80005610 <fdalloc>
++    800057e8:	84aa                	mv	s1,a0
++    return -1;
++    800057ea:	57fd                	li	a5,-1
++  if((fd=fdalloc(f)) < 0)
++    800057ec:	00054863          	bltz	a0,800057fc <sys_dup+0x44>
++  filedup(f);
++    800057f0:	854a                	mv	a0,s2
++    800057f2:	fffff097          	auipc	ra,0xfffff
++    800057f6:	368080e7          	jalr	872(ra) # 80004b5a <filedup>
++  return fd;
++    800057fa:	87a6                	mv	a5,s1
++}
++    800057fc:	853e                	mv	a0,a5
++    800057fe:	70a2                	ld	ra,40(sp)
++    80005800:	7402                	ld	s0,32(sp)
++    80005802:	64e2                	ld	s1,24(sp)
++    80005804:	6942                	ld	s2,16(sp)
++    80005806:	6145                	addi	sp,sp,48
++    80005808:	8082                	ret
++
++000000008000580a <sys_read>:
++{
++    8000580a:	7179                	addi	sp,sp,-48
++    8000580c:	f406                	sd	ra,40(sp)
++    8000580e:	f022                	sd	s0,32(sp)
++    80005810:	1800                	addi	s0,sp,48
++  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
++    80005812:	fe840613          	addi	a2,s0,-24
++    80005816:	4581                	li	a1,0
++    80005818:	4501                	li	a0,0
++    8000581a:	00000097          	auipc	ra,0x0
++    8000581e:	d8e080e7          	jalr	-626(ra) # 800055a8 <argfd>
++    return -1;
++    80005822:	57fd                	li	a5,-1
++  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
++    80005824:	04054163          	bltz	a0,80005866 <sys_read+0x5c>
++    80005828:	fe440593          	addi	a1,s0,-28
++    8000582c:	4509                	li	a0,2
++    8000582e:	ffffe097          	auipc	ra,0xffffe
++    80005832:	824080e7          	jalr	-2012(ra) # 80003052 <argint>
++    return -1;
++    80005836:	57fd                	li	a5,-1
++  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
++    80005838:	02054763          	bltz	a0,80005866 <sys_read+0x5c>
++    8000583c:	fd840593          	addi	a1,s0,-40
++    80005840:	4505                	li	a0,1
++    80005842:	ffffe097          	auipc	ra,0xffffe
++    80005846:	832080e7          	jalr	-1998(ra) # 80003074 <argaddr>
++    return -1;
++    8000584a:	57fd                	li	a5,-1
++  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
++    8000584c:	00054d63          	bltz	a0,80005866 <sys_read+0x5c>
++  return fileread(f, p, n);
++    80005850:	fe442603          	lw	a2,-28(s0)
++    80005854:	fd843583          	ld	a1,-40(s0)
++    80005858:	fe843503          	ld	a0,-24(s0)
++    8000585c:	fffff097          	auipc	ra,0xfffff
++    80005860:	48a080e7          	jalr	1162(ra) # 80004ce6 <fileread>
++    80005864:	87aa                	mv	a5,a0
++}
++    80005866:	853e                	mv	a0,a5
++    80005868:	70a2                	ld	ra,40(sp)
++    8000586a:	7402                	ld	s0,32(sp)
++    8000586c:	6145                	addi	sp,sp,48
++    8000586e:	8082                	ret
++
++0000000080005870 <sys_write>:
++{
++    80005870:	7179                	addi	sp,sp,-48
++    80005872:	f406                	sd	ra,40(sp)
++    80005874:	f022                	sd	s0,32(sp)
++    80005876:	1800                	addi	s0,sp,48
++  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
++    80005878:	fe840613          	addi	a2,s0,-24
++    8000587c:	4581                	li	a1,0
++    8000587e:	4501                	li	a0,0
++    80005880:	00000097          	auipc	ra,0x0
++    80005884:	d28080e7          	jalr	-728(ra) # 800055a8 <argfd>
++    return -1;
++    80005888:	57fd                	li	a5,-1
++  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
++    8000588a:	04054163          	bltz	a0,800058cc <sys_write+0x5c>
++    8000588e:	fe440593          	addi	a1,s0,-28
++    80005892:	4509                	li	a0,2
++    80005894:	ffffd097          	auipc	ra,0xffffd
++    80005898:	7be080e7          	jalr	1982(ra) # 80003052 <argint>
++    return -1;
++    8000589c:	57fd                	li	a5,-1
++  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
++    8000589e:	02054763          	bltz	a0,800058cc <sys_write+0x5c>
++    800058a2:	fd840593          	addi	a1,s0,-40
++    800058a6:	4505                	li	a0,1
++    800058a8:	ffffd097          	auipc	ra,0xffffd
++    800058ac:	7cc080e7          	jalr	1996(ra) # 80003074 <argaddr>
++    return -1;
++    800058b0:	57fd                	li	a5,-1
++  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
++    800058b2:	00054d63          	bltz	a0,800058cc <sys_write+0x5c>
++  return filewrite(f, p, n);
++    800058b6:	fe442603          	lw	a2,-28(s0)
++    800058ba:	fd843583          	ld	a1,-40(s0)
++    800058be:	fe843503          	ld	a0,-24(s0)
++    800058c2:	fffff097          	auipc	ra,0xfffff
++    800058c6:	4e6080e7          	jalr	1254(ra) # 80004da8 <filewrite>
++    800058ca:	87aa                	mv	a5,a0
++}
++    800058cc:	853e                	mv	a0,a5
++    800058ce:	70a2                	ld	ra,40(sp)
++    800058d0:	7402                	ld	s0,32(sp)
++    800058d2:	6145                	addi	sp,sp,48
++    800058d4:	8082                	ret
++
++00000000800058d6 <sys_close>:
++{
++    800058d6:	1101                	addi	sp,sp,-32
++    800058d8:	ec06                	sd	ra,24(sp)
++    800058da:	e822                	sd	s0,16(sp)
++    800058dc:	1000                	addi	s0,sp,32
++  if(argfd(0, &fd, &f) < 0)
++    800058de:	fe040613          	addi	a2,s0,-32
++    800058e2:	fec40593          	addi	a1,s0,-20
++    800058e6:	4501                	li	a0,0
++    800058e8:	00000097          	auipc	ra,0x0
++    800058ec:	cc0080e7          	jalr	-832(ra) # 800055a8 <argfd>
++    return -1;
++    800058f0:	57fd                	li	a5,-1
++  if(argfd(0, &fd, &f) < 0)
++    800058f2:	02054463          	bltz	a0,8000591a <sys_close+0x44>
++  myproc()->ofile[fd] = 0;
++    800058f6:	ffffc097          	auipc	ra,0xffffc
++    800058fa:	480080e7          	jalr	1152(ra) # 80001d76 <myproc>
++    800058fe:	fec42783          	lw	a5,-20(s0)
++    80005902:	07e9                	addi	a5,a5,26
++    80005904:	078e                	slli	a5,a5,0x3
++    80005906:	953e                	add	a0,a0,a5
++    80005908:	00053023          	sd	zero,0(a0)
++  fileclose(f);
++    8000590c:	fe043503          	ld	a0,-32(s0)
++    80005910:	fffff097          	auipc	ra,0xfffff
++    80005914:	29c080e7          	jalr	668(ra) # 80004bac <fileclose>
++  return 0;
++    80005918:	4781                	li	a5,0
++}
++    8000591a:	853e                	mv	a0,a5
++    8000591c:	60e2                	ld	ra,24(sp)
++    8000591e:	6442                	ld	s0,16(sp)
++    80005920:	6105                	addi	sp,sp,32
++    80005922:	8082                	ret
++
++0000000080005924 <sys_fstat>:
++{
++    80005924:	1101                	addi	sp,sp,-32
++    80005926:	ec06                	sd	ra,24(sp)
++    80005928:	e822                	sd	s0,16(sp)
++    8000592a:	1000                	addi	s0,sp,32
++  if(argfd(0, 0, &f) < 0 || argaddr(1, &st) < 0)
++    8000592c:	fe840613          	addi	a2,s0,-24
++    80005930:	4581                	li	a1,0
++    80005932:	4501                	li	a0,0
++    80005934:	00000097          	auipc	ra,0x0
++    80005938:	c74080e7          	jalr	-908(ra) # 800055a8 <argfd>
++    return -1;
++    8000593c:	57fd                	li	a5,-1
++  if(argfd(0, 0, &f) < 0 || argaddr(1, &st) < 0)
++    8000593e:	02054563          	bltz	a0,80005968 <sys_fstat+0x44>
++    80005942:	fe040593          	addi	a1,s0,-32
++    80005946:	4505                	li	a0,1
++    80005948:	ffffd097          	auipc	ra,0xffffd
++    8000594c:	72c080e7          	jalr	1836(ra) # 80003074 <argaddr>
++    return -1;
++    80005950:	57fd                	li	a5,-1
++  if(argfd(0, 0, &f) < 0 || argaddr(1, &st) < 0)
++    80005952:	00054b63          	bltz	a0,80005968 <sys_fstat+0x44>
++  return filestat(f, st);
++    80005956:	fe043583          	ld	a1,-32(s0)
++    8000595a:	fe843503          	ld	a0,-24(s0)
++    8000595e:	fffff097          	auipc	ra,0xfffff
++    80005962:	316080e7          	jalr	790(ra) # 80004c74 <filestat>
++    80005966:	87aa                	mv	a5,a0
++}
++    80005968:	853e                	mv	a0,a5
++    8000596a:	60e2                	ld	ra,24(sp)
++    8000596c:	6442                	ld	s0,16(sp)
++    8000596e:	6105                	addi	sp,sp,32
++    80005970:	8082                	ret
++
++0000000080005972 <sys_link>:
++{
++    80005972:	7169                	addi	sp,sp,-304
++    80005974:	f606                	sd	ra,296(sp)
++    80005976:	f222                	sd	s0,288(sp)
++    80005978:	ee26                	sd	s1,280(sp)
++    8000597a:	ea4a                	sd	s2,272(sp)
++    8000597c:	1a00                	addi	s0,sp,304
++  if(argstr(0, old, MAXPATH) < 0 || argstr(1, new, MAXPATH) < 0)
++    8000597e:	08000613          	li	a2,128
++    80005982:	ed040593          	addi	a1,s0,-304
++    80005986:	4501                	li	a0,0
++    80005988:	ffffd097          	auipc	ra,0xffffd
++    8000598c:	70e080e7          	jalr	1806(ra) # 80003096 <argstr>
++    return -1;
++    80005990:	57fd                	li	a5,-1
++  if(argstr(0, old, MAXPATH) < 0 || argstr(1, new, MAXPATH) < 0)
++    80005992:	10054e63          	bltz	a0,80005aae <sys_link+0x13c>
++    80005996:	08000613          	li	a2,128
++    8000599a:	f5040593          	addi	a1,s0,-176
++    8000599e:	4505                	li	a0,1
++    800059a0:	ffffd097          	auipc	ra,0xffffd
++    800059a4:	6f6080e7          	jalr	1782(ra) # 80003096 <argstr>
++    return -1;
++    800059a8:	57fd                	li	a5,-1
++  if(argstr(0, old, MAXPATH) < 0 || argstr(1, new, MAXPATH) < 0)
++    800059aa:	10054263          	bltz	a0,80005aae <sys_link+0x13c>
++  begin_op();
++    800059ae:	fffff097          	auipc	ra,0xfffff
++    800059b2:	d36080e7          	jalr	-714(ra) # 800046e4 <begin_op>
++  if((ip = namei(old)) == 0){
++    800059b6:	ed040513          	addi	a0,s0,-304
++    800059ba:	fffff097          	auipc	ra,0xfffff
++    800059be:	b0a080e7          	jalr	-1270(ra) # 800044c4 <namei>
++    800059c2:	84aa                	mv	s1,a0
++    800059c4:	c551                	beqz	a0,80005a50 <sys_link+0xde>
++  ilock(ip);
++    800059c6:	ffffe097          	auipc	ra,0xffffe
++    800059ca:	342080e7          	jalr	834(ra) # 80003d08 <ilock>
++  if(ip->type == T_DIR){
++    800059ce:	04449703          	lh	a4,68(s1)
++    800059d2:	4785                	li	a5,1
++    800059d4:	08f70463          	beq	a4,a5,80005a5c <sys_link+0xea>
++  ip->nlink++;
++    800059d8:	04a4d783          	lhu	a5,74(s1)
++    800059dc:	2785                	addiw	a5,a5,1
++    800059de:	04f49523          	sh	a5,74(s1)
++  iupdate(ip);
++    800059e2:	8526                	mv	a0,s1
++    800059e4:	ffffe097          	auipc	ra,0xffffe
++    800059e8:	258080e7          	jalr	600(ra) # 80003c3c <iupdate>
++  iunlock(ip);
++    800059ec:	8526                	mv	a0,s1
++    800059ee:	ffffe097          	auipc	ra,0xffffe
++    800059f2:	3dc080e7          	jalr	988(ra) # 80003dca <iunlock>
++  if((dp = nameiparent(new, name)) == 0)
++    800059f6:	fd040593          	addi	a1,s0,-48
++    800059fa:	f5040513          	addi	a0,s0,-176
++    800059fe:	fffff097          	auipc	ra,0xfffff
++    80005a02:	ae4080e7          	jalr	-1308(ra) # 800044e2 <nameiparent>
++    80005a06:	892a                	mv	s2,a0
++    80005a08:	c935                	beqz	a0,80005a7c <sys_link+0x10a>
++  ilock(dp);
++    80005a0a:	ffffe097          	auipc	ra,0xffffe
++    80005a0e:	2fe080e7          	jalr	766(ra) # 80003d08 <ilock>
++  if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
++    80005a12:	00092703          	lw	a4,0(s2)
++    80005a16:	409c                	lw	a5,0(s1)
++    80005a18:	04f71d63          	bne	a4,a5,80005a72 <sys_link+0x100>
++    80005a1c:	40d0                	lw	a2,4(s1)
++    80005a1e:	fd040593          	addi	a1,s0,-48
++    80005a22:	854a                	mv	a0,s2
++    80005a24:	fffff097          	auipc	ra,0xfffff
++    80005a28:	9de080e7          	jalr	-1570(ra) # 80004402 <dirlink>
++    80005a2c:	04054363          	bltz	a0,80005a72 <sys_link+0x100>
++  iunlockput(dp);
++    80005a30:	854a                	mv	a0,s2
++    80005a32:	ffffe097          	auipc	ra,0xffffe
++    80005a36:	538080e7          	jalr	1336(ra) # 80003f6a <iunlockput>
++  iput(ip);
++    80005a3a:	8526                	mv	a0,s1
++    80005a3c:	ffffe097          	auipc	ra,0xffffe
++    80005a40:	486080e7          	jalr	1158(ra) # 80003ec2 <iput>
++  end_op();
++    80005a44:	fffff097          	auipc	ra,0xfffff
++    80005a48:	d1e080e7          	jalr	-738(ra) # 80004762 <end_op>
++  return 0;
++    80005a4c:	4781                	li	a5,0
++    80005a4e:	a085                	j	80005aae <sys_link+0x13c>
++    end_op();
++    80005a50:	fffff097          	auipc	ra,0xfffff
++    80005a54:	d12080e7          	jalr	-750(ra) # 80004762 <end_op>
++    return -1;
++    80005a58:	57fd                	li	a5,-1
++    80005a5a:	a891                	j	80005aae <sys_link+0x13c>
++    iunlockput(ip);
++    80005a5c:	8526                	mv	a0,s1
++    80005a5e:	ffffe097          	auipc	ra,0xffffe
++    80005a62:	50c080e7          	jalr	1292(ra) # 80003f6a <iunlockput>
++    end_op();
++    80005a66:	fffff097          	auipc	ra,0xfffff
++    80005a6a:	cfc080e7          	jalr	-772(ra) # 80004762 <end_op>
++    return -1;
++    80005a6e:	57fd                	li	a5,-1
++    80005a70:	a83d                	j	80005aae <sys_link+0x13c>
++    iunlockput(dp);
++    80005a72:	854a                	mv	a0,s2
++    80005a74:	ffffe097          	auipc	ra,0xffffe
++    80005a78:	4f6080e7          	jalr	1270(ra) # 80003f6a <iunlockput>
++  ilock(ip);
++    80005a7c:	8526                	mv	a0,s1
++    80005a7e:	ffffe097          	auipc	ra,0xffffe
++    80005a82:	28a080e7          	jalr	650(ra) # 80003d08 <ilock>
++  ip->nlink--;
++    80005a86:	04a4d783          	lhu	a5,74(s1)
++    80005a8a:	37fd                	addiw	a5,a5,-1
++    80005a8c:	04f49523          	sh	a5,74(s1)
++  iupdate(ip);
++    80005a90:	8526                	mv	a0,s1
++    80005a92:	ffffe097          	auipc	ra,0xffffe
++    80005a96:	1aa080e7          	jalr	426(ra) # 80003c3c <iupdate>
++  iunlockput(ip);
++    80005a9a:	8526                	mv	a0,s1
++    80005a9c:	ffffe097          	auipc	ra,0xffffe
++    80005aa0:	4ce080e7          	jalr	1230(ra) # 80003f6a <iunlockput>
++  end_op();
++    80005aa4:	fffff097          	auipc	ra,0xfffff
++    80005aa8:	cbe080e7          	jalr	-834(ra) # 80004762 <end_op>
++  return -1;
++    80005aac:	57fd                	li	a5,-1
++}
++    80005aae:	853e                	mv	a0,a5
++    80005ab0:	70b2                	ld	ra,296(sp)
++    80005ab2:	7412                	ld	s0,288(sp)
++    80005ab4:	64f2                	ld	s1,280(sp)
++    80005ab6:	6952                	ld	s2,272(sp)
++    80005ab8:	6155                	addi	sp,sp,304
++    80005aba:	8082                	ret
++
++0000000080005abc <sys_unlink>:
++{
++    80005abc:	7151                	addi	sp,sp,-240
++    80005abe:	f586                	sd	ra,232(sp)
++    80005ac0:	f1a2                	sd	s0,224(sp)
++    80005ac2:	eda6                	sd	s1,216(sp)
++    80005ac4:	e9ca                	sd	s2,208(sp)
++    80005ac6:	e5ce                	sd	s3,200(sp)
++    80005ac8:	1980                	addi	s0,sp,240
++  if(argstr(0, path, MAXPATH) < 0)
++    80005aca:	08000613          	li	a2,128
++    80005ace:	f3040593          	addi	a1,s0,-208
++    80005ad2:	4501                	li	a0,0
++    80005ad4:	ffffd097          	auipc	ra,0xffffd
++    80005ad8:	5c2080e7          	jalr	1474(ra) # 80003096 <argstr>
++    80005adc:	18054163          	bltz	a0,80005c5e <sys_unlink+0x1a2>
++  begin_op();
++    80005ae0:	fffff097          	auipc	ra,0xfffff
++    80005ae4:	c04080e7          	jalr	-1020(ra) # 800046e4 <begin_op>
++  if((dp = nameiparent(path, name)) == 0){
++    80005ae8:	fb040593          	addi	a1,s0,-80
++    80005aec:	f3040513          	addi	a0,s0,-208
++    80005af0:	fffff097          	auipc	ra,0xfffff
++    80005af4:	9f2080e7          	jalr	-1550(ra) # 800044e2 <nameiparent>
++    80005af8:	84aa                	mv	s1,a0
++    80005afa:	c979                	beqz	a0,80005bd0 <sys_unlink+0x114>
++  ilock(dp);
++    80005afc:	ffffe097          	auipc	ra,0xffffe
++    80005b00:	20c080e7          	jalr	524(ra) # 80003d08 <ilock>
++  if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
++    80005b04:	00003597          	auipc	a1,0x3
++    80005b08:	c6458593          	addi	a1,a1,-924 # 80008768 <syscalls+0x2e0>
++    80005b0c:	fb040513          	addi	a0,s0,-80
++    80005b10:	ffffe097          	auipc	ra,0xffffe
++    80005b14:	6c2080e7          	jalr	1730(ra) # 800041d2 <namecmp>
++    80005b18:	14050a63          	beqz	a0,80005c6c <sys_unlink+0x1b0>
++    80005b1c:	00003597          	auipc	a1,0x3
++    80005b20:	c5458593          	addi	a1,a1,-940 # 80008770 <syscalls+0x2e8>
++    80005b24:	fb040513          	addi	a0,s0,-80
++    80005b28:	ffffe097          	auipc	ra,0xffffe
++    80005b2c:	6aa080e7          	jalr	1706(ra) # 800041d2 <namecmp>
++    80005b30:	12050e63          	beqz	a0,80005c6c <sys_unlink+0x1b0>
++  if((ip = dirlookup(dp, name, &off)) == 0)
++    80005b34:	f2c40613          	addi	a2,s0,-212
++    80005b38:	fb040593          	addi	a1,s0,-80
++    80005b3c:	8526                	mv	a0,s1
++    80005b3e:	ffffe097          	auipc	ra,0xffffe
++    80005b42:	6ae080e7          	jalr	1710(ra) # 800041ec <dirlookup>
++    80005b46:	892a                	mv	s2,a0
++    80005b48:	12050263          	beqz	a0,80005c6c <sys_unlink+0x1b0>
++  ilock(ip);
++    80005b4c:	ffffe097          	auipc	ra,0xffffe
++    80005b50:	1bc080e7          	jalr	444(ra) # 80003d08 <ilock>
++  if(ip->nlink < 1)
++    80005b54:	04a91783          	lh	a5,74(s2)
++    80005b58:	08f05263          	blez	a5,80005bdc <sys_unlink+0x120>
++  if(ip->type == T_DIR && !isdirempty(ip)){
++    80005b5c:	04491703          	lh	a4,68(s2)
++    80005b60:	4785                	li	a5,1
++    80005b62:	08f70563          	beq	a4,a5,80005bec <sys_unlink+0x130>
++  memset(&de, 0, sizeof(de));
++    80005b66:	4641                	li	a2,16
++    80005b68:	4581                	li	a1,0
++    80005b6a:	fc040513          	addi	a0,s0,-64
++    80005b6e:	ffffb097          	auipc	ra,0xffffb
++    80005b72:	15e080e7          	jalr	350(ra) # 80000ccc <memset>
++  if(writei(dp, 0, (uint64)&de, off, sizeof(de)) != sizeof(de))
++    80005b76:	4741                	li	a4,16
++    80005b78:	f2c42683          	lw	a3,-212(s0)
++    80005b7c:	fc040613          	addi	a2,s0,-64
++    80005b80:	4581                	li	a1,0
++    80005b82:	8526                	mv	a0,s1
++    80005b84:	ffffe097          	auipc	ra,0xffffe
++    80005b88:	530080e7          	jalr	1328(ra) # 800040b4 <writei>
++    80005b8c:	47c1                	li	a5,16
++    80005b8e:	0af51563          	bne	a0,a5,80005c38 <sys_unlink+0x17c>
++  if(ip->type == T_DIR){
++    80005b92:	04491703          	lh	a4,68(s2)
++    80005b96:	4785                	li	a5,1
++    80005b98:	0af70863          	beq	a4,a5,80005c48 <sys_unlink+0x18c>
++  iunlockput(dp);
++    80005b9c:	8526                	mv	a0,s1
++    80005b9e:	ffffe097          	auipc	ra,0xffffe
++    80005ba2:	3cc080e7          	jalr	972(ra) # 80003f6a <iunlockput>
++  ip->nlink--;
++    80005ba6:	04a95783          	lhu	a5,74(s2)
++    80005baa:	37fd                	addiw	a5,a5,-1
++    80005bac:	04f91523          	sh	a5,74(s2)
++  iupdate(ip);
++    80005bb0:	854a                	mv	a0,s2
++    80005bb2:	ffffe097          	auipc	ra,0xffffe
++    80005bb6:	08a080e7          	jalr	138(ra) # 80003c3c <iupdate>
++  iunlockput(ip);
++    80005bba:	854a                	mv	a0,s2
++    80005bbc:	ffffe097          	auipc	ra,0xffffe
++    80005bc0:	3ae080e7          	jalr	942(ra) # 80003f6a <iunlockput>
++  end_op();
++    80005bc4:	fffff097          	auipc	ra,0xfffff
++    80005bc8:	b9e080e7          	jalr	-1122(ra) # 80004762 <end_op>
++  return 0;
++    80005bcc:	4501                	li	a0,0
++    80005bce:	a84d                	j	80005c80 <sys_unlink+0x1c4>
++    end_op();
++    80005bd0:	fffff097          	auipc	ra,0xfffff
++    80005bd4:	b92080e7          	jalr	-1134(ra) # 80004762 <end_op>
++    return -1;
++    80005bd8:	557d                	li	a0,-1
++    80005bda:	a05d                	j	80005c80 <sys_unlink+0x1c4>
++    panic("unlink: nlink < 1");
++    80005bdc:	00003517          	auipc	a0,0x3
++    80005be0:	bbc50513          	addi	a0,a0,-1092 # 80008798 <syscalls+0x310>
++    80005be4:	ffffb097          	auipc	ra,0xffffb
++    80005be8:	956080e7          	jalr	-1706(ra) # 8000053a <panic>
++  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
++    80005bec:	04c92703          	lw	a4,76(s2)
++    80005bf0:	02000793          	li	a5,32
++    80005bf4:	f6e7f9e3          	bgeu	a5,a4,80005b66 <sys_unlink+0xaa>
++    80005bf8:	02000993          	li	s3,32
++    if(readi(dp, 0, (uint64)&de, off, sizeof(de)) != sizeof(de))
++    80005bfc:	4741                	li	a4,16
++    80005bfe:	86ce                	mv	a3,s3
++    80005c00:	f1840613          	addi	a2,s0,-232
++    80005c04:	4581                	li	a1,0
++    80005c06:	854a                	mv	a0,s2
++    80005c08:	ffffe097          	auipc	ra,0xffffe
++    80005c0c:	3b4080e7          	jalr	948(ra) # 80003fbc <readi>
++    80005c10:	47c1                	li	a5,16
++    80005c12:	00f51b63          	bne	a0,a5,80005c28 <sys_unlink+0x16c>
++    if(de.inum != 0)
++    80005c16:	f1845783          	lhu	a5,-232(s0)
++    80005c1a:	e7a1                	bnez	a5,80005c62 <sys_unlink+0x1a6>
++  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
++    80005c1c:	29c1                	addiw	s3,s3,16
++    80005c1e:	04c92783          	lw	a5,76(s2)
++    80005c22:	fcf9ede3          	bltu	s3,a5,80005bfc <sys_unlink+0x140>
++    80005c26:	b781                	j	80005b66 <sys_unlink+0xaa>
++      panic("isdirempty: readi");
++    80005c28:	00003517          	auipc	a0,0x3
++    80005c2c:	b8850513          	addi	a0,a0,-1144 # 800087b0 <syscalls+0x328>
++    80005c30:	ffffb097          	auipc	ra,0xffffb
++    80005c34:	90a080e7          	jalr	-1782(ra) # 8000053a <panic>
++    panic("unlink: writei");
++    80005c38:	00003517          	auipc	a0,0x3
++    80005c3c:	b9050513          	addi	a0,a0,-1136 # 800087c8 <syscalls+0x340>
++    80005c40:	ffffb097          	auipc	ra,0xffffb
++    80005c44:	8fa080e7          	jalr	-1798(ra) # 8000053a <panic>
++    dp->nlink--;
++    80005c48:	04a4d783          	lhu	a5,74(s1)
++    80005c4c:	37fd                	addiw	a5,a5,-1
++    80005c4e:	04f49523          	sh	a5,74(s1)
++    iupdate(dp);
++    80005c52:	8526                	mv	a0,s1
++    80005c54:	ffffe097          	auipc	ra,0xffffe
++    80005c58:	fe8080e7          	jalr	-24(ra) # 80003c3c <iupdate>
++    80005c5c:	b781                	j	80005b9c <sys_unlink+0xe0>
++    return -1;
++    80005c5e:	557d                	li	a0,-1
++    80005c60:	a005                	j	80005c80 <sys_unlink+0x1c4>
++    iunlockput(ip);
++    80005c62:	854a                	mv	a0,s2
++    80005c64:	ffffe097          	auipc	ra,0xffffe
++    80005c68:	306080e7          	jalr	774(ra) # 80003f6a <iunlockput>
++  iunlockput(dp);
++    80005c6c:	8526                	mv	a0,s1
++    80005c6e:	ffffe097          	auipc	ra,0xffffe
++    80005c72:	2fc080e7          	jalr	764(ra) # 80003f6a <iunlockput>
++  end_op();
++    80005c76:	fffff097          	auipc	ra,0xfffff
++    80005c7a:	aec080e7          	jalr	-1300(ra) # 80004762 <end_op>
++  return -1;
++    80005c7e:	557d                	li	a0,-1
++}
++    80005c80:	70ae                	ld	ra,232(sp)
++    80005c82:	740e                	ld	s0,224(sp)
++    80005c84:	64ee                	ld	s1,216(sp)
++    80005c86:	694e                	ld	s2,208(sp)
++    80005c88:	69ae                	ld	s3,200(sp)
++    80005c8a:	616d                	addi	sp,sp,240
++    80005c8c:	8082                	ret
++
++0000000080005c8e <sys_open>:
++
++uint64
++sys_open(void)
++{
++    80005c8e:	7131                	addi	sp,sp,-192
++    80005c90:	fd06                	sd	ra,184(sp)
++    80005c92:	f922                	sd	s0,176(sp)
++    80005c94:	f526                	sd	s1,168(sp)
++    80005c96:	f14a                	sd	s2,160(sp)
++    80005c98:	ed4e                	sd	s3,152(sp)
++    80005c9a:	0180                	addi	s0,sp,192
++  int fd, omode;
++  struct file *f;
++  struct inode *ip;
++  int n;
++
++  if((n = argstr(0, path, MAXPATH)) < 0 || argint(1, &omode) < 0)
++    80005c9c:	08000613          	li	a2,128
++    80005ca0:	f5040593          	addi	a1,s0,-176
++    80005ca4:	4501                	li	a0,0
++    80005ca6:	ffffd097          	auipc	ra,0xffffd
++    80005caa:	3f0080e7          	jalr	1008(ra) # 80003096 <argstr>
++    return -1;
++    80005cae:	54fd                	li	s1,-1
++  if((n = argstr(0, path, MAXPATH)) < 0 || argint(1, &omode) < 0)
++    80005cb0:	0c054163          	bltz	a0,80005d72 <sys_open+0xe4>
++    80005cb4:	f4c40593          	addi	a1,s0,-180
++    80005cb8:	4505                	li	a0,1
++    80005cba:	ffffd097          	auipc	ra,0xffffd
++    80005cbe:	398080e7          	jalr	920(ra) # 80003052 <argint>
++    80005cc2:	0a054863          	bltz	a0,80005d72 <sys_open+0xe4>
++
++  begin_op();
++    80005cc6:	fffff097          	auipc	ra,0xfffff
++    80005cca:	a1e080e7          	jalr	-1506(ra) # 800046e4 <begin_op>
++
++  if(omode & O_CREATE){
++    80005cce:	f4c42783          	lw	a5,-180(s0)
++    80005cd2:	2007f793          	andi	a5,a5,512
++    80005cd6:	cbdd                	beqz	a5,80005d8c <sys_open+0xfe>
++    ip = create(path, T_FILE, 0, 0);
++    80005cd8:	4681                	li	a3,0
++    80005cda:	4601                	li	a2,0
++    80005cdc:	4589                	li	a1,2
++    80005cde:	f5040513          	addi	a0,s0,-176
++    80005ce2:	00000097          	auipc	ra,0x0
++    80005ce6:	970080e7          	jalr	-1680(ra) # 80005652 <create>
++    80005cea:	892a                	mv	s2,a0
++    if(ip == 0){
++    80005cec:	c959                	beqz	a0,80005d82 <sys_open+0xf4>
++      end_op();
++      return -1;
++    }
++  }
++
++  if(ip->type == T_DEVICE && (ip->major < 0 || ip->major >= NDEV)){
++    80005cee:	04491703          	lh	a4,68(s2)
++    80005cf2:	478d                	li	a5,3
++    80005cf4:	00f71763          	bne	a4,a5,80005d02 <sys_open+0x74>
++    80005cf8:	04695703          	lhu	a4,70(s2)
++    80005cfc:	47a5                	li	a5,9
++    80005cfe:	0ce7ec63          	bltu	a5,a4,80005dd6 <sys_open+0x148>
++    iunlockput(ip);
++    end_op();
++    return -1;
++  }
++
++  if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
++    80005d02:	fffff097          	auipc	ra,0xfffff
++    80005d06:	dee080e7          	jalr	-530(ra) # 80004af0 <filealloc>
++    80005d0a:	89aa                	mv	s3,a0
++    80005d0c:	10050263          	beqz	a0,80005e10 <sys_open+0x182>
++    80005d10:	00000097          	auipc	ra,0x0
++    80005d14:	900080e7          	jalr	-1792(ra) # 80005610 <fdalloc>
++    80005d18:	84aa                	mv	s1,a0
++    80005d1a:	0e054663          	bltz	a0,80005e06 <sys_open+0x178>
++    iunlockput(ip);
++    end_op();
++    return -1;
++  }
++
++  if(ip->type == T_DEVICE){
++    80005d1e:	04491703          	lh	a4,68(s2)
++    80005d22:	478d                	li	a5,3
++    80005d24:	0cf70463          	beq	a4,a5,80005dec <sys_open+0x15e>
++    f->type = FD_DEVICE;
++    f->major = ip->major;
++  } else {
++    f->type = FD_INODE;
++    80005d28:	4789                	li	a5,2
++    80005d2a:	00f9a023          	sw	a5,0(s3)
++    f->off = 0;
++    80005d2e:	0209a023          	sw	zero,32(s3)
++  }
++  f->ip = ip;
++    80005d32:	0129bc23          	sd	s2,24(s3)
++  f->readable = !(omode & O_WRONLY);
++    80005d36:	f4c42783          	lw	a5,-180(s0)
++    80005d3a:	0017c713          	xori	a4,a5,1
++    80005d3e:	8b05                	andi	a4,a4,1
++    80005d40:	00e98423          	sb	a4,8(s3)
++  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
++    80005d44:	0037f713          	andi	a4,a5,3
++    80005d48:	00e03733          	snez	a4,a4
++    80005d4c:	00e984a3          	sb	a4,9(s3)
++
++  if((omode & O_TRUNC) && ip->type == T_FILE){
++    80005d50:	4007f793          	andi	a5,a5,1024
++    80005d54:	c791                	beqz	a5,80005d60 <sys_open+0xd2>
++    80005d56:	04491703          	lh	a4,68(s2)
++    80005d5a:	4789                	li	a5,2
++    80005d5c:	08f70f63          	beq	a4,a5,80005dfa <sys_open+0x16c>
++    itrunc(ip);
++  }
++
++  iunlock(ip);
++    80005d60:	854a                	mv	a0,s2
++    80005d62:	ffffe097          	auipc	ra,0xffffe
++    80005d66:	068080e7          	jalr	104(ra) # 80003dca <iunlock>
++  end_op();
++    80005d6a:	fffff097          	auipc	ra,0xfffff
++    80005d6e:	9f8080e7          	jalr	-1544(ra) # 80004762 <end_op>
++
++  return fd;
++}
++    80005d72:	8526                	mv	a0,s1
++    80005d74:	70ea                	ld	ra,184(sp)
++    80005d76:	744a                	ld	s0,176(sp)
++    80005d78:	74aa                	ld	s1,168(sp)
++    80005d7a:	790a                	ld	s2,160(sp)
++    80005d7c:	69ea                	ld	s3,152(sp)
++    80005d7e:	6129                	addi	sp,sp,192
++    80005d80:	8082                	ret
++      end_op();
++    80005d82:	fffff097          	auipc	ra,0xfffff
++    80005d86:	9e0080e7          	jalr	-1568(ra) # 80004762 <end_op>
++      return -1;
++    80005d8a:	b7e5                	j	80005d72 <sys_open+0xe4>
++    if((ip = namei(path)) == 0){
++    80005d8c:	f5040513          	addi	a0,s0,-176
++    80005d90:	ffffe097          	auipc	ra,0xffffe
++    80005d94:	734080e7          	jalr	1844(ra) # 800044c4 <namei>
++    80005d98:	892a                	mv	s2,a0
++    80005d9a:	c905                	beqz	a0,80005dca <sys_open+0x13c>
++    ilock(ip);
++    80005d9c:	ffffe097          	auipc	ra,0xffffe
++    80005da0:	f6c080e7          	jalr	-148(ra) # 80003d08 <ilock>
++    if(ip->type == T_DIR && omode != O_RDONLY){
++    80005da4:	04491703          	lh	a4,68(s2)
++    80005da8:	4785                	li	a5,1
++    80005daa:	f4f712e3          	bne	a4,a5,80005cee <sys_open+0x60>
++    80005dae:	f4c42783          	lw	a5,-180(s0)
++    80005db2:	dba1                	beqz	a5,80005d02 <sys_open+0x74>
++      iunlockput(ip);
++    80005db4:	854a                	mv	a0,s2
++    80005db6:	ffffe097          	auipc	ra,0xffffe
++    80005dba:	1b4080e7          	jalr	436(ra) # 80003f6a <iunlockput>
++      end_op();
++    80005dbe:	fffff097          	auipc	ra,0xfffff
++    80005dc2:	9a4080e7          	jalr	-1628(ra) # 80004762 <end_op>
++      return -1;
++    80005dc6:	54fd                	li	s1,-1
++    80005dc8:	b76d                	j	80005d72 <sys_open+0xe4>
++      end_op();
++    80005dca:	fffff097          	auipc	ra,0xfffff
++    80005dce:	998080e7          	jalr	-1640(ra) # 80004762 <end_op>
++      return -1;
++    80005dd2:	54fd                	li	s1,-1
++    80005dd4:	bf79                	j	80005d72 <sys_open+0xe4>
++    iunlockput(ip);
++    80005dd6:	854a                	mv	a0,s2
++    80005dd8:	ffffe097          	auipc	ra,0xffffe
++    80005ddc:	192080e7          	jalr	402(ra) # 80003f6a <iunlockput>
++    end_op();
++    80005de0:	fffff097          	auipc	ra,0xfffff
++    80005de4:	982080e7          	jalr	-1662(ra) # 80004762 <end_op>
++    return -1;
++    80005de8:	54fd                	li	s1,-1
++    80005dea:	b761                	j	80005d72 <sys_open+0xe4>
++    f->type = FD_DEVICE;
++    80005dec:	00f9a023          	sw	a5,0(s3)
++    f->major = ip->major;
++    80005df0:	04691783          	lh	a5,70(s2)
++    80005df4:	02f99223          	sh	a5,36(s3)
++    80005df8:	bf2d                	j	80005d32 <sys_open+0xa4>
++    itrunc(ip);
++    80005dfa:	854a                	mv	a0,s2
++    80005dfc:	ffffe097          	auipc	ra,0xffffe
++    80005e00:	01a080e7          	jalr	26(ra) # 80003e16 <itrunc>
++    80005e04:	bfb1                	j	80005d60 <sys_open+0xd2>
++      fileclose(f);
++    80005e06:	854e                	mv	a0,s3
++    80005e08:	fffff097          	auipc	ra,0xfffff
++    80005e0c:	da4080e7          	jalr	-604(ra) # 80004bac <fileclose>
++    iunlockput(ip);
++    80005e10:	854a                	mv	a0,s2
++    80005e12:	ffffe097          	auipc	ra,0xffffe
++    80005e16:	158080e7          	jalr	344(ra) # 80003f6a <iunlockput>
++    end_op();
++    80005e1a:	fffff097          	auipc	ra,0xfffff
++    80005e1e:	948080e7          	jalr	-1720(ra) # 80004762 <end_op>
++    return -1;
++    80005e22:	54fd                	li	s1,-1
++    80005e24:	b7b9                	j	80005d72 <sys_open+0xe4>
++
++0000000080005e26 <sys_mkdir>:
++
++uint64
++sys_mkdir(void)
++{
++    80005e26:	7175                	addi	sp,sp,-144
++    80005e28:	e506                	sd	ra,136(sp)
++    80005e2a:	e122                	sd	s0,128(sp)
++    80005e2c:	0900                	addi	s0,sp,144
++  char path[MAXPATH];
++  struct inode *ip;
++
++  begin_op();
++    80005e2e:	fffff097          	auipc	ra,0xfffff
++    80005e32:	8b6080e7          	jalr	-1866(ra) # 800046e4 <begin_op>
++  if(argstr(0, path, MAXPATH) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
++    80005e36:	08000613          	li	a2,128
++    80005e3a:	f7040593          	addi	a1,s0,-144
++    80005e3e:	4501                	li	a0,0
++    80005e40:	ffffd097          	auipc	ra,0xffffd
++    80005e44:	256080e7          	jalr	598(ra) # 80003096 <argstr>
++    80005e48:	02054963          	bltz	a0,80005e7a <sys_mkdir+0x54>
++    80005e4c:	4681                	li	a3,0
++    80005e4e:	4601                	li	a2,0
++    80005e50:	4585                	li	a1,1
++    80005e52:	f7040513          	addi	a0,s0,-144
++    80005e56:	fffff097          	auipc	ra,0xfffff
++    80005e5a:	7fc080e7          	jalr	2044(ra) # 80005652 <create>
++    80005e5e:	cd11                	beqz	a0,80005e7a <sys_mkdir+0x54>
++    end_op();
++    return -1;
++  }
++  iunlockput(ip);
++    80005e60:	ffffe097          	auipc	ra,0xffffe
++    80005e64:	10a080e7          	jalr	266(ra) # 80003f6a <iunlockput>
++  end_op();
++    80005e68:	fffff097          	auipc	ra,0xfffff
++    80005e6c:	8fa080e7          	jalr	-1798(ra) # 80004762 <end_op>
++  return 0;
++    80005e70:	4501                	li	a0,0
++}
++    80005e72:	60aa                	ld	ra,136(sp)
++    80005e74:	640a                	ld	s0,128(sp)
++    80005e76:	6149                	addi	sp,sp,144
++    80005e78:	8082                	ret
++    end_op();
++    80005e7a:	fffff097          	auipc	ra,0xfffff
++    80005e7e:	8e8080e7          	jalr	-1816(ra) # 80004762 <end_op>
++    return -1;
++    80005e82:	557d                	li	a0,-1
++    80005e84:	b7fd                	j	80005e72 <sys_mkdir+0x4c>
++
++0000000080005e86 <sys_mknod>:
++
++uint64
++sys_mknod(void)
++{
++    80005e86:	7135                	addi	sp,sp,-160
++    80005e88:	ed06                	sd	ra,152(sp)
++    80005e8a:	e922                	sd	s0,144(sp)
++    80005e8c:	1100                	addi	s0,sp,160
++  struct inode *ip;
++  char path[MAXPATH];
++  int major, minor;
++
++  begin_op();
++    80005e8e:	fffff097          	auipc	ra,0xfffff
++    80005e92:	856080e7          	jalr	-1962(ra) # 800046e4 <begin_op>
++  if((argstr(0, path, MAXPATH)) < 0 ||
++    80005e96:	08000613          	li	a2,128
++    80005e9a:	f7040593          	addi	a1,s0,-144
++    80005e9e:	4501                	li	a0,0
++    80005ea0:	ffffd097          	auipc	ra,0xffffd
++    80005ea4:	1f6080e7          	jalr	502(ra) # 80003096 <argstr>
++    80005ea8:	04054a63          	bltz	a0,80005efc <sys_mknod+0x76>
++     argint(1, &major) < 0 ||
++    80005eac:	f6c40593          	addi	a1,s0,-148
++    80005eb0:	4505                	li	a0,1
++    80005eb2:	ffffd097          	auipc	ra,0xffffd
++    80005eb6:	1a0080e7          	jalr	416(ra) # 80003052 <argint>
++  if((argstr(0, path, MAXPATH)) < 0 ||
++    80005eba:	04054163          	bltz	a0,80005efc <sys_mknod+0x76>
++     argint(2, &minor) < 0 ||
++    80005ebe:	f6840593          	addi	a1,s0,-152
++    80005ec2:	4509                	li	a0,2
++    80005ec4:	ffffd097          	auipc	ra,0xffffd
++    80005ec8:	18e080e7          	jalr	398(ra) # 80003052 <argint>
++     argint(1, &major) < 0 ||
++    80005ecc:	02054863          	bltz	a0,80005efc <sys_mknod+0x76>
++     (ip = create(path, T_DEVICE, major, minor)) == 0){
++    80005ed0:	f6841683          	lh	a3,-152(s0)
++    80005ed4:	f6c41603          	lh	a2,-148(s0)
++    80005ed8:	458d                	li	a1,3
++    80005eda:	f7040513          	addi	a0,s0,-144
++    80005ede:	fffff097          	auipc	ra,0xfffff
++    80005ee2:	774080e7          	jalr	1908(ra) # 80005652 <create>
++     argint(2, &minor) < 0 ||
++    80005ee6:	c919                	beqz	a0,80005efc <sys_mknod+0x76>
++    end_op();
++    return -1;
++  }
++  iunlockput(ip);
++    80005ee8:	ffffe097          	auipc	ra,0xffffe
++    80005eec:	082080e7          	jalr	130(ra) # 80003f6a <iunlockput>
++  end_op();
++    80005ef0:	fffff097          	auipc	ra,0xfffff
++    80005ef4:	872080e7          	jalr	-1934(ra) # 80004762 <end_op>
++  return 0;
++    80005ef8:	4501                	li	a0,0
++    80005efa:	a031                	j	80005f06 <sys_mknod+0x80>
++    end_op();
++    80005efc:	fffff097          	auipc	ra,0xfffff
++    80005f00:	866080e7          	jalr	-1946(ra) # 80004762 <end_op>
++    return -1;
++    80005f04:	557d                	li	a0,-1
++}
++    80005f06:	60ea                	ld	ra,152(sp)
++    80005f08:	644a                	ld	s0,144(sp)
++    80005f0a:	610d                	addi	sp,sp,160
++    80005f0c:	8082                	ret
++
++0000000080005f0e <sys_chdir>:
++
++uint64
++sys_chdir(void)
++{
++    80005f0e:	7135                	addi	sp,sp,-160
++    80005f10:	ed06                	sd	ra,152(sp)
++    80005f12:	e922                	sd	s0,144(sp)
++    80005f14:	e526                	sd	s1,136(sp)
++    80005f16:	e14a                	sd	s2,128(sp)
++    80005f18:	1100                	addi	s0,sp,160
++  char path[MAXPATH];
++  struct inode *ip;
++  struct proc *p = myproc();
++    80005f1a:	ffffc097          	auipc	ra,0xffffc
++    80005f1e:	e5c080e7          	jalr	-420(ra) # 80001d76 <myproc>
++    80005f22:	892a                	mv	s2,a0
++  
++  begin_op();
++    80005f24:	ffffe097          	auipc	ra,0xffffe
++    80005f28:	7c0080e7          	jalr	1984(ra) # 800046e4 <begin_op>
++  if(argstr(0, path, MAXPATH) < 0 || (ip = namei(path)) == 0){
++    80005f2c:	08000613          	li	a2,128
++    80005f30:	f6040593          	addi	a1,s0,-160
++    80005f34:	4501                	li	a0,0
++    80005f36:	ffffd097          	auipc	ra,0xffffd
++    80005f3a:	160080e7          	jalr	352(ra) # 80003096 <argstr>
++    80005f3e:	04054b63          	bltz	a0,80005f94 <sys_chdir+0x86>
++    80005f42:	f6040513          	addi	a0,s0,-160
++    80005f46:	ffffe097          	auipc	ra,0xffffe
++    80005f4a:	57e080e7          	jalr	1406(ra) # 800044c4 <namei>
++    80005f4e:	84aa                	mv	s1,a0
++    80005f50:	c131                	beqz	a0,80005f94 <sys_chdir+0x86>
++    end_op();
++    return -1;
++  }
++  ilock(ip);
++    80005f52:	ffffe097          	auipc	ra,0xffffe
++    80005f56:	db6080e7          	jalr	-586(ra) # 80003d08 <ilock>
++  if(ip->type != T_DIR){
++    80005f5a:	04449703          	lh	a4,68(s1)
++    80005f5e:	4785                	li	a5,1
++    80005f60:	04f71063          	bne	a4,a5,80005fa0 <sys_chdir+0x92>
++    iunlockput(ip);
++    end_op();
++    return -1;
++  }
++  iunlock(ip);
++    80005f64:	8526                	mv	a0,s1
++    80005f66:	ffffe097          	auipc	ra,0xffffe
++    80005f6a:	e64080e7          	jalr	-412(ra) # 80003dca <iunlock>
++  iput(p->cwd);
++    80005f6e:	1d093503          	ld	a0,464(s2)
++    80005f72:	ffffe097          	auipc	ra,0xffffe
++    80005f76:	f50080e7          	jalr	-176(ra) # 80003ec2 <iput>
++  end_op();
++    80005f7a:	ffffe097          	auipc	ra,0xffffe
++    80005f7e:	7e8080e7          	jalr	2024(ra) # 80004762 <end_op>
++  p->cwd = ip;
++    80005f82:	1c993823          	sd	s1,464(s2)
++  return 0;
++    80005f86:	4501                	li	a0,0
++}
++    80005f88:	60ea                	ld	ra,152(sp)
++    80005f8a:	644a                	ld	s0,144(sp)
++    80005f8c:	64aa                	ld	s1,136(sp)
++    80005f8e:	690a                	ld	s2,128(sp)
++    80005f90:	610d                	addi	sp,sp,160
++    80005f92:	8082                	ret
++    end_op();
++    80005f94:	ffffe097          	auipc	ra,0xffffe
++    80005f98:	7ce080e7          	jalr	1998(ra) # 80004762 <end_op>
++    return -1;
++    80005f9c:	557d                	li	a0,-1
++    80005f9e:	b7ed                	j	80005f88 <sys_chdir+0x7a>
++    iunlockput(ip);
++    80005fa0:	8526                	mv	a0,s1
++    80005fa2:	ffffe097          	auipc	ra,0xffffe
++    80005fa6:	fc8080e7          	jalr	-56(ra) # 80003f6a <iunlockput>
++    end_op();
++    80005faa:	ffffe097          	auipc	ra,0xffffe
++    80005fae:	7b8080e7          	jalr	1976(ra) # 80004762 <end_op>
++    return -1;
++    80005fb2:	557d                	li	a0,-1
++    80005fb4:	bfd1                	j	80005f88 <sys_chdir+0x7a>
++
++0000000080005fb6 <sys_exec>:
++
++uint64
++sys_exec(void)
++{
++    80005fb6:	7145                	addi	sp,sp,-464
++    80005fb8:	e786                	sd	ra,456(sp)
++    80005fba:	e3a2                	sd	s0,448(sp)
++    80005fbc:	ff26                	sd	s1,440(sp)
++    80005fbe:	fb4a                	sd	s2,432(sp)
++    80005fc0:	f74e                	sd	s3,424(sp)
++    80005fc2:	f352                	sd	s4,416(sp)
++    80005fc4:	ef56                	sd	s5,408(sp)
++    80005fc6:	0b80                	addi	s0,sp,464
++  char path[MAXPATH], *argv[MAXARG];
++  int i;
++  uint64 uargv, uarg;
++
++  if(argstr(0, path, MAXPATH) < 0 || argaddr(1, &uargv) < 0){
++    80005fc8:	08000613          	li	a2,128
++    80005fcc:	f4040593          	addi	a1,s0,-192
++    80005fd0:	4501                	li	a0,0
++    80005fd2:	ffffd097          	auipc	ra,0xffffd
++    80005fd6:	0c4080e7          	jalr	196(ra) # 80003096 <argstr>
++    return -1;
++    80005fda:	597d                	li	s2,-1
++  if(argstr(0, path, MAXPATH) < 0 || argaddr(1, &uargv) < 0){
++    80005fdc:	0c054b63          	bltz	a0,800060b2 <sys_exec+0xfc>
++    80005fe0:	e3840593          	addi	a1,s0,-456
++    80005fe4:	4505                	li	a0,1
++    80005fe6:	ffffd097          	auipc	ra,0xffffd
++    80005fea:	08e080e7          	jalr	142(ra) # 80003074 <argaddr>
++    80005fee:	0c054263          	bltz	a0,800060b2 <sys_exec+0xfc>
++  }
++  memset(argv, 0, sizeof(argv));
++    80005ff2:	10000613          	li	a2,256
++    80005ff6:	4581                	li	a1,0
++    80005ff8:	e4040513          	addi	a0,s0,-448
++    80005ffc:	ffffb097          	auipc	ra,0xffffb
++    80006000:	cd0080e7          	jalr	-816(ra) # 80000ccc <memset>
++  for(i=0;; i++){
++    if(i >= NELEM(argv)){
++    80006004:	e4040493          	addi	s1,s0,-448
++  memset(argv, 0, sizeof(argv));
++    80006008:	89a6                	mv	s3,s1
++    8000600a:	4901                	li	s2,0
++    if(i >= NELEM(argv)){
++    8000600c:	02000a13          	li	s4,32
++    80006010:	00090a9b          	sext.w	s5,s2
++      goto bad;
++    }
++    if(fetchaddr(uargv+sizeof(uint64)*i, (uint64*)&uarg) < 0){
++    80006014:	00391513          	slli	a0,s2,0x3
++    80006018:	e3040593          	addi	a1,s0,-464
++    8000601c:	e3843783          	ld	a5,-456(s0)
++    80006020:	953e                	add	a0,a0,a5
++    80006022:	ffffd097          	auipc	ra,0xffffd
++    80006026:	f96080e7          	jalr	-106(ra) # 80002fb8 <fetchaddr>
++    8000602a:	02054a63          	bltz	a0,8000605e <sys_exec+0xa8>
++      goto bad;
++    }
++    if(uarg == 0){
++    8000602e:	e3043783          	ld	a5,-464(s0)
++    80006032:	c3b9                	beqz	a5,80006078 <sys_exec+0xc2>
++      argv[i] = 0;
++      break;
++    }
++    argv[i] = kalloc();
++    80006034:	ffffb097          	auipc	ra,0xffffb
++    80006038:	aac080e7          	jalr	-1364(ra) # 80000ae0 <kalloc>
++    8000603c:	85aa                	mv	a1,a0
++    8000603e:	00a9b023          	sd	a0,0(s3)
++    if(argv[i] == 0)
++    80006042:	cd11                	beqz	a0,8000605e <sys_exec+0xa8>
++      goto bad;
++    if(fetchstr(uarg, argv[i], PGSIZE) < 0)
++    80006044:	6605                	lui	a2,0x1
++    80006046:	e3043503          	ld	a0,-464(s0)
++    8000604a:	ffffd097          	auipc	ra,0xffffd
++    8000604e:	fc0080e7          	jalr	-64(ra) # 8000300a <fetchstr>
++    80006052:	00054663          	bltz	a0,8000605e <sys_exec+0xa8>
++    if(i >= NELEM(argv)){
++    80006056:	0905                	addi	s2,s2,1
++    80006058:	09a1                	addi	s3,s3,8
++    8000605a:	fb491be3          	bne	s2,s4,80006010 <sys_exec+0x5a>
++    kfree(argv[i]);
++
++  return ret;
++
++ bad:
++  for(i = 0; i < NELEM(argv) && argv[i] != 0; i++)
++    8000605e:	f4040913          	addi	s2,s0,-192
++    80006062:	6088                	ld	a0,0(s1)
++    80006064:	c531                	beqz	a0,800060b0 <sys_exec+0xfa>
++    kfree(argv[i]);
++    80006066:	ffffb097          	auipc	ra,0xffffb
++    8000606a:	97c080e7          	jalr	-1668(ra) # 800009e2 <kfree>
++  for(i = 0; i < NELEM(argv) && argv[i] != 0; i++)
++    8000606e:	04a1                	addi	s1,s1,8
++    80006070:	ff2499e3          	bne	s1,s2,80006062 <sys_exec+0xac>
++  return -1;
++    80006074:	597d                	li	s2,-1
++    80006076:	a835                	j	800060b2 <sys_exec+0xfc>
++      argv[i] = 0;
++    80006078:	0a8e                	slli	s5,s5,0x3
++    8000607a:	fc0a8793          	addi	a5,s5,-64 # ffffffffffffefc0 <end+0xffffffff7ffd5fc0>
++    8000607e:	00878ab3          	add	s5,a5,s0
++    80006082:	e80ab023          	sd	zero,-384(s5)
++  int ret = exec(path, argv);
++    80006086:	e4040593          	addi	a1,s0,-448
++    8000608a:	f4040513          	addi	a0,s0,-192
++    8000608e:	fffff097          	auipc	ra,0xfffff
++    80006092:	172080e7          	jalr	370(ra) # 80005200 <exec>
++    80006096:	892a                	mv	s2,a0
++  for(i = 0; i < NELEM(argv) && argv[i] != 0; i++)
++    80006098:	f4040993          	addi	s3,s0,-192
++    8000609c:	6088                	ld	a0,0(s1)
++    8000609e:	c911                	beqz	a0,800060b2 <sys_exec+0xfc>
++    kfree(argv[i]);
++    800060a0:	ffffb097          	auipc	ra,0xffffb
++    800060a4:	942080e7          	jalr	-1726(ra) # 800009e2 <kfree>
++  for(i = 0; i < NELEM(argv) && argv[i] != 0; i++)
++    800060a8:	04a1                	addi	s1,s1,8
++    800060aa:	ff3499e3          	bne	s1,s3,8000609c <sys_exec+0xe6>
++    800060ae:	a011                	j	800060b2 <sys_exec+0xfc>
++  return -1;
++    800060b0:	597d                	li	s2,-1
++}
++    800060b2:	854a                	mv	a0,s2
++    800060b4:	60be                	ld	ra,456(sp)
++    800060b6:	641e                	ld	s0,448(sp)
++    800060b8:	74fa                	ld	s1,440(sp)
++    800060ba:	795a                	ld	s2,432(sp)
++    800060bc:	79ba                	ld	s3,424(sp)
++    800060be:	7a1a                	ld	s4,416(sp)
++    800060c0:	6afa                	ld	s5,408(sp)
++    800060c2:	6179                	addi	sp,sp,464
++    800060c4:	8082                	ret
++
++00000000800060c6 <sys_pipe>:
++
++uint64
++sys_pipe(void)
++{
++    800060c6:	7139                	addi	sp,sp,-64
++    800060c8:	fc06                	sd	ra,56(sp)
++    800060ca:	f822                	sd	s0,48(sp)
++    800060cc:	f426                	sd	s1,40(sp)
++    800060ce:	0080                	addi	s0,sp,64
++  uint64 fdarray; // user pointer to array of two integers
++  struct file *rf, *wf;
++  int fd0, fd1;
++  struct proc *p = myproc();
++    800060d0:	ffffc097          	auipc	ra,0xffffc
++    800060d4:	ca6080e7          	jalr	-858(ra) # 80001d76 <myproc>
++    800060d8:	84aa                	mv	s1,a0
++
++  if(argaddr(0, &fdarray) < 0)
++    800060da:	fd840593          	addi	a1,s0,-40
++    800060de:	4501                	li	a0,0
++    800060e0:	ffffd097          	auipc	ra,0xffffd
++    800060e4:	f94080e7          	jalr	-108(ra) # 80003074 <argaddr>
++    return -1;
++    800060e8:	57fd                	li	a5,-1
++  if(argaddr(0, &fdarray) < 0)
++    800060ea:	0e054063          	bltz	a0,800061ca <sys_pipe+0x104>
++  if(pipealloc(&rf, &wf) < 0)
++    800060ee:	fc840593          	addi	a1,s0,-56
++    800060f2:	fd040513          	addi	a0,s0,-48
++    800060f6:	fffff097          	auipc	ra,0xfffff
++    800060fa:	de6080e7          	jalr	-538(ra) # 80004edc <pipealloc>
++    return -1;
++    800060fe:	57fd                	li	a5,-1
++  if(pipealloc(&rf, &wf) < 0)
++    80006100:	0c054563          	bltz	a0,800061ca <sys_pipe+0x104>
++  fd0 = -1;
++    80006104:	fcf42223          	sw	a5,-60(s0)
++  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
++    80006108:	fd043503          	ld	a0,-48(s0)
++    8000610c:	fffff097          	auipc	ra,0xfffff
++    80006110:	504080e7          	jalr	1284(ra) # 80005610 <fdalloc>
++    80006114:	fca42223          	sw	a0,-60(s0)
++    80006118:	08054c63          	bltz	a0,800061b0 <sys_pipe+0xea>
++    8000611c:	fc843503          	ld	a0,-56(s0)
++    80006120:	fffff097          	auipc	ra,0xfffff
++    80006124:	4f0080e7          	jalr	1264(ra) # 80005610 <fdalloc>
++    80006128:	fca42023          	sw	a0,-64(s0)
++    8000612c:	06054963          	bltz	a0,8000619e <sys_pipe+0xd8>
++      p->ofile[fd0] = 0;
++    fileclose(rf);
++    fileclose(wf);
++    return -1;
++  }
++  if(copyout(p->pagetable, fdarray, (char*)&fd0, sizeof(fd0)) < 0 ||
++    80006130:	4691                	li	a3,4
++    80006132:	fc440613          	addi	a2,s0,-60
++    80006136:	fd843583          	ld	a1,-40(s0)
++    8000613a:	68a8                	ld	a0,80(s1)
++    8000613c:	ffffb097          	auipc	ra,0xffffb
++    80006140:	526080e7          	jalr	1318(ra) # 80001662 <copyout>
++    80006144:	02054063          	bltz	a0,80006164 <sys_pipe+0x9e>
++     copyout(p->pagetable, fdarray+sizeof(fd0), (char *)&fd1, sizeof(fd1)) < 0){
++    80006148:	4691                	li	a3,4
++    8000614a:	fc040613          	addi	a2,s0,-64
++    8000614e:	fd843583          	ld	a1,-40(s0)
++    80006152:	0591                	addi	a1,a1,4
++    80006154:	68a8                	ld	a0,80(s1)
++    80006156:	ffffb097          	auipc	ra,0xffffb
++    8000615a:	50c080e7          	jalr	1292(ra) # 80001662 <copyout>
++    p->ofile[fd1] = 0;
++    fileclose(rf);
++    fileclose(wf);
++    return -1;
++  }
++  return 0;
++    8000615e:	4781                	li	a5,0
++  if(copyout(p->pagetable, fdarray, (char*)&fd0, sizeof(fd0)) < 0 ||
++    80006160:	06055563          	bgez	a0,800061ca <sys_pipe+0x104>
++    p->ofile[fd0] = 0;
++    80006164:	fc442783          	lw	a5,-60(s0)
++    80006168:	07e9                	addi	a5,a5,26
++    8000616a:	078e                	slli	a5,a5,0x3
++    8000616c:	97a6                	add	a5,a5,s1
++    8000616e:	0007b023          	sd	zero,0(a5)
++    p->ofile[fd1] = 0;
++    80006172:	fc042783          	lw	a5,-64(s0)
++    80006176:	07e9                	addi	a5,a5,26
++    80006178:	078e                	slli	a5,a5,0x3
++    8000617a:	00f48533          	add	a0,s1,a5
++    8000617e:	00053023          	sd	zero,0(a0)
++    fileclose(rf);
++    80006182:	fd043503          	ld	a0,-48(s0)
++    80006186:	fffff097          	auipc	ra,0xfffff
++    8000618a:	a26080e7          	jalr	-1498(ra) # 80004bac <fileclose>
++    fileclose(wf);
++    8000618e:	fc843503          	ld	a0,-56(s0)
++    80006192:	fffff097          	auipc	ra,0xfffff
++    80006196:	a1a080e7          	jalr	-1510(ra) # 80004bac <fileclose>
++    return -1;
++    8000619a:	57fd                	li	a5,-1
++    8000619c:	a03d                	j	800061ca <sys_pipe+0x104>
++    if(fd0 >= 0)
++    8000619e:	fc442783          	lw	a5,-60(s0)
++    800061a2:	0007c763          	bltz	a5,800061b0 <sys_pipe+0xea>
++      p->ofile[fd0] = 0;
++    800061a6:	07e9                	addi	a5,a5,26
++    800061a8:	078e                	slli	a5,a5,0x3
++    800061aa:	97a6                	add	a5,a5,s1
++    800061ac:	0007b023          	sd	zero,0(a5)
++    fileclose(rf);
++    800061b0:	fd043503          	ld	a0,-48(s0)
++    800061b4:	fffff097          	auipc	ra,0xfffff
++    800061b8:	9f8080e7          	jalr	-1544(ra) # 80004bac <fileclose>
++    fileclose(wf);
++    800061bc:	fc843503          	ld	a0,-56(s0)
++    800061c0:	fffff097          	auipc	ra,0xfffff
++    800061c4:	9ec080e7          	jalr	-1556(ra) # 80004bac <fileclose>
++    return -1;
++    800061c8:	57fd                	li	a5,-1
++}
++    800061ca:	853e                	mv	a0,a5
++    800061cc:	70e2                	ld	ra,56(sp)
++    800061ce:	7442                	ld	s0,48(sp)
++    800061d0:	74a2                	ld	s1,40(sp)
++    800061d2:	6121                	addi	sp,sp,64
++    800061d4:	8082                	ret
++	...
++
++00000000800061e0 <kernelvec>:
++    800061e0:	7111                	addi	sp,sp,-256
++    800061e2:	e006                	sd	ra,0(sp)
++    800061e4:	e40a                	sd	sp,8(sp)
++    800061e6:	e80e                	sd	gp,16(sp)
++    800061e8:	ec12                	sd	tp,24(sp)
++    800061ea:	f016                	sd	t0,32(sp)
++    800061ec:	f41a                	sd	t1,40(sp)
++    800061ee:	f81e                	sd	t2,48(sp)
++    800061f0:	fc22                	sd	s0,56(sp)
++    800061f2:	e0a6                	sd	s1,64(sp)
++    800061f4:	e4aa                	sd	a0,72(sp)
++    800061f6:	e8ae                	sd	a1,80(sp)
++    800061f8:	ecb2                	sd	a2,88(sp)
++    800061fa:	f0b6                	sd	a3,96(sp)
++    800061fc:	f4ba                	sd	a4,104(sp)
++    800061fe:	f8be                	sd	a5,112(sp)
++    80006200:	fcc2                	sd	a6,120(sp)
++    80006202:	e146                	sd	a7,128(sp)
++    80006204:	e54a                	sd	s2,136(sp)
++    80006206:	e94e                	sd	s3,144(sp)
++    80006208:	ed52                	sd	s4,152(sp)
++    8000620a:	f156                	sd	s5,160(sp)
++    8000620c:	f55a                	sd	s6,168(sp)
++    8000620e:	f95e                	sd	s7,176(sp)
++    80006210:	fd62                	sd	s8,184(sp)
++    80006212:	e1e6                	sd	s9,192(sp)
++    80006214:	e5ea                	sd	s10,200(sp)
++    80006216:	e9ee                	sd	s11,208(sp)
++    80006218:	edf2                	sd	t3,216(sp)
++    8000621a:	f1f6                	sd	t4,224(sp)
++    8000621c:	f5fa                	sd	t5,232(sp)
++    8000621e:	f9fe                	sd	t6,240(sp)
++    80006220:	c47fc0ef          	jal	ra,80002e66 <kerneltrap>
++    80006224:	6082                	ld	ra,0(sp)
++    80006226:	6122                	ld	sp,8(sp)
++    80006228:	61c2                	ld	gp,16(sp)
++    8000622a:	7282                	ld	t0,32(sp)
++    8000622c:	7322                	ld	t1,40(sp)
++    8000622e:	73c2                	ld	t2,48(sp)
++    80006230:	7462                	ld	s0,56(sp)
++    80006232:	6486                	ld	s1,64(sp)
++    80006234:	6526                	ld	a0,72(sp)
++    80006236:	65c6                	ld	a1,80(sp)
++    80006238:	6666                	ld	a2,88(sp)
++    8000623a:	7686                	ld	a3,96(sp)
++    8000623c:	7726                	ld	a4,104(sp)
++    8000623e:	77c6                	ld	a5,112(sp)
++    80006240:	7866                	ld	a6,120(sp)
++    80006242:	688a                	ld	a7,128(sp)
++    80006244:	692a                	ld	s2,136(sp)
++    80006246:	69ca                	ld	s3,144(sp)
++    80006248:	6a6a                	ld	s4,152(sp)
++    8000624a:	7a8a                	ld	s5,160(sp)
++    8000624c:	7b2a                	ld	s6,168(sp)
++    8000624e:	7bca                	ld	s7,176(sp)
++    80006250:	7c6a                	ld	s8,184(sp)
++    80006252:	6c8e                	ld	s9,192(sp)
++    80006254:	6d2e                	ld	s10,200(sp)
++    80006256:	6dce                	ld	s11,208(sp)
++    80006258:	6e6e                	ld	t3,216(sp)
++    8000625a:	7e8e                	ld	t4,224(sp)
++    8000625c:	7f2e                	ld	t5,232(sp)
++    8000625e:	7fce                	ld	t6,240(sp)
++    80006260:	6111                	addi	sp,sp,256
++    80006262:	10200073          	sret
++    80006266:	00000013          	nop
++    8000626a:	00000013          	nop
++    8000626e:	0001                	nop
++
++0000000080006270 <timervec>:
++    80006270:	34051573          	csrrw	a0,mscratch,a0
++    80006274:	e10c                	sd	a1,0(a0)
++    80006276:	e510                	sd	a2,8(a0)
++    80006278:	e914                	sd	a3,16(a0)
++    8000627a:	6d0c                	ld	a1,24(a0)
++    8000627c:	7110                	ld	a2,32(a0)
++    8000627e:	6194                	ld	a3,0(a1)
++    80006280:	96b2                	add	a3,a3,a2
++    80006282:	e194                	sd	a3,0(a1)
++    80006284:	4589                	li	a1,2
++    80006286:	14459073          	csrw	sip,a1
++    8000628a:	6914                	ld	a3,16(a0)
++    8000628c:	6510                	ld	a2,8(a0)
++    8000628e:	610c                	ld	a1,0(a0)
++    80006290:	34051573          	csrrw	a0,mscratch,a0
++    80006294:	30200073          	mret
++	...
++
++000000008000629a <plicinit>:
++// the riscv Platform Level Interrupt Controller (PLIC).
++//
++
++void
++plicinit(void)
++{
++    8000629a:	1141                	addi	sp,sp,-16
++    8000629c:	e422                	sd	s0,8(sp)
++    8000629e:	0800                	addi	s0,sp,16
++  // set desired IRQ priorities non-zero (otherwise disabled).
++  *(uint32*)(PLIC + UART0_IRQ*4) = 1;
++    800062a0:	0c0007b7          	lui	a5,0xc000
++    800062a4:	4705                	li	a4,1
++    800062a6:	d798                	sw	a4,40(a5)
++  *(uint32*)(PLIC + VIRTIO0_IRQ*4) = 1;
++    800062a8:	c3d8                	sw	a4,4(a5)
++}
++    800062aa:	6422                	ld	s0,8(sp)
++    800062ac:	0141                	addi	sp,sp,16
++    800062ae:	8082                	ret
++
++00000000800062b0 <plicinithart>:
++
++void
++plicinithart(void)
++{
++    800062b0:	1141                	addi	sp,sp,-16
++    800062b2:	e406                	sd	ra,8(sp)
++    800062b4:	e022                	sd	s0,0(sp)
++    800062b6:	0800                	addi	s0,sp,16
++  int hart = cpuid();
++    800062b8:	ffffc097          	auipc	ra,0xffffc
++    800062bc:	a92080e7          	jalr	-1390(ra) # 80001d4a <cpuid>
++  
++  // set uart's enable bit for this hart's S-mode. 
++  *(uint32*)PLIC_SENABLE(hart)= (1 << UART0_IRQ) | (1 << VIRTIO0_IRQ);
++    800062c0:	0085171b          	slliw	a4,a0,0x8
++    800062c4:	0c0027b7          	lui	a5,0xc002
++    800062c8:	97ba                	add	a5,a5,a4
++    800062ca:	40200713          	li	a4,1026
++    800062ce:	08e7a023          	sw	a4,128(a5) # c002080 <_entry-0x73ffdf80>
++
++  // set this hart's S-mode priority threshold to 0.
++  *(uint32*)PLIC_SPRIORITY(hart) = 0;
++    800062d2:	00d5151b          	slliw	a0,a0,0xd
++    800062d6:	0c2017b7          	lui	a5,0xc201
++    800062da:	97aa                	add	a5,a5,a0
++    800062dc:	0007a023          	sw	zero,0(a5) # c201000 <_entry-0x73dff000>
++}
++    800062e0:	60a2                	ld	ra,8(sp)
++    800062e2:	6402                	ld	s0,0(sp)
++    800062e4:	0141                	addi	sp,sp,16
++    800062e6:	8082                	ret
++
++00000000800062e8 <plic_claim>:
++
++// ask the PLIC what interrupt we should serve.
++int
++plic_claim(void)
++{
++    800062e8:	1141                	addi	sp,sp,-16
++    800062ea:	e406                	sd	ra,8(sp)
++    800062ec:	e022                	sd	s0,0(sp)
++    800062ee:	0800                	addi	s0,sp,16
++  int hart = cpuid();
++    800062f0:	ffffc097          	auipc	ra,0xffffc
++    800062f4:	a5a080e7          	jalr	-1446(ra) # 80001d4a <cpuid>
++  int irq = *(uint32*)PLIC_SCLAIM(hart);
++    800062f8:	00d5151b          	slliw	a0,a0,0xd
++    800062fc:	0c2017b7          	lui	a5,0xc201
++    80006300:	97aa                	add	a5,a5,a0
++  return irq;
++}
++    80006302:	43c8                	lw	a0,4(a5)
++    80006304:	60a2                	ld	ra,8(sp)
++    80006306:	6402                	ld	s0,0(sp)
++    80006308:	0141                	addi	sp,sp,16
++    8000630a:	8082                	ret
++
++000000008000630c <plic_complete>:
++
++// tell the PLIC we've served this IRQ.
++void
++plic_complete(int irq)
++{
++    8000630c:	1101                	addi	sp,sp,-32
++    8000630e:	ec06                	sd	ra,24(sp)
++    80006310:	e822                	sd	s0,16(sp)
++    80006312:	e426                	sd	s1,8(sp)
++    80006314:	1000                	addi	s0,sp,32
++    80006316:	84aa                	mv	s1,a0
++  int hart = cpuid();
++    80006318:	ffffc097          	auipc	ra,0xffffc
++    8000631c:	a32080e7          	jalr	-1486(ra) # 80001d4a <cpuid>
++  *(uint32*)PLIC_SCLAIM(hart) = irq;
++    80006320:	00d5151b          	slliw	a0,a0,0xd
++    80006324:	0c2017b7          	lui	a5,0xc201
++    80006328:	97aa                	add	a5,a5,a0
++    8000632a:	c3c4                	sw	s1,4(a5)
++}
++    8000632c:	60e2                	ld	ra,24(sp)
++    8000632e:	6442                	ld	s0,16(sp)
++    80006330:	64a2                	ld	s1,8(sp)
++    80006332:	6105                	addi	sp,sp,32
++    80006334:	8082                	ret
++
++0000000080006336 <free_desc>:
++}
++
++// mark a descriptor as free.
++static void
++free_desc(int i)
++{
++    80006336:	1141                	addi	sp,sp,-16
++    80006338:	e406                	sd	ra,8(sp)
++    8000633a:	e022                	sd	s0,0(sp)
++    8000633c:	0800                	addi	s0,sp,16
++  if(i >= NUM)
++    8000633e:	479d                	li	a5,7
++    80006340:	06a7c863          	blt	a5,a0,800063b0 <free_desc+0x7a>
++    panic("free_desc 1");
++  if(disk.free[i])
++    80006344:	00020717          	auipc	a4,0x20
++    80006348:	cbc70713          	addi	a4,a4,-836 # 80026000 <disk>
++    8000634c:	972a                	add	a4,a4,a0
++    8000634e:	6789                	lui	a5,0x2
++    80006350:	97ba                	add	a5,a5,a4
++    80006352:	0187c783          	lbu	a5,24(a5) # 2018 <_entry-0x7fffdfe8>
++    80006356:	e7ad                	bnez	a5,800063c0 <free_desc+0x8a>
++    panic("free_desc 2");
++  disk.desc[i].addr = 0;
++    80006358:	00451793          	slli	a5,a0,0x4
++    8000635c:	00022717          	auipc	a4,0x22
++    80006360:	ca470713          	addi	a4,a4,-860 # 80028000 <disk+0x2000>
++    80006364:	6314                	ld	a3,0(a4)
++    80006366:	96be                	add	a3,a3,a5
++    80006368:	0006b023          	sd	zero,0(a3)
++  disk.desc[i].len = 0;
++    8000636c:	6314                	ld	a3,0(a4)
++    8000636e:	96be                	add	a3,a3,a5
++    80006370:	0006a423          	sw	zero,8(a3)
++  disk.desc[i].flags = 0;
++    80006374:	6314                	ld	a3,0(a4)
++    80006376:	96be                	add	a3,a3,a5
++    80006378:	00069623          	sh	zero,12(a3)
++  disk.desc[i].next = 0;
++    8000637c:	6318                	ld	a4,0(a4)
++    8000637e:	97ba                	add	a5,a5,a4
++    80006380:	00079723          	sh	zero,14(a5)
++  disk.free[i] = 1;
++    80006384:	00020717          	auipc	a4,0x20
++    80006388:	c7c70713          	addi	a4,a4,-900 # 80026000 <disk>
++    8000638c:	972a                	add	a4,a4,a0
++    8000638e:	6789                	lui	a5,0x2
++    80006390:	97ba                	add	a5,a5,a4
++    80006392:	4705                	li	a4,1
++    80006394:	00e78c23          	sb	a4,24(a5) # 2018 <_entry-0x7fffdfe8>
++  wakeup(&disk.free[0]);
++    80006398:	00022517          	auipc	a0,0x22
++    8000639c:	c8050513          	addi	a0,a0,-896 # 80028018 <disk+0x2018>
++    800063a0:	ffffc097          	auipc	ra,0xffffc
++    800063a4:	398080e7          	jalr	920(ra) # 80002738 <wakeup>
++}
++    800063a8:	60a2                	ld	ra,8(sp)
++    800063aa:	6402                	ld	s0,0(sp)
++    800063ac:	0141                	addi	sp,sp,16
++    800063ae:	8082                	ret
++    panic("free_desc 1");
++    800063b0:	00002517          	auipc	a0,0x2
++    800063b4:	42850513          	addi	a0,a0,1064 # 800087d8 <syscalls+0x350>
++    800063b8:	ffffa097          	auipc	ra,0xffffa
++    800063bc:	182080e7          	jalr	386(ra) # 8000053a <panic>
++    panic("free_desc 2");
++    800063c0:	00002517          	auipc	a0,0x2
++    800063c4:	42850513          	addi	a0,a0,1064 # 800087e8 <syscalls+0x360>
++    800063c8:	ffffa097          	auipc	ra,0xffffa
++    800063cc:	172080e7          	jalr	370(ra) # 8000053a <panic>
++
++00000000800063d0 <virtio_disk_init>:
++{
++    800063d0:	1101                	addi	sp,sp,-32
++    800063d2:	ec06                	sd	ra,24(sp)
++    800063d4:	e822                	sd	s0,16(sp)
++    800063d6:	e426                	sd	s1,8(sp)
++    800063d8:	1000                	addi	s0,sp,32
++  initlock(&disk.vdisk_lock, "virtio_disk");
++    800063da:	00002597          	auipc	a1,0x2
++    800063de:	41e58593          	addi	a1,a1,1054 # 800087f8 <syscalls+0x370>
++    800063e2:	00022517          	auipc	a0,0x22
++    800063e6:	d4650513          	addi	a0,a0,-698 # 80028128 <disk+0x2128>
++    800063ea:	ffffa097          	auipc	ra,0xffffa
++    800063ee:	756080e7          	jalr	1878(ra) # 80000b40 <initlock>
++  if(*R(VIRTIO_MMIO_MAGIC_VALUE) != 0x74726976 ||
++    800063f2:	100017b7          	lui	a5,0x10001
++    800063f6:	4398                	lw	a4,0(a5)
++    800063f8:	2701                	sext.w	a4,a4
++    800063fa:	747277b7          	lui	a5,0x74727
++    800063fe:	97678793          	addi	a5,a5,-1674 # 74726976 <_entry-0xb8d968a>
++    80006402:	0ef71063          	bne	a4,a5,800064e2 <virtio_disk_init+0x112>
++     *R(VIRTIO_MMIO_VERSION) != 1 ||
++    80006406:	100017b7          	lui	a5,0x10001
++    8000640a:	43dc                	lw	a5,4(a5)
++    8000640c:	2781                	sext.w	a5,a5
++  if(*R(VIRTIO_MMIO_MAGIC_VALUE) != 0x74726976 ||
++    8000640e:	4705                	li	a4,1
++    80006410:	0ce79963          	bne	a5,a4,800064e2 <virtio_disk_init+0x112>
++     *R(VIRTIO_MMIO_DEVICE_ID) != 2 ||
++    80006414:	100017b7          	lui	a5,0x10001
++    80006418:	479c                	lw	a5,8(a5)
++    8000641a:	2781                	sext.w	a5,a5
++     *R(VIRTIO_MMIO_VERSION) != 1 ||
++    8000641c:	4709                	li	a4,2
++    8000641e:	0ce79263          	bne	a5,a4,800064e2 <virtio_disk_init+0x112>
++     *R(VIRTIO_MMIO_VENDOR_ID) != 0x554d4551){
++    80006422:	100017b7          	lui	a5,0x10001
++    80006426:	47d8                	lw	a4,12(a5)
++    80006428:	2701                	sext.w	a4,a4
++     *R(VIRTIO_MMIO_DEVICE_ID) != 2 ||
++    8000642a:	554d47b7          	lui	a5,0x554d4
++    8000642e:	55178793          	addi	a5,a5,1361 # 554d4551 <_entry-0x2ab2baaf>
++    80006432:	0af71863          	bne	a4,a5,800064e2 <virtio_disk_init+0x112>
++  *R(VIRTIO_MMIO_STATUS) = status;
++    80006436:	100017b7          	lui	a5,0x10001
++    8000643a:	4705                	li	a4,1
++    8000643c:	dbb8                	sw	a4,112(a5)
++  *R(VIRTIO_MMIO_STATUS) = status;
++    8000643e:	470d                	li	a4,3
++    80006440:	dbb8                	sw	a4,112(a5)
++  uint64 features = *R(VIRTIO_MMIO_DEVICE_FEATURES);
++    80006442:	4b98                	lw	a4,16(a5)
++  *R(VIRTIO_MMIO_DRIVER_FEATURES) = features;
++    80006444:	c7ffe6b7          	lui	a3,0xc7ffe
++    80006448:	75f68693          	addi	a3,a3,1887 # ffffffffc7ffe75f <end+0xffffffff47fd575f>
++    8000644c:	8f75                	and	a4,a4,a3
++    8000644e:	d398                	sw	a4,32(a5)
++  *R(VIRTIO_MMIO_STATUS) = status;
++    80006450:	472d                	li	a4,11
++    80006452:	dbb8                	sw	a4,112(a5)
++  *R(VIRTIO_MMIO_STATUS) = status;
++    80006454:	473d                	li	a4,15
++    80006456:	dbb8                	sw	a4,112(a5)
++  *R(VIRTIO_MMIO_GUEST_PAGE_SIZE) = PGSIZE;
++    80006458:	6705                	lui	a4,0x1
++    8000645a:	d798                	sw	a4,40(a5)
++  *R(VIRTIO_MMIO_QUEUE_SEL) = 0;
++    8000645c:	0207a823          	sw	zero,48(a5) # 10001030 <_entry-0x6fffefd0>
++  uint32 max = *R(VIRTIO_MMIO_QUEUE_NUM_MAX);
++    80006460:	5bdc                	lw	a5,52(a5)
++    80006462:	2781                	sext.w	a5,a5
++  if(max == 0)
++    80006464:	c7d9                	beqz	a5,800064f2 <virtio_disk_init+0x122>
++  if(max < NUM)
++    80006466:	471d                	li	a4,7
++    80006468:	08f77d63          	bgeu	a4,a5,80006502 <virtio_disk_init+0x132>
++  *R(VIRTIO_MMIO_QUEUE_NUM) = NUM;
++    8000646c:	100014b7          	lui	s1,0x10001
++    80006470:	47a1                	li	a5,8
++    80006472:	dc9c                	sw	a5,56(s1)
++  memset(disk.pages, 0, sizeof(disk.pages));
++    80006474:	6609                	lui	a2,0x2
++    80006476:	4581                	li	a1,0
++    80006478:	00020517          	auipc	a0,0x20
++    8000647c:	b8850513          	addi	a0,a0,-1144 # 80026000 <disk>
++    80006480:	ffffb097          	auipc	ra,0xffffb
++    80006484:	84c080e7          	jalr	-1972(ra) # 80000ccc <memset>
++  *R(VIRTIO_MMIO_QUEUE_PFN) = ((uint64)disk.pages) >> PGSHIFT;
++    80006488:	00020717          	auipc	a4,0x20
++    8000648c:	b7870713          	addi	a4,a4,-1160 # 80026000 <disk>
++    80006490:	00c75793          	srli	a5,a4,0xc
++    80006494:	2781                	sext.w	a5,a5
++    80006496:	c0bc                	sw	a5,64(s1)
++  disk.desc = (struct virtq_desc *) disk.pages;
++    80006498:	00022797          	auipc	a5,0x22
++    8000649c:	b6878793          	addi	a5,a5,-1176 # 80028000 <disk+0x2000>
++    800064a0:	e398                	sd	a4,0(a5)
++  disk.avail = (struct virtq_avail *)(disk.pages + NUM*sizeof(struct virtq_desc));
++    800064a2:	00020717          	auipc	a4,0x20
++    800064a6:	bde70713          	addi	a4,a4,-1058 # 80026080 <disk+0x80>
++    800064aa:	e798                	sd	a4,8(a5)
++  disk.used = (struct virtq_used *) (disk.pages + PGSIZE);
++    800064ac:	00021717          	auipc	a4,0x21
++    800064b0:	b5470713          	addi	a4,a4,-1196 # 80027000 <disk+0x1000>
++    800064b4:	eb98                	sd	a4,16(a5)
++    disk.free[i] = 1;
++    800064b6:	4705                	li	a4,1
++    800064b8:	00e78c23          	sb	a4,24(a5)
++    800064bc:	00e78ca3          	sb	a4,25(a5)
++    800064c0:	00e78d23          	sb	a4,26(a5)
++    800064c4:	00e78da3          	sb	a4,27(a5)
++    800064c8:	00e78e23          	sb	a4,28(a5)
++    800064cc:	00e78ea3          	sb	a4,29(a5)
++    800064d0:	00e78f23          	sb	a4,30(a5)
++    800064d4:	00e78fa3          	sb	a4,31(a5)
++}
++    800064d8:	60e2                	ld	ra,24(sp)
++    800064da:	6442                	ld	s0,16(sp)
++    800064dc:	64a2                	ld	s1,8(sp)
++    800064de:	6105                	addi	sp,sp,32
++    800064e0:	8082                	ret
++    panic("could not find virtio disk");
++    800064e2:	00002517          	auipc	a0,0x2
++    800064e6:	32650513          	addi	a0,a0,806 # 80008808 <syscalls+0x380>
++    800064ea:	ffffa097          	auipc	ra,0xffffa
++    800064ee:	050080e7          	jalr	80(ra) # 8000053a <panic>
++    panic("virtio disk has no queue 0");
++    800064f2:	00002517          	auipc	a0,0x2
++    800064f6:	33650513          	addi	a0,a0,822 # 80008828 <syscalls+0x3a0>
++    800064fa:	ffffa097          	auipc	ra,0xffffa
++    800064fe:	040080e7          	jalr	64(ra) # 8000053a <panic>
++    panic("virtio disk max queue too short");
++    80006502:	00002517          	auipc	a0,0x2
++    80006506:	34650513          	addi	a0,a0,838 # 80008848 <syscalls+0x3c0>
++    8000650a:	ffffa097          	auipc	ra,0xffffa
++    8000650e:	030080e7          	jalr	48(ra) # 8000053a <panic>
++
++0000000080006512 <virtio_disk_rw>:
++  return 0;
++}
++
++void
++virtio_disk_rw(struct buf *b, int write)
++{
++    80006512:	7119                	addi	sp,sp,-128
++    80006514:	fc86                	sd	ra,120(sp)
++    80006516:	f8a2                	sd	s0,112(sp)
++    80006518:	f4a6                	sd	s1,104(sp)
++    8000651a:	f0ca                	sd	s2,96(sp)
++    8000651c:	ecce                	sd	s3,88(sp)
++    8000651e:	e8d2                	sd	s4,80(sp)
++    80006520:	e4d6                	sd	s5,72(sp)
++    80006522:	e0da                	sd	s6,64(sp)
++    80006524:	fc5e                	sd	s7,56(sp)
++    80006526:	f862                	sd	s8,48(sp)
++    80006528:	f466                	sd	s9,40(sp)
++    8000652a:	f06a                	sd	s10,32(sp)
++    8000652c:	ec6e                	sd	s11,24(sp)
++    8000652e:	0100                	addi	s0,sp,128
++    80006530:	8aaa                	mv	s5,a0
++    80006532:	8d2e                	mv	s10,a1
++  uint64 sector = b->blockno * (BSIZE / 512);
++    80006534:	00c52c83          	lw	s9,12(a0)
++    80006538:	001c9c9b          	slliw	s9,s9,0x1
++    8000653c:	1c82                	slli	s9,s9,0x20
++    8000653e:	020cdc93          	srli	s9,s9,0x20
++
++  acquire(&disk.vdisk_lock);
++    80006542:	00022517          	auipc	a0,0x22
++    80006546:	be650513          	addi	a0,a0,-1050 # 80028128 <disk+0x2128>
++    8000654a:	ffffa097          	auipc	ra,0xffffa
++    8000654e:	686080e7          	jalr	1670(ra) # 80000bd0 <acquire>
++  for(int i = 0; i < 3; i++){
++    80006552:	4981                	li	s3,0
++  for(int i = 0; i < NUM; i++){
++    80006554:	44a1                	li	s1,8
++      disk.free[i] = 0;
++    80006556:	00020c17          	auipc	s8,0x20
++    8000655a:	aaac0c13          	addi	s8,s8,-1366 # 80026000 <disk>
++    8000655e:	6b89                	lui	s7,0x2
++  for(int i = 0; i < 3; i++){
++    80006560:	4b0d                	li	s6,3
++    80006562:	a0ad                	j	800065cc <virtio_disk_rw+0xba>
++      disk.free[i] = 0;
++    80006564:	00fc0733          	add	a4,s8,a5
++    80006568:	975e                	add	a4,a4,s7
++    8000656a:	00070c23          	sb	zero,24(a4)
++    idx[i] = alloc_desc();
++    8000656e:	c19c                	sw	a5,0(a1)
++    if(idx[i] < 0){
++    80006570:	0207c563          	bltz	a5,8000659a <virtio_disk_rw+0x88>
++  for(int i = 0; i < 3; i++){
++    80006574:	2905                	addiw	s2,s2,1
++    80006576:	0611                	addi	a2,a2,4 # 2004 <_entry-0x7fffdffc>
++    80006578:	19690c63          	beq	s2,s6,80006710 <virtio_disk_rw+0x1fe>
++    idx[i] = alloc_desc();
++    8000657c:	85b2                	mv	a1,a2
++  for(int i = 0; i < NUM; i++){
++    8000657e:	00022717          	auipc	a4,0x22
++    80006582:	a9a70713          	addi	a4,a4,-1382 # 80028018 <disk+0x2018>
++    80006586:	87ce                	mv	a5,s3
++    if(disk.free[i]){
++    80006588:	00074683          	lbu	a3,0(a4)
++    8000658c:	fee1                	bnez	a3,80006564 <virtio_disk_rw+0x52>
++  for(int i = 0; i < NUM; i++){
++    8000658e:	2785                	addiw	a5,a5,1
++    80006590:	0705                	addi	a4,a4,1
++    80006592:	fe979be3          	bne	a5,s1,80006588 <virtio_disk_rw+0x76>
++    idx[i] = alloc_desc();
++    80006596:	57fd                	li	a5,-1
++    80006598:	c19c                	sw	a5,0(a1)
++      for(int j = 0; j < i; j++)
++    8000659a:	01205d63          	blez	s2,800065b4 <virtio_disk_rw+0xa2>
++    8000659e:	8dce                	mv	s11,s3
++        free_desc(idx[j]);
++    800065a0:	000a2503          	lw	a0,0(s4)
++    800065a4:	00000097          	auipc	ra,0x0
++    800065a8:	d92080e7          	jalr	-622(ra) # 80006336 <free_desc>
++      for(int j = 0; j < i; j++)
++    800065ac:	2d85                	addiw	s11,s11,1
++    800065ae:	0a11                	addi	s4,s4,4
++    800065b0:	ff2d98e3          	bne	s11,s2,800065a0 <virtio_disk_rw+0x8e>
++  int idx[3];
++  while(1){
++    if(alloc3_desc(idx) == 0) {
++      break;
++    }
++    sleep(&disk.free[0], &disk.vdisk_lock);
++    800065b4:	00022597          	auipc	a1,0x22
++    800065b8:	b7458593          	addi	a1,a1,-1164 # 80028128 <disk+0x2128>
++    800065bc:	00022517          	auipc	a0,0x22
++    800065c0:	a5c50513          	addi	a0,a0,-1444 # 80028018 <disk+0x2018>
++    800065c4:	ffffc097          	auipc	ra,0xffffc
++    800065c8:	fe8080e7          	jalr	-24(ra) # 800025ac <sleep>
++  for(int i = 0; i < 3; i++){
++    800065cc:	f8040a13          	addi	s4,s0,-128
++{
++    800065d0:	8652                	mv	a2,s4
++  for(int i = 0; i < 3; i++){
++    800065d2:	894e                	mv	s2,s3
++    800065d4:	b765                	j	8000657c <virtio_disk_rw+0x6a>
++  disk.desc[idx[0]].next = idx[1];
++
++  disk.desc[idx[1]].addr = (uint64) b->data;
++  disk.desc[idx[1]].len = BSIZE;
++  if(write)
++    disk.desc[idx[1]].flags = 0; // device reads b->data
++    800065d6:	00022697          	auipc	a3,0x22
++    800065da:	a2a6b683          	ld	a3,-1494(a3) # 80028000 <disk+0x2000>
++    800065de:	96ba                	add	a3,a3,a4
++    800065e0:	00069623          	sh	zero,12(a3)
++  else
++    disk.desc[idx[1]].flags = VRING_DESC_F_WRITE; // device writes b->data
++  disk.desc[idx[1]].flags |= VRING_DESC_F_NEXT;
++    800065e4:	00020817          	auipc	a6,0x20
++    800065e8:	a1c80813          	addi	a6,a6,-1508 # 80026000 <disk>
++    800065ec:	00022697          	auipc	a3,0x22
++    800065f0:	a1468693          	addi	a3,a3,-1516 # 80028000 <disk+0x2000>
++    800065f4:	6290                	ld	a2,0(a3)
++    800065f6:	963a                	add	a2,a2,a4
++    800065f8:	00c65583          	lhu	a1,12(a2)
++    800065fc:	0015e593          	ori	a1,a1,1
++    80006600:	00b61623          	sh	a1,12(a2)
++  disk.desc[idx[1]].next = idx[2];
++    80006604:	f8842603          	lw	a2,-120(s0)
++    80006608:	628c                	ld	a1,0(a3)
++    8000660a:	972e                	add	a4,a4,a1
++    8000660c:	00c71723          	sh	a2,14(a4)
++
++  disk.info[idx[0]].status = 0xff; // device writes 0 on success
++    80006610:	20050593          	addi	a1,a0,512
++    80006614:	0592                	slli	a1,a1,0x4
++    80006616:	95c2                	add	a1,a1,a6
++    80006618:	577d                	li	a4,-1
++    8000661a:	02e58823          	sb	a4,48(a1)
++  disk.desc[idx[2]].addr = (uint64) &disk.info[idx[0]].status;
++    8000661e:	00461713          	slli	a4,a2,0x4
++    80006622:	6290                	ld	a2,0(a3)
++    80006624:	963a                	add	a2,a2,a4
++    80006626:	03078793          	addi	a5,a5,48
++    8000662a:	97c2                	add	a5,a5,a6
++    8000662c:	e21c                	sd	a5,0(a2)
++  disk.desc[idx[2]].len = 1;
++    8000662e:	629c                	ld	a5,0(a3)
++    80006630:	97ba                	add	a5,a5,a4
++    80006632:	4605                	li	a2,1
++    80006634:	c790                	sw	a2,8(a5)
++  disk.desc[idx[2]].flags = VRING_DESC_F_WRITE; // device writes the status
++    80006636:	629c                	ld	a5,0(a3)
++    80006638:	97ba                	add	a5,a5,a4
++    8000663a:	4809                	li	a6,2
++    8000663c:	01079623          	sh	a6,12(a5)
++  disk.desc[idx[2]].next = 0;
++    80006640:	629c                	ld	a5,0(a3)
++    80006642:	97ba                	add	a5,a5,a4
++    80006644:	00079723          	sh	zero,14(a5)
++
++  // record struct buf for virtio_disk_intr().
++  b->disk = 1;
++    80006648:	00caa223          	sw	a2,4(s5)
++  disk.info[idx[0]].b = b;
++    8000664c:	0355b423          	sd	s5,40(a1)
++
++  // tell the device the first index in our chain of descriptors.
++  disk.avail->ring[disk.avail->idx % NUM] = idx[0];
++    80006650:	6698                	ld	a4,8(a3)
++    80006652:	00275783          	lhu	a5,2(a4)
++    80006656:	8b9d                	andi	a5,a5,7
++    80006658:	0786                	slli	a5,a5,0x1
++    8000665a:	973e                	add	a4,a4,a5
++    8000665c:	00a71223          	sh	a0,4(a4)
++
++  __sync_synchronize();
++    80006660:	0ff0000f          	fence
++
++  // tell the device another avail ring entry is available.
++  disk.avail->idx += 1; // not % NUM ...
++    80006664:	6698                	ld	a4,8(a3)
++    80006666:	00275783          	lhu	a5,2(a4)
++    8000666a:	2785                	addiw	a5,a5,1
++    8000666c:	00f71123          	sh	a5,2(a4)
++
++  __sync_synchronize();
++    80006670:	0ff0000f          	fence
++
++  *R(VIRTIO_MMIO_QUEUE_NOTIFY) = 0; // value is queue number
++    80006674:	100017b7          	lui	a5,0x10001
++    80006678:	0407a823          	sw	zero,80(a5) # 10001050 <_entry-0x6fffefb0>
++
++  // Wait for virtio_disk_intr() to say request has finished.
++  while(b->disk == 1) {
++    8000667c:	004aa783          	lw	a5,4(s5)
++    80006680:	02c79163          	bne	a5,a2,800066a2 <virtio_disk_rw+0x190>
++    sleep(b, &disk.vdisk_lock);
++    80006684:	00022917          	auipc	s2,0x22
++    80006688:	aa490913          	addi	s2,s2,-1372 # 80028128 <disk+0x2128>
++  while(b->disk == 1) {
++    8000668c:	4485                	li	s1,1
++    sleep(b, &disk.vdisk_lock);
++    8000668e:	85ca                	mv	a1,s2
++    80006690:	8556                	mv	a0,s5
++    80006692:	ffffc097          	auipc	ra,0xffffc
++    80006696:	f1a080e7          	jalr	-230(ra) # 800025ac <sleep>
++  while(b->disk == 1) {
++    8000669a:	004aa783          	lw	a5,4(s5)
++    8000669e:	fe9788e3          	beq	a5,s1,8000668e <virtio_disk_rw+0x17c>
++  }
++
++  disk.info[idx[0]].b = 0;
++    800066a2:	f8042903          	lw	s2,-128(s0)
++    800066a6:	20090713          	addi	a4,s2,512
++    800066aa:	0712                	slli	a4,a4,0x4
++    800066ac:	00020797          	auipc	a5,0x20
++    800066b0:	95478793          	addi	a5,a5,-1708 # 80026000 <disk>
++    800066b4:	97ba                	add	a5,a5,a4
++    800066b6:	0207b423          	sd	zero,40(a5)
++    int flag = disk.desc[i].flags;
++    800066ba:	00022997          	auipc	s3,0x22
++    800066be:	94698993          	addi	s3,s3,-1722 # 80028000 <disk+0x2000>
++    800066c2:	00491713          	slli	a4,s2,0x4
++    800066c6:	0009b783          	ld	a5,0(s3)
++    800066ca:	97ba                	add	a5,a5,a4
++    800066cc:	00c7d483          	lhu	s1,12(a5)
++    int nxt = disk.desc[i].next;
++    800066d0:	854a                	mv	a0,s2
++    800066d2:	00e7d903          	lhu	s2,14(a5)
++    free_desc(i);
++    800066d6:	00000097          	auipc	ra,0x0
++    800066da:	c60080e7          	jalr	-928(ra) # 80006336 <free_desc>
++    if(flag & VRING_DESC_F_NEXT)
++    800066de:	8885                	andi	s1,s1,1
++    800066e0:	f0ed                	bnez	s1,800066c2 <virtio_disk_rw+0x1b0>
++  free_chain(idx[0]);
++
++  release(&disk.vdisk_lock);
++    800066e2:	00022517          	auipc	a0,0x22
++    800066e6:	a4650513          	addi	a0,a0,-1466 # 80028128 <disk+0x2128>
++    800066ea:	ffffa097          	auipc	ra,0xffffa
++    800066ee:	59a080e7          	jalr	1434(ra) # 80000c84 <release>
++}
++    800066f2:	70e6                	ld	ra,120(sp)
++    800066f4:	7446                	ld	s0,112(sp)
++    800066f6:	74a6                	ld	s1,104(sp)
++    800066f8:	7906                	ld	s2,96(sp)
++    800066fa:	69e6                	ld	s3,88(sp)
++    800066fc:	6a46                	ld	s4,80(sp)
++    800066fe:	6aa6                	ld	s5,72(sp)
++    80006700:	6b06                	ld	s6,64(sp)
++    80006702:	7be2                	ld	s7,56(sp)
++    80006704:	7c42                	ld	s8,48(sp)
++    80006706:	7ca2                	ld	s9,40(sp)
++    80006708:	7d02                	ld	s10,32(sp)
++    8000670a:	6de2                	ld	s11,24(sp)
++    8000670c:	6109                	addi	sp,sp,128
++    8000670e:	8082                	ret
++  struct virtio_blk_req *buf0 = &disk.ops[idx[0]];
++    80006710:	f8042503          	lw	a0,-128(s0)
++    80006714:	20050793          	addi	a5,a0,512
++    80006718:	0792                	slli	a5,a5,0x4
++  if(write)
++    8000671a:	00020817          	auipc	a6,0x20
++    8000671e:	8e680813          	addi	a6,a6,-1818 # 80026000 <disk>
++    80006722:	00f80733          	add	a4,a6,a5
++    80006726:	01a036b3          	snez	a3,s10
++    8000672a:	0ad72423          	sw	a3,168(a4)
++  buf0->reserved = 0;
++    8000672e:	0a072623          	sw	zero,172(a4)
++  buf0->sector = sector;
++    80006732:	0b973823          	sd	s9,176(a4)
++  disk.desc[idx[0]].addr = (uint64) buf0;
++    80006736:	7679                	lui	a2,0xffffe
++    80006738:	963e                	add	a2,a2,a5
++    8000673a:	00022697          	auipc	a3,0x22
++    8000673e:	8c668693          	addi	a3,a3,-1850 # 80028000 <disk+0x2000>
++    80006742:	6298                	ld	a4,0(a3)
++    80006744:	9732                	add	a4,a4,a2
++  struct virtio_blk_req *buf0 = &disk.ops[idx[0]];
++    80006746:	0a878593          	addi	a1,a5,168
++    8000674a:	95c2                	add	a1,a1,a6
++  disk.desc[idx[0]].addr = (uint64) buf0;
++    8000674c:	e30c                	sd	a1,0(a4)
++  disk.desc[idx[0]].len = sizeof(struct virtio_blk_req);
++    8000674e:	6298                	ld	a4,0(a3)
++    80006750:	9732                	add	a4,a4,a2
++    80006752:	45c1                	li	a1,16
++    80006754:	c70c                	sw	a1,8(a4)
++  disk.desc[idx[0]].flags = VRING_DESC_F_NEXT;
++    80006756:	6298                	ld	a4,0(a3)
++    80006758:	9732                	add	a4,a4,a2
++    8000675a:	4585                	li	a1,1
++    8000675c:	00b71623          	sh	a1,12(a4)
++  disk.desc[idx[0]].next = idx[1];
++    80006760:	f8442703          	lw	a4,-124(s0)
++    80006764:	628c                	ld	a1,0(a3)
++    80006766:	962e                	add	a2,a2,a1
++    80006768:	00e61723          	sh	a4,14(a2) # ffffffffffffe00e <end+0xffffffff7ffd500e>
++  disk.desc[idx[1]].addr = (uint64) b->data;
++    8000676c:	0712                	slli	a4,a4,0x4
++    8000676e:	6290                	ld	a2,0(a3)
++    80006770:	963a                	add	a2,a2,a4
++    80006772:	058a8593          	addi	a1,s5,88
++    80006776:	e20c                	sd	a1,0(a2)
++  disk.desc[idx[1]].len = BSIZE;
++    80006778:	6294                	ld	a3,0(a3)
++    8000677a:	96ba                	add	a3,a3,a4
++    8000677c:	40000613          	li	a2,1024
++    80006780:	c690                	sw	a2,8(a3)
++  if(write)
++    80006782:	e40d1ae3          	bnez	s10,800065d6 <virtio_disk_rw+0xc4>
++    disk.desc[idx[1]].flags = VRING_DESC_F_WRITE; // device writes b->data
++    80006786:	00022697          	auipc	a3,0x22
++    8000678a:	87a6b683          	ld	a3,-1926(a3) # 80028000 <disk+0x2000>
++    8000678e:	96ba                	add	a3,a3,a4
++    80006790:	4609                	li	a2,2
++    80006792:	00c69623          	sh	a2,12(a3)
++    80006796:	b5b9                	j	800065e4 <virtio_disk_rw+0xd2>
++
++0000000080006798 <virtio_disk_intr>:
++
++void
++virtio_disk_intr()
++{
++    80006798:	1101                	addi	sp,sp,-32
++    8000679a:	ec06                	sd	ra,24(sp)
++    8000679c:	e822                	sd	s0,16(sp)
++    8000679e:	e426                	sd	s1,8(sp)
++    800067a0:	e04a                	sd	s2,0(sp)
++    800067a2:	1000                	addi	s0,sp,32
++  acquire(&disk.vdisk_lock);
++    800067a4:	00022517          	auipc	a0,0x22
++    800067a8:	98450513          	addi	a0,a0,-1660 # 80028128 <disk+0x2128>
++    800067ac:	ffffa097          	auipc	ra,0xffffa
++    800067b0:	424080e7          	jalr	1060(ra) # 80000bd0 <acquire>
++  // we've seen this interrupt, which the following line does.
++  // this may race with the device writing new entries to
++  // the "used" ring, in which case we may process the new
++  // completion entries in this interrupt, and have nothing to do
++  // in the next interrupt, which is harmless.
++  *R(VIRTIO_MMIO_INTERRUPT_ACK) = *R(VIRTIO_MMIO_INTERRUPT_STATUS) & 0x3;
++    800067b4:	10001737          	lui	a4,0x10001
++    800067b8:	533c                	lw	a5,96(a4)
++    800067ba:	8b8d                	andi	a5,a5,3
++    800067bc:	d37c                	sw	a5,100(a4)
++
++  __sync_synchronize();
++    800067be:	0ff0000f          	fence
++
++  // the device increments disk.used->idx when it
++  // adds an entry to the used ring.
++
++  while(disk.used_idx != disk.used->idx){
++    800067c2:	00022797          	auipc	a5,0x22
++    800067c6:	83e78793          	addi	a5,a5,-1986 # 80028000 <disk+0x2000>
++    800067ca:	6b94                	ld	a3,16(a5)
++    800067cc:	0207d703          	lhu	a4,32(a5)
++    800067d0:	0026d783          	lhu	a5,2(a3)
++    800067d4:	06f70163          	beq	a4,a5,80006836 <virtio_disk_intr+0x9e>
++    __sync_synchronize();
++    int id = disk.used->ring[disk.used_idx % NUM].id;
++    800067d8:	00020917          	auipc	s2,0x20
++    800067dc:	82890913          	addi	s2,s2,-2008 # 80026000 <disk>
++    800067e0:	00022497          	auipc	s1,0x22
++    800067e4:	82048493          	addi	s1,s1,-2016 # 80028000 <disk+0x2000>
++    __sync_synchronize();
++    800067e8:	0ff0000f          	fence
++    int id = disk.used->ring[disk.used_idx % NUM].id;
++    800067ec:	6898                	ld	a4,16(s1)
++    800067ee:	0204d783          	lhu	a5,32(s1)
++    800067f2:	8b9d                	andi	a5,a5,7
++    800067f4:	078e                	slli	a5,a5,0x3
++    800067f6:	97ba                	add	a5,a5,a4
++    800067f8:	43dc                	lw	a5,4(a5)
++
++    if(disk.info[id].status != 0)
++    800067fa:	20078713          	addi	a4,a5,512
++    800067fe:	0712                	slli	a4,a4,0x4
++    80006800:	974a                	add	a4,a4,s2
++    80006802:	03074703          	lbu	a4,48(a4) # 10001030 <_entry-0x6fffefd0>
++    80006806:	e731                	bnez	a4,80006852 <virtio_disk_intr+0xba>
++      panic("virtio_disk_intr status");
++
++    struct buf *b = disk.info[id].b;
++    80006808:	20078793          	addi	a5,a5,512
++    8000680c:	0792                	slli	a5,a5,0x4
++    8000680e:	97ca                	add	a5,a5,s2
++    80006810:	7788                	ld	a0,40(a5)
++    b->disk = 0;   // disk is done with buf
++    80006812:	00052223          	sw	zero,4(a0)
++    wakeup(b);
++    80006816:	ffffc097          	auipc	ra,0xffffc
++    8000681a:	f22080e7          	jalr	-222(ra) # 80002738 <wakeup>
++
++    disk.used_idx += 1;
++    8000681e:	0204d783          	lhu	a5,32(s1)
++    80006822:	2785                	addiw	a5,a5,1
++    80006824:	17c2                	slli	a5,a5,0x30
++    80006826:	93c1                	srli	a5,a5,0x30
++    80006828:	02f49023          	sh	a5,32(s1)
++  while(disk.used_idx != disk.used->idx){
++    8000682c:	6898                	ld	a4,16(s1)
++    8000682e:	00275703          	lhu	a4,2(a4)
++    80006832:	faf71be3          	bne	a4,a5,800067e8 <virtio_disk_intr+0x50>
++  }
++
++  release(&disk.vdisk_lock);
++    80006836:	00022517          	auipc	a0,0x22
++    8000683a:	8f250513          	addi	a0,a0,-1806 # 80028128 <disk+0x2128>
++    8000683e:	ffffa097          	auipc	ra,0xffffa
++    80006842:	446080e7          	jalr	1094(ra) # 80000c84 <release>
++}
++    80006846:	60e2                	ld	ra,24(sp)
++    80006848:	6442                	ld	s0,16(sp)
++    8000684a:	64a2                	ld	s1,8(sp)
++    8000684c:	6902                	ld	s2,0(sp)
++    8000684e:	6105                	addi	sp,sp,32
++    80006850:	8082                	ret
++      panic("virtio_disk_intr status");
++    80006852:	00002517          	auipc	a0,0x2
++    80006856:	01650513          	addi	a0,a0,22 # 80008868 <syscalls+0x3e0>
++    8000685a:	ffffa097          	auipc	ra,0xffffa
++    8000685e:	ce0080e7          	jalr	-800(ra) # 8000053a <panic>
++	...
++
++0000000080007000 <_trampoline>:
++    80007000:	14051573          	csrrw	a0,sscratch,a0
++    80007004:	02153423          	sd	ra,40(a0)
++    80007008:	02253823          	sd	sp,48(a0)
++    8000700c:	02353c23          	sd	gp,56(a0)
++    80007010:	04453023          	sd	tp,64(a0)
++    80007014:	04553423          	sd	t0,72(a0)
++    80007018:	04653823          	sd	t1,80(a0)
++    8000701c:	04753c23          	sd	t2,88(a0)
++    80007020:	f120                	sd	s0,96(a0)
++    80007022:	f524                	sd	s1,104(a0)
++    80007024:	fd2c                	sd	a1,120(a0)
++    80007026:	e150                	sd	a2,128(a0)
++    80007028:	e554                	sd	a3,136(a0)
++    8000702a:	e958                	sd	a4,144(a0)
++    8000702c:	ed5c                	sd	a5,152(a0)
++    8000702e:	0b053023          	sd	a6,160(a0)
++    80007032:	0b153423          	sd	a7,168(a0)
++    80007036:	0b253823          	sd	s2,176(a0)
++    8000703a:	0b353c23          	sd	s3,184(a0)
++    8000703e:	0d453023          	sd	s4,192(a0)
++    80007042:	0d553423          	sd	s5,200(a0)
++    80007046:	0d653823          	sd	s6,208(a0)
++    8000704a:	0d753c23          	sd	s7,216(a0)
++    8000704e:	0f853023          	sd	s8,224(a0)
++    80007052:	0f953423          	sd	s9,232(a0)
++    80007056:	0fa53823          	sd	s10,240(a0)
++    8000705a:	0fb53c23          	sd	s11,248(a0)
++    8000705e:	11c53023          	sd	t3,256(a0)
++    80007062:	11d53423          	sd	t4,264(a0)
++    80007066:	11e53823          	sd	t5,272(a0)
++    8000706a:	11f53c23          	sd	t6,280(a0)
++    8000706e:	140022f3          	csrr	t0,sscratch
++    80007072:	06553823          	sd	t0,112(a0)
++    80007076:	00853103          	ld	sp,8(a0)
++    8000707a:	02053203          	ld	tp,32(a0)
++    8000707e:	01053283          	ld	t0,16(a0)
++    80007082:	00053303          	ld	t1,0(a0)
++    80007086:	18031073          	csrw	satp,t1
++    8000708a:	12000073          	sfence.vma
++    8000708e:	8282                	jr	t0
++
++0000000080007090 <userret>:
++    80007090:	18059073          	csrw	satp,a1
++    80007094:	12000073          	sfence.vma
++    80007098:	07053283          	ld	t0,112(a0)
++    8000709c:	14029073          	csrw	sscratch,t0
++    800070a0:	02853083          	ld	ra,40(a0)
++    800070a4:	03053103          	ld	sp,48(a0)
++    800070a8:	03853183          	ld	gp,56(a0)
++    800070ac:	04053203          	ld	tp,64(a0)
++    800070b0:	04853283          	ld	t0,72(a0)
++    800070b4:	05053303          	ld	t1,80(a0)
++    800070b8:	05853383          	ld	t2,88(a0)
++    800070bc:	7120                	ld	s0,96(a0)
++    800070be:	7524                	ld	s1,104(a0)
++    800070c0:	7d2c                	ld	a1,120(a0)
++    800070c2:	6150                	ld	a2,128(a0)
++    800070c4:	6554                	ld	a3,136(a0)
++    800070c6:	6958                	ld	a4,144(a0)
++    800070c8:	6d5c                	ld	a5,152(a0)
++    800070ca:	0a053803          	ld	a6,160(a0)
++    800070ce:	0a853883          	ld	a7,168(a0)
++    800070d2:	0b053903          	ld	s2,176(a0)
++    800070d6:	0b853983          	ld	s3,184(a0)
++    800070da:	0c053a03          	ld	s4,192(a0)
++    800070de:	0c853a83          	ld	s5,200(a0)
++    800070e2:	0d053b03          	ld	s6,208(a0)
++    800070e6:	0d853b83          	ld	s7,216(a0)
++    800070ea:	0e053c03          	ld	s8,224(a0)
++    800070ee:	0e853c83          	ld	s9,232(a0)
++    800070f2:	0f053d03          	ld	s10,240(a0)
++    800070f6:	0f853d83          	ld	s11,248(a0)
++    800070fa:	10053e03          	ld	t3,256(a0)
++    800070fe:	10853e83          	ld	t4,264(a0)
++    80007102:	11053f03          	ld	t5,272(a0)
++    80007106:	11853f83          	ld	t6,280(a0)
++    8000710a:	14051573          	csrrw	a0,sscratch,a0
++    8000710e:	10200073          	sret
++	...
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/kernel.sym os-workshop/kernel/kernel.sym
+--- xv6-riscv/kernel/kernel.sym	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/kernel/kernel.sym	2022-05-28 22:34:29.000000000 -0300
+@@ -0,0 +1,283 @@
++0000000080000000 .text
++0000000080008000 .rodata
++0000000080008880 .data
++0000000080009000 .bss
++0000000000000000 .riscv.attributes
++0000000000000000 .comment
++0000000000000000 .debug_info
++0000000000000000 .debug_abbrev
++0000000000000000 .debug_loclists
++0000000000000000 .debug_aranges
++0000000000000000 .debug_rnglists
++0000000000000000 .debug_line
++0000000000000000 .debug_str
++0000000000000000 .debug_line_str
++0000000000000000 .debug_frame
++0000000000000000 entry.o
++000000008000001a spin
++0000000000000000 start.c
++0000000000000000 console.c
++0000000000000000 printf.c
++0000000080000496 printint
++0000000080008030 digits
++0000000080011228 pr
++0000000000000000 uart.c
++0000000000000000 kalloc.c
++0000000000000000 spinlock.c
++0000000000000000 string.c
++0000000000000000 main.c
++0000000080009018 started
++0000000000000000 vm.c
++0000000000000000 sem.c
++0000000000000000 proc.c
++0000000080001b4e makerunnable
++0000000080008880 first.1
++0000000080001f28 freeproc
++0000000080001f80 allocproc
++0000000080008300 states.0
++0000000000000000 swtch.o
++0000000000000000 trap.c
++0000000000000000 syscall.c
++0000000080002f50 argraw
++0000000080008488 syscalls
++0000000000000000 sysproc.c
++0000000000000000 syssem.c
++0000000000000000 bio.c
++0000000000000000 fs.c
++000000008000374c bfree
++00000000800037c8 balloc
++00000000800038f6 bmap
++00000000800039d2 iget
++000000008000429c namex
++0000000000000000 log.c
++00000000800044fe write_head
++000000008000457a install_trans
++0000000000000000 sleeplock.c
++0000000000000000 file.c
++0000000000000000 pipe.c
++0000000000000000 exec.c
++0000000000000000 sysfile.c
++00000000800055a8 argfd
++0000000080005610 fdalloc
++0000000080005652 create
++0000000000000000 kernelvec.o
++0000000000000000 plic.c
++0000000000000000 virtio_disk.c
++0000000080006336 free_desc
++0000000080026000 disk
++000000008000109c mappages
++000000008000177c copyinstr
++0000000080000164 consoleread
++0000000080000e16 safestrcpy
++00000000800058d6 sys_close
++0000000080002564 yield
++0000000080024868 log
++0000000080011280 kmem
++0000000080000796 uartinit
++0000000080002974 either_copyout
++000000008000001c timerinit
++00000000800126c8 proc
++0000000080004ce6 fileread
++0000000080000584 printf
++000000008000321a sys_sbrk
++0000000080007000 trampoline
++0000000080009000 panicked
++00000000800062e8 plic_claim
++00000000800112a0 sem
++0000000080011260 uart_tx_buf
++000000008000629a plicinit
++000000008000630c plic_complete
++000000008000248e sched
++0000000080000d28 memmove
++00000000800030c6 syscall
++0000000080001d4a cpuid
++00000000800040b4 writei
++00000000800031d0 sys_fork
++000000008001a6e0 bcache
++0000000080005e26 sys_mkdir
++0000000080001262 uvmunmap
++00000000800041d2 namecmp
++00000000800062b0 plicinithart
++00000000800027b4 reparent
++0000000080001a0a semdown
++0000000080003096 argstr
++00000000800013c6 uvmdealloc
++0000000080003180 sys_setp
++0000000080004b5a filedup
++00000000800044c4 namei
++0000000080003478 binit
++000000008000187e semget
++0000000080001630 uvmclear
++00000000800033be sys_semget
++000000008000580a sys_read
++0000000080003a8e fsinit
++0000000080000d84 memcpy
++000000008000113c kvmmap
++0000000080000832 uartstart
++00000000800009e2 kfree
++0000000080001d5a mycpu
++0000000080003ec2 iput
++000000008000116c kvmmake
++0000000080003384 sys_timeout
++0000000080002cb2 devintr
++0000000080008884 nextpid
++000000008000344e sys_semclose
++0000000080001996 semclose
++0000000080004ac8 fileinit
++0000000080007090 userret
++0000000080000b40 initlock
++0000000080001662 copyout
++00000000800025ac sleep
++00000000800061e0 kernelvec
++0000000080003f92 stati
++00000000800122b0 wait_lock
++0000000080003310 sys_kill
++0000000080004fb6 pipeclose
++0000000080005924 sys_fstat
++0000000080000100 consolewrite
++0000000080004762 end_op
++0000000080000a58 freerange
++0000000080000f90 kvminithart
++00000000800022c0 ageprocs
++000000008000140e uvmalloc
++0000000080001354 uvminit
++000000008000155e uvmcopy
++0000000080009028 initproc
++0000000080001ed6 proc_freepagetable
++0000000080003dca iunlock
++0000000080001e3a proc_pagetable
++0000000080009180 stack0
++0000000080003264 sys_sleep
++0000000080005972 sys_link
++0000000080004af0 filealloc
++0000000080002738 wakeup
++00000000800033fa sys_semdown
++00000000800063d0 virtio_disk_init
++0000000080001d76 myproc
++0000000080003cca idup
++0000000080009008 uart_tx_r
++0000000080000fb4 walk
++0000000080005c8e sys_open
++0000000080009010 uart_tx_w
++0000000080003fbc readi
++0000000080012240 mlf_lock
++00000000800002b8 consoleintr
++0000000080000276 consputc
++00000000800028f8 kill
++0000000080001df4 allocpid
++0000000080003b6e ialloc
++0000000080000992 uartintr
++00000000800016ee copyin
++0000000080002b74 trapinit
++0000000080001524 uvmfree
++0000000080029000 end
++0000000080003e16 itrunc
++0000000080004da8 filewrite
++0000000080002ad0 get_sid
++0000000080003052 argint
++0000000080005200 exec
++0000000080008000 etext
++0000000080005870 sys_write
++0000000080000c84 release
++000000008000300a fetchstr
++0000000080002610 wait
++0000000080002bb4 usertrapret
++0000000080002382 scheduler
++0000000080007000 _trampoline
++00000000800041ec dirlookup
++00000000800046e4 begin_op
++0000000080004bac fileclose
++0000000080002d54 usertrap
++0000000080000d9c strncmp
++000000008001a6c8 tickslock
++0000000080005026 pipewrite
++0000000080000dd8 strncpy
++00000000800249b0 ftable
++0000000080006798 virtio_disk_intr
++00000000800057b8 sys_dup
++000000008000053a panic
++0000000080001dae forkret
++0000000080000aa4 kinit
++0000000080000cee memcmp
++00000000800029ca either_copyin
++0000000080002150 fork
++0000000080002c52 clockintr
++00000000800122c8 cpus
++0000000080004a2e releasesleep
++0000000080000000 _entry
++0000000080000b56 holding
++0000000080022da0 sb
++0000000080000bd0 acquire
++00000000800044e2 nameiparent
++0000000080008890 initcode
++0000000080002b9c trapinithart
++0000000080003c3c iupdate
++0000000080000ccc memset
++0000000080000e72 main
++00000000800048ba log_write
++00000000800049d8 acquiresleep
++0000000080005abc sys_unlink
++0000000080007000 uservec
++0000000080001242 kvminit
++0000000080003710 bunpin
++0000000080003074 argaddr
++0000000080012258 mlf
++0000000080003342 sys_uptime
++000000008000096e uartgetc
++0000000080000764 printfinit
++0000000080011248 uart_tx_lock
++0000000080001326 uvmcreate
++00000000800020d8 growproc
++0000000080004a72 holdingsleep
++000000008000204e userinit
++0000000080003506 bread
++0000000080005118 piperead
++0000000080009030 ticks
++000000008000044a consoleinit
++000000008000105a walkaddr
++0000000080002a20 procdump
++00000000800008b8 uartputc
++0000000080001b0a semdup
++0000000080003636 brelse
++0000000080003d08 ilock
++0000000080005fb6 sys_exec
++0000000080002b0a swtch
++0000000080003f6a iunlockput
++0000000080000b84 push_off
++0000000080000c24 pop_off
++00000000800035f8 bwrite
++00000000800007e6 uartputc_sync
++000000008000280e exit
++00000000800014b8 freewalk
++00000000800031e8 sys_wait
++0000000080003132 sys_exit
++0000000080004402 dirlink
++000000008000499e initsleeplock
++000000008000008c start
++0000000080009020 kernel_pagetable
++000000008000182c seminit
++0000000080009040 timer_scratch
++0000000080006512 virtio_disk_rw
++0000000080000e48 strlen
++00000000800060c6 sys_pipe
++0000000080003b0e iinit
++0000000080001aa4 semup
++000000008000463e initlog
++0000000080011180 cons
++0000000080000ae0 kalloc
++0000000080002fb8 fetchaddr
++0000000080024910 devsw
++0000000080003166 sys_getpid
++0000000080004edc pipealloc
++0000000080005f0e sys_chdir
++0000000080001c14 proc_mapstacks
++0000000080003424 sys_semup
++0000000080006270 timervec
++0000000080001960 is_valid_sid
++0000000080002e66 kerneltrap
++00000000800036d4 bpin
++0000000080001c96 procinit
++0000000080022dc0 itable
++0000000080005e86 sys_mknod
++0000000080004c74 filestat
++0000000080012298 pid_lock
+Binary files xv6-riscv/kernel/kernelvec.o and os-workshop/kernel/kernelvec.o differ
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/log.d os-workshop/kernel/log.d
+--- xv6-riscv/kernel/log.d	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/kernel/log.d	2022-05-28 22:34:27.000000000 -0300
+@@ -0,0 +1,3 @@
++kernel/log.o: kernel/log.c kernel/types.h kernel/riscv.h kernel/defs.h \
++ kernel/param.h kernel/spinlock.h kernel/sleeplock.h kernel/fs.h \
++ kernel/buf.h
+Binary files xv6-riscv/kernel/log.o and os-workshop/kernel/log.o differ
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/main.c os-workshop/kernel/main.c
+--- xv6-riscv/kernel/main.c	2022-05-28 22:43:35.000000000 -0300
++++ os-workshop/kernel/main.c	2022-05-26 17:09:31.000000000 -0300
+@@ -19,6 +19,7 @@ main()
+     kinit();         // physical page allocator
+     kvminit();       // create kernel page table
+     kvminithart();   // turn on paging
++    seminit();       // semaphore table
+     procinit();      // process table
+     trapinit();      // trap vectors
+     trapinithart();  // install kernel trap vector
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/main.d os-workshop/kernel/main.d
+--- xv6-riscv/kernel/main.d	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/kernel/main.d	2022-05-28 22:34:24.000000000 -0300
+@@ -0,0 +1,2 @@
++kernel/main.o: kernel/main.c kernel/types.h kernel/param.h \
++ kernel/memlayout.h kernel/riscv.h kernel/defs.h
+Binary files xv6-riscv/kernel/main.o and os-workshop/kernel/main.o differ
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/param.h os-workshop/kernel/param.h
+--- xv6-riscv/kernel/param.h	2022-05-28 22:43:35.000000000 -0300
++++ os-workshop/kernel/param.h	2022-05-26 17:09:31.000000000 -0300
+@@ -11,3 +11,10 @@
+ #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
+ #define FSSIZE       1000  // size of file system in blocks
+ #define MAXPATH      128   // maximum file path name
++#define QUANTUM      2    // maximum number of ticks per process
++#define MLFLEVELS    4     // number of levels in multilevel feedback array
++#define MAXAGE       5     // process max age
++#define TIMEUNIT     10    // process time unit
++#define NOSEM        16    // open semaphores per processs
++#define NSEM         100   // open semaphores per system
++
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/pipe.d os-workshop/kernel/pipe.d
+--- xv6-riscv/kernel/pipe.d	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/kernel/pipe.d	2022-05-28 22:34:27.000000000 -0300
+@@ -0,0 +1,3 @@
++kernel/pipe.o: kernel/pipe.c kernel/types.h kernel/riscv.h kernel/defs.h \
++ kernel/param.h kernel/spinlock.h kernel/proc.h kernel/fs.h \
++ kernel/sleeplock.h kernel/file.h
+Binary files xv6-riscv/kernel/pipe.o and os-workshop/kernel/pipe.o differ
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/plic.d os-workshop/kernel/plic.d
+--- xv6-riscv/kernel/plic.d	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/kernel/plic.d	2022-05-28 22:34:28.000000000 -0300
+@@ -0,0 +1,2 @@
++kernel/plic.o: kernel/plic.c kernel/types.h kernel/param.h \
++ kernel/memlayout.h kernel/riscv.h kernel/defs.h
+Binary files xv6-riscv/kernel/plic.o and os-workshop/kernel/plic.o differ
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/printf.d os-workshop/kernel/printf.d
+--- xv6-riscv/kernel/printf.d	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/kernel/printf.d	2022-05-28 22:34:23.000000000 -0300
+@@ -0,0 +1,5 @@
++kernel/printf.o: kernel/printf.c \
++ /usr/local/Cellar/riscv-gnu-toolchain/main/lib/gcc/riscv64-unknown-elf/11.1.0/include/stdarg.h \
++ kernel/types.h kernel/param.h kernel/spinlock.h kernel/sleeplock.h \
++ kernel/fs.h kernel/file.h kernel/memlayout.h kernel/riscv.h \
++ kernel/defs.h kernel/proc.h
+Binary files xv6-riscv/kernel/printf.o and os-workshop/kernel/printf.o differ
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/proc.c os-workshop/kernel/proc.c
+--- xv6-riscv/kernel/proc.c	2022-05-28 22:43:35.000000000 -0300
++++ os-workshop/kernel/proc.c	2022-05-28 21:31:32.000000000 -0300
+@@ -12,11 +12,16 @@ struct proc proc[NPROC];
+ 
+ struct proc *initproc;
+ 
++struct mlf mlf[MLFLEVELS];
++struct spinlock mlf_lock;
++
+ int nextpid = 1;
+ struct spinlock pid_lock;
+-
++extern uint ticks;
+ extern void forkret(void);
+ static void freeproc(struct proc *p);
++static void makerunnable(int level, struct proc *node);
++static struct proc* dequeue();
+ 
+ extern char trampoline[]; // trampoline.S
+ 
+@@ -50,6 +55,7 @@ procinit(void)
+   
+   initlock(&pid_lock, "nextpid");
+   initlock(&wait_lock, "wait_lock");
++  initlock(&mlf_lock, "mlf");
+   for(p = proc; p < &proc[NPROC]; p++) {
+       initlock(&p->lock, "proc");
+       p->kstack = KSTACK((int) (p - proc));
+@@ -242,7 +248,7 @@ userinit(void)
+   safestrcpy(p->name, "initcode", sizeof(p->name));
+   p->cwd = namei("/");
+ 
+-  p->state = RUNNABLE;
++  makerunnable(1,p);
+ 
+   release(&p->lock);
+ }
+@@ -301,6 +307,11 @@ fork(void)
+       np->ofile[i] = filedup(p->ofile[i]);
+   np->cwd = idup(p->cwd);
+ 
++  // increment reference counts on semaphores descriptors.
++  for(i = 0; i < NOSEM; i++)
++    if(p->osem[i])
++      np->osem[i] = semdup(p->osem[i]);
++
+   safestrcpy(np->name, p->name, sizeof(p->name));
+ 
+   pid = np->pid;
+@@ -312,12 +323,88 @@ fork(void)
+   release(&wait_lock);
+ 
+   acquire(&np->lock);
+-  np->state = RUNNABLE;
++  //Add the new process at parent's level end 
++  makerunnable(p->mlflevel,np);
+   release(&np->lock);
+ 
+   return pid;
+ }
+ 
++static void
++makerunnable(int level, struct proc *p){
++  int holding_status = holding(&mlf_lock);
++  if(!holding_status){
++    acquire(&mlf_lock);
++  }
++  if(level > MLFLEVELS){
++    level = MLFLEVELS;
++  }
++  else if(level < 1){
++    level = 1;
++  }
++  if(mlf[level-1].last == 0){
++    mlf[level-1].last = p;
++    mlf[level-1].top = p;
++  }
++  else{
++    struct proc *last = mlf[level-1].last;
++    last->next = p;
++    mlf[level-1].last = p;
++  }
++  p->next = 0;
++  p->age = ticks;
++  p->mlflevel = level;
++  p->state = RUNNABLE;
++  if(!holding_status){
++    release(&mlf_lock);
++  }
++}
++
++static struct proc*
++dequeue(){
++  acquire(&mlf_lock);
++  for(int index = 0; index < MLFLEVELS; index++){
++    if(mlf[index].top != 0){
++      struct proc *first = mlf[index].top;
++      mlf[index].top = first->next;
++      if(!mlf[index].top){
++        mlf[index].last = 0;
++      }
++      release(&mlf_lock);
++      return first;
++    }
++  }
++  release(&mlf_lock);
++  return 0;
++}
++
++// Apply the aging strategy to all runnable processes
++void
++ageprocs()
++{
++  acquire(&mlf_lock);
++  for(int index = 1; index < MLFLEVELS; index++){
++    struct proc *current = mlf[index].top;
++    if(!current || holding(&current->lock)){
++      continue;
++    }
++    acquire(&current->lock);
++    if(ticks - current->age > MAXAGE){
++      //Remove the process from the current level
++      if(current->next != 0){
++        mlf[index].top = current->next;
++      } else{
++        mlf[index].top = 0;
++        mlf[index].last = 0;
++      }
++      //Add the process in a higher priority level
++      makerunnable(index-1,current);
++    }
++    release(&current->lock);
++  }
++  release(&mlf_lock);
++}
++
+ // Pass p's abandoned children to init.
+ // Caller must hold wait_lock.
+ void
+@@ -352,6 +439,12 @@ exit(int status)
+       p->ofile[fd] = 0;
+     }
+   }
++  
++
++  //Close all open semaphores
++  for(int position = 0; position <  NOSEM ; position++){
++    semclose(position);
++  }
+ 
+   begin_op();
+   iput(p->cwd);
+@@ -445,22 +538,29 @@ scheduler(void)
+     // Avoid deadlock by ensuring that devices can interrupt.
+     intr_on();
+ 
+-    for(p = proc; p < &proc[NPROC]; p++) {
+-      acquire(&p->lock);
+-      if(p->state == RUNNABLE) {
+-        // Switch to chosen process.  It is the process's job
+-        // to release its lock and then reacquire it
+-        // before jumping back to us.
+-        p->state = RUNNING;
+-        c->proc = p;
+-        swtch(&c->context, &p->context);
+-
+-        // Process is done running for now.
+-        // It should have changed its p->state before coming back.
+-        c->proc = 0;
+-      }
+-      release(&p->lock);
++    p = dequeue();
++    if(!p){
++      continue;
+     }
++    
++    if(p->state != RUNNABLE){
++      printf("State is %d \n", p->state);
++      panic("Process is not in a runnable state");
++    }
++    acquire(&p->lock);
++    // Switch to chosen process.  It is the process's job
++    // to release its lock and then reacquire it
++    // before jumping back to us.
++    p->state = RUNNING;
++    p->age = ticks;
++    p->ticks = 0;
++    c->proc = p;
++    swtch(&c->context, &p->context);
++
++    // Process is done running for now.
++    // It should have changed its p->state before coming back.
++    c->proc = 0;
++    release(&p->lock);
+   }
+ }
+ 
+@@ -497,7 +597,7 @@ yield(void)
+ {
+   struct proc *p = myproc();
+   acquire(&p->lock);
+-  p->state = RUNNABLE;
++  makerunnable(p->mlflevel+1,p);
+   sched();
+   release(&p->lock);
+ }
+@@ -565,7 +665,7 @@ wakeup(void *chan)
+     if(p != myproc()){
+       acquire(&p->lock);
+       if(p->state == SLEEPING && p->chan == chan) {
+-        p->state = RUNNABLE;
++        makerunnable(p->mlflevel-1,p);
+       }
+       release(&p->lock);
+     }
+@@ -580,13 +680,15 @@ kill(int pid)
+ {
+   struct proc *p;
+ 
+-  for(p = proc; p < &proc[NPROC]; p++){
++  // Starts in proc + 1 because the init process has pid == 1,
++  // and we don't want to be able to kill it.
++  for(p = proc + 1; p < &proc[NPROC]; p++){
+     acquire(&p->lock);
+     if(p->pid == pid){
+       p->killed = 1;
+       if(p->state == SLEEPING){
+         // Wake process from sleep().
+-        p->state = RUNNABLE;
++        makerunnable(p->mlflevel,p);
+       }
+       release(&p->lock);
+       return 0;
+@@ -654,3 +756,15 @@ procdump(void)
+     printf("\n");
+   }
+ }
++
++int
++get_sid(void)
++{
++  for(int position = 0; position <  NOSEM ; position++){
++    if(!myproc()->osem[position]){
++      return position;
++    }
++  }
++  return -1;
++}
++
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/proc.d os-workshop/kernel/proc.d
+--- xv6-riscv/kernel/proc.d	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/kernel/proc.d	2022-05-28 22:34:25.000000000 -0300
+@@ -0,0 +1,3 @@
++kernel/proc.o: kernel/proc.c kernel/types.h kernel/param.h \
++ kernel/memlayout.h kernel/riscv.h kernel/spinlock.h kernel/proc.h \
++ kernel/defs.h
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/proc.h os-workshop/kernel/proc.h
+--- xv6-riscv/kernel/proc.h	2022-05-28 22:43:35.000000000 -0300
++++ os-workshop/kernel/proc.h	2022-05-26 17:09:31.000000000 -0300
+@@ -103,6 +103,16 @@ struct proc {
+   struct trapframe *trapframe; // data page for trampoline.S
+   struct context context;      // swtch() here to run process
+   struct file *ofile[NOFILE];  // Open files
++  struct sem *osem[NOSEM];     // Open semaphores
+   struct inode *cwd;           // Current directory
+   char name[16];               // Process name (debugging)
++  unsigned short ticks;        // Tick counter
++  struct proc *next;           // Pointer to the next process
++  int mlflevel;                // Level in which is running the process
++  int age;                     // Process age
++};
++
++struct mlf {
++  struct proc *top;           // First process of one level
++  struct proc *last;          // Last process of one level
+ };
+Binary files xv6-riscv/kernel/proc.o and os-workshop/kernel/proc.o differ
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/sem.c os-workshop/kernel/sem.c
+--- xv6-riscv/kernel/sem.c	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/kernel/sem.c	2022-05-28 22:34:14.000000000 -0300
+@@ -0,0 +1,141 @@
++#include "types.h"
++#include "riscv.h"
++#include "defs.h"
++#include "param.h"
++#include "fs.h"
++#include "spinlock.h"
++#include "sleeplock.h"
++#include "file.h"
++#include "stat.h"
++#include "proc.h"
++#include "sem.h"
++
++struct sem sem[NSEM];
++
++int is_valid_sid(int sid);
++
++void
++seminit()
++{
++  struct sem *s;
++  for(s = sem; s < sem + NSEM; s++){
++    initlock(&s->lock, "semlock");
++    s->key = -1;
++  }
++}
++
++int 
++semget(int key, int init_value)
++{
++  struct sem *s;
++  struct sem *save_free = 0;
++  
++
++  int sid = get_sid();
++  if(sid == -1){
++    return -1;
++  }
++
++  //Searching the key in all semaphores
++  for(s = sem; s < sem + NSEM; s++){
++    acquire(&s->lock);
++    // If the key was found, then jump to found: to update the ref count
++    if(s->key == key){
++      goto found;
++    }
++    // Save the first free one
++    if(s->ref_count == 0 && save_free == 0){
++      save_free = s;
++    }
++    else{
++      release(&s->lock);
++    }
++  }
++
++  // If the loop ends, then the key wasn't found,
++  // so if it was saved then there's an unused semaphore and an empty place in osem,
++  // so reinit and save to osem.
++  if(save_free != 0 ){
++    save_free->key = key;
++    save_free->value = init_value;
++    save_free->ref_count = 1;
++    // Add the sempaphore in osem
++    myproc()->osem[sid] = save_free;
++  }
++  release(&save_free->lock);
++  return sid;
++  
++  // The key was found
++  found:
++
++    // If the semaphore with the key was found, and one semaphore was saved, then free it.
++    if(save_free != 0){
++      release(&save_free->lock);
++    }
++
++    // Increment the ref count in the semaphore
++    s->ref_count++;
++
++    // If there's an empty position then add the semaphore to the process' semaphore table
++    myproc()->osem[sid] = s;
++    release(&s->lock);
++    return sid;
++}
++
++int 
++semclose(int sid)
++{
++  if(!is_valid_sid(sid)){
++    return -1;
++  }
++  acquire(&(myproc()->osem[sid]->lock));
++  myproc()->osem[sid]->ref_count--;
++  release(&(myproc()->osem[sid]->lock));
++  myproc()->osem[sid] = 0;
++  return 0;
++}
++
++int
++semdown(int sid)
++{
++  if(!is_valid_sid(sid)){
++    return -1;
++  }
++  acquire(&(myproc()->osem[sid]->lock));
++  if(myproc()->osem[sid]->value >= 1){
++    myproc()->osem[sid]->value--;
++    release(&(myproc()->osem[sid]->lock));
++    return 0;
++  }
++  release(&(myproc()->osem[sid]->lock));
++  return -1;
++}
++
++int
++semup(int sid)
++{
++  if(!is_valid_sid(sid)){
++    return -1;
++  }
++  acquire(&(myproc()->osem[sid]->lock));
++  myproc()->osem[sid]->value++;
++  release(&(myproc()->osem[sid]->lock));
++  return 0;
++}
++
++int
++is_valid_sid(int sid){
++  return sid >= 0 && sid <= NOSEM && myproc()->osem[sid];
++}
++
++// Increment ref count for e f.
++struct sem*
++semdup(struct sem *s)
++{
++  acquire(&s->lock);
++  if(s->ref_count < 1)
++    panic("semdup");
++  s->ref_count++;
++  release(&s->lock);
++  return s;
++}
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/sem.d os-workshop/kernel/sem.d
+--- xv6-riscv/kernel/sem.d	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/kernel/sem.d	2022-05-28 22:34:25.000000000 -0300
+@@ -0,0 +1,3 @@
++kernel/sem.o: kernel/sem.c kernel/types.h kernel/riscv.h kernel/defs.h \
++ kernel/param.h kernel/fs.h kernel/spinlock.h kernel/sleeplock.h \
++ kernel/file.h kernel/stat.h kernel/proc.h kernel/sem.h
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/sem.h os-workshop/kernel/sem.h
+--- xv6-riscv/kernel/sem.h	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/kernel/sem.h	2022-05-27 22:26:10.000000000 -0300
+@@ -0,0 +1,6 @@
++struct sem {
++  struct spinlock lock;
++  int value;
++  int key;
++  int ref_count;
++};
+Binary files xv6-riscv/kernel/sem.o and os-workshop/kernel/sem.o differ
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/sleeplock.d os-workshop/kernel/sleeplock.d
+--- xv6-riscv/kernel/sleeplock.d	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/kernel/sleeplock.d	2022-05-28 22:34:27.000000000 -0300
+@@ -0,0 +1,3 @@
++kernel/sleeplock.o: kernel/sleeplock.c kernel/types.h kernel/riscv.h \
++ kernel/defs.h kernel/param.h kernel/memlayout.h kernel/spinlock.h \
++ kernel/proc.h kernel/sleeplock.h
+Binary files xv6-riscv/kernel/sleeplock.o and os-workshop/kernel/sleeplock.o differ
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/spinlock.d os-workshop/kernel/spinlock.d
+--- xv6-riscv/kernel/spinlock.d	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/kernel/spinlock.d	2022-05-28 22:34:24.000000000 -0300
+@@ -0,0 +1,3 @@
++kernel/spinlock.o: kernel/spinlock.c kernel/types.h kernel/param.h \
++ kernel/memlayout.h kernel/spinlock.h kernel/riscv.h kernel/proc.h \
++ kernel/defs.h
+Binary files xv6-riscv/kernel/spinlock.o and os-workshop/kernel/spinlock.o differ
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/start.d os-workshop/kernel/start.d
+--- xv6-riscv/kernel/start.d	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/kernel/start.d	2022-05-28 22:34:23.000000000 -0300
+@@ -0,0 +1,2 @@
++kernel/start.o: kernel/start.c kernel/types.h kernel/param.h \
++ kernel/memlayout.h kernel/riscv.h kernel/defs.h
+Binary files xv6-riscv/kernel/start.o and os-workshop/kernel/start.o differ
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/string.d os-workshop/kernel/string.d
+--- xv6-riscv/kernel/string.d	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/kernel/string.d	2022-05-28 22:34:24.000000000 -0300
+@@ -0,0 +1 @@
++kernel/string.o: kernel/string.c kernel/types.h
+Binary files xv6-riscv/kernel/string.o and os-workshop/kernel/string.o differ
+Binary files xv6-riscv/kernel/swtch.o and os-workshop/kernel/swtch.o differ
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/syscall.c os-workshop/kernel/syscall.c
+--- xv6-riscv/kernel/syscall.c	2022-05-28 22:43:35.000000000 -0300
++++ os-workshop/kernel/syscall.c	2022-05-28 21:50:03.000000000 -0300
+@@ -104,6 +104,12 @@ extern uint64 sys_unlink(void);
+ extern uint64 sys_wait(void);
+ extern uint64 sys_write(void);
+ extern uint64 sys_uptime(void);
++extern uint64 sys_setp(void);
++extern uint64 sys_semget(void);
++extern uint64 sys_semdown(void);
++extern uint64 sys_semup(void);
++extern uint64 sys_semclose(void);
++extern uint64 sys_timeout(void);
+ 
+ static uint64 (*syscalls[])(void) = {
+ [SYS_fork]    sys_fork,
+@@ -127,6 +133,12 @@ static uint64 (*syscalls[])(void) = {
+ [SYS_link]    sys_link,
+ [SYS_mkdir]   sys_mkdir,
+ [SYS_close]   sys_close,
++[SYS_setp]    sys_setp,
++[SYS_semget]  sys_semget,
++[SYS_semdown] sys_semdown,
++[SYS_semup]   sys_semup,
++[SYS_semclose]sys_semclose,
++[SYS_timeout] sys_timeout,
+ };
+ 
+ void
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/syscall.d os-workshop/kernel/syscall.d
+--- xv6-riscv/kernel/syscall.d	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/kernel/syscall.d	2022-05-28 22:34:26.000000000 -0300
+@@ -0,0 +1,3 @@
++kernel/syscall.o: kernel/syscall.c kernel/types.h kernel/param.h \
++ kernel/memlayout.h kernel/riscv.h kernel/spinlock.h kernel/proc.h \
++ kernel/syscall.h kernel/defs.h
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/syscall.h os-workshop/kernel/syscall.h
+--- xv6-riscv/kernel/syscall.h	2022-05-28 22:43:35.000000000 -0300
++++ os-workshop/kernel/syscall.h	2022-05-28 21:57:45.000000000 -0300
+@@ -1,22 +1,28 @@
+ // System call numbers
+-#define SYS_fork    1
+-#define SYS_exit    2
+-#define SYS_wait    3
+-#define SYS_pipe    4
+-#define SYS_read    5
+-#define SYS_kill    6
+-#define SYS_exec    7
+-#define SYS_fstat   8
+-#define SYS_chdir   9
+-#define SYS_dup    10
+-#define SYS_getpid 11
+-#define SYS_sbrk   12
+-#define SYS_sleep  13
+-#define SYS_uptime 14
+-#define SYS_open   15
+-#define SYS_write  16
+-#define SYS_mknod  17
+-#define SYS_unlink 18
+-#define SYS_link   19
+-#define SYS_mkdir  20
+-#define SYS_close  21
++#define SYS_fork      1
++#define SYS_exit      2
++#define SYS_wait      3
++#define SYS_pipe      4
++#define SYS_read      5
++#define SYS_kill      6
++#define SYS_exec      7
++#define SYS_fstat     8
++#define SYS_chdir     9
++#define SYS_dup      10
++#define SYS_getpid   11
++#define SYS_sbrk     12
++#define SYS_sleep    13
++#define SYS_uptime   14
++#define SYS_open     15
++#define SYS_write    16
++#define SYS_mknod    17
++#define SYS_unlink   18
++#define SYS_link     19
++#define SYS_mkdir    20
++#define SYS_close    21
++#define SYS_setp     22
++#define SYS_semget   23
++#define SYS_semdown  24
++#define SYS_semup    25
++#define SYS_semclose 26
++#define SYS_timeout  27
+Binary files xv6-riscv/kernel/syscall.o and os-workshop/kernel/syscall.o differ
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/sysfile.d os-workshop/kernel/sysfile.d
+--- xv6-riscv/kernel/sysfile.d	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/kernel/sysfile.d	2022-05-28 22:34:28.000000000 -0300
+@@ -0,0 +1,4 @@
++kernel/sysfile.o: kernel/sysfile.c kernel/types.h kernel/riscv.h \
++ kernel/defs.h kernel/param.h kernel/stat.h kernel/spinlock.h \
++ kernel/proc.h kernel/fs.h kernel/sleeplock.h kernel/file.h \
++ kernel/fcntl.h
+Binary files xv6-riscv/kernel/sysfile.o and os-workshop/kernel/sysfile.o differ
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/sysproc.c os-workshop/kernel/sysproc.c
+--- xv6-riscv/kernel/sysproc.c	2022-05-28 22:43:35.000000000 -0300
++++ os-workshop/kernel/sysproc.c	2022-05-28 22:03:36.000000000 -0300
+@@ -24,6 +24,21 @@ sys_getpid(void)
+ }
+ 
+ uint64
++sys_setp(void)
++{
++  int level;
++  argint(0, &level);  // fetch param from register
++  if(level > MLFLEVELS)
++    level = MLFLEVELS;
++  else if(level < 1)
++    level = 1;
++  struct proc *p = myproc();
++  uint64 prevlvl = p->mlflevel;
++  p->mlflevel = level;
++  return prevlvl;
++}
++
++uint64
+ sys_fork(void)
+ {
+   return fork();
+@@ -95,3 +110,12 @@ sys_uptime(void)
+   release(&tickslock);
+   return xticks;
+ }
++
++uint64
++sys_timeout(void)
++{
++  int loops;
++  argint(0, &loops);  // fetch param from register
++  for (int i = 0; i < loops * 10000; i++) {};
++  return 0;
++}
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/sysproc.d os-workshop/kernel/sysproc.d
+--- xv6-riscv/kernel/sysproc.d	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/kernel/sysproc.d	2022-05-28 22:34:26.000000000 -0300
+@@ -0,0 +1,3 @@
++kernel/sysproc.o: kernel/sysproc.c kernel/types.h kernel/riscv.h \
++ kernel/defs.h kernel/date.h kernel/param.h kernel/memlayout.h \
++ kernel/spinlock.h kernel/proc.h
+Binary files xv6-riscv/kernel/sysproc.o and os-workshop/kernel/sysproc.o differ
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/syssem.c os-workshop/kernel/syssem.c
+--- xv6-riscv/kernel/syssem.c	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/kernel/syssem.c	2022-05-28 21:31:32.000000000 -0300
+@@ -0,0 +1,43 @@
++#include "types.h"
++#include "riscv.h"
++#include "defs.h"
++#include "date.h"
++#include "param.h"
++#include "memlayout.h"
++#include "spinlock.h"
++#include "proc.h"
++#include "sem.h"
++
++uint64
++sys_semget(void)
++{
++  int key;
++  argint(0, &key);
++  int value;
++  argint(1, &value);
++  return semget(key,value);
++}
++
++uint64
++sys_semdown(void)
++{
++  int sid;
++  argint(0, &sid);
++  return semdown(sid);
++}
++
++uint64
++sys_semup(void)
++{
++  int sid;
++  argint(0, &sid);
++  return semup(sid);
++}
++
++uint64
++sys_semclose(void)
++{
++  int sid;
++  argint(0, &sid);
++  return semclose(sid);
++}
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/syssem.d os-workshop/kernel/syssem.d
+--- xv6-riscv/kernel/syssem.d	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/kernel/syssem.d	2022-05-28 22:34:26.000000000 -0300
+@@ -0,0 +1,3 @@
++kernel/syssem.o: kernel/syssem.c kernel/types.h kernel/riscv.h \
++ kernel/defs.h kernel/date.h kernel/param.h kernel/memlayout.h \
++ kernel/spinlock.h kernel/proc.h kernel/sem.h
+Binary files xv6-riscv/kernel/syssem.o and os-workshop/kernel/syssem.o differ
+Binary files xv6-riscv/kernel/trampoline.o and os-workshop/kernel/trampoline.o differ
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/trap.c os-workshop/kernel/trap.c
+--- xv6-riscv/kernel/trap.c	2022-05-28 22:43:35.000000000 -0300
++++ os-workshop/kernel/trap.c	2022-04-28 18:28:00.000000000 -0300
+@@ -15,6 +15,7 @@ extern char trampoline[], uservec[], use
+ void kernelvec();
+ 
+ extern int devintr();
++extern void ageprocs();
+ 
+ void
+ trapinit(void)
+@@ -77,8 +78,15 @@ usertrap(void)
+     exit(-1);
+ 
+   // give up the CPU if this is a timer interrupt.
+-  if(which_dev == 2)
+-    yield();
++  if(which_dev == 2){
++
++    // increment the tick counter each time there is a timer interrupt, and
++    // yield if it reaches the quantum.
++    if((++myproc()->ticks) == QUANTUM){
++      /* printf("Process %d abandoned the CPU %d (USER CONTEXT) \n", myproc()->pid, cpuid()); */
++      yield();
++    }
++  }
+ 
+   usertrapret();
+ }
+@@ -150,8 +158,15 @@ kerneltrap()
+   }
+ 
+   // give up the CPU if this is a timer interrupt.
+-  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING)
+-    yield();
++  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING){
++
++    // increment the tick counter each time there is a timer interrupt, and
++    // yield if it reaches the quantum.
++    if((++myproc()->ticks) == QUANTUM){
++      /* printf("Process %d abandoned the CPU %d (KERNEL CONTEXT) \n", myproc()->pid, cpuid()); */
++      yield();
++    }
++  }
+ 
+   // the yield() may have caused some traps to occur,
+   // so restore trap registers for use by kernelvec.S's sepc instruction.
+@@ -164,6 +179,9 @@ clockintr()
+ {
+   acquire(&tickslock);
+   ticks++;
++  if(ticks % TIMEUNIT == 0) { 
++    ageprocs(); 
++  } 
+   wakeup(&ticks);
+   release(&tickslock);
+ }
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/trap.d os-workshop/kernel/trap.d
+--- xv6-riscv/kernel/trap.d	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/kernel/trap.d	2022-05-28 22:34:25.000000000 -0300
+@@ -0,0 +1,3 @@
++kernel/trap.o: kernel/trap.c kernel/types.h kernel/param.h \
++ kernel/memlayout.h kernel/riscv.h kernel/spinlock.h kernel/proc.h \
++ kernel/defs.h
+Binary files xv6-riscv/kernel/trap.o and os-workshop/kernel/trap.o differ
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/uart.d os-workshop/kernel/uart.d
+--- xv6-riscv/kernel/uart.d	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/kernel/uart.d	2022-05-28 22:34:23.000000000 -0300
+@@ -0,0 +1,3 @@
++kernel/uart.o: kernel/uart.c kernel/types.h kernel/param.h \
++ kernel/memlayout.h kernel/riscv.h kernel/spinlock.h kernel/proc.h \
++ kernel/defs.h
+Binary files xv6-riscv/kernel/uart.o and os-workshop/kernel/uart.o differ
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/virtio_disk.d os-workshop/kernel/virtio_disk.d
+--- xv6-riscv/kernel/virtio_disk.d	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/kernel/virtio_disk.d	2022-05-28 22:34:28.000000000 -0300
+@@ -0,0 +1,3 @@
++kernel/virtio_disk.o: kernel/virtio_disk.c kernel/types.h kernel/riscv.h \
++ kernel/defs.h kernel/param.h kernel/memlayout.h kernel/spinlock.h \
++ kernel/sleeplock.h kernel/fs.h kernel/buf.h kernel/virtio.h
+Binary files xv6-riscv/kernel/virtio_disk.o and os-workshop/kernel/virtio_disk.o differ
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/vm.d os-workshop/kernel/vm.d
+--- xv6-riscv/kernel/vm.d	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/kernel/vm.d	2022-05-28 22:34:24.000000000 -0300
+@@ -0,0 +1,2 @@
++kernel/vm.o: kernel/vm.c kernel/param.h kernel/types.h kernel/memlayout.h \
++ kernel/elf.h kernel/riscv.h kernel/defs.h kernel/fs.h
+Binary files xv6-riscv/kernel/vm.o and os-workshop/kernel/vm.o differ
+Binary files xv6-riscv/mkfs/mkfs and os-workshop/mkfs/mkfs differ
+diff --exclude=.git --exclude=.github -rupN xv6-riscv/patches/scheduler.patch os-workshop/patches/scheduler.patch
+--- xv6-riscv/patches/scheduler.patch	1969-12-31 21:00:00.000000000 -0300
++++ os-workshop/patches/scheduler.patch	2022-04-28 18:42:47.000000000 -0300
+@@ -0,0 +1,464 @@
++diff --exclude=.git --exclude=.github -rupN xv6-riscv/Makefile os-workshop/Makefile
++--- xv6-riscv/Makefile	2022-04-28 18:33:10.000000000 -0300
+++++ os-workshop/Makefile	2022-04-28 18:25:44.000000000 -0300
++@@ -116,6 +116,11 @@ mkfs/mkfs: mkfs/mkfs.c $K/fs.h $K/param.
++ .PRECIOUS: %.o
++ 
++ UPROGS=\
+++	$U/_topprior\
+++	$U/_midprior\
+++	$U/_bottomprior\
+++	$U/_helloworld\
+++	$U/_infloop\
++ 	$U/_cat\
++ 	$U/_echo\
++ 	$U/_forktest\
++@@ -153,7 +158,7 @@ QEMUGDB = $(shell if $(QEMU) -help | gre
++ 	then echo "-gdb tcp::$(GDBPORT)"; \
++ 	else echo "-s -p $(GDBPORT)"; fi)
++ ifndef CPUS
++-CPUS := 3
+++CPUS := 2
++ endif
++ 
++ QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
++diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/param.h os-workshop/kernel/param.h
++--- xv6-riscv/kernel/param.h	2022-04-28 18:33:10.000000000 -0300
+++++ os-workshop/kernel/param.h	2022-04-28 18:25:44.000000000 -0300
++@@ -11,3 +11,7 @@
++ #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
++ #define FSSIZE       1000  // size of file system in blocks
++ #define MAXPATH      128   // maximum file path name
+++#define QUANTUM      2    // maximum number of ticks per process
+++#define MLFLEVELS    4     // number of levels in multilevel feedback array
+++#define MAXAGE       5     // process max age
+++#define TIMEUNIT     10    // process time unit
++diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/proc.c os-workshop/kernel/proc.c
++--- xv6-riscv/kernel/proc.c	2022-04-28 18:33:10.000000000 -0300
+++++ os-workshop/kernel/proc.c	2022-04-28 18:29:35.000000000 -0300
++@@ -12,11 +12,16 @@ struct proc proc[NPROC];
++ 
++ struct proc *initproc;
++ 
+++struct mlf mlf[MLFLEVELS];
+++struct spinlock mlf_lock;
+++
++ int nextpid = 1;
++ struct spinlock pid_lock;
++-
+++extern uint ticks;
++ extern void forkret(void);
++ static void freeproc(struct proc *p);
+++static void makerunnable(int level, struct proc *node);
+++static struct proc* dequeue();
++ 
++ extern char trampoline[]; // trampoline.S
++ 
++@@ -50,6 +55,7 @@ procinit(void)
++   
++   initlock(&pid_lock, "nextpid");
++   initlock(&wait_lock, "wait_lock");
+++  initlock(&mlf_lock, "mlf");
++   for(p = proc; p < &proc[NPROC]; p++) {
++       initlock(&p->lock, "proc");
++       p->kstack = KSTACK((int) (p - proc));
++@@ -242,7 +248,7 @@ userinit(void)
++   safestrcpy(p->name, "initcode", sizeof(p->name));
++   p->cwd = namei("/");
++ 
++-  p->state = RUNNABLE;
+++  makerunnable(1,p);
++ 
++   release(&p->lock);
++ }
++@@ -312,12 +318,88 @@ fork(void)
++   release(&wait_lock);
++ 
++   acquire(&np->lock);
++-  np->state = RUNNABLE;
+++  //Add the new process at parent's level end 
+++  makerunnable(p->mlflevel,np);
++   release(&np->lock);
++ 
++   return pid;
++ }
++ 
+++static void
+++makerunnable(int level, struct proc *p){
+++  int holding_status = holding(&mlf_lock);
+++  if(!holding_status){
+++    acquire(&mlf_lock);
+++  }
+++  if(level > MLFLEVELS){
+++    level = MLFLEVELS;
+++  }
+++  else if(level < 1){
+++    level = 1;
+++  }
+++  if(mlf[level-1].last == 0){
+++    mlf[level-1].last = p;
+++    mlf[level-1].top = p;
+++  }
+++  else{
+++    struct proc *last = mlf[level-1].last;
+++    last->next = p;
+++    mlf[level-1].last = p;
+++  }
+++  p->next = 0;
+++  p->age = ticks;
+++  p->mlflevel = level;
+++  p->state = RUNNABLE;
+++  if(!holding_status){
+++    release(&mlf_lock);
+++  }
+++}
+++
+++static struct proc*
+++dequeue(){
+++  acquire(&mlf_lock);
+++  for(int index = 0; index < MLFLEVELS; index++){
+++    if(mlf[index].top != 0){
+++      struct proc *first = mlf[index].top;
+++      mlf[index].top = first->next;
+++      if(!mlf[index].top){
+++        mlf[index].last = 0;
+++      }
+++      release(&mlf_lock);
+++      return first;
+++    }
+++  }
+++  release(&mlf_lock);
+++  return 0;
+++}
+++
+++// Apply the aging strategy to all runnable processes
+++void
+++ageprocs()
+++{
+++  acquire(&mlf_lock);
+++  for(int index = 1; index < MLFLEVELS; index++){
+++    struct proc *current = mlf[index].top;
+++    if(!current || holding(&current->lock)){
+++      continue;
+++    }
+++    acquire(&current->lock);
+++    if(ticks - current->age > MAXAGE){
+++      //Remove the process from the current level
+++      if(current->next != 0){
+++        mlf[index].top = current->next;
+++      } else{
+++        mlf[index].top = 0;
+++        mlf[index].last = 0;
+++      }
+++      //Add the process in a higher priority level
+++      makerunnable(index-1,current);
+++    }
+++    release(&current->lock);
+++  }
+++  release(&mlf_lock);
+++}
+++
++ // Pass p's abandoned children to init.
++ // Caller must hold wait_lock.
++ void
++@@ -445,22 +527,29 @@ scheduler(void)
++     // Avoid deadlock by ensuring that devices can interrupt.
++     intr_on();
++ 
++-    for(p = proc; p < &proc[NPROC]; p++) {
++-      acquire(&p->lock);
++-      if(p->state == RUNNABLE) {
++-        // Switch to chosen process.  It is the process's job
++-        // to release its lock and then reacquire it
++-        // before jumping back to us.
++-        p->state = RUNNING;
++-        c->proc = p;
++-        swtch(&c->context, &p->context);
++-
++-        // Process is done running for now.
++-        // It should have changed its p->state before coming back.
++-        c->proc = 0;
++-      }
++-      release(&p->lock);
+++    p = dequeue();
+++    if(!p){
+++      continue;
+++    }
+++    
+++    if(p->state != RUNNABLE){
+++      printf("State is %d \n", p->state);
+++      panic("Process is not in a runnable state");
++     }
+++    acquire(&p->lock);
+++    // Switch to chosen process.  It is the process's job
+++    // to release its lock and then reacquire it
+++    // before jumping back to us.
+++    p->state = RUNNING;
+++    p->age = ticks;
+++    p->ticks = 0;
+++    c->proc = p;
+++    swtch(&c->context, &p->context);
+++
+++    // Process is done running for now.
+++    // It should have changed its p->state before coming back.
+++    c->proc = 0;
+++    release(&p->lock);
++   }
++ }
++ 
++@@ -497,7 +586,7 @@ yield(void)
++ {
++   struct proc *p = myproc();
++   acquire(&p->lock);
++-  p->state = RUNNABLE;
+++  makerunnable(p->mlflevel+1,p);
++   sched();
++   release(&p->lock);
++ }
++@@ -565,7 +654,7 @@ wakeup(void *chan)
++     if(p != myproc()){
++       acquire(&p->lock);
++       if(p->state == SLEEPING && p->chan == chan) {
++-        p->state = RUNNABLE;
+++        makerunnable(p->mlflevel-1,p);
++       }
++       release(&p->lock);
++     }
++@@ -580,13 +669,15 @@ kill(int pid)
++ {
++   struct proc *p;
++ 
++-  for(p = proc; p < &proc[NPROC]; p++){
+++  // Starts in proc + 1 because the init process has pid == 1,
+++  // and we don't want to be able to kill it.
+++  for(p = proc + 1; p < &proc[NPROC]; p++){
++     acquire(&p->lock);
++     if(p->pid == pid){
++       p->killed = 1;
++       if(p->state == SLEEPING){
++         // Wake process from sleep().
++-        p->state = RUNNABLE;
+++        makerunnable(p->mlflevel,p);
++       }
++       release(&p->lock);
++       return 0;
++diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/proc.h os-workshop/kernel/proc.h
++--- xv6-riscv/kernel/proc.h	2022-04-28 18:33:10.000000000 -0300
+++++ os-workshop/kernel/proc.h	2022-04-28 18:25:44.000000000 -0300
++@@ -105,4 +105,13 @@ struct proc {
++   struct file *ofile[NOFILE];  // Open files
++   struct inode *cwd;           // Current directory
++   char name[16];               // Process name (debugging)
+++  unsigned short ticks;        // Tick counter
+++  struct proc *next;           // Pointer to the next process
+++  int mlflevel;                // Level in which is running the process
+++  int age;                     // Process age
+++};
+++
+++struct mlf {
+++  struct proc *top;           // First process of one level
+++  struct proc *last;          // Last process of one level
++ };
++diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/syscall.c os-workshop/kernel/syscall.c
++--- xv6-riscv/kernel/syscall.c	2022-04-28 18:33:10.000000000 -0300
+++++ os-workshop/kernel/syscall.c	2022-04-28 18:25:44.000000000 -0300
++@@ -104,6 +104,7 @@ extern uint64 sys_unlink(void);
++ extern uint64 sys_wait(void);
++ extern uint64 sys_write(void);
++ extern uint64 sys_uptime(void);
+++extern uint64 sys_setp(void);
++ 
++ static uint64 (*syscalls[])(void) = {
++ [SYS_fork]    sys_fork,
++@@ -127,6 +128,7 @@ static uint64 (*syscalls[])(void) = {
++ [SYS_link]    sys_link,
++ [SYS_mkdir]   sys_mkdir,
++ [SYS_close]   sys_close,
+++[SYS_setp]    sys_setp,
++ };
++ 
++ void
++diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/syscall.h os-workshop/kernel/syscall.h
++--- xv6-riscv/kernel/syscall.h	2022-04-28 18:33:10.000000000 -0300
+++++ os-workshop/kernel/syscall.h	2022-04-28 18:25:44.000000000 -0300
++@@ -20,3 +20,4 @@
++ #define SYS_link   19
++ #define SYS_mkdir  20
++ #define SYS_close  21
+++#define SYS_setp   22
++diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/sysproc.c os-workshop/kernel/sysproc.c
++--- xv6-riscv/kernel/sysproc.c	2022-04-28 18:33:10.000000000 -0300
+++++ os-workshop/kernel/sysproc.c	2022-04-28 18:25:44.000000000 -0300
++@@ -24,6 +24,21 @@ sys_getpid(void)
++ }
++ 
++ uint64
+++sys_setp(void)
+++{
+++  int level;
+++  argint(0, &level);  // fetch param from register
+++  if(level > MLFLEVELS)
+++    level = MLFLEVELS;
+++  else if(level < 1)
+++    level = 1;
+++  struct proc *p = myproc();
+++  uint64 prevlvl = p->mlflevel;
+++  p->mlflevel = level;
+++  return prevlvl;
+++}
+++
+++uint64
++ sys_fork(void)
++ {
++   return fork();
++diff --exclude=.git --exclude=.github -rupN xv6-riscv/kernel/trap.c os-workshop/kernel/trap.c
++--- xv6-riscv/kernel/trap.c	2022-04-28 18:33:10.000000000 -0300
+++++ os-workshop/kernel/trap.c	2022-04-28 18:28:00.000000000 -0300
++@@ -15,6 +15,7 @@ extern char trampoline[], uservec[], use
++ void kernelvec();
++ 
++ extern int devintr();
+++extern void ageprocs();
++ 
++ void
++ trapinit(void)
++@@ -77,8 +78,15 @@ usertrap(void)
++     exit(-1);
++ 
++   // give up the CPU if this is a timer interrupt.
++-  if(which_dev == 2)
++-    yield();
+++  if(which_dev == 2){
+++
+++    // increment the tick counter each time there is a timer interrupt, and
+++    // yield if it reaches the quantum.
+++    if((++myproc()->ticks) == QUANTUM){
+++      /* printf("Process %d abandoned the CPU %d (USER CONTEXT) \n", myproc()->pid, cpuid()); */
+++      yield();
+++    }
+++  }
++ 
++   usertrapret();
++ }
++@@ -150,8 +158,15 @@ kerneltrap()
++   }
++ 
++   // give up the CPU if this is a timer interrupt.
++-  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING)
++-    yield();
+++  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING){
+++
+++    // increment the tick counter each time there is a timer interrupt, and
+++    // yield if it reaches the quantum.
+++    if((++myproc()->ticks) == QUANTUM){
+++      /* printf("Process %d abandoned the CPU %d (KERNEL CONTEXT) \n", myproc()->pid, cpuid()); */
+++      yield();
+++    }
+++  }
++ 
++   // the yield() may have caused some traps to occur,
++   // so restore trap registers for use by kernelvec.S's sepc instruction.
++@@ -164,6 +179,9 @@ clockintr()
++ {
++   acquire(&tickslock);
++   ticks++;
+++  if(ticks % TIMEUNIT == 0) { 
+++    ageprocs(); 
+++  } 
++   wakeup(&ticks);
++   release(&tickslock);
++ }
++diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/bottomprior.c os-workshop/user/bottomprior.c
++--- xv6-riscv/user/bottomprior.c	1969-12-31 21:00:00.000000000 -0300
+++++ os-workshop/user/bottomprior.c	2022-04-28 18:25:44.000000000 -0300
++@@ -0,0 +1,10 @@
+++#include "kernel/types.h"
+++#include "kernel/stat.h"
+++#include "user/user.h"
+++
+++int main() {
+++  for(;;){
+++    setp(4);
+++  };
+++  exit(0);
+++}
++diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/helloworld.c os-workshop/user/helloworld.c
++--- xv6-riscv/user/helloworld.c	1969-12-31 21:00:00.000000000 -0300
+++++ os-workshop/user/helloworld.c	2022-04-20 13:29:20.000000000 -0300
++@@ -0,0 +1,8 @@
+++#include "kernel/types.h"
+++#include "kernel/stat.h"
+++#include "user/user.h"
+++
+++int main() {
+++  printf("Hello world! \n");
+++  exit(0);
+++}
++diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/infloop.c os-workshop/user/infloop.c
++--- xv6-riscv/user/infloop.c	1969-12-31 21:00:00.000000000 -0300
+++++ os-workshop/user/infloop.c	2022-04-28 18:25:44.000000000 -0300
++@@ -0,0 +1,8 @@
+++
+++#include "kernel/types.h"
+++#include "kernel/stat.h"
+++#include "user/user.h"
+++
+++int main() {
+++  for (;;){};
+++}
++diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/midprior.c os-workshop/user/midprior.c
++--- xv6-riscv/user/midprior.c	1969-12-31 21:00:00.000000000 -0300
+++++ os-workshop/user/midprior.c	2022-04-28 18:25:44.000000000 -0300
++@@ -0,0 +1,10 @@
+++#include "kernel/types.h"
+++#include "kernel/stat.h"
+++#include "user/user.h"
+++
+++int main() {
+++  for(;;){
+++    setp(2);
+++  };
+++  exit(0);
+++}
++diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/topprior.c os-workshop/user/topprior.c
++--- xv6-riscv/user/topprior.c	1969-12-31 21:00:00.000000000 -0300
+++++ os-workshop/user/topprior.c	2022-04-28 18:25:44.000000000 -0300
++@@ -0,0 +1,10 @@
+++#include "kernel/types.h"
+++#include "kernel/stat.h"
+++#include "user/user.h"
+++
+++int main() {
+++  for(;;){
+++    setp(1);
+++  }
+++  exit(0);
+++}
++diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/user.h os-workshop/user/user.h
++--- xv6-riscv/user/user.h	2022-04-28 18:33:10.000000000 -0300
+++++ os-workshop/user/user.h	2022-04-28 18:25:44.000000000 -0300
++@@ -23,6 +23,7 @@ int getpid(void);
++ char* sbrk(int);
++ int sleep(int);
++ int uptime(void);
+++int setp(int);
++ 
++ // ulib.c
++ int stat(const char*, struct stat*);
++diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/usys.pl os-workshop/user/usys.pl
++--- xv6-riscv/user/usys.pl	2022-04-28 18:33:10.000000000 -0300
+++++ os-workshop/user/usys.pl	2022-04-28 18:25:44.000000000 -0300
++@@ -14,7 +14,7 @@ sub entry {
++     print " ecall\n";
++     print " ret\n";
++ }
++-	
+++
++ entry("fork");
++ entry("exit");
++ entry("wait");
++@@ -36,3 +36,4 @@ entry("getpid");
++ entry("sbrk");
++ entry("sleep");
++ entry("uptime");
+++entry("setp");
Binary files xv6-riscv/user/_badtest and os-workshop/user/_badtest differ
Binary files xv6-riscv/user/_bottomprior and os-workshop/user/_bottomprior differ
Binary files xv6-riscv/user/_cat and os-workshop/user/_cat differ
Binary files xv6-riscv/user/_cons and os-workshop/user/_cons differ
Binary files xv6-riscv/user/_echo and os-workshop/user/_echo differ
Binary files xv6-riscv/user/_forktest and os-workshop/user/_forktest differ
Binary files xv6-riscv/user/_grep and os-workshop/user/_grep differ
Binary files xv6-riscv/user/_grind and os-workshop/user/_grind differ
Binary files xv6-riscv/user/_helloworld and os-workshop/user/_helloworld differ
Binary files xv6-riscv/user/_infloop and os-workshop/user/_infloop differ
Binary files xv6-riscv/user/_init and os-workshop/user/_init differ
Binary files xv6-riscv/user/_kill and os-workshop/user/_kill differ
Binary files xv6-riscv/user/_ln and os-workshop/user/_ln differ
Binary files xv6-riscv/user/_ls and os-workshop/user/_ls differ
Binary files xv6-riscv/user/_midprior and os-workshop/user/_midprior differ
Binary files xv6-riscv/user/_mkdir and os-workshop/user/_mkdir differ
Binary files xv6-riscv/user/_prod and os-workshop/user/_prod differ
Binary files xv6-riscv/user/_rm and os-workshop/user/_rm differ
Binary files xv6-riscv/user/_sh and os-workshop/user/_sh differ
Binary files xv6-riscv/user/_stressfs and os-workshop/user/_stressfs differ
Binary files xv6-riscv/user/_topprior and os-workshop/user/_topprior differ
Binary files xv6-riscv/user/_usertests and os-workshop/user/_usertests differ
Binary files xv6-riscv/user/_wc and os-workshop/user/_wc differ
Binary files xv6-riscv/user/_zombie and os-workshop/user/_zombie differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/badtest.asm os-workshop/user/badtest.asm
--- xv6-riscv/user/badtest.asm	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/badtest.asm	2022-05-28 22:38:24.000000000 -0300
@@ -0,0 +1,1716 @@
+
+user/_badtest:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <main>:
+
+#define LIMIT 1000
+#define KEY 20
+#define KEY2 26
+
+int main(void) {
+   0:	7139                	addi	sp,sp,-64
+   2:	fc06                	sd	ra,56(sp)
+   4:	f822                	sd	s0,48(sp)
+   6:	f426                	sd	s1,40(sp)
+   8:	f04a                	sd	s2,32(sp)
+   a:	ec4e                	sd	s3,24(sp)
+   c:	e852                	sd	s4,16(sp)
+   e:	e456                	sd	s5,8(sp)
+  10:	e05a                	sd	s6,0(sp)
+  12:	0080                	addi	s0,sp,64
+
+  int semid, i = 0;
+
+  /*checking for non process sema access*/
+  int chk = semup(20);
+  14:	4551                	li	a0,20
+  16:	00000097          	auipc	ra,0x0
+  1a:	61a080e7          	jalr	1562(ra) # 630 <semup>
+  if (chk < 0)
+  1e:	12054563          	bltz	a0,148 <main+0x148>
+    printf("Testing non adquired semaphore (up): OK!\n");
+  else
+    printf("Testing non adquired semaphore (up): FAILED.\n");
+  22:	00001517          	auipc	a0,0x1
+  26:	ace50513          	addi	a0,a0,-1330 # af0 <malloc+0x116>
+  2a:	00001097          	auipc	ra,0x1
+  2e:	8f8080e7          	jalr	-1800(ra) # 922 <printf>
+
+  chk = semdown(20);
+  32:	4551                	li	a0,20
+  34:	00000097          	auipc	ra,0x0
+  38:	5f4080e7          	jalr	1524(ra) # 628 <semdown>
+  if (chk < 0)
+  3c:	10054f63          	bltz	a0,15a <main+0x15a>
+    printf("Testing non adquired semaphore (down): OK!\n");
+  else
+    printf("Testing non adquired semaphore (down): FAILED.\n");
+  40:	00001517          	auipc	a0,0x1
+  44:	b1050513          	addi	a0,a0,-1264 # b50 <malloc+0x176>
+  48:	00001097          	auipc	ra,0x1
+  4c:	8da080e7          	jalr	-1830(ra) # 922 <printf>
+
+  /*checking for close non requested semaphore*/
+  chk = semclose(8);
+  50:	4521                	li	a0,8
+  52:	00000097          	auipc	ra,0x0
+  56:	5e6080e7          	jalr	1510(ra) # 638 <semclose>
+  if (chk < 0)
+  5a:	10054963          	bltz	a0,16c <main+0x16c>
+    printf("Testing semclose: OK!.\n");
+  else
+    printf("Testing semclose: FAILED!.\n");
+  5e:	00001517          	auipc	a0,0x1
+  62:	b4a50513          	addi	a0,a0,-1206 # ba8 <malloc+0x1ce>
+  66:	00001097          	auipc	ra,0x1
+  6a:	8bc080e7          	jalr	-1860(ra) # 922 <printf>
+
+  /*checking for getting all the resources*/
+  int countsem = 0, it;
+  chk = 0;
+  for (it = 0; it < LIMIT && chk >= 0; it++, countsem++) {
+    chk = semget(KEY, 4);
+  6e:	4591                	li	a1,4
+  70:	4551                	li	a0,20
+  72:	00000097          	auipc	ra,0x0
+  76:	5ae080e7          	jalr	1454(ra) # 620 <semget>
+  7a:	84aa                	mv	s1,a0
+    printf("semget: %d\n", chk);
+  7c:	85aa                	mv	a1,a0
+  7e:	00001517          	auipc	a0,0x1
+  82:	b1a50513          	addi	a0,a0,-1254 # b98 <malloc+0x1be>
+  86:	00001097          	auipc	ra,0x1
+  8a:	89c080e7          	jalr	-1892(ra) # 922 <printf>
+  for (it = 0; it < LIMIT && chk >= 0; it++, countsem++) {
+  8e:	4905                	li	s2,1
+    printf("semget: %d\n", chk);
+  90:	00001a17          	auipc	s4,0x1
+  94:	b08a0a13          	addi	s4,s4,-1272 # b98 <malloc+0x1be>
+  for (it = 0; it < LIMIT && chk >= 0; it++, countsem++) {
+  98:	3e800993          	li	s3,1000
+  9c:	0204c263          	bltz	s1,c0 <main+0xc0>
+    chk = semget(KEY, 4);
+  a0:	4591                	li	a1,4
+  a2:	4551                	li	a0,20
+  a4:	00000097          	auipc	ra,0x0
+  a8:	57c080e7          	jalr	1404(ra) # 620 <semget>
+  ac:	84aa                	mv	s1,a0
+    printf("semget: %d\n", chk);
+  ae:	85aa                	mv	a1,a0
+  b0:	8552                	mv	a0,s4
+  b2:	00001097          	auipc	ra,0x1
+  b6:	870080e7          	jalr	-1936(ra) # 922 <printf>
+  for (it = 0; it < LIMIT && chk >= 0; it++, countsem++) {
+  ba:	2905                	addiw	s2,s2,1
+  bc:	ff3910e3          	bne	s2,s3,9c <main+0x9c>
+  }
+  printf("Testing get all semaphores availables (%d availables?).\n",
+  c0:	fff9059b          	addiw	a1,s2,-1
+  c4:	00001517          	auipc	a0,0x1
+  c8:	b0450513          	addi	a0,a0,-1276 # bc8 <malloc+0x1ee>
+  cc:	00001097          	auipc	ra,0x1
+  d0:	856080e7          	jalr	-1962(ra) # 922 <printf>
+         countsem - 1);
+
+  /*checking for close: sem 0 was adquired*/
+  chk = semclose(0);
+  d4:	4501                	li	a0,0
+  d6:	00000097          	auipc	ra,0x0
+  da:	562080e7          	jalr	1378(ra) # 638 <semclose>
+  if (chk == 0)
+  de:	e145                	bnez	a0,17e <main+0x17e>
+    printf("Testing semclose sem 0: OK!.\n");
+  e0:	00001517          	auipc	a0,0x1
+  e4:	b2850513          	addi	a0,a0,-1240 # c08 <malloc+0x22e>
+  e8:	00001097          	auipc	ra,0x1
+  ec:	83a080e7          	jalr	-1990(ra) # 922 <printf>
+  else
+    printf("Testing semclose sem 0: FAILED!.\n");
+
+  /*checking for close: but not twice!*/
+  chk = semclose(0);
+  f0:	4501                	li	a0,0
+  f2:	00000097          	auipc	ra,0x0
+  f6:	546080e7          	jalr	1350(ra) # 638 <semclose>
+  if (chk < 0)
+  fa:	08054b63          	bltz	a0,190 <main+0x190>
+    printf("Testing semclose sem 0 (second time): OK!.\n");
+  else
+    printf("Testing semclose sem 0 (second time): FAILED!.\n");
+  fe:	00001517          	auipc	a0,0x1
+ 102:	b8250513          	addi	a0,a0,-1150 # c80 <malloc+0x2a6>
+ 106:	00001097          	auipc	ra,0x1
+ 10a:	81c080e7          	jalr	-2020(ra) # 922 <printf>
+  /* We changed KEY to KEY2 because there was already a semaphore created using
+   * KEY and value=4, and that caused semget to find that semaphore and change
+   * the behavior with respect to value=2, allowing both children as well as the
+   * parent process to enter the critical region.
+   */
+  semid = semget(KEY2, 2);
+ 10e:	4589                	li	a1,2
+ 110:	4569                	li	a0,26
+ 112:	00000097          	auipc	ra,0x0
+ 116:	50e080e7          	jalr	1294(ra) # 620 <semget>
+ 11a:	892a                	mv	s2,a0
+
+  if (fork() == 0) {
+ 11c:	00000097          	auipc	ra,0x0
+ 120:	454080e7          	jalr	1108(ra) # 570 <fork>
+ 124:	e979                	bnez	a0,1fa <main+0x1fa>
+ 126:	44a9                	li	s1,10
+    ** implementation of semaphores, it's not necessary to get them again
+    ** because we can use the parent's
+    ** semid instead.
+    */
+    for (i = 0; i < 10; i++) {
+      printf("1st child trying... \n");
+ 128:	00001a17          	auipc	s4,0x1
+ 12c:	b88a0a13          	addi	s4,s4,-1144 # cb0 <malloc+0x2d6>
+      timeout(100000);
+ 130:	69e1                	lui	s3,0x18
+ 132:	6a098993          	addi	s3,s3,1696 # 186a0 <__global_pointer$+0x170a7>
+      ** to check the return value of semdown to verify that the process did
+      ** indeed gain access to the
+      ** critical region or not.
+      */
+      if (semdown(semid) == 0) {
+        printf("1st child in critical region \n");
+ 136:	00001b17          	auipc	s6,0x1
+ 13a:	b92b0b13          	addi	s6,s6,-1134 # cc8 <malloc+0x2ee>
+        timeout(100000);
+        semup(semid);
+        printf("1st child out \n");
+ 13e:	00001a97          	auipc	s5,0x1
+ 142:	baaa8a93          	addi	s5,s5,-1110 # ce8 <malloc+0x30e>
+ 146:	a085                	j	1a6 <main+0x1a6>
+    printf("Testing non adquired semaphore (up): OK!\n");
+ 148:	00001517          	auipc	a0,0x1
+ 14c:	97850513          	addi	a0,a0,-1672 # ac0 <malloc+0xe6>
+ 150:	00000097          	auipc	ra,0x0
+ 154:	7d2080e7          	jalr	2002(ra) # 922 <printf>
+ 158:	bde9                	j	32 <main+0x32>
+    printf("Testing non adquired semaphore (down): OK!\n");
+ 15a:	00001517          	auipc	a0,0x1
+ 15e:	9c650513          	addi	a0,a0,-1594 # b20 <malloc+0x146>
+ 162:	00000097          	auipc	ra,0x0
+ 166:	7c0080e7          	jalr	1984(ra) # 922 <printf>
+ 16a:	b5dd                	j	50 <main+0x50>
+    printf("Testing semclose: OK!.\n");
+ 16c:	00001517          	auipc	a0,0x1
+ 170:	a1450513          	addi	a0,a0,-1516 # b80 <malloc+0x1a6>
+ 174:	00000097          	auipc	ra,0x0
+ 178:	7ae080e7          	jalr	1966(ra) # 922 <printf>
+ 17c:	bdcd                	j	6e <main+0x6e>
+    printf("Testing semclose sem 0: FAILED!.\n");
+ 17e:	00001517          	auipc	a0,0x1
+ 182:	aaa50513          	addi	a0,a0,-1366 # c28 <malloc+0x24e>
+ 186:	00000097          	auipc	ra,0x0
+ 18a:	79c080e7          	jalr	1948(ra) # 922 <printf>
+ 18e:	b78d                	j	f0 <main+0xf0>
+    printf("Testing semclose sem 0 (second time): OK!.\n");
+ 190:	00001517          	auipc	a0,0x1
+ 194:	ac050513          	addi	a0,a0,-1344 # c50 <malloc+0x276>
+ 198:	00000097          	auipc	ra,0x0
+ 19c:	78a080e7          	jalr	1930(ra) # 922 <printf>
+ 1a0:	b7bd                	j	10e <main+0x10e>
+    for (i = 0; i < 10; i++) {
+ 1a2:	34fd                	addiw	s1,s1,-1
+ 1a4:	c4b1                	beqz	s1,1f0 <main+0x1f0>
+      printf("1st child trying... \n");
+ 1a6:	8552                	mv	a0,s4
+ 1a8:	00000097          	auipc	ra,0x0
+ 1ac:	77a080e7          	jalr	1914(ra) # 922 <printf>
+      timeout(100000);
+ 1b0:	854e                	mv	a0,s3
+ 1b2:	00000097          	auipc	ra,0x0
+ 1b6:	48e080e7          	jalr	1166(ra) # 640 <timeout>
+      if (semdown(semid) == 0) {
+ 1ba:	854a                	mv	a0,s2
+ 1bc:	00000097          	auipc	ra,0x0
+ 1c0:	46c080e7          	jalr	1132(ra) # 628 <semdown>
+ 1c4:	fd79                	bnez	a0,1a2 <main+0x1a2>
+        printf("1st child in critical region \n");
+ 1c6:	855a                	mv	a0,s6
+ 1c8:	00000097          	auipc	ra,0x0
+ 1cc:	75a080e7          	jalr	1882(ra) # 922 <printf>
+        timeout(100000);
+ 1d0:	854e                	mv	a0,s3
+ 1d2:	00000097          	auipc	ra,0x0
+ 1d6:	46e080e7          	jalr	1134(ra) # 640 <timeout>
+        semup(semid);
+ 1da:	854a                	mv	a0,s2
+ 1dc:	00000097          	auipc	ra,0x0
+ 1e0:	454080e7          	jalr	1108(ra) # 630 <semup>
+        printf("1st child out \n");
+ 1e4:	8556                	mv	a0,s5
+ 1e6:	00000097          	auipc	ra,0x0
+ 1ea:	73c080e7          	jalr	1852(ra) # 922 <printf>
+ 1ee:	bf55                	j	1a2 <main+0x1a2>
+      }
+    }
+    exit(0);
+ 1f0:	4501                	li	a0,0
+ 1f2:	00000097          	auipc	ra,0x0
+ 1f6:	386080e7          	jalr	902(ra) # 578 <exit>
+  }
+
+  /*second child*/
+
+  if (fork() == 0) {
+ 1fa:	00000097          	auipc	ra,0x0
+ 1fe:	376080e7          	jalr	886(ra) # 570 <fork>
+ 202:	ed35                	bnez	a0,27e <main+0x27e>
+ 204:	44a9                	li	s1,10
+    ** implementation of semaphores, it's not necessary to get them again
+    ** because we can use the parent's
+    ** semid instead.
+    */
+    for (i = 0; i < 10; i++) {
+      printf("2nd child trying... \n");
+ 206:	00001a17          	auipc	s4,0x1
+ 20a:	af2a0a13          	addi	s4,s4,-1294 # cf8 <malloc+0x31e>
+      timeout(100000);
+ 20e:	69e1                	lui	s3,0x18
+ 210:	6a098993          	addi	s3,s3,1696 # 186a0 <__global_pointer$+0x170a7>
+      if (semdown(semid) == 0) {
+        printf("2nd child in critical region \n");
+ 214:	00001b17          	auipc	s6,0x1
+ 218:	afcb0b13          	addi	s6,s6,-1284 # d10 <malloc+0x336>
+        timeout(100000);
+        semup(semid);
+        printf("2nd child out \n");
+ 21c:	00001a97          	auipc	s5,0x1
+ 220:	b14a8a93          	addi	s5,s5,-1260 # d30 <malloc+0x356>
+ 224:	a019                	j	22a <main+0x22a>
+    for (i = 0; i < 10; i++) {
+ 226:	34fd                	addiw	s1,s1,-1
+ 228:	c4b1                	beqz	s1,274 <main+0x274>
+      printf("2nd child trying... \n");
+ 22a:	8552                	mv	a0,s4
+ 22c:	00000097          	auipc	ra,0x0
+ 230:	6f6080e7          	jalr	1782(ra) # 922 <printf>
+      timeout(100000);
+ 234:	854e                	mv	a0,s3
+ 236:	00000097          	auipc	ra,0x0
+ 23a:	40a080e7          	jalr	1034(ra) # 640 <timeout>
+      if (semdown(semid) == 0) {
+ 23e:	854a                	mv	a0,s2
+ 240:	00000097          	auipc	ra,0x0
+ 244:	3e8080e7          	jalr	1000(ra) # 628 <semdown>
+ 248:	fd79                	bnez	a0,226 <main+0x226>
+        printf("2nd child in critical region \n");
+ 24a:	855a                	mv	a0,s6
+ 24c:	00000097          	auipc	ra,0x0
+ 250:	6d6080e7          	jalr	1750(ra) # 922 <printf>
+        timeout(100000);
+ 254:	854e                	mv	a0,s3
+ 256:	00000097          	auipc	ra,0x0
+ 25a:	3ea080e7          	jalr	1002(ra) # 640 <timeout>
+        semup(semid);
+ 25e:	854a                	mv	a0,s2
+ 260:	00000097          	auipc	ra,0x0
+ 264:	3d0080e7          	jalr	976(ra) # 630 <semup>
+        printf("2nd child out \n");
+ 268:	8556                	mv	a0,s5
+ 26a:	00000097          	auipc	ra,0x0
+ 26e:	6b8080e7          	jalr	1720(ra) # 922 <printf>
+ 272:	bf55                	j	226 <main+0x226>
+      }
+    }
+    exit(0);
+ 274:	4501                	li	a0,0
+ 276:	00000097          	auipc	ra,0x0
+ 27a:	302080e7          	jalr	770(ra) # 578 <exit>
+ 27e:	44a9                	li	s1,10
+  }
+
+  /*Parent code*/
+  for (i = 0; i < 10; i++) {
+    printf("Parent trying... \n");
+ 280:	00001a17          	auipc	s4,0x1
+ 284:	ac0a0a13          	addi	s4,s4,-1344 # d40 <malloc+0x366>
+    timeout(100000);
+ 288:	69e1                	lui	s3,0x18
+ 28a:	6a098993          	addi	s3,s3,1696 # 186a0 <__global_pointer$+0x170a7>
+    if (semdown(semid) == 0) {
+      printf("Parent in critical region \n");
+ 28e:	00001b17          	auipc	s6,0x1
+ 292:	acab0b13          	addi	s6,s6,-1334 # d58 <malloc+0x37e>
+      timeout(100000);
+      semup(semid);
+      printf("Parent out \n");
+ 296:	00001a97          	auipc	s5,0x1
+ 29a:	ae2a8a93          	addi	s5,s5,-1310 # d78 <malloc+0x39e>
+ 29e:	a019                	j	2a4 <main+0x2a4>
+  for (i = 0; i < 10; i++) {
+ 2a0:	34fd                	addiw	s1,s1,-1
+ 2a2:	c4b1                	beqz	s1,2ee <main+0x2ee>
+    printf("Parent trying... \n");
+ 2a4:	8552                	mv	a0,s4
+ 2a6:	00000097          	auipc	ra,0x0
+ 2aa:	67c080e7          	jalr	1660(ra) # 922 <printf>
+    timeout(100000);
+ 2ae:	854e                	mv	a0,s3
+ 2b0:	00000097          	auipc	ra,0x0
+ 2b4:	390080e7          	jalr	912(ra) # 640 <timeout>
+    if (semdown(semid) == 0) {
+ 2b8:	854a                	mv	a0,s2
+ 2ba:	00000097          	auipc	ra,0x0
+ 2be:	36e080e7          	jalr	878(ra) # 628 <semdown>
+ 2c2:	fd79                	bnez	a0,2a0 <main+0x2a0>
+      printf("Parent in critical region \n");
+ 2c4:	855a                	mv	a0,s6
+ 2c6:	00000097          	auipc	ra,0x0
+ 2ca:	65c080e7          	jalr	1628(ra) # 922 <printf>
+      timeout(100000);
+ 2ce:	854e                	mv	a0,s3
+ 2d0:	00000097          	auipc	ra,0x0
+ 2d4:	370080e7          	jalr	880(ra) # 640 <timeout>
+      semup(semid);
+ 2d8:	854a                	mv	a0,s2
+ 2da:	00000097          	auipc	ra,0x0
+ 2de:	356080e7          	jalr	854(ra) # 630 <semup>
+      printf("Parent out \n");
+ 2e2:	8556                	mv	a0,s5
+ 2e4:	00000097          	auipc	ra,0x0
+ 2e8:	63e080e7          	jalr	1598(ra) # 922 <printf>
+ 2ec:	bf55                	j	2a0 <main+0x2a0>
+    }
+  }
+
+  wait(0);
+ 2ee:	4501                	li	a0,0
+ 2f0:	00000097          	auipc	ra,0x0
+ 2f4:	290080e7          	jalr	656(ra) # 580 <wait>
+  wait(0);
+ 2f8:	4501                	li	a0,0
+ 2fa:	00000097          	auipc	ra,0x0
+ 2fe:	286080e7          	jalr	646(ra) # 580 <wait>
+  exit(0);
+ 302:	4501                	li	a0,0
+ 304:	00000097          	auipc	ra,0x0
+ 308:	274080e7          	jalr	628(ra) # 578 <exit>
+
+000000000000030c <strcpy>:
+#include "kernel/fcntl.h"
+#include "user/user.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 30c:	1141                	addi	sp,sp,-16
+ 30e:	e422                	sd	s0,8(sp)
+ 310:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 312:	87aa                	mv	a5,a0
+ 314:	0585                	addi	a1,a1,1
+ 316:	0785                	addi	a5,a5,1
+ 318:	fff5c703          	lbu	a4,-1(a1)
+ 31c:	fee78fa3          	sb	a4,-1(a5)
+ 320:	fb75                	bnez	a4,314 <strcpy+0x8>
+    ;
+  return os;
+}
+ 322:	6422                	ld	s0,8(sp)
+ 324:	0141                	addi	sp,sp,16
+ 326:	8082                	ret
+
+0000000000000328 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 328:	1141                	addi	sp,sp,-16
+ 32a:	e422                	sd	s0,8(sp)
+ 32c:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+ 32e:	00054783          	lbu	a5,0(a0)
+ 332:	cb91                	beqz	a5,346 <strcmp+0x1e>
+ 334:	0005c703          	lbu	a4,0(a1)
+ 338:	00f71763          	bne	a4,a5,346 <strcmp+0x1e>
+    p++, q++;
+ 33c:	0505                	addi	a0,a0,1
+ 33e:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+ 340:	00054783          	lbu	a5,0(a0)
+ 344:	fbe5                	bnez	a5,334 <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+ 346:	0005c503          	lbu	a0,0(a1)
+}
+ 34a:	40a7853b          	subw	a0,a5,a0
+ 34e:	6422                	ld	s0,8(sp)
+ 350:	0141                	addi	sp,sp,16
+ 352:	8082                	ret
+
+0000000000000354 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 354:	1141                	addi	sp,sp,-16
+ 356:	e422                	sd	s0,8(sp)
+ 358:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 35a:	00054783          	lbu	a5,0(a0)
+ 35e:	cf91                	beqz	a5,37a <strlen+0x26>
+ 360:	0505                	addi	a0,a0,1
+ 362:	87aa                	mv	a5,a0
+ 364:	4685                	li	a3,1
+ 366:	9e89                	subw	a3,a3,a0
+ 368:	00f6853b          	addw	a0,a3,a5
+ 36c:	0785                	addi	a5,a5,1
+ 36e:	fff7c703          	lbu	a4,-1(a5)
+ 372:	fb7d                	bnez	a4,368 <strlen+0x14>
+    ;
+  return n;
+}
+ 374:	6422                	ld	s0,8(sp)
+ 376:	0141                	addi	sp,sp,16
+ 378:	8082                	ret
+  for(n = 0; s[n]; n++)
+ 37a:	4501                	li	a0,0
+ 37c:	bfe5                	j	374 <strlen+0x20>
+
+000000000000037e <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 37e:	1141                	addi	sp,sp,-16
+ 380:	e422                	sd	s0,8(sp)
+ 382:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+ 384:	ca19                	beqz	a2,39a <memset+0x1c>
+ 386:	87aa                	mv	a5,a0
+ 388:	1602                	slli	a2,a2,0x20
+ 38a:	9201                	srli	a2,a2,0x20
+ 38c:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+ 390:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+ 394:	0785                	addi	a5,a5,1
+ 396:	fee79de3          	bne	a5,a4,390 <memset+0x12>
+  }
+  return dst;
+}
+ 39a:	6422                	ld	s0,8(sp)
+ 39c:	0141                	addi	sp,sp,16
+ 39e:	8082                	ret
+
+00000000000003a0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 3a0:	1141                	addi	sp,sp,-16
+ 3a2:	e422                	sd	s0,8(sp)
+ 3a4:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+ 3a6:	00054783          	lbu	a5,0(a0)
+ 3aa:	cb99                	beqz	a5,3c0 <strchr+0x20>
+    if(*s == c)
+ 3ac:	00f58763          	beq	a1,a5,3ba <strchr+0x1a>
+  for(; *s; s++)
+ 3b0:	0505                	addi	a0,a0,1
+ 3b2:	00054783          	lbu	a5,0(a0)
+ 3b6:	fbfd                	bnez	a5,3ac <strchr+0xc>
+      return (char*)s;
+  return 0;
+ 3b8:	4501                	li	a0,0
+}
+ 3ba:	6422                	ld	s0,8(sp)
+ 3bc:	0141                	addi	sp,sp,16
+ 3be:	8082                	ret
+  return 0;
+ 3c0:	4501                	li	a0,0
+ 3c2:	bfe5                	j	3ba <strchr+0x1a>
+
+00000000000003c4 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 3c4:	711d                	addi	sp,sp,-96
+ 3c6:	ec86                	sd	ra,88(sp)
+ 3c8:	e8a2                	sd	s0,80(sp)
+ 3ca:	e4a6                	sd	s1,72(sp)
+ 3cc:	e0ca                	sd	s2,64(sp)
+ 3ce:	fc4e                	sd	s3,56(sp)
+ 3d0:	f852                	sd	s4,48(sp)
+ 3d2:	f456                	sd	s5,40(sp)
+ 3d4:	f05a                	sd	s6,32(sp)
+ 3d6:	ec5e                	sd	s7,24(sp)
+ 3d8:	1080                	addi	s0,sp,96
+ 3da:	8baa                	mv	s7,a0
+ 3dc:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 3de:	892a                	mv	s2,a0
+ 3e0:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+ 3e2:	4aa9                	li	s5,10
+ 3e4:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+ 3e6:	89a6                	mv	s3,s1
+ 3e8:	2485                	addiw	s1,s1,1
+ 3ea:	0344d863          	bge	s1,s4,41a <gets+0x56>
+    cc = read(0, &c, 1);
+ 3ee:	4605                	li	a2,1
+ 3f0:	faf40593          	addi	a1,s0,-81
+ 3f4:	4501                	li	a0,0
+ 3f6:	00000097          	auipc	ra,0x0
+ 3fa:	19a080e7          	jalr	410(ra) # 590 <read>
+    if(cc < 1)
+ 3fe:	00a05e63          	blez	a0,41a <gets+0x56>
+    buf[i++] = c;
+ 402:	faf44783          	lbu	a5,-81(s0)
+ 406:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+ 40a:	01578763          	beq	a5,s5,418 <gets+0x54>
+ 40e:	0905                	addi	s2,s2,1
+ 410:	fd679be3          	bne	a5,s6,3e6 <gets+0x22>
+  for(i=0; i+1 < max; ){
+ 414:	89a6                	mv	s3,s1
+ 416:	a011                	j	41a <gets+0x56>
+ 418:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+ 41a:	99de                	add	s3,s3,s7
+ 41c:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+ 420:	855e                	mv	a0,s7
+ 422:	60e6                	ld	ra,88(sp)
+ 424:	6446                	ld	s0,80(sp)
+ 426:	64a6                	ld	s1,72(sp)
+ 428:	6906                	ld	s2,64(sp)
+ 42a:	79e2                	ld	s3,56(sp)
+ 42c:	7a42                	ld	s4,48(sp)
+ 42e:	7aa2                	ld	s5,40(sp)
+ 430:	7b02                	ld	s6,32(sp)
+ 432:	6be2                	ld	s7,24(sp)
+ 434:	6125                	addi	sp,sp,96
+ 436:	8082                	ret
+
+0000000000000438 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 438:	1101                	addi	sp,sp,-32
+ 43a:	ec06                	sd	ra,24(sp)
+ 43c:	e822                	sd	s0,16(sp)
+ 43e:	e426                	sd	s1,8(sp)
+ 440:	e04a                	sd	s2,0(sp)
+ 442:	1000                	addi	s0,sp,32
+ 444:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 446:	4581                	li	a1,0
+ 448:	00000097          	auipc	ra,0x0
+ 44c:	170080e7          	jalr	368(ra) # 5b8 <open>
+  if(fd < 0)
+ 450:	02054563          	bltz	a0,47a <stat+0x42>
+ 454:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+ 456:	85ca                	mv	a1,s2
+ 458:	00000097          	auipc	ra,0x0
+ 45c:	178080e7          	jalr	376(ra) # 5d0 <fstat>
+ 460:	892a                	mv	s2,a0
+  close(fd);
+ 462:	8526                	mv	a0,s1
+ 464:	00000097          	auipc	ra,0x0
+ 468:	13c080e7          	jalr	316(ra) # 5a0 <close>
+  return r;
+}
+ 46c:	854a                	mv	a0,s2
+ 46e:	60e2                	ld	ra,24(sp)
+ 470:	6442                	ld	s0,16(sp)
+ 472:	64a2                	ld	s1,8(sp)
+ 474:	6902                	ld	s2,0(sp)
+ 476:	6105                	addi	sp,sp,32
+ 478:	8082                	ret
+    return -1;
+ 47a:	597d                	li	s2,-1
+ 47c:	bfc5                	j	46c <stat+0x34>
+
+000000000000047e <atoi>:
+
+int
+atoi(const char *s)
+{
+ 47e:	1141                	addi	sp,sp,-16
+ 480:	e422                	sd	s0,8(sp)
+ 482:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 484:	00054683          	lbu	a3,0(a0)
+ 488:	fd06879b          	addiw	a5,a3,-48
+ 48c:	0ff7f793          	zext.b	a5,a5
+ 490:	4625                	li	a2,9
+ 492:	02f66863          	bltu	a2,a5,4c2 <atoi+0x44>
+ 496:	872a                	mv	a4,a0
+  n = 0;
+ 498:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+ 49a:	0705                	addi	a4,a4,1
+ 49c:	0025179b          	slliw	a5,a0,0x2
+ 4a0:	9fa9                	addw	a5,a5,a0
+ 4a2:	0017979b          	slliw	a5,a5,0x1
+ 4a6:	9fb5                	addw	a5,a5,a3
+ 4a8:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+ 4ac:	00074683          	lbu	a3,0(a4)
+ 4b0:	fd06879b          	addiw	a5,a3,-48
+ 4b4:	0ff7f793          	zext.b	a5,a5
+ 4b8:	fef671e3          	bgeu	a2,a5,49a <atoi+0x1c>
+  return n;
+}
+ 4bc:	6422                	ld	s0,8(sp)
+ 4be:	0141                	addi	sp,sp,16
+ 4c0:	8082                	ret
+  n = 0;
+ 4c2:	4501                	li	a0,0
+ 4c4:	bfe5                	j	4bc <atoi+0x3e>
+
+00000000000004c6 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 4c6:	1141                	addi	sp,sp,-16
+ 4c8:	e422                	sd	s0,8(sp)
+ 4ca:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+ 4cc:	02b57463          	bgeu	a0,a1,4f4 <memmove+0x2e>
+    while(n-- > 0)
+ 4d0:	00c05f63          	blez	a2,4ee <memmove+0x28>
+ 4d4:	1602                	slli	a2,a2,0x20
+ 4d6:	9201                	srli	a2,a2,0x20
+ 4d8:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+ 4dc:	872a                	mv	a4,a0
+      *dst++ = *src++;
+ 4de:	0585                	addi	a1,a1,1
+ 4e0:	0705                	addi	a4,a4,1
+ 4e2:	fff5c683          	lbu	a3,-1(a1)
+ 4e6:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+ 4ea:	fee79ae3          	bne	a5,a4,4de <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+ 4ee:	6422                	ld	s0,8(sp)
+ 4f0:	0141                	addi	sp,sp,16
+ 4f2:	8082                	ret
+    dst += n;
+ 4f4:	00c50733          	add	a4,a0,a2
+    src += n;
+ 4f8:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+ 4fa:	fec05ae3          	blez	a2,4ee <memmove+0x28>
+ 4fe:	fff6079b          	addiw	a5,a2,-1
+ 502:	1782                	slli	a5,a5,0x20
+ 504:	9381                	srli	a5,a5,0x20
+ 506:	fff7c793          	not	a5,a5
+ 50a:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+ 50c:	15fd                	addi	a1,a1,-1
+ 50e:	177d                	addi	a4,a4,-1
+ 510:	0005c683          	lbu	a3,0(a1)
+ 514:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+ 518:	fee79ae3          	bne	a5,a4,50c <memmove+0x46>
+ 51c:	bfc9                	j	4ee <memmove+0x28>
+
+000000000000051e <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+ 51e:	1141                	addi	sp,sp,-16
+ 520:	e422                	sd	s0,8(sp)
+ 522:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+ 524:	ca05                	beqz	a2,554 <memcmp+0x36>
+ 526:	fff6069b          	addiw	a3,a2,-1
+ 52a:	1682                	slli	a3,a3,0x20
+ 52c:	9281                	srli	a3,a3,0x20
+ 52e:	0685                	addi	a3,a3,1
+ 530:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+ 532:	00054783          	lbu	a5,0(a0)
+ 536:	0005c703          	lbu	a4,0(a1)
+ 53a:	00e79863          	bne	a5,a4,54a <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+ 53e:	0505                	addi	a0,a0,1
+    p2++;
+ 540:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+ 542:	fed518e3          	bne	a0,a3,532 <memcmp+0x14>
+  }
+  return 0;
+ 546:	4501                	li	a0,0
+ 548:	a019                	j	54e <memcmp+0x30>
+      return *p1 - *p2;
+ 54a:	40e7853b          	subw	a0,a5,a4
+}
+ 54e:	6422                	ld	s0,8(sp)
+ 550:	0141                	addi	sp,sp,16
+ 552:	8082                	ret
+  return 0;
+ 554:	4501                	li	a0,0
+ 556:	bfe5                	j	54e <memcmp+0x30>
+
+0000000000000558 <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+ 558:	1141                	addi	sp,sp,-16
+ 55a:	e406                	sd	ra,8(sp)
+ 55c:	e022                	sd	s0,0(sp)
+ 55e:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+ 560:	00000097          	auipc	ra,0x0
+ 564:	f66080e7          	jalr	-154(ra) # 4c6 <memmove>
+}
+ 568:	60a2                	ld	ra,8(sp)
+ 56a:	6402                	ld	s0,0(sp)
+ 56c:	0141                	addi	sp,sp,16
+ 56e:	8082                	ret
+
+0000000000000570 <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ 570:	4885                	li	a7,1
+ ecall
+ 572:	00000073          	ecall
+ ret
+ 576:	8082                	ret
+
+0000000000000578 <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+ 578:	4889                	li	a7,2
+ ecall
+ 57a:	00000073          	ecall
+ ret
+ 57e:	8082                	ret
+
+0000000000000580 <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+ 580:	488d                	li	a7,3
+ ecall
+ 582:	00000073          	ecall
+ ret
+ 586:	8082                	ret
+
+0000000000000588 <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ 588:	4891                	li	a7,4
+ ecall
+ 58a:	00000073          	ecall
+ ret
+ 58e:	8082                	ret
+
+0000000000000590 <read>:
+.global read
+read:
+ li a7, SYS_read
+ 590:	4895                	li	a7,5
+ ecall
+ 592:	00000073          	ecall
+ ret
+ 596:	8082                	ret
+
+0000000000000598 <write>:
+.global write
+write:
+ li a7, SYS_write
+ 598:	48c1                	li	a7,16
+ ecall
+ 59a:	00000073          	ecall
+ ret
+ 59e:	8082                	ret
+
+00000000000005a0 <close>:
+.global close
+close:
+ li a7, SYS_close
+ 5a0:	48d5                	li	a7,21
+ ecall
+ 5a2:	00000073          	ecall
+ ret
+ 5a6:	8082                	ret
+
+00000000000005a8 <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+ 5a8:	4899                	li	a7,6
+ ecall
+ 5aa:	00000073          	ecall
+ ret
+ 5ae:	8082                	ret
+
+00000000000005b0 <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+ 5b0:	489d                	li	a7,7
+ ecall
+ 5b2:	00000073          	ecall
+ ret
+ 5b6:	8082                	ret
+
+00000000000005b8 <open>:
+.global open
+open:
+ li a7, SYS_open
+ 5b8:	48bd                	li	a7,15
+ ecall
+ 5ba:	00000073          	ecall
+ ret
+ 5be:	8082                	ret
+
+00000000000005c0 <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ 5c0:	48c5                	li	a7,17
+ ecall
+ 5c2:	00000073          	ecall
+ ret
+ 5c6:	8082                	ret
+
+00000000000005c8 <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ 5c8:	48c9                	li	a7,18
+ ecall
+ 5ca:	00000073          	ecall
+ ret
+ 5ce:	8082                	ret
+
+00000000000005d0 <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ 5d0:	48a1                	li	a7,8
+ ecall
+ 5d2:	00000073          	ecall
+ ret
+ 5d6:	8082                	ret
+
+00000000000005d8 <link>:
+.global link
+link:
+ li a7, SYS_link
+ 5d8:	48cd                	li	a7,19
+ ecall
+ 5da:	00000073          	ecall
+ ret
+ 5de:	8082                	ret
+
+00000000000005e0 <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ 5e0:	48d1                	li	a7,20
+ ecall
+ 5e2:	00000073          	ecall
+ ret
+ 5e6:	8082                	ret
+
+00000000000005e8 <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ 5e8:	48a5                	li	a7,9
+ ecall
+ 5ea:	00000073          	ecall
+ ret
+ 5ee:	8082                	ret
+
+00000000000005f0 <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+ 5f0:	48a9                	li	a7,10
+ ecall
+ 5f2:	00000073          	ecall
+ ret
+ 5f6:	8082                	ret
+
+00000000000005f8 <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ 5f8:	48ad                	li	a7,11
+ ecall
+ 5fa:	00000073          	ecall
+ ret
+ 5fe:	8082                	ret
+
+0000000000000600 <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ 600:	48b1                	li	a7,12
+ ecall
+ 602:	00000073          	ecall
+ ret
+ 606:	8082                	ret
+
+0000000000000608 <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ 608:	48b5                	li	a7,13
+ ecall
+ 60a:	00000073          	ecall
+ ret
+ 60e:	8082                	ret
+
+0000000000000610 <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ 610:	48b9                	li	a7,14
+ ecall
+ 612:	00000073          	ecall
+ ret
+ 616:	8082                	ret
+
+0000000000000618 <setp>:
+.global setp
+setp:
+ li a7, SYS_setp
+ 618:	48d9                	li	a7,22
+ ecall
+ 61a:	00000073          	ecall
+ ret
+ 61e:	8082                	ret
+
+0000000000000620 <semget>:
+.global semget
+semget:
+ li a7, SYS_semget
+ 620:	48dd                	li	a7,23
+ ecall
+ 622:	00000073          	ecall
+ ret
+ 626:	8082                	ret
+
+0000000000000628 <semdown>:
+.global semdown
+semdown:
+ li a7, SYS_semdown
+ 628:	48e1                	li	a7,24
+ ecall
+ 62a:	00000073          	ecall
+ ret
+ 62e:	8082                	ret
+
+0000000000000630 <semup>:
+.global semup
+semup:
+ li a7, SYS_semup
+ 630:	48e5                	li	a7,25
+ ecall
+ 632:	00000073          	ecall
+ ret
+ 636:	8082                	ret
+
+0000000000000638 <semclose>:
+.global semclose
+semclose:
+ li a7, SYS_semclose
+ 638:	48e9                	li	a7,26
+ ecall
+ 63a:	00000073          	ecall
+ ret
+ 63e:	8082                	ret
+
+0000000000000640 <timeout>:
+.global timeout
+timeout:
+ li a7, SYS_timeout
+ 640:	48ed                	li	a7,27
+ ecall
+ 642:	00000073          	ecall
+ ret
+ 646:	8082                	ret
+
+0000000000000648 <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+ 648:	1101                	addi	sp,sp,-32
+ 64a:	ec06                	sd	ra,24(sp)
+ 64c:	e822                	sd	s0,16(sp)
+ 64e:	1000                	addi	s0,sp,32
+ 650:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+ 654:	4605                	li	a2,1
+ 656:	fef40593          	addi	a1,s0,-17
+ 65a:	00000097          	auipc	ra,0x0
+ 65e:	f3e080e7          	jalr	-194(ra) # 598 <write>
+}
+ 662:	60e2                	ld	ra,24(sp)
+ 664:	6442                	ld	s0,16(sp)
+ 666:	6105                	addi	sp,sp,32
+ 668:	8082                	ret
+
+000000000000066a <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 66a:	7139                	addi	sp,sp,-64
+ 66c:	fc06                	sd	ra,56(sp)
+ 66e:	f822                	sd	s0,48(sp)
+ 670:	f426                	sd	s1,40(sp)
+ 672:	f04a                	sd	s2,32(sp)
+ 674:	ec4e                	sd	s3,24(sp)
+ 676:	0080                	addi	s0,sp,64
+ 678:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 67a:	c299                	beqz	a3,680 <printint+0x16>
+ 67c:	0805c963          	bltz	a1,70e <printint+0xa4>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 680:	2581                	sext.w	a1,a1
+  neg = 0;
+ 682:	4881                	li	a7,0
+ 684:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+ 688:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+ 68a:	2601                	sext.w	a2,a2
+ 68c:	00000517          	auipc	a0,0x0
+ 690:	75c50513          	addi	a0,a0,1884 # de8 <digits>
+ 694:	883a                	mv	a6,a4
+ 696:	2705                	addiw	a4,a4,1
+ 698:	02c5f7bb          	remuw	a5,a1,a2
+ 69c:	1782                	slli	a5,a5,0x20
+ 69e:	9381                	srli	a5,a5,0x20
+ 6a0:	97aa                	add	a5,a5,a0
+ 6a2:	0007c783          	lbu	a5,0(a5)
+ 6a6:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+ 6aa:	0005879b          	sext.w	a5,a1
+ 6ae:	02c5d5bb          	divuw	a1,a1,a2
+ 6b2:	0685                	addi	a3,a3,1
+ 6b4:	fec7f0e3          	bgeu	a5,a2,694 <printint+0x2a>
+  if(neg)
+ 6b8:	00088c63          	beqz	a7,6d0 <printint+0x66>
+    buf[i++] = '-';
+ 6bc:	fd070793          	addi	a5,a4,-48
+ 6c0:	00878733          	add	a4,a5,s0
+ 6c4:	02d00793          	li	a5,45
+ 6c8:	fef70823          	sb	a5,-16(a4)
+ 6cc:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+ 6d0:	02e05863          	blez	a4,700 <printint+0x96>
+ 6d4:	fc040793          	addi	a5,s0,-64
+ 6d8:	00e78933          	add	s2,a5,a4
+ 6dc:	fff78993          	addi	s3,a5,-1
+ 6e0:	99ba                	add	s3,s3,a4
+ 6e2:	377d                	addiw	a4,a4,-1
+ 6e4:	1702                	slli	a4,a4,0x20
+ 6e6:	9301                	srli	a4,a4,0x20
+ 6e8:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+ 6ec:	fff94583          	lbu	a1,-1(s2)
+ 6f0:	8526                	mv	a0,s1
+ 6f2:	00000097          	auipc	ra,0x0
+ 6f6:	f56080e7          	jalr	-170(ra) # 648 <putc>
+  while(--i >= 0)
+ 6fa:	197d                	addi	s2,s2,-1
+ 6fc:	ff3918e3          	bne	s2,s3,6ec <printint+0x82>
+}
+ 700:	70e2                	ld	ra,56(sp)
+ 702:	7442                	ld	s0,48(sp)
+ 704:	74a2                	ld	s1,40(sp)
+ 706:	7902                	ld	s2,32(sp)
+ 708:	69e2                	ld	s3,24(sp)
+ 70a:	6121                	addi	sp,sp,64
+ 70c:	8082                	ret
+    x = -xx;
+ 70e:	40b005bb          	negw	a1,a1
+    neg = 1;
+ 712:	4885                	li	a7,1
+    x = -xx;
+ 714:	bf85                	j	684 <printint+0x1a>
+
+0000000000000716 <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+ 716:	7119                	addi	sp,sp,-128
+ 718:	fc86                	sd	ra,120(sp)
+ 71a:	f8a2                	sd	s0,112(sp)
+ 71c:	f4a6                	sd	s1,104(sp)
+ 71e:	f0ca                	sd	s2,96(sp)
+ 720:	ecce                	sd	s3,88(sp)
+ 722:	e8d2                	sd	s4,80(sp)
+ 724:	e4d6                	sd	s5,72(sp)
+ 726:	e0da                	sd	s6,64(sp)
+ 728:	fc5e                	sd	s7,56(sp)
+ 72a:	f862                	sd	s8,48(sp)
+ 72c:	f466                	sd	s9,40(sp)
+ 72e:	f06a                	sd	s10,32(sp)
+ 730:	ec6e                	sd	s11,24(sp)
+ 732:	0100                	addi	s0,sp,128
+  char *s;
+  int c, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+ 734:	0005c903          	lbu	s2,0(a1)
+ 738:	18090f63          	beqz	s2,8d6 <vprintf+0x1c0>
+ 73c:	8aaa                	mv	s5,a0
+ 73e:	8b32                	mv	s6,a2
+ 740:	00158493          	addi	s1,a1,1
+  state = 0;
+ 744:	4981                	li	s3,0
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 746:	02500a13          	li	s4,37
+ 74a:	4c55                	li	s8,21
+ 74c:	00000c97          	auipc	s9,0x0
+ 750:	644c8c93          	addi	s9,s9,1604 # d90 <malloc+0x3b6>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c == 's'){
+        s = va_arg(ap, char*);
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 754:	02800d93          	li	s11,40
+  putc(fd, 'x');
+ 758:	4d41                	li	s10,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 75a:	00000b97          	auipc	s7,0x0
+ 75e:	68eb8b93          	addi	s7,s7,1678 # de8 <digits>
+ 762:	a839                	j	780 <vprintf+0x6a>
+        putc(fd, c);
+ 764:	85ca                	mv	a1,s2
+ 766:	8556                	mv	a0,s5
+ 768:	00000097          	auipc	ra,0x0
+ 76c:	ee0080e7          	jalr	-288(ra) # 648 <putc>
+ 770:	a019                	j	776 <vprintf+0x60>
+    } else if(state == '%'){
+ 772:	01498d63          	beq	s3,s4,78c <vprintf+0x76>
+  for(i = 0; fmt[i]; i++){
+ 776:	0485                	addi	s1,s1,1
+ 778:	fff4c903          	lbu	s2,-1(s1)
+ 77c:	14090d63          	beqz	s2,8d6 <vprintf+0x1c0>
+    if(state == 0){
+ 780:	fe0999e3          	bnez	s3,772 <vprintf+0x5c>
+      if(c == '%'){
+ 784:	ff4910e3          	bne	s2,s4,764 <vprintf+0x4e>
+        state = '%';
+ 788:	89d2                	mv	s3,s4
+ 78a:	b7f5                	j	776 <vprintf+0x60>
+      if(c == 'd'){
+ 78c:	11490c63          	beq	s2,s4,8a4 <vprintf+0x18e>
+ 790:	f9d9079b          	addiw	a5,s2,-99
+ 794:	0ff7f793          	zext.b	a5,a5
+ 798:	10fc6e63          	bltu	s8,a5,8b4 <vprintf+0x19e>
+ 79c:	f9d9079b          	addiw	a5,s2,-99
+ 7a0:	0ff7f713          	zext.b	a4,a5
+ 7a4:	10ec6863          	bltu	s8,a4,8b4 <vprintf+0x19e>
+ 7a8:	00271793          	slli	a5,a4,0x2
+ 7ac:	97e6                	add	a5,a5,s9
+ 7ae:	439c                	lw	a5,0(a5)
+ 7b0:	97e6                	add	a5,a5,s9
+ 7b2:	8782                	jr	a5
+        printint(fd, va_arg(ap, int), 10, 1);
+ 7b4:	008b0913          	addi	s2,s6,8
+ 7b8:	4685                	li	a3,1
+ 7ba:	4629                	li	a2,10
+ 7bc:	000b2583          	lw	a1,0(s6)
+ 7c0:	8556                	mv	a0,s5
+ 7c2:	00000097          	auipc	ra,0x0
+ 7c6:	ea8080e7          	jalr	-344(ra) # 66a <printint>
+ 7ca:	8b4a                	mv	s6,s2
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 7cc:	4981                	li	s3,0
+ 7ce:	b765                	j	776 <vprintf+0x60>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 7d0:	008b0913          	addi	s2,s6,8
+ 7d4:	4681                	li	a3,0
+ 7d6:	4629                	li	a2,10
+ 7d8:	000b2583          	lw	a1,0(s6)
+ 7dc:	8556                	mv	a0,s5
+ 7de:	00000097          	auipc	ra,0x0
+ 7e2:	e8c080e7          	jalr	-372(ra) # 66a <printint>
+ 7e6:	8b4a                	mv	s6,s2
+      state = 0;
+ 7e8:	4981                	li	s3,0
+ 7ea:	b771                	j	776 <vprintf+0x60>
+        printint(fd, va_arg(ap, int), 16, 0);
+ 7ec:	008b0913          	addi	s2,s6,8
+ 7f0:	4681                	li	a3,0
+ 7f2:	866a                	mv	a2,s10
+ 7f4:	000b2583          	lw	a1,0(s6)
+ 7f8:	8556                	mv	a0,s5
+ 7fa:	00000097          	auipc	ra,0x0
+ 7fe:	e70080e7          	jalr	-400(ra) # 66a <printint>
+ 802:	8b4a                	mv	s6,s2
+      state = 0;
+ 804:	4981                	li	s3,0
+ 806:	bf85                	j	776 <vprintf+0x60>
+        printptr(fd, va_arg(ap, uint64));
+ 808:	008b0793          	addi	a5,s6,8
+ 80c:	f8f43423          	sd	a5,-120(s0)
+ 810:	000b3983          	ld	s3,0(s6)
+  putc(fd, '0');
+ 814:	03000593          	li	a1,48
+ 818:	8556                	mv	a0,s5
+ 81a:	00000097          	auipc	ra,0x0
+ 81e:	e2e080e7          	jalr	-466(ra) # 648 <putc>
+  putc(fd, 'x');
+ 822:	07800593          	li	a1,120
+ 826:	8556                	mv	a0,s5
+ 828:	00000097          	auipc	ra,0x0
+ 82c:	e20080e7          	jalr	-480(ra) # 648 <putc>
+ 830:	896a                	mv	s2,s10
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 832:	03c9d793          	srli	a5,s3,0x3c
+ 836:	97de                	add	a5,a5,s7
+ 838:	0007c583          	lbu	a1,0(a5)
+ 83c:	8556                	mv	a0,s5
+ 83e:	00000097          	auipc	ra,0x0
+ 842:	e0a080e7          	jalr	-502(ra) # 648 <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+ 846:	0992                	slli	s3,s3,0x4
+ 848:	397d                	addiw	s2,s2,-1
+ 84a:	fe0914e3          	bnez	s2,832 <vprintf+0x11c>
+        printptr(fd, va_arg(ap, uint64));
+ 84e:	f8843b03          	ld	s6,-120(s0)
+      state = 0;
+ 852:	4981                	li	s3,0
+ 854:	b70d                	j	776 <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 856:	008b0913          	addi	s2,s6,8
+ 85a:	000b3983          	ld	s3,0(s6)
+        if(s == 0)
+ 85e:	02098163          	beqz	s3,880 <vprintf+0x16a>
+        while(*s != 0){
+ 862:	0009c583          	lbu	a1,0(s3)
+ 866:	c5ad                	beqz	a1,8d0 <vprintf+0x1ba>
+          putc(fd, *s);
+ 868:	8556                	mv	a0,s5
+ 86a:	00000097          	auipc	ra,0x0
+ 86e:	dde080e7          	jalr	-546(ra) # 648 <putc>
+          s++;
+ 872:	0985                	addi	s3,s3,1
+        while(*s != 0){
+ 874:	0009c583          	lbu	a1,0(s3)
+ 878:	f9e5                	bnez	a1,868 <vprintf+0x152>
+        s = va_arg(ap, char*);
+ 87a:	8b4a                	mv	s6,s2
+      state = 0;
+ 87c:	4981                	li	s3,0
+ 87e:	bde5                	j	776 <vprintf+0x60>
+          s = "(null)";
+ 880:	00000997          	auipc	s3,0x0
+ 884:	50898993          	addi	s3,s3,1288 # d88 <malloc+0x3ae>
+        while(*s != 0){
+ 888:	85ee                	mv	a1,s11
+ 88a:	bff9                	j	868 <vprintf+0x152>
+        putc(fd, va_arg(ap, uint));
+ 88c:	008b0913          	addi	s2,s6,8
+ 890:	000b4583          	lbu	a1,0(s6)
+ 894:	8556                	mv	a0,s5
+ 896:	00000097          	auipc	ra,0x0
+ 89a:	db2080e7          	jalr	-590(ra) # 648 <putc>
+ 89e:	8b4a                	mv	s6,s2
+      state = 0;
+ 8a0:	4981                	li	s3,0
+ 8a2:	bdd1                	j	776 <vprintf+0x60>
+        putc(fd, c);
+ 8a4:	85d2                	mv	a1,s4
+ 8a6:	8556                	mv	a0,s5
+ 8a8:	00000097          	auipc	ra,0x0
+ 8ac:	da0080e7          	jalr	-608(ra) # 648 <putc>
+      state = 0;
+ 8b0:	4981                	li	s3,0
+ 8b2:	b5d1                	j	776 <vprintf+0x60>
+        putc(fd, '%');
+ 8b4:	85d2                	mv	a1,s4
+ 8b6:	8556                	mv	a0,s5
+ 8b8:	00000097          	auipc	ra,0x0
+ 8bc:	d90080e7          	jalr	-624(ra) # 648 <putc>
+        putc(fd, c);
+ 8c0:	85ca                	mv	a1,s2
+ 8c2:	8556                	mv	a0,s5
+ 8c4:	00000097          	auipc	ra,0x0
+ 8c8:	d84080e7          	jalr	-636(ra) # 648 <putc>
+      state = 0;
+ 8cc:	4981                	li	s3,0
+ 8ce:	b565                	j	776 <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 8d0:	8b4a                	mv	s6,s2
+      state = 0;
+ 8d2:	4981                	li	s3,0
+ 8d4:	b54d                	j	776 <vprintf+0x60>
+    }
+  }
+}
+ 8d6:	70e6                	ld	ra,120(sp)
+ 8d8:	7446                	ld	s0,112(sp)
+ 8da:	74a6                	ld	s1,104(sp)
+ 8dc:	7906                	ld	s2,96(sp)
+ 8de:	69e6                	ld	s3,88(sp)
+ 8e0:	6a46                	ld	s4,80(sp)
+ 8e2:	6aa6                	ld	s5,72(sp)
+ 8e4:	6b06                	ld	s6,64(sp)
+ 8e6:	7be2                	ld	s7,56(sp)
+ 8e8:	7c42                	ld	s8,48(sp)
+ 8ea:	7ca2                	ld	s9,40(sp)
+ 8ec:	7d02                	ld	s10,32(sp)
+ 8ee:	6de2                	ld	s11,24(sp)
+ 8f0:	6109                	addi	sp,sp,128
+ 8f2:	8082                	ret
+
+00000000000008f4 <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+ 8f4:	715d                	addi	sp,sp,-80
+ 8f6:	ec06                	sd	ra,24(sp)
+ 8f8:	e822                	sd	s0,16(sp)
+ 8fa:	1000                	addi	s0,sp,32
+ 8fc:	e010                	sd	a2,0(s0)
+ 8fe:	e414                	sd	a3,8(s0)
+ 900:	e818                	sd	a4,16(s0)
+ 902:	ec1c                	sd	a5,24(s0)
+ 904:	03043023          	sd	a6,32(s0)
+ 908:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 90c:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+ 910:	8622                	mv	a2,s0
+ 912:	00000097          	auipc	ra,0x0
+ 916:	e04080e7          	jalr	-508(ra) # 716 <vprintf>
+}
+ 91a:	60e2                	ld	ra,24(sp)
+ 91c:	6442                	ld	s0,16(sp)
+ 91e:	6161                	addi	sp,sp,80
+ 920:	8082                	ret
+
+0000000000000922 <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+ 922:	711d                	addi	sp,sp,-96
+ 924:	ec06                	sd	ra,24(sp)
+ 926:	e822                	sd	s0,16(sp)
+ 928:	1000                	addi	s0,sp,32
+ 92a:	e40c                	sd	a1,8(s0)
+ 92c:	e810                	sd	a2,16(s0)
+ 92e:	ec14                	sd	a3,24(s0)
+ 930:	f018                	sd	a4,32(s0)
+ 932:	f41c                	sd	a5,40(s0)
+ 934:	03043823          	sd	a6,48(s0)
+ 938:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 93c:	00840613          	addi	a2,s0,8
+ 940:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+ 944:	85aa                	mv	a1,a0
+ 946:	4505                	li	a0,1
+ 948:	00000097          	auipc	ra,0x0
+ 94c:	dce080e7          	jalr	-562(ra) # 716 <vprintf>
+}
+ 950:	60e2                	ld	ra,24(sp)
+ 952:	6442                	ld	s0,16(sp)
+ 954:	6125                	addi	sp,sp,96
+ 956:	8082                	ret
+
+0000000000000958 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 958:	1141                	addi	sp,sp,-16
+ 95a:	e422                	sd	s0,8(sp)
+ 95c:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 95e:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 962:	00000797          	auipc	a5,0x0
+ 966:	49e7b783          	ld	a5,1182(a5) # e00 <freep>
+ 96a:	a02d                	j	994 <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 96c:	4618                	lw	a4,8(a2)
+ 96e:	9f2d                	addw	a4,a4,a1
+ 970:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 974:	6398                	ld	a4,0(a5)
+ 976:	6310                	ld	a2,0(a4)
+ 978:	a83d                	j	9b6 <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 97a:	ff852703          	lw	a4,-8(a0)
+ 97e:	9f31                	addw	a4,a4,a2
+ 980:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+ 982:	ff053683          	ld	a3,-16(a0)
+ 986:	a091                	j	9ca <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 988:	6398                	ld	a4,0(a5)
+ 98a:	00e7e463          	bltu	a5,a4,992 <free+0x3a>
+ 98e:	00e6ea63          	bltu	a3,a4,9a2 <free+0x4a>
+{
+ 992:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 994:	fed7fae3          	bgeu	a5,a3,988 <free+0x30>
+ 998:	6398                	ld	a4,0(a5)
+ 99a:	00e6e463          	bltu	a3,a4,9a2 <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 99e:	fee7eae3          	bltu	a5,a4,992 <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+ 9a2:	ff852583          	lw	a1,-8(a0)
+ 9a6:	6390                	ld	a2,0(a5)
+ 9a8:	02059813          	slli	a6,a1,0x20
+ 9ac:	01c85713          	srli	a4,a6,0x1c
+ 9b0:	9736                	add	a4,a4,a3
+ 9b2:	fae60de3          	beq	a2,a4,96c <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 9b6:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+ 9ba:	4790                	lw	a2,8(a5)
+ 9bc:	02061593          	slli	a1,a2,0x20
+ 9c0:	01c5d713          	srli	a4,a1,0x1c
+ 9c4:	973e                	add	a4,a4,a5
+ 9c6:	fae68ae3          	beq	a3,a4,97a <free+0x22>
+    p->s.ptr = bp->s.ptr;
+ 9ca:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 9cc:	00000717          	auipc	a4,0x0
+ 9d0:	42f73a23          	sd	a5,1076(a4) # e00 <freep>
+}
+ 9d4:	6422                	ld	s0,8(sp)
+ 9d6:	0141                	addi	sp,sp,16
+ 9d8:	8082                	ret
+
+00000000000009da <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 9da:	7139                	addi	sp,sp,-64
+ 9dc:	fc06                	sd	ra,56(sp)
+ 9de:	f822                	sd	s0,48(sp)
+ 9e0:	f426                	sd	s1,40(sp)
+ 9e2:	f04a                	sd	s2,32(sp)
+ 9e4:	ec4e                	sd	s3,24(sp)
+ 9e6:	e852                	sd	s4,16(sp)
+ 9e8:	e456                	sd	s5,8(sp)
+ 9ea:	e05a                	sd	s6,0(sp)
+ 9ec:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 9ee:	02051493          	slli	s1,a0,0x20
+ 9f2:	9081                	srli	s1,s1,0x20
+ 9f4:	04bd                	addi	s1,s1,15
+ 9f6:	8091                	srli	s1,s1,0x4
+ 9f8:	0014899b          	addiw	s3,s1,1
+ 9fc:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+ 9fe:	00000517          	auipc	a0,0x0
+ a02:	40253503          	ld	a0,1026(a0) # e00 <freep>
+ a06:	c515                	beqz	a0,a32 <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ a08:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ a0a:	4798                	lw	a4,8(a5)
+ a0c:	02977f63          	bgeu	a4,s1,a4a <malloc+0x70>
+ a10:	8a4e                	mv	s4,s3
+ a12:	0009871b          	sext.w	a4,s3
+ a16:	6685                	lui	a3,0x1
+ a18:	00d77363          	bgeu	a4,a3,a1e <malloc+0x44>
+ a1c:	6a05                	lui	s4,0x1
+ a1e:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+ a22:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ a26:	00000917          	auipc	s2,0x0
+ a2a:	3da90913          	addi	s2,s2,986 # e00 <freep>
+  if(p == (char*)-1)
+ a2e:	5afd                	li	s5,-1
+ a30:	a895                	j	aa4 <malloc+0xca>
+    base.s.ptr = freep = prevp = &base;
+ a32:	00000797          	auipc	a5,0x0
+ a36:	3d678793          	addi	a5,a5,982 # e08 <base>
+ a3a:	00000717          	auipc	a4,0x0
+ a3e:	3cf73323          	sd	a5,966(a4) # e00 <freep>
+ a42:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+ a44:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+ a48:	b7e1                	j	a10 <malloc+0x36>
+      if(p->s.size == nunits)
+ a4a:	02e48c63          	beq	s1,a4,a82 <malloc+0xa8>
+        p->s.size -= nunits;
+ a4e:	4137073b          	subw	a4,a4,s3
+ a52:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+ a54:	02071693          	slli	a3,a4,0x20
+ a58:	01c6d713          	srli	a4,a3,0x1c
+ a5c:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+ a5e:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+ a62:	00000717          	auipc	a4,0x0
+ a66:	38a73f23          	sd	a0,926(a4) # e00 <freep>
+      return (void*)(p + 1);
+ a6a:	01078513          	addi	a0,a5,16
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ a6e:	70e2                	ld	ra,56(sp)
+ a70:	7442                	ld	s0,48(sp)
+ a72:	74a2                	ld	s1,40(sp)
+ a74:	7902                	ld	s2,32(sp)
+ a76:	69e2                	ld	s3,24(sp)
+ a78:	6a42                	ld	s4,16(sp)
+ a7a:	6aa2                	ld	s5,8(sp)
+ a7c:	6b02                	ld	s6,0(sp)
+ a7e:	6121                	addi	sp,sp,64
+ a80:	8082                	ret
+        prevp->s.ptr = p->s.ptr;
+ a82:	6398                	ld	a4,0(a5)
+ a84:	e118                	sd	a4,0(a0)
+ a86:	bff1                	j	a62 <malloc+0x88>
+  hp->s.size = nu;
+ a88:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+ a8c:	0541                	addi	a0,a0,16
+ a8e:	00000097          	auipc	ra,0x0
+ a92:	eca080e7          	jalr	-310(ra) # 958 <free>
+  return freep;
+ a96:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+ a9a:	d971                	beqz	a0,a6e <malloc+0x94>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ a9c:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ a9e:	4798                	lw	a4,8(a5)
+ aa0:	fa9775e3          	bgeu	a4,s1,a4a <malloc+0x70>
+    if(p == freep)
+ aa4:	00093703          	ld	a4,0(s2)
+ aa8:	853e                	mv	a0,a5
+ aaa:	fef719e3          	bne	a4,a5,a9c <malloc+0xc2>
+  p = sbrk(nu * sizeof(Header));
+ aae:	8552                	mv	a0,s4
+ ab0:	00000097          	auipc	ra,0x0
+ ab4:	b50080e7          	jalr	-1200(ra) # 600 <sbrk>
+  if(p == (char*)-1)
+ ab8:	fd5518e3          	bne	a0,s5,a88 <malloc+0xae>
+        return 0;
+ abc:	4501                	li	a0,0
+ abe:	bf45                	j	a6e <malloc+0x94>
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/badtest.c os-workshop/user/badtest.c
--- xv6-riscv/user/badtest.c	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/badtest.c	2022-05-28 22:36:51.000000000 -0300
@@ -0,0 +1,133 @@
+#include "kernel/types.h"
+#include "user/user.h"
+
+#define LIMIT 1000
+#define KEY 20
+#define KEY2 26
+
+int main(void) {
+
+  int semid, i = 0;
+
+  /*checking for non process sema access*/
+  int chk = semup(20);
+  if (chk < 0)
+    printf("Testing non adquired semaphore (up): OK!\n");
+  else
+    printf("Testing non adquired semaphore (up): FAILED.\n");
+
+  chk = semdown(20);
+  if (chk < 0)
+    printf("Testing non adquired semaphore (down): OK!\n");
+  else
+    printf("Testing non adquired semaphore (down): FAILED.\n");
+
+  /*checking for close non requested semaphore*/
+  chk = semclose(8);
+  if (chk < 0)
+    printf("Testing semclose: OK!.\n");
+  else
+    printf("Testing semclose: FAILED!.\n");
+
+  /*checking for getting all the resources*/
+  int countsem = 0, it;
+  chk = 0;
+  for (it = 0; it < LIMIT && chk >= 0; it++, countsem++) {
+    chk = semget(KEY, 4);
+    printf("semget: %d\n", chk);
+  }
+  printf("Testing get all semaphores availables (%d availables?).\n",
+         countsem - 1);
+
+  /*checking for close: sem 0 was adquired*/
+  chk = semclose(0);
+  if (chk == 0)
+    printf("Testing semclose sem 0: OK!.\n");
+  else
+    printf("Testing semclose sem 0: FAILED!.\n");
+
+  /*checking for close: but not twice!*/
+  chk = semclose(0);
+  if (chk < 0)
+    printf("Testing semclose sem 0 (second time): OK!.\n");
+  else
+    printf("Testing semclose sem 0 (second time): FAILED!.\n");
+
+  /*cheching binary semaphore locking*/
+
+  /*cheching n-ary semaphore*/
+
+  /* We changed KEY to KEY2 because there was already a semaphore created using
+   * KEY and value=4, and that caused semget to find that semaphore and change
+   * the behavior with respect to value=2, allowing both children as well as the
+   * parent process to enter the critical region.
+   */
+  semid = semget(KEY2, 2);
+
+  if (fork() == 0) {
+    /*
+    ** semget(semid, -1); -- we think that instead of semid, the param should be
+    ** KEY. Anyhow, given our
+    ** implementation of semaphores, it's not necessary to get them again
+    ** because we can use the parent's
+    ** semid instead.
+    */
+    for (i = 0; i < 10; i++) {
+      printf("1st child trying... \n");
+      timeout(100000);
+      /*
+      ** In cases like these we added the if condition because it is important
+      ** (given our implementation)
+      ** to check the return value of semdown to verify that the process did
+      ** indeed gain access to the
+      ** critical region or not.
+      */
+      if (semdown(semid) == 0) {
+        printf("1st child in critical region \n");
+        timeout(100000);
+        semup(semid);
+        printf("1st child out \n");
+      }
+    }
+    exit(0);
+  }
+
+  /*second child*/
+
+  if (fork() == 0) {
+    /*
+    ** semget(semid, -1); -- we think that instead of semid, the param should be
+    ** KEY. Anyhow, given our
+    ** implementation of semaphores, it's not necessary to get them again
+    ** because we can use the parent's
+    ** semid instead.
+    */
+    for (i = 0; i < 10; i++) {
+      printf("2nd child trying... \n");
+      timeout(100000);
+      if (semdown(semid) == 0) {
+        printf("2nd child in critical region \n");
+        timeout(100000);
+        semup(semid);
+        printf("2nd child out \n");
+      }
+    }
+    exit(0);
+  }
+
+  /*Parent code*/
+  for (i = 0; i < 10; i++) {
+    printf("Parent trying... \n");
+    timeout(100000);
+    if (semdown(semid) == 0) {
+      printf("Parent in critical region \n");
+      timeout(100000);
+      semup(semid);
+      printf("Parent out \n");
+    }
+  }
+
+  wait(0);
+  wait(0);
+  exit(0);
+}
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/badtest.d os-workshop/user/badtest.d
--- xv6-riscv/user/badtest.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/badtest.d	2022-05-28 22:38:24.000000000 -0300
@@ -0,0 +1 @@
+user/badtest.o: user/badtest.c kernel/types.h user/user.h
Binary files xv6-riscv/user/badtest.o and os-workshop/user/badtest.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/badtest.sym os-workshop/user/badtest.sym
--- xv6-riscv/user/badtest.sym	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/badtest.sym	2022-05-28 22:38:24.000000000 -0300
@@ -0,0 +1,76 @@
+0000000000000000 .text
+0000000000000ac0 .rodata
+0000000000000e00 .sbss
+0000000000000e08 .bss
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_aranges
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_line
+0000000000000000 .debug_frame
+0000000000000000 .debug_str
+0000000000000000 .debug_line_str
+0000000000000000 .debug_loclists
+0000000000000000 .debug_rnglists
+0000000000000000 badtest.c
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+0000000000000648 putc
+000000000000066a printint
+0000000000000de8 digits
+0000000000000000 umalloc.c
+0000000000000e00 freep
+0000000000000e08 base
+000000000000030c strcpy
+0000000000000922 printf
+00000000000015f9 __global_pointer$
+00000000000004c6 memmove
+00000000000005c0 mknod
+0000000000000628 semdown
+00000000000003c4 gets
+0000000000000df9 __SDATA_BEGIN__
+0000000000000620 semget
+00000000000005f8 getpid
+0000000000000558 memcpy
+00000000000009da malloc
+0000000000000638 semclose
+0000000000000608 sleep
+0000000000000588 pipe
+0000000000000598 write
+00000000000005d0 fstat
+00000000000008f4 fprintf
+00000000000005a8 kill
+0000000000000716 vprintf
+00000000000005e8 chdir
+00000000000005b0 exec
+0000000000000580 wait
+0000000000000590 read
+00000000000005c8 unlink
+000000000000051e memcmp
+0000000000000570 fork
+0000000000000e18 __BSS_END__
+0000000000000600 sbrk
+0000000000000610 uptime
+0000000000000df9 __bss_start
+000000000000037e memset
+0000000000000000 main
+0000000000000640 timeout
+0000000000000328 strcmp
+00000000000005f0 dup
+0000000000000df9 __DATA_BEGIN__
+0000000000000438 stat
+0000000000000df9 _edata
+0000000000000618 setp
+0000000000000e18 _end
+00000000000005d8 link
+0000000000000578 exit
+000000000000047e atoi
+0000000000000354 strlen
+00000000000005b8 open
+0000000000000630 semup
+00000000000003a0 strchr
+00000000000005e0 mkdir
+00000000000005a0 close
+0000000000000958 free
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/bottomprior.asm os-workshop/user/bottomprior.asm
--- xv6-riscv/user/bottomprior.asm	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/bottomprior.asm	2022-05-28 22:34:31.000000000 -0300
@@ -0,0 +1,1344 @@
+
+user/_bottomprior:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <main>:
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main() {
+   0:	1141                	addi	sp,sp,-16
+   2:	e406                	sd	ra,8(sp)
+   4:	e022                	sd	s0,0(sp)
+   6:	0800                	addi	s0,sp,16
+  for(;;){
+    setp(4);
+   8:	4511                	li	a0,4
+   a:	00000097          	auipc	ra,0x0
+   e:	316080e7          	jalr	790(ra) # 320 <setp>
+  for(;;){
+  12:	bfdd                	j	8 <main+0x8>
+
+0000000000000014 <strcpy>:
+#include "kernel/fcntl.h"
+#include "user/user.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  14:	1141                	addi	sp,sp,-16
+  16:	e422                	sd	s0,8(sp)
+  18:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  1a:	87aa                	mv	a5,a0
+  1c:	0585                	addi	a1,a1,1
+  1e:	0785                	addi	a5,a5,1
+  20:	fff5c703          	lbu	a4,-1(a1)
+  24:	fee78fa3          	sb	a4,-1(a5)
+  28:	fb75                	bnez	a4,1c <strcpy+0x8>
+    ;
+  return os;
+}
+  2a:	6422                	ld	s0,8(sp)
+  2c:	0141                	addi	sp,sp,16
+  2e:	8082                	ret
+
+0000000000000030 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  30:	1141                	addi	sp,sp,-16
+  32:	e422                	sd	s0,8(sp)
+  34:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+  36:	00054783          	lbu	a5,0(a0)
+  3a:	cb91                	beqz	a5,4e <strcmp+0x1e>
+  3c:	0005c703          	lbu	a4,0(a1)
+  40:	00f71763          	bne	a4,a5,4e <strcmp+0x1e>
+    p++, q++;
+  44:	0505                	addi	a0,a0,1
+  46:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+  48:	00054783          	lbu	a5,0(a0)
+  4c:	fbe5                	bnez	a5,3c <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+  4e:	0005c503          	lbu	a0,0(a1)
+}
+  52:	40a7853b          	subw	a0,a5,a0
+  56:	6422                	ld	s0,8(sp)
+  58:	0141                	addi	sp,sp,16
+  5a:	8082                	ret
+
+000000000000005c <strlen>:
+
+uint
+strlen(const char *s)
+{
+  5c:	1141                	addi	sp,sp,-16
+  5e:	e422                	sd	s0,8(sp)
+  60:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+  62:	00054783          	lbu	a5,0(a0)
+  66:	cf91                	beqz	a5,82 <strlen+0x26>
+  68:	0505                	addi	a0,a0,1
+  6a:	87aa                	mv	a5,a0
+  6c:	4685                	li	a3,1
+  6e:	9e89                	subw	a3,a3,a0
+  70:	00f6853b          	addw	a0,a3,a5
+  74:	0785                	addi	a5,a5,1
+  76:	fff7c703          	lbu	a4,-1(a5)
+  7a:	fb7d                	bnez	a4,70 <strlen+0x14>
+    ;
+  return n;
+}
+  7c:	6422                	ld	s0,8(sp)
+  7e:	0141                	addi	sp,sp,16
+  80:	8082                	ret
+  for(n = 0; s[n]; n++)
+  82:	4501                	li	a0,0
+  84:	bfe5                	j	7c <strlen+0x20>
+
+0000000000000086 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  86:	1141                	addi	sp,sp,-16
+  88:	e422                	sd	s0,8(sp)
+  8a:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+  8c:	ca19                	beqz	a2,a2 <memset+0x1c>
+  8e:	87aa                	mv	a5,a0
+  90:	1602                	slli	a2,a2,0x20
+  92:	9201                	srli	a2,a2,0x20
+  94:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+  98:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+  9c:	0785                	addi	a5,a5,1
+  9e:	fee79de3          	bne	a5,a4,98 <memset+0x12>
+  }
+  return dst;
+}
+  a2:	6422                	ld	s0,8(sp)
+  a4:	0141                	addi	sp,sp,16
+  a6:	8082                	ret
+
+00000000000000a8 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+  a8:	1141                	addi	sp,sp,-16
+  aa:	e422                	sd	s0,8(sp)
+  ac:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+  ae:	00054783          	lbu	a5,0(a0)
+  b2:	cb99                	beqz	a5,c8 <strchr+0x20>
+    if(*s == c)
+  b4:	00f58763          	beq	a1,a5,c2 <strchr+0x1a>
+  for(; *s; s++)
+  b8:	0505                	addi	a0,a0,1
+  ba:	00054783          	lbu	a5,0(a0)
+  be:	fbfd                	bnez	a5,b4 <strchr+0xc>
+      return (char*)s;
+  return 0;
+  c0:	4501                	li	a0,0
+}
+  c2:	6422                	ld	s0,8(sp)
+  c4:	0141                	addi	sp,sp,16
+  c6:	8082                	ret
+  return 0;
+  c8:	4501                	li	a0,0
+  ca:	bfe5                	j	c2 <strchr+0x1a>
+
+00000000000000cc <gets>:
+
+char*
+gets(char *buf, int max)
+{
+  cc:	711d                	addi	sp,sp,-96
+  ce:	ec86                	sd	ra,88(sp)
+  d0:	e8a2                	sd	s0,80(sp)
+  d2:	e4a6                	sd	s1,72(sp)
+  d4:	e0ca                	sd	s2,64(sp)
+  d6:	fc4e                	sd	s3,56(sp)
+  d8:	f852                	sd	s4,48(sp)
+  da:	f456                	sd	s5,40(sp)
+  dc:	f05a                	sd	s6,32(sp)
+  de:	ec5e                	sd	s7,24(sp)
+  e0:	1080                	addi	s0,sp,96
+  e2:	8baa                	mv	s7,a0
+  e4:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+  e6:	892a                	mv	s2,a0
+  e8:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+  ea:	4aa9                	li	s5,10
+  ec:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+  ee:	89a6                	mv	s3,s1
+  f0:	2485                	addiw	s1,s1,1
+  f2:	0344d863          	bge	s1,s4,122 <gets+0x56>
+    cc = read(0, &c, 1);
+  f6:	4605                	li	a2,1
+  f8:	faf40593          	addi	a1,s0,-81
+  fc:	4501                	li	a0,0
+  fe:	00000097          	auipc	ra,0x0
+ 102:	19a080e7          	jalr	410(ra) # 298 <read>
+    if(cc < 1)
+ 106:	00a05e63          	blez	a0,122 <gets+0x56>
+    buf[i++] = c;
+ 10a:	faf44783          	lbu	a5,-81(s0)
+ 10e:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+ 112:	01578763          	beq	a5,s5,120 <gets+0x54>
+ 116:	0905                	addi	s2,s2,1
+ 118:	fd679be3          	bne	a5,s6,ee <gets+0x22>
+  for(i=0; i+1 < max; ){
+ 11c:	89a6                	mv	s3,s1
+ 11e:	a011                	j	122 <gets+0x56>
+ 120:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+ 122:	99de                	add	s3,s3,s7
+ 124:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+ 128:	855e                	mv	a0,s7
+ 12a:	60e6                	ld	ra,88(sp)
+ 12c:	6446                	ld	s0,80(sp)
+ 12e:	64a6                	ld	s1,72(sp)
+ 130:	6906                	ld	s2,64(sp)
+ 132:	79e2                	ld	s3,56(sp)
+ 134:	7a42                	ld	s4,48(sp)
+ 136:	7aa2                	ld	s5,40(sp)
+ 138:	7b02                	ld	s6,32(sp)
+ 13a:	6be2                	ld	s7,24(sp)
+ 13c:	6125                	addi	sp,sp,96
+ 13e:	8082                	ret
+
+0000000000000140 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 140:	1101                	addi	sp,sp,-32
+ 142:	ec06                	sd	ra,24(sp)
+ 144:	e822                	sd	s0,16(sp)
+ 146:	e426                	sd	s1,8(sp)
+ 148:	e04a                	sd	s2,0(sp)
+ 14a:	1000                	addi	s0,sp,32
+ 14c:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 14e:	4581                	li	a1,0
+ 150:	00000097          	auipc	ra,0x0
+ 154:	170080e7          	jalr	368(ra) # 2c0 <open>
+  if(fd < 0)
+ 158:	02054563          	bltz	a0,182 <stat+0x42>
+ 15c:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+ 15e:	85ca                	mv	a1,s2
+ 160:	00000097          	auipc	ra,0x0
+ 164:	178080e7          	jalr	376(ra) # 2d8 <fstat>
+ 168:	892a                	mv	s2,a0
+  close(fd);
+ 16a:	8526                	mv	a0,s1
+ 16c:	00000097          	auipc	ra,0x0
+ 170:	13c080e7          	jalr	316(ra) # 2a8 <close>
+  return r;
+}
+ 174:	854a                	mv	a0,s2
+ 176:	60e2                	ld	ra,24(sp)
+ 178:	6442                	ld	s0,16(sp)
+ 17a:	64a2                	ld	s1,8(sp)
+ 17c:	6902                	ld	s2,0(sp)
+ 17e:	6105                	addi	sp,sp,32
+ 180:	8082                	ret
+    return -1;
+ 182:	597d                	li	s2,-1
+ 184:	bfc5                	j	174 <stat+0x34>
+
+0000000000000186 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 186:	1141                	addi	sp,sp,-16
+ 188:	e422                	sd	s0,8(sp)
+ 18a:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 18c:	00054683          	lbu	a3,0(a0)
+ 190:	fd06879b          	addiw	a5,a3,-48
+ 194:	0ff7f793          	zext.b	a5,a5
+ 198:	4625                	li	a2,9
+ 19a:	02f66863          	bltu	a2,a5,1ca <atoi+0x44>
+ 19e:	872a                	mv	a4,a0
+  n = 0;
+ 1a0:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+ 1a2:	0705                	addi	a4,a4,1
+ 1a4:	0025179b          	slliw	a5,a0,0x2
+ 1a8:	9fa9                	addw	a5,a5,a0
+ 1aa:	0017979b          	slliw	a5,a5,0x1
+ 1ae:	9fb5                	addw	a5,a5,a3
+ 1b0:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+ 1b4:	00074683          	lbu	a3,0(a4)
+ 1b8:	fd06879b          	addiw	a5,a3,-48
+ 1bc:	0ff7f793          	zext.b	a5,a5
+ 1c0:	fef671e3          	bgeu	a2,a5,1a2 <atoi+0x1c>
+  return n;
+}
+ 1c4:	6422                	ld	s0,8(sp)
+ 1c6:	0141                	addi	sp,sp,16
+ 1c8:	8082                	ret
+  n = 0;
+ 1ca:	4501                	li	a0,0
+ 1cc:	bfe5                	j	1c4 <atoi+0x3e>
+
+00000000000001ce <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 1ce:	1141                	addi	sp,sp,-16
+ 1d0:	e422                	sd	s0,8(sp)
+ 1d2:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+ 1d4:	02b57463          	bgeu	a0,a1,1fc <memmove+0x2e>
+    while(n-- > 0)
+ 1d8:	00c05f63          	blez	a2,1f6 <memmove+0x28>
+ 1dc:	1602                	slli	a2,a2,0x20
+ 1de:	9201                	srli	a2,a2,0x20
+ 1e0:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+ 1e4:	872a                	mv	a4,a0
+      *dst++ = *src++;
+ 1e6:	0585                	addi	a1,a1,1
+ 1e8:	0705                	addi	a4,a4,1
+ 1ea:	fff5c683          	lbu	a3,-1(a1)
+ 1ee:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+ 1f2:	fee79ae3          	bne	a5,a4,1e6 <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+ 1f6:	6422                	ld	s0,8(sp)
+ 1f8:	0141                	addi	sp,sp,16
+ 1fa:	8082                	ret
+    dst += n;
+ 1fc:	00c50733          	add	a4,a0,a2
+    src += n;
+ 200:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+ 202:	fec05ae3          	blez	a2,1f6 <memmove+0x28>
+ 206:	fff6079b          	addiw	a5,a2,-1
+ 20a:	1782                	slli	a5,a5,0x20
+ 20c:	9381                	srli	a5,a5,0x20
+ 20e:	fff7c793          	not	a5,a5
+ 212:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+ 214:	15fd                	addi	a1,a1,-1
+ 216:	177d                	addi	a4,a4,-1
+ 218:	0005c683          	lbu	a3,0(a1)
+ 21c:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+ 220:	fee79ae3          	bne	a5,a4,214 <memmove+0x46>
+ 224:	bfc9                	j	1f6 <memmove+0x28>
+
+0000000000000226 <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+ 226:	1141                	addi	sp,sp,-16
+ 228:	e422                	sd	s0,8(sp)
+ 22a:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+ 22c:	ca05                	beqz	a2,25c <memcmp+0x36>
+ 22e:	fff6069b          	addiw	a3,a2,-1
+ 232:	1682                	slli	a3,a3,0x20
+ 234:	9281                	srli	a3,a3,0x20
+ 236:	0685                	addi	a3,a3,1
+ 238:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+ 23a:	00054783          	lbu	a5,0(a0)
+ 23e:	0005c703          	lbu	a4,0(a1)
+ 242:	00e79863          	bne	a5,a4,252 <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+ 246:	0505                	addi	a0,a0,1
+    p2++;
+ 248:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+ 24a:	fed518e3          	bne	a0,a3,23a <memcmp+0x14>
+  }
+  return 0;
+ 24e:	4501                	li	a0,0
+ 250:	a019                	j	256 <memcmp+0x30>
+      return *p1 - *p2;
+ 252:	40e7853b          	subw	a0,a5,a4
+}
+ 256:	6422                	ld	s0,8(sp)
+ 258:	0141                	addi	sp,sp,16
+ 25a:	8082                	ret
+  return 0;
+ 25c:	4501                	li	a0,0
+ 25e:	bfe5                	j	256 <memcmp+0x30>
+
+0000000000000260 <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+ 260:	1141                	addi	sp,sp,-16
+ 262:	e406                	sd	ra,8(sp)
+ 264:	e022                	sd	s0,0(sp)
+ 266:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+ 268:	00000097          	auipc	ra,0x0
+ 26c:	f66080e7          	jalr	-154(ra) # 1ce <memmove>
+}
+ 270:	60a2                	ld	ra,8(sp)
+ 272:	6402                	ld	s0,0(sp)
+ 274:	0141                	addi	sp,sp,16
+ 276:	8082                	ret
+
+0000000000000278 <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ 278:	4885                	li	a7,1
+ ecall
+ 27a:	00000073          	ecall
+ ret
+ 27e:	8082                	ret
+
+0000000000000280 <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+ 280:	4889                	li	a7,2
+ ecall
+ 282:	00000073          	ecall
+ ret
+ 286:	8082                	ret
+
+0000000000000288 <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+ 288:	488d                	li	a7,3
+ ecall
+ 28a:	00000073          	ecall
+ ret
+ 28e:	8082                	ret
+
+0000000000000290 <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ 290:	4891                	li	a7,4
+ ecall
+ 292:	00000073          	ecall
+ ret
+ 296:	8082                	ret
+
+0000000000000298 <read>:
+.global read
+read:
+ li a7, SYS_read
+ 298:	4895                	li	a7,5
+ ecall
+ 29a:	00000073          	ecall
+ ret
+ 29e:	8082                	ret
+
+00000000000002a0 <write>:
+.global write
+write:
+ li a7, SYS_write
+ 2a0:	48c1                	li	a7,16
+ ecall
+ 2a2:	00000073          	ecall
+ ret
+ 2a6:	8082                	ret
+
+00000000000002a8 <close>:
+.global close
+close:
+ li a7, SYS_close
+ 2a8:	48d5                	li	a7,21
+ ecall
+ 2aa:	00000073          	ecall
+ ret
+ 2ae:	8082                	ret
+
+00000000000002b0 <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+ 2b0:	4899                	li	a7,6
+ ecall
+ 2b2:	00000073          	ecall
+ ret
+ 2b6:	8082                	ret
+
+00000000000002b8 <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+ 2b8:	489d                	li	a7,7
+ ecall
+ 2ba:	00000073          	ecall
+ ret
+ 2be:	8082                	ret
+
+00000000000002c0 <open>:
+.global open
+open:
+ li a7, SYS_open
+ 2c0:	48bd                	li	a7,15
+ ecall
+ 2c2:	00000073          	ecall
+ ret
+ 2c6:	8082                	ret
+
+00000000000002c8 <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ 2c8:	48c5                	li	a7,17
+ ecall
+ 2ca:	00000073          	ecall
+ ret
+ 2ce:	8082                	ret
+
+00000000000002d0 <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ 2d0:	48c9                	li	a7,18
+ ecall
+ 2d2:	00000073          	ecall
+ ret
+ 2d6:	8082                	ret
+
+00000000000002d8 <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ 2d8:	48a1                	li	a7,8
+ ecall
+ 2da:	00000073          	ecall
+ ret
+ 2de:	8082                	ret
+
+00000000000002e0 <link>:
+.global link
+link:
+ li a7, SYS_link
+ 2e0:	48cd                	li	a7,19
+ ecall
+ 2e2:	00000073          	ecall
+ ret
+ 2e6:	8082                	ret
+
+00000000000002e8 <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ 2e8:	48d1                	li	a7,20
+ ecall
+ 2ea:	00000073          	ecall
+ ret
+ 2ee:	8082                	ret
+
+00000000000002f0 <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ 2f0:	48a5                	li	a7,9
+ ecall
+ 2f2:	00000073          	ecall
+ ret
+ 2f6:	8082                	ret
+
+00000000000002f8 <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+ 2f8:	48a9                	li	a7,10
+ ecall
+ 2fa:	00000073          	ecall
+ ret
+ 2fe:	8082                	ret
+
+0000000000000300 <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ 300:	48ad                	li	a7,11
+ ecall
+ 302:	00000073          	ecall
+ ret
+ 306:	8082                	ret
+
+0000000000000308 <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ 308:	48b1                	li	a7,12
+ ecall
+ 30a:	00000073          	ecall
+ ret
+ 30e:	8082                	ret
+
+0000000000000310 <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ 310:	48b5                	li	a7,13
+ ecall
+ 312:	00000073          	ecall
+ ret
+ 316:	8082                	ret
+
+0000000000000318 <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ 318:	48b9                	li	a7,14
+ ecall
+ 31a:	00000073          	ecall
+ ret
+ 31e:	8082                	ret
+
+0000000000000320 <setp>:
+.global setp
+setp:
+ li a7, SYS_setp
+ 320:	48d9                	li	a7,22
+ ecall
+ 322:	00000073          	ecall
+ ret
+ 326:	8082                	ret
+
+0000000000000328 <semget>:
+.global semget
+semget:
+ li a7, SYS_semget
+ 328:	48dd                	li	a7,23
+ ecall
+ 32a:	00000073          	ecall
+ ret
+ 32e:	8082                	ret
+
+0000000000000330 <semdown>:
+.global semdown
+semdown:
+ li a7, SYS_semdown
+ 330:	48e1                	li	a7,24
+ ecall
+ 332:	00000073          	ecall
+ ret
+ 336:	8082                	ret
+
+0000000000000338 <semup>:
+.global semup
+semup:
+ li a7, SYS_semup
+ 338:	48e5                	li	a7,25
+ ecall
+ 33a:	00000073          	ecall
+ ret
+ 33e:	8082                	ret
+
+0000000000000340 <semclose>:
+.global semclose
+semclose:
+ li a7, SYS_semclose
+ 340:	48e9                	li	a7,26
+ ecall
+ 342:	00000073          	ecall
+ ret
+ 346:	8082                	ret
+
+0000000000000348 <timeout>:
+.global timeout
+timeout:
+ li a7, SYS_timeout
+ 348:	48ed                	li	a7,27
+ ecall
+ 34a:	00000073          	ecall
+ ret
+ 34e:	8082                	ret
+
+0000000000000350 <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+ 350:	1101                	addi	sp,sp,-32
+ 352:	ec06                	sd	ra,24(sp)
+ 354:	e822                	sd	s0,16(sp)
+ 356:	1000                	addi	s0,sp,32
+ 358:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+ 35c:	4605                	li	a2,1
+ 35e:	fef40593          	addi	a1,s0,-17
+ 362:	00000097          	auipc	ra,0x0
+ 366:	f3e080e7          	jalr	-194(ra) # 2a0 <write>
+}
+ 36a:	60e2                	ld	ra,24(sp)
+ 36c:	6442                	ld	s0,16(sp)
+ 36e:	6105                	addi	sp,sp,32
+ 370:	8082                	ret
+
+0000000000000372 <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 372:	7139                	addi	sp,sp,-64
+ 374:	fc06                	sd	ra,56(sp)
+ 376:	f822                	sd	s0,48(sp)
+ 378:	f426                	sd	s1,40(sp)
+ 37a:	f04a                	sd	s2,32(sp)
+ 37c:	ec4e                	sd	s3,24(sp)
+ 37e:	0080                	addi	s0,sp,64
+ 380:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 382:	c299                	beqz	a3,388 <printint+0x16>
+ 384:	0805c963          	bltz	a1,416 <printint+0xa4>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 388:	2581                	sext.w	a1,a1
+  neg = 0;
+ 38a:	4881                	li	a7,0
+ 38c:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+ 390:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+ 392:	2601                	sext.w	a2,a2
+ 394:	00000517          	auipc	a0,0x0
+ 398:	49450513          	addi	a0,a0,1172 # 828 <digits>
+ 39c:	883a                	mv	a6,a4
+ 39e:	2705                	addiw	a4,a4,1
+ 3a0:	02c5f7bb          	remuw	a5,a1,a2
+ 3a4:	1782                	slli	a5,a5,0x20
+ 3a6:	9381                	srli	a5,a5,0x20
+ 3a8:	97aa                	add	a5,a5,a0
+ 3aa:	0007c783          	lbu	a5,0(a5)
+ 3ae:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+ 3b2:	0005879b          	sext.w	a5,a1
+ 3b6:	02c5d5bb          	divuw	a1,a1,a2
+ 3ba:	0685                	addi	a3,a3,1
+ 3bc:	fec7f0e3          	bgeu	a5,a2,39c <printint+0x2a>
+  if(neg)
+ 3c0:	00088c63          	beqz	a7,3d8 <printint+0x66>
+    buf[i++] = '-';
+ 3c4:	fd070793          	addi	a5,a4,-48
+ 3c8:	00878733          	add	a4,a5,s0
+ 3cc:	02d00793          	li	a5,45
+ 3d0:	fef70823          	sb	a5,-16(a4)
+ 3d4:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+ 3d8:	02e05863          	blez	a4,408 <printint+0x96>
+ 3dc:	fc040793          	addi	a5,s0,-64
+ 3e0:	00e78933          	add	s2,a5,a4
+ 3e4:	fff78993          	addi	s3,a5,-1
+ 3e8:	99ba                	add	s3,s3,a4
+ 3ea:	377d                	addiw	a4,a4,-1
+ 3ec:	1702                	slli	a4,a4,0x20
+ 3ee:	9301                	srli	a4,a4,0x20
+ 3f0:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+ 3f4:	fff94583          	lbu	a1,-1(s2)
+ 3f8:	8526                	mv	a0,s1
+ 3fa:	00000097          	auipc	ra,0x0
+ 3fe:	f56080e7          	jalr	-170(ra) # 350 <putc>
+  while(--i >= 0)
+ 402:	197d                	addi	s2,s2,-1
+ 404:	ff3918e3          	bne	s2,s3,3f4 <printint+0x82>
+}
+ 408:	70e2                	ld	ra,56(sp)
+ 40a:	7442                	ld	s0,48(sp)
+ 40c:	74a2                	ld	s1,40(sp)
+ 40e:	7902                	ld	s2,32(sp)
+ 410:	69e2                	ld	s3,24(sp)
+ 412:	6121                	addi	sp,sp,64
+ 414:	8082                	ret
+    x = -xx;
+ 416:	40b005bb          	negw	a1,a1
+    neg = 1;
+ 41a:	4885                	li	a7,1
+    x = -xx;
+ 41c:	bf85                	j	38c <printint+0x1a>
+
+000000000000041e <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+ 41e:	7119                	addi	sp,sp,-128
+ 420:	fc86                	sd	ra,120(sp)
+ 422:	f8a2                	sd	s0,112(sp)
+ 424:	f4a6                	sd	s1,104(sp)
+ 426:	f0ca                	sd	s2,96(sp)
+ 428:	ecce                	sd	s3,88(sp)
+ 42a:	e8d2                	sd	s4,80(sp)
+ 42c:	e4d6                	sd	s5,72(sp)
+ 42e:	e0da                	sd	s6,64(sp)
+ 430:	fc5e                	sd	s7,56(sp)
+ 432:	f862                	sd	s8,48(sp)
+ 434:	f466                	sd	s9,40(sp)
+ 436:	f06a                	sd	s10,32(sp)
+ 438:	ec6e                	sd	s11,24(sp)
+ 43a:	0100                	addi	s0,sp,128
+  char *s;
+  int c, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+ 43c:	0005c903          	lbu	s2,0(a1)
+ 440:	18090f63          	beqz	s2,5de <vprintf+0x1c0>
+ 444:	8aaa                	mv	s5,a0
+ 446:	8b32                	mv	s6,a2
+ 448:	00158493          	addi	s1,a1,1
+  state = 0;
+ 44c:	4981                	li	s3,0
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 44e:	02500a13          	li	s4,37
+ 452:	4c55                	li	s8,21
+ 454:	00000c97          	auipc	s9,0x0
+ 458:	37cc8c93          	addi	s9,s9,892 # 7d0 <malloc+0xee>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c == 's'){
+        s = va_arg(ap, char*);
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 45c:	02800d93          	li	s11,40
+  putc(fd, 'x');
+ 460:	4d41                	li	s10,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 462:	00000b97          	auipc	s7,0x0
+ 466:	3c6b8b93          	addi	s7,s7,966 # 828 <digits>
+ 46a:	a839                	j	488 <vprintf+0x6a>
+        putc(fd, c);
+ 46c:	85ca                	mv	a1,s2
+ 46e:	8556                	mv	a0,s5
+ 470:	00000097          	auipc	ra,0x0
+ 474:	ee0080e7          	jalr	-288(ra) # 350 <putc>
+ 478:	a019                	j	47e <vprintf+0x60>
+    } else if(state == '%'){
+ 47a:	01498d63          	beq	s3,s4,494 <vprintf+0x76>
+  for(i = 0; fmt[i]; i++){
+ 47e:	0485                	addi	s1,s1,1
+ 480:	fff4c903          	lbu	s2,-1(s1)
+ 484:	14090d63          	beqz	s2,5de <vprintf+0x1c0>
+    if(state == 0){
+ 488:	fe0999e3          	bnez	s3,47a <vprintf+0x5c>
+      if(c == '%'){
+ 48c:	ff4910e3          	bne	s2,s4,46c <vprintf+0x4e>
+        state = '%';
+ 490:	89d2                	mv	s3,s4
+ 492:	b7f5                	j	47e <vprintf+0x60>
+      if(c == 'd'){
+ 494:	11490c63          	beq	s2,s4,5ac <vprintf+0x18e>
+ 498:	f9d9079b          	addiw	a5,s2,-99
+ 49c:	0ff7f793          	zext.b	a5,a5
+ 4a0:	10fc6e63          	bltu	s8,a5,5bc <vprintf+0x19e>
+ 4a4:	f9d9079b          	addiw	a5,s2,-99
+ 4a8:	0ff7f713          	zext.b	a4,a5
+ 4ac:	10ec6863          	bltu	s8,a4,5bc <vprintf+0x19e>
+ 4b0:	00271793          	slli	a5,a4,0x2
+ 4b4:	97e6                	add	a5,a5,s9
+ 4b6:	439c                	lw	a5,0(a5)
+ 4b8:	97e6                	add	a5,a5,s9
+ 4ba:	8782                	jr	a5
+        printint(fd, va_arg(ap, int), 10, 1);
+ 4bc:	008b0913          	addi	s2,s6,8
+ 4c0:	4685                	li	a3,1
+ 4c2:	4629                	li	a2,10
+ 4c4:	000b2583          	lw	a1,0(s6)
+ 4c8:	8556                	mv	a0,s5
+ 4ca:	00000097          	auipc	ra,0x0
+ 4ce:	ea8080e7          	jalr	-344(ra) # 372 <printint>
+ 4d2:	8b4a                	mv	s6,s2
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 4d4:	4981                	li	s3,0
+ 4d6:	b765                	j	47e <vprintf+0x60>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 4d8:	008b0913          	addi	s2,s6,8
+ 4dc:	4681                	li	a3,0
+ 4de:	4629                	li	a2,10
+ 4e0:	000b2583          	lw	a1,0(s6)
+ 4e4:	8556                	mv	a0,s5
+ 4e6:	00000097          	auipc	ra,0x0
+ 4ea:	e8c080e7          	jalr	-372(ra) # 372 <printint>
+ 4ee:	8b4a                	mv	s6,s2
+      state = 0;
+ 4f0:	4981                	li	s3,0
+ 4f2:	b771                	j	47e <vprintf+0x60>
+        printint(fd, va_arg(ap, int), 16, 0);
+ 4f4:	008b0913          	addi	s2,s6,8
+ 4f8:	4681                	li	a3,0
+ 4fa:	866a                	mv	a2,s10
+ 4fc:	000b2583          	lw	a1,0(s6)
+ 500:	8556                	mv	a0,s5
+ 502:	00000097          	auipc	ra,0x0
+ 506:	e70080e7          	jalr	-400(ra) # 372 <printint>
+ 50a:	8b4a                	mv	s6,s2
+      state = 0;
+ 50c:	4981                	li	s3,0
+ 50e:	bf85                	j	47e <vprintf+0x60>
+        printptr(fd, va_arg(ap, uint64));
+ 510:	008b0793          	addi	a5,s6,8
+ 514:	f8f43423          	sd	a5,-120(s0)
+ 518:	000b3983          	ld	s3,0(s6)
+  putc(fd, '0');
+ 51c:	03000593          	li	a1,48
+ 520:	8556                	mv	a0,s5
+ 522:	00000097          	auipc	ra,0x0
+ 526:	e2e080e7          	jalr	-466(ra) # 350 <putc>
+  putc(fd, 'x');
+ 52a:	07800593          	li	a1,120
+ 52e:	8556                	mv	a0,s5
+ 530:	00000097          	auipc	ra,0x0
+ 534:	e20080e7          	jalr	-480(ra) # 350 <putc>
+ 538:	896a                	mv	s2,s10
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 53a:	03c9d793          	srli	a5,s3,0x3c
+ 53e:	97de                	add	a5,a5,s7
+ 540:	0007c583          	lbu	a1,0(a5)
+ 544:	8556                	mv	a0,s5
+ 546:	00000097          	auipc	ra,0x0
+ 54a:	e0a080e7          	jalr	-502(ra) # 350 <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+ 54e:	0992                	slli	s3,s3,0x4
+ 550:	397d                	addiw	s2,s2,-1
+ 552:	fe0914e3          	bnez	s2,53a <vprintf+0x11c>
+        printptr(fd, va_arg(ap, uint64));
+ 556:	f8843b03          	ld	s6,-120(s0)
+      state = 0;
+ 55a:	4981                	li	s3,0
+ 55c:	b70d                	j	47e <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 55e:	008b0913          	addi	s2,s6,8
+ 562:	000b3983          	ld	s3,0(s6)
+        if(s == 0)
+ 566:	02098163          	beqz	s3,588 <vprintf+0x16a>
+        while(*s != 0){
+ 56a:	0009c583          	lbu	a1,0(s3)
+ 56e:	c5ad                	beqz	a1,5d8 <vprintf+0x1ba>
+          putc(fd, *s);
+ 570:	8556                	mv	a0,s5
+ 572:	00000097          	auipc	ra,0x0
+ 576:	dde080e7          	jalr	-546(ra) # 350 <putc>
+          s++;
+ 57a:	0985                	addi	s3,s3,1
+        while(*s != 0){
+ 57c:	0009c583          	lbu	a1,0(s3)
+ 580:	f9e5                	bnez	a1,570 <vprintf+0x152>
+        s = va_arg(ap, char*);
+ 582:	8b4a                	mv	s6,s2
+      state = 0;
+ 584:	4981                	li	s3,0
+ 586:	bde5                	j	47e <vprintf+0x60>
+          s = "(null)";
+ 588:	00000997          	auipc	s3,0x0
+ 58c:	24098993          	addi	s3,s3,576 # 7c8 <malloc+0xe6>
+        while(*s != 0){
+ 590:	85ee                	mv	a1,s11
+ 592:	bff9                	j	570 <vprintf+0x152>
+        putc(fd, va_arg(ap, uint));
+ 594:	008b0913          	addi	s2,s6,8
+ 598:	000b4583          	lbu	a1,0(s6)
+ 59c:	8556                	mv	a0,s5
+ 59e:	00000097          	auipc	ra,0x0
+ 5a2:	db2080e7          	jalr	-590(ra) # 350 <putc>
+ 5a6:	8b4a                	mv	s6,s2
+      state = 0;
+ 5a8:	4981                	li	s3,0
+ 5aa:	bdd1                	j	47e <vprintf+0x60>
+        putc(fd, c);
+ 5ac:	85d2                	mv	a1,s4
+ 5ae:	8556                	mv	a0,s5
+ 5b0:	00000097          	auipc	ra,0x0
+ 5b4:	da0080e7          	jalr	-608(ra) # 350 <putc>
+      state = 0;
+ 5b8:	4981                	li	s3,0
+ 5ba:	b5d1                	j	47e <vprintf+0x60>
+        putc(fd, '%');
+ 5bc:	85d2                	mv	a1,s4
+ 5be:	8556                	mv	a0,s5
+ 5c0:	00000097          	auipc	ra,0x0
+ 5c4:	d90080e7          	jalr	-624(ra) # 350 <putc>
+        putc(fd, c);
+ 5c8:	85ca                	mv	a1,s2
+ 5ca:	8556                	mv	a0,s5
+ 5cc:	00000097          	auipc	ra,0x0
+ 5d0:	d84080e7          	jalr	-636(ra) # 350 <putc>
+      state = 0;
+ 5d4:	4981                	li	s3,0
+ 5d6:	b565                	j	47e <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 5d8:	8b4a                	mv	s6,s2
+      state = 0;
+ 5da:	4981                	li	s3,0
+ 5dc:	b54d                	j	47e <vprintf+0x60>
+    }
+  }
+}
+ 5de:	70e6                	ld	ra,120(sp)
+ 5e0:	7446                	ld	s0,112(sp)
+ 5e2:	74a6                	ld	s1,104(sp)
+ 5e4:	7906                	ld	s2,96(sp)
+ 5e6:	69e6                	ld	s3,88(sp)
+ 5e8:	6a46                	ld	s4,80(sp)
+ 5ea:	6aa6                	ld	s5,72(sp)
+ 5ec:	6b06                	ld	s6,64(sp)
+ 5ee:	7be2                	ld	s7,56(sp)
+ 5f0:	7c42                	ld	s8,48(sp)
+ 5f2:	7ca2                	ld	s9,40(sp)
+ 5f4:	7d02                	ld	s10,32(sp)
+ 5f6:	6de2                	ld	s11,24(sp)
+ 5f8:	6109                	addi	sp,sp,128
+ 5fa:	8082                	ret
+
+00000000000005fc <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+ 5fc:	715d                	addi	sp,sp,-80
+ 5fe:	ec06                	sd	ra,24(sp)
+ 600:	e822                	sd	s0,16(sp)
+ 602:	1000                	addi	s0,sp,32
+ 604:	e010                	sd	a2,0(s0)
+ 606:	e414                	sd	a3,8(s0)
+ 608:	e818                	sd	a4,16(s0)
+ 60a:	ec1c                	sd	a5,24(s0)
+ 60c:	03043023          	sd	a6,32(s0)
+ 610:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 614:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+ 618:	8622                	mv	a2,s0
+ 61a:	00000097          	auipc	ra,0x0
+ 61e:	e04080e7          	jalr	-508(ra) # 41e <vprintf>
+}
+ 622:	60e2                	ld	ra,24(sp)
+ 624:	6442                	ld	s0,16(sp)
+ 626:	6161                	addi	sp,sp,80
+ 628:	8082                	ret
+
+000000000000062a <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+ 62a:	711d                	addi	sp,sp,-96
+ 62c:	ec06                	sd	ra,24(sp)
+ 62e:	e822                	sd	s0,16(sp)
+ 630:	1000                	addi	s0,sp,32
+ 632:	e40c                	sd	a1,8(s0)
+ 634:	e810                	sd	a2,16(s0)
+ 636:	ec14                	sd	a3,24(s0)
+ 638:	f018                	sd	a4,32(s0)
+ 63a:	f41c                	sd	a5,40(s0)
+ 63c:	03043823          	sd	a6,48(s0)
+ 640:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 644:	00840613          	addi	a2,s0,8
+ 648:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+ 64c:	85aa                	mv	a1,a0
+ 64e:	4505                	li	a0,1
+ 650:	00000097          	auipc	ra,0x0
+ 654:	dce080e7          	jalr	-562(ra) # 41e <vprintf>
+}
+ 658:	60e2                	ld	ra,24(sp)
+ 65a:	6442                	ld	s0,16(sp)
+ 65c:	6125                	addi	sp,sp,96
+ 65e:	8082                	ret
+
+0000000000000660 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 660:	1141                	addi	sp,sp,-16
+ 662:	e422                	sd	s0,8(sp)
+ 664:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 666:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 66a:	00000797          	auipc	a5,0x0
+ 66e:	1d67b783          	ld	a5,470(a5) # 840 <freep>
+ 672:	a02d                	j	69c <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 674:	4618                	lw	a4,8(a2)
+ 676:	9f2d                	addw	a4,a4,a1
+ 678:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 67c:	6398                	ld	a4,0(a5)
+ 67e:	6310                	ld	a2,0(a4)
+ 680:	a83d                	j	6be <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 682:	ff852703          	lw	a4,-8(a0)
+ 686:	9f31                	addw	a4,a4,a2
+ 688:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+ 68a:	ff053683          	ld	a3,-16(a0)
+ 68e:	a091                	j	6d2 <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 690:	6398                	ld	a4,0(a5)
+ 692:	00e7e463          	bltu	a5,a4,69a <free+0x3a>
+ 696:	00e6ea63          	bltu	a3,a4,6aa <free+0x4a>
+{
+ 69a:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 69c:	fed7fae3          	bgeu	a5,a3,690 <free+0x30>
+ 6a0:	6398                	ld	a4,0(a5)
+ 6a2:	00e6e463          	bltu	a3,a4,6aa <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6a6:	fee7eae3          	bltu	a5,a4,69a <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+ 6aa:	ff852583          	lw	a1,-8(a0)
+ 6ae:	6390                	ld	a2,0(a5)
+ 6b0:	02059813          	slli	a6,a1,0x20
+ 6b4:	01c85713          	srli	a4,a6,0x1c
+ 6b8:	9736                	add	a4,a4,a3
+ 6ba:	fae60de3          	beq	a2,a4,674 <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6be:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+ 6c2:	4790                	lw	a2,8(a5)
+ 6c4:	02061593          	slli	a1,a2,0x20
+ 6c8:	01c5d713          	srli	a4,a1,0x1c
+ 6cc:	973e                	add	a4,a4,a5
+ 6ce:	fae68ae3          	beq	a3,a4,682 <free+0x22>
+    p->s.ptr = bp->s.ptr;
+ 6d2:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 6d4:	00000717          	auipc	a4,0x0
+ 6d8:	16f73623          	sd	a5,364(a4) # 840 <freep>
+}
+ 6dc:	6422                	ld	s0,8(sp)
+ 6de:	0141                	addi	sp,sp,16
+ 6e0:	8082                	ret
+
+00000000000006e2 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6e2:	7139                	addi	sp,sp,-64
+ 6e4:	fc06                	sd	ra,56(sp)
+ 6e6:	f822                	sd	s0,48(sp)
+ 6e8:	f426                	sd	s1,40(sp)
+ 6ea:	f04a                	sd	s2,32(sp)
+ 6ec:	ec4e                	sd	s3,24(sp)
+ 6ee:	e852                	sd	s4,16(sp)
+ 6f0:	e456                	sd	s5,8(sp)
+ 6f2:	e05a                	sd	s6,0(sp)
+ 6f4:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6f6:	02051493          	slli	s1,a0,0x20
+ 6fa:	9081                	srli	s1,s1,0x20
+ 6fc:	04bd                	addi	s1,s1,15
+ 6fe:	8091                	srli	s1,s1,0x4
+ 700:	0014899b          	addiw	s3,s1,1
+ 704:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+ 706:	00000517          	auipc	a0,0x0
+ 70a:	13a53503          	ld	a0,314(a0) # 840 <freep>
+ 70e:	c515                	beqz	a0,73a <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 710:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 712:	4798                	lw	a4,8(a5)
+ 714:	02977f63          	bgeu	a4,s1,752 <malloc+0x70>
+ 718:	8a4e                	mv	s4,s3
+ 71a:	0009871b          	sext.w	a4,s3
+ 71e:	6685                	lui	a3,0x1
+ 720:	00d77363          	bgeu	a4,a3,726 <malloc+0x44>
+ 724:	6a05                	lui	s4,0x1
+ 726:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+ 72a:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 72e:	00000917          	auipc	s2,0x0
+ 732:	11290913          	addi	s2,s2,274 # 840 <freep>
+  if(p == (char*)-1)
+ 736:	5afd                	li	s5,-1
+ 738:	a895                	j	7ac <malloc+0xca>
+    base.s.ptr = freep = prevp = &base;
+ 73a:	00000797          	auipc	a5,0x0
+ 73e:	10e78793          	addi	a5,a5,270 # 848 <base>
+ 742:	00000717          	auipc	a4,0x0
+ 746:	0ef73f23          	sd	a5,254(a4) # 840 <freep>
+ 74a:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+ 74c:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+ 750:	b7e1                	j	718 <malloc+0x36>
+      if(p->s.size == nunits)
+ 752:	02e48c63          	beq	s1,a4,78a <malloc+0xa8>
+        p->s.size -= nunits;
+ 756:	4137073b          	subw	a4,a4,s3
+ 75a:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+ 75c:	02071693          	slli	a3,a4,0x20
+ 760:	01c6d713          	srli	a4,a3,0x1c
+ 764:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+ 766:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+ 76a:	00000717          	auipc	a4,0x0
+ 76e:	0ca73b23          	sd	a0,214(a4) # 840 <freep>
+      return (void*)(p + 1);
+ 772:	01078513          	addi	a0,a5,16
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ 776:	70e2                	ld	ra,56(sp)
+ 778:	7442                	ld	s0,48(sp)
+ 77a:	74a2                	ld	s1,40(sp)
+ 77c:	7902                	ld	s2,32(sp)
+ 77e:	69e2                	ld	s3,24(sp)
+ 780:	6a42                	ld	s4,16(sp)
+ 782:	6aa2                	ld	s5,8(sp)
+ 784:	6b02                	ld	s6,0(sp)
+ 786:	6121                	addi	sp,sp,64
+ 788:	8082                	ret
+        prevp->s.ptr = p->s.ptr;
+ 78a:	6398                	ld	a4,0(a5)
+ 78c:	e118                	sd	a4,0(a0)
+ 78e:	bff1                	j	76a <malloc+0x88>
+  hp->s.size = nu;
+ 790:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+ 794:	0541                	addi	a0,a0,16
+ 796:	00000097          	auipc	ra,0x0
+ 79a:	eca080e7          	jalr	-310(ra) # 660 <free>
+  return freep;
+ 79e:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+ 7a2:	d971                	beqz	a0,776 <malloc+0x94>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7a4:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 7a6:	4798                	lw	a4,8(a5)
+ 7a8:	fa9775e3          	bgeu	a4,s1,752 <malloc+0x70>
+    if(p == freep)
+ 7ac:	00093703          	ld	a4,0(s2)
+ 7b0:	853e                	mv	a0,a5
+ 7b2:	fef719e3          	bne	a4,a5,7a4 <malloc+0xc2>
+  p = sbrk(nu * sizeof(Header));
+ 7b6:	8552                	mv	a0,s4
+ 7b8:	00000097          	auipc	ra,0x0
+ 7bc:	b50080e7          	jalr	-1200(ra) # 308 <sbrk>
+  if(p == (char*)-1)
+ 7c0:	fd5518e3          	bne	a0,s5,790 <malloc+0xae>
+        return 0;
+ 7c4:	4501                	li	a0,0
+ 7c6:	bf45                	j	776 <malloc+0x94>
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/bottomprior.c os-workshop/user/bottomprior.c
--- xv6-riscv/user/bottomprior.c	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/bottomprior.c	2022-04-28 18:25:44.000000000 -0300
@@ -0,0 +1,10 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main() {
+  for(;;){
+    setp(4);
+  };
+  exit(0);
+}
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/bottomprior.d os-workshop/user/bottomprior.d
--- xv6-riscv/user/bottomprior.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/bottomprior.d	2022-05-28 22:34:31.000000000 -0300
@@ -0,0 +1,2 @@
+user/bottomprior.o: user/bottomprior.c kernel/types.h kernel/stat.h \
+ user/user.h
Binary files xv6-riscv/user/bottomprior.o and os-workshop/user/bottomprior.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/bottomprior.sym os-workshop/user/bottomprior.sym
--- xv6-riscv/user/bottomprior.sym	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/bottomprior.sym	2022-05-28 22:34:31.000000000 -0300
@@ -0,0 +1,76 @@
+0000000000000000 .text
+00000000000007c8 .rodata
+0000000000000840 .sbss
+0000000000000848 .bss
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_aranges
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_line
+0000000000000000 .debug_frame
+0000000000000000 .debug_str
+0000000000000000 .debug_line_str
+0000000000000000 .debug_loclists
+0000000000000000 .debug_rnglists
+0000000000000000 bottomprior.c
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+0000000000000350 putc
+0000000000000372 printint
+0000000000000828 digits
+0000000000000000 umalloc.c
+0000000000000840 freep
+0000000000000848 base
+0000000000000014 strcpy
+000000000000062a printf
+0000000000001039 __global_pointer$
+00000000000001ce memmove
+00000000000002c8 mknod
+0000000000000330 semdown
+00000000000000cc gets
+0000000000000839 __SDATA_BEGIN__
+0000000000000328 semget
+0000000000000300 getpid
+0000000000000260 memcpy
+00000000000006e2 malloc
+0000000000000340 semclose
+0000000000000310 sleep
+0000000000000290 pipe
+00000000000002a0 write
+00000000000002d8 fstat
+00000000000005fc fprintf
+00000000000002b0 kill
+000000000000041e vprintf
+00000000000002f0 chdir
+00000000000002b8 exec
+0000000000000288 wait
+0000000000000298 read
+00000000000002d0 unlink
+0000000000000226 memcmp
+0000000000000278 fork
+0000000000000858 __BSS_END__
+0000000000000308 sbrk
+0000000000000318 uptime
+0000000000000839 __bss_start
+0000000000000086 memset
+0000000000000000 main
+0000000000000348 timeout
+0000000000000030 strcmp
+00000000000002f8 dup
+0000000000000839 __DATA_BEGIN__
+0000000000000140 stat
+0000000000000839 _edata
+0000000000000320 setp
+0000000000000858 _end
+00000000000002e0 link
+0000000000000280 exit
+0000000000000186 atoi
+000000000000005c strlen
+00000000000002c0 open
+0000000000000338 semup
+00000000000000a8 strchr
+00000000000002e8 mkdir
+00000000000002a8 close
+0000000000000660 free
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/cat.asm os-workshop/user/cat.asm
--- xv6-riscv/user/cat.asm	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/cat.asm	2022-05-28 22:34:32.000000000 -0300
@@ -0,0 +1,1470 @@
+
+user/_cat:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <cat>:
+
+char buf[512];
+
+void
+cat(int fd)
+{
+   0:	7179                	addi	sp,sp,-48
+   2:	f406                	sd	ra,40(sp)
+   4:	f022                	sd	s0,32(sp)
+   6:	ec26                	sd	s1,24(sp)
+   8:	e84a                	sd	s2,16(sp)
+   a:	e44e                	sd	s3,8(sp)
+   c:	1800                	addi	s0,sp,48
+   e:	89aa                	mv	s3,a0
+  int n;
+
+  while((n = read(fd, buf, sizeof(buf))) > 0) {
+  10:	00001917          	auipc	s2,0x1
+  14:	99090913          	addi	s2,s2,-1648 # 9a0 <buf>
+  18:	20000613          	li	a2,512
+  1c:	85ca                	mv	a1,s2
+  1e:	854e                	mv	a0,s3
+  20:	00000097          	auipc	ra,0x0
+  24:	382080e7          	jalr	898(ra) # 3a2 <read>
+  28:	84aa                	mv	s1,a0
+  2a:	02a05963          	blez	a0,5c <cat+0x5c>
+    if (write(1, buf, n) != n) {
+  2e:	8626                	mv	a2,s1
+  30:	85ca                	mv	a1,s2
+  32:	4505                	li	a0,1
+  34:	00000097          	auipc	ra,0x0
+  38:	376080e7          	jalr	886(ra) # 3aa <write>
+  3c:	fc950ee3          	beq	a0,s1,18 <cat+0x18>
+      fprintf(2, "cat: write error\n");
+  40:	00001597          	auipc	a1,0x1
+  44:	89858593          	addi	a1,a1,-1896 # 8d8 <malloc+0xec>
+  48:	4509                	li	a0,2
+  4a:	00000097          	auipc	ra,0x0
+  4e:	6bc080e7          	jalr	1724(ra) # 706 <fprintf>
+      exit(1);
+  52:	4505                	li	a0,1
+  54:	00000097          	auipc	ra,0x0
+  58:	336080e7          	jalr	822(ra) # 38a <exit>
+    }
+  }
+  if(n < 0){
+  5c:	00054963          	bltz	a0,6e <cat+0x6e>
+    fprintf(2, "cat: read error\n");
+    exit(1);
+  }
+}
+  60:	70a2                	ld	ra,40(sp)
+  62:	7402                	ld	s0,32(sp)
+  64:	64e2                	ld	s1,24(sp)
+  66:	6942                	ld	s2,16(sp)
+  68:	69a2                	ld	s3,8(sp)
+  6a:	6145                	addi	sp,sp,48
+  6c:	8082                	ret
+    fprintf(2, "cat: read error\n");
+  6e:	00001597          	auipc	a1,0x1
+  72:	88258593          	addi	a1,a1,-1918 # 8f0 <malloc+0x104>
+  76:	4509                	li	a0,2
+  78:	00000097          	auipc	ra,0x0
+  7c:	68e080e7          	jalr	1678(ra) # 706 <fprintf>
+    exit(1);
+  80:	4505                	li	a0,1
+  82:	00000097          	auipc	ra,0x0
+  86:	308080e7          	jalr	776(ra) # 38a <exit>
+
+000000000000008a <main>:
+
+int
+main(int argc, char *argv[])
+{
+  8a:	7179                	addi	sp,sp,-48
+  8c:	f406                	sd	ra,40(sp)
+  8e:	f022                	sd	s0,32(sp)
+  90:	ec26                	sd	s1,24(sp)
+  92:	e84a                	sd	s2,16(sp)
+  94:	e44e                	sd	s3,8(sp)
+  96:	e052                	sd	s4,0(sp)
+  98:	1800                	addi	s0,sp,48
+  int fd, i;
+
+  if(argc <= 1){
+  9a:	4785                	li	a5,1
+  9c:	04a7d763          	bge	a5,a0,ea <main+0x60>
+  a0:	00858913          	addi	s2,a1,8
+  a4:	ffe5099b          	addiw	s3,a0,-2
+  a8:	02099793          	slli	a5,s3,0x20
+  ac:	01d7d993          	srli	s3,a5,0x1d
+  b0:	05c1                	addi	a1,a1,16
+  b2:	99ae                	add	s3,s3,a1
+    cat(0);
+    exit(0);
+  }
+
+  for(i = 1; i < argc; i++){
+    if((fd = open(argv[i], 0)) < 0){
+  b4:	4581                	li	a1,0
+  b6:	00093503          	ld	a0,0(s2)
+  ba:	00000097          	auipc	ra,0x0
+  be:	310080e7          	jalr	784(ra) # 3ca <open>
+  c2:	84aa                	mv	s1,a0
+  c4:	02054d63          	bltz	a0,fe <main+0x74>
+      fprintf(2, "cat: cannot open %s\n", argv[i]);
+      exit(1);
+    }
+    cat(fd);
+  c8:	00000097          	auipc	ra,0x0
+  cc:	f38080e7          	jalr	-200(ra) # 0 <cat>
+    close(fd);
+  d0:	8526                	mv	a0,s1
+  d2:	00000097          	auipc	ra,0x0
+  d6:	2e0080e7          	jalr	736(ra) # 3b2 <close>
+  for(i = 1; i < argc; i++){
+  da:	0921                	addi	s2,s2,8
+  dc:	fd391ce3          	bne	s2,s3,b4 <main+0x2a>
+  }
+  exit(0);
+  e0:	4501                	li	a0,0
+  e2:	00000097          	auipc	ra,0x0
+  e6:	2a8080e7          	jalr	680(ra) # 38a <exit>
+    cat(0);
+  ea:	4501                	li	a0,0
+  ec:	00000097          	auipc	ra,0x0
+  f0:	f14080e7          	jalr	-236(ra) # 0 <cat>
+    exit(0);
+  f4:	4501                	li	a0,0
+  f6:	00000097          	auipc	ra,0x0
+  fa:	294080e7          	jalr	660(ra) # 38a <exit>
+      fprintf(2, "cat: cannot open %s\n", argv[i]);
+  fe:	00093603          	ld	a2,0(s2)
+ 102:	00001597          	auipc	a1,0x1
+ 106:	80658593          	addi	a1,a1,-2042 # 908 <malloc+0x11c>
+ 10a:	4509                	li	a0,2
+ 10c:	00000097          	auipc	ra,0x0
+ 110:	5fa080e7          	jalr	1530(ra) # 706 <fprintf>
+      exit(1);
+ 114:	4505                	li	a0,1
+ 116:	00000097          	auipc	ra,0x0
+ 11a:	274080e7          	jalr	628(ra) # 38a <exit>
+
+000000000000011e <strcpy>:
+#include "kernel/fcntl.h"
+#include "user/user.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 11e:	1141                	addi	sp,sp,-16
+ 120:	e422                	sd	s0,8(sp)
+ 122:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 124:	87aa                	mv	a5,a0
+ 126:	0585                	addi	a1,a1,1
+ 128:	0785                	addi	a5,a5,1
+ 12a:	fff5c703          	lbu	a4,-1(a1)
+ 12e:	fee78fa3          	sb	a4,-1(a5)
+ 132:	fb75                	bnez	a4,126 <strcpy+0x8>
+    ;
+  return os;
+}
+ 134:	6422                	ld	s0,8(sp)
+ 136:	0141                	addi	sp,sp,16
+ 138:	8082                	ret
+
+000000000000013a <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 13a:	1141                	addi	sp,sp,-16
+ 13c:	e422                	sd	s0,8(sp)
+ 13e:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+ 140:	00054783          	lbu	a5,0(a0)
+ 144:	cb91                	beqz	a5,158 <strcmp+0x1e>
+ 146:	0005c703          	lbu	a4,0(a1)
+ 14a:	00f71763          	bne	a4,a5,158 <strcmp+0x1e>
+    p++, q++;
+ 14e:	0505                	addi	a0,a0,1
+ 150:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+ 152:	00054783          	lbu	a5,0(a0)
+ 156:	fbe5                	bnez	a5,146 <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+ 158:	0005c503          	lbu	a0,0(a1)
+}
+ 15c:	40a7853b          	subw	a0,a5,a0
+ 160:	6422                	ld	s0,8(sp)
+ 162:	0141                	addi	sp,sp,16
+ 164:	8082                	ret
+
+0000000000000166 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 166:	1141                	addi	sp,sp,-16
+ 168:	e422                	sd	s0,8(sp)
+ 16a:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 16c:	00054783          	lbu	a5,0(a0)
+ 170:	cf91                	beqz	a5,18c <strlen+0x26>
+ 172:	0505                	addi	a0,a0,1
+ 174:	87aa                	mv	a5,a0
+ 176:	4685                	li	a3,1
+ 178:	9e89                	subw	a3,a3,a0
+ 17a:	00f6853b          	addw	a0,a3,a5
+ 17e:	0785                	addi	a5,a5,1
+ 180:	fff7c703          	lbu	a4,-1(a5)
+ 184:	fb7d                	bnez	a4,17a <strlen+0x14>
+    ;
+  return n;
+}
+ 186:	6422                	ld	s0,8(sp)
+ 188:	0141                	addi	sp,sp,16
+ 18a:	8082                	ret
+  for(n = 0; s[n]; n++)
+ 18c:	4501                	li	a0,0
+ 18e:	bfe5                	j	186 <strlen+0x20>
+
+0000000000000190 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 190:	1141                	addi	sp,sp,-16
+ 192:	e422                	sd	s0,8(sp)
+ 194:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+ 196:	ca19                	beqz	a2,1ac <memset+0x1c>
+ 198:	87aa                	mv	a5,a0
+ 19a:	1602                	slli	a2,a2,0x20
+ 19c:	9201                	srli	a2,a2,0x20
+ 19e:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+ 1a2:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+ 1a6:	0785                	addi	a5,a5,1
+ 1a8:	fee79de3          	bne	a5,a4,1a2 <memset+0x12>
+  }
+  return dst;
+}
+ 1ac:	6422                	ld	s0,8(sp)
+ 1ae:	0141                	addi	sp,sp,16
+ 1b0:	8082                	ret
+
+00000000000001b2 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 1b2:	1141                	addi	sp,sp,-16
+ 1b4:	e422                	sd	s0,8(sp)
+ 1b6:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+ 1b8:	00054783          	lbu	a5,0(a0)
+ 1bc:	cb99                	beqz	a5,1d2 <strchr+0x20>
+    if(*s == c)
+ 1be:	00f58763          	beq	a1,a5,1cc <strchr+0x1a>
+  for(; *s; s++)
+ 1c2:	0505                	addi	a0,a0,1
+ 1c4:	00054783          	lbu	a5,0(a0)
+ 1c8:	fbfd                	bnez	a5,1be <strchr+0xc>
+      return (char*)s;
+  return 0;
+ 1ca:	4501                	li	a0,0
+}
+ 1cc:	6422                	ld	s0,8(sp)
+ 1ce:	0141                	addi	sp,sp,16
+ 1d0:	8082                	ret
+  return 0;
+ 1d2:	4501                	li	a0,0
+ 1d4:	bfe5                	j	1cc <strchr+0x1a>
+
+00000000000001d6 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 1d6:	711d                	addi	sp,sp,-96
+ 1d8:	ec86                	sd	ra,88(sp)
+ 1da:	e8a2                	sd	s0,80(sp)
+ 1dc:	e4a6                	sd	s1,72(sp)
+ 1de:	e0ca                	sd	s2,64(sp)
+ 1e0:	fc4e                	sd	s3,56(sp)
+ 1e2:	f852                	sd	s4,48(sp)
+ 1e4:	f456                	sd	s5,40(sp)
+ 1e6:	f05a                	sd	s6,32(sp)
+ 1e8:	ec5e                	sd	s7,24(sp)
+ 1ea:	1080                	addi	s0,sp,96
+ 1ec:	8baa                	mv	s7,a0
+ 1ee:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1f0:	892a                	mv	s2,a0
+ 1f2:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+ 1f4:	4aa9                	li	s5,10
+ 1f6:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+ 1f8:	89a6                	mv	s3,s1
+ 1fa:	2485                	addiw	s1,s1,1
+ 1fc:	0344d863          	bge	s1,s4,22c <gets+0x56>
+    cc = read(0, &c, 1);
+ 200:	4605                	li	a2,1
+ 202:	faf40593          	addi	a1,s0,-81
+ 206:	4501                	li	a0,0
+ 208:	00000097          	auipc	ra,0x0
+ 20c:	19a080e7          	jalr	410(ra) # 3a2 <read>
+    if(cc < 1)
+ 210:	00a05e63          	blez	a0,22c <gets+0x56>
+    buf[i++] = c;
+ 214:	faf44783          	lbu	a5,-81(s0)
+ 218:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+ 21c:	01578763          	beq	a5,s5,22a <gets+0x54>
+ 220:	0905                	addi	s2,s2,1
+ 222:	fd679be3          	bne	a5,s6,1f8 <gets+0x22>
+  for(i=0; i+1 < max; ){
+ 226:	89a6                	mv	s3,s1
+ 228:	a011                	j	22c <gets+0x56>
+ 22a:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+ 22c:	99de                	add	s3,s3,s7
+ 22e:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+ 232:	855e                	mv	a0,s7
+ 234:	60e6                	ld	ra,88(sp)
+ 236:	6446                	ld	s0,80(sp)
+ 238:	64a6                	ld	s1,72(sp)
+ 23a:	6906                	ld	s2,64(sp)
+ 23c:	79e2                	ld	s3,56(sp)
+ 23e:	7a42                	ld	s4,48(sp)
+ 240:	7aa2                	ld	s5,40(sp)
+ 242:	7b02                	ld	s6,32(sp)
+ 244:	6be2                	ld	s7,24(sp)
+ 246:	6125                	addi	sp,sp,96
+ 248:	8082                	ret
+
+000000000000024a <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 24a:	1101                	addi	sp,sp,-32
+ 24c:	ec06                	sd	ra,24(sp)
+ 24e:	e822                	sd	s0,16(sp)
+ 250:	e426                	sd	s1,8(sp)
+ 252:	e04a                	sd	s2,0(sp)
+ 254:	1000                	addi	s0,sp,32
+ 256:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 258:	4581                	li	a1,0
+ 25a:	00000097          	auipc	ra,0x0
+ 25e:	170080e7          	jalr	368(ra) # 3ca <open>
+  if(fd < 0)
+ 262:	02054563          	bltz	a0,28c <stat+0x42>
+ 266:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+ 268:	85ca                	mv	a1,s2
+ 26a:	00000097          	auipc	ra,0x0
+ 26e:	178080e7          	jalr	376(ra) # 3e2 <fstat>
+ 272:	892a                	mv	s2,a0
+  close(fd);
+ 274:	8526                	mv	a0,s1
+ 276:	00000097          	auipc	ra,0x0
+ 27a:	13c080e7          	jalr	316(ra) # 3b2 <close>
+  return r;
+}
+ 27e:	854a                	mv	a0,s2
+ 280:	60e2                	ld	ra,24(sp)
+ 282:	6442                	ld	s0,16(sp)
+ 284:	64a2                	ld	s1,8(sp)
+ 286:	6902                	ld	s2,0(sp)
+ 288:	6105                	addi	sp,sp,32
+ 28a:	8082                	ret
+    return -1;
+ 28c:	597d                	li	s2,-1
+ 28e:	bfc5                	j	27e <stat+0x34>
+
+0000000000000290 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 290:	1141                	addi	sp,sp,-16
+ 292:	e422                	sd	s0,8(sp)
+ 294:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 296:	00054683          	lbu	a3,0(a0)
+ 29a:	fd06879b          	addiw	a5,a3,-48
+ 29e:	0ff7f793          	zext.b	a5,a5
+ 2a2:	4625                	li	a2,9
+ 2a4:	02f66863          	bltu	a2,a5,2d4 <atoi+0x44>
+ 2a8:	872a                	mv	a4,a0
+  n = 0;
+ 2aa:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+ 2ac:	0705                	addi	a4,a4,1
+ 2ae:	0025179b          	slliw	a5,a0,0x2
+ 2b2:	9fa9                	addw	a5,a5,a0
+ 2b4:	0017979b          	slliw	a5,a5,0x1
+ 2b8:	9fb5                	addw	a5,a5,a3
+ 2ba:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+ 2be:	00074683          	lbu	a3,0(a4)
+ 2c2:	fd06879b          	addiw	a5,a3,-48
+ 2c6:	0ff7f793          	zext.b	a5,a5
+ 2ca:	fef671e3          	bgeu	a2,a5,2ac <atoi+0x1c>
+  return n;
+}
+ 2ce:	6422                	ld	s0,8(sp)
+ 2d0:	0141                	addi	sp,sp,16
+ 2d2:	8082                	ret
+  n = 0;
+ 2d4:	4501                	li	a0,0
+ 2d6:	bfe5                	j	2ce <atoi+0x3e>
+
+00000000000002d8 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2d8:	1141                	addi	sp,sp,-16
+ 2da:	e422                	sd	s0,8(sp)
+ 2dc:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+ 2de:	02b57463          	bgeu	a0,a1,306 <memmove+0x2e>
+    while(n-- > 0)
+ 2e2:	00c05f63          	blez	a2,300 <memmove+0x28>
+ 2e6:	1602                	slli	a2,a2,0x20
+ 2e8:	9201                	srli	a2,a2,0x20
+ 2ea:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+ 2ee:	872a                	mv	a4,a0
+      *dst++ = *src++;
+ 2f0:	0585                	addi	a1,a1,1
+ 2f2:	0705                	addi	a4,a4,1
+ 2f4:	fff5c683          	lbu	a3,-1(a1)
+ 2f8:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+ 2fc:	fee79ae3          	bne	a5,a4,2f0 <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+ 300:	6422                	ld	s0,8(sp)
+ 302:	0141                	addi	sp,sp,16
+ 304:	8082                	ret
+    dst += n;
+ 306:	00c50733          	add	a4,a0,a2
+    src += n;
+ 30a:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+ 30c:	fec05ae3          	blez	a2,300 <memmove+0x28>
+ 310:	fff6079b          	addiw	a5,a2,-1
+ 314:	1782                	slli	a5,a5,0x20
+ 316:	9381                	srli	a5,a5,0x20
+ 318:	fff7c793          	not	a5,a5
+ 31c:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+ 31e:	15fd                	addi	a1,a1,-1
+ 320:	177d                	addi	a4,a4,-1
+ 322:	0005c683          	lbu	a3,0(a1)
+ 326:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+ 32a:	fee79ae3          	bne	a5,a4,31e <memmove+0x46>
+ 32e:	bfc9                	j	300 <memmove+0x28>
+
+0000000000000330 <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+ 330:	1141                	addi	sp,sp,-16
+ 332:	e422                	sd	s0,8(sp)
+ 334:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+ 336:	ca05                	beqz	a2,366 <memcmp+0x36>
+ 338:	fff6069b          	addiw	a3,a2,-1
+ 33c:	1682                	slli	a3,a3,0x20
+ 33e:	9281                	srli	a3,a3,0x20
+ 340:	0685                	addi	a3,a3,1
+ 342:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+ 344:	00054783          	lbu	a5,0(a0)
+ 348:	0005c703          	lbu	a4,0(a1)
+ 34c:	00e79863          	bne	a5,a4,35c <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+ 350:	0505                	addi	a0,a0,1
+    p2++;
+ 352:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+ 354:	fed518e3          	bne	a0,a3,344 <memcmp+0x14>
+  }
+  return 0;
+ 358:	4501                	li	a0,0
+ 35a:	a019                	j	360 <memcmp+0x30>
+      return *p1 - *p2;
+ 35c:	40e7853b          	subw	a0,a5,a4
+}
+ 360:	6422                	ld	s0,8(sp)
+ 362:	0141                	addi	sp,sp,16
+ 364:	8082                	ret
+  return 0;
+ 366:	4501                	li	a0,0
+ 368:	bfe5                	j	360 <memcmp+0x30>
+
+000000000000036a <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+ 36a:	1141                	addi	sp,sp,-16
+ 36c:	e406                	sd	ra,8(sp)
+ 36e:	e022                	sd	s0,0(sp)
+ 370:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+ 372:	00000097          	auipc	ra,0x0
+ 376:	f66080e7          	jalr	-154(ra) # 2d8 <memmove>
+}
+ 37a:	60a2                	ld	ra,8(sp)
+ 37c:	6402                	ld	s0,0(sp)
+ 37e:	0141                	addi	sp,sp,16
+ 380:	8082                	ret
+
+0000000000000382 <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ 382:	4885                	li	a7,1
+ ecall
+ 384:	00000073          	ecall
+ ret
+ 388:	8082                	ret
+
+000000000000038a <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+ 38a:	4889                	li	a7,2
+ ecall
+ 38c:	00000073          	ecall
+ ret
+ 390:	8082                	ret
+
+0000000000000392 <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+ 392:	488d                	li	a7,3
+ ecall
+ 394:	00000073          	ecall
+ ret
+ 398:	8082                	ret
+
+000000000000039a <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ 39a:	4891                	li	a7,4
+ ecall
+ 39c:	00000073          	ecall
+ ret
+ 3a0:	8082                	ret
+
+00000000000003a2 <read>:
+.global read
+read:
+ li a7, SYS_read
+ 3a2:	4895                	li	a7,5
+ ecall
+ 3a4:	00000073          	ecall
+ ret
+ 3a8:	8082                	ret
+
+00000000000003aa <write>:
+.global write
+write:
+ li a7, SYS_write
+ 3aa:	48c1                	li	a7,16
+ ecall
+ 3ac:	00000073          	ecall
+ ret
+ 3b0:	8082                	ret
+
+00000000000003b2 <close>:
+.global close
+close:
+ li a7, SYS_close
+ 3b2:	48d5                	li	a7,21
+ ecall
+ 3b4:	00000073          	ecall
+ ret
+ 3b8:	8082                	ret
+
+00000000000003ba <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+ 3ba:	4899                	li	a7,6
+ ecall
+ 3bc:	00000073          	ecall
+ ret
+ 3c0:	8082                	ret
+
+00000000000003c2 <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+ 3c2:	489d                	li	a7,7
+ ecall
+ 3c4:	00000073          	ecall
+ ret
+ 3c8:	8082                	ret
+
+00000000000003ca <open>:
+.global open
+open:
+ li a7, SYS_open
+ 3ca:	48bd                	li	a7,15
+ ecall
+ 3cc:	00000073          	ecall
+ ret
+ 3d0:	8082                	ret
+
+00000000000003d2 <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ 3d2:	48c5                	li	a7,17
+ ecall
+ 3d4:	00000073          	ecall
+ ret
+ 3d8:	8082                	ret
+
+00000000000003da <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ 3da:	48c9                	li	a7,18
+ ecall
+ 3dc:	00000073          	ecall
+ ret
+ 3e0:	8082                	ret
+
+00000000000003e2 <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ 3e2:	48a1                	li	a7,8
+ ecall
+ 3e4:	00000073          	ecall
+ ret
+ 3e8:	8082                	ret
+
+00000000000003ea <link>:
+.global link
+link:
+ li a7, SYS_link
+ 3ea:	48cd                	li	a7,19
+ ecall
+ 3ec:	00000073          	ecall
+ ret
+ 3f0:	8082                	ret
+
+00000000000003f2 <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ 3f2:	48d1                	li	a7,20
+ ecall
+ 3f4:	00000073          	ecall
+ ret
+ 3f8:	8082                	ret
+
+00000000000003fa <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ 3fa:	48a5                	li	a7,9
+ ecall
+ 3fc:	00000073          	ecall
+ ret
+ 400:	8082                	ret
+
+0000000000000402 <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+ 402:	48a9                	li	a7,10
+ ecall
+ 404:	00000073          	ecall
+ ret
+ 408:	8082                	ret
+
+000000000000040a <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ 40a:	48ad                	li	a7,11
+ ecall
+ 40c:	00000073          	ecall
+ ret
+ 410:	8082                	ret
+
+0000000000000412 <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ 412:	48b1                	li	a7,12
+ ecall
+ 414:	00000073          	ecall
+ ret
+ 418:	8082                	ret
+
+000000000000041a <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ 41a:	48b5                	li	a7,13
+ ecall
+ 41c:	00000073          	ecall
+ ret
+ 420:	8082                	ret
+
+0000000000000422 <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ 422:	48b9                	li	a7,14
+ ecall
+ 424:	00000073          	ecall
+ ret
+ 428:	8082                	ret
+
+000000000000042a <setp>:
+.global setp
+setp:
+ li a7, SYS_setp
+ 42a:	48d9                	li	a7,22
+ ecall
+ 42c:	00000073          	ecall
+ ret
+ 430:	8082                	ret
+
+0000000000000432 <semget>:
+.global semget
+semget:
+ li a7, SYS_semget
+ 432:	48dd                	li	a7,23
+ ecall
+ 434:	00000073          	ecall
+ ret
+ 438:	8082                	ret
+
+000000000000043a <semdown>:
+.global semdown
+semdown:
+ li a7, SYS_semdown
+ 43a:	48e1                	li	a7,24
+ ecall
+ 43c:	00000073          	ecall
+ ret
+ 440:	8082                	ret
+
+0000000000000442 <semup>:
+.global semup
+semup:
+ li a7, SYS_semup
+ 442:	48e5                	li	a7,25
+ ecall
+ 444:	00000073          	ecall
+ ret
+ 448:	8082                	ret
+
+000000000000044a <semclose>:
+.global semclose
+semclose:
+ li a7, SYS_semclose
+ 44a:	48e9                	li	a7,26
+ ecall
+ 44c:	00000073          	ecall
+ ret
+ 450:	8082                	ret
+
+0000000000000452 <timeout>:
+.global timeout
+timeout:
+ li a7, SYS_timeout
+ 452:	48ed                	li	a7,27
+ ecall
+ 454:	00000073          	ecall
+ ret
+ 458:	8082                	ret
+
+000000000000045a <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+ 45a:	1101                	addi	sp,sp,-32
+ 45c:	ec06                	sd	ra,24(sp)
+ 45e:	e822                	sd	s0,16(sp)
+ 460:	1000                	addi	s0,sp,32
+ 462:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+ 466:	4605                	li	a2,1
+ 468:	fef40593          	addi	a1,s0,-17
+ 46c:	00000097          	auipc	ra,0x0
+ 470:	f3e080e7          	jalr	-194(ra) # 3aa <write>
+}
+ 474:	60e2                	ld	ra,24(sp)
+ 476:	6442                	ld	s0,16(sp)
+ 478:	6105                	addi	sp,sp,32
+ 47a:	8082                	ret
+
+000000000000047c <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 47c:	7139                	addi	sp,sp,-64
+ 47e:	fc06                	sd	ra,56(sp)
+ 480:	f822                	sd	s0,48(sp)
+ 482:	f426                	sd	s1,40(sp)
+ 484:	f04a                	sd	s2,32(sp)
+ 486:	ec4e                	sd	s3,24(sp)
+ 488:	0080                	addi	s0,sp,64
+ 48a:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 48c:	c299                	beqz	a3,492 <printint+0x16>
+ 48e:	0805c963          	bltz	a1,520 <printint+0xa4>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 492:	2581                	sext.w	a1,a1
+  neg = 0;
+ 494:	4881                	li	a7,0
+ 496:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+ 49a:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+ 49c:	2601                	sext.w	a2,a2
+ 49e:	00000517          	auipc	a0,0x0
+ 4a2:	4e250513          	addi	a0,a0,1250 # 980 <digits>
+ 4a6:	883a                	mv	a6,a4
+ 4a8:	2705                	addiw	a4,a4,1
+ 4aa:	02c5f7bb          	remuw	a5,a1,a2
+ 4ae:	1782                	slli	a5,a5,0x20
+ 4b0:	9381                	srli	a5,a5,0x20
+ 4b2:	97aa                	add	a5,a5,a0
+ 4b4:	0007c783          	lbu	a5,0(a5)
+ 4b8:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+ 4bc:	0005879b          	sext.w	a5,a1
+ 4c0:	02c5d5bb          	divuw	a1,a1,a2
+ 4c4:	0685                	addi	a3,a3,1
+ 4c6:	fec7f0e3          	bgeu	a5,a2,4a6 <printint+0x2a>
+  if(neg)
+ 4ca:	00088c63          	beqz	a7,4e2 <printint+0x66>
+    buf[i++] = '-';
+ 4ce:	fd070793          	addi	a5,a4,-48
+ 4d2:	00878733          	add	a4,a5,s0
+ 4d6:	02d00793          	li	a5,45
+ 4da:	fef70823          	sb	a5,-16(a4)
+ 4de:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+ 4e2:	02e05863          	blez	a4,512 <printint+0x96>
+ 4e6:	fc040793          	addi	a5,s0,-64
+ 4ea:	00e78933          	add	s2,a5,a4
+ 4ee:	fff78993          	addi	s3,a5,-1
+ 4f2:	99ba                	add	s3,s3,a4
+ 4f4:	377d                	addiw	a4,a4,-1
+ 4f6:	1702                	slli	a4,a4,0x20
+ 4f8:	9301                	srli	a4,a4,0x20
+ 4fa:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+ 4fe:	fff94583          	lbu	a1,-1(s2)
+ 502:	8526                	mv	a0,s1
+ 504:	00000097          	auipc	ra,0x0
+ 508:	f56080e7          	jalr	-170(ra) # 45a <putc>
+  while(--i >= 0)
+ 50c:	197d                	addi	s2,s2,-1
+ 50e:	ff3918e3          	bne	s2,s3,4fe <printint+0x82>
+}
+ 512:	70e2                	ld	ra,56(sp)
+ 514:	7442                	ld	s0,48(sp)
+ 516:	74a2                	ld	s1,40(sp)
+ 518:	7902                	ld	s2,32(sp)
+ 51a:	69e2                	ld	s3,24(sp)
+ 51c:	6121                	addi	sp,sp,64
+ 51e:	8082                	ret
+    x = -xx;
+ 520:	40b005bb          	negw	a1,a1
+    neg = 1;
+ 524:	4885                	li	a7,1
+    x = -xx;
+ 526:	bf85                	j	496 <printint+0x1a>
+
+0000000000000528 <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+ 528:	7119                	addi	sp,sp,-128
+ 52a:	fc86                	sd	ra,120(sp)
+ 52c:	f8a2                	sd	s0,112(sp)
+ 52e:	f4a6                	sd	s1,104(sp)
+ 530:	f0ca                	sd	s2,96(sp)
+ 532:	ecce                	sd	s3,88(sp)
+ 534:	e8d2                	sd	s4,80(sp)
+ 536:	e4d6                	sd	s5,72(sp)
+ 538:	e0da                	sd	s6,64(sp)
+ 53a:	fc5e                	sd	s7,56(sp)
+ 53c:	f862                	sd	s8,48(sp)
+ 53e:	f466                	sd	s9,40(sp)
+ 540:	f06a                	sd	s10,32(sp)
+ 542:	ec6e                	sd	s11,24(sp)
+ 544:	0100                	addi	s0,sp,128
+  char *s;
+  int c, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+ 546:	0005c903          	lbu	s2,0(a1)
+ 54a:	18090f63          	beqz	s2,6e8 <vprintf+0x1c0>
+ 54e:	8aaa                	mv	s5,a0
+ 550:	8b32                	mv	s6,a2
+ 552:	00158493          	addi	s1,a1,1
+  state = 0;
+ 556:	4981                	li	s3,0
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 558:	02500a13          	li	s4,37
+ 55c:	4c55                	li	s8,21
+ 55e:	00000c97          	auipc	s9,0x0
+ 562:	3cac8c93          	addi	s9,s9,970 # 928 <malloc+0x13c>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c == 's'){
+        s = va_arg(ap, char*);
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 566:	02800d93          	li	s11,40
+  putc(fd, 'x');
+ 56a:	4d41                	li	s10,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 56c:	00000b97          	auipc	s7,0x0
+ 570:	414b8b93          	addi	s7,s7,1044 # 980 <digits>
+ 574:	a839                	j	592 <vprintf+0x6a>
+        putc(fd, c);
+ 576:	85ca                	mv	a1,s2
+ 578:	8556                	mv	a0,s5
+ 57a:	00000097          	auipc	ra,0x0
+ 57e:	ee0080e7          	jalr	-288(ra) # 45a <putc>
+ 582:	a019                	j	588 <vprintf+0x60>
+    } else if(state == '%'){
+ 584:	01498d63          	beq	s3,s4,59e <vprintf+0x76>
+  for(i = 0; fmt[i]; i++){
+ 588:	0485                	addi	s1,s1,1
+ 58a:	fff4c903          	lbu	s2,-1(s1)
+ 58e:	14090d63          	beqz	s2,6e8 <vprintf+0x1c0>
+    if(state == 0){
+ 592:	fe0999e3          	bnez	s3,584 <vprintf+0x5c>
+      if(c == '%'){
+ 596:	ff4910e3          	bne	s2,s4,576 <vprintf+0x4e>
+        state = '%';
+ 59a:	89d2                	mv	s3,s4
+ 59c:	b7f5                	j	588 <vprintf+0x60>
+      if(c == 'd'){
+ 59e:	11490c63          	beq	s2,s4,6b6 <vprintf+0x18e>
+ 5a2:	f9d9079b          	addiw	a5,s2,-99
+ 5a6:	0ff7f793          	zext.b	a5,a5
+ 5aa:	10fc6e63          	bltu	s8,a5,6c6 <vprintf+0x19e>
+ 5ae:	f9d9079b          	addiw	a5,s2,-99
+ 5b2:	0ff7f713          	zext.b	a4,a5
+ 5b6:	10ec6863          	bltu	s8,a4,6c6 <vprintf+0x19e>
+ 5ba:	00271793          	slli	a5,a4,0x2
+ 5be:	97e6                	add	a5,a5,s9
+ 5c0:	439c                	lw	a5,0(a5)
+ 5c2:	97e6                	add	a5,a5,s9
+ 5c4:	8782                	jr	a5
+        printint(fd, va_arg(ap, int), 10, 1);
+ 5c6:	008b0913          	addi	s2,s6,8
+ 5ca:	4685                	li	a3,1
+ 5cc:	4629                	li	a2,10
+ 5ce:	000b2583          	lw	a1,0(s6)
+ 5d2:	8556                	mv	a0,s5
+ 5d4:	00000097          	auipc	ra,0x0
+ 5d8:	ea8080e7          	jalr	-344(ra) # 47c <printint>
+ 5dc:	8b4a                	mv	s6,s2
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 5de:	4981                	li	s3,0
+ 5e0:	b765                	j	588 <vprintf+0x60>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 5e2:	008b0913          	addi	s2,s6,8
+ 5e6:	4681                	li	a3,0
+ 5e8:	4629                	li	a2,10
+ 5ea:	000b2583          	lw	a1,0(s6)
+ 5ee:	8556                	mv	a0,s5
+ 5f0:	00000097          	auipc	ra,0x0
+ 5f4:	e8c080e7          	jalr	-372(ra) # 47c <printint>
+ 5f8:	8b4a                	mv	s6,s2
+      state = 0;
+ 5fa:	4981                	li	s3,0
+ 5fc:	b771                	j	588 <vprintf+0x60>
+        printint(fd, va_arg(ap, int), 16, 0);
+ 5fe:	008b0913          	addi	s2,s6,8
+ 602:	4681                	li	a3,0
+ 604:	866a                	mv	a2,s10
+ 606:	000b2583          	lw	a1,0(s6)
+ 60a:	8556                	mv	a0,s5
+ 60c:	00000097          	auipc	ra,0x0
+ 610:	e70080e7          	jalr	-400(ra) # 47c <printint>
+ 614:	8b4a                	mv	s6,s2
+      state = 0;
+ 616:	4981                	li	s3,0
+ 618:	bf85                	j	588 <vprintf+0x60>
+        printptr(fd, va_arg(ap, uint64));
+ 61a:	008b0793          	addi	a5,s6,8
+ 61e:	f8f43423          	sd	a5,-120(s0)
+ 622:	000b3983          	ld	s3,0(s6)
+  putc(fd, '0');
+ 626:	03000593          	li	a1,48
+ 62a:	8556                	mv	a0,s5
+ 62c:	00000097          	auipc	ra,0x0
+ 630:	e2e080e7          	jalr	-466(ra) # 45a <putc>
+  putc(fd, 'x');
+ 634:	07800593          	li	a1,120
+ 638:	8556                	mv	a0,s5
+ 63a:	00000097          	auipc	ra,0x0
+ 63e:	e20080e7          	jalr	-480(ra) # 45a <putc>
+ 642:	896a                	mv	s2,s10
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 644:	03c9d793          	srli	a5,s3,0x3c
+ 648:	97de                	add	a5,a5,s7
+ 64a:	0007c583          	lbu	a1,0(a5)
+ 64e:	8556                	mv	a0,s5
+ 650:	00000097          	auipc	ra,0x0
+ 654:	e0a080e7          	jalr	-502(ra) # 45a <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+ 658:	0992                	slli	s3,s3,0x4
+ 65a:	397d                	addiw	s2,s2,-1
+ 65c:	fe0914e3          	bnez	s2,644 <vprintf+0x11c>
+        printptr(fd, va_arg(ap, uint64));
+ 660:	f8843b03          	ld	s6,-120(s0)
+      state = 0;
+ 664:	4981                	li	s3,0
+ 666:	b70d                	j	588 <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 668:	008b0913          	addi	s2,s6,8
+ 66c:	000b3983          	ld	s3,0(s6)
+        if(s == 0)
+ 670:	02098163          	beqz	s3,692 <vprintf+0x16a>
+        while(*s != 0){
+ 674:	0009c583          	lbu	a1,0(s3)
+ 678:	c5ad                	beqz	a1,6e2 <vprintf+0x1ba>
+          putc(fd, *s);
+ 67a:	8556                	mv	a0,s5
+ 67c:	00000097          	auipc	ra,0x0
+ 680:	dde080e7          	jalr	-546(ra) # 45a <putc>
+          s++;
+ 684:	0985                	addi	s3,s3,1
+        while(*s != 0){
+ 686:	0009c583          	lbu	a1,0(s3)
+ 68a:	f9e5                	bnez	a1,67a <vprintf+0x152>
+        s = va_arg(ap, char*);
+ 68c:	8b4a                	mv	s6,s2
+      state = 0;
+ 68e:	4981                	li	s3,0
+ 690:	bde5                	j	588 <vprintf+0x60>
+          s = "(null)";
+ 692:	00000997          	auipc	s3,0x0
+ 696:	28e98993          	addi	s3,s3,654 # 920 <malloc+0x134>
+        while(*s != 0){
+ 69a:	85ee                	mv	a1,s11
+ 69c:	bff9                	j	67a <vprintf+0x152>
+        putc(fd, va_arg(ap, uint));
+ 69e:	008b0913          	addi	s2,s6,8
+ 6a2:	000b4583          	lbu	a1,0(s6)
+ 6a6:	8556                	mv	a0,s5
+ 6a8:	00000097          	auipc	ra,0x0
+ 6ac:	db2080e7          	jalr	-590(ra) # 45a <putc>
+ 6b0:	8b4a                	mv	s6,s2
+      state = 0;
+ 6b2:	4981                	li	s3,0
+ 6b4:	bdd1                	j	588 <vprintf+0x60>
+        putc(fd, c);
+ 6b6:	85d2                	mv	a1,s4
+ 6b8:	8556                	mv	a0,s5
+ 6ba:	00000097          	auipc	ra,0x0
+ 6be:	da0080e7          	jalr	-608(ra) # 45a <putc>
+      state = 0;
+ 6c2:	4981                	li	s3,0
+ 6c4:	b5d1                	j	588 <vprintf+0x60>
+        putc(fd, '%');
+ 6c6:	85d2                	mv	a1,s4
+ 6c8:	8556                	mv	a0,s5
+ 6ca:	00000097          	auipc	ra,0x0
+ 6ce:	d90080e7          	jalr	-624(ra) # 45a <putc>
+        putc(fd, c);
+ 6d2:	85ca                	mv	a1,s2
+ 6d4:	8556                	mv	a0,s5
+ 6d6:	00000097          	auipc	ra,0x0
+ 6da:	d84080e7          	jalr	-636(ra) # 45a <putc>
+      state = 0;
+ 6de:	4981                	li	s3,0
+ 6e0:	b565                	j	588 <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 6e2:	8b4a                	mv	s6,s2
+      state = 0;
+ 6e4:	4981                	li	s3,0
+ 6e6:	b54d                	j	588 <vprintf+0x60>
+    }
+  }
+}
+ 6e8:	70e6                	ld	ra,120(sp)
+ 6ea:	7446                	ld	s0,112(sp)
+ 6ec:	74a6                	ld	s1,104(sp)
+ 6ee:	7906                	ld	s2,96(sp)
+ 6f0:	69e6                	ld	s3,88(sp)
+ 6f2:	6a46                	ld	s4,80(sp)
+ 6f4:	6aa6                	ld	s5,72(sp)
+ 6f6:	6b06                	ld	s6,64(sp)
+ 6f8:	7be2                	ld	s7,56(sp)
+ 6fa:	7c42                	ld	s8,48(sp)
+ 6fc:	7ca2                	ld	s9,40(sp)
+ 6fe:	7d02                	ld	s10,32(sp)
+ 700:	6de2                	ld	s11,24(sp)
+ 702:	6109                	addi	sp,sp,128
+ 704:	8082                	ret
+
+0000000000000706 <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+ 706:	715d                	addi	sp,sp,-80
+ 708:	ec06                	sd	ra,24(sp)
+ 70a:	e822                	sd	s0,16(sp)
+ 70c:	1000                	addi	s0,sp,32
+ 70e:	e010                	sd	a2,0(s0)
+ 710:	e414                	sd	a3,8(s0)
+ 712:	e818                	sd	a4,16(s0)
+ 714:	ec1c                	sd	a5,24(s0)
+ 716:	03043023          	sd	a6,32(s0)
+ 71a:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 71e:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+ 722:	8622                	mv	a2,s0
+ 724:	00000097          	auipc	ra,0x0
+ 728:	e04080e7          	jalr	-508(ra) # 528 <vprintf>
+}
+ 72c:	60e2                	ld	ra,24(sp)
+ 72e:	6442                	ld	s0,16(sp)
+ 730:	6161                	addi	sp,sp,80
+ 732:	8082                	ret
+
+0000000000000734 <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+ 734:	711d                	addi	sp,sp,-96
+ 736:	ec06                	sd	ra,24(sp)
+ 738:	e822                	sd	s0,16(sp)
+ 73a:	1000                	addi	s0,sp,32
+ 73c:	e40c                	sd	a1,8(s0)
+ 73e:	e810                	sd	a2,16(s0)
+ 740:	ec14                	sd	a3,24(s0)
+ 742:	f018                	sd	a4,32(s0)
+ 744:	f41c                	sd	a5,40(s0)
+ 746:	03043823          	sd	a6,48(s0)
+ 74a:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 74e:	00840613          	addi	a2,s0,8
+ 752:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+ 756:	85aa                	mv	a1,a0
+ 758:	4505                	li	a0,1
+ 75a:	00000097          	auipc	ra,0x0
+ 75e:	dce080e7          	jalr	-562(ra) # 528 <vprintf>
+}
+ 762:	60e2                	ld	ra,24(sp)
+ 764:	6442                	ld	s0,16(sp)
+ 766:	6125                	addi	sp,sp,96
+ 768:	8082                	ret
+
+000000000000076a <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 76a:	1141                	addi	sp,sp,-16
+ 76c:	e422                	sd	s0,8(sp)
+ 76e:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 770:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 774:	00000797          	auipc	a5,0x0
+ 778:	2247b783          	ld	a5,548(a5) # 998 <freep>
+ 77c:	a02d                	j	7a6 <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 77e:	4618                	lw	a4,8(a2)
+ 780:	9f2d                	addw	a4,a4,a1
+ 782:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 786:	6398                	ld	a4,0(a5)
+ 788:	6310                	ld	a2,0(a4)
+ 78a:	a83d                	j	7c8 <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 78c:	ff852703          	lw	a4,-8(a0)
+ 790:	9f31                	addw	a4,a4,a2
+ 792:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+ 794:	ff053683          	ld	a3,-16(a0)
+ 798:	a091                	j	7dc <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 79a:	6398                	ld	a4,0(a5)
+ 79c:	00e7e463          	bltu	a5,a4,7a4 <free+0x3a>
+ 7a0:	00e6ea63          	bltu	a3,a4,7b4 <free+0x4a>
+{
+ 7a4:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 7a6:	fed7fae3          	bgeu	a5,a3,79a <free+0x30>
+ 7aa:	6398                	ld	a4,0(a5)
+ 7ac:	00e6e463          	bltu	a3,a4,7b4 <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 7b0:	fee7eae3          	bltu	a5,a4,7a4 <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+ 7b4:	ff852583          	lw	a1,-8(a0)
+ 7b8:	6390                	ld	a2,0(a5)
+ 7ba:	02059813          	slli	a6,a1,0x20
+ 7be:	01c85713          	srli	a4,a6,0x1c
+ 7c2:	9736                	add	a4,a4,a3
+ 7c4:	fae60de3          	beq	a2,a4,77e <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 7c8:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+ 7cc:	4790                	lw	a2,8(a5)
+ 7ce:	02061593          	slli	a1,a2,0x20
+ 7d2:	01c5d713          	srli	a4,a1,0x1c
+ 7d6:	973e                	add	a4,a4,a5
+ 7d8:	fae68ae3          	beq	a3,a4,78c <free+0x22>
+    p->s.ptr = bp->s.ptr;
+ 7dc:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 7de:	00000717          	auipc	a4,0x0
+ 7e2:	1af73d23          	sd	a5,442(a4) # 998 <freep>
+}
+ 7e6:	6422                	ld	s0,8(sp)
+ 7e8:	0141                	addi	sp,sp,16
+ 7ea:	8082                	ret
+
+00000000000007ec <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 7ec:	7139                	addi	sp,sp,-64
+ 7ee:	fc06                	sd	ra,56(sp)
+ 7f0:	f822                	sd	s0,48(sp)
+ 7f2:	f426                	sd	s1,40(sp)
+ 7f4:	f04a                	sd	s2,32(sp)
+ 7f6:	ec4e                	sd	s3,24(sp)
+ 7f8:	e852                	sd	s4,16(sp)
+ 7fa:	e456                	sd	s5,8(sp)
+ 7fc:	e05a                	sd	s6,0(sp)
+ 7fe:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 800:	02051493          	slli	s1,a0,0x20
+ 804:	9081                	srli	s1,s1,0x20
+ 806:	04bd                	addi	s1,s1,15
+ 808:	8091                	srli	s1,s1,0x4
+ 80a:	0014899b          	addiw	s3,s1,1
+ 80e:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+ 810:	00000517          	auipc	a0,0x0
+ 814:	18853503          	ld	a0,392(a0) # 998 <freep>
+ 818:	c515                	beqz	a0,844 <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 81a:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 81c:	4798                	lw	a4,8(a5)
+ 81e:	02977f63          	bgeu	a4,s1,85c <malloc+0x70>
+ 822:	8a4e                	mv	s4,s3
+ 824:	0009871b          	sext.w	a4,s3
+ 828:	6685                	lui	a3,0x1
+ 82a:	00d77363          	bgeu	a4,a3,830 <malloc+0x44>
+ 82e:	6a05                	lui	s4,0x1
+ 830:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+ 834:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 838:	00000917          	auipc	s2,0x0
+ 83c:	16090913          	addi	s2,s2,352 # 998 <freep>
+  if(p == (char*)-1)
+ 840:	5afd                	li	s5,-1
+ 842:	a895                	j	8b6 <malloc+0xca>
+    base.s.ptr = freep = prevp = &base;
+ 844:	00000797          	auipc	a5,0x0
+ 848:	35c78793          	addi	a5,a5,860 # ba0 <base>
+ 84c:	00000717          	auipc	a4,0x0
+ 850:	14f73623          	sd	a5,332(a4) # 998 <freep>
+ 854:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+ 856:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+ 85a:	b7e1                	j	822 <malloc+0x36>
+      if(p->s.size == nunits)
+ 85c:	02e48c63          	beq	s1,a4,894 <malloc+0xa8>
+        p->s.size -= nunits;
+ 860:	4137073b          	subw	a4,a4,s3
+ 864:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+ 866:	02071693          	slli	a3,a4,0x20
+ 86a:	01c6d713          	srli	a4,a3,0x1c
+ 86e:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+ 870:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+ 874:	00000717          	auipc	a4,0x0
+ 878:	12a73223          	sd	a0,292(a4) # 998 <freep>
+      return (void*)(p + 1);
+ 87c:	01078513          	addi	a0,a5,16
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ 880:	70e2                	ld	ra,56(sp)
+ 882:	7442                	ld	s0,48(sp)
+ 884:	74a2                	ld	s1,40(sp)
+ 886:	7902                	ld	s2,32(sp)
+ 888:	69e2                	ld	s3,24(sp)
+ 88a:	6a42                	ld	s4,16(sp)
+ 88c:	6aa2                	ld	s5,8(sp)
+ 88e:	6b02                	ld	s6,0(sp)
+ 890:	6121                	addi	sp,sp,64
+ 892:	8082                	ret
+        prevp->s.ptr = p->s.ptr;
+ 894:	6398                	ld	a4,0(a5)
+ 896:	e118                	sd	a4,0(a0)
+ 898:	bff1                	j	874 <malloc+0x88>
+  hp->s.size = nu;
+ 89a:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+ 89e:	0541                	addi	a0,a0,16
+ 8a0:	00000097          	auipc	ra,0x0
+ 8a4:	eca080e7          	jalr	-310(ra) # 76a <free>
+  return freep;
+ 8a8:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+ 8ac:	d971                	beqz	a0,880 <malloc+0x94>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 8ae:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 8b0:	4798                	lw	a4,8(a5)
+ 8b2:	fa9775e3          	bgeu	a4,s1,85c <malloc+0x70>
+    if(p == freep)
+ 8b6:	00093703          	ld	a4,0(s2)
+ 8ba:	853e                	mv	a0,a5
+ 8bc:	fef719e3          	bne	a4,a5,8ae <malloc+0xc2>
+  p = sbrk(nu * sizeof(Header));
+ 8c0:	8552                	mv	a0,s4
+ 8c2:	00000097          	auipc	ra,0x0
+ 8c6:	b50080e7          	jalr	-1200(ra) # 412 <sbrk>
+  if(p == (char*)-1)
+ 8ca:	fd5518e3          	bne	a0,s5,89a <malloc+0xae>
+        return 0;
+ 8ce:	4501                	li	a0,0
+ 8d0:	bf45                	j	880 <malloc+0x94>
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/cat.d os-workshop/user/cat.d
--- xv6-riscv/user/cat.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/cat.d	2022-05-28 22:34:31.000000000 -0300
@@ -0,0 +1 @@
+user/cat.o: user/cat.c kernel/types.h kernel/stat.h user/user.h
Binary files xv6-riscv/user/cat.o and os-workshop/user/cat.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/cat.sym os-workshop/user/cat.sym
--- xv6-riscv/user/cat.sym	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/cat.sym	2022-05-28 22:34:32.000000000 -0300
@@ -0,0 +1,78 @@
+0000000000000000 .text
+00000000000008d8 .rodata
+0000000000000998 .sbss
+00000000000009a0 .bss
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_aranges
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_line
+0000000000000000 .debug_frame
+0000000000000000 .debug_str
+0000000000000000 .debug_line_str
+0000000000000000 .debug_loclists
+0000000000000000 .debug_rnglists
+0000000000000000 cat.c
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+000000000000045a putc
+000000000000047c printint
+0000000000000980 digits
+0000000000000000 umalloc.c
+0000000000000998 freep
+0000000000000ba0 base
+000000000000011e strcpy
+0000000000000734 printf
+0000000000001191 __global_pointer$
+00000000000002d8 memmove
+00000000000003d2 mknod
+000000000000043a semdown
+00000000000001d6 gets
+0000000000000991 __SDATA_BEGIN__
+0000000000000432 semget
+000000000000040a getpid
+000000000000036a memcpy
+0000000000000000 cat
+00000000000007ec malloc
+000000000000044a semclose
+000000000000041a sleep
+000000000000039a pipe
+00000000000003aa write
+00000000000003e2 fstat
+0000000000000706 fprintf
+00000000000003ba kill
+0000000000000528 vprintf
+00000000000003fa chdir
+00000000000003c2 exec
+0000000000000392 wait
+00000000000003a2 read
+00000000000003da unlink
+0000000000000330 memcmp
+0000000000000382 fork
+0000000000000bb0 __BSS_END__
+0000000000000412 sbrk
+0000000000000422 uptime
+0000000000000991 __bss_start
+0000000000000190 memset
+000000000000008a main
+0000000000000452 timeout
+000000000000013a strcmp
+0000000000000402 dup
+00000000000009a0 buf
+0000000000000991 __DATA_BEGIN__
+000000000000024a stat
+0000000000000991 _edata
+000000000000042a setp
+0000000000000bb0 _end
+00000000000003ea link
+000000000000038a exit
+0000000000000290 atoi
+0000000000000166 strlen
+00000000000003ca open
+0000000000000442 semup
+00000000000001b2 strchr
+00000000000003f2 mkdir
+00000000000003b2 close
+000000000000076a free
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/cons.asm os-workshop/user/cons.asm
--- xv6-riscv/user/cons.asm	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/cons.asm	2022-05-28 22:34:38.000000000 -0300
@@ -0,0 +1,1402 @@
+
+user/_cons:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <main>:
+#include "user/user.h"
+#include "kernel/fcntl.h"
+
+#define N  1000
+
+int main(void) {
+   0:	715d                	addi	sp,sp,-80
+   2:	e486                	sd	ra,72(sp)
+   4:	e0a2                	sd	s0,64(sp)
+   6:	fc26                	sd	s1,56(sp)
+   8:	f84a                	sd	s2,48(sp)
+   a:	f44e                	sd	s3,40(sp)
+   c:	f052                	sd	s4,32(sp)
+   e:	ec56                	sd	s5,24(sp)
+  10:	0880                	addi	s0,sp,80
+  int fd = open("buffer", O_RDONLY);
+  12:	4581                	li	a1,0
+  14:	00001517          	auipc	a0,0x1
+  18:	83c50513          	addi	a0,a0,-1988 # 850 <malloc+0xe6>
+  1c:	00000097          	auipc	ra,0x0
+  20:	32c080e7          	jalr	812(ra) # 348 <open>
+  24:	89aa                	mv	s3,a0
+  int sid = semget(23, 1);
+  26:	4585                	li	a1,1
+  28:	455d                	li	a0,23
+  2a:	00000097          	auipc	ra,0x0
+  2e:	386080e7          	jalr	902(ra) # 3b0 <semget>
+  32:	84aa                	mv	s1,a0
+  for (;;) {
+    char buffer[7];
+    if (semdown(sid) == 0) {
+      printf("CONS IN \n");
+  34:	00001a97          	auipc	s5,0x1
+  38:	824a8a93          	addi	s5,s5,-2012 # 858 <malloc+0xee>
+      timeout(10000);
+  3c:	6909                	lui	s2,0x2
+  3e:	71090913          	addi	s2,s2,1808 # 2710 <__global_pointer$+0x1627>
+      read(fd, &buffer, sizeof buffer);
+      printf("CONS OUT \n");
+  42:	00001a17          	auipc	s4,0x1
+  46:	826a0a13          	addi	s4,s4,-2010 # 868 <malloc+0xfe>
+  4a:	a091                	j	8e <main+0x8e>
+      printf("CONS IN \n");
+  4c:	8556                	mv	a0,s5
+  4e:	00000097          	auipc	ra,0x0
+  52:	664080e7          	jalr	1636(ra) # 6b2 <printf>
+      timeout(10000);
+  56:	854a                	mv	a0,s2
+  58:	00000097          	auipc	ra,0x0
+  5c:	378080e7          	jalr	888(ra) # 3d0 <timeout>
+      read(fd, &buffer, sizeof buffer);
+  60:	461d                	li	a2,7
+  62:	fb840593          	addi	a1,s0,-72
+  66:	854e                	mv	a0,s3
+  68:	00000097          	auipc	ra,0x0
+  6c:	2b8080e7          	jalr	696(ra) # 320 <read>
+      printf("CONS OUT \n");
+  70:	8552                	mv	a0,s4
+  72:	00000097          	auipc	ra,0x0
+  76:	640080e7          	jalr	1600(ra) # 6b2 <printf>
+      timeout(10000);
+  7a:	854a                	mv	a0,s2
+  7c:	00000097          	auipc	ra,0x0
+  80:	354080e7          	jalr	852(ra) # 3d0 <timeout>
+      semup(sid);
+  84:	8526                	mv	a0,s1
+  86:	00000097          	auipc	ra,0x0
+  8a:	33a080e7          	jalr	826(ra) # 3c0 <semup>
+    if (semdown(sid) == 0) {
+  8e:	8526                	mv	a0,s1
+  90:	00000097          	auipc	ra,0x0
+  94:	328080e7          	jalr	808(ra) # 3b8 <semdown>
+  98:	f97d                	bnez	a0,8e <main+0x8e>
+  9a:	bf4d                	j	4c <main+0x4c>
+
+000000000000009c <strcpy>:
+#include "kernel/fcntl.h"
+#include "user/user.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  9c:	1141                	addi	sp,sp,-16
+  9e:	e422                	sd	s0,8(sp)
+  a0:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  a2:	87aa                	mv	a5,a0
+  a4:	0585                	addi	a1,a1,1
+  a6:	0785                	addi	a5,a5,1
+  a8:	fff5c703          	lbu	a4,-1(a1)
+  ac:	fee78fa3          	sb	a4,-1(a5)
+  b0:	fb75                	bnez	a4,a4 <strcpy+0x8>
+    ;
+  return os;
+}
+  b2:	6422                	ld	s0,8(sp)
+  b4:	0141                	addi	sp,sp,16
+  b6:	8082                	ret
+
+00000000000000b8 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  b8:	1141                	addi	sp,sp,-16
+  ba:	e422                	sd	s0,8(sp)
+  bc:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+  be:	00054783          	lbu	a5,0(a0)
+  c2:	cb91                	beqz	a5,d6 <strcmp+0x1e>
+  c4:	0005c703          	lbu	a4,0(a1)
+  c8:	00f71763          	bne	a4,a5,d6 <strcmp+0x1e>
+    p++, q++;
+  cc:	0505                	addi	a0,a0,1
+  ce:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+  d0:	00054783          	lbu	a5,0(a0)
+  d4:	fbe5                	bnez	a5,c4 <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+  d6:	0005c503          	lbu	a0,0(a1)
+}
+  da:	40a7853b          	subw	a0,a5,a0
+  de:	6422                	ld	s0,8(sp)
+  e0:	0141                	addi	sp,sp,16
+  e2:	8082                	ret
+
+00000000000000e4 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  e4:	1141                	addi	sp,sp,-16
+  e6:	e422                	sd	s0,8(sp)
+  e8:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+  ea:	00054783          	lbu	a5,0(a0)
+  ee:	cf91                	beqz	a5,10a <strlen+0x26>
+  f0:	0505                	addi	a0,a0,1
+  f2:	87aa                	mv	a5,a0
+  f4:	4685                	li	a3,1
+  f6:	9e89                	subw	a3,a3,a0
+  f8:	00f6853b          	addw	a0,a3,a5
+  fc:	0785                	addi	a5,a5,1
+  fe:	fff7c703          	lbu	a4,-1(a5)
+ 102:	fb7d                	bnez	a4,f8 <strlen+0x14>
+    ;
+  return n;
+}
+ 104:	6422                	ld	s0,8(sp)
+ 106:	0141                	addi	sp,sp,16
+ 108:	8082                	ret
+  for(n = 0; s[n]; n++)
+ 10a:	4501                	li	a0,0
+ 10c:	bfe5                	j	104 <strlen+0x20>
+
+000000000000010e <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 10e:	1141                	addi	sp,sp,-16
+ 110:	e422                	sd	s0,8(sp)
+ 112:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+ 114:	ca19                	beqz	a2,12a <memset+0x1c>
+ 116:	87aa                	mv	a5,a0
+ 118:	1602                	slli	a2,a2,0x20
+ 11a:	9201                	srli	a2,a2,0x20
+ 11c:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+ 120:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+ 124:	0785                	addi	a5,a5,1
+ 126:	fee79de3          	bne	a5,a4,120 <memset+0x12>
+  }
+  return dst;
+}
+ 12a:	6422                	ld	s0,8(sp)
+ 12c:	0141                	addi	sp,sp,16
+ 12e:	8082                	ret
+
+0000000000000130 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 130:	1141                	addi	sp,sp,-16
+ 132:	e422                	sd	s0,8(sp)
+ 134:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+ 136:	00054783          	lbu	a5,0(a0)
+ 13a:	cb99                	beqz	a5,150 <strchr+0x20>
+    if(*s == c)
+ 13c:	00f58763          	beq	a1,a5,14a <strchr+0x1a>
+  for(; *s; s++)
+ 140:	0505                	addi	a0,a0,1
+ 142:	00054783          	lbu	a5,0(a0)
+ 146:	fbfd                	bnez	a5,13c <strchr+0xc>
+      return (char*)s;
+  return 0;
+ 148:	4501                	li	a0,0
+}
+ 14a:	6422                	ld	s0,8(sp)
+ 14c:	0141                	addi	sp,sp,16
+ 14e:	8082                	ret
+  return 0;
+ 150:	4501                	li	a0,0
+ 152:	bfe5                	j	14a <strchr+0x1a>
+
+0000000000000154 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 154:	711d                	addi	sp,sp,-96
+ 156:	ec86                	sd	ra,88(sp)
+ 158:	e8a2                	sd	s0,80(sp)
+ 15a:	e4a6                	sd	s1,72(sp)
+ 15c:	e0ca                	sd	s2,64(sp)
+ 15e:	fc4e                	sd	s3,56(sp)
+ 160:	f852                	sd	s4,48(sp)
+ 162:	f456                	sd	s5,40(sp)
+ 164:	f05a                	sd	s6,32(sp)
+ 166:	ec5e                	sd	s7,24(sp)
+ 168:	1080                	addi	s0,sp,96
+ 16a:	8baa                	mv	s7,a0
+ 16c:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 16e:	892a                	mv	s2,a0
+ 170:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+ 172:	4aa9                	li	s5,10
+ 174:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+ 176:	89a6                	mv	s3,s1
+ 178:	2485                	addiw	s1,s1,1
+ 17a:	0344d863          	bge	s1,s4,1aa <gets+0x56>
+    cc = read(0, &c, 1);
+ 17e:	4605                	li	a2,1
+ 180:	faf40593          	addi	a1,s0,-81
+ 184:	4501                	li	a0,0
+ 186:	00000097          	auipc	ra,0x0
+ 18a:	19a080e7          	jalr	410(ra) # 320 <read>
+    if(cc < 1)
+ 18e:	00a05e63          	blez	a0,1aa <gets+0x56>
+    buf[i++] = c;
+ 192:	faf44783          	lbu	a5,-81(s0)
+ 196:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+ 19a:	01578763          	beq	a5,s5,1a8 <gets+0x54>
+ 19e:	0905                	addi	s2,s2,1
+ 1a0:	fd679be3          	bne	a5,s6,176 <gets+0x22>
+  for(i=0; i+1 < max; ){
+ 1a4:	89a6                	mv	s3,s1
+ 1a6:	a011                	j	1aa <gets+0x56>
+ 1a8:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+ 1aa:	99de                	add	s3,s3,s7
+ 1ac:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+ 1b0:	855e                	mv	a0,s7
+ 1b2:	60e6                	ld	ra,88(sp)
+ 1b4:	6446                	ld	s0,80(sp)
+ 1b6:	64a6                	ld	s1,72(sp)
+ 1b8:	6906                	ld	s2,64(sp)
+ 1ba:	79e2                	ld	s3,56(sp)
+ 1bc:	7a42                	ld	s4,48(sp)
+ 1be:	7aa2                	ld	s5,40(sp)
+ 1c0:	7b02                	ld	s6,32(sp)
+ 1c2:	6be2                	ld	s7,24(sp)
+ 1c4:	6125                	addi	sp,sp,96
+ 1c6:	8082                	ret
+
+00000000000001c8 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1c8:	1101                	addi	sp,sp,-32
+ 1ca:	ec06                	sd	ra,24(sp)
+ 1cc:	e822                	sd	s0,16(sp)
+ 1ce:	e426                	sd	s1,8(sp)
+ 1d0:	e04a                	sd	s2,0(sp)
+ 1d2:	1000                	addi	s0,sp,32
+ 1d4:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1d6:	4581                	li	a1,0
+ 1d8:	00000097          	auipc	ra,0x0
+ 1dc:	170080e7          	jalr	368(ra) # 348 <open>
+  if(fd < 0)
+ 1e0:	02054563          	bltz	a0,20a <stat+0x42>
+ 1e4:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+ 1e6:	85ca                	mv	a1,s2
+ 1e8:	00000097          	auipc	ra,0x0
+ 1ec:	178080e7          	jalr	376(ra) # 360 <fstat>
+ 1f0:	892a                	mv	s2,a0
+  close(fd);
+ 1f2:	8526                	mv	a0,s1
+ 1f4:	00000097          	auipc	ra,0x0
+ 1f8:	13c080e7          	jalr	316(ra) # 330 <close>
+  return r;
+}
+ 1fc:	854a                	mv	a0,s2
+ 1fe:	60e2                	ld	ra,24(sp)
+ 200:	6442                	ld	s0,16(sp)
+ 202:	64a2                	ld	s1,8(sp)
+ 204:	6902                	ld	s2,0(sp)
+ 206:	6105                	addi	sp,sp,32
+ 208:	8082                	ret
+    return -1;
+ 20a:	597d                	li	s2,-1
+ 20c:	bfc5                	j	1fc <stat+0x34>
+
+000000000000020e <atoi>:
+
+int
+atoi(const char *s)
+{
+ 20e:	1141                	addi	sp,sp,-16
+ 210:	e422                	sd	s0,8(sp)
+ 212:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 214:	00054683          	lbu	a3,0(a0)
+ 218:	fd06879b          	addiw	a5,a3,-48
+ 21c:	0ff7f793          	zext.b	a5,a5
+ 220:	4625                	li	a2,9
+ 222:	02f66863          	bltu	a2,a5,252 <atoi+0x44>
+ 226:	872a                	mv	a4,a0
+  n = 0;
+ 228:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+ 22a:	0705                	addi	a4,a4,1
+ 22c:	0025179b          	slliw	a5,a0,0x2
+ 230:	9fa9                	addw	a5,a5,a0
+ 232:	0017979b          	slliw	a5,a5,0x1
+ 236:	9fb5                	addw	a5,a5,a3
+ 238:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+ 23c:	00074683          	lbu	a3,0(a4)
+ 240:	fd06879b          	addiw	a5,a3,-48
+ 244:	0ff7f793          	zext.b	a5,a5
+ 248:	fef671e3          	bgeu	a2,a5,22a <atoi+0x1c>
+  return n;
+}
+ 24c:	6422                	ld	s0,8(sp)
+ 24e:	0141                	addi	sp,sp,16
+ 250:	8082                	ret
+  n = 0;
+ 252:	4501                	li	a0,0
+ 254:	bfe5                	j	24c <atoi+0x3e>
+
+0000000000000256 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 256:	1141                	addi	sp,sp,-16
+ 258:	e422                	sd	s0,8(sp)
+ 25a:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+ 25c:	02b57463          	bgeu	a0,a1,284 <memmove+0x2e>
+    while(n-- > 0)
+ 260:	00c05f63          	blez	a2,27e <memmove+0x28>
+ 264:	1602                	slli	a2,a2,0x20
+ 266:	9201                	srli	a2,a2,0x20
+ 268:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+ 26c:	872a                	mv	a4,a0
+      *dst++ = *src++;
+ 26e:	0585                	addi	a1,a1,1
+ 270:	0705                	addi	a4,a4,1
+ 272:	fff5c683          	lbu	a3,-1(a1)
+ 276:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+ 27a:	fee79ae3          	bne	a5,a4,26e <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+ 27e:	6422                	ld	s0,8(sp)
+ 280:	0141                	addi	sp,sp,16
+ 282:	8082                	ret
+    dst += n;
+ 284:	00c50733          	add	a4,a0,a2
+    src += n;
+ 288:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+ 28a:	fec05ae3          	blez	a2,27e <memmove+0x28>
+ 28e:	fff6079b          	addiw	a5,a2,-1
+ 292:	1782                	slli	a5,a5,0x20
+ 294:	9381                	srli	a5,a5,0x20
+ 296:	fff7c793          	not	a5,a5
+ 29a:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+ 29c:	15fd                	addi	a1,a1,-1
+ 29e:	177d                	addi	a4,a4,-1
+ 2a0:	0005c683          	lbu	a3,0(a1)
+ 2a4:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+ 2a8:	fee79ae3          	bne	a5,a4,29c <memmove+0x46>
+ 2ac:	bfc9                	j	27e <memmove+0x28>
+
+00000000000002ae <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+ 2ae:	1141                	addi	sp,sp,-16
+ 2b0:	e422                	sd	s0,8(sp)
+ 2b2:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+ 2b4:	ca05                	beqz	a2,2e4 <memcmp+0x36>
+ 2b6:	fff6069b          	addiw	a3,a2,-1
+ 2ba:	1682                	slli	a3,a3,0x20
+ 2bc:	9281                	srli	a3,a3,0x20
+ 2be:	0685                	addi	a3,a3,1
+ 2c0:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+ 2c2:	00054783          	lbu	a5,0(a0)
+ 2c6:	0005c703          	lbu	a4,0(a1)
+ 2ca:	00e79863          	bne	a5,a4,2da <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+ 2ce:	0505                	addi	a0,a0,1
+    p2++;
+ 2d0:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+ 2d2:	fed518e3          	bne	a0,a3,2c2 <memcmp+0x14>
+  }
+  return 0;
+ 2d6:	4501                	li	a0,0
+ 2d8:	a019                	j	2de <memcmp+0x30>
+      return *p1 - *p2;
+ 2da:	40e7853b          	subw	a0,a5,a4
+}
+ 2de:	6422                	ld	s0,8(sp)
+ 2e0:	0141                	addi	sp,sp,16
+ 2e2:	8082                	ret
+  return 0;
+ 2e4:	4501                	li	a0,0
+ 2e6:	bfe5                	j	2de <memcmp+0x30>
+
+00000000000002e8 <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+ 2e8:	1141                	addi	sp,sp,-16
+ 2ea:	e406                	sd	ra,8(sp)
+ 2ec:	e022                	sd	s0,0(sp)
+ 2ee:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+ 2f0:	00000097          	auipc	ra,0x0
+ 2f4:	f66080e7          	jalr	-154(ra) # 256 <memmove>
+}
+ 2f8:	60a2                	ld	ra,8(sp)
+ 2fa:	6402                	ld	s0,0(sp)
+ 2fc:	0141                	addi	sp,sp,16
+ 2fe:	8082                	ret
+
+0000000000000300 <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ 300:	4885                	li	a7,1
+ ecall
+ 302:	00000073          	ecall
+ ret
+ 306:	8082                	ret
+
+0000000000000308 <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+ 308:	4889                	li	a7,2
+ ecall
+ 30a:	00000073          	ecall
+ ret
+ 30e:	8082                	ret
+
+0000000000000310 <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+ 310:	488d                	li	a7,3
+ ecall
+ 312:	00000073          	ecall
+ ret
+ 316:	8082                	ret
+
+0000000000000318 <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ 318:	4891                	li	a7,4
+ ecall
+ 31a:	00000073          	ecall
+ ret
+ 31e:	8082                	ret
+
+0000000000000320 <read>:
+.global read
+read:
+ li a7, SYS_read
+ 320:	4895                	li	a7,5
+ ecall
+ 322:	00000073          	ecall
+ ret
+ 326:	8082                	ret
+
+0000000000000328 <write>:
+.global write
+write:
+ li a7, SYS_write
+ 328:	48c1                	li	a7,16
+ ecall
+ 32a:	00000073          	ecall
+ ret
+ 32e:	8082                	ret
+
+0000000000000330 <close>:
+.global close
+close:
+ li a7, SYS_close
+ 330:	48d5                	li	a7,21
+ ecall
+ 332:	00000073          	ecall
+ ret
+ 336:	8082                	ret
+
+0000000000000338 <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+ 338:	4899                	li	a7,6
+ ecall
+ 33a:	00000073          	ecall
+ ret
+ 33e:	8082                	ret
+
+0000000000000340 <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+ 340:	489d                	li	a7,7
+ ecall
+ 342:	00000073          	ecall
+ ret
+ 346:	8082                	ret
+
+0000000000000348 <open>:
+.global open
+open:
+ li a7, SYS_open
+ 348:	48bd                	li	a7,15
+ ecall
+ 34a:	00000073          	ecall
+ ret
+ 34e:	8082                	ret
+
+0000000000000350 <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ 350:	48c5                	li	a7,17
+ ecall
+ 352:	00000073          	ecall
+ ret
+ 356:	8082                	ret
+
+0000000000000358 <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ 358:	48c9                	li	a7,18
+ ecall
+ 35a:	00000073          	ecall
+ ret
+ 35e:	8082                	ret
+
+0000000000000360 <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ 360:	48a1                	li	a7,8
+ ecall
+ 362:	00000073          	ecall
+ ret
+ 366:	8082                	ret
+
+0000000000000368 <link>:
+.global link
+link:
+ li a7, SYS_link
+ 368:	48cd                	li	a7,19
+ ecall
+ 36a:	00000073          	ecall
+ ret
+ 36e:	8082                	ret
+
+0000000000000370 <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ 370:	48d1                	li	a7,20
+ ecall
+ 372:	00000073          	ecall
+ ret
+ 376:	8082                	ret
+
+0000000000000378 <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ 378:	48a5                	li	a7,9
+ ecall
+ 37a:	00000073          	ecall
+ ret
+ 37e:	8082                	ret
+
+0000000000000380 <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+ 380:	48a9                	li	a7,10
+ ecall
+ 382:	00000073          	ecall
+ ret
+ 386:	8082                	ret
+
+0000000000000388 <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ 388:	48ad                	li	a7,11
+ ecall
+ 38a:	00000073          	ecall
+ ret
+ 38e:	8082                	ret
+
+0000000000000390 <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ 390:	48b1                	li	a7,12
+ ecall
+ 392:	00000073          	ecall
+ ret
+ 396:	8082                	ret
+
+0000000000000398 <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ 398:	48b5                	li	a7,13
+ ecall
+ 39a:	00000073          	ecall
+ ret
+ 39e:	8082                	ret
+
+00000000000003a0 <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ 3a0:	48b9                	li	a7,14
+ ecall
+ 3a2:	00000073          	ecall
+ ret
+ 3a6:	8082                	ret
+
+00000000000003a8 <setp>:
+.global setp
+setp:
+ li a7, SYS_setp
+ 3a8:	48d9                	li	a7,22
+ ecall
+ 3aa:	00000073          	ecall
+ ret
+ 3ae:	8082                	ret
+
+00000000000003b0 <semget>:
+.global semget
+semget:
+ li a7, SYS_semget
+ 3b0:	48dd                	li	a7,23
+ ecall
+ 3b2:	00000073          	ecall
+ ret
+ 3b6:	8082                	ret
+
+00000000000003b8 <semdown>:
+.global semdown
+semdown:
+ li a7, SYS_semdown
+ 3b8:	48e1                	li	a7,24
+ ecall
+ 3ba:	00000073          	ecall
+ ret
+ 3be:	8082                	ret
+
+00000000000003c0 <semup>:
+.global semup
+semup:
+ li a7, SYS_semup
+ 3c0:	48e5                	li	a7,25
+ ecall
+ 3c2:	00000073          	ecall
+ ret
+ 3c6:	8082                	ret
+
+00000000000003c8 <semclose>:
+.global semclose
+semclose:
+ li a7, SYS_semclose
+ 3c8:	48e9                	li	a7,26
+ ecall
+ 3ca:	00000073          	ecall
+ ret
+ 3ce:	8082                	ret
+
+00000000000003d0 <timeout>:
+.global timeout
+timeout:
+ li a7, SYS_timeout
+ 3d0:	48ed                	li	a7,27
+ ecall
+ 3d2:	00000073          	ecall
+ ret
+ 3d6:	8082                	ret
+
+00000000000003d8 <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+ 3d8:	1101                	addi	sp,sp,-32
+ 3da:	ec06                	sd	ra,24(sp)
+ 3dc:	e822                	sd	s0,16(sp)
+ 3de:	1000                	addi	s0,sp,32
+ 3e0:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+ 3e4:	4605                	li	a2,1
+ 3e6:	fef40593          	addi	a1,s0,-17
+ 3ea:	00000097          	auipc	ra,0x0
+ 3ee:	f3e080e7          	jalr	-194(ra) # 328 <write>
+}
+ 3f2:	60e2                	ld	ra,24(sp)
+ 3f4:	6442                	ld	s0,16(sp)
+ 3f6:	6105                	addi	sp,sp,32
+ 3f8:	8082                	ret
+
+00000000000003fa <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3fa:	7139                	addi	sp,sp,-64
+ 3fc:	fc06                	sd	ra,56(sp)
+ 3fe:	f822                	sd	s0,48(sp)
+ 400:	f426                	sd	s1,40(sp)
+ 402:	f04a                	sd	s2,32(sp)
+ 404:	ec4e                	sd	s3,24(sp)
+ 406:	0080                	addi	s0,sp,64
+ 408:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 40a:	c299                	beqz	a3,410 <printint+0x16>
+ 40c:	0805c963          	bltz	a1,49e <printint+0xa4>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 410:	2581                	sext.w	a1,a1
+  neg = 0;
+ 412:	4881                	li	a7,0
+ 414:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+ 418:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+ 41a:	2601                	sext.w	a2,a2
+ 41c:	00000517          	auipc	a0,0x0
+ 420:	4bc50513          	addi	a0,a0,1212 # 8d8 <digits>
+ 424:	883a                	mv	a6,a4
+ 426:	2705                	addiw	a4,a4,1
+ 428:	02c5f7bb          	remuw	a5,a1,a2
+ 42c:	1782                	slli	a5,a5,0x20
+ 42e:	9381                	srli	a5,a5,0x20
+ 430:	97aa                	add	a5,a5,a0
+ 432:	0007c783          	lbu	a5,0(a5)
+ 436:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+ 43a:	0005879b          	sext.w	a5,a1
+ 43e:	02c5d5bb          	divuw	a1,a1,a2
+ 442:	0685                	addi	a3,a3,1
+ 444:	fec7f0e3          	bgeu	a5,a2,424 <printint+0x2a>
+  if(neg)
+ 448:	00088c63          	beqz	a7,460 <printint+0x66>
+    buf[i++] = '-';
+ 44c:	fd070793          	addi	a5,a4,-48
+ 450:	00878733          	add	a4,a5,s0
+ 454:	02d00793          	li	a5,45
+ 458:	fef70823          	sb	a5,-16(a4)
+ 45c:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+ 460:	02e05863          	blez	a4,490 <printint+0x96>
+ 464:	fc040793          	addi	a5,s0,-64
+ 468:	00e78933          	add	s2,a5,a4
+ 46c:	fff78993          	addi	s3,a5,-1
+ 470:	99ba                	add	s3,s3,a4
+ 472:	377d                	addiw	a4,a4,-1
+ 474:	1702                	slli	a4,a4,0x20
+ 476:	9301                	srli	a4,a4,0x20
+ 478:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+ 47c:	fff94583          	lbu	a1,-1(s2)
+ 480:	8526                	mv	a0,s1
+ 482:	00000097          	auipc	ra,0x0
+ 486:	f56080e7          	jalr	-170(ra) # 3d8 <putc>
+  while(--i >= 0)
+ 48a:	197d                	addi	s2,s2,-1
+ 48c:	ff3918e3          	bne	s2,s3,47c <printint+0x82>
+}
+ 490:	70e2                	ld	ra,56(sp)
+ 492:	7442                	ld	s0,48(sp)
+ 494:	74a2                	ld	s1,40(sp)
+ 496:	7902                	ld	s2,32(sp)
+ 498:	69e2                	ld	s3,24(sp)
+ 49a:	6121                	addi	sp,sp,64
+ 49c:	8082                	ret
+    x = -xx;
+ 49e:	40b005bb          	negw	a1,a1
+    neg = 1;
+ 4a2:	4885                	li	a7,1
+    x = -xx;
+ 4a4:	bf85                	j	414 <printint+0x1a>
+
+00000000000004a6 <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+ 4a6:	7119                	addi	sp,sp,-128
+ 4a8:	fc86                	sd	ra,120(sp)
+ 4aa:	f8a2                	sd	s0,112(sp)
+ 4ac:	f4a6                	sd	s1,104(sp)
+ 4ae:	f0ca                	sd	s2,96(sp)
+ 4b0:	ecce                	sd	s3,88(sp)
+ 4b2:	e8d2                	sd	s4,80(sp)
+ 4b4:	e4d6                	sd	s5,72(sp)
+ 4b6:	e0da                	sd	s6,64(sp)
+ 4b8:	fc5e                	sd	s7,56(sp)
+ 4ba:	f862                	sd	s8,48(sp)
+ 4bc:	f466                	sd	s9,40(sp)
+ 4be:	f06a                	sd	s10,32(sp)
+ 4c0:	ec6e                	sd	s11,24(sp)
+ 4c2:	0100                	addi	s0,sp,128
+  char *s;
+  int c, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+ 4c4:	0005c903          	lbu	s2,0(a1)
+ 4c8:	18090f63          	beqz	s2,666 <vprintf+0x1c0>
+ 4cc:	8aaa                	mv	s5,a0
+ 4ce:	8b32                	mv	s6,a2
+ 4d0:	00158493          	addi	s1,a1,1
+  state = 0;
+ 4d4:	4981                	li	s3,0
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 4d6:	02500a13          	li	s4,37
+ 4da:	4c55                	li	s8,21
+ 4dc:	00000c97          	auipc	s9,0x0
+ 4e0:	3a4c8c93          	addi	s9,s9,932 # 880 <malloc+0x116>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c == 's'){
+        s = va_arg(ap, char*);
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 4e4:	02800d93          	li	s11,40
+  putc(fd, 'x');
+ 4e8:	4d41                	li	s10,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 4ea:	00000b97          	auipc	s7,0x0
+ 4ee:	3eeb8b93          	addi	s7,s7,1006 # 8d8 <digits>
+ 4f2:	a839                	j	510 <vprintf+0x6a>
+        putc(fd, c);
+ 4f4:	85ca                	mv	a1,s2
+ 4f6:	8556                	mv	a0,s5
+ 4f8:	00000097          	auipc	ra,0x0
+ 4fc:	ee0080e7          	jalr	-288(ra) # 3d8 <putc>
+ 500:	a019                	j	506 <vprintf+0x60>
+    } else if(state == '%'){
+ 502:	01498d63          	beq	s3,s4,51c <vprintf+0x76>
+  for(i = 0; fmt[i]; i++){
+ 506:	0485                	addi	s1,s1,1
+ 508:	fff4c903          	lbu	s2,-1(s1)
+ 50c:	14090d63          	beqz	s2,666 <vprintf+0x1c0>
+    if(state == 0){
+ 510:	fe0999e3          	bnez	s3,502 <vprintf+0x5c>
+      if(c == '%'){
+ 514:	ff4910e3          	bne	s2,s4,4f4 <vprintf+0x4e>
+        state = '%';
+ 518:	89d2                	mv	s3,s4
+ 51a:	b7f5                	j	506 <vprintf+0x60>
+      if(c == 'd'){
+ 51c:	11490c63          	beq	s2,s4,634 <vprintf+0x18e>
+ 520:	f9d9079b          	addiw	a5,s2,-99
+ 524:	0ff7f793          	zext.b	a5,a5
+ 528:	10fc6e63          	bltu	s8,a5,644 <vprintf+0x19e>
+ 52c:	f9d9079b          	addiw	a5,s2,-99
+ 530:	0ff7f713          	zext.b	a4,a5
+ 534:	10ec6863          	bltu	s8,a4,644 <vprintf+0x19e>
+ 538:	00271793          	slli	a5,a4,0x2
+ 53c:	97e6                	add	a5,a5,s9
+ 53e:	439c                	lw	a5,0(a5)
+ 540:	97e6                	add	a5,a5,s9
+ 542:	8782                	jr	a5
+        printint(fd, va_arg(ap, int), 10, 1);
+ 544:	008b0913          	addi	s2,s6,8
+ 548:	4685                	li	a3,1
+ 54a:	4629                	li	a2,10
+ 54c:	000b2583          	lw	a1,0(s6)
+ 550:	8556                	mv	a0,s5
+ 552:	00000097          	auipc	ra,0x0
+ 556:	ea8080e7          	jalr	-344(ra) # 3fa <printint>
+ 55a:	8b4a                	mv	s6,s2
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 55c:	4981                	li	s3,0
+ 55e:	b765                	j	506 <vprintf+0x60>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 560:	008b0913          	addi	s2,s6,8
+ 564:	4681                	li	a3,0
+ 566:	4629                	li	a2,10
+ 568:	000b2583          	lw	a1,0(s6)
+ 56c:	8556                	mv	a0,s5
+ 56e:	00000097          	auipc	ra,0x0
+ 572:	e8c080e7          	jalr	-372(ra) # 3fa <printint>
+ 576:	8b4a                	mv	s6,s2
+      state = 0;
+ 578:	4981                	li	s3,0
+ 57a:	b771                	j	506 <vprintf+0x60>
+        printint(fd, va_arg(ap, int), 16, 0);
+ 57c:	008b0913          	addi	s2,s6,8
+ 580:	4681                	li	a3,0
+ 582:	866a                	mv	a2,s10
+ 584:	000b2583          	lw	a1,0(s6)
+ 588:	8556                	mv	a0,s5
+ 58a:	00000097          	auipc	ra,0x0
+ 58e:	e70080e7          	jalr	-400(ra) # 3fa <printint>
+ 592:	8b4a                	mv	s6,s2
+      state = 0;
+ 594:	4981                	li	s3,0
+ 596:	bf85                	j	506 <vprintf+0x60>
+        printptr(fd, va_arg(ap, uint64));
+ 598:	008b0793          	addi	a5,s6,8
+ 59c:	f8f43423          	sd	a5,-120(s0)
+ 5a0:	000b3983          	ld	s3,0(s6)
+  putc(fd, '0');
+ 5a4:	03000593          	li	a1,48
+ 5a8:	8556                	mv	a0,s5
+ 5aa:	00000097          	auipc	ra,0x0
+ 5ae:	e2e080e7          	jalr	-466(ra) # 3d8 <putc>
+  putc(fd, 'x');
+ 5b2:	07800593          	li	a1,120
+ 5b6:	8556                	mv	a0,s5
+ 5b8:	00000097          	auipc	ra,0x0
+ 5bc:	e20080e7          	jalr	-480(ra) # 3d8 <putc>
+ 5c0:	896a                	mv	s2,s10
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 5c2:	03c9d793          	srli	a5,s3,0x3c
+ 5c6:	97de                	add	a5,a5,s7
+ 5c8:	0007c583          	lbu	a1,0(a5)
+ 5cc:	8556                	mv	a0,s5
+ 5ce:	00000097          	auipc	ra,0x0
+ 5d2:	e0a080e7          	jalr	-502(ra) # 3d8 <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+ 5d6:	0992                	slli	s3,s3,0x4
+ 5d8:	397d                	addiw	s2,s2,-1
+ 5da:	fe0914e3          	bnez	s2,5c2 <vprintf+0x11c>
+        printptr(fd, va_arg(ap, uint64));
+ 5de:	f8843b03          	ld	s6,-120(s0)
+      state = 0;
+ 5e2:	4981                	li	s3,0
+ 5e4:	b70d                	j	506 <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 5e6:	008b0913          	addi	s2,s6,8
+ 5ea:	000b3983          	ld	s3,0(s6)
+        if(s == 0)
+ 5ee:	02098163          	beqz	s3,610 <vprintf+0x16a>
+        while(*s != 0){
+ 5f2:	0009c583          	lbu	a1,0(s3)
+ 5f6:	c5ad                	beqz	a1,660 <vprintf+0x1ba>
+          putc(fd, *s);
+ 5f8:	8556                	mv	a0,s5
+ 5fa:	00000097          	auipc	ra,0x0
+ 5fe:	dde080e7          	jalr	-546(ra) # 3d8 <putc>
+          s++;
+ 602:	0985                	addi	s3,s3,1
+        while(*s != 0){
+ 604:	0009c583          	lbu	a1,0(s3)
+ 608:	f9e5                	bnez	a1,5f8 <vprintf+0x152>
+        s = va_arg(ap, char*);
+ 60a:	8b4a                	mv	s6,s2
+      state = 0;
+ 60c:	4981                	li	s3,0
+ 60e:	bde5                	j	506 <vprintf+0x60>
+          s = "(null)";
+ 610:	00000997          	auipc	s3,0x0
+ 614:	26898993          	addi	s3,s3,616 # 878 <malloc+0x10e>
+        while(*s != 0){
+ 618:	85ee                	mv	a1,s11
+ 61a:	bff9                	j	5f8 <vprintf+0x152>
+        putc(fd, va_arg(ap, uint));
+ 61c:	008b0913          	addi	s2,s6,8
+ 620:	000b4583          	lbu	a1,0(s6)
+ 624:	8556                	mv	a0,s5
+ 626:	00000097          	auipc	ra,0x0
+ 62a:	db2080e7          	jalr	-590(ra) # 3d8 <putc>
+ 62e:	8b4a                	mv	s6,s2
+      state = 0;
+ 630:	4981                	li	s3,0
+ 632:	bdd1                	j	506 <vprintf+0x60>
+        putc(fd, c);
+ 634:	85d2                	mv	a1,s4
+ 636:	8556                	mv	a0,s5
+ 638:	00000097          	auipc	ra,0x0
+ 63c:	da0080e7          	jalr	-608(ra) # 3d8 <putc>
+      state = 0;
+ 640:	4981                	li	s3,0
+ 642:	b5d1                	j	506 <vprintf+0x60>
+        putc(fd, '%');
+ 644:	85d2                	mv	a1,s4
+ 646:	8556                	mv	a0,s5
+ 648:	00000097          	auipc	ra,0x0
+ 64c:	d90080e7          	jalr	-624(ra) # 3d8 <putc>
+        putc(fd, c);
+ 650:	85ca                	mv	a1,s2
+ 652:	8556                	mv	a0,s5
+ 654:	00000097          	auipc	ra,0x0
+ 658:	d84080e7          	jalr	-636(ra) # 3d8 <putc>
+      state = 0;
+ 65c:	4981                	li	s3,0
+ 65e:	b565                	j	506 <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 660:	8b4a                	mv	s6,s2
+      state = 0;
+ 662:	4981                	li	s3,0
+ 664:	b54d                	j	506 <vprintf+0x60>
+    }
+  }
+}
+ 666:	70e6                	ld	ra,120(sp)
+ 668:	7446                	ld	s0,112(sp)
+ 66a:	74a6                	ld	s1,104(sp)
+ 66c:	7906                	ld	s2,96(sp)
+ 66e:	69e6                	ld	s3,88(sp)
+ 670:	6a46                	ld	s4,80(sp)
+ 672:	6aa6                	ld	s5,72(sp)
+ 674:	6b06                	ld	s6,64(sp)
+ 676:	7be2                	ld	s7,56(sp)
+ 678:	7c42                	ld	s8,48(sp)
+ 67a:	7ca2                	ld	s9,40(sp)
+ 67c:	7d02                	ld	s10,32(sp)
+ 67e:	6de2                	ld	s11,24(sp)
+ 680:	6109                	addi	sp,sp,128
+ 682:	8082                	ret
+
+0000000000000684 <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+ 684:	715d                	addi	sp,sp,-80
+ 686:	ec06                	sd	ra,24(sp)
+ 688:	e822                	sd	s0,16(sp)
+ 68a:	1000                	addi	s0,sp,32
+ 68c:	e010                	sd	a2,0(s0)
+ 68e:	e414                	sd	a3,8(s0)
+ 690:	e818                	sd	a4,16(s0)
+ 692:	ec1c                	sd	a5,24(s0)
+ 694:	03043023          	sd	a6,32(s0)
+ 698:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 69c:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+ 6a0:	8622                	mv	a2,s0
+ 6a2:	00000097          	auipc	ra,0x0
+ 6a6:	e04080e7          	jalr	-508(ra) # 4a6 <vprintf>
+}
+ 6aa:	60e2                	ld	ra,24(sp)
+ 6ac:	6442                	ld	s0,16(sp)
+ 6ae:	6161                	addi	sp,sp,80
+ 6b0:	8082                	ret
+
+00000000000006b2 <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+ 6b2:	711d                	addi	sp,sp,-96
+ 6b4:	ec06                	sd	ra,24(sp)
+ 6b6:	e822                	sd	s0,16(sp)
+ 6b8:	1000                	addi	s0,sp,32
+ 6ba:	e40c                	sd	a1,8(s0)
+ 6bc:	e810                	sd	a2,16(s0)
+ 6be:	ec14                	sd	a3,24(s0)
+ 6c0:	f018                	sd	a4,32(s0)
+ 6c2:	f41c                	sd	a5,40(s0)
+ 6c4:	03043823          	sd	a6,48(s0)
+ 6c8:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 6cc:	00840613          	addi	a2,s0,8
+ 6d0:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+ 6d4:	85aa                	mv	a1,a0
+ 6d6:	4505                	li	a0,1
+ 6d8:	00000097          	auipc	ra,0x0
+ 6dc:	dce080e7          	jalr	-562(ra) # 4a6 <vprintf>
+}
+ 6e0:	60e2                	ld	ra,24(sp)
+ 6e2:	6442                	ld	s0,16(sp)
+ 6e4:	6125                	addi	sp,sp,96
+ 6e6:	8082                	ret
+
+00000000000006e8 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6e8:	1141                	addi	sp,sp,-16
+ 6ea:	e422                	sd	s0,8(sp)
+ 6ec:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 6ee:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6f2:	00000797          	auipc	a5,0x0
+ 6f6:	1fe7b783          	ld	a5,510(a5) # 8f0 <freep>
+ 6fa:	a02d                	j	724 <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 6fc:	4618                	lw	a4,8(a2)
+ 6fe:	9f2d                	addw	a4,a4,a1
+ 700:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 704:	6398                	ld	a4,0(a5)
+ 706:	6310                	ld	a2,0(a4)
+ 708:	a83d                	j	746 <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 70a:	ff852703          	lw	a4,-8(a0)
+ 70e:	9f31                	addw	a4,a4,a2
+ 710:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+ 712:	ff053683          	ld	a3,-16(a0)
+ 716:	a091                	j	75a <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 718:	6398                	ld	a4,0(a5)
+ 71a:	00e7e463          	bltu	a5,a4,722 <free+0x3a>
+ 71e:	00e6ea63          	bltu	a3,a4,732 <free+0x4a>
+{
+ 722:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 724:	fed7fae3          	bgeu	a5,a3,718 <free+0x30>
+ 728:	6398                	ld	a4,0(a5)
+ 72a:	00e6e463          	bltu	a3,a4,732 <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 72e:	fee7eae3          	bltu	a5,a4,722 <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+ 732:	ff852583          	lw	a1,-8(a0)
+ 736:	6390                	ld	a2,0(a5)
+ 738:	02059813          	slli	a6,a1,0x20
+ 73c:	01c85713          	srli	a4,a6,0x1c
+ 740:	9736                	add	a4,a4,a3
+ 742:	fae60de3          	beq	a2,a4,6fc <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 746:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+ 74a:	4790                	lw	a2,8(a5)
+ 74c:	02061593          	slli	a1,a2,0x20
+ 750:	01c5d713          	srli	a4,a1,0x1c
+ 754:	973e                	add	a4,a4,a5
+ 756:	fae68ae3          	beq	a3,a4,70a <free+0x22>
+    p->s.ptr = bp->s.ptr;
+ 75a:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 75c:	00000717          	auipc	a4,0x0
+ 760:	18f73a23          	sd	a5,404(a4) # 8f0 <freep>
+}
+ 764:	6422                	ld	s0,8(sp)
+ 766:	0141                	addi	sp,sp,16
+ 768:	8082                	ret
+
+000000000000076a <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 76a:	7139                	addi	sp,sp,-64
+ 76c:	fc06                	sd	ra,56(sp)
+ 76e:	f822                	sd	s0,48(sp)
+ 770:	f426                	sd	s1,40(sp)
+ 772:	f04a                	sd	s2,32(sp)
+ 774:	ec4e                	sd	s3,24(sp)
+ 776:	e852                	sd	s4,16(sp)
+ 778:	e456                	sd	s5,8(sp)
+ 77a:	e05a                	sd	s6,0(sp)
+ 77c:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 77e:	02051493          	slli	s1,a0,0x20
+ 782:	9081                	srli	s1,s1,0x20
+ 784:	04bd                	addi	s1,s1,15
+ 786:	8091                	srli	s1,s1,0x4
+ 788:	0014899b          	addiw	s3,s1,1
+ 78c:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+ 78e:	00000517          	auipc	a0,0x0
+ 792:	16253503          	ld	a0,354(a0) # 8f0 <freep>
+ 796:	c515                	beqz	a0,7c2 <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 798:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 79a:	4798                	lw	a4,8(a5)
+ 79c:	02977f63          	bgeu	a4,s1,7da <malloc+0x70>
+ 7a0:	8a4e                	mv	s4,s3
+ 7a2:	0009871b          	sext.w	a4,s3
+ 7a6:	6685                	lui	a3,0x1
+ 7a8:	00d77363          	bgeu	a4,a3,7ae <malloc+0x44>
+ 7ac:	6a05                	lui	s4,0x1
+ 7ae:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+ 7b2:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 7b6:	00000917          	auipc	s2,0x0
+ 7ba:	13a90913          	addi	s2,s2,314 # 8f0 <freep>
+  if(p == (char*)-1)
+ 7be:	5afd                	li	s5,-1
+ 7c0:	a895                	j	834 <malloc+0xca>
+    base.s.ptr = freep = prevp = &base;
+ 7c2:	00000797          	auipc	a5,0x0
+ 7c6:	13678793          	addi	a5,a5,310 # 8f8 <base>
+ 7ca:	00000717          	auipc	a4,0x0
+ 7ce:	12f73323          	sd	a5,294(a4) # 8f0 <freep>
+ 7d2:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+ 7d4:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+ 7d8:	b7e1                	j	7a0 <malloc+0x36>
+      if(p->s.size == nunits)
+ 7da:	02e48c63          	beq	s1,a4,812 <malloc+0xa8>
+        p->s.size -= nunits;
+ 7de:	4137073b          	subw	a4,a4,s3
+ 7e2:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+ 7e4:	02071693          	slli	a3,a4,0x20
+ 7e8:	01c6d713          	srli	a4,a3,0x1c
+ 7ec:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+ 7ee:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+ 7f2:	00000717          	auipc	a4,0x0
+ 7f6:	0ea73f23          	sd	a0,254(a4) # 8f0 <freep>
+      return (void*)(p + 1);
+ 7fa:	01078513          	addi	a0,a5,16
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ 7fe:	70e2                	ld	ra,56(sp)
+ 800:	7442                	ld	s0,48(sp)
+ 802:	74a2                	ld	s1,40(sp)
+ 804:	7902                	ld	s2,32(sp)
+ 806:	69e2                	ld	s3,24(sp)
+ 808:	6a42                	ld	s4,16(sp)
+ 80a:	6aa2                	ld	s5,8(sp)
+ 80c:	6b02                	ld	s6,0(sp)
+ 80e:	6121                	addi	sp,sp,64
+ 810:	8082                	ret
+        prevp->s.ptr = p->s.ptr;
+ 812:	6398                	ld	a4,0(a5)
+ 814:	e118                	sd	a4,0(a0)
+ 816:	bff1                	j	7f2 <malloc+0x88>
+  hp->s.size = nu;
+ 818:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+ 81c:	0541                	addi	a0,a0,16
+ 81e:	00000097          	auipc	ra,0x0
+ 822:	eca080e7          	jalr	-310(ra) # 6e8 <free>
+  return freep;
+ 826:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+ 82a:	d971                	beqz	a0,7fe <malloc+0x94>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 82c:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 82e:	4798                	lw	a4,8(a5)
+ 830:	fa9775e3          	bgeu	a4,s1,7da <malloc+0x70>
+    if(p == freep)
+ 834:	00093703          	ld	a4,0(s2)
+ 838:	853e                	mv	a0,a5
+ 83a:	fef719e3          	bne	a4,a5,82c <malloc+0xc2>
+  p = sbrk(nu * sizeof(Header));
+ 83e:	8552                	mv	a0,s4
+ 840:	00000097          	auipc	ra,0x0
+ 844:	b50080e7          	jalr	-1200(ra) # 390 <sbrk>
+  if(p == (char*)-1)
+ 848:	fd5518e3          	bne	a0,s5,818 <malloc+0xae>
+        return 0;
+ 84c:	4501                	li	a0,0
+ 84e:	bf45                	j	7fe <malloc+0x94>
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/cons.c os-workshop/user/cons.c
--- xv6-riscv/user/cons.c	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/cons.c	2022-05-28 22:04:25.000000000 -0300
@@ -0,0 +1,25 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fcntl.h"
+
+#define N  1000
+
+int main(void) {
+  int fd = open("buffer", O_RDONLY);
+  int sid = semget(23, 1);
+  for (;;) {
+    char buffer[7];
+    if (semdown(sid) == 0) {
+      printf("CONS IN \n");
+      timeout(10000);
+      read(fd, &buffer, sizeof buffer);
+      printf("CONS OUT \n");
+      timeout(10000);
+      semup(sid);
+    }
+  }
+  semclose(sid);
+  close(fd);
+  exit(0);
+}
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/cons.d os-workshop/user/cons.d
--- xv6-riscv/user/cons.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/cons.d	2022-05-28 22:34:38.000000000 -0300
@@ -0,0 +1,2 @@
+user/cons.o: user/cons.c kernel/types.h kernel/stat.h user/user.h \
+ kernel/fcntl.h
Binary files xv6-riscv/user/cons.o and os-workshop/user/cons.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/cons.sym os-workshop/user/cons.sym
--- xv6-riscv/user/cons.sym	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/cons.sym	2022-05-28 22:34:38.000000000 -0300
@@ -0,0 +1,76 @@
+0000000000000000 .text
+0000000000000850 .rodata
+00000000000008f0 .sbss
+00000000000008f8 .bss
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_aranges
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_line
+0000000000000000 .debug_frame
+0000000000000000 .debug_str
+0000000000000000 .debug_line_str
+0000000000000000 .debug_loclists
+0000000000000000 .debug_rnglists
+0000000000000000 cons.c
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+00000000000003d8 putc
+00000000000003fa printint
+00000000000008d8 digits
+0000000000000000 umalloc.c
+00000000000008f0 freep
+00000000000008f8 base
+000000000000009c strcpy
+00000000000006b2 printf
+00000000000010e9 __global_pointer$
+0000000000000256 memmove
+0000000000000350 mknod
+00000000000003b8 semdown
+0000000000000154 gets
+00000000000008e9 __SDATA_BEGIN__
+00000000000003b0 semget
+0000000000000388 getpid
+00000000000002e8 memcpy
+000000000000076a malloc
+00000000000003c8 semclose
+0000000000000398 sleep
+0000000000000318 pipe
+0000000000000328 write
+0000000000000360 fstat
+0000000000000684 fprintf
+0000000000000338 kill
+00000000000004a6 vprintf
+0000000000000378 chdir
+0000000000000340 exec
+0000000000000310 wait
+0000000000000320 read
+0000000000000358 unlink
+00000000000002ae memcmp
+0000000000000300 fork
+0000000000000908 __BSS_END__
+0000000000000390 sbrk
+00000000000003a0 uptime
+00000000000008e9 __bss_start
+000000000000010e memset
+0000000000000000 main
+00000000000003d0 timeout
+00000000000000b8 strcmp
+0000000000000380 dup
+00000000000008e9 __DATA_BEGIN__
+00000000000001c8 stat
+00000000000008e9 _edata
+00000000000003a8 setp
+0000000000000908 _end
+0000000000000368 link
+0000000000000308 exit
+000000000000020e atoi
+00000000000000e4 strlen
+0000000000000348 open
+00000000000003c0 semup
+0000000000000130 strchr
+0000000000000370 mkdir
+0000000000000330 close
+00000000000006e8 free
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/echo.asm os-workshop/user/echo.asm
--- xv6-riscv/user/echo.asm	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/echo.asm	2022-05-28 22:34:32.000000000 -0300
@@ -0,0 +1,1393 @@
+
+user/_echo:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <main>:
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	7179                	addi	sp,sp,-48
+   2:	f406                	sd	ra,40(sp)
+   4:	f022                	sd	s0,32(sp)
+   6:	ec26                	sd	s1,24(sp)
+   8:	e84a                	sd	s2,16(sp)
+   a:	e44e                	sd	s3,8(sp)
+   c:	e052                	sd	s4,0(sp)
+   e:	1800                	addi	s0,sp,48
+  int i;
+
+  for(i = 1; i < argc; i++){
+  10:	4785                	li	a5,1
+  12:	06a7d463          	bge	a5,a0,7a <main+0x7a>
+  16:	00858493          	addi	s1,a1,8
+  1a:	ffe5099b          	addiw	s3,a0,-2
+  1e:	02099793          	slli	a5,s3,0x20
+  22:	01d7d993          	srli	s3,a5,0x1d
+  26:	05c1                	addi	a1,a1,16
+  28:	99ae                	add	s3,s3,a1
+    write(1, argv[i], strlen(argv[i]));
+    if(i + 1 < argc){
+      write(1, " ", 1);
+  2a:	00001a17          	auipc	s4,0x1
+  2e:	80ea0a13          	addi	s4,s4,-2034 # 838 <malloc+0xe6>
+    write(1, argv[i], strlen(argv[i]));
+  32:	0004b903          	ld	s2,0(s1)
+  36:	854a                	mv	a0,s2
+  38:	00000097          	auipc	ra,0x0
+  3c:	094080e7          	jalr	148(ra) # cc <strlen>
+  40:	0005061b          	sext.w	a2,a0
+  44:	85ca                	mv	a1,s2
+  46:	4505                	li	a0,1
+  48:	00000097          	auipc	ra,0x0
+  4c:	2c8080e7          	jalr	712(ra) # 310 <write>
+    if(i + 1 < argc){
+  50:	04a1                	addi	s1,s1,8
+  52:	01348a63          	beq	s1,s3,66 <main+0x66>
+      write(1, " ", 1);
+  56:	4605                	li	a2,1
+  58:	85d2                	mv	a1,s4
+  5a:	4505                	li	a0,1
+  5c:	00000097          	auipc	ra,0x0
+  60:	2b4080e7          	jalr	692(ra) # 310 <write>
+  for(i = 1; i < argc; i++){
+  64:	b7f9                	j	32 <main+0x32>
+    } else {
+      write(1, "\n", 1);
+  66:	4605                	li	a2,1
+  68:	00000597          	auipc	a1,0x0
+  6c:	7d858593          	addi	a1,a1,2008 # 840 <malloc+0xee>
+  70:	4505                	li	a0,1
+  72:	00000097          	auipc	ra,0x0
+  76:	29e080e7          	jalr	670(ra) # 310 <write>
+    }
+  }
+  exit(0);
+  7a:	4501                	li	a0,0
+  7c:	00000097          	auipc	ra,0x0
+  80:	274080e7          	jalr	628(ra) # 2f0 <exit>
+
+0000000000000084 <strcpy>:
+#include "kernel/fcntl.h"
+#include "user/user.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  84:	1141                	addi	sp,sp,-16
+  86:	e422                	sd	s0,8(sp)
+  88:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  8a:	87aa                	mv	a5,a0
+  8c:	0585                	addi	a1,a1,1
+  8e:	0785                	addi	a5,a5,1
+  90:	fff5c703          	lbu	a4,-1(a1)
+  94:	fee78fa3          	sb	a4,-1(a5)
+  98:	fb75                	bnez	a4,8c <strcpy+0x8>
+    ;
+  return os;
+}
+  9a:	6422                	ld	s0,8(sp)
+  9c:	0141                	addi	sp,sp,16
+  9e:	8082                	ret
+
+00000000000000a0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  a0:	1141                	addi	sp,sp,-16
+  a2:	e422                	sd	s0,8(sp)
+  a4:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+  a6:	00054783          	lbu	a5,0(a0)
+  aa:	cb91                	beqz	a5,be <strcmp+0x1e>
+  ac:	0005c703          	lbu	a4,0(a1)
+  b0:	00f71763          	bne	a4,a5,be <strcmp+0x1e>
+    p++, q++;
+  b4:	0505                	addi	a0,a0,1
+  b6:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+  b8:	00054783          	lbu	a5,0(a0)
+  bc:	fbe5                	bnez	a5,ac <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+  be:	0005c503          	lbu	a0,0(a1)
+}
+  c2:	40a7853b          	subw	a0,a5,a0
+  c6:	6422                	ld	s0,8(sp)
+  c8:	0141                	addi	sp,sp,16
+  ca:	8082                	ret
+
+00000000000000cc <strlen>:
+
+uint
+strlen(const char *s)
+{
+  cc:	1141                	addi	sp,sp,-16
+  ce:	e422                	sd	s0,8(sp)
+  d0:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+  d2:	00054783          	lbu	a5,0(a0)
+  d6:	cf91                	beqz	a5,f2 <strlen+0x26>
+  d8:	0505                	addi	a0,a0,1
+  da:	87aa                	mv	a5,a0
+  dc:	4685                	li	a3,1
+  de:	9e89                	subw	a3,a3,a0
+  e0:	00f6853b          	addw	a0,a3,a5
+  e4:	0785                	addi	a5,a5,1
+  e6:	fff7c703          	lbu	a4,-1(a5)
+  ea:	fb7d                	bnez	a4,e0 <strlen+0x14>
+    ;
+  return n;
+}
+  ec:	6422                	ld	s0,8(sp)
+  ee:	0141                	addi	sp,sp,16
+  f0:	8082                	ret
+  for(n = 0; s[n]; n++)
+  f2:	4501                	li	a0,0
+  f4:	bfe5                	j	ec <strlen+0x20>
+
+00000000000000f6 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  f6:	1141                	addi	sp,sp,-16
+  f8:	e422                	sd	s0,8(sp)
+  fa:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+  fc:	ca19                	beqz	a2,112 <memset+0x1c>
+  fe:	87aa                	mv	a5,a0
+ 100:	1602                	slli	a2,a2,0x20
+ 102:	9201                	srli	a2,a2,0x20
+ 104:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+ 108:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+ 10c:	0785                	addi	a5,a5,1
+ 10e:	fee79de3          	bne	a5,a4,108 <memset+0x12>
+  }
+  return dst;
+}
+ 112:	6422                	ld	s0,8(sp)
+ 114:	0141                	addi	sp,sp,16
+ 116:	8082                	ret
+
+0000000000000118 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 118:	1141                	addi	sp,sp,-16
+ 11a:	e422                	sd	s0,8(sp)
+ 11c:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+ 11e:	00054783          	lbu	a5,0(a0)
+ 122:	cb99                	beqz	a5,138 <strchr+0x20>
+    if(*s == c)
+ 124:	00f58763          	beq	a1,a5,132 <strchr+0x1a>
+  for(; *s; s++)
+ 128:	0505                	addi	a0,a0,1
+ 12a:	00054783          	lbu	a5,0(a0)
+ 12e:	fbfd                	bnez	a5,124 <strchr+0xc>
+      return (char*)s;
+  return 0;
+ 130:	4501                	li	a0,0
+}
+ 132:	6422                	ld	s0,8(sp)
+ 134:	0141                	addi	sp,sp,16
+ 136:	8082                	ret
+  return 0;
+ 138:	4501                	li	a0,0
+ 13a:	bfe5                	j	132 <strchr+0x1a>
+
+000000000000013c <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 13c:	711d                	addi	sp,sp,-96
+ 13e:	ec86                	sd	ra,88(sp)
+ 140:	e8a2                	sd	s0,80(sp)
+ 142:	e4a6                	sd	s1,72(sp)
+ 144:	e0ca                	sd	s2,64(sp)
+ 146:	fc4e                	sd	s3,56(sp)
+ 148:	f852                	sd	s4,48(sp)
+ 14a:	f456                	sd	s5,40(sp)
+ 14c:	f05a                	sd	s6,32(sp)
+ 14e:	ec5e                	sd	s7,24(sp)
+ 150:	1080                	addi	s0,sp,96
+ 152:	8baa                	mv	s7,a0
+ 154:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 156:	892a                	mv	s2,a0
+ 158:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+ 15a:	4aa9                	li	s5,10
+ 15c:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+ 15e:	89a6                	mv	s3,s1
+ 160:	2485                	addiw	s1,s1,1
+ 162:	0344d863          	bge	s1,s4,192 <gets+0x56>
+    cc = read(0, &c, 1);
+ 166:	4605                	li	a2,1
+ 168:	faf40593          	addi	a1,s0,-81
+ 16c:	4501                	li	a0,0
+ 16e:	00000097          	auipc	ra,0x0
+ 172:	19a080e7          	jalr	410(ra) # 308 <read>
+    if(cc < 1)
+ 176:	00a05e63          	blez	a0,192 <gets+0x56>
+    buf[i++] = c;
+ 17a:	faf44783          	lbu	a5,-81(s0)
+ 17e:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+ 182:	01578763          	beq	a5,s5,190 <gets+0x54>
+ 186:	0905                	addi	s2,s2,1
+ 188:	fd679be3          	bne	a5,s6,15e <gets+0x22>
+  for(i=0; i+1 < max; ){
+ 18c:	89a6                	mv	s3,s1
+ 18e:	a011                	j	192 <gets+0x56>
+ 190:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+ 192:	99de                	add	s3,s3,s7
+ 194:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+ 198:	855e                	mv	a0,s7
+ 19a:	60e6                	ld	ra,88(sp)
+ 19c:	6446                	ld	s0,80(sp)
+ 19e:	64a6                	ld	s1,72(sp)
+ 1a0:	6906                	ld	s2,64(sp)
+ 1a2:	79e2                	ld	s3,56(sp)
+ 1a4:	7a42                	ld	s4,48(sp)
+ 1a6:	7aa2                	ld	s5,40(sp)
+ 1a8:	7b02                	ld	s6,32(sp)
+ 1aa:	6be2                	ld	s7,24(sp)
+ 1ac:	6125                	addi	sp,sp,96
+ 1ae:	8082                	ret
+
+00000000000001b0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1b0:	1101                	addi	sp,sp,-32
+ 1b2:	ec06                	sd	ra,24(sp)
+ 1b4:	e822                	sd	s0,16(sp)
+ 1b6:	e426                	sd	s1,8(sp)
+ 1b8:	e04a                	sd	s2,0(sp)
+ 1ba:	1000                	addi	s0,sp,32
+ 1bc:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1be:	4581                	li	a1,0
+ 1c0:	00000097          	auipc	ra,0x0
+ 1c4:	170080e7          	jalr	368(ra) # 330 <open>
+  if(fd < 0)
+ 1c8:	02054563          	bltz	a0,1f2 <stat+0x42>
+ 1cc:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+ 1ce:	85ca                	mv	a1,s2
+ 1d0:	00000097          	auipc	ra,0x0
+ 1d4:	178080e7          	jalr	376(ra) # 348 <fstat>
+ 1d8:	892a                	mv	s2,a0
+  close(fd);
+ 1da:	8526                	mv	a0,s1
+ 1dc:	00000097          	auipc	ra,0x0
+ 1e0:	13c080e7          	jalr	316(ra) # 318 <close>
+  return r;
+}
+ 1e4:	854a                	mv	a0,s2
+ 1e6:	60e2                	ld	ra,24(sp)
+ 1e8:	6442                	ld	s0,16(sp)
+ 1ea:	64a2                	ld	s1,8(sp)
+ 1ec:	6902                	ld	s2,0(sp)
+ 1ee:	6105                	addi	sp,sp,32
+ 1f0:	8082                	ret
+    return -1;
+ 1f2:	597d                	li	s2,-1
+ 1f4:	bfc5                	j	1e4 <stat+0x34>
+
+00000000000001f6 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 1f6:	1141                	addi	sp,sp,-16
+ 1f8:	e422                	sd	s0,8(sp)
+ 1fa:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 1fc:	00054683          	lbu	a3,0(a0)
+ 200:	fd06879b          	addiw	a5,a3,-48
+ 204:	0ff7f793          	zext.b	a5,a5
+ 208:	4625                	li	a2,9
+ 20a:	02f66863          	bltu	a2,a5,23a <atoi+0x44>
+ 20e:	872a                	mv	a4,a0
+  n = 0;
+ 210:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+ 212:	0705                	addi	a4,a4,1
+ 214:	0025179b          	slliw	a5,a0,0x2
+ 218:	9fa9                	addw	a5,a5,a0
+ 21a:	0017979b          	slliw	a5,a5,0x1
+ 21e:	9fb5                	addw	a5,a5,a3
+ 220:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+ 224:	00074683          	lbu	a3,0(a4)
+ 228:	fd06879b          	addiw	a5,a3,-48
+ 22c:	0ff7f793          	zext.b	a5,a5
+ 230:	fef671e3          	bgeu	a2,a5,212 <atoi+0x1c>
+  return n;
+}
+ 234:	6422                	ld	s0,8(sp)
+ 236:	0141                	addi	sp,sp,16
+ 238:	8082                	ret
+  n = 0;
+ 23a:	4501                	li	a0,0
+ 23c:	bfe5                	j	234 <atoi+0x3e>
+
+000000000000023e <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 23e:	1141                	addi	sp,sp,-16
+ 240:	e422                	sd	s0,8(sp)
+ 242:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+ 244:	02b57463          	bgeu	a0,a1,26c <memmove+0x2e>
+    while(n-- > 0)
+ 248:	00c05f63          	blez	a2,266 <memmove+0x28>
+ 24c:	1602                	slli	a2,a2,0x20
+ 24e:	9201                	srli	a2,a2,0x20
+ 250:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+ 254:	872a                	mv	a4,a0
+      *dst++ = *src++;
+ 256:	0585                	addi	a1,a1,1
+ 258:	0705                	addi	a4,a4,1
+ 25a:	fff5c683          	lbu	a3,-1(a1)
+ 25e:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+ 262:	fee79ae3          	bne	a5,a4,256 <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+ 266:	6422                	ld	s0,8(sp)
+ 268:	0141                	addi	sp,sp,16
+ 26a:	8082                	ret
+    dst += n;
+ 26c:	00c50733          	add	a4,a0,a2
+    src += n;
+ 270:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+ 272:	fec05ae3          	blez	a2,266 <memmove+0x28>
+ 276:	fff6079b          	addiw	a5,a2,-1
+ 27a:	1782                	slli	a5,a5,0x20
+ 27c:	9381                	srli	a5,a5,0x20
+ 27e:	fff7c793          	not	a5,a5
+ 282:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+ 284:	15fd                	addi	a1,a1,-1
+ 286:	177d                	addi	a4,a4,-1
+ 288:	0005c683          	lbu	a3,0(a1)
+ 28c:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+ 290:	fee79ae3          	bne	a5,a4,284 <memmove+0x46>
+ 294:	bfc9                	j	266 <memmove+0x28>
+
+0000000000000296 <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+ 296:	1141                	addi	sp,sp,-16
+ 298:	e422                	sd	s0,8(sp)
+ 29a:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+ 29c:	ca05                	beqz	a2,2cc <memcmp+0x36>
+ 29e:	fff6069b          	addiw	a3,a2,-1
+ 2a2:	1682                	slli	a3,a3,0x20
+ 2a4:	9281                	srli	a3,a3,0x20
+ 2a6:	0685                	addi	a3,a3,1
+ 2a8:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+ 2aa:	00054783          	lbu	a5,0(a0)
+ 2ae:	0005c703          	lbu	a4,0(a1)
+ 2b2:	00e79863          	bne	a5,a4,2c2 <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+ 2b6:	0505                	addi	a0,a0,1
+    p2++;
+ 2b8:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+ 2ba:	fed518e3          	bne	a0,a3,2aa <memcmp+0x14>
+  }
+  return 0;
+ 2be:	4501                	li	a0,0
+ 2c0:	a019                	j	2c6 <memcmp+0x30>
+      return *p1 - *p2;
+ 2c2:	40e7853b          	subw	a0,a5,a4
+}
+ 2c6:	6422                	ld	s0,8(sp)
+ 2c8:	0141                	addi	sp,sp,16
+ 2ca:	8082                	ret
+  return 0;
+ 2cc:	4501                	li	a0,0
+ 2ce:	bfe5                	j	2c6 <memcmp+0x30>
+
+00000000000002d0 <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+ 2d0:	1141                	addi	sp,sp,-16
+ 2d2:	e406                	sd	ra,8(sp)
+ 2d4:	e022                	sd	s0,0(sp)
+ 2d6:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+ 2d8:	00000097          	auipc	ra,0x0
+ 2dc:	f66080e7          	jalr	-154(ra) # 23e <memmove>
+}
+ 2e0:	60a2                	ld	ra,8(sp)
+ 2e2:	6402                	ld	s0,0(sp)
+ 2e4:	0141                	addi	sp,sp,16
+ 2e6:	8082                	ret
+
+00000000000002e8 <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ 2e8:	4885                	li	a7,1
+ ecall
+ 2ea:	00000073          	ecall
+ ret
+ 2ee:	8082                	ret
+
+00000000000002f0 <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+ 2f0:	4889                	li	a7,2
+ ecall
+ 2f2:	00000073          	ecall
+ ret
+ 2f6:	8082                	ret
+
+00000000000002f8 <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+ 2f8:	488d                	li	a7,3
+ ecall
+ 2fa:	00000073          	ecall
+ ret
+ 2fe:	8082                	ret
+
+0000000000000300 <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ 300:	4891                	li	a7,4
+ ecall
+ 302:	00000073          	ecall
+ ret
+ 306:	8082                	ret
+
+0000000000000308 <read>:
+.global read
+read:
+ li a7, SYS_read
+ 308:	4895                	li	a7,5
+ ecall
+ 30a:	00000073          	ecall
+ ret
+ 30e:	8082                	ret
+
+0000000000000310 <write>:
+.global write
+write:
+ li a7, SYS_write
+ 310:	48c1                	li	a7,16
+ ecall
+ 312:	00000073          	ecall
+ ret
+ 316:	8082                	ret
+
+0000000000000318 <close>:
+.global close
+close:
+ li a7, SYS_close
+ 318:	48d5                	li	a7,21
+ ecall
+ 31a:	00000073          	ecall
+ ret
+ 31e:	8082                	ret
+
+0000000000000320 <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+ 320:	4899                	li	a7,6
+ ecall
+ 322:	00000073          	ecall
+ ret
+ 326:	8082                	ret
+
+0000000000000328 <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+ 328:	489d                	li	a7,7
+ ecall
+ 32a:	00000073          	ecall
+ ret
+ 32e:	8082                	ret
+
+0000000000000330 <open>:
+.global open
+open:
+ li a7, SYS_open
+ 330:	48bd                	li	a7,15
+ ecall
+ 332:	00000073          	ecall
+ ret
+ 336:	8082                	ret
+
+0000000000000338 <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ 338:	48c5                	li	a7,17
+ ecall
+ 33a:	00000073          	ecall
+ ret
+ 33e:	8082                	ret
+
+0000000000000340 <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ 340:	48c9                	li	a7,18
+ ecall
+ 342:	00000073          	ecall
+ ret
+ 346:	8082                	ret
+
+0000000000000348 <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ 348:	48a1                	li	a7,8
+ ecall
+ 34a:	00000073          	ecall
+ ret
+ 34e:	8082                	ret
+
+0000000000000350 <link>:
+.global link
+link:
+ li a7, SYS_link
+ 350:	48cd                	li	a7,19
+ ecall
+ 352:	00000073          	ecall
+ ret
+ 356:	8082                	ret
+
+0000000000000358 <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ 358:	48d1                	li	a7,20
+ ecall
+ 35a:	00000073          	ecall
+ ret
+ 35e:	8082                	ret
+
+0000000000000360 <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ 360:	48a5                	li	a7,9
+ ecall
+ 362:	00000073          	ecall
+ ret
+ 366:	8082                	ret
+
+0000000000000368 <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+ 368:	48a9                	li	a7,10
+ ecall
+ 36a:	00000073          	ecall
+ ret
+ 36e:	8082                	ret
+
+0000000000000370 <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ 370:	48ad                	li	a7,11
+ ecall
+ 372:	00000073          	ecall
+ ret
+ 376:	8082                	ret
+
+0000000000000378 <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ 378:	48b1                	li	a7,12
+ ecall
+ 37a:	00000073          	ecall
+ ret
+ 37e:	8082                	ret
+
+0000000000000380 <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ 380:	48b5                	li	a7,13
+ ecall
+ 382:	00000073          	ecall
+ ret
+ 386:	8082                	ret
+
+0000000000000388 <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ 388:	48b9                	li	a7,14
+ ecall
+ 38a:	00000073          	ecall
+ ret
+ 38e:	8082                	ret
+
+0000000000000390 <setp>:
+.global setp
+setp:
+ li a7, SYS_setp
+ 390:	48d9                	li	a7,22
+ ecall
+ 392:	00000073          	ecall
+ ret
+ 396:	8082                	ret
+
+0000000000000398 <semget>:
+.global semget
+semget:
+ li a7, SYS_semget
+ 398:	48dd                	li	a7,23
+ ecall
+ 39a:	00000073          	ecall
+ ret
+ 39e:	8082                	ret
+
+00000000000003a0 <semdown>:
+.global semdown
+semdown:
+ li a7, SYS_semdown
+ 3a0:	48e1                	li	a7,24
+ ecall
+ 3a2:	00000073          	ecall
+ ret
+ 3a6:	8082                	ret
+
+00000000000003a8 <semup>:
+.global semup
+semup:
+ li a7, SYS_semup
+ 3a8:	48e5                	li	a7,25
+ ecall
+ 3aa:	00000073          	ecall
+ ret
+ 3ae:	8082                	ret
+
+00000000000003b0 <semclose>:
+.global semclose
+semclose:
+ li a7, SYS_semclose
+ 3b0:	48e9                	li	a7,26
+ ecall
+ 3b2:	00000073          	ecall
+ ret
+ 3b6:	8082                	ret
+
+00000000000003b8 <timeout>:
+.global timeout
+timeout:
+ li a7, SYS_timeout
+ 3b8:	48ed                	li	a7,27
+ ecall
+ 3ba:	00000073          	ecall
+ ret
+ 3be:	8082                	ret
+
+00000000000003c0 <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+ 3c0:	1101                	addi	sp,sp,-32
+ 3c2:	ec06                	sd	ra,24(sp)
+ 3c4:	e822                	sd	s0,16(sp)
+ 3c6:	1000                	addi	s0,sp,32
+ 3c8:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+ 3cc:	4605                	li	a2,1
+ 3ce:	fef40593          	addi	a1,s0,-17
+ 3d2:	00000097          	auipc	ra,0x0
+ 3d6:	f3e080e7          	jalr	-194(ra) # 310 <write>
+}
+ 3da:	60e2                	ld	ra,24(sp)
+ 3dc:	6442                	ld	s0,16(sp)
+ 3de:	6105                	addi	sp,sp,32
+ 3e0:	8082                	ret
+
+00000000000003e2 <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3e2:	7139                	addi	sp,sp,-64
+ 3e4:	fc06                	sd	ra,56(sp)
+ 3e6:	f822                	sd	s0,48(sp)
+ 3e8:	f426                	sd	s1,40(sp)
+ 3ea:	f04a                	sd	s2,32(sp)
+ 3ec:	ec4e                	sd	s3,24(sp)
+ 3ee:	0080                	addi	s0,sp,64
+ 3f0:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 3f2:	c299                	beqz	a3,3f8 <printint+0x16>
+ 3f4:	0805c963          	bltz	a1,486 <printint+0xa4>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 3f8:	2581                	sext.w	a1,a1
+  neg = 0;
+ 3fa:	4881                	li	a7,0
+ 3fc:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+ 400:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+ 402:	2601                	sext.w	a2,a2
+ 404:	00000517          	auipc	a0,0x0
+ 408:	4a450513          	addi	a0,a0,1188 # 8a8 <digits>
+ 40c:	883a                	mv	a6,a4
+ 40e:	2705                	addiw	a4,a4,1
+ 410:	02c5f7bb          	remuw	a5,a1,a2
+ 414:	1782                	slli	a5,a5,0x20
+ 416:	9381                	srli	a5,a5,0x20
+ 418:	97aa                	add	a5,a5,a0
+ 41a:	0007c783          	lbu	a5,0(a5)
+ 41e:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+ 422:	0005879b          	sext.w	a5,a1
+ 426:	02c5d5bb          	divuw	a1,a1,a2
+ 42a:	0685                	addi	a3,a3,1
+ 42c:	fec7f0e3          	bgeu	a5,a2,40c <printint+0x2a>
+  if(neg)
+ 430:	00088c63          	beqz	a7,448 <printint+0x66>
+    buf[i++] = '-';
+ 434:	fd070793          	addi	a5,a4,-48
+ 438:	00878733          	add	a4,a5,s0
+ 43c:	02d00793          	li	a5,45
+ 440:	fef70823          	sb	a5,-16(a4)
+ 444:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+ 448:	02e05863          	blez	a4,478 <printint+0x96>
+ 44c:	fc040793          	addi	a5,s0,-64
+ 450:	00e78933          	add	s2,a5,a4
+ 454:	fff78993          	addi	s3,a5,-1
+ 458:	99ba                	add	s3,s3,a4
+ 45a:	377d                	addiw	a4,a4,-1
+ 45c:	1702                	slli	a4,a4,0x20
+ 45e:	9301                	srli	a4,a4,0x20
+ 460:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+ 464:	fff94583          	lbu	a1,-1(s2)
+ 468:	8526                	mv	a0,s1
+ 46a:	00000097          	auipc	ra,0x0
+ 46e:	f56080e7          	jalr	-170(ra) # 3c0 <putc>
+  while(--i >= 0)
+ 472:	197d                	addi	s2,s2,-1
+ 474:	ff3918e3          	bne	s2,s3,464 <printint+0x82>
+}
+ 478:	70e2                	ld	ra,56(sp)
+ 47a:	7442                	ld	s0,48(sp)
+ 47c:	74a2                	ld	s1,40(sp)
+ 47e:	7902                	ld	s2,32(sp)
+ 480:	69e2                	ld	s3,24(sp)
+ 482:	6121                	addi	sp,sp,64
+ 484:	8082                	ret
+    x = -xx;
+ 486:	40b005bb          	negw	a1,a1
+    neg = 1;
+ 48a:	4885                	li	a7,1
+    x = -xx;
+ 48c:	bf85                	j	3fc <printint+0x1a>
+
+000000000000048e <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+ 48e:	7119                	addi	sp,sp,-128
+ 490:	fc86                	sd	ra,120(sp)
+ 492:	f8a2                	sd	s0,112(sp)
+ 494:	f4a6                	sd	s1,104(sp)
+ 496:	f0ca                	sd	s2,96(sp)
+ 498:	ecce                	sd	s3,88(sp)
+ 49a:	e8d2                	sd	s4,80(sp)
+ 49c:	e4d6                	sd	s5,72(sp)
+ 49e:	e0da                	sd	s6,64(sp)
+ 4a0:	fc5e                	sd	s7,56(sp)
+ 4a2:	f862                	sd	s8,48(sp)
+ 4a4:	f466                	sd	s9,40(sp)
+ 4a6:	f06a                	sd	s10,32(sp)
+ 4a8:	ec6e                	sd	s11,24(sp)
+ 4aa:	0100                	addi	s0,sp,128
+  char *s;
+  int c, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+ 4ac:	0005c903          	lbu	s2,0(a1)
+ 4b0:	18090f63          	beqz	s2,64e <vprintf+0x1c0>
+ 4b4:	8aaa                	mv	s5,a0
+ 4b6:	8b32                	mv	s6,a2
+ 4b8:	00158493          	addi	s1,a1,1
+  state = 0;
+ 4bc:	4981                	li	s3,0
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 4be:	02500a13          	li	s4,37
+ 4c2:	4c55                	li	s8,21
+ 4c4:	00000c97          	auipc	s9,0x0
+ 4c8:	38cc8c93          	addi	s9,s9,908 # 850 <malloc+0xfe>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c == 's'){
+        s = va_arg(ap, char*);
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 4cc:	02800d93          	li	s11,40
+  putc(fd, 'x');
+ 4d0:	4d41                	li	s10,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 4d2:	00000b97          	auipc	s7,0x0
+ 4d6:	3d6b8b93          	addi	s7,s7,982 # 8a8 <digits>
+ 4da:	a839                	j	4f8 <vprintf+0x6a>
+        putc(fd, c);
+ 4dc:	85ca                	mv	a1,s2
+ 4de:	8556                	mv	a0,s5
+ 4e0:	00000097          	auipc	ra,0x0
+ 4e4:	ee0080e7          	jalr	-288(ra) # 3c0 <putc>
+ 4e8:	a019                	j	4ee <vprintf+0x60>
+    } else if(state == '%'){
+ 4ea:	01498d63          	beq	s3,s4,504 <vprintf+0x76>
+  for(i = 0; fmt[i]; i++){
+ 4ee:	0485                	addi	s1,s1,1
+ 4f0:	fff4c903          	lbu	s2,-1(s1)
+ 4f4:	14090d63          	beqz	s2,64e <vprintf+0x1c0>
+    if(state == 0){
+ 4f8:	fe0999e3          	bnez	s3,4ea <vprintf+0x5c>
+      if(c == '%'){
+ 4fc:	ff4910e3          	bne	s2,s4,4dc <vprintf+0x4e>
+        state = '%';
+ 500:	89d2                	mv	s3,s4
+ 502:	b7f5                	j	4ee <vprintf+0x60>
+      if(c == 'd'){
+ 504:	11490c63          	beq	s2,s4,61c <vprintf+0x18e>
+ 508:	f9d9079b          	addiw	a5,s2,-99
+ 50c:	0ff7f793          	zext.b	a5,a5
+ 510:	10fc6e63          	bltu	s8,a5,62c <vprintf+0x19e>
+ 514:	f9d9079b          	addiw	a5,s2,-99
+ 518:	0ff7f713          	zext.b	a4,a5
+ 51c:	10ec6863          	bltu	s8,a4,62c <vprintf+0x19e>
+ 520:	00271793          	slli	a5,a4,0x2
+ 524:	97e6                	add	a5,a5,s9
+ 526:	439c                	lw	a5,0(a5)
+ 528:	97e6                	add	a5,a5,s9
+ 52a:	8782                	jr	a5
+        printint(fd, va_arg(ap, int), 10, 1);
+ 52c:	008b0913          	addi	s2,s6,8
+ 530:	4685                	li	a3,1
+ 532:	4629                	li	a2,10
+ 534:	000b2583          	lw	a1,0(s6)
+ 538:	8556                	mv	a0,s5
+ 53a:	00000097          	auipc	ra,0x0
+ 53e:	ea8080e7          	jalr	-344(ra) # 3e2 <printint>
+ 542:	8b4a                	mv	s6,s2
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 544:	4981                	li	s3,0
+ 546:	b765                	j	4ee <vprintf+0x60>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 548:	008b0913          	addi	s2,s6,8
+ 54c:	4681                	li	a3,0
+ 54e:	4629                	li	a2,10
+ 550:	000b2583          	lw	a1,0(s6)
+ 554:	8556                	mv	a0,s5
+ 556:	00000097          	auipc	ra,0x0
+ 55a:	e8c080e7          	jalr	-372(ra) # 3e2 <printint>
+ 55e:	8b4a                	mv	s6,s2
+      state = 0;
+ 560:	4981                	li	s3,0
+ 562:	b771                	j	4ee <vprintf+0x60>
+        printint(fd, va_arg(ap, int), 16, 0);
+ 564:	008b0913          	addi	s2,s6,8
+ 568:	4681                	li	a3,0
+ 56a:	866a                	mv	a2,s10
+ 56c:	000b2583          	lw	a1,0(s6)
+ 570:	8556                	mv	a0,s5
+ 572:	00000097          	auipc	ra,0x0
+ 576:	e70080e7          	jalr	-400(ra) # 3e2 <printint>
+ 57a:	8b4a                	mv	s6,s2
+      state = 0;
+ 57c:	4981                	li	s3,0
+ 57e:	bf85                	j	4ee <vprintf+0x60>
+        printptr(fd, va_arg(ap, uint64));
+ 580:	008b0793          	addi	a5,s6,8
+ 584:	f8f43423          	sd	a5,-120(s0)
+ 588:	000b3983          	ld	s3,0(s6)
+  putc(fd, '0');
+ 58c:	03000593          	li	a1,48
+ 590:	8556                	mv	a0,s5
+ 592:	00000097          	auipc	ra,0x0
+ 596:	e2e080e7          	jalr	-466(ra) # 3c0 <putc>
+  putc(fd, 'x');
+ 59a:	07800593          	li	a1,120
+ 59e:	8556                	mv	a0,s5
+ 5a0:	00000097          	auipc	ra,0x0
+ 5a4:	e20080e7          	jalr	-480(ra) # 3c0 <putc>
+ 5a8:	896a                	mv	s2,s10
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 5aa:	03c9d793          	srli	a5,s3,0x3c
+ 5ae:	97de                	add	a5,a5,s7
+ 5b0:	0007c583          	lbu	a1,0(a5)
+ 5b4:	8556                	mv	a0,s5
+ 5b6:	00000097          	auipc	ra,0x0
+ 5ba:	e0a080e7          	jalr	-502(ra) # 3c0 <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+ 5be:	0992                	slli	s3,s3,0x4
+ 5c0:	397d                	addiw	s2,s2,-1
+ 5c2:	fe0914e3          	bnez	s2,5aa <vprintf+0x11c>
+        printptr(fd, va_arg(ap, uint64));
+ 5c6:	f8843b03          	ld	s6,-120(s0)
+      state = 0;
+ 5ca:	4981                	li	s3,0
+ 5cc:	b70d                	j	4ee <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 5ce:	008b0913          	addi	s2,s6,8
+ 5d2:	000b3983          	ld	s3,0(s6)
+        if(s == 0)
+ 5d6:	02098163          	beqz	s3,5f8 <vprintf+0x16a>
+        while(*s != 0){
+ 5da:	0009c583          	lbu	a1,0(s3)
+ 5de:	c5ad                	beqz	a1,648 <vprintf+0x1ba>
+          putc(fd, *s);
+ 5e0:	8556                	mv	a0,s5
+ 5e2:	00000097          	auipc	ra,0x0
+ 5e6:	dde080e7          	jalr	-546(ra) # 3c0 <putc>
+          s++;
+ 5ea:	0985                	addi	s3,s3,1
+        while(*s != 0){
+ 5ec:	0009c583          	lbu	a1,0(s3)
+ 5f0:	f9e5                	bnez	a1,5e0 <vprintf+0x152>
+        s = va_arg(ap, char*);
+ 5f2:	8b4a                	mv	s6,s2
+      state = 0;
+ 5f4:	4981                	li	s3,0
+ 5f6:	bde5                	j	4ee <vprintf+0x60>
+          s = "(null)";
+ 5f8:	00000997          	auipc	s3,0x0
+ 5fc:	25098993          	addi	s3,s3,592 # 848 <malloc+0xf6>
+        while(*s != 0){
+ 600:	85ee                	mv	a1,s11
+ 602:	bff9                	j	5e0 <vprintf+0x152>
+        putc(fd, va_arg(ap, uint));
+ 604:	008b0913          	addi	s2,s6,8
+ 608:	000b4583          	lbu	a1,0(s6)
+ 60c:	8556                	mv	a0,s5
+ 60e:	00000097          	auipc	ra,0x0
+ 612:	db2080e7          	jalr	-590(ra) # 3c0 <putc>
+ 616:	8b4a                	mv	s6,s2
+      state = 0;
+ 618:	4981                	li	s3,0
+ 61a:	bdd1                	j	4ee <vprintf+0x60>
+        putc(fd, c);
+ 61c:	85d2                	mv	a1,s4
+ 61e:	8556                	mv	a0,s5
+ 620:	00000097          	auipc	ra,0x0
+ 624:	da0080e7          	jalr	-608(ra) # 3c0 <putc>
+      state = 0;
+ 628:	4981                	li	s3,0
+ 62a:	b5d1                	j	4ee <vprintf+0x60>
+        putc(fd, '%');
+ 62c:	85d2                	mv	a1,s4
+ 62e:	8556                	mv	a0,s5
+ 630:	00000097          	auipc	ra,0x0
+ 634:	d90080e7          	jalr	-624(ra) # 3c0 <putc>
+        putc(fd, c);
+ 638:	85ca                	mv	a1,s2
+ 63a:	8556                	mv	a0,s5
+ 63c:	00000097          	auipc	ra,0x0
+ 640:	d84080e7          	jalr	-636(ra) # 3c0 <putc>
+      state = 0;
+ 644:	4981                	li	s3,0
+ 646:	b565                	j	4ee <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 648:	8b4a                	mv	s6,s2
+      state = 0;
+ 64a:	4981                	li	s3,0
+ 64c:	b54d                	j	4ee <vprintf+0x60>
+    }
+  }
+}
+ 64e:	70e6                	ld	ra,120(sp)
+ 650:	7446                	ld	s0,112(sp)
+ 652:	74a6                	ld	s1,104(sp)
+ 654:	7906                	ld	s2,96(sp)
+ 656:	69e6                	ld	s3,88(sp)
+ 658:	6a46                	ld	s4,80(sp)
+ 65a:	6aa6                	ld	s5,72(sp)
+ 65c:	6b06                	ld	s6,64(sp)
+ 65e:	7be2                	ld	s7,56(sp)
+ 660:	7c42                	ld	s8,48(sp)
+ 662:	7ca2                	ld	s9,40(sp)
+ 664:	7d02                	ld	s10,32(sp)
+ 666:	6de2                	ld	s11,24(sp)
+ 668:	6109                	addi	sp,sp,128
+ 66a:	8082                	ret
+
+000000000000066c <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+ 66c:	715d                	addi	sp,sp,-80
+ 66e:	ec06                	sd	ra,24(sp)
+ 670:	e822                	sd	s0,16(sp)
+ 672:	1000                	addi	s0,sp,32
+ 674:	e010                	sd	a2,0(s0)
+ 676:	e414                	sd	a3,8(s0)
+ 678:	e818                	sd	a4,16(s0)
+ 67a:	ec1c                	sd	a5,24(s0)
+ 67c:	03043023          	sd	a6,32(s0)
+ 680:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 684:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+ 688:	8622                	mv	a2,s0
+ 68a:	00000097          	auipc	ra,0x0
+ 68e:	e04080e7          	jalr	-508(ra) # 48e <vprintf>
+}
+ 692:	60e2                	ld	ra,24(sp)
+ 694:	6442                	ld	s0,16(sp)
+ 696:	6161                	addi	sp,sp,80
+ 698:	8082                	ret
+
+000000000000069a <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+ 69a:	711d                	addi	sp,sp,-96
+ 69c:	ec06                	sd	ra,24(sp)
+ 69e:	e822                	sd	s0,16(sp)
+ 6a0:	1000                	addi	s0,sp,32
+ 6a2:	e40c                	sd	a1,8(s0)
+ 6a4:	e810                	sd	a2,16(s0)
+ 6a6:	ec14                	sd	a3,24(s0)
+ 6a8:	f018                	sd	a4,32(s0)
+ 6aa:	f41c                	sd	a5,40(s0)
+ 6ac:	03043823          	sd	a6,48(s0)
+ 6b0:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 6b4:	00840613          	addi	a2,s0,8
+ 6b8:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+ 6bc:	85aa                	mv	a1,a0
+ 6be:	4505                	li	a0,1
+ 6c0:	00000097          	auipc	ra,0x0
+ 6c4:	dce080e7          	jalr	-562(ra) # 48e <vprintf>
+}
+ 6c8:	60e2                	ld	ra,24(sp)
+ 6ca:	6442                	ld	s0,16(sp)
+ 6cc:	6125                	addi	sp,sp,96
+ 6ce:	8082                	ret
+
+00000000000006d0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6d0:	1141                	addi	sp,sp,-16
+ 6d2:	e422                	sd	s0,8(sp)
+ 6d4:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 6d6:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6da:	00000797          	auipc	a5,0x0
+ 6de:	1e67b783          	ld	a5,486(a5) # 8c0 <freep>
+ 6e2:	a02d                	j	70c <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 6e4:	4618                	lw	a4,8(a2)
+ 6e6:	9f2d                	addw	a4,a4,a1
+ 6e8:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6ec:	6398                	ld	a4,0(a5)
+ 6ee:	6310                	ld	a2,0(a4)
+ 6f0:	a83d                	j	72e <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 6f2:	ff852703          	lw	a4,-8(a0)
+ 6f6:	9f31                	addw	a4,a4,a2
+ 6f8:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+ 6fa:	ff053683          	ld	a3,-16(a0)
+ 6fe:	a091                	j	742 <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 700:	6398                	ld	a4,0(a5)
+ 702:	00e7e463          	bltu	a5,a4,70a <free+0x3a>
+ 706:	00e6ea63          	bltu	a3,a4,71a <free+0x4a>
+{
+ 70a:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 70c:	fed7fae3          	bgeu	a5,a3,700 <free+0x30>
+ 710:	6398                	ld	a4,0(a5)
+ 712:	00e6e463          	bltu	a3,a4,71a <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 716:	fee7eae3          	bltu	a5,a4,70a <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+ 71a:	ff852583          	lw	a1,-8(a0)
+ 71e:	6390                	ld	a2,0(a5)
+ 720:	02059813          	slli	a6,a1,0x20
+ 724:	01c85713          	srli	a4,a6,0x1c
+ 728:	9736                	add	a4,a4,a3
+ 72a:	fae60de3          	beq	a2,a4,6e4 <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 72e:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+ 732:	4790                	lw	a2,8(a5)
+ 734:	02061593          	slli	a1,a2,0x20
+ 738:	01c5d713          	srli	a4,a1,0x1c
+ 73c:	973e                	add	a4,a4,a5
+ 73e:	fae68ae3          	beq	a3,a4,6f2 <free+0x22>
+    p->s.ptr = bp->s.ptr;
+ 742:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 744:	00000717          	auipc	a4,0x0
+ 748:	16f73e23          	sd	a5,380(a4) # 8c0 <freep>
+}
+ 74c:	6422                	ld	s0,8(sp)
+ 74e:	0141                	addi	sp,sp,16
+ 750:	8082                	ret
+
+0000000000000752 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 752:	7139                	addi	sp,sp,-64
+ 754:	fc06                	sd	ra,56(sp)
+ 756:	f822                	sd	s0,48(sp)
+ 758:	f426                	sd	s1,40(sp)
+ 75a:	f04a                	sd	s2,32(sp)
+ 75c:	ec4e                	sd	s3,24(sp)
+ 75e:	e852                	sd	s4,16(sp)
+ 760:	e456                	sd	s5,8(sp)
+ 762:	e05a                	sd	s6,0(sp)
+ 764:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 766:	02051493          	slli	s1,a0,0x20
+ 76a:	9081                	srli	s1,s1,0x20
+ 76c:	04bd                	addi	s1,s1,15
+ 76e:	8091                	srli	s1,s1,0x4
+ 770:	0014899b          	addiw	s3,s1,1
+ 774:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+ 776:	00000517          	auipc	a0,0x0
+ 77a:	14a53503          	ld	a0,330(a0) # 8c0 <freep>
+ 77e:	c515                	beqz	a0,7aa <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 780:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 782:	4798                	lw	a4,8(a5)
+ 784:	02977f63          	bgeu	a4,s1,7c2 <malloc+0x70>
+ 788:	8a4e                	mv	s4,s3
+ 78a:	0009871b          	sext.w	a4,s3
+ 78e:	6685                	lui	a3,0x1
+ 790:	00d77363          	bgeu	a4,a3,796 <malloc+0x44>
+ 794:	6a05                	lui	s4,0x1
+ 796:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+ 79a:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 79e:	00000917          	auipc	s2,0x0
+ 7a2:	12290913          	addi	s2,s2,290 # 8c0 <freep>
+  if(p == (char*)-1)
+ 7a6:	5afd                	li	s5,-1
+ 7a8:	a895                	j	81c <malloc+0xca>
+    base.s.ptr = freep = prevp = &base;
+ 7aa:	00000797          	auipc	a5,0x0
+ 7ae:	11e78793          	addi	a5,a5,286 # 8c8 <base>
+ 7b2:	00000717          	auipc	a4,0x0
+ 7b6:	10f73723          	sd	a5,270(a4) # 8c0 <freep>
+ 7ba:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+ 7bc:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+ 7c0:	b7e1                	j	788 <malloc+0x36>
+      if(p->s.size == nunits)
+ 7c2:	02e48c63          	beq	s1,a4,7fa <malloc+0xa8>
+        p->s.size -= nunits;
+ 7c6:	4137073b          	subw	a4,a4,s3
+ 7ca:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+ 7cc:	02071693          	slli	a3,a4,0x20
+ 7d0:	01c6d713          	srli	a4,a3,0x1c
+ 7d4:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+ 7d6:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+ 7da:	00000717          	auipc	a4,0x0
+ 7de:	0ea73323          	sd	a0,230(a4) # 8c0 <freep>
+      return (void*)(p + 1);
+ 7e2:	01078513          	addi	a0,a5,16
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ 7e6:	70e2                	ld	ra,56(sp)
+ 7e8:	7442                	ld	s0,48(sp)
+ 7ea:	74a2                	ld	s1,40(sp)
+ 7ec:	7902                	ld	s2,32(sp)
+ 7ee:	69e2                	ld	s3,24(sp)
+ 7f0:	6a42                	ld	s4,16(sp)
+ 7f2:	6aa2                	ld	s5,8(sp)
+ 7f4:	6b02                	ld	s6,0(sp)
+ 7f6:	6121                	addi	sp,sp,64
+ 7f8:	8082                	ret
+        prevp->s.ptr = p->s.ptr;
+ 7fa:	6398                	ld	a4,0(a5)
+ 7fc:	e118                	sd	a4,0(a0)
+ 7fe:	bff1                	j	7da <malloc+0x88>
+  hp->s.size = nu;
+ 800:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+ 804:	0541                	addi	a0,a0,16
+ 806:	00000097          	auipc	ra,0x0
+ 80a:	eca080e7          	jalr	-310(ra) # 6d0 <free>
+  return freep;
+ 80e:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+ 812:	d971                	beqz	a0,7e6 <malloc+0x94>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 814:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 816:	4798                	lw	a4,8(a5)
+ 818:	fa9775e3          	bgeu	a4,s1,7c2 <malloc+0x70>
+    if(p == freep)
+ 81c:	00093703          	ld	a4,0(s2)
+ 820:	853e                	mv	a0,a5
+ 822:	fef719e3          	bne	a4,a5,814 <malloc+0xc2>
+  p = sbrk(nu * sizeof(Header));
+ 826:	8552                	mv	a0,s4
+ 828:	00000097          	auipc	ra,0x0
+ 82c:	b50080e7          	jalr	-1200(ra) # 378 <sbrk>
+  if(p == (char*)-1)
+ 830:	fd5518e3          	bne	a0,s5,800 <malloc+0xae>
+        return 0;
+ 834:	4501                	li	a0,0
+ 836:	bf45                	j	7e6 <malloc+0x94>
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/echo.d os-workshop/user/echo.d
--- xv6-riscv/user/echo.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/echo.d	2022-05-28 22:34:32.000000000 -0300
@@ -0,0 +1 @@
+user/echo.o: user/echo.c kernel/types.h kernel/stat.h user/user.h
Binary files xv6-riscv/user/echo.o and os-workshop/user/echo.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/echo.sym os-workshop/user/echo.sym
--- xv6-riscv/user/echo.sym	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/echo.sym	2022-05-28 22:34:32.000000000 -0300
@@ -0,0 +1,76 @@
+0000000000000000 .text
+0000000000000838 .rodata
+00000000000008c0 .sbss
+00000000000008c8 .bss
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_aranges
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_line
+0000000000000000 .debug_frame
+0000000000000000 .debug_str
+0000000000000000 .debug_line_str
+0000000000000000 .debug_loclists
+0000000000000000 .debug_rnglists
+0000000000000000 echo.c
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+00000000000003c0 putc
+00000000000003e2 printint
+00000000000008a8 digits
+0000000000000000 umalloc.c
+00000000000008c0 freep
+00000000000008c8 base
+0000000000000084 strcpy
+000000000000069a printf
+00000000000010b9 __global_pointer$
+000000000000023e memmove
+0000000000000338 mknod
+00000000000003a0 semdown
+000000000000013c gets
+00000000000008b9 __SDATA_BEGIN__
+0000000000000398 semget
+0000000000000370 getpid
+00000000000002d0 memcpy
+0000000000000752 malloc
+00000000000003b0 semclose
+0000000000000380 sleep
+0000000000000300 pipe
+0000000000000310 write
+0000000000000348 fstat
+000000000000066c fprintf
+0000000000000320 kill
+000000000000048e vprintf
+0000000000000360 chdir
+0000000000000328 exec
+00000000000002f8 wait
+0000000000000308 read
+0000000000000340 unlink
+0000000000000296 memcmp
+00000000000002e8 fork
+00000000000008d8 __BSS_END__
+0000000000000378 sbrk
+0000000000000388 uptime
+00000000000008b9 __bss_start
+00000000000000f6 memset
+0000000000000000 main
+00000000000003b8 timeout
+00000000000000a0 strcmp
+0000000000000368 dup
+00000000000008b9 __DATA_BEGIN__
+00000000000001b0 stat
+00000000000008b9 _edata
+0000000000000390 setp
+00000000000008d8 _end
+0000000000000350 link
+00000000000002f0 exit
+00000000000001f6 atoi
+00000000000000cc strlen
+0000000000000330 open
+00000000000003a8 semup
+0000000000000118 strchr
+0000000000000358 mkdir
+0000000000000318 close
+00000000000006d0 free
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/forktest.asm os-workshop/user/forktest.asm
--- xv6-riscv/user/forktest.asm	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/forktest.asm	2022-05-28 22:34:32.000000000 -0300
@@ -0,0 +1,851 @@
+
+user/_forktest:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <print>:
+
+#define N  1000
+
+void
+print(const char *s)
+{
+   0:	1101                	addi	sp,sp,-32
+   2:	ec06                	sd	ra,24(sp)
+   4:	e822                	sd	s0,16(sp)
+   6:	e426                	sd	s1,8(sp)
+   8:	1000                	addi	s0,sp,32
+   a:	84aa                	mv	s1,a0
+  write(1, s, strlen(s));
+   c:	00000097          	auipc	ra,0x0
+  10:	15a080e7          	jalr	346(ra) # 166 <strlen>
+  14:	0005061b          	sext.w	a2,a0
+  18:	85a6                	mv	a1,s1
+  1a:	4505                	li	a0,1
+  1c:	00000097          	auipc	ra,0x0
+  20:	38e080e7          	jalr	910(ra) # 3aa <write>
+}
+  24:	60e2                	ld	ra,24(sp)
+  26:	6442                	ld	s0,16(sp)
+  28:	64a2                	ld	s1,8(sp)
+  2a:	6105                	addi	sp,sp,32
+  2c:	8082                	ret
+
+000000000000002e <forktest>:
+
+void
+forktest(void)
+{
+  2e:	1101                	addi	sp,sp,-32
+  30:	ec06                	sd	ra,24(sp)
+  32:	e822                	sd	s0,16(sp)
+  34:	e426                	sd	s1,8(sp)
+  36:	e04a                	sd	s2,0(sp)
+  38:	1000                	addi	s0,sp,32
+  int n, pid;
+
+  print("fork test\n");
+  3a:	00000517          	auipc	a0,0x0
+  3e:	42650513          	addi	a0,a0,1062 # 460 <timeout+0xe>
+  42:	00000097          	auipc	ra,0x0
+  46:	fbe080e7          	jalr	-66(ra) # 0 <print>
+
+  for(n=0; n<N; n++){
+  4a:	4481                	li	s1,0
+  4c:	3e800913          	li	s2,1000
+    pid = fork();
+  50:	00000097          	auipc	ra,0x0
+  54:	332080e7          	jalr	818(ra) # 382 <fork>
+    if(pid < 0)
+  58:	02054763          	bltz	a0,86 <forktest+0x58>
+      break;
+    if(pid == 0)
+  5c:	c10d                	beqz	a0,7e <forktest+0x50>
+  for(n=0; n<N; n++){
+  5e:	2485                	addiw	s1,s1,1
+  60:	ff2498e3          	bne	s1,s2,50 <forktest+0x22>
+      exit(0);
+  }
+
+  if(n == N){
+    print("fork claimed to work N times!\n");
+  64:	00000517          	auipc	a0,0x0
+  68:	40c50513          	addi	a0,a0,1036 # 470 <timeout+0x1e>
+  6c:	00000097          	auipc	ra,0x0
+  70:	f94080e7          	jalr	-108(ra) # 0 <print>
+    exit(1);
+  74:	4505                	li	a0,1
+  76:	00000097          	auipc	ra,0x0
+  7a:	314080e7          	jalr	788(ra) # 38a <exit>
+      exit(0);
+  7e:	00000097          	auipc	ra,0x0
+  82:	30c080e7          	jalr	780(ra) # 38a <exit>
+  if(n == N){
+  86:	3e800793          	li	a5,1000
+  8a:	fcf48de3          	beq	s1,a5,64 <forktest+0x36>
+  }
+
+  for(; n > 0; n--){
+  8e:	00905b63          	blez	s1,a4 <forktest+0x76>
+    if(wait(0) < 0){
+  92:	4501                	li	a0,0
+  94:	00000097          	auipc	ra,0x0
+  98:	2fe080e7          	jalr	766(ra) # 392 <wait>
+  9c:	02054a63          	bltz	a0,d0 <forktest+0xa2>
+  for(; n > 0; n--){
+  a0:	34fd                	addiw	s1,s1,-1
+  a2:	f8e5                	bnez	s1,92 <forktest+0x64>
+      print("wait stopped early\n");
+      exit(1);
+    }
+  }
+
+  if(wait(0) != -1){
+  a4:	4501                	li	a0,0
+  a6:	00000097          	auipc	ra,0x0
+  aa:	2ec080e7          	jalr	748(ra) # 392 <wait>
+  ae:	57fd                	li	a5,-1
+  b0:	02f51d63          	bne	a0,a5,ea <forktest+0xbc>
+    print("wait got too many\n");
+    exit(1);
+  }
+
+  print("fork test OK\n");
+  b4:	00000517          	auipc	a0,0x0
+  b8:	40c50513          	addi	a0,a0,1036 # 4c0 <timeout+0x6e>
+  bc:	00000097          	auipc	ra,0x0
+  c0:	f44080e7          	jalr	-188(ra) # 0 <print>
+}
+  c4:	60e2                	ld	ra,24(sp)
+  c6:	6442                	ld	s0,16(sp)
+  c8:	64a2                	ld	s1,8(sp)
+  ca:	6902                	ld	s2,0(sp)
+  cc:	6105                	addi	sp,sp,32
+  ce:	8082                	ret
+      print("wait stopped early\n");
+  d0:	00000517          	auipc	a0,0x0
+  d4:	3c050513          	addi	a0,a0,960 # 490 <timeout+0x3e>
+  d8:	00000097          	auipc	ra,0x0
+  dc:	f28080e7          	jalr	-216(ra) # 0 <print>
+      exit(1);
+  e0:	4505                	li	a0,1
+  e2:	00000097          	auipc	ra,0x0
+  e6:	2a8080e7          	jalr	680(ra) # 38a <exit>
+    print("wait got too many\n");
+  ea:	00000517          	auipc	a0,0x0
+  ee:	3be50513          	addi	a0,a0,958 # 4a8 <timeout+0x56>
+  f2:	00000097          	auipc	ra,0x0
+  f6:	f0e080e7          	jalr	-242(ra) # 0 <print>
+    exit(1);
+  fa:	4505                	li	a0,1
+  fc:	00000097          	auipc	ra,0x0
+ 100:	28e080e7          	jalr	654(ra) # 38a <exit>
+
+0000000000000104 <main>:
+
+int
+main(void)
+{
+ 104:	1141                	addi	sp,sp,-16
+ 106:	e406                	sd	ra,8(sp)
+ 108:	e022                	sd	s0,0(sp)
+ 10a:	0800                	addi	s0,sp,16
+  forktest();
+ 10c:	00000097          	auipc	ra,0x0
+ 110:	f22080e7          	jalr	-222(ra) # 2e <forktest>
+  exit(0);
+ 114:	4501                	li	a0,0
+ 116:	00000097          	auipc	ra,0x0
+ 11a:	274080e7          	jalr	628(ra) # 38a <exit>
+
+000000000000011e <strcpy>:
+#include "kernel/fcntl.h"
+#include "user/user.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 11e:	1141                	addi	sp,sp,-16
+ 120:	e422                	sd	s0,8(sp)
+ 122:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 124:	87aa                	mv	a5,a0
+ 126:	0585                	addi	a1,a1,1
+ 128:	0785                	addi	a5,a5,1
+ 12a:	fff5c703          	lbu	a4,-1(a1)
+ 12e:	fee78fa3          	sb	a4,-1(a5)
+ 132:	fb75                	bnez	a4,126 <strcpy+0x8>
+    ;
+  return os;
+}
+ 134:	6422                	ld	s0,8(sp)
+ 136:	0141                	addi	sp,sp,16
+ 138:	8082                	ret
+
+000000000000013a <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 13a:	1141                	addi	sp,sp,-16
+ 13c:	e422                	sd	s0,8(sp)
+ 13e:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+ 140:	00054783          	lbu	a5,0(a0)
+ 144:	cb91                	beqz	a5,158 <strcmp+0x1e>
+ 146:	0005c703          	lbu	a4,0(a1)
+ 14a:	00f71763          	bne	a4,a5,158 <strcmp+0x1e>
+    p++, q++;
+ 14e:	0505                	addi	a0,a0,1
+ 150:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+ 152:	00054783          	lbu	a5,0(a0)
+ 156:	fbe5                	bnez	a5,146 <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+ 158:	0005c503          	lbu	a0,0(a1)
+}
+ 15c:	40a7853b          	subw	a0,a5,a0
+ 160:	6422                	ld	s0,8(sp)
+ 162:	0141                	addi	sp,sp,16
+ 164:	8082                	ret
+
+0000000000000166 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 166:	1141                	addi	sp,sp,-16
+ 168:	e422                	sd	s0,8(sp)
+ 16a:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 16c:	00054783          	lbu	a5,0(a0)
+ 170:	cf91                	beqz	a5,18c <strlen+0x26>
+ 172:	0505                	addi	a0,a0,1
+ 174:	87aa                	mv	a5,a0
+ 176:	4685                	li	a3,1
+ 178:	9e89                	subw	a3,a3,a0
+ 17a:	00f6853b          	addw	a0,a3,a5
+ 17e:	0785                	addi	a5,a5,1
+ 180:	fff7c703          	lbu	a4,-1(a5)
+ 184:	fb7d                	bnez	a4,17a <strlen+0x14>
+    ;
+  return n;
+}
+ 186:	6422                	ld	s0,8(sp)
+ 188:	0141                	addi	sp,sp,16
+ 18a:	8082                	ret
+  for(n = 0; s[n]; n++)
+ 18c:	4501                	li	a0,0
+ 18e:	bfe5                	j	186 <strlen+0x20>
+
+0000000000000190 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 190:	1141                	addi	sp,sp,-16
+ 192:	e422                	sd	s0,8(sp)
+ 194:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+ 196:	ca19                	beqz	a2,1ac <memset+0x1c>
+ 198:	87aa                	mv	a5,a0
+ 19a:	1602                	slli	a2,a2,0x20
+ 19c:	9201                	srli	a2,a2,0x20
+ 19e:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+ 1a2:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+ 1a6:	0785                	addi	a5,a5,1
+ 1a8:	fee79de3          	bne	a5,a4,1a2 <memset+0x12>
+  }
+  return dst;
+}
+ 1ac:	6422                	ld	s0,8(sp)
+ 1ae:	0141                	addi	sp,sp,16
+ 1b0:	8082                	ret
+
+00000000000001b2 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 1b2:	1141                	addi	sp,sp,-16
+ 1b4:	e422                	sd	s0,8(sp)
+ 1b6:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+ 1b8:	00054783          	lbu	a5,0(a0)
+ 1bc:	cb99                	beqz	a5,1d2 <strchr+0x20>
+    if(*s == c)
+ 1be:	00f58763          	beq	a1,a5,1cc <strchr+0x1a>
+  for(; *s; s++)
+ 1c2:	0505                	addi	a0,a0,1
+ 1c4:	00054783          	lbu	a5,0(a0)
+ 1c8:	fbfd                	bnez	a5,1be <strchr+0xc>
+      return (char*)s;
+  return 0;
+ 1ca:	4501                	li	a0,0
+}
+ 1cc:	6422                	ld	s0,8(sp)
+ 1ce:	0141                	addi	sp,sp,16
+ 1d0:	8082                	ret
+  return 0;
+ 1d2:	4501                	li	a0,0
+ 1d4:	bfe5                	j	1cc <strchr+0x1a>
+
+00000000000001d6 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 1d6:	711d                	addi	sp,sp,-96
+ 1d8:	ec86                	sd	ra,88(sp)
+ 1da:	e8a2                	sd	s0,80(sp)
+ 1dc:	e4a6                	sd	s1,72(sp)
+ 1de:	e0ca                	sd	s2,64(sp)
+ 1e0:	fc4e                	sd	s3,56(sp)
+ 1e2:	f852                	sd	s4,48(sp)
+ 1e4:	f456                	sd	s5,40(sp)
+ 1e6:	f05a                	sd	s6,32(sp)
+ 1e8:	ec5e                	sd	s7,24(sp)
+ 1ea:	1080                	addi	s0,sp,96
+ 1ec:	8baa                	mv	s7,a0
+ 1ee:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1f0:	892a                	mv	s2,a0
+ 1f2:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+ 1f4:	4aa9                	li	s5,10
+ 1f6:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+ 1f8:	89a6                	mv	s3,s1
+ 1fa:	2485                	addiw	s1,s1,1
+ 1fc:	0344d863          	bge	s1,s4,22c <gets+0x56>
+    cc = read(0, &c, 1);
+ 200:	4605                	li	a2,1
+ 202:	faf40593          	addi	a1,s0,-81
+ 206:	4501                	li	a0,0
+ 208:	00000097          	auipc	ra,0x0
+ 20c:	19a080e7          	jalr	410(ra) # 3a2 <read>
+    if(cc < 1)
+ 210:	00a05e63          	blez	a0,22c <gets+0x56>
+    buf[i++] = c;
+ 214:	faf44783          	lbu	a5,-81(s0)
+ 218:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+ 21c:	01578763          	beq	a5,s5,22a <gets+0x54>
+ 220:	0905                	addi	s2,s2,1
+ 222:	fd679be3          	bne	a5,s6,1f8 <gets+0x22>
+  for(i=0; i+1 < max; ){
+ 226:	89a6                	mv	s3,s1
+ 228:	a011                	j	22c <gets+0x56>
+ 22a:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+ 22c:	99de                	add	s3,s3,s7
+ 22e:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+ 232:	855e                	mv	a0,s7
+ 234:	60e6                	ld	ra,88(sp)
+ 236:	6446                	ld	s0,80(sp)
+ 238:	64a6                	ld	s1,72(sp)
+ 23a:	6906                	ld	s2,64(sp)
+ 23c:	79e2                	ld	s3,56(sp)
+ 23e:	7a42                	ld	s4,48(sp)
+ 240:	7aa2                	ld	s5,40(sp)
+ 242:	7b02                	ld	s6,32(sp)
+ 244:	6be2                	ld	s7,24(sp)
+ 246:	6125                	addi	sp,sp,96
+ 248:	8082                	ret
+
+000000000000024a <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 24a:	1101                	addi	sp,sp,-32
+ 24c:	ec06                	sd	ra,24(sp)
+ 24e:	e822                	sd	s0,16(sp)
+ 250:	e426                	sd	s1,8(sp)
+ 252:	e04a                	sd	s2,0(sp)
+ 254:	1000                	addi	s0,sp,32
+ 256:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 258:	4581                	li	a1,0
+ 25a:	00000097          	auipc	ra,0x0
+ 25e:	170080e7          	jalr	368(ra) # 3ca <open>
+  if(fd < 0)
+ 262:	02054563          	bltz	a0,28c <stat+0x42>
+ 266:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+ 268:	85ca                	mv	a1,s2
+ 26a:	00000097          	auipc	ra,0x0
+ 26e:	178080e7          	jalr	376(ra) # 3e2 <fstat>
+ 272:	892a                	mv	s2,a0
+  close(fd);
+ 274:	8526                	mv	a0,s1
+ 276:	00000097          	auipc	ra,0x0
+ 27a:	13c080e7          	jalr	316(ra) # 3b2 <close>
+  return r;
+}
+ 27e:	854a                	mv	a0,s2
+ 280:	60e2                	ld	ra,24(sp)
+ 282:	6442                	ld	s0,16(sp)
+ 284:	64a2                	ld	s1,8(sp)
+ 286:	6902                	ld	s2,0(sp)
+ 288:	6105                	addi	sp,sp,32
+ 28a:	8082                	ret
+    return -1;
+ 28c:	597d                	li	s2,-1
+ 28e:	bfc5                	j	27e <stat+0x34>
+
+0000000000000290 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 290:	1141                	addi	sp,sp,-16
+ 292:	e422                	sd	s0,8(sp)
+ 294:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 296:	00054683          	lbu	a3,0(a0)
+ 29a:	fd06879b          	addiw	a5,a3,-48
+ 29e:	0ff7f793          	zext.b	a5,a5
+ 2a2:	4625                	li	a2,9
+ 2a4:	02f66863          	bltu	a2,a5,2d4 <atoi+0x44>
+ 2a8:	872a                	mv	a4,a0
+  n = 0;
+ 2aa:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+ 2ac:	0705                	addi	a4,a4,1
+ 2ae:	0025179b          	slliw	a5,a0,0x2
+ 2b2:	9fa9                	addw	a5,a5,a0
+ 2b4:	0017979b          	slliw	a5,a5,0x1
+ 2b8:	9fb5                	addw	a5,a5,a3
+ 2ba:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+ 2be:	00074683          	lbu	a3,0(a4)
+ 2c2:	fd06879b          	addiw	a5,a3,-48
+ 2c6:	0ff7f793          	zext.b	a5,a5
+ 2ca:	fef671e3          	bgeu	a2,a5,2ac <atoi+0x1c>
+  return n;
+}
+ 2ce:	6422                	ld	s0,8(sp)
+ 2d0:	0141                	addi	sp,sp,16
+ 2d2:	8082                	ret
+  n = 0;
+ 2d4:	4501                	li	a0,0
+ 2d6:	bfe5                	j	2ce <atoi+0x3e>
+
+00000000000002d8 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2d8:	1141                	addi	sp,sp,-16
+ 2da:	e422                	sd	s0,8(sp)
+ 2dc:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+ 2de:	02b57463          	bgeu	a0,a1,306 <memmove+0x2e>
+    while(n-- > 0)
+ 2e2:	00c05f63          	blez	a2,300 <memmove+0x28>
+ 2e6:	1602                	slli	a2,a2,0x20
+ 2e8:	9201                	srli	a2,a2,0x20
+ 2ea:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+ 2ee:	872a                	mv	a4,a0
+      *dst++ = *src++;
+ 2f0:	0585                	addi	a1,a1,1
+ 2f2:	0705                	addi	a4,a4,1
+ 2f4:	fff5c683          	lbu	a3,-1(a1)
+ 2f8:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+ 2fc:	fee79ae3          	bne	a5,a4,2f0 <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+ 300:	6422                	ld	s0,8(sp)
+ 302:	0141                	addi	sp,sp,16
+ 304:	8082                	ret
+    dst += n;
+ 306:	00c50733          	add	a4,a0,a2
+    src += n;
+ 30a:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+ 30c:	fec05ae3          	blez	a2,300 <memmove+0x28>
+ 310:	fff6079b          	addiw	a5,a2,-1
+ 314:	1782                	slli	a5,a5,0x20
+ 316:	9381                	srli	a5,a5,0x20
+ 318:	fff7c793          	not	a5,a5
+ 31c:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+ 31e:	15fd                	addi	a1,a1,-1
+ 320:	177d                	addi	a4,a4,-1
+ 322:	0005c683          	lbu	a3,0(a1)
+ 326:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+ 32a:	fee79ae3          	bne	a5,a4,31e <memmove+0x46>
+ 32e:	bfc9                	j	300 <memmove+0x28>
+
+0000000000000330 <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+ 330:	1141                	addi	sp,sp,-16
+ 332:	e422                	sd	s0,8(sp)
+ 334:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+ 336:	ca05                	beqz	a2,366 <memcmp+0x36>
+ 338:	fff6069b          	addiw	a3,a2,-1
+ 33c:	1682                	slli	a3,a3,0x20
+ 33e:	9281                	srli	a3,a3,0x20
+ 340:	0685                	addi	a3,a3,1
+ 342:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+ 344:	00054783          	lbu	a5,0(a0)
+ 348:	0005c703          	lbu	a4,0(a1)
+ 34c:	00e79863          	bne	a5,a4,35c <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+ 350:	0505                	addi	a0,a0,1
+    p2++;
+ 352:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+ 354:	fed518e3          	bne	a0,a3,344 <memcmp+0x14>
+  }
+  return 0;
+ 358:	4501                	li	a0,0
+ 35a:	a019                	j	360 <memcmp+0x30>
+      return *p1 - *p2;
+ 35c:	40e7853b          	subw	a0,a5,a4
+}
+ 360:	6422                	ld	s0,8(sp)
+ 362:	0141                	addi	sp,sp,16
+ 364:	8082                	ret
+  return 0;
+ 366:	4501                	li	a0,0
+ 368:	bfe5                	j	360 <memcmp+0x30>
+
+000000000000036a <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+ 36a:	1141                	addi	sp,sp,-16
+ 36c:	e406                	sd	ra,8(sp)
+ 36e:	e022                	sd	s0,0(sp)
+ 370:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+ 372:	00000097          	auipc	ra,0x0
+ 376:	f66080e7          	jalr	-154(ra) # 2d8 <memmove>
+}
+ 37a:	60a2                	ld	ra,8(sp)
+ 37c:	6402                	ld	s0,0(sp)
+ 37e:	0141                	addi	sp,sp,16
+ 380:	8082                	ret
+
+0000000000000382 <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ 382:	4885                	li	a7,1
+ ecall
+ 384:	00000073          	ecall
+ ret
+ 388:	8082                	ret
+
+000000000000038a <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+ 38a:	4889                	li	a7,2
+ ecall
+ 38c:	00000073          	ecall
+ ret
+ 390:	8082                	ret
+
+0000000000000392 <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+ 392:	488d                	li	a7,3
+ ecall
+ 394:	00000073          	ecall
+ ret
+ 398:	8082                	ret
+
+000000000000039a <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ 39a:	4891                	li	a7,4
+ ecall
+ 39c:	00000073          	ecall
+ ret
+ 3a0:	8082                	ret
+
+00000000000003a2 <read>:
+.global read
+read:
+ li a7, SYS_read
+ 3a2:	4895                	li	a7,5
+ ecall
+ 3a4:	00000073          	ecall
+ ret
+ 3a8:	8082                	ret
+
+00000000000003aa <write>:
+.global write
+write:
+ li a7, SYS_write
+ 3aa:	48c1                	li	a7,16
+ ecall
+ 3ac:	00000073          	ecall
+ ret
+ 3b0:	8082                	ret
+
+00000000000003b2 <close>:
+.global close
+close:
+ li a7, SYS_close
+ 3b2:	48d5                	li	a7,21
+ ecall
+ 3b4:	00000073          	ecall
+ ret
+ 3b8:	8082                	ret
+
+00000000000003ba <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+ 3ba:	4899                	li	a7,6
+ ecall
+ 3bc:	00000073          	ecall
+ ret
+ 3c0:	8082                	ret
+
+00000000000003c2 <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+ 3c2:	489d                	li	a7,7
+ ecall
+ 3c4:	00000073          	ecall
+ ret
+ 3c8:	8082                	ret
+
+00000000000003ca <open>:
+.global open
+open:
+ li a7, SYS_open
+ 3ca:	48bd                	li	a7,15
+ ecall
+ 3cc:	00000073          	ecall
+ ret
+ 3d0:	8082                	ret
+
+00000000000003d2 <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ 3d2:	48c5                	li	a7,17
+ ecall
+ 3d4:	00000073          	ecall
+ ret
+ 3d8:	8082                	ret
+
+00000000000003da <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ 3da:	48c9                	li	a7,18
+ ecall
+ 3dc:	00000073          	ecall
+ ret
+ 3e0:	8082                	ret
+
+00000000000003e2 <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ 3e2:	48a1                	li	a7,8
+ ecall
+ 3e4:	00000073          	ecall
+ ret
+ 3e8:	8082                	ret
+
+00000000000003ea <link>:
+.global link
+link:
+ li a7, SYS_link
+ 3ea:	48cd                	li	a7,19
+ ecall
+ 3ec:	00000073          	ecall
+ ret
+ 3f0:	8082                	ret
+
+00000000000003f2 <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ 3f2:	48d1                	li	a7,20
+ ecall
+ 3f4:	00000073          	ecall
+ ret
+ 3f8:	8082                	ret
+
+00000000000003fa <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ 3fa:	48a5                	li	a7,9
+ ecall
+ 3fc:	00000073          	ecall
+ ret
+ 400:	8082                	ret
+
+0000000000000402 <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+ 402:	48a9                	li	a7,10
+ ecall
+ 404:	00000073          	ecall
+ ret
+ 408:	8082                	ret
+
+000000000000040a <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ 40a:	48ad                	li	a7,11
+ ecall
+ 40c:	00000073          	ecall
+ ret
+ 410:	8082                	ret
+
+0000000000000412 <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ 412:	48b1                	li	a7,12
+ ecall
+ 414:	00000073          	ecall
+ ret
+ 418:	8082                	ret
+
+000000000000041a <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ 41a:	48b5                	li	a7,13
+ ecall
+ 41c:	00000073          	ecall
+ ret
+ 420:	8082                	ret
+
+0000000000000422 <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ 422:	48b9                	li	a7,14
+ ecall
+ 424:	00000073          	ecall
+ ret
+ 428:	8082                	ret
+
+000000000000042a <setp>:
+.global setp
+setp:
+ li a7, SYS_setp
+ 42a:	48d9                	li	a7,22
+ ecall
+ 42c:	00000073          	ecall
+ ret
+ 430:	8082                	ret
+
+0000000000000432 <semget>:
+.global semget
+semget:
+ li a7, SYS_semget
+ 432:	48dd                	li	a7,23
+ ecall
+ 434:	00000073          	ecall
+ ret
+ 438:	8082                	ret
+
+000000000000043a <semdown>:
+.global semdown
+semdown:
+ li a7, SYS_semdown
+ 43a:	48e1                	li	a7,24
+ ecall
+ 43c:	00000073          	ecall
+ ret
+ 440:	8082                	ret
+
+0000000000000442 <semup>:
+.global semup
+semup:
+ li a7, SYS_semup
+ 442:	48e5                	li	a7,25
+ ecall
+ 444:	00000073          	ecall
+ ret
+ 448:	8082                	ret
+
+000000000000044a <semclose>:
+.global semclose
+semclose:
+ li a7, SYS_semclose
+ 44a:	48e9                	li	a7,26
+ ecall
+ 44c:	00000073          	ecall
+ ret
+ 450:	8082                	ret
+
+0000000000000452 <timeout>:
+.global timeout
+timeout:
+ li a7, SYS_timeout
+ 452:	48ed                	li	a7,27
+ ecall
+ 454:	00000073          	ecall
+ ret
+ 458:	8082                	ret
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/forktest.d os-workshop/user/forktest.d
--- xv6-riscv/user/forktest.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/forktest.d	2022-05-28 22:34:32.000000000 -0300
@@ -0,0 +1 @@
+user/forktest.o: user/forktest.c kernel/types.h kernel/stat.h user/user.h
Binary files xv6-riscv/user/forktest.o and os-workshop/user/forktest.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/grep.asm os-workshop/user/grep.asm
--- xv6-riscv/user/grep.asm	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/grep.asm	2022-05-28 22:34:33.000000000 -0300
@@ -0,0 +1,1649 @@
+
+user/_grep:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <matchstar>:
+  return 0;
+}
+
+// matchstar: search for c*re at beginning of text
+int matchstar(int c, char *re, char *text)
+{
+   0:	7179                	addi	sp,sp,-48
+   2:	f406                	sd	ra,40(sp)
+   4:	f022                	sd	s0,32(sp)
+   6:	ec26                	sd	s1,24(sp)
+   8:	e84a                	sd	s2,16(sp)
+   a:	e44e                	sd	s3,8(sp)
+   c:	e052                	sd	s4,0(sp)
+   e:	1800                	addi	s0,sp,48
+  10:	892a                	mv	s2,a0
+  12:	89ae                	mv	s3,a1
+  14:	84b2                	mv	s1,a2
+  do{  // a * matches zero or more instances
+    if(matchhere(re, text))
+      return 1;
+  }while(*text!='\0' && (*text++==c || c=='.'));
+  16:	02e00a13          	li	s4,46
+    if(matchhere(re, text))
+  1a:	85a6                	mv	a1,s1
+  1c:	854e                	mv	a0,s3
+  1e:	00000097          	auipc	ra,0x0
+  22:	030080e7          	jalr	48(ra) # 4e <matchhere>
+  26:	e919                	bnez	a0,3c <matchstar+0x3c>
+  }while(*text!='\0' && (*text++==c || c=='.'));
+  28:	0004c783          	lbu	a5,0(s1)
+  2c:	cb89                	beqz	a5,3e <matchstar+0x3e>
+  2e:	0485                	addi	s1,s1,1
+  30:	2781                	sext.w	a5,a5
+  32:	ff2784e3          	beq	a5,s2,1a <matchstar+0x1a>
+  36:	ff4902e3          	beq	s2,s4,1a <matchstar+0x1a>
+  3a:	a011                	j	3e <matchstar+0x3e>
+      return 1;
+  3c:	4505                	li	a0,1
+  return 0;
+}
+  3e:	70a2                	ld	ra,40(sp)
+  40:	7402                	ld	s0,32(sp)
+  42:	64e2                	ld	s1,24(sp)
+  44:	6942                	ld	s2,16(sp)
+  46:	69a2                	ld	s3,8(sp)
+  48:	6a02                	ld	s4,0(sp)
+  4a:	6145                	addi	sp,sp,48
+  4c:	8082                	ret
+
+000000000000004e <matchhere>:
+  if(re[0] == '\0')
+  4e:	00054703          	lbu	a4,0(a0)
+  52:	cb3d                	beqz	a4,c8 <matchhere+0x7a>
+{
+  54:	1141                	addi	sp,sp,-16
+  56:	e406                	sd	ra,8(sp)
+  58:	e022                	sd	s0,0(sp)
+  5a:	0800                	addi	s0,sp,16
+  5c:	87aa                	mv	a5,a0
+  if(re[1] == '*')
+  5e:	00154683          	lbu	a3,1(a0)
+  62:	02a00613          	li	a2,42
+  66:	02c68563          	beq	a3,a2,90 <matchhere+0x42>
+  if(re[0] == '$' && re[1] == '\0')
+  6a:	02400613          	li	a2,36
+  6e:	02c70a63          	beq	a4,a2,a2 <matchhere+0x54>
+  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
+  72:	0005c683          	lbu	a3,0(a1)
+  return 0;
+  76:	4501                	li	a0,0
+  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
+  78:	ca81                	beqz	a3,88 <matchhere+0x3a>
+  7a:	02e00613          	li	a2,46
+  7e:	02c70d63          	beq	a4,a2,b8 <matchhere+0x6a>
+  return 0;
+  82:	4501                	li	a0,0
+  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
+  84:	02d70a63          	beq	a4,a3,b8 <matchhere+0x6a>
+}
+  88:	60a2                	ld	ra,8(sp)
+  8a:	6402                	ld	s0,0(sp)
+  8c:	0141                	addi	sp,sp,16
+  8e:	8082                	ret
+    return matchstar(re[0], re+2, text);
+  90:	862e                	mv	a2,a1
+  92:	00250593          	addi	a1,a0,2
+  96:	853a                	mv	a0,a4
+  98:	00000097          	auipc	ra,0x0
+  9c:	f68080e7          	jalr	-152(ra) # 0 <matchstar>
+  a0:	b7e5                	j	88 <matchhere+0x3a>
+  if(re[0] == '$' && re[1] == '\0')
+  a2:	c691                	beqz	a3,ae <matchhere+0x60>
+  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
+  a4:	0005c683          	lbu	a3,0(a1)
+  a8:	fee9                	bnez	a3,82 <matchhere+0x34>
+  return 0;
+  aa:	4501                	li	a0,0
+  ac:	bff1                	j	88 <matchhere+0x3a>
+    return *text == '\0';
+  ae:	0005c503          	lbu	a0,0(a1)
+  b2:	00153513          	seqz	a0,a0
+  b6:	bfc9                	j	88 <matchhere+0x3a>
+    return matchhere(re+1, text+1);
+  b8:	0585                	addi	a1,a1,1
+  ba:	00178513          	addi	a0,a5,1
+  be:	00000097          	auipc	ra,0x0
+  c2:	f90080e7          	jalr	-112(ra) # 4e <matchhere>
+  c6:	b7c9                	j	88 <matchhere+0x3a>
+    return 1;
+  c8:	4505                	li	a0,1
+}
+  ca:	8082                	ret
+
+00000000000000cc <match>:
+{
+  cc:	1101                	addi	sp,sp,-32
+  ce:	ec06                	sd	ra,24(sp)
+  d0:	e822                	sd	s0,16(sp)
+  d2:	e426                	sd	s1,8(sp)
+  d4:	e04a                	sd	s2,0(sp)
+  d6:	1000                	addi	s0,sp,32
+  d8:	892a                	mv	s2,a0
+  da:	84ae                	mv	s1,a1
+  if(re[0] == '^')
+  dc:	00054703          	lbu	a4,0(a0)
+  e0:	05e00793          	li	a5,94
+  e4:	00f70e63          	beq	a4,a5,100 <match+0x34>
+    if(matchhere(re, text))
+  e8:	85a6                	mv	a1,s1
+  ea:	854a                	mv	a0,s2
+  ec:	00000097          	auipc	ra,0x0
+  f0:	f62080e7          	jalr	-158(ra) # 4e <matchhere>
+  f4:	ed01                	bnez	a0,10c <match+0x40>
+  }while(*text++ != '\0');
+  f6:	0485                	addi	s1,s1,1
+  f8:	fff4c783          	lbu	a5,-1(s1)
+  fc:	f7f5                	bnez	a5,e8 <match+0x1c>
+  fe:	a801                	j	10e <match+0x42>
+    return matchhere(re+1, text);
+ 100:	0505                	addi	a0,a0,1
+ 102:	00000097          	auipc	ra,0x0
+ 106:	f4c080e7          	jalr	-180(ra) # 4e <matchhere>
+ 10a:	a011                	j	10e <match+0x42>
+      return 1;
+ 10c:	4505                	li	a0,1
+}
+ 10e:	60e2                	ld	ra,24(sp)
+ 110:	6442                	ld	s0,16(sp)
+ 112:	64a2                	ld	s1,8(sp)
+ 114:	6902                	ld	s2,0(sp)
+ 116:	6105                	addi	sp,sp,32
+ 118:	8082                	ret
+
+000000000000011a <grep>:
+{
+ 11a:	715d                	addi	sp,sp,-80
+ 11c:	e486                	sd	ra,72(sp)
+ 11e:	e0a2                	sd	s0,64(sp)
+ 120:	fc26                	sd	s1,56(sp)
+ 122:	f84a                	sd	s2,48(sp)
+ 124:	f44e                	sd	s3,40(sp)
+ 126:	f052                	sd	s4,32(sp)
+ 128:	ec56                	sd	s5,24(sp)
+ 12a:	e85a                	sd	s6,16(sp)
+ 12c:	e45e                	sd	s7,8(sp)
+ 12e:	0880                	addi	s0,sp,80
+ 130:	89aa                	mv	s3,a0
+ 132:	8b2e                	mv	s6,a1
+  m = 0;
+ 134:	4a01                	li	s4,0
+  while((n = read(fd, buf+m, sizeof(buf)-m-1)) > 0){
+ 136:	3ff00b93          	li	s7,1023
+ 13a:	00001a97          	auipc	s5,0x1
+ 13e:	9d6a8a93          	addi	s5,s5,-1578 # b10 <buf>
+ 142:	a0a1                	j	18a <grep+0x70>
+      p = q+1;
+ 144:	00148913          	addi	s2,s1,1
+    while((q = strchr(p, '\n')) != 0){
+ 148:	45a9                	li	a1,10
+ 14a:	854a                	mv	a0,s2
+ 14c:	00000097          	auipc	ra,0x0
+ 150:	1e6080e7          	jalr	486(ra) # 332 <strchr>
+ 154:	84aa                	mv	s1,a0
+ 156:	c905                	beqz	a0,186 <grep+0x6c>
+      *q = 0;
+ 158:	00048023          	sb	zero,0(s1)
+      if(match(pattern, p)){
+ 15c:	85ca                	mv	a1,s2
+ 15e:	854e                	mv	a0,s3
+ 160:	00000097          	auipc	ra,0x0
+ 164:	f6c080e7          	jalr	-148(ra) # cc <match>
+ 168:	dd71                	beqz	a0,144 <grep+0x2a>
+        *q = '\n';
+ 16a:	47a9                	li	a5,10
+ 16c:	00f48023          	sb	a5,0(s1)
+        write(1, p, q+1 - p);
+ 170:	00148613          	addi	a2,s1,1
+ 174:	4126063b          	subw	a2,a2,s2
+ 178:	85ca                	mv	a1,s2
+ 17a:	4505                	li	a0,1
+ 17c:	00000097          	auipc	ra,0x0
+ 180:	3ae080e7          	jalr	942(ra) # 52a <write>
+ 184:	b7c1                	j	144 <grep+0x2a>
+    if(m > 0){
+ 186:	03404563          	bgtz	s4,1b0 <grep+0x96>
+  while((n = read(fd, buf+m, sizeof(buf)-m-1)) > 0){
+ 18a:	414b863b          	subw	a2,s7,s4
+ 18e:	014a85b3          	add	a1,s5,s4
+ 192:	855a                	mv	a0,s6
+ 194:	00000097          	auipc	ra,0x0
+ 198:	38e080e7          	jalr	910(ra) # 522 <read>
+ 19c:	02a05663          	blez	a0,1c8 <grep+0xae>
+    m += n;
+ 1a0:	00aa0a3b          	addw	s4,s4,a0
+    buf[m] = '\0';
+ 1a4:	014a87b3          	add	a5,s5,s4
+ 1a8:	00078023          	sb	zero,0(a5)
+    p = buf;
+ 1ac:	8956                	mv	s2,s5
+    while((q = strchr(p, '\n')) != 0){
+ 1ae:	bf69                	j	148 <grep+0x2e>
+      m -= p - buf;
+ 1b0:	415907b3          	sub	a5,s2,s5
+ 1b4:	40fa0a3b          	subw	s4,s4,a5
+      memmove(buf, p, m);
+ 1b8:	8652                	mv	a2,s4
+ 1ba:	85ca                	mv	a1,s2
+ 1bc:	8556                	mv	a0,s5
+ 1be:	00000097          	auipc	ra,0x0
+ 1c2:	29a080e7          	jalr	666(ra) # 458 <memmove>
+ 1c6:	b7d1                	j	18a <grep+0x70>
+}
+ 1c8:	60a6                	ld	ra,72(sp)
+ 1ca:	6406                	ld	s0,64(sp)
+ 1cc:	74e2                	ld	s1,56(sp)
+ 1ce:	7942                	ld	s2,48(sp)
+ 1d0:	79a2                	ld	s3,40(sp)
+ 1d2:	7a02                	ld	s4,32(sp)
+ 1d4:	6ae2                	ld	s5,24(sp)
+ 1d6:	6b42                	ld	s6,16(sp)
+ 1d8:	6ba2                	ld	s7,8(sp)
+ 1da:	6161                	addi	sp,sp,80
+ 1dc:	8082                	ret
+
+00000000000001de <main>:
+{
+ 1de:	7139                	addi	sp,sp,-64
+ 1e0:	fc06                	sd	ra,56(sp)
+ 1e2:	f822                	sd	s0,48(sp)
+ 1e4:	f426                	sd	s1,40(sp)
+ 1e6:	f04a                	sd	s2,32(sp)
+ 1e8:	ec4e                	sd	s3,24(sp)
+ 1ea:	e852                	sd	s4,16(sp)
+ 1ec:	e456                	sd	s5,8(sp)
+ 1ee:	0080                	addi	s0,sp,64
+  if(argc <= 1){
+ 1f0:	4785                	li	a5,1
+ 1f2:	04a7de63          	bge	a5,a0,24e <main+0x70>
+  pattern = argv[1];
+ 1f6:	0085ba03          	ld	s4,8(a1)
+  if(argc <= 2){
+ 1fa:	4789                	li	a5,2
+ 1fc:	06a7d763          	bge	a5,a0,26a <main+0x8c>
+ 200:	01058913          	addi	s2,a1,16
+ 204:	ffd5099b          	addiw	s3,a0,-3
+ 208:	02099793          	slli	a5,s3,0x20
+ 20c:	01d7d993          	srli	s3,a5,0x1d
+ 210:	05e1                	addi	a1,a1,24
+ 212:	99ae                	add	s3,s3,a1
+    if((fd = open(argv[i], 0)) < 0){
+ 214:	4581                	li	a1,0
+ 216:	00093503          	ld	a0,0(s2)
+ 21a:	00000097          	auipc	ra,0x0
+ 21e:	330080e7          	jalr	816(ra) # 54a <open>
+ 222:	84aa                	mv	s1,a0
+ 224:	04054e63          	bltz	a0,280 <main+0xa2>
+    grep(pattern, fd);
+ 228:	85aa                	mv	a1,a0
+ 22a:	8552                	mv	a0,s4
+ 22c:	00000097          	auipc	ra,0x0
+ 230:	eee080e7          	jalr	-274(ra) # 11a <grep>
+    close(fd);
+ 234:	8526                	mv	a0,s1
+ 236:	00000097          	auipc	ra,0x0
+ 23a:	2fc080e7          	jalr	764(ra) # 532 <close>
+  for(i = 2; i < argc; i++){
+ 23e:	0921                	addi	s2,s2,8
+ 240:	fd391ae3          	bne	s2,s3,214 <main+0x36>
+  exit(0);
+ 244:	4501                	li	a0,0
+ 246:	00000097          	auipc	ra,0x0
+ 24a:	2c4080e7          	jalr	708(ra) # 50a <exit>
+    fprintf(2, "usage: grep pattern [file ...]\n");
+ 24e:	00001597          	auipc	a1,0x1
+ 252:	80a58593          	addi	a1,a1,-2038 # a58 <malloc+0xec>
+ 256:	4509                	li	a0,2
+ 258:	00000097          	auipc	ra,0x0
+ 25c:	62e080e7          	jalr	1582(ra) # 886 <fprintf>
+    exit(1);
+ 260:	4505                	li	a0,1
+ 262:	00000097          	auipc	ra,0x0
+ 266:	2a8080e7          	jalr	680(ra) # 50a <exit>
+    grep(pattern, 0);
+ 26a:	4581                	li	a1,0
+ 26c:	8552                	mv	a0,s4
+ 26e:	00000097          	auipc	ra,0x0
+ 272:	eac080e7          	jalr	-340(ra) # 11a <grep>
+    exit(0);
+ 276:	4501                	li	a0,0
+ 278:	00000097          	auipc	ra,0x0
+ 27c:	292080e7          	jalr	658(ra) # 50a <exit>
+      printf("grep: cannot open %s\n", argv[i]);
+ 280:	00093583          	ld	a1,0(s2)
+ 284:	00000517          	auipc	a0,0x0
+ 288:	7f450513          	addi	a0,a0,2036 # a78 <malloc+0x10c>
+ 28c:	00000097          	auipc	ra,0x0
+ 290:	628080e7          	jalr	1576(ra) # 8b4 <printf>
+      exit(1);
+ 294:	4505                	li	a0,1
+ 296:	00000097          	auipc	ra,0x0
+ 29a:	274080e7          	jalr	628(ra) # 50a <exit>
+
+000000000000029e <strcpy>:
+#include "kernel/fcntl.h"
+#include "user/user.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 29e:	1141                	addi	sp,sp,-16
+ 2a0:	e422                	sd	s0,8(sp)
+ 2a2:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 2a4:	87aa                	mv	a5,a0
+ 2a6:	0585                	addi	a1,a1,1
+ 2a8:	0785                	addi	a5,a5,1
+ 2aa:	fff5c703          	lbu	a4,-1(a1)
+ 2ae:	fee78fa3          	sb	a4,-1(a5)
+ 2b2:	fb75                	bnez	a4,2a6 <strcpy+0x8>
+    ;
+  return os;
+}
+ 2b4:	6422                	ld	s0,8(sp)
+ 2b6:	0141                	addi	sp,sp,16
+ 2b8:	8082                	ret
+
+00000000000002ba <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 2ba:	1141                	addi	sp,sp,-16
+ 2bc:	e422                	sd	s0,8(sp)
+ 2be:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+ 2c0:	00054783          	lbu	a5,0(a0)
+ 2c4:	cb91                	beqz	a5,2d8 <strcmp+0x1e>
+ 2c6:	0005c703          	lbu	a4,0(a1)
+ 2ca:	00f71763          	bne	a4,a5,2d8 <strcmp+0x1e>
+    p++, q++;
+ 2ce:	0505                	addi	a0,a0,1
+ 2d0:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+ 2d2:	00054783          	lbu	a5,0(a0)
+ 2d6:	fbe5                	bnez	a5,2c6 <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+ 2d8:	0005c503          	lbu	a0,0(a1)
+}
+ 2dc:	40a7853b          	subw	a0,a5,a0
+ 2e0:	6422                	ld	s0,8(sp)
+ 2e2:	0141                	addi	sp,sp,16
+ 2e4:	8082                	ret
+
+00000000000002e6 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 2e6:	1141                	addi	sp,sp,-16
+ 2e8:	e422                	sd	s0,8(sp)
+ 2ea:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 2ec:	00054783          	lbu	a5,0(a0)
+ 2f0:	cf91                	beqz	a5,30c <strlen+0x26>
+ 2f2:	0505                	addi	a0,a0,1
+ 2f4:	87aa                	mv	a5,a0
+ 2f6:	4685                	li	a3,1
+ 2f8:	9e89                	subw	a3,a3,a0
+ 2fa:	00f6853b          	addw	a0,a3,a5
+ 2fe:	0785                	addi	a5,a5,1
+ 300:	fff7c703          	lbu	a4,-1(a5)
+ 304:	fb7d                	bnez	a4,2fa <strlen+0x14>
+    ;
+  return n;
+}
+ 306:	6422                	ld	s0,8(sp)
+ 308:	0141                	addi	sp,sp,16
+ 30a:	8082                	ret
+  for(n = 0; s[n]; n++)
+ 30c:	4501                	li	a0,0
+ 30e:	bfe5                	j	306 <strlen+0x20>
+
+0000000000000310 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 310:	1141                	addi	sp,sp,-16
+ 312:	e422                	sd	s0,8(sp)
+ 314:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+ 316:	ca19                	beqz	a2,32c <memset+0x1c>
+ 318:	87aa                	mv	a5,a0
+ 31a:	1602                	slli	a2,a2,0x20
+ 31c:	9201                	srli	a2,a2,0x20
+ 31e:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+ 322:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+ 326:	0785                	addi	a5,a5,1
+ 328:	fee79de3          	bne	a5,a4,322 <memset+0x12>
+  }
+  return dst;
+}
+ 32c:	6422                	ld	s0,8(sp)
+ 32e:	0141                	addi	sp,sp,16
+ 330:	8082                	ret
+
+0000000000000332 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 332:	1141                	addi	sp,sp,-16
+ 334:	e422                	sd	s0,8(sp)
+ 336:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+ 338:	00054783          	lbu	a5,0(a0)
+ 33c:	cb99                	beqz	a5,352 <strchr+0x20>
+    if(*s == c)
+ 33e:	00f58763          	beq	a1,a5,34c <strchr+0x1a>
+  for(; *s; s++)
+ 342:	0505                	addi	a0,a0,1
+ 344:	00054783          	lbu	a5,0(a0)
+ 348:	fbfd                	bnez	a5,33e <strchr+0xc>
+      return (char*)s;
+  return 0;
+ 34a:	4501                	li	a0,0
+}
+ 34c:	6422                	ld	s0,8(sp)
+ 34e:	0141                	addi	sp,sp,16
+ 350:	8082                	ret
+  return 0;
+ 352:	4501                	li	a0,0
+ 354:	bfe5                	j	34c <strchr+0x1a>
+
+0000000000000356 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 356:	711d                	addi	sp,sp,-96
+ 358:	ec86                	sd	ra,88(sp)
+ 35a:	e8a2                	sd	s0,80(sp)
+ 35c:	e4a6                	sd	s1,72(sp)
+ 35e:	e0ca                	sd	s2,64(sp)
+ 360:	fc4e                	sd	s3,56(sp)
+ 362:	f852                	sd	s4,48(sp)
+ 364:	f456                	sd	s5,40(sp)
+ 366:	f05a                	sd	s6,32(sp)
+ 368:	ec5e                	sd	s7,24(sp)
+ 36a:	1080                	addi	s0,sp,96
+ 36c:	8baa                	mv	s7,a0
+ 36e:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 370:	892a                	mv	s2,a0
+ 372:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+ 374:	4aa9                	li	s5,10
+ 376:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+ 378:	89a6                	mv	s3,s1
+ 37a:	2485                	addiw	s1,s1,1
+ 37c:	0344d863          	bge	s1,s4,3ac <gets+0x56>
+    cc = read(0, &c, 1);
+ 380:	4605                	li	a2,1
+ 382:	faf40593          	addi	a1,s0,-81
+ 386:	4501                	li	a0,0
+ 388:	00000097          	auipc	ra,0x0
+ 38c:	19a080e7          	jalr	410(ra) # 522 <read>
+    if(cc < 1)
+ 390:	00a05e63          	blez	a0,3ac <gets+0x56>
+    buf[i++] = c;
+ 394:	faf44783          	lbu	a5,-81(s0)
+ 398:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+ 39c:	01578763          	beq	a5,s5,3aa <gets+0x54>
+ 3a0:	0905                	addi	s2,s2,1
+ 3a2:	fd679be3          	bne	a5,s6,378 <gets+0x22>
+  for(i=0; i+1 < max; ){
+ 3a6:	89a6                	mv	s3,s1
+ 3a8:	a011                	j	3ac <gets+0x56>
+ 3aa:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+ 3ac:	99de                	add	s3,s3,s7
+ 3ae:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+ 3b2:	855e                	mv	a0,s7
+ 3b4:	60e6                	ld	ra,88(sp)
+ 3b6:	6446                	ld	s0,80(sp)
+ 3b8:	64a6                	ld	s1,72(sp)
+ 3ba:	6906                	ld	s2,64(sp)
+ 3bc:	79e2                	ld	s3,56(sp)
+ 3be:	7a42                	ld	s4,48(sp)
+ 3c0:	7aa2                	ld	s5,40(sp)
+ 3c2:	7b02                	ld	s6,32(sp)
+ 3c4:	6be2                	ld	s7,24(sp)
+ 3c6:	6125                	addi	sp,sp,96
+ 3c8:	8082                	ret
+
+00000000000003ca <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 3ca:	1101                	addi	sp,sp,-32
+ 3cc:	ec06                	sd	ra,24(sp)
+ 3ce:	e822                	sd	s0,16(sp)
+ 3d0:	e426                	sd	s1,8(sp)
+ 3d2:	e04a                	sd	s2,0(sp)
+ 3d4:	1000                	addi	s0,sp,32
+ 3d6:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 3d8:	4581                	li	a1,0
+ 3da:	00000097          	auipc	ra,0x0
+ 3de:	170080e7          	jalr	368(ra) # 54a <open>
+  if(fd < 0)
+ 3e2:	02054563          	bltz	a0,40c <stat+0x42>
+ 3e6:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+ 3e8:	85ca                	mv	a1,s2
+ 3ea:	00000097          	auipc	ra,0x0
+ 3ee:	178080e7          	jalr	376(ra) # 562 <fstat>
+ 3f2:	892a                	mv	s2,a0
+  close(fd);
+ 3f4:	8526                	mv	a0,s1
+ 3f6:	00000097          	auipc	ra,0x0
+ 3fa:	13c080e7          	jalr	316(ra) # 532 <close>
+  return r;
+}
+ 3fe:	854a                	mv	a0,s2
+ 400:	60e2                	ld	ra,24(sp)
+ 402:	6442                	ld	s0,16(sp)
+ 404:	64a2                	ld	s1,8(sp)
+ 406:	6902                	ld	s2,0(sp)
+ 408:	6105                	addi	sp,sp,32
+ 40a:	8082                	ret
+    return -1;
+ 40c:	597d                	li	s2,-1
+ 40e:	bfc5                	j	3fe <stat+0x34>
+
+0000000000000410 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 410:	1141                	addi	sp,sp,-16
+ 412:	e422                	sd	s0,8(sp)
+ 414:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 416:	00054683          	lbu	a3,0(a0)
+ 41a:	fd06879b          	addiw	a5,a3,-48
+ 41e:	0ff7f793          	zext.b	a5,a5
+ 422:	4625                	li	a2,9
+ 424:	02f66863          	bltu	a2,a5,454 <atoi+0x44>
+ 428:	872a                	mv	a4,a0
+  n = 0;
+ 42a:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+ 42c:	0705                	addi	a4,a4,1
+ 42e:	0025179b          	slliw	a5,a0,0x2
+ 432:	9fa9                	addw	a5,a5,a0
+ 434:	0017979b          	slliw	a5,a5,0x1
+ 438:	9fb5                	addw	a5,a5,a3
+ 43a:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+ 43e:	00074683          	lbu	a3,0(a4)
+ 442:	fd06879b          	addiw	a5,a3,-48
+ 446:	0ff7f793          	zext.b	a5,a5
+ 44a:	fef671e3          	bgeu	a2,a5,42c <atoi+0x1c>
+  return n;
+}
+ 44e:	6422                	ld	s0,8(sp)
+ 450:	0141                	addi	sp,sp,16
+ 452:	8082                	ret
+  n = 0;
+ 454:	4501                	li	a0,0
+ 456:	bfe5                	j	44e <atoi+0x3e>
+
+0000000000000458 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 458:	1141                	addi	sp,sp,-16
+ 45a:	e422                	sd	s0,8(sp)
+ 45c:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+ 45e:	02b57463          	bgeu	a0,a1,486 <memmove+0x2e>
+    while(n-- > 0)
+ 462:	00c05f63          	blez	a2,480 <memmove+0x28>
+ 466:	1602                	slli	a2,a2,0x20
+ 468:	9201                	srli	a2,a2,0x20
+ 46a:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+ 46e:	872a                	mv	a4,a0
+      *dst++ = *src++;
+ 470:	0585                	addi	a1,a1,1
+ 472:	0705                	addi	a4,a4,1
+ 474:	fff5c683          	lbu	a3,-1(a1)
+ 478:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+ 47c:	fee79ae3          	bne	a5,a4,470 <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+ 480:	6422                	ld	s0,8(sp)
+ 482:	0141                	addi	sp,sp,16
+ 484:	8082                	ret
+    dst += n;
+ 486:	00c50733          	add	a4,a0,a2
+    src += n;
+ 48a:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+ 48c:	fec05ae3          	blez	a2,480 <memmove+0x28>
+ 490:	fff6079b          	addiw	a5,a2,-1
+ 494:	1782                	slli	a5,a5,0x20
+ 496:	9381                	srli	a5,a5,0x20
+ 498:	fff7c793          	not	a5,a5
+ 49c:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+ 49e:	15fd                	addi	a1,a1,-1
+ 4a0:	177d                	addi	a4,a4,-1
+ 4a2:	0005c683          	lbu	a3,0(a1)
+ 4a6:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+ 4aa:	fee79ae3          	bne	a5,a4,49e <memmove+0x46>
+ 4ae:	bfc9                	j	480 <memmove+0x28>
+
+00000000000004b0 <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+ 4b0:	1141                	addi	sp,sp,-16
+ 4b2:	e422                	sd	s0,8(sp)
+ 4b4:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+ 4b6:	ca05                	beqz	a2,4e6 <memcmp+0x36>
+ 4b8:	fff6069b          	addiw	a3,a2,-1
+ 4bc:	1682                	slli	a3,a3,0x20
+ 4be:	9281                	srli	a3,a3,0x20
+ 4c0:	0685                	addi	a3,a3,1
+ 4c2:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+ 4c4:	00054783          	lbu	a5,0(a0)
+ 4c8:	0005c703          	lbu	a4,0(a1)
+ 4cc:	00e79863          	bne	a5,a4,4dc <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+ 4d0:	0505                	addi	a0,a0,1
+    p2++;
+ 4d2:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+ 4d4:	fed518e3          	bne	a0,a3,4c4 <memcmp+0x14>
+  }
+  return 0;
+ 4d8:	4501                	li	a0,0
+ 4da:	a019                	j	4e0 <memcmp+0x30>
+      return *p1 - *p2;
+ 4dc:	40e7853b          	subw	a0,a5,a4
+}
+ 4e0:	6422                	ld	s0,8(sp)
+ 4e2:	0141                	addi	sp,sp,16
+ 4e4:	8082                	ret
+  return 0;
+ 4e6:	4501                	li	a0,0
+ 4e8:	bfe5                	j	4e0 <memcmp+0x30>
+
+00000000000004ea <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+ 4ea:	1141                	addi	sp,sp,-16
+ 4ec:	e406                	sd	ra,8(sp)
+ 4ee:	e022                	sd	s0,0(sp)
+ 4f0:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+ 4f2:	00000097          	auipc	ra,0x0
+ 4f6:	f66080e7          	jalr	-154(ra) # 458 <memmove>
+}
+ 4fa:	60a2                	ld	ra,8(sp)
+ 4fc:	6402                	ld	s0,0(sp)
+ 4fe:	0141                	addi	sp,sp,16
+ 500:	8082                	ret
+
+0000000000000502 <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ 502:	4885                	li	a7,1
+ ecall
+ 504:	00000073          	ecall
+ ret
+ 508:	8082                	ret
+
+000000000000050a <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+ 50a:	4889                	li	a7,2
+ ecall
+ 50c:	00000073          	ecall
+ ret
+ 510:	8082                	ret
+
+0000000000000512 <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+ 512:	488d                	li	a7,3
+ ecall
+ 514:	00000073          	ecall
+ ret
+ 518:	8082                	ret
+
+000000000000051a <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ 51a:	4891                	li	a7,4
+ ecall
+ 51c:	00000073          	ecall
+ ret
+ 520:	8082                	ret
+
+0000000000000522 <read>:
+.global read
+read:
+ li a7, SYS_read
+ 522:	4895                	li	a7,5
+ ecall
+ 524:	00000073          	ecall
+ ret
+ 528:	8082                	ret
+
+000000000000052a <write>:
+.global write
+write:
+ li a7, SYS_write
+ 52a:	48c1                	li	a7,16
+ ecall
+ 52c:	00000073          	ecall
+ ret
+ 530:	8082                	ret
+
+0000000000000532 <close>:
+.global close
+close:
+ li a7, SYS_close
+ 532:	48d5                	li	a7,21
+ ecall
+ 534:	00000073          	ecall
+ ret
+ 538:	8082                	ret
+
+000000000000053a <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+ 53a:	4899                	li	a7,6
+ ecall
+ 53c:	00000073          	ecall
+ ret
+ 540:	8082                	ret
+
+0000000000000542 <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+ 542:	489d                	li	a7,7
+ ecall
+ 544:	00000073          	ecall
+ ret
+ 548:	8082                	ret
+
+000000000000054a <open>:
+.global open
+open:
+ li a7, SYS_open
+ 54a:	48bd                	li	a7,15
+ ecall
+ 54c:	00000073          	ecall
+ ret
+ 550:	8082                	ret
+
+0000000000000552 <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ 552:	48c5                	li	a7,17
+ ecall
+ 554:	00000073          	ecall
+ ret
+ 558:	8082                	ret
+
+000000000000055a <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ 55a:	48c9                	li	a7,18
+ ecall
+ 55c:	00000073          	ecall
+ ret
+ 560:	8082                	ret
+
+0000000000000562 <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ 562:	48a1                	li	a7,8
+ ecall
+ 564:	00000073          	ecall
+ ret
+ 568:	8082                	ret
+
+000000000000056a <link>:
+.global link
+link:
+ li a7, SYS_link
+ 56a:	48cd                	li	a7,19
+ ecall
+ 56c:	00000073          	ecall
+ ret
+ 570:	8082                	ret
+
+0000000000000572 <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ 572:	48d1                	li	a7,20
+ ecall
+ 574:	00000073          	ecall
+ ret
+ 578:	8082                	ret
+
+000000000000057a <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ 57a:	48a5                	li	a7,9
+ ecall
+ 57c:	00000073          	ecall
+ ret
+ 580:	8082                	ret
+
+0000000000000582 <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+ 582:	48a9                	li	a7,10
+ ecall
+ 584:	00000073          	ecall
+ ret
+ 588:	8082                	ret
+
+000000000000058a <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ 58a:	48ad                	li	a7,11
+ ecall
+ 58c:	00000073          	ecall
+ ret
+ 590:	8082                	ret
+
+0000000000000592 <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ 592:	48b1                	li	a7,12
+ ecall
+ 594:	00000073          	ecall
+ ret
+ 598:	8082                	ret
+
+000000000000059a <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ 59a:	48b5                	li	a7,13
+ ecall
+ 59c:	00000073          	ecall
+ ret
+ 5a0:	8082                	ret
+
+00000000000005a2 <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ 5a2:	48b9                	li	a7,14
+ ecall
+ 5a4:	00000073          	ecall
+ ret
+ 5a8:	8082                	ret
+
+00000000000005aa <setp>:
+.global setp
+setp:
+ li a7, SYS_setp
+ 5aa:	48d9                	li	a7,22
+ ecall
+ 5ac:	00000073          	ecall
+ ret
+ 5b0:	8082                	ret
+
+00000000000005b2 <semget>:
+.global semget
+semget:
+ li a7, SYS_semget
+ 5b2:	48dd                	li	a7,23
+ ecall
+ 5b4:	00000073          	ecall
+ ret
+ 5b8:	8082                	ret
+
+00000000000005ba <semdown>:
+.global semdown
+semdown:
+ li a7, SYS_semdown
+ 5ba:	48e1                	li	a7,24
+ ecall
+ 5bc:	00000073          	ecall
+ ret
+ 5c0:	8082                	ret
+
+00000000000005c2 <semup>:
+.global semup
+semup:
+ li a7, SYS_semup
+ 5c2:	48e5                	li	a7,25
+ ecall
+ 5c4:	00000073          	ecall
+ ret
+ 5c8:	8082                	ret
+
+00000000000005ca <semclose>:
+.global semclose
+semclose:
+ li a7, SYS_semclose
+ 5ca:	48e9                	li	a7,26
+ ecall
+ 5cc:	00000073          	ecall
+ ret
+ 5d0:	8082                	ret
+
+00000000000005d2 <timeout>:
+.global timeout
+timeout:
+ li a7, SYS_timeout
+ 5d2:	48ed                	li	a7,27
+ ecall
+ 5d4:	00000073          	ecall
+ ret
+ 5d8:	8082                	ret
+
+00000000000005da <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+ 5da:	1101                	addi	sp,sp,-32
+ 5dc:	ec06                	sd	ra,24(sp)
+ 5de:	e822                	sd	s0,16(sp)
+ 5e0:	1000                	addi	s0,sp,32
+ 5e2:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+ 5e6:	4605                	li	a2,1
+ 5e8:	fef40593          	addi	a1,s0,-17
+ 5ec:	00000097          	auipc	ra,0x0
+ 5f0:	f3e080e7          	jalr	-194(ra) # 52a <write>
+}
+ 5f4:	60e2                	ld	ra,24(sp)
+ 5f6:	6442                	ld	s0,16(sp)
+ 5f8:	6105                	addi	sp,sp,32
+ 5fa:	8082                	ret
+
+00000000000005fc <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 5fc:	7139                	addi	sp,sp,-64
+ 5fe:	fc06                	sd	ra,56(sp)
+ 600:	f822                	sd	s0,48(sp)
+ 602:	f426                	sd	s1,40(sp)
+ 604:	f04a                	sd	s2,32(sp)
+ 606:	ec4e                	sd	s3,24(sp)
+ 608:	0080                	addi	s0,sp,64
+ 60a:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 60c:	c299                	beqz	a3,612 <printint+0x16>
+ 60e:	0805c963          	bltz	a1,6a0 <printint+0xa4>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 612:	2581                	sext.w	a1,a1
+  neg = 0;
+ 614:	4881                	li	a7,0
+ 616:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+ 61a:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+ 61c:	2601                	sext.w	a2,a2
+ 61e:	00000517          	auipc	a0,0x0
+ 622:	4d250513          	addi	a0,a0,1234 # af0 <digits>
+ 626:	883a                	mv	a6,a4
+ 628:	2705                	addiw	a4,a4,1
+ 62a:	02c5f7bb          	remuw	a5,a1,a2
+ 62e:	1782                	slli	a5,a5,0x20
+ 630:	9381                	srli	a5,a5,0x20
+ 632:	97aa                	add	a5,a5,a0
+ 634:	0007c783          	lbu	a5,0(a5)
+ 638:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+ 63c:	0005879b          	sext.w	a5,a1
+ 640:	02c5d5bb          	divuw	a1,a1,a2
+ 644:	0685                	addi	a3,a3,1
+ 646:	fec7f0e3          	bgeu	a5,a2,626 <printint+0x2a>
+  if(neg)
+ 64a:	00088c63          	beqz	a7,662 <printint+0x66>
+    buf[i++] = '-';
+ 64e:	fd070793          	addi	a5,a4,-48
+ 652:	00878733          	add	a4,a5,s0
+ 656:	02d00793          	li	a5,45
+ 65a:	fef70823          	sb	a5,-16(a4)
+ 65e:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+ 662:	02e05863          	blez	a4,692 <printint+0x96>
+ 666:	fc040793          	addi	a5,s0,-64
+ 66a:	00e78933          	add	s2,a5,a4
+ 66e:	fff78993          	addi	s3,a5,-1
+ 672:	99ba                	add	s3,s3,a4
+ 674:	377d                	addiw	a4,a4,-1
+ 676:	1702                	slli	a4,a4,0x20
+ 678:	9301                	srli	a4,a4,0x20
+ 67a:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+ 67e:	fff94583          	lbu	a1,-1(s2)
+ 682:	8526                	mv	a0,s1
+ 684:	00000097          	auipc	ra,0x0
+ 688:	f56080e7          	jalr	-170(ra) # 5da <putc>
+  while(--i >= 0)
+ 68c:	197d                	addi	s2,s2,-1
+ 68e:	ff3918e3          	bne	s2,s3,67e <printint+0x82>
+}
+ 692:	70e2                	ld	ra,56(sp)
+ 694:	7442                	ld	s0,48(sp)
+ 696:	74a2                	ld	s1,40(sp)
+ 698:	7902                	ld	s2,32(sp)
+ 69a:	69e2                	ld	s3,24(sp)
+ 69c:	6121                	addi	sp,sp,64
+ 69e:	8082                	ret
+    x = -xx;
+ 6a0:	40b005bb          	negw	a1,a1
+    neg = 1;
+ 6a4:	4885                	li	a7,1
+    x = -xx;
+ 6a6:	bf85                	j	616 <printint+0x1a>
+
+00000000000006a8 <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+ 6a8:	7119                	addi	sp,sp,-128
+ 6aa:	fc86                	sd	ra,120(sp)
+ 6ac:	f8a2                	sd	s0,112(sp)
+ 6ae:	f4a6                	sd	s1,104(sp)
+ 6b0:	f0ca                	sd	s2,96(sp)
+ 6b2:	ecce                	sd	s3,88(sp)
+ 6b4:	e8d2                	sd	s4,80(sp)
+ 6b6:	e4d6                	sd	s5,72(sp)
+ 6b8:	e0da                	sd	s6,64(sp)
+ 6ba:	fc5e                	sd	s7,56(sp)
+ 6bc:	f862                	sd	s8,48(sp)
+ 6be:	f466                	sd	s9,40(sp)
+ 6c0:	f06a                	sd	s10,32(sp)
+ 6c2:	ec6e                	sd	s11,24(sp)
+ 6c4:	0100                	addi	s0,sp,128
+  char *s;
+  int c, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+ 6c6:	0005c903          	lbu	s2,0(a1)
+ 6ca:	18090f63          	beqz	s2,868 <vprintf+0x1c0>
+ 6ce:	8aaa                	mv	s5,a0
+ 6d0:	8b32                	mv	s6,a2
+ 6d2:	00158493          	addi	s1,a1,1
+  state = 0;
+ 6d6:	4981                	li	s3,0
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 6d8:	02500a13          	li	s4,37
+ 6dc:	4c55                	li	s8,21
+ 6de:	00000c97          	auipc	s9,0x0
+ 6e2:	3bac8c93          	addi	s9,s9,954 # a98 <malloc+0x12c>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c == 's'){
+        s = va_arg(ap, char*);
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 6e6:	02800d93          	li	s11,40
+  putc(fd, 'x');
+ 6ea:	4d41                	li	s10,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 6ec:	00000b97          	auipc	s7,0x0
+ 6f0:	404b8b93          	addi	s7,s7,1028 # af0 <digits>
+ 6f4:	a839                	j	712 <vprintf+0x6a>
+        putc(fd, c);
+ 6f6:	85ca                	mv	a1,s2
+ 6f8:	8556                	mv	a0,s5
+ 6fa:	00000097          	auipc	ra,0x0
+ 6fe:	ee0080e7          	jalr	-288(ra) # 5da <putc>
+ 702:	a019                	j	708 <vprintf+0x60>
+    } else if(state == '%'){
+ 704:	01498d63          	beq	s3,s4,71e <vprintf+0x76>
+  for(i = 0; fmt[i]; i++){
+ 708:	0485                	addi	s1,s1,1
+ 70a:	fff4c903          	lbu	s2,-1(s1)
+ 70e:	14090d63          	beqz	s2,868 <vprintf+0x1c0>
+    if(state == 0){
+ 712:	fe0999e3          	bnez	s3,704 <vprintf+0x5c>
+      if(c == '%'){
+ 716:	ff4910e3          	bne	s2,s4,6f6 <vprintf+0x4e>
+        state = '%';
+ 71a:	89d2                	mv	s3,s4
+ 71c:	b7f5                	j	708 <vprintf+0x60>
+      if(c == 'd'){
+ 71e:	11490c63          	beq	s2,s4,836 <vprintf+0x18e>
+ 722:	f9d9079b          	addiw	a5,s2,-99
+ 726:	0ff7f793          	zext.b	a5,a5
+ 72a:	10fc6e63          	bltu	s8,a5,846 <vprintf+0x19e>
+ 72e:	f9d9079b          	addiw	a5,s2,-99
+ 732:	0ff7f713          	zext.b	a4,a5
+ 736:	10ec6863          	bltu	s8,a4,846 <vprintf+0x19e>
+ 73a:	00271793          	slli	a5,a4,0x2
+ 73e:	97e6                	add	a5,a5,s9
+ 740:	439c                	lw	a5,0(a5)
+ 742:	97e6                	add	a5,a5,s9
+ 744:	8782                	jr	a5
+        printint(fd, va_arg(ap, int), 10, 1);
+ 746:	008b0913          	addi	s2,s6,8
+ 74a:	4685                	li	a3,1
+ 74c:	4629                	li	a2,10
+ 74e:	000b2583          	lw	a1,0(s6)
+ 752:	8556                	mv	a0,s5
+ 754:	00000097          	auipc	ra,0x0
+ 758:	ea8080e7          	jalr	-344(ra) # 5fc <printint>
+ 75c:	8b4a                	mv	s6,s2
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 75e:	4981                	li	s3,0
+ 760:	b765                	j	708 <vprintf+0x60>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 762:	008b0913          	addi	s2,s6,8
+ 766:	4681                	li	a3,0
+ 768:	4629                	li	a2,10
+ 76a:	000b2583          	lw	a1,0(s6)
+ 76e:	8556                	mv	a0,s5
+ 770:	00000097          	auipc	ra,0x0
+ 774:	e8c080e7          	jalr	-372(ra) # 5fc <printint>
+ 778:	8b4a                	mv	s6,s2
+      state = 0;
+ 77a:	4981                	li	s3,0
+ 77c:	b771                	j	708 <vprintf+0x60>
+        printint(fd, va_arg(ap, int), 16, 0);
+ 77e:	008b0913          	addi	s2,s6,8
+ 782:	4681                	li	a3,0
+ 784:	866a                	mv	a2,s10
+ 786:	000b2583          	lw	a1,0(s6)
+ 78a:	8556                	mv	a0,s5
+ 78c:	00000097          	auipc	ra,0x0
+ 790:	e70080e7          	jalr	-400(ra) # 5fc <printint>
+ 794:	8b4a                	mv	s6,s2
+      state = 0;
+ 796:	4981                	li	s3,0
+ 798:	bf85                	j	708 <vprintf+0x60>
+        printptr(fd, va_arg(ap, uint64));
+ 79a:	008b0793          	addi	a5,s6,8
+ 79e:	f8f43423          	sd	a5,-120(s0)
+ 7a2:	000b3983          	ld	s3,0(s6)
+  putc(fd, '0');
+ 7a6:	03000593          	li	a1,48
+ 7aa:	8556                	mv	a0,s5
+ 7ac:	00000097          	auipc	ra,0x0
+ 7b0:	e2e080e7          	jalr	-466(ra) # 5da <putc>
+  putc(fd, 'x');
+ 7b4:	07800593          	li	a1,120
+ 7b8:	8556                	mv	a0,s5
+ 7ba:	00000097          	auipc	ra,0x0
+ 7be:	e20080e7          	jalr	-480(ra) # 5da <putc>
+ 7c2:	896a                	mv	s2,s10
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 7c4:	03c9d793          	srli	a5,s3,0x3c
+ 7c8:	97de                	add	a5,a5,s7
+ 7ca:	0007c583          	lbu	a1,0(a5)
+ 7ce:	8556                	mv	a0,s5
+ 7d0:	00000097          	auipc	ra,0x0
+ 7d4:	e0a080e7          	jalr	-502(ra) # 5da <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+ 7d8:	0992                	slli	s3,s3,0x4
+ 7da:	397d                	addiw	s2,s2,-1
+ 7dc:	fe0914e3          	bnez	s2,7c4 <vprintf+0x11c>
+        printptr(fd, va_arg(ap, uint64));
+ 7e0:	f8843b03          	ld	s6,-120(s0)
+      state = 0;
+ 7e4:	4981                	li	s3,0
+ 7e6:	b70d                	j	708 <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 7e8:	008b0913          	addi	s2,s6,8
+ 7ec:	000b3983          	ld	s3,0(s6)
+        if(s == 0)
+ 7f0:	02098163          	beqz	s3,812 <vprintf+0x16a>
+        while(*s != 0){
+ 7f4:	0009c583          	lbu	a1,0(s3)
+ 7f8:	c5ad                	beqz	a1,862 <vprintf+0x1ba>
+          putc(fd, *s);
+ 7fa:	8556                	mv	a0,s5
+ 7fc:	00000097          	auipc	ra,0x0
+ 800:	dde080e7          	jalr	-546(ra) # 5da <putc>
+          s++;
+ 804:	0985                	addi	s3,s3,1
+        while(*s != 0){
+ 806:	0009c583          	lbu	a1,0(s3)
+ 80a:	f9e5                	bnez	a1,7fa <vprintf+0x152>
+        s = va_arg(ap, char*);
+ 80c:	8b4a                	mv	s6,s2
+      state = 0;
+ 80e:	4981                	li	s3,0
+ 810:	bde5                	j	708 <vprintf+0x60>
+          s = "(null)";
+ 812:	00000997          	auipc	s3,0x0
+ 816:	27e98993          	addi	s3,s3,638 # a90 <malloc+0x124>
+        while(*s != 0){
+ 81a:	85ee                	mv	a1,s11
+ 81c:	bff9                	j	7fa <vprintf+0x152>
+        putc(fd, va_arg(ap, uint));
+ 81e:	008b0913          	addi	s2,s6,8
+ 822:	000b4583          	lbu	a1,0(s6)
+ 826:	8556                	mv	a0,s5
+ 828:	00000097          	auipc	ra,0x0
+ 82c:	db2080e7          	jalr	-590(ra) # 5da <putc>
+ 830:	8b4a                	mv	s6,s2
+      state = 0;
+ 832:	4981                	li	s3,0
+ 834:	bdd1                	j	708 <vprintf+0x60>
+        putc(fd, c);
+ 836:	85d2                	mv	a1,s4
+ 838:	8556                	mv	a0,s5
+ 83a:	00000097          	auipc	ra,0x0
+ 83e:	da0080e7          	jalr	-608(ra) # 5da <putc>
+      state = 0;
+ 842:	4981                	li	s3,0
+ 844:	b5d1                	j	708 <vprintf+0x60>
+        putc(fd, '%');
+ 846:	85d2                	mv	a1,s4
+ 848:	8556                	mv	a0,s5
+ 84a:	00000097          	auipc	ra,0x0
+ 84e:	d90080e7          	jalr	-624(ra) # 5da <putc>
+        putc(fd, c);
+ 852:	85ca                	mv	a1,s2
+ 854:	8556                	mv	a0,s5
+ 856:	00000097          	auipc	ra,0x0
+ 85a:	d84080e7          	jalr	-636(ra) # 5da <putc>
+      state = 0;
+ 85e:	4981                	li	s3,0
+ 860:	b565                	j	708 <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 862:	8b4a                	mv	s6,s2
+      state = 0;
+ 864:	4981                	li	s3,0
+ 866:	b54d                	j	708 <vprintf+0x60>
+    }
+  }
+}
+ 868:	70e6                	ld	ra,120(sp)
+ 86a:	7446                	ld	s0,112(sp)
+ 86c:	74a6                	ld	s1,104(sp)
+ 86e:	7906                	ld	s2,96(sp)
+ 870:	69e6                	ld	s3,88(sp)
+ 872:	6a46                	ld	s4,80(sp)
+ 874:	6aa6                	ld	s5,72(sp)
+ 876:	6b06                	ld	s6,64(sp)
+ 878:	7be2                	ld	s7,56(sp)
+ 87a:	7c42                	ld	s8,48(sp)
+ 87c:	7ca2                	ld	s9,40(sp)
+ 87e:	7d02                	ld	s10,32(sp)
+ 880:	6de2                	ld	s11,24(sp)
+ 882:	6109                	addi	sp,sp,128
+ 884:	8082                	ret
+
+0000000000000886 <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+ 886:	715d                	addi	sp,sp,-80
+ 888:	ec06                	sd	ra,24(sp)
+ 88a:	e822                	sd	s0,16(sp)
+ 88c:	1000                	addi	s0,sp,32
+ 88e:	e010                	sd	a2,0(s0)
+ 890:	e414                	sd	a3,8(s0)
+ 892:	e818                	sd	a4,16(s0)
+ 894:	ec1c                	sd	a5,24(s0)
+ 896:	03043023          	sd	a6,32(s0)
+ 89a:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 89e:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+ 8a2:	8622                	mv	a2,s0
+ 8a4:	00000097          	auipc	ra,0x0
+ 8a8:	e04080e7          	jalr	-508(ra) # 6a8 <vprintf>
+}
+ 8ac:	60e2                	ld	ra,24(sp)
+ 8ae:	6442                	ld	s0,16(sp)
+ 8b0:	6161                	addi	sp,sp,80
+ 8b2:	8082                	ret
+
+00000000000008b4 <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+ 8b4:	711d                	addi	sp,sp,-96
+ 8b6:	ec06                	sd	ra,24(sp)
+ 8b8:	e822                	sd	s0,16(sp)
+ 8ba:	1000                	addi	s0,sp,32
+ 8bc:	e40c                	sd	a1,8(s0)
+ 8be:	e810                	sd	a2,16(s0)
+ 8c0:	ec14                	sd	a3,24(s0)
+ 8c2:	f018                	sd	a4,32(s0)
+ 8c4:	f41c                	sd	a5,40(s0)
+ 8c6:	03043823          	sd	a6,48(s0)
+ 8ca:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 8ce:	00840613          	addi	a2,s0,8
+ 8d2:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+ 8d6:	85aa                	mv	a1,a0
+ 8d8:	4505                	li	a0,1
+ 8da:	00000097          	auipc	ra,0x0
+ 8de:	dce080e7          	jalr	-562(ra) # 6a8 <vprintf>
+}
+ 8e2:	60e2                	ld	ra,24(sp)
+ 8e4:	6442                	ld	s0,16(sp)
+ 8e6:	6125                	addi	sp,sp,96
+ 8e8:	8082                	ret
+
+00000000000008ea <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 8ea:	1141                	addi	sp,sp,-16
+ 8ec:	e422                	sd	s0,8(sp)
+ 8ee:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 8f0:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8f4:	00000797          	auipc	a5,0x0
+ 8f8:	2147b783          	ld	a5,532(a5) # b08 <freep>
+ 8fc:	a02d                	j	926 <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 8fe:	4618                	lw	a4,8(a2)
+ 900:	9f2d                	addw	a4,a4,a1
+ 902:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 906:	6398                	ld	a4,0(a5)
+ 908:	6310                	ld	a2,0(a4)
+ 90a:	a83d                	j	948 <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 90c:	ff852703          	lw	a4,-8(a0)
+ 910:	9f31                	addw	a4,a4,a2
+ 912:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+ 914:	ff053683          	ld	a3,-16(a0)
+ 918:	a091                	j	95c <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 91a:	6398                	ld	a4,0(a5)
+ 91c:	00e7e463          	bltu	a5,a4,924 <free+0x3a>
+ 920:	00e6ea63          	bltu	a3,a4,934 <free+0x4a>
+{
+ 924:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 926:	fed7fae3          	bgeu	a5,a3,91a <free+0x30>
+ 92a:	6398                	ld	a4,0(a5)
+ 92c:	00e6e463          	bltu	a3,a4,934 <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 930:	fee7eae3          	bltu	a5,a4,924 <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+ 934:	ff852583          	lw	a1,-8(a0)
+ 938:	6390                	ld	a2,0(a5)
+ 93a:	02059813          	slli	a6,a1,0x20
+ 93e:	01c85713          	srli	a4,a6,0x1c
+ 942:	9736                	add	a4,a4,a3
+ 944:	fae60de3          	beq	a2,a4,8fe <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 948:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+ 94c:	4790                	lw	a2,8(a5)
+ 94e:	02061593          	slli	a1,a2,0x20
+ 952:	01c5d713          	srli	a4,a1,0x1c
+ 956:	973e                	add	a4,a4,a5
+ 958:	fae68ae3          	beq	a3,a4,90c <free+0x22>
+    p->s.ptr = bp->s.ptr;
+ 95c:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 95e:	00000717          	auipc	a4,0x0
+ 962:	1af73523          	sd	a5,426(a4) # b08 <freep>
+}
+ 966:	6422                	ld	s0,8(sp)
+ 968:	0141                	addi	sp,sp,16
+ 96a:	8082                	ret
+
+000000000000096c <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 96c:	7139                	addi	sp,sp,-64
+ 96e:	fc06                	sd	ra,56(sp)
+ 970:	f822                	sd	s0,48(sp)
+ 972:	f426                	sd	s1,40(sp)
+ 974:	f04a                	sd	s2,32(sp)
+ 976:	ec4e                	sd	s3,24(sp)
+ 978:	e852                	sd	s4,16(sp)
+ 97a:	e456                	sd	s5,8(sp)
+ 97c:	e05a                	sd	s6,0(sp)
+ 97e:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 980:	02051493          	slli	s1,a0,0x20
+ 984:	9081                	srli	s1,s1,0x20
+ 986:	04bd                	addi	s1,s1,15
+ 988:	8091                	srli	s1,s1,0x4
+ 98a:	0014899b          	addiw	s3,s1,1
+ 98e:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+ 990:	00000517          	auipc	a0,0x0
+ 994:	17853503          	ld	a0,376(a0) # b08 <freep>
+ 998:	c515                	beqz	a0,9c4 <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 99a:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 99c:	4798                	lw	a4,8(a5)
+ 99e:	02977f63          	bgeu	a4,s1,9dc <malloc+0x70>
+ 9a2:	8a4e                	mv	s4,s3
+ 9a4:	0009871b          	sext.w	a4,s3
+ 9a8:	6685                	lui	a3,0x1
+ 9aa:	00d77363          	bgeu	a4,a3,9b0 <malloc+0x44>
+ 9ae:	6a05                	lui	s4,0x1
+ 9b0:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+ 9b4:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 9b8:	00000917          	auipc	s2,0x0
+ 9bc:	15090913          	addi	s2,s2,336 # b08 <freep>
+  if(p == (char*)-1)
+ 9c0:	5afd                	li	s5,-1
+ 9c2:	a895                	j	a36 <malloc+0xca>
+    base.s.ptr = freep = prevp = &base;
+ 9c4:	00000797          	auipc	a5,0x0
+ 9c8:	54c78793          	addi	a5,a5,1356 # f10 <base>
+ 9cc:	00000717          	auipc	a4,0x0
+ 9d0:	12f73e23          	sd	a5,316(a4) # b08 <freep>
+ 9d4:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+ 9d6:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+ 9da:	b7e1                	j	9a2 <malloc+0x36>
+      if(p->s.size == nunits)
+ 9dc:	02e48c63          	beq	s1,a4,a14 <malloc+0xa8>
+        p->s.size -= nunits;
+ 9e0:	4137073b          	subw	a4,a4,s3
+ 9e4:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+ 9e6:	02071693          	slli	a3,a4,0x20
+ 9ea:	01c6d713          	srli	a4,a3,0x1c
+ 9ee:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+ 9f0:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+ 9f4:	00000717          	auipc	a4,0x0
+ 9f8:	10a73a23          	sd	a0,276(a4) # b08 <freep>
+      return (void*)(p + 1);
+ 9fc:	01078513          	addi	a0,a5,16
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ a00:	70e2                	ld	ra,56(sp)
+ a02:	7442                	ld	s0,48(sp)
+ a04:	74a2                	ld	s1,40(sp)
+ a06:	7902                	ld	s2,32(sp)
+ a08:	69e2                	ld	s3,24(sp)
+ a0a:	6a42                	ld	s4,16(sp)
+ a0c:	6aa2                	ld	s5,8(sp)
+ a0e:	6b02                	ld	s6,0(sp)
+ a10:	6121                	addi	sp,sp,64
+ a12:	8082                	ret
+        prevp->s.ptr = p->s.ptr;
+ a14:	6398                	ld	a4,0(a5)
+ a16:	e118                	sd	a4,0(a0)
+ a18:	bff1                	j	9f4 <malloc+0x88>
+  hp->s.size = nu;
+ a1a:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+ a1e:	0541                	addi	a0,a0,16
+ a20:	00000097          	auipc	ra,0x0
+ a24:	eca080e7          	jalr	-310(ra) # 8ea <free>
+  return freep;
+ a28:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+ a2c:	d971                	beqz	a0,a00 <malloc+0x94>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ a2e:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ a30:	4798                	lw	a4,8(a5)
+ a32:	fa9775e3          	bgeu	a4,s1,9dc <malloc+0x70>
+    if(p == freep)
+ a36:	00093703          	ld	a4,0(s2)
+ a3a:	853e                	mv	a0,a5
+ a3c:	fef719e3          	bne	a4,a5,a2e <malloc+0xc2>
+  p = sbrk(nu * sizeof(Header));
+ a40:	8552                	mv	a0,s4
+ a42:	00000097          	auipc	ra,0x0
+ a46:	b50080e7          	jalr	-1200(ra) # 592 <sbrk>
+  if(p == (char*)-1)
+ a4a:	fd5518e3          	bne	a0,s5,a1a <malloc+0xae>
+        return 0;
+ a4e:	4501                	li	a0,0
+ a50:	bf45                	j	a00 <malloc+0x94>
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/grep.d os-workshop/user/grep.d
--- xv6-riscv/user/grep.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/grep.d	2022-05-28 22:34:33.000000000 -0300
@@ -0,0 +1 @@
+user/grep.o: user/grep.c kernel/types.h kernel/stat.h user/user.h
Binary files xv6-riscv/user/grep.o and os-workshop/user/grep.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/grep.sym os-workshop/user/grep.sym
--- xv6-riscv/user/grep.sym	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/grep.sym	2022-05-28 22:34:33.000000000 -0300
@@ -0,0 +1,81 @@
+0000000000000000 .text
+0000000000000a58 .rodata
+0000000000000b08 .sbss
+0000000000000b10 .bss
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_aranges
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_line
+0000000000000000 .debug_frame
+0000000000000000 .debug_str
+0000000000000000 .debug_line_str
+0000000000000000 .debug_loclists
+0000000000000000 .debug_rnglists
+0000000000000000 grep.c
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+00000000000005da putc
+00000000000005fc printint
+0000000000000af0 digits
+0000000000000000 umalloc.c
+0000000000000b08 freep
+0000000000000f10 base
+000000000000029e strcpy
+00000000000008b4 printf
+0000000000001301 __global_pointer$
+0000000000000458 memmove
+000000000000004e matchhere
+0000000000000552 mknod
+00000000000005ba semdown
+0000000000000356 gets
+0000000000000b01 __SDATA_BEGIN__
+00000000000005b2 semget
+000000000000058a getpid
+00000000000004ea memcpy
+000000000000011a grep
+000000000000096c malloc
+00000000000005ca semclose
+000000000000059a sleep
+000000000000051a pipe
+000000000000052a write
+0000000000000562 fstat
+0000000000000886 fprintf
+000000000000053a kill
+00000000000006a8 vprintf
+000000000000057a chdir
+0000000000000542 exec
+0000000000000512 wait
+0000000000000522 read
+000000000000055a unlink
+00000000000004b0 memcmp
+0000000000000502 fork
+0000000000000f20 __BSS_END__
+0000000000000592 sbrk
+00000000000005a2 uptime
+0000000000000b01 __bss_start
+0000000000000310 memset
+00000000000001de main
+00000000000005d2 timeout
+0000000000000000 matchstar
+00000000000002ba strcmp
+0000000000000582 dup
+0000000000000b10 buf
+0000000000000b01 __DATA_BEGIN__
+00000000000003ca stat
+0000000000000b01 _edata
+00000000000005aa setp
+0000000000000f20 _end
+00000000000000cc match
+000000000000056a link
+000000000000050a exit
+0000000000000410 atoi
+00000000000002e6 strlen
+000000000000054a open
+00000000000005c2 semup
+0000000000000332 strchr
+0000000000000572 mkdir
+0000000000000532 close
+00000000000008ea free
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/grind.asm os-workshop/user/grind.asm
--- xv6-riscv/user/grind.asm	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/grind.asm	2022-05-28 22:34:37.000000000 -0300
@@ -0,0 +1,2581 @@
+
+user/_grind:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <do_rand>:
+#include "kernel/riscv.h"
+
+// from FreeBSD.
+int
+do_rand(unsigned long *ctx)
+{
+       0:	1141                	addi	sp,sp,-16
+       2:	e422                	sd	s0,8(sp)
+       4:	0800                	addi	s0,sp,16
+ * October 1988, p. 1195.
+ */
+    long hi, lo, x;
+
+    /* Transform to [1, 0x7ffffffe] range. */
+    x = (*ctx % 0x7ffffffe) + 1;
+       6:	611c                	ld	a5,0(a0)
+       8:	80000737          	lui	a4,0x80000
+       c:	ffe74713          	xori	a4,a4,-2
+      10:	02e7f7b3          	remu	a5,a5,a4
+      14:	0785                	addi	a5,a5,1
+    hi = x / 127773;
+    lo = x % 127773;
+      16:	66fd                	lui	a3,0x1f
+      18:	31d68693          	addi	a3,a3,797 # 1f31d <__global_pointer$+0x1d424>
+      1c:	02d7e733          	rem	a4,a5,a3
+    x = 16807 * lo - 2836 * hi;
+      20:	6611                	lui	a2,0x4
+      22:	1a760613          	addi	a2,a2,423 # 41a7 <__global_pointer$+0x22ae>
+      26:	02c70733          	mul	a4,a4,a2
+    hi = x / 127773;
+      2a:	02d7c7b3          	div	a5,a5,a3
+    x = 16807 * lo - 2836 * hi;
+      2e:	76fd                	lui	a3,0xfffff
+      30:	4ec68693          	addi	a3,a3,1260 # fffffffffffff4ec <__global_pointer$+0xffffffffffffd5f3>
+      34:	02d787b3          	mul	a5,a5,a3
+      38:	97ba                	add	a5,a5,a4
+    if (x < 0)
+      3a:	0007c963          	bltz	a5,4c <do_rand+0x4c>
+        x += 0x7fffffff;
+    /* Transform to [0, 0x7ffffffd] range. */
+    x--;
+      3e:	17fd                	addi	a5,a5,-1
+    *ctx = x;
+      40:	e11c                	sd	a5,0(a0)
+    return (x);
+}
+      42:	0007851b          	sext.w	a0,a5
+      46:	6422                	ld	s0,8(sp)
+      48:	0141                	addi	sp,sp,16
+      4a:	8082                	ret
+        x += 0x7fffffff;
+      4c:	80000737          	lui	a4,0x80000
+      50:	fff74713          	not	a4,a4
+      54:	97ba                	add	a5,a5,a4
+      56:	b7e5                	j	3e <do_rand+0x3e>
+
+0000000000000058 <rand>:
+
+unsigned long rand_next = 1;
+
+int
+rand(void)
+{
+      58:	1141                	addi	sp,sp,-16
+      5a:	e406                	sd	ra,8(sp)
+      5c:	e022                	sd	s0,0(sp)
+      5e:	0800                	addi	s0,sp,16
+    return (do_rand(&rand_next));
+      60:	00001517          	auipc	a0,0x1
+      64:	6a050513          	addi	a0,a0,1696 # 1700 <rand_next>
+      68:	00000097          	auipc	ra,0x0
+      6c:	f98080e7          	jalr	-104(ra) # 0 <do_rand>
+}
+      70:	60a2                	ld	ra,8(sp)
+      72:	6402                	ld	s0,0(sp)
+      74:	0141                	addi	sp,sp,16
+      76:	8082                	ret
+
+0000000000000078 <go>:
+
+void
+go(int which_child)
+{
+      78:	7159                	addi	sp,sp,-112
+      7a:	f486                	sd	ra,104(sp)
+      7c:	f0a2                	sd	s0,96(sp)
+      7e:	eca6                	sd	s1,88(sp)
+      80:	e8ca                	sd	s2,80(sp)
+      82:	e4ce                	sd	s3,72(sp)
+      84:	e0d2                	sd	s4,64(sp)
+      86:	fc56                	sd	s5,56(sp)
+      88:	f85a                	sd	s6,48(sp)
+      8a:	1880                	addi	s0,sp,112
+      8c:	84aa                	mv	s1,a0
+  int fd = -1;
+  static char buf[999];
+  char *break0 = sbrk(0);
+      8e:	4501                	li	a0,0
+      90:	00001097          	auipc	ra,0x1
+      94:	df0080e7          	jalr	-528(ra) # e80 <sbrk>
+      98:	8aaa                	mv	s5,a0
+  uint64 iters = 0;
+
+  mkdir("grindir");
+      9a:	00001517          	auipc	a0,0x1
+      9e:	2a650513          	addi	a0,a0,678 # 1340 <malloc+0xe6>
+      a2:	00001097          	auipc	ra,0x1
+      a6:	dbe080e7          	jalr	-578(ra) # e60 <mkdir>
+  if(chdir("grindir") != 0){
+      aa:	00001517          	auipc	a0,0x1
+      ae:	29650513          	addi	a0,a0,662 # 1340 <malloc+0xe6>
+      b2:	00001097          	auipc	ra,0x1
+      b6:	db6080e7          	jalr	-586(ra) # e68 <chdir>
+      ba:	cd11                	beqz	a0,d6 <go+0x5e>
+    printf("grind: chdir grindir failed\n");
+      bc:	00001517          	auipc	a0,0x1
+      c0:	28c50513          	addi	a0,a0,652 # 1348 <malloc+0xee>
+      c4:	00001097          	auipc	ra,0x1
+      c8:	0de080e7          	jalr	222(ra) # 11a2 <printf>
+    exit(1);
+      cc:	4505                	li	a0,1
+      ce:	00001097          	auipc	ra,0x1
+      d2:	d2a080e7          	jalr	-726(ra) # df8 <exit>
+  }
+  chdir("/");
+      d6:	00001517          	auipc	a0,0x1
+      da:	29250513          	addi	a0,a0,658 # 1368 <malloc+0x10e>
+      de:	00001097          	auipc	ra,0x1
+      e2:	d8a080e7          	jalr	-630(ra) # e68 <chdir>
+  
+  while(1){
+    iters++;
+    if((iters % 500) == 0)
+      e6:	00001997          	auipc	s3,0x1
+      ea:	29298993          	addi	s3,s3,658 # 1378 <malloc+0x11e>
+      ee:	c489                	beqz	s1,f8 <go+0x80>
+      f0:	00001997          	auipc	s3,0x1
+      f4:	28098993          	addi	s3,s3,640 # 1370 <malloc+0x116>
+    iters++;
+      f8:	4485                	li	s1,1
+  int fd = -1;
+      fa:	5a7d                	li	s4,-1
+      fc:	00001917          	auipc	s2,0x1
+     100:	52c90913          	addi	s2,s2,1324 # 1628 <malloc+0x3ce>
+     104:	a825                	j	13c <go+0xc4>
+      write(1, which_child?"B":"A", 1);
+    int what = rand() % 23;
+    if(what == 1){
+      close(open("grindir/../a", O_CREATE|O_RDWR));
+     106:	20200593          	li	a1,514
+     10a:	00001517          	auipc	a0,0x1
+     10e:	27650513          	addi	a0,a0,630 # 1380 <malloc+0x126>
+     112:	00001097          	auipc	ra,0x1
+     116:	d26080e7          	jalr	-730(ra) # e38 <open>
+     11a:	00001097          	auipc	ra,0x1
+     11e:	d06080e7          	jalr	-762(ra) # e20 <close>
+    iters++;
+     122:	0485                	addi	s1,s1,1
+    if((iters % 500) == 0)
+     124:	1f400793          	li	a5,500
+     128:	02f4f7b3          	remu	a5,s1,a5
+     12c:	eb81                	bnez	a5,13c <go+0xc4>
+      write(1, which_child?"B":"A", 1);
+     12e:	4605                	li	a2,1
+     130:	85ce                	mv	a1,s3
+     132:	4505                	li	a0,1
+     134:	00001097          	auipc	ra,0x1
+     138:	ce4080e7          	jalr	-796(ra) # e18 <write>
+    int what = rand() % 23;
+     13c:	00000097          	auipc	ra,0x0
+     140:	f1c080e7          	jalr	-228(ra) # 58 <rand>
+     144:	47dd                	li	a5,23
+     146:	02f5653b          	remw	a0,a0,a5
+    if(what == 1){
+     14a:	4785                	li	a5,1
+     14c:	faf50de3          	beq	a0,a5,106 <go+0x8e>
+    } else if(what == 2){
+     150:	47d9                	li	a5,22
+     152:	fca7e8e3          	bltu	a5,a0,122 <go+0xaa>
+     156:	050a                	slli	a0,a0,0x2
+     158:	954a                	add	a0,a0,s2
+     15a:	411c                	lw	a5,0(a0)
+     15c:	97ca                	add	a5,a5,s2
+     15e:	8782                	jr	a5
+      close(open("grindir/../grindir/../b", O_CREATE|O_RDWR));
+     160:	20200593          	li	a1,514
+     164:	00001517          	auipc	a0,0x1
+     168:	22c50513          	addi	a0,a0,556 # 1390 <malloc+0x136>
+     16c:	00001097          	auipc	ra,0x1
+     170:	ccc080e7          	jalr	-820(ra) # e38 <open>
+     174:	00001097          	auipc	ra,0x1
+     178:	cac080e7          	jalr	-852(ra) # e20 <close>
+     17c:	b75d                	j	122 <go+0xaa>
+    } else if(what == 3){
+      unlink("grindir/../a");
+     17e:	00001517          	auipc	a0,0x1
+     182:	20250513          	addi	a0,a0,514 # 1380 <malloc+0x126>
+     186:	00001097          	auipc	ra,0x1
+     18a:	cc2080e7          	jalr	-830(ra) # e48 <unlink>
+     18e:	bf51                	j	122 <go+0xaa>
+    } else if(what == 4){
+      if(chdir("grindir") != 0){
+     190:	00001517          	auipc	a0,0x1
+     194:	1b050513          	addi	a0,a0,432 # 1340 <malloc+0xe6>
+     198:	00001097          	auipc	ra,0x1
+     19c:	cd0080e7          	jalr	-816(ra) # e68 <chdir>
+     1a0:	e115                	bnez	a0,1c4 <go+0x14c>
+        printf("grind: chdir grindir failed\n");
+        exit(1);
+      }
+      unlink("../b");
+     1a2:	00001517          	auipc	a0,0x1
+     1a6:	20650513          	addi	a0,a0,518 # 13a8 <malloc+0x14e>
+     1aa:	00001097          	auipc	ra,0x1
+     1ae:	c9e080e7          	jalr	-866(ra) # e48 <unlink>
+      chdir("/");
+     1b2:	00001517          	auipc	a0,0x1
+     1b6:	1b650513          	addi	a0,a0,438 # 1368 <malloc+0x10e>
+     1ba:	00001097          	auipc	ra,0x1
+     1be:	cae080e7          	jalr	-850(ra) # e68 <chdir>
+     1c2:	b785                	j	122 <go+0xaa>
+        printf("grind: chdir grindir failed\n");
+     1c4:	00001517          	auipc	a0,0x1
+     1c8:	18450513          	addi	a0,a0,388 # 1348 <malloc+0xee>
+     1cc:	00001097          	auipc	ra,0x1
+     1d0:	fd6080e7          	jalr	-42(ra) # 11a2 <printf>
+        exit(1);
+     1d4:	4505                	li	a0,1
+     1d6:	00001097          	auipc	ra,0x1
+     1da:	c22080e7          	jalr	-990(ra) # df8 <exit>
+    } else if(what == 5){
+      close(fd);
+     1de:	8552                	mv	a0,s4
+     1e0:	00001097          	auipc	ra,0x1
+     1e4:	c40080e7          	jalr	-960(ra) # e20 <close>
+      fd = open("/grindir/../a", O_CREATE|O_RDWR);
+     1e8:	20200593          	li	a1,514
+     1ec:	00001517          	auipc	a0,0x1
+     1f0:	1c450513          	addi	a0,a0,452 # 13b0 <malloc+0x156>
+     1f4:	00001097          	auipc	ra,0x1
+     1f8:	c44080e7          	jalr	-956(ra) # e38 <open>
+     1fc:	8a2a                	mv	s4,a0
+     1fe:	b715                	j	122 <go+0xaa>
+    } else if(what == 6){
+      close(fd);
+     200:	8552                	mv	a0,s4
+     202:	00001097          	auipc	ra,0x1
+     206:	c1e080e7          	jalr	-994(ra) # e20 <close>
+      fd = open("/./grindir/./../b", O_CREATE|O_RDWR);
+     20a:	20200593          	li	a1,514
+     20e:	00001517          	auipc	a0,0x1
+     212:	1b250513          	addi	a0,a0,434 # 13c0 <malloc+0x166>
+     216:	00001097          	auipc	ra,0x1
+     21a:	c22080e7          	jalr	-990(ra) # e38 <open>
+     21e:	8a2a                	mv	s4,a0
+     220:	b709                	j	122 <go+0xaa>
+    } else if(what == 7){
+      write(fd, buf, sizeof(buf));
+     222:	3e700613          	li	a2,999
+     226:	00001597          	auipc	a1,0x1
+     22a:	4ea58593          	addi	a1,a1,1258 # 1710 <buf.0>
+     22e:	8552                	mv	a0,s4
+     230:	00001097          	auipc	ra,0x1
+     234:	be8080e7          	jalr	-1048(ra) # e18 <write>
+     238:	b5ed                	j	122 <go+0xaa>
+    } else if(what == 8){
+      read(fd, buf, sizeof(buf));
+     23a:	3e700613          	li	a2,999
+     23e:	00001597          	auipc	a1,0x1
+     242:	4d258593          	addi	a1,a1,1234 # 1710 <buf.0>
+     246:	8552                	mv	a0,s4
+     248:	00001097          	auipc	ra,0x1
+     24c:	bc8080e7          	jalr	-1080(ra) # e10 <read>
+     250:	bdc9                	j	122 <go+0xaa>
+    } else if(what == 9){
+      mkdir("grindir/../a");
+     252:	00001517          	auipc	a0,0x1
+     256:	12e50513          	addi	a0,a0,302 # 1380 <malloc+0x126>
+     25a:	00001097          	auipc	ra,0x1
+     25e:	c06080e7          	jalr	-1018(ra) # e60 <mkdir>
+      close(open("a/../a/./a", O_CREATE|O_RDWR));
+     262:	20200593          	li	a1,514
+     266:	00001517          	auipc	a0,0x1
+     26a:	17250513          	addi	a0,a0,370 # 13d8 <malloc+0x17e>
+     26e:	00001097          	auipc	ra,0x1
+     272:	bca080e7          	jalr	-1078(ra) # e38 <open>
+     276:	00001097          	auipc	ra,0x1
+     27a:	baa080e7          	jalr	-1110(ra) # e20 <close>
+      unlink("a/a");
+     27e:	00001517          	auipc	a0,0x1
+     282:	16a50513          	addi	a0,a0,362 # 13e8 <malloc+0x18e>
+     286:	00001097          	auipc	ra,0x1
+     28a:	bc2080e7          	jalr	-1086(ra) # e48 <unlink>
+     28e:	bd51                	j	122 <go+0xaa>
+    } else if(what == 10){
+      mkdir("/../b");
+     290:	00001517          	auipc	a0,0x1
+     294:	16050513          	addi	a0,a0,352 # 13f0 <malloc+0x196>
+     298:	00001097          	auipc	ra,0x1
+     29c:	bc8080e7          	jalr	-1080(ra) # e60 <mkdir>
+      close(open("grindir/../b/b", O_CREATE|O_RDWR));
+     2a0:	20200593          	li	a1,514
+     2a4:	00001517          	auipc	a0,0x1
+     2a8:	15450513          	addi	a0,a0,340 # 13f8 <malloc+0x19e>
+     2ac:	00001097          	auipc	ra,0x1
+     2b0:	b8c080e7          	jalr	-1140(ra) # e38 <open>
+     2b4:	00001097          	auipc	ra,0x1
+     2b8:	b6c080e7          	jalr	-1172(ra) # e20 <close>
+      unlink("b/b");
+     2bc:	00001517          	auipc	a0,0x1
+     2c0:	14c50513          	addi	a0,a0,332 # 1408 <malloc+0x1ae>
+     2c4:	00001097          	auipc	ra,0x1
+     2c8:	b84080e7          	jalr	-1148(ra) # e48 <unlink>
+     2cc:	bd99                	j	122 <go+0xaa>
+    } else if(what == 11){
+      unlink("b");
+     2ce:	00001517          	auipc	a0,0x1
+     2d2:	10250513          	addi	a0,a0,258 # 13d0 <malloc+0x176>
+     2d6:	00001097          	auipc	ra,0x1
+     2da:	b72080e7          	jalr	-1166(ra) # e48 <unlink>
+      link("../grindir/./../a", "../b");
+     2de:	00001597          	auipc	a1,0x1
+     2e2:	0ca58593          	addi	a1,a1,202 # 13a8 <malloc+0x14e>
+     2e6:	00001517          	auipc	a0,0x1
+     2ea:	12a50513          	addi	a0,a0,298 # 1410 <malloc+0x1b6>
+     2ee:	00001097          	auipc	ra,0x1
+     2f2:	b6a080e7          	jalr	-1174(ra) # e58 <link>
+     2f6:	b535                	j	122 <go+0xaa>
+    } else if(what == 12){
+      unlink("../grindir/../a");
+     2f8:	00001517          	auipc	a0,0x1
+     2fc:	13050513          	addi	a0,a0,304 # 1428 <malloc+0x1ce>
+     300:	00001097          	auipc	ra,0x1
+     304:	b48080e7          	jalr	-1208(ra) # e48 <unlink>
+      link(".././b", "/grindir/../a");
+     308:	00001597          	auipc	a1,0x1
+     30c:	0a858593          	addi	a1,a1,168 # 13b0 <malloc+0x156>
+     310:	00001517          	auipc	a0,0x1
+     314:	12850513          	addi	a0,a0,296 # 1438 <malloc+0x1de>
+     318:	00001097          	auipc	ra,0x1
+     31c:	b40080e7          	jalr	-1216(ra) # e58 <link>
+     320:	b509                	j	122 <go+0xaa>
+    } else if(what == 13){
+      int pid = fork();
+     322:	00001097          	auipc	ra,0x1
+     326:	ace080e7          	jalr	-1330(ra) # df0 <fork>
+      if(pid == 0){
+     32a:	c909                	beqz	a0,33c <go+0x2c4>
+        exit(0);
+      } else if(pid < 0){
+     32c:	00054c63          	bltz	a0,344 <go+0x2cc>
+        printf("grind: fork failed\n");
+        exit(1);
+      }
+      wait(0);
+     330:	4501                	li	a0,0
+     332:	00001097          	auipc	ra,0x1
+     336:	ace080e7          	jalr	-1330(ra) # e00 <wait>
+     33a:	b3e5                	j	122 <go+0xaa>
+        exit(0);
+     33c:	00001097          	auipc	ra,0x1
+     340:	abc080e7          	jalr	-1348(ra) # df8 <exit>
+        printf("grind: fork failed\n");
+     344:	00001517          	auipc	a0,0x1
+     348:	0fc50513          	addi	a0,a0,252 # 1440 <malloc+0x1e6>
+     34c:	00001097          	auipc	ra,0x1
+     350:	e56080e7          	jalr	-426(ra) # 11a2 <printf>
+        exit(1);
+     354:	4505                	li	a0,1
+     356:	00001097          	auipc	ra,0x1
+     35a:	aa2080e7          	jalr	-1374(ra) # df8 <exit>
+    } else if(what == 14){
+      int pid = fork();
+     35e:	00001097          	auipc	ra,0x1
+     362:	a92080e7          	jalr	-1390(ra) # df0 <fork>
+      if(pid == 0){
+     366:	c909                	beqz	a0,378 <go+0x300>
+        fork();
+        fork();
+        exit(0);
+      } else if(pid < 0){
+     368:	02054563          	bltz	a0,392 <go+0x31a>
+        printf("grind: fork failed\n");
+        exit(1);
+      }
+      wait(0);
+     36c:	4501                	li	a0,0
+     36e:	00001097          	auipc	ra,0x1
+     372:	a92080e7          	jalr	-1390(ra) # e00 <wait>
+     376:	b375                	j	122 <go+0xaa>
+        fork();
+     378:	00001097          	auipc	ra,0x1
+     37c:	a78080e7          	jalr	-1416(ra) # df0 <fork>
+        fork();
+     380:	00001097          	auipc	ra,0x1
+     384:	a70080e7          	jalr	-1424(ra) # df0 <fork>
+        exit(0);
+     388:	4501                	li	a0,0
+     38a:	00001097          	auipc	ra,0x1
+     38e:	a6e080e7          	jalr	-1426(ra) # df8 <exit>
+        printf("grind: fork failed\n");
+     392:	00001517          	auipc	a0,0x1
+     396:	0ae50513          	addi	a0,a0,174 # 1440 <malloc+0x1e6>
+     39a:	00001097          	auipc	ra,0x1
+     39e:	e08080e7          	jalr	-504(ra) # 11a2 <printf>
+        exit(1);
+     3a2:	4505                	li	a0,1
+     3a4:	00001097          	auipc	ra,0x1
+     3a8:	a54080e7          	jalr	-1452(ra) # df8 <exit>
+    } else if(what == 15){
+      sbrk(6011);
+     3ac:	6505                	lui	a0,0x1
+     3ae:	77b50513          	addi	a0,a0,1915 # 177b <buf.0+0x6b>
+     3b2:	00001097          	auipc	ra,0x1
+     3b6:	ace080e7          	jalr	-1330(ra) # e80 <sbrk>
+     3ba:	b3a5                	j	122 <go+0xaa>
+    } else if(what == 16){
+      if(sbrk(0) > break0)
+     3bc:	4501                	li	a0,0
+     3be:	00001097          	auipc	ra,0x1
+     3c2:	ac2080e7          	jalr	-1342(ra) # e80 <sbrk>
+     3c6:	d4aafee3          	bgeu	s5,a0,122 <go+0xaa>
+        sbrk(-(sbrk(0) - break0));
+     3ca:	4501                	li	a0,0
+     3cc:	00001097          	auipc	ra,0x1
+     3d0:	ab4080e7          	jalr	-1356(ra) # e80 <sbrk>
+     3d4:	40aa853b          	subw	a0,s5,a0
+     3d8:	00001097          	auipc	ra,0x1
+     3dc:	aa8080e7          	jalr	-1368(ra) # e80 <sbrk>
+     3e0:	b389                	j	122 <go+0xaa>
+    } else if(what == 17){
+      int pid = fork();
+     3e2:	00001097          	auipc	ra,0x1
+     3e6:	a0e080e7          	jalr	-1522(ra) # df0 <fork>
+     3ea:	8b2a                	mv	s6,a0
+      if(pid == 0){
+     3ec:	c51d                	beqz	a0,41a <go+0x3a2>
+        close(open("a", O_CREATE|O_RDWR));
+        exit(0);
+      } else if(pid < 0){
+     3ee:	04054963          	bltz	a0,440 <go+0x3c8>
+        printf("grind: fork failed\n");
+        exit(1);
+      }
+      if(chdir("../grindir/..") != 0){
+     3f2:	00001517          	auipc	a0,0x1
+     3f6:	06650513          	addi	a0,a0,102 # 1458 <malloc+0x1fe>
+     3fa:	00001097          	auipc	ra,0x1
+     3fe:	a6e080e7          	jalr	-1426(ra) # e68 <chdir>
+     402:	ed21                	bnez	a0,45a <go+0x3e2>
+        printf("grind: chdir failed\n");
+        exit(1);
+      }
+      kill(pid);
+     404:	855a                	mv	a0,s6
+     406:	00001097          	auipc	ra,0x1
+     40a:	a22080e7          	jalr	-1502(ra) # e28 <kill>
+      wait(0);
+     40e:	4501                	li	a0,0
+     410:	00001097          	auipc	ra,0x1
+     414:	9f0080e7          	jalr	-1552(ra) # e00 <wait>
+     418:	b329                	j	122 <go+0xaa>
+        close(open("a", O_CREATE|O_RDWR));
+     41a:	20200593          	li	a1,514
+     41e:	00001517          	auipc	a0,0x1
+     422:	00250513          	addi	a0,a0,2 # 1420 <malloc+0x1c6>
+     426:	00001097          	auipc	ra,0x1
+     42a:	a12080e7          	jalr	-1518(ra) # e38 <open>
+     42e:	00001097          	auipc	ra,0x1
+     432:	9f2080e7          	jalr	-1550(ra) # e20 <close>
+        exit(0);
+     436:	4501                	li	a0,0
+     438:	00001097          	auipc	ra,0x1
+     43c:	9c0080e7          	jalr	-1600(ra) # df8 <exit>
+        printf("grind: fork failed\n");
+     440:	00001517          	auipc	a0,0x1
+     444:	00050513          	mv	a0,a0
+     448:	00001097          	auipc	ra,0x1
+     44c:	d5a080e7          	jalr	-678(ra) # 11a2 <printf>
+        exit(1);
+     450:	4505                	li	a0,1
+     452:	00001097          	auipc	ra,0x1
+     456:	9a6080e7          	jalr	-1626(ra) # df8 <exit>
+        printf("grind: chdir failed\n");
+     45a:	00001517          	auipc	a0,0x1
+     45e:	00e50513          	addi	a0,a0,14 # 1468 <malloc+0x20e>
+     462:	00001097          	auipc	ra,0x1
+     466:	d40080e7          	jalr	-704(ra) # 11a2 <printf>
+        exit(1);
+     46a:	4505                	li	a0,1
+     46c:	00001097          	auipc	ra,0x1
+     470:	98c080e7          	jalr	-1652(ra) # df8 <exit>
+    } else if(what == 18){
+      int pid = fork();
+     474:	00001097          	auipc	ra,0x1
+     478:	97c080e7          	jalr	-1668(ra) # df0 <fork>
+      if(pid == 0){
+     47c:	c909                	beqz	a0,48e <go+0x416>
+        kill(getpid());
+        exit(0);
+      } else if(pid < 0){
+     47e:	02054563          	bltz	a0,4a8 <go+0x430>
+        printf("grind: fork failed\n");
+        exit(1);
+      }
+      wait(0);
+     482:	4501                	li	a0,0
+     484:	00001097          	auipc	ra,0x1
+     488:	97c080e7          	jalr	-1668(ra) # e00 <wait>
+     48c:	b959                	j	122 <go+0xaa>
+        kill(getpid());
+     48e:	00001097          	auipc	ra,0x1
+     492:	9ea080e7          	jalr	-1558(ra) # e78 <getpid>
+     496:	00001097          	auipc	ra,0x1
+     49a:	992080e7          	jalr	-1646(ra) # e28 <kill>
+        exit(0);
+     49e:	4501                	li	a0,0
+     4a0:	00001097          	auipc	ra,0x1
+     4a4:	958080e7          	jalr	-1704(ra) # df8 <exit>
+        printf("grind: fork failed\n");
+     4a8:	00001517          	auipc	a0,0x1
+     4ac:	f9850513          	addi	a0,a0,-104 # 1440 <malloc+0x1e6>
+     4b0:	00001097          	auipc	ra,0x1
+     4b4:	cf2080e7          	jalr	-782(ra) # 11a2 <printf>
+        exit(1);
+     4b8:	4505                	li	a0,1
+     4ba:	00001097          	auipc	ra,0x1
+     4be:	93e080e7          	jalr	-1730(ra) # df8 <exit>
+    } else if(what == 19){
+      int fds[2];
+      if(pipe(fds) < 0){
+     4c2:	fa840513          	addi	a0,s0,-88
+     4c6:	00001097          	auipc	ra,0x1
+     4ca:	942080e7          	jalr	-1726(ra) # e08 <pipe>
+     4ce:	02054b63          	bltz	a0,504 <go+0x48c>
+        printf("grind: pipe failed\n");
+        exit(1);
+      }
+      int pid = fork();
+     4d2:	00001097          	auipc	ra,0x1
+     4d6:	91e080e7          	jalr	-1762(ra) # df0 <fork>
+      if(pid == 0){
+     4da:	c131                	beqz	a0,51e <go+0x4a6>
+          printf("grind: pipe write failed\n");
+        char c;
+        if(read(fds[0], &c, 1) != 1)
+          printf("grind: pipe read failed\n");
+        exit(0);
+      } else if(pid < 0){
+     4dc:	0a054a63          	bltz	a0,590 <go+0x518>
+        printf("grind: fork failed\n");
+        exit(1);
+      }
+      close(fds[0]);
+     4e0:	fa842503          	lw	a0,-88(s0)
+     4e4:	00001097          	auipc	ra,0x1
+     4e8:	93c080e7          	jalr	-1732(ra) # e20 <close>
+      close(fds[1]);
+     4ec:	fac42503          	lw	a0,-84(s0)
+     4f0:	00001097          	auipc	ra,0x1
+     4f4:	930080e7          	jalr	-1744(ra) # e20 <close>
+      wait(0);
+     4f8:	4501                	li	a0,0
+     4fa:	00001097          	auipc	ra,0x1
+     4fe:	906080e7          	jalr	-1786(ra) # e00 <wait>
+     502:	b105                	j	122 <go+0xaa>
+        printf("grind: pipe failed\n");
+     504:	00001517          	auipc	a0,0x1
+     508:	f7c50513          	addi	a0,a0,-132 # 1480 <malloc+0x226>
+     50c:	00001097          	auipc	ra,0x1
+     510:	c96080e7          	jalr	-874(ra) # 11a2 <printf>
+        exit(1);
+     514:	4505                	li	a0,1
+     516:	00001097          	auipc	ra,0x1
+     51a:	8e2080e7          	jalr	-1822(ra) # df8 <exit>
+        fork();
+     51e:	00001097          	auipc	ra,0x1
+     522:	8d2080e7          	jalr	-1838(ra) # df0 <fork>
+        fork();
+     526:	00001097          	auipc	ra,0x1
+     52a:	8ca080e7          	jalr	-1846(ra) # df0 <fork>
+        if(write(fds[1], "x", 1) != 1)
+     52e:	4605                	li	a2,1
+     530:	00001597          	auipc	a1,0x1
+     534:	f6858593          	addi	a1,a1,-152 # 1498 <malloc+0x23e>
+     538:	fac42503          	lw	a0,-84(s0)
+     53c:	00001097          	auipc	ra,0x1
+     540:	8dc080e7          	jalr	-1828(ra) # e18 <write>
+     544:	4785                	li	a5,1
+     546:	02f51363          	bne	a0,a5,56c <go+0x4f4>
+        if(read(fds[0], &c, 1) != 1)
+     54a:	4605                	li	a2,1
+     54c:	fa040593          	addi	a1,s0,-96
+     550:	fa842503          	lw	a0,-88(s0)
+     554:	00001097          	auipc	ra,0x1
+     558:	8bc080e7          	jalr	-1860(ra) # e10 <read>
+     55c:	4785                	li	a5,1
+     55e:	02f51063          	bne	a0,a5,57e <go+0x506>
+        exit(0);
+     562:	4501                	li	a0,0
+     564:	00001097          	auipc	ra,0x1
+     568:	894080e7          	jalr	-1900(ra) # df8 <exit>
+          printf("grind: pipe write failed\n");
+     56c:	00001517          	auipc	a0,0x1
+     570:	f3450513          	addi	a0,a0,-204 # 14a0 <malloc+0x246>
+     574:	00001097          	auipc	ra,0x1
+     578:	c2e080e7          	jalr	-978(ra) # 11a2 <printf>
+     57c:	b7f9                	j	54a <go+0x4d2>
+          printf("grind: pipe read failed\n");
+     57e:	00001517          	auipc	a0,0x1
+     582:	f4250513          	addi	a0,a0,-190 # 14c0 <malloc+0x266>
+     586:	00001097          	auipc	ra,0x1
+     58a:	c1c080e7          	jalr	-996(ra) # 11a2 <printf>
+     58e:	bfd1                	j	562 <go+0x4ea>
+        printf("grind: fork failed\n");
+     590:	00001517          	auipc	a0,0x1
+     594:	eb050513          	addi	a0,a0,-336 # 1440 <malloc+0x1e6>
+     598:	00001097          	auipc	ra,0x1
+     59c:	c0a080e7          	jalr	-1014(ra) # 11a2 <printf>
+        exit(1);
+     5a0:	4505                	li	a0,1
+     5a2:	00001097          	auipc	ra,0x1
+     5a6:	856080e7          	jalr	-1962(ra) # df8 <exit>
+    } else if(what == 20){
+      int pid = fork();
+     5aa:	00001097          	auipc	ra,0x1
+     5ae:	846080e7          	jalr	-1978(ra) # df0 <fork>
+      if(pid == 0){
+     5b2:	c909                	beqz	a0,5c4 <go+0x54c>
+        chdir("a");
+        unlink("../a");
+        fd = open("x", O_CREATE|O_RDWR);
+        unlink("x");
+        exit(0);
+      } else if(pid < 0){
+     5b4:	06054f63          	bltz	a0,632 <go+0x5ba>
+        printf("grind: fork failed\n");
+        exit(1);
+      }
+      wait(0);
+     5b8:	4501                	li	a0,0
+     5ba:	00001097          	auipc	ra,0x1
+     5be:	846080e7          	jalr	-1978(ra) # e00 <wait>
+     5c2:	b685                	j	122 <go+0xaa>
+        unlink("a");
+     5c4:	00001517          	auipc	a0,0x1
+     5c8:	e5c50513          	addi	a0,a0,-420 # 1420 <malloc+0x1c6>
+     5cc:	00001097          	auipc	ra,0x1
+     5d0:	87c080e7          	jalr	-1924(ra) # e48 <unlink>
+        mkdir("a");
+     5d4:	00001517          	auipc	a0,0x1
+     5d8:	e4c50513          	addi	a0,a0,-436 # 1420 <malloc+0x1c6>
+     5dc:	00001097          	auipc	ra,0x1
+     5e0:	884080e7          	jalr	-1916(ra) # e60 <mkdir>
+        chdir("a");
+     5e4:	00001517          	auipc	a0,0x1
+     5e8:	e3c50513          	addi	a0,a0,-452 # 1420 <malloc+0x1c6>
+     5ec:	00001097          	auipc	ra,0x1
+     5f0:	87c080e7          	jalr	-1924(ra) # e68 <chdir>
+        unlink("../a");
+     5f4:	00001517          	auipc	a0,0x1
+     5f8:	d9450513          	addi	a0,a0,-620 # 1388 <malloc+0x12e>
+     5fc:	00001097          	auipc	ra,0x1
+     600:	84c080e7          	jalr	-1972(ra) # e48 <unlink>
+        fd = open("x", O_CREATE|O_RDWR);
+     604:	20200593          	li	a1,514
+     608:	00001517          	auipc	a0,0x1
+     60c:	e9050513          	addi	a0,a0,-368 # 1498 <malloc+0x23e>
+     610:	00001097          	auipc	ra,0x1
+     614:	828080e7          	jalr	-2008(ra) # e38 <open>
+        unlink("x");
+     618:	00001517          	auipc	a0,0x1
+     61c:	e8050513          	addi	a0,a0,-384 # 1498 <malloc+0x23e>
+     620:	00001097          	auipc	ra,0x1
+     624:	828080e7          	jalr	-2008(ra) # e48 <unlink>
+        exit(0);
+     628:	4501                	li	a0,0
+     62a:	00000097          	auipc	ra,0x0
+     62e:	7ce080e7          	jalr	1998(ra) # df8 <exit>
+        printf("grind: fork failed\n");
+     632:	00001517          	auipc	a0,0x1
+     636:	e0e50513          	addi	a0,a0,-498 # 1440 <malloc+0x1e6>
+     63a:	00001097          	auipc	ra,0x1
+     63e:	b68080e7          	jalr	-1176(ra) # 11a2 <printf>
+        exit(1);
+     642:	4505                	li	a0,1
+     644:	00000097          	auipc	ra,0x0
+     648:	7b4080e7          	jalr	1972(ra) # df8 <exit>
+    } else if(what == 21){
+      unlink("c");
+     64c:	00001517          	auipc	a0,0x1
+     650:	e9450513          	addi	a0,a0,-364 # 14e0 <malloc+0x286>
+     654:	00000097          	auipc	ra,0x0
+     658:	7f4080e7          	jalr	2036(ra) # e48 <unlink>
+      // should always succeed. check that there are free i-nodes,
+      // file descriptors, blocks.
+      int fd1 = open("c", O_CREATE|O_RDWR);
+     65c:	20200593          	li	a1,514
+     660:	00001517          	auipc	a0,0x1
+     664:	e8050513          	addi	a0,a0,-384 # 14e0 <malloc+0x286>
+     668:	00000097          	auipc	ra,0x0
+     66c:	7d0080e7          	jalr	2000(ra) # e38 <open>
+     670:	8b2a                	mv	s6,a0
+      if(fd1 < 0){
+     672:	04054f63          	bltz	a0,6d0 <go+0x658>
+        printf("grind: create c failed\n");
+        exit(1);
+      }
+      if(write(fd1, "x", 1) != 1){
+     676:	4605                	li	a2,1
+     678:	00001597          	auipc	a1,0x1
+     67c:	e2058593          	addi	a1,a1,-480 # 1498 <malloc+0x23e>
+     680:	00000097          	auipc	ra,0x0
+     684:	798080e7          	jalr	1944(ra) # e18 <write>
+     688:	4785                	li	a5,1
+     68a:	06f51063          	bne	a0,a5,6ea <go+0x672>
+        printf("grind: write c failed\n");
+        exit(1);
+      }
+      struct stat st;
+      if(fstat(fd1, &st) != 0){
+     68e:	fa840593          	addi	a1,s0,-88
+     692:	855a                	mv	a0,s6
+     694:	00000097          	auipc	ra,0x0
+     698:	7bc080e7          	jalr	1980(ra) # e50 <fstat>
+     69c:	e525                	bnez	a0,704 <go+0x68c>
+        printf("grind: fstat failed\n");
+        exit(1);
+      }
+      if(st.size != 1){
+     69e:	fb843583          	ld	a1,-72(s0)
+     6a2:	4785                	li	a5,1
+     6a4:	06f59d63          	bne	a1,a5,71e <go+0x6a6>
+        printf("grind: fstat reports wrong size %d\n", (int)st.size);
+        exit(1);
+      }
+      if(st.ino > 200){
+     6a8:	fac42583          	lw	a1,-84(s0)
+     6ac:	0c800793          	li	a5,200
+     6b0:	08b7e563          	bltu	a5,a1,73a <go+0x6c2>
+        printf("grind: fstat reports crazy i-number %d\n", st.ino);
+        exit(1);
+      }
+      close(fd1);
+     6b4:	855a                	mv	a0,s6
+     6b6:	00000097          	auipc	ra,0x0
+     6ba:	76a080e7          	jalr	1898(ra) # e20 <close>
+      unlink("c");
+     6be:	00001517          	auipc	a0,0x1
+     6c2:	e2250513          	addi	a0,a0,-478 # 14e0 <malloc+0x286>
+     6c6:	00000097          	auipc	ra,0x0
+     6ca:	782080e7          	jalr	1922(ra) # e48 <unlink>
+     6ce:	bc91                	j	122 <go+0xaa>
+        printf("grind: create c failed\n");
+     6d0:	00001517          	auipc	a0,0x1
+     6d4:	e1850513          	addi	a0,a0,-488 # 14e8 <malloc+0x28e>
+     6d8:	00001097          	auipc	ra,0x1
+     6dc:	aca080e7          	jalr	-1334(ra) # 11a2 <printf>
+        exit(1);
+     6e0:	4505                	li	a0,1
+     6e2:	00000097          	auipc	ra,0x0
+     6e6:	716080e7          	jalr	1814(ra) # df8 <exit>
+        printf("grind: write c failed\n");
+     6ea:	00001517          	auipc	a0,0x1
+     6ee:	e1650513          	addi	a0,a0,-490 # 1500 <malloc+0x2a6>
+     6f2:	00001097          	auipc	ra,0x1
+     6f6:	ab0080e7          	jalr	-1360(ra) # 11a2 <printf>
+        exit(1);
+     6fa:	4505                	li	a0,1
+     6fc:	00000097          	auipc	ra,0x0
+     700:	6fc080e7          	jalr	1788(ra) # df8 <exit>
+        printf("grind: fstat failed\n");
+     704:	00001517          	auipc	a0,0x1
+     708:	e1450513          	addi	a0,a0,-492 # 1518 <malloc+0x2be>
+     70c:	00001097          	auipc	ra,0x1
+     710:	a96080e7          	jalr	-1386(ra) # 11a2 <printf>
+        exit(1);
+     714:	4505                	li	a0,1
+     716:	00000097          	auipc	ra,0x0
+     71a:	6e2080e7          	jalr	1762(ra) # df8 <exit>
+        printf("grind: fstat reports wrong size %d\n", (int)st.size);
+     71e:	2581                	sext.w	a1,a1
+     720:	00001517          	auipc	a0,0x1
+     724:	e1050513          	addi	a0,a0,-496 # 1530 <malloc+0x2d6>
+     728:	00001097          	auipc	ra,0x1
+     72c:	a7a080e7          	jalr	-1414(ra) # 11a2 <printf>
+        exit(1);
+     730:	4505                	li	a0,1
+     732:	00000097          	auipc	ra,0x0
+     736:	6c6080e7          	jalr	1734(ra) # df8 <exit>
+        printf("grind: fstat reports crazy i-number %d\n", st.ino);
+     73a:	00001517          	auipc	a0,0x1
+     73e:	e1e50513          	addi	a0,a0,-482 # 1558 <malloc+0x2fe>
+     742:	00001097          	auipc	ra,0x1
+     746:	a60080e7          	jalr	-1440(ra) # 11a2 <printf>
+        exit(1);
+     74a:	4505                	li	a0,1
+     74c:	00000097          	auipc	ra,0x0
+     750:	6ac080e7          	jalr	1708(ra) # df8 <exit>
+    } else if(what == 22){
+      // echo hi | cat
+      int aa[2], bb[2];
+      if(pipe(aa) < 0){
+     754:	f9840513          	addi	a0,s0,-104
+     758:	00000097          	auipc	ra,0x0
+     75c:	6b0080e7          	jalr	1712(ra) # e08 <pipe>
+     760:	10054063          	bltz	a0,860 <go+0x7e8>
+        fprintf(2, "grind: pipe failed\n");
+        exit(1);
+      }
+      if(pipe(bb) < 0){
+     764:	fa040513          	addi	a0,s0,-96
+     768:	00000097          	auipc	ra,0x0
+     76c:	6a0080e7          	jalr	1696(ra) # e08 <pipe>
+     770:	10054663          	bltz	a0,87c <go+0x804>
+        fprintf(2, "grind: pipe failed\n");
+        exit(1);
+      }
+      int pid1 = fork();
+     774:	00000097          	auipc	ra,0x0
+     778:	67c080e7          	jalr	1660(ra) # df0 <fork>
+      if(pid1 == 0){
+     77c:	10050e63          	beqz	a0,898 <go+0x820>
+        close(aa[1]);
+        char *args[3] = { "echo", "hi", 0 };
+        exec("grindir/../echo", args);
+        fprintf(2, "grind: echo: not found\n");
+        exit(2);
+      } else if(pid1 < 0){
+     780:	1c054663          	bltz	a0,94c <go+0x8d4>
+        fprintf(2, "grind: fork failed\n");
+        exit(3);
+      }
+      int pid2 = fork();
+     784:	00000097          	auipc	ra,0x0
+     788:	66c080e7          	jalr	1644(ra) # df0 <fork>
+      if(pid2 == 0){
+     78c:	1c050e63          	beqz	a0,968 <go+0x8f0>
+        close(bb[1]);
+        char *args[2] = { "cat", 0 };
+        exec("/cat", args);
+        fprintf(2, "grind: cat: not found\n");
+        exit(6);
+      } else if(pid2 < 0){
+     790:	2a054a63          	bltz	a0,a44 <go+0x9cc>
+        fprintf(2, "grind: fork failed\n");
+        exit(7);
+      }
+      close(aa[0]);
+     794:	f9842503          	lw	a0,-104(s0)
+     798:	00000097          	auipc	ra,0x0
+     79c:	688080e7          	jalr	1672(ra) # e20 <close>
+      close(aa[1]);
+     7a0:	f9c42503          	lw	a0,-100(s0)
+     7a4:	00000097          	auipc	ra,0x0
+     7a8:	67c080e7          	jalr	1660(ra) # e20 <close>
+      close(bb[1]);
+     7ac:	fa442503          	lw	a0,-92(s0)
+     7b0:	00000097          	auipc	ra,0x0
+     7b4:	670080e7          	jalr	1648(ra) # e20 <close>
+      char buf[4] = { 0, 0, 0, 0 };
+     7b8:	f8042823          	sw	zero,-112(s0)
+      read(bb[0], buf+0, 1);
+     7bc:	4605                	li	a2,1
+     7be:	f9040593          	addi	a1,s0,-112
+     7c2:	fa042503          	lw	a0,-96(s0)
+     7c6:	00000097          	auipc	ra,0x0
+     7ca:	64a080e7          	jalr	1610(ra) # e10 <read>
+      read(bb[0], buf+1, 1);
+     7ce:	4605                	li	a2,1
+     7d0:	f9140593          	addi	a1,s0,-111
+     7d4:	fa042503          	lw	a0,-96(s0)
+     7d8:	00000097          	auipc	ra,0x0
+     7dc:	638080e7          	jalr	1592(ra) # e10 <read>
+      read(bb[0], buf+2, 1);
+     7e0:	4605                	li	a2,1
+     7e2:	f9240593          	addi	a1,s0,-110
+     7e6:	fa042503          	lw	a0,-96(s0)
+     7ea:	00000097          	auipc	ra,0x0
+     7ee:	626080e7          	jalr	1574(ra) # e10 <read>
+      close(bb[0]);
+     7f2:	fa042503          	lw	a0,-96(s0)
+     7f6:	00000097          	auipc	ra,0x0
+     7fa:	62a080e7          	jalr	1578(ra) # e20 <close>
+      int st1, st2;
+      wait(&st1);
+     7fe:	f9440513          	addi	a0,s0,-108
+     802:	00000097          	auipc	ra,0x0
+     806:	5fe080e7          	jalr	1534(ra) # e00 <wait>
+      wait(&st2);
+     80a:	fa840513          	addi	a0,s0,-88
+     80e:	00000097          	auipc	ra,0x0
+     812:	5f2080e7          	jalr	1522(ra) # e00 <wait>
+      if(st1 != 0 || st2 != 0 || strcmp(buf, "hi\n") != 0){
+     816:	f9442783          	lw	a5,-108(s0)
+     81a:	fa842703          	lw	a4,-88(s0)
+     81e:	8fd9                	or	a5,a5,a4
+     820:	ef89                	bnez	a5,83a <go+0x7c2>
+     822:	00001597          	auipc	a1,0x1
+     826:	dd658593          	addi	a1,a1,-554 # 15f8 <malloc+0x39e>
+     82a:	f9040513          	addi	a0,s0,-112
+     82e:	00000097          	auipc	ra,0x0
+     832:	37a080e7          	jalr	890(ra) # ba8 <strcmp>
+     836:	8e0506e3          	beqz	a0,122 <go+0xaa>
+        printf("grind: exec pipeline failed %d %d \"%s\"\n", st1, st2, buf);
+     83a:	f9040693          	addi	a3,s0,-112
+     83e:	fa842603          	lw	a2,-88(s0)
+     842:	f9442583          	lw	a1,-108(s0)
+     846:	00001517          	auipc	a0,0x1
+     84a:	dba50513          	addi	a0,a0,-582 # 1600 <malloc+0x3a6>
+     84e:	00001097          	auipc	ra,0x1
+     852:	954080e7          	jalr	-1708(ra) # 11a2 <printf>
+        exit(1);
+     856:	4505                	li	a0,1
+     858:	00000097          	auipc	ra,0x0
+     85c:	5a0080e7          	jalr	1440(ra) # df8 <exit>
+        fprintf(2, "grind: pipe failed\n");
+     860:	00001597          	auipc	a1,0x1
+     864:	c2058593          	addi	a1,a1,-992 # 1480 <malloc+0x226>
+     868:	4509                	li	a0,2
+     86a:	00001097          	auipc	ra,0x1
+     86e:	90a080e7          	jalr	-1782(ra) # 1174 <fprintf>
+        exit(1);
+     872:	4505                	li	a0,1
+     874:	00000097          	auipc	ra,0x0
+     878:	584080e7          	jalr	1412(ra) # df8 <exit>
+        fprintf(2, "grind: pipe failed\n");
+     87c:	00001597          	auipc	a1,0x1
+     880:	c0458593          	addi	a1,a1,-1020 # 1480 <malloc+0x226>
+     884:	4509                	li	a0,2
+     886:	00001097          	auipc	ra,0x1
+     88a:	8ee080e7          	jalr	-1810(ra) # 1174 <fprintf>
+        exit(1);
+     88e:	4505                	li	a0,1
+     890:	00000097          	auipc	ra,0x0
+     894:	568080e7          	jalr	1384(ra) # df8 <exit>
+        close(bb[0]);
+     898:	fa042503          	lw	a0,-96(s0)
+     89c:	00000097          	auipc	ra,0x0
+     8a0:	584080e7          	jalr	1412(ra) # e20 <close>
+        close(bb[1]);
+     8a4:	fa442503          	lw	a0,-92(s0)
+     8a8:	00000097          	auipc	ra,0x0
+     8ac:	578080e7          	jalr	1400(ra) # e20 <close>
+        close(aa[0]);
+     8b0:	f9842503          	lw	a0,-104(s0)
+     8b4:	00000097          	auipc	ra,0x0
+     8b8:	56c080e7          	jalr	1388(ra) # e20 <close>
+        close(1);
+     8bc:	4505                	li	a0,1
+     8be:	00000097          	auipc	ra,0x0
+     8c2:	562080e7          	jalr	1378(ra) # e20 <close>
+        if(dup(aa[1]) != 1){
+     8c6:	f9c42503          	lw	a0,-100(s0)
+     8ca:	00000097          	auipc	ra,0x0
+     8ce:	5a6080e7          	jalr	1446(ra) # e70 <dup>
+     8d2:	4785                	li	a5,1
+     8d4:	02f50063          	beq	a0,a5,8f4 <go+0x87c>
+          fprintf(2, "grind: dup failed\n");
+     8d8:	00001597          	auipc	a1,0x1
+     8dc:	ca858593          	addi	a1,a1,-856 # 1580 <malloc+0x326>
+     8e0:	4509                	li	a0,2
+     8e2:	00001097          	auipc	ra,0x1
+     8e6:	892080e7          	jalr	-1902(ra) # 1174 <fprintf>
+          exit(1);
+     8ea:	4505                	li	a0,1
+     8ec:	00000097          	auipc	ra,0x0
+     8f0:	50c080e7          	jalr	1292(ra) # df8 <exit>
+        close(aa[1]);
+     8f4:	f9c42503          	lw	a0,-100(s0)
+     8f8:	00000097          	auipc	ra,0x0
+     8fc:	528080e7          	jalr	1320(ra) # e20 <close>
+        char *args[3] = { "echo", "hi", 0 };
+     900:	00001797          	auipc	a5,0x1
+     904:	c9878793          	addi	a5,a5,-872 # 1598 <malloc+0x33e>
+     908:	faf43423          	sd	a5,-88(s0)
+     90c:	00001797          	auipc	a5,0x1
+     910:	c9478793          	addi	a5,a5,-876 # 15a0 <malloc+0x346>
+     914:	faf43823          	sd	a5,-80(s0)
+     918:	fa043c23          	sd	zero,-72(s0)
+        exec("grindir/../echo", args);
+     91c:	fa840593          	addi	a1,s0,-88
+     920:	00001517          	auipc	a0,0x1
+     924:	c8850513          	addi	a0,a0,-888 # 15a8 <malloc+0x34e>
+     928:	00000097          	auipc	ra,0x0
+     92c:	508080e7          	jalr	1288(ra) # e30 <exec>
+        fprintf(2, "grind: echo: not found\n");
+     930:	00001597          	auipc	a1,0x1
+     934:	c8858593          	addi	a1,a1,-888 # 15b8 <malloc+0x35e>
+     938:	4509                	li	a0,2
+     93a:	00001097          	auipc	ra,0x1
+     93e:	83a080e7          	jalr	-1990(ra) # 1174 <fprintf>
+        exit(2);
+     942:	4509                	li	a0,2
+     944:	00000097          	auipc	ra,0x0
+     948:	4b4080e7          	jalr	1204(ra) # df8 <exit>
+        fprintf(2, "grind: fork failed\n");
+     94c:	00001597          	auipc	a1,0x1
+     950:	af458593          	addi	a1,a1,-1292 # 1440 <malloc+0x1e6>
+     954:	4509                	li	a0,2
+     956:	00001097          	auipc	ra,0x1
+     95a:	81e080e7          	jalr	-2018(ra) # 1174 <fprintf>
+        exit(3);
+     95e:	450d                	li	a0,3
+     960:	00000097          	auipc	ra,0x0
+     964:	498080e7          	jalr	1176(ra) # df8 <exit>
+        close(aa[1]);
+     968:	f9c42503          	lw	a0,-100(s0)
+     96c:	00000097          	auipc	ra,0x0
+     970:	4b4080e7          	jalr	1204(ra) # e20 <close>
+        close(bb[0]);
+     974:	fa042503          	lw	a0,-96(s0)
+     978:	00000097          	auipc	ra,0x0
+     97c:	4a8080e7          	jalr	1192(ra) # e20 <close>
+        close(0);
+     980:	4501                	li	a0,0
+     982:	00000097          	auipc	ra,0x0
+     986:	49e080e7          	jalr	1182(ra) # e20 <close>
+        if(dup(aa[0]) != 0){
+     98a:	f9842503          	lw	a0,-104(s0)
+     98e:	00000097          	auipc	ra,0x0
+     992:	4e2080e7          	jalr	1250(ra) # e70 <dup>
+     996:	cd19                	beqz	a0,9b4 <go+0x93c>
+          fprintf(2, "grind: dup failed\n");
+     998:	00001597          	auipc	a1,0x1
+     99c:	be858593          	addi	a1,a1,-1048 # 1580 <malloc+0x326>
+     9a0:	4509                	li	a0,2
+     9a2:	00000097          	auipc	ra,0x0
+     9a6:	7d2080e7          	jalr	2002(ra) # 1174 <fprintf>
+          exit(4);
+     9aa:	4511                	li	a0,4
+     9ac:	00000097          	auipc	ra,0x0
+     9b0:	44c080e7          	jalr	1100(ra) # df8 <exit>
+        close(aa[0]);
+     9b4:	f9842503          	lw	a0,-104(s0)
+     9b8:	00000097          	auipc	ra,0x0
+     9bc:	468080e7          	jalr	1128(ra) # e20 <close>
+        close(1);
+     9c0:	4505                	li	a0,1
+     9c2:	00000097          	auipc	ra,0x0
+     9c6:	45e080e7          	jalr	1118(ra) # e20 <close>
+        if(dup(bb[1]) != 1){
+     9ca:	fa442503          	lw	a0,-92(s0)
+     9ce:	00000097          	auipc	ra,0x0
+     9d2:	4a2080e7          	jalr	1186(ra) # e70 <dup>
+     9d6:	4785                	li	a5,1
+     9d8:	02f50063          	beq	a0,a5,9f8 <go+0x980>
+          fprintf(2, "grind: dup failed\n");
+     9dc:	00001597          	auipc	a1,0x1
+     9e0:	ba458593          	addi	a1,a1,-1116 # 1580 <malloc+0x326>
+     9e4:	4509                	li	a0,2
+     9e6:	00000097          	auipc	ra,0x0
+     9ea:	78e080e7          	jalr	1934(ra) # 1174 <fprintf>
+          exit(5);
+     9ee:	4515                	li	a0,5
+     9f0:	00000097          	auipc	ra,0x0
+     9f4:	408080e7          	jalr	1032(ra) # df8 <exit>
+        close(bb[1]);
+     9f8:	fa442503          	lw	a0,-92(s0)
+     9fc:	00000097          	auipc	ra,0x0
+     a00:	424080e7          	jalr	1060(ra) # e20 <close>
+        char *args[2] = { "cat", 0 };
+     a04:	00001797          	auipc	a5,0x1
+     a08:	bcc78793          	addi	a5,a5,-1076 # 15d0 <malloc+0x376>
+     a0c:	faf43423          	sd	a5,-88(s0)
+     a10:	fa043823          	sd	zero,-80(s0)
+        exec("/cat", args);
+     a14:	fa840593          	addi	a1,s0,-88
+     a18:	00001517          	auipc	a0,0x1
+     a1c:	bc050513          	addi	a0,a0,-1088 # 15d8 <malloc+0x37e>
+     a20:	00000097          	auipc	ra,0x0
+     a24:	410080e7          	jalr	1040(ra) # e30 <exec>
+        fprintf(2, "grind: cat: not found\n");
+     a28:	00001597          	auipc	a1,0x1
+     a2c:	bb858593          	addi	a1,a1,-1096 # 15e0 <malloc+0x386>
+     a30:	4509                	li	a0,2
+     a32:	00000097          	auipc	ra,0x0
+     a36:	742080e7          	jalr	1858(ra) # 1174 <fprintf>
+        exit(6);
+     a3a:	4519                	li	a0,6
+     a3c:	00000097          	auipc	ra,0x0
+     a40:	3bc080e7          	jalr	956(ra) # df8 <exit>
+        fprintf(2, "grind: fork failed\n");
+     a44:	00001597          	auipc	a1,0x1
+     a48:	9fc58593          	addi	a1,a1,-1540 # 1440 <malloc+0x1e6>
+     a4c:	4509                	li	a0,2
+     a4e:	00000097          	auipc	ra,0x0
+     a52:	726080e7          	jalr	1830(ra) # 1174 <fprintf>
+        exit(7);
+     a56:	451d                	li	a0,7
+     a58:	00000097          	auipc	ra,0x0
+     a5c:	3a0080e7          	jalr	928(ra) # df8 <exit>
+
+0000000000000a60 <iter>:
+  }
+}
+
+void
+iter()
+{
+     a60:	7179                	addi	sp,sp,-48
+     a62:	f406                	sd	ra,40(sp)
+     a64:	f022                	sd	s0,32(sp)
+     a66:	ec26                	sd	s1,24(sp)
+     a68:	e84a                	sd	s2,16(sp)
+     a6a:	1800                	addi	s0,sp,48
+  unlink("a");
+     a6c:	00001517          	auipc	a0,0x1
+     a70:	9b450513          	addi	a0,a0,-1612 # 1420 <malloc+0x1c6>
+     a74:	00000097          	auipc	ra,0x0
+     a78:	3d4080e7          	jalr	980(ra) # e48 <unlink>
+  unlink("b");
+     a7c:	00001517          	auipc	a0,0x1
+     a80:	95450513          	addi	a0,a0,-1708 # 13d0 <malloc+0x176>
+     a84:	00000097          	auipc	ra,0x0
+     a88:	3c4080e7          	jalr	964(ra) # e48 <unlink>
+  
+  int pid1 = fork();
+     a8c:	00000097          	auipc	ra,0x0
+     a90:	364080e7          	jalr	868(ra) # df0 <fork>
+  if(pid1 < 0){
+     a94:	00054e63          	bltz	a0,ab0 <iter+0x50>
+     a98:	84aa                	mv	s1,a0
+    printf("grind: fork failed\n");
+    exit(1);
+  }
+  if(pid1 == 0){
+     a9a:	e905                	bnez	a0,aca <iter+0x6a>
+    rand_next = 31;
+     a9c:	47fd                	li	a5,31
+     a9e:	00001717          	auipc	a4,0x1
+     aa2:	c6f73123          	sd	a5,-926(a4) # 1700 <rand_next>
+    go(0);
+     aa6:	4501                	li	a0,0
+     aa8:	fffff097          	auipc	ra,0xfffff
+     aac:	5d0080e7          	jalr	1488(ra) # 78 <go>
+    printf("grind: fork failed\n");
+     ab0:	00001517          	auipc	a0,0x1
+     ab4:	99050513          	addi	a0,a0,-1648 # 1440 <malloc+0x1e6>
+     ab8:	00000097          	auipc	ra,0x0
+     abc:	6ea080e7          	jalr	1770(ra) # 11a2 <printf>
+    exit(1);
+     ac0:	4505                	li	a0,1
+     ac2:	00000097          	auipc	ra,0x0
+     ac6:	336080e7          	jalr	822(ra) # df8 <exit>
+    exit(0);
+  }
+
+  int pid2 = fork();
+     aca:	00000097          	auipc	ra,0x0
+     ace:	326080e7          	jalr	806(ra) # df0 <fork>
+     ad2:	892a                	mv	s2,a0
+  if(pid2 < 0){
+     ad4:	00054f63          	bltz	a0,af2 <iter+0x92>
+    printf("grind: fork failed\n");
+    exit(1);
+  }
+  if(pid2 == 0){
+     ad8:	e915                	bnez	a0,b0c <iter+0xac>
+    rand_next = 7177;
+     ada:	6789                	lui	a5,0x2
+     adc:	c0978793          	addi	a5,a5,-1015 # 1c09 <__BSS_END__+0x101>
+     ae0:	00001717          	auipc	a4,0x1
+     ae4:	c2f73023          	sd	a5,-992(a4) # 1700 <rand_next>
+    go(1);
+     ae8:	4505                	li	a0,1
+     aea:	fffff097          	auipc	ra,0xfffff
+     aee:	58e080e7          	jalr	1422(ra) # 78 <go>
+    printf("grind: fork failed\n");
+     af2:	00001517          	auipc	a0,0x1
+     af6:	94e50513          	addi	a0,a0,-1714 # 1440 <malloc+0x1e6>
+     afa:	00000097          	auipc	ra,0x0
+     afe:	6a8080e7          	jalr	1704(ra) # 11a2 <printf>
+    exit(1);
+     b02:	4505                	li	a0,1
+     b04:	00000097          	auipc	ra,0x0
+     b08:	2f4080e7          	jalr	756(ra) # df8 <exit>
+    exit(0);
+  }
+
+  int st1 = -1;
+     b0c:	57fd                	li	a5,-1
+     b0e:	fcf42e23          	sw	a5,-36(s0)
+  wait(&st1);
+     b12:	fdc40513          	addi	a0,s0,-36
+     b16:	00000097          	auipc	ra,0x0
+     b1a:	2ea080e7          	jalr	746(ra) # e00 <wait>
+  if(st1 != 0){
+     b1e:	fdc42783          	lw	a5,-36(s0)
+     b22:	ef99                	bnez	a5,b40 <iter+0xe0>
+    kill(pid1);
+    kill(pid2);
+  }
+  int st2 = -1;
+     b24:	57fd                	li	a5,-1
+     b26:	fcf42c23          	sw	a5,-40(s0)
+  wait(&st2);
+     b2a:	fd840513          	addi	a0,s0,-40
+     b2e:	00000097          	auipc	ra,0x0
+     b32:	2d2080e7          	jalr	722(ra) # e00 <wait>
+
+  exit(0);
+     b36:	4501                	li	a0,0
+     b38:	00000097          	auipc	ra,0x0
+     b3c:	2c0080e7          	jalr	704(ra) # df8 <exit>
+    kill(pid1);
+     b40:	8526                	mv	a0,s1
+     b42:	00000097          	auipc	ra,0x0
+     b46:	2e6080e7          	jalr	742(ra) # e28 <kill>
+    kill(pid2);
+     b4a:	854a                	mv	a0,s2
+     b4c:	00000097          	auipc	ra,0x0
+     b50:	2dc080e7          	jalr	732(ra) # e28 <kill>
+     b54:	bfc1                	j	b24 <iter+0xc4>
+
+0000000000000b56 <main>:
+}
+
+int
+main()
+{
+     b56:	1141                	addi	sp,sp,-16
+     b58:	e406                	sd	ra,8(sp)
+     b5a:	e022                	sd	s0,0(sp)
+     b5c:	0800                	addi	s0,sp,16
+     b5e:	a811                	j	b72 <main+0x1c>
+  while(1){
+    int pid = fork();
+    if(pid == 0){
+      iter();
+     b60:	00000097          	auipc	ra,0x0
+     b64:	f00080e7          	jalr	-256(ra) # a60 <iter>
+      exit(0);
+    }
+    if(pid > 0){
+      wait(0);
+    }
+    sleep(20);
+     b68:	4551                	li	a0,20
+     b6a:	00000097          	auipc	ra,0x0
+     b6e:	31e080e7          	jalr	798(ra) # e88 <sleep>
+    int pid = fork();
+     b72:	00000097          	auipc	ra,0x0
+     b76:	27e080e7          	jalr	638(ra) # df0 <fork>
+    if(pid == 0){
+     b7a:	d17d                	beqz	a0,b60 <main+0xa>
+    if(pid > 0){
+     b7c:	fea056e3          	blez	a0,b68 <main+0x12>
+      wait(0);
+     b80:	4501                	li	a0,0
+     b82:	00000097          	auipc	ra,0x0
+     b86:	27e080e7          	jalr	638(ra) # e00 <wait>
+     b8a:	bff9                	j	b68 <main+0x12>
+
+0000000000000b8c <strcpy>:
+#include "kernel/fcntl.h"
+#include "user/user.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+     b8c:	1141                	addi	sp,sp,-16
+     b8e:	e422                	sd	s0,8(sp)
+     b90:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+     b92:	87aa                	mv	a5,a0
+     b94:	0585                	addi	a1,a1,1
+     b96:	0785                	addi	a5,a5,1
+     b98:	fff5c703          	lbu	a4,-1(a1)
+     b9c:	fee78fa3          	sb	a4,-1(a5)
+     ba0:	fb75                	bnez	a4,b94 <strcpy+0x8>
+    ;
+  return os;
+}
+     ba2:	6422                	ld	s0,8(sp)
+     ba4:	0141                	addi	sp,sp,16
+     ba6:	8082                	ret
+
+0000000000000ba8 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+     ba8:	1141                	addi	sp,sp,-16
+     baa:	e422                	sd	s0,8(sp)
+     bac:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+     bae:	00054783          	lbu	a5,0(a0)
+     bb2:	cb91                	beqz	a5,bc6 <strcmp+0x1e>
+     bb4:	0005c703          	lbu	a4,0(a1)
+     bb8:	00f71763          	bne	a4,a5,bc6 <strcmp+0x1e>
+    p++, q++;
+     bbc:	0505                	addi	a0,a0,1
+     bbe:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+     bc0:	00054783          	lbu	a5,0(a0)
+     bc4:	fbe5                	bnez	a5,bb4 <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+     bc6:	0005c503          	lbu	a0,0(a1)
+}
+     bca:	40a7853b          	subw	a0,a5,a0
+     bce:	6422                	ld	s0,8(sp)
+     bd0:	0141                	addi	sp,sp,16
+     bd2:	8082                	ret
+
+0000000000000bd4 <strlen>:
+
+uint
+strlen(const char *s)
+{
+     bd4:	1141                	addi	sp,sp,-16
+     bd6:	e422                	sd	s0,8(sp)
+     bd8:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+     bda:	00054783          	lbu	a5,0(a0)
+     bde:	cf91                	beqz	a5,bfa <strlen+0x26>
+     be0:	0505                	addi	a0,a0,1
+     be2:	87aa                	mv	a5,a0
+     be4:	4685                	li	a3,1
+     be6:	9e89                	subw	a3,a3,a0
+     be8:	00f6853b          	addw	a0,a3,a5
+     bec:	0785                	addi	a5,a5,1
+     bee:	fff7c703          	lbu	a4,-1(a5)
+     bf2:	fb7d                	bnez	a4,be8 <strlen+0x14>
+    ;
+  return n;
+}
+     bf4:	6422                	ld	s0,8(sp)
+     bf6:	0141                	addi	sp,sp,16
+     bf8:	8082                	ret
+  for(n = 0; s[n]; n++)
+     bfa:	4501                	li	a0,0
+     bfc:	bfe5                	j	bf4 <strlen+0x20>
+
+0000000000000bfe <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+     bfe:	1141                	addi	sp,sp,-16
+     c00:	e422                	sd	s0,8(sp)
+     c02:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+     c04:	ca19                	beqz	a2,c1a <memset+0x1c>
+     c06:	87aa                	mv	a5,a0
+     c08:	1602                	slli	a2,a2,0x20
+     c0a:	9201                	srli	a2,a2,0x20
+     c0c:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+     c10:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+     c14:	0785                	addi	a5,a5,1
+     c16:	fee79de3          	bne	a5,a4,c10 <memset+0x12>
+  }
+  return dst;
+}
+     c1a:	6422                	ld	s0,8(sp)
+     c1c:	0141                	addi	sp,sp,16
+     c1e:	8082                	ret
+
+0000000000000c20 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+     c20:	1141                	addi	sp,sp,-16
+     c22:	e422                	sd	s0,8(sp)
+     c24:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+     c26:	00054783          	lbu	a5,0(a0)
+     c2a:	cb99                	beqz	a5,c40 <strchr+0x20>
+    if(*s == c)
+     c2c:	00f58763          	beq	a1,a5,c3a <strchr+0x1a>
+  for(; *s; s++)
+     c30:	0505                	addi	a0,a0,1
+     c32:	00054783          	lbu	a5,0(a0)
+     c36:	fbfd                	bnez	a5,c2c <strchr+0xc>
+      return (char*)s;
+  return 0;
+     c38:	4501                	li	a0,0
+}
+     c3a:	6422                	ld	s0,8(sp)
+     c3c:	0141                	addi	sp,sp,16
+     c3e:	8082                	ret
+  return 0;
+     c40:	4501                	li	a0,0
+     c42:	bfe5                	j	c3a <strchr+0x1a>
+
+0000000000000c44 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+     c44:	711d                	addi	sp,sp,-96
+     c46:	ec86                	sd	ra,88(sp)
+     c48:	e8a2                	sd	s0,80(sp)
+     c4a:	e4a6                	sd	s1,72(sp)
+     c4c:	e0ca                	sd	s2,64(sp)
+     c4e:	fc4e                	sd	s3,56(sp)
+     c50:	f852                	sd	s4,48(sp)
+     c52:	f456                	sd	s5,40(sp)
+     c54:	f05a                	sd	s6,32(sp)
+     c56:	ec5e                	sd	s7,24(sp)
+     c58:	1080                	addi	s0,sp,96
+     c5a:	8baa                	mv	s7,a0
+     c5c:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+     c5e:	892a                	mv	s2,a0
+     c60:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+     c62:	4aa9                	li	s5,10
+     c64:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+     c66:	89a6                	mv	s3,s1
+     c68:	2485                	addiw	s1,s1,1
+     c6a:	0344d863          	bge	s1,s4,c9a <gets+0x56>
+    cc = read(0, &c, 1);
+     c6e:	4605                	li	a2,1
+     c70:	faf40593          	addi	a1,s0,-81
+     c74:	4501                	li	a0,0
+     c76:	00000097          	auipc	ra,0x0
+     c7a:	19a080e7          	jalr	410(ra) # e10 <read>
+    if(cc < 1)
+     c7e:	00a05e63          	blez	a0,c9a <gets+0x56>
+    buf[i++] = c;
+     c82:	faf44783          	lbu	a5,-81(s0)
+     c86:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+     c8a:	01578763          	beq	a5,s5,c98 <gets+0x54>
+     c8e:	0905                	addi	s2,s2,1
+     c90:	fd679be3          	bne	a5,s6,c66 <gets+0x22>
+  for(i=0; i+1 < max; ){
+     c94:	89a6                	mv	s3,s1
+     c96:	a011                	j	c9a <gets+0x56>
+     c98:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+     c9a:	99de                	add	s3,s3,s7
+     c9c:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+     ca0:	855e                	mv	a0,s7
+     ca2:	60e6                	ld	ra,88(sp)
+     ca4:	6446                	ld	s0,80(sp)
+     ca6:	64a6                	ld	s1,72(sp)
+     ca8:	6906                	ld	s2,64(sp)
+     caa:	79e2                	ld	s3,56(sp)
+     cac:	7a42                	ld	s4,48(sp)
+     cae:	7aa2                	ld	s5,40(sp)
+     cb0:	7b02                	ld	s6,32(sp)
+     cb2:	6be2                	ld	s7,24(sp)
+     cb4:	6125                	addi	sp,sp,96
+     cb6:	8082                	ret
+
+0000000000000cb8 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+     cb8:	1101                	addi	sp,sp,-32
+     cba:	ec06                	sd	ra,24(sp)
+     cbc:	e822                	sd	s0,16(sp)
+     cbe:	e426                	sd	s1,8(sp)
+     cc0:	e04a                	sd	s2,0(sp)
+     cc2:	1000                	addi	s0,sp,32
+     cc4:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+     cc6:	4581                	li	a1,0
+     cc8:	00000097          	auipc	ra,0x0
+     ccc:	170080e7          	jalr	368(ra) # e38 <open>
+  if(fd < 0)
+     cd0:	02054563          	bltz	a0,cfa <stat+0x42>
+     cd4:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+     cd6:	85ca                	mv	a1,s2
+     cd8:	00000097          	auipc	ra,0x0
+     cdc:	178080e7          	jalr	376(ra) # e50 <fstat>
+     ce0:	892a                	mv	s2,a0
+  close(fd);
+     ce2:	8526                	mv	a0,s1
+     ce4:	00000097          	auipc	ra,0x0
+     ce8:	13c080e7          	jalr	316(ra) # e20 <close>
+  return r;
+}
+     cec:	854a                	mv	a0,s2
+     cee:	60e2                	ld	ra,24(sp)
+     cf0:	6442                	ld	s0,16(sp)
+     cf2:	64a2                	ld	s1,8(sp)
+     cf4:	6902                	ld	s2,0(sp)
+     cf6:	6105                	addi	sp,sp,32
+     cf8:	8082                	ret
+    return -1;
+     cfa:	597d                	li	s2,-1
+     cfc:	bfc5                	j	cec <stat+0x34>
+
+0000000000000cfe <atoi>:
+
+int
+atoi(const char *s)
+{
+     cfe:	1141                	addi	sp,sp,-16
+     d00:	e422                	sd	s0,8(sp)
+     d02:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+     d04:	00054683          	lbu	a3,0(a0)
+     d08:	fd06879b          	addiw	a5,a3,-48
+     d0c:	0ff7f793          	zext.b	a5,a5
+     d10:	4625                	li	a2,9
+     d12:	02f66863          	bltu	a2,a5,d42 <atoi+0x44>
+     d16:	872a                	mv	a4,a0
+  n = 0;
+     d18:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+     d1a:	0705                	addi	a4,a4,1
+     d1c:	0025179b          	slliw	a5,a0,0x2
+     d20:	9fa9                	addw	a5,a5,a0
+     d22:	0017979b          	slliw	a5,a5,0x1
+     d26:	9fb5                	addw	a5,a5,a3
+     d28:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+     d2c:	00074683          	lbu	a3,0(a4)
+     d30:	fd06879b          	addiw	a5,a3,-48
+     d34:	0ff7f793          	zext.b	a5,a5
+     d38:	fef671e3          	bgeu	a2,a5,d1a <atoi+0x1c>
+  return n;
+}
+     d3c:	6422                	ld	s0,8(sp)
+     d3e:	0141                	addi	sp,sp,16
+     d40:	8082                	ret
+  n = 0;
+     d42:	4501                	li	a0,0
+     d44:	bfe5                	j	d3c <atoi+0x3e>
+
+0000000000000d46 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+     d46:	1141                	addi	sp,sp,-16
+     d48:	e422                	sd	s0,8(sp)
+     d4a:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+     d4c:	02b57463          	bgeu	a0,a1,d74 <memmove+0x2e>
+    while(n-- > 0)
+     d50:	00c05f63          	blez	a2,d6e <memmove+0x28>
+     d54:	1602                	slli	a2,a2,0x20
+     d56:	9201                	srli	a2,a2,0x20
+     d58:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+     d5c:	872a                	mv	a4,a0
+      *dst++ = *src++;
+     d5e:	0585                	addi	a1,a1,1
+     d60:	0705                	addi	a4,a4,1
+     d62:	fff5c683          	lbu	a3,-1(a1)
+     d66:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+     d6a:	fee79ae3          	bne	a5,a4,d5e <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+     d6e:	6422                	ld	s0,8(sp)
+     d70:	0141                	addi	sp,sp,16
+     d72:	8082                	ret
+    dst += n;
+     d74:	00c50733          	add	a4,a0,a2
+    src += n;
+     d78:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+     d7a:	fec05ae3          	blez	a2,d6e <memmove+0x28>
+     d7e:	fff6079b          	addiw	a5,a2,-1
+     d82:	1782                	slli	a5,a5,0x20
+     d84:	9381                	srli	a5,a5,0x20
+     d86:	fff7c793          	not	a5,a5
+     d8a:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+     d8c:	15fd                	addi	a1,a1,-1
+     d8e:	177d                	addi	a4,a4,-1
+     d90:	0005c683          	lbu	a3,0(a1)
+     d94:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+     d98:	fee79ae3          	bne	a5,a4,d8c <memmove+0x46>
+     d9c:	bfc9                	j	d6e <memmove+0x28>
+
+0000000000000d9e <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+     d9e:	1141                	addi	sp,sp,-16
+     da0:	e422                	sd	s0,8(sp)
+     da2:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+     da4:	ca05                	beqz	a2,dd4 <memcmp+0x36>
+     da6:	fff6069b          	addiw	a3,a2,-1
+     daa:	1682                	slli	a3,a3,0x20
+     dac:	9281                	srli	a3,a3,0x20
+     dae:	0685                	addi	a3,a3,1
+     db0:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+     db2:	00054783          	lbu	a5,0(a0)
+     db6:	0005c703          	lbu	a4,0(a1)
+     dba:	00e79863          	bne	a5,a4,dca <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+     dbe:	0505                	addi	a0,a0,1
+    p2++;
+     dc0:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+     dc2:	fed518e3          	bne	a0,a3,db2 <memcmp+0x14>
+  }
+  return 0;
+     dc6:	4501                	li	a0,0
+     dc8:	a019                	j	dce <memcmp+0x30>
+      return *p1 - *p2;
+     dca:	40e7853b          	subw	a0,a5,a4
+}
+     dce:	6422                	ld	s0,8(sp)
+     dd0:	0141                	addi	sp,sp,16
+     dd2:	8082                	ret
+  return 0;
+     dd4:	4501                	li	a0,0
+     dd6:	bfe5                	j	dce <memcmp+0x30>
+
+0000000000000dd8 <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+     dd8:	1141                	addi	sp,sp,-16
+     dda:	e406                	sd	ra,8(sp)
+     ddc:	e022                	sd	s0,0(sp)
+     dde:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+     de0:	00000097          	auipc	ra,0x0
+     de4:	f66080e7          	jalr	-154(ra) # d46 <memmove>
+}
+     de8:	60a2                	ld	ra,8(sp)
+     dea:	6402                	ld	s0,0(sp)
+     dec:	0141                	addi	sp,sp,16
+     dee:	8082                	ret
+
+0000000000000df0 <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+     df0:	4885                	li	a7,1
+ ecall
+     df2:	00000073          	ecall
+ ret
+     df6:	8082                	ret
+
+0000000000000df8 <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+     df8:	4889                	li	a7,2
+ ecall
+     dfa:	00000073          	ecall
+ ret
+     dfe:	8082                	ret
+
+0000000000000e00 <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+     e00:	488d                	li	a7,3
+ ecall
+     e02:	00000073          	ecall
+ ret
+     e06:	8082                	ret
+
+0000000000000e08 <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+     e08:	4891                	li	a7,4
+ ecall
+     e0a:	00000073          	ecall
+ ret
+     e0e:	8082                	ret
+
+0000000000000e10 <read>:
+.global read
+read:
+ li a7, SYS_read
+     e10:	4895                	li	a7,5
+ ecall
+     e12:	00000073          	ecall
+ ret
+     e16:	8082                	ret
+
+0000000000000e18 <write>:
+.global write
+write:
+ li a7, SYS_write
+     e18:	48c1                	li	a7,16
+ ecall
+     e1a:	00000073          	ecall
+ ret
+     e1e:	8082                	ret
+
+0000000000000e20 <close>:
+.global close
+close:
+ li a7, SYS_close
+     e20:	48d5                	li	a7,21
+ ecall
+     e22:	00000073          	ecall
+ ret
+     e26:	8082                	ret
+
+0000000000000e28 <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+     e28:	4899                	li	a7,6
+ ecall
+     e2a:	00000073          	ecall
+ ret
+     e2e:	8082                	ret
+
+0000000000000e30 <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+     e30:	489d                	li	a7,7
+ ecall
+     e32:	00000073          	ecall
+ ret
+     e36:	8082                	ret
+
+0000000000000e38 <open>:
+.global open
+open:
+ li a7, SYS_open
+     e38:	48bd                	li	a7,15
+ ecall
+     e3a:	00000073          	ecall
+ ret
+     e3e:	8082                	ret
+
+0000000000000e40 <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+     e40:	48c5                	li	a7,17
+ ecall
+     e42:	00000073          	ecall
+ ret
+     e46:	8082                	ret
+
+0000000000000e48 <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+     e48:	48c9                	li	a7,18
+ ecall
+     e4a:	00000073          	ecall
+ ret
+     e4e:	8082                	ret
+
+0000000000000e50 <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+     e50:	48a1                	li	a7,8
+ ecall
+     e52:	00000073          	ecall
+ ret
+     e56:	8082                	ret
+
+0000000000000e58 <link>:
+.global link
+link:
+ li a7, SYS_link
+     e58:	48cd                	li	a7,19
+ ecall
+     e5a:	00000073          	ecall
+ ret
+     e5e:	8082                	ret
+
+0000000000000e60 <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+     e60:	48d1                	li	a7,20
+ ecall
+     e62:	00000073          	ecall
+ ret
+     e66:	8082                	ret
+
+0000000000000e68 <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+     e68:	48a5                	li	a7,9
+ ecall
+     e6a:	00000073          	ecall
+ ret
+     e6e:	8082                	ret
+
+0000000000000e70 <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+     e70:	48a9                	li	a7,10
+ ecall
+     e72:	00000073          	ecall
+ ret
+     e76:	8082                	ret
+
+0000000000000e78 <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+     e78:	48ad                	li	a7,11
+ ecall
+     e7a:	00000073          	ecall
+ ret
+     e7e:	8082                	ret
+
+0000000000000e80 <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+     e80:	48b1                	li	a7,12
+ ecall
+     e82:	00000073          	ecall
+ ret
+     e86:	8082                	ret
+
+0000000000000e88 <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+     e88:	48b5                	li	a7,13
+ ecall
+     e8a:	00000073          	ecall
+ ret
+     e8e:	8082                	ret
+
+0000000000000e90 <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+     e90:	48b9                	li	a7,14
+ ecall
+     e92:	00000073          	ecall
+ ret
+     e96:	8082                	ret
+
+0000000000000e98 <setp>:
+.global setp
+setp:
+ li a7, SYS_setp
+     e98:	48d9                	li	a7,22
+ ecall
+     e9a:	00000073          	ecall
+ ret
+     e9e:	8082                	ret
+
+0000000000000ea0 <semget>:
+.global semget
+semget:
+ li a7, SYS_semget
+     ea0:	48dd                	li	a7,23
+ ecall
+     ea2:	00000073          	ecall
+ ret
+     ea6:	8082                	ret
+
+0000000000000ea8 <semdown>:
+.global semdown
+semdown:
+ li a7, SYS_semdown
+     ea8:	48e1                	li	a7,24
+ ecall
+     eaa:	00000073          	ecall
+ ret
+     eae:	8082                	ret
+
+0000000000000eb0 <semup>:
+.global semup
+semup:
+ li a7, SYS_semup
+     eb0:	48e5                	li	a7,25
+ ecall
+     eb2:	00000073          	ecall
+ ret
+     eb6:	8082                	ret
+
+0000000000000eb8 <semclose>:
+.global semclose
+semclose:
+ li a7, SYS_semclose
+     eb8:	48e9                	li	a7,26
+ ecall
+     eba:	00000073          	ecall
+ ret
+     ebe:	8082                	ret
+
+0000000000000ec0 <timeout>:
+.global timeout
+timeout:
+ li a7, SYS_timeout
+     ec0:	48ed                	li	a7,27
+ ecall
+     ec2:	00000073          	ecall
+ ret
+     ec6:	8082                	ret
+
+0000000000000ec8 <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+     ec8:	1101                	addi	sp,sp,-32
+     eca:	ec06                	sd	ra,24(sp)
+     ecc:	e822                	sd	s0,16(sp)
+     ece:	1000                	addi	s0,sp,32
+     ed0:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+     ed4:	4605                	li	a2,1
+     ed6:	fef40593          	addi	a1,s0,-17
+     eda:	00000097          	auipc	ra,0x0
+     ede:	f3e080e7          	jalr	-194(ra) # e18 <write>
+}
+     ee2:	60e2                	ld	ra,24(sp)
+     ee4:	6442                	ld	s0,16(sp)
+     ee6:	6105                	addi	sp,sp,32
+     ee8:	8082                	ret
+
+0000000000000eea <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+     eea:	7139                	addi	sp,sp,-64
+     eec:	fc06                	sd	ra,56(sp)
+     eee:	f822                	sd	s0,48(sp)
+     ef0:	f426                	sd	s1,40(sp)
+     ef2:	f04a                	sd	s2,32(sp)
+     ef4:	ec4e                	sd	s3,24(sp)
+     ef6:	0080                	addi	s0,sp,64
+     ef8:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+     efa:	c299                	beqz	a3,f00 <printint+0x16>
+     efc:	0805c963          	bltz	a1,f8e <printint+0xa4>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+     f00:	2581                	sext.w	a1,a1
+  neg = 0;
+     f02:	4881                	li	a7,0
+     f04:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+     f08:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+     f0a:	2601                	sext.w	a2,a2
+     f0c:	00000517          	auipc	a0,0x0
+     f10:	7dc50513          	addi	a0,a0,2012 # 16e8 <digits>
+     f14:	883a                	mv	a6,a4
+     f16:	2705                	addiw	a4,a4,1
+     f18:	02c5f7bb          	remuw	a5,a1,a2
+     f1c:	1782                	slli	a5,a5,0x20
+     f1e:	9381                	srli	a5,a5,0x20
+     f20:	97aa                	add	a5,a5,a0
+     f22:	0007c783          	lbu	a5,0(a5)
+     f26:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+     f2a:	0005879b          	sext.w	a5,a1
+     f2e:	02c5d5bb          	divuw	a1,a1,a2
+     f32:	0685                	addi	a3,a3,1
+     f34:	fec7f0e3          	bgeu	a5,a2,f14 <printint+0x2a>
+  if(neg)
+     f38:	00088c63          	beqz	a7,f50 <printint+0x66>
+    buf[i++] = '-';
+     f3c:	fd070793          	addi	a5,a4,-48
+     f40:	00878733          	add	a4,a5,s0
+     f44:	02d00793          	li	a5,45
+     f48:	fef70823          	sb	a5,-16(a4)
+     f4c:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+     f50:	02e05863          	blez	a4,f80 <printint+0x96>
+     f54:	fc040793          	addi	a5,s0,-64
+     f58:	00e78933          	add	s2,a5,a4
+     f5c:	fff78993          	addi	s3,a5,-1
+     f60:	99ba                	add	s3,s3,a4
+     f62:	377d                	addiw	a4,a4,-1
+     f64:	1702                	slli	a4,a4,0x20
+     f66:	9301                	srli	a4,a4,0x20
+     f68:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+     f6c:	fff94583          	lbu	a1,-1(s2)
+     f70:	8526                	mv	a0,s1
+     f72:	00000097          	auipc	ra,0x0
+     f76:	f56080e7          	jalr	-170(ra) # ec8 <putc>
+  while(--i >= 0)
+     f7a:	197d                	addi	s2,s2,-1
+     f7c:	ff3918e3          	bne	s2,s3,f6c <printint+0x82>
+}
+     f80:	70e2                	ld	ra,56(sp)
+     f82:	7442                	ld	s0,48(sp)
+     f84:	74a2                	ld	s1,40(sp)
+     f86:	7902                	ld	s2,32(sp)
+     f88:	69e2                	ld	s3,24(sp)
+     f8a:	6121                	addi	sp,sp,64
+     f8c:	8082                	ret
+    x = -xx;
+     f8e:	40b005bb          	negw	a1,a1
+    neg = 1;
+     f92:	4885                	li	a7,1
+    x = -xx;
+     f94:	bf85                	j	f04 <printint+0x1a>
+
+0000000000000f96 <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+     f96:	7119                	addi	sp,sp,-128
+     f98:	fc86                	sd	ra,120(sp)
+     f9a:	f8a2                	sd	s0,112(sp)
+     f9c:	f4a6                	sd	s1,104(sp)
+     f9e:	f0ca                	sd	s2,96(sp)
+     fa0:	ecce                	sd	s3,88(sp)
+     fa2:	e8d2                	sd	s4,80(sp)
+     fa4:	e4d6                	sd	s5,72(sp)
+     fa6:	e0da                	sd	s6,64(sp)
+     fa8:	fc5e                	sd	s7,56(sp)
+     faa:	f862                	sd	s8,48(sp)
+     fac:	f466                	sd	s9,40(sp)
+     fae:	f06a                	sd	s10,32(sp)
+     fb0:	ec6e                	sd	s11,24(sp)
+     fb2:	0100                	addi	s0,sp,128
+  char *s;
+  int c, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+     fb4:	0005c903          	lbu	s2,0(a1)
+     fb8:	18090f63          	beqz	s2,1156 <vprintf+0x1c0>
+     fbc:	8aaa                	mv	s5,a0
+     fbe:	8b32                	mv	s6,a2
+     fc0:	00158493          	addi	s1,a1,1
+  state = 0;
+     fc4:	4981                	li	s3,0
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+     fc6:	02500a13          	li	s4,37
+     fca:	4c55                	li	s8,21
+     fcc:	00000c97          	auipc	s9,0x0
+     fd0:	6c4c8c93          	addi	s9,s9,1732 # 1690 <malloc+0x436>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c == 's'){
+        s = va_arg(ap, char*);
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+     fd4:	02800d93          	li	s11,40
+  putc(fd, 'x');
+     fd8:	4d41                	li	s10,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+     fda:	00000b97          	auipc	s7,0x0
+     fde:	70eb8b93          	addi	s7,s7,1806 # 16e8 <digits>
+     fe2:	a839                	j	1000 <vprintf+0x6a>
+        putc(fd, c);
+     fe4:	85ca                	mv	a1,s2
+     fe6:	8556                	mv	a0,s5
+     fe8:	00000097          	auipc	ra,0x0
+     fec:	ee0080e7          	jalr	-288(ra) # ec8 <putc>
+     ff0:	a019                	j	ff6 <vprintf+0x60>
+    } else if(state == '%'){
+     ff2:	01498d63          	beq	s3,s4,100c <vprintf+0x76>
+  for(i = 0; fmt[i]; i++){
+     ff6:	0485                	addi	s1,s1,1
+     ff8:	fff4c903          	lbu	s2,-1(s1)
+     ffc:	14090d63          	beqz	s2,1156 <vprintf+0x1c0>
+    if(state == 0){
+    1000:	fe0999e3          	bnez	s3,ff2 <vprintf+0x5c>
+      if(c == '%'){
+    1004:	ff4910e3          	bne	s2,s4,fe4 <vprintf+0x4e>
+        state = '%';
+    1008:	89d2                	mv	s3,s4
+    100a:	b7f5                	j	ff6 <vprintf+0x60>
+      if(c == 'd'){
+    100c:	11490c63          	beq	s2,s4,1124 <vprintf+0x18e>
+    1010:	f9d9079b          	addiw	a5,s2,-99
+    1014:	0ff7f793          	zext.b	a5,a5
+    1018:	10fc6e63          	bltu	s8,a5,1134 <vprintf+0x19e>
+    101c:	f9d9079b          	addiw	a5,s2,-99
+    1020:	0ff7f713          	zext.b	a4,a5
+    1024:	10ec6863          	bltu	s8,a4,1134 <vprintf+0x19e>
+    1028:	00271793          	slli	a5,a4,0x2
+    102c:	97e6                	add	a5,a5,s9
+    102e:	439c                	lw	a5,0(a5)
+    1030:	97e6                	add	a5,a5,s9
+    1032:	8782                	jr	a5
+        printint(fd, va_arg(ap, int), 10, 1);
+    1034:	008b0913          	addi	s2,s6,8
+    1038:	4685                	li	a3,1
+    103a:	4629                	li	a2,10
+    103c:	000b2583          	lw	a1,0(s6)
+    1040:	8556                	mv	a0,s5
+    1042:	00000097          	auipc	ra,0x0
+    1046:	ea8080e7          	jalr	-344(ra) # eea <printint>
+    104a:	8b4a                	mv	s6,s2
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+    104c:	4981                	li	s3,0
+    104e:	b765                	j	ff6 <vprintf+0x60>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+    1050:	008b0913          	addi	s2,s6,8
+    1054:	4681                	li	a3,0
+    1056:	4629                	li	a2,10
+    1058:	000b2583          	lw	a1,0(s6)
+    105c:	8556                	mv	a0,s5
+    105e:	00000097          	auipc	ra,0x0
+    1062:	e8c080e7          	jalr	-372(ra) # eea <printint>
+    1066:	8b4a                	mv	s6,s2
+      state = 0;
+    1068:	4981                	li	s3,0
+    106a:	b771                	j	ff6 <vprintf+0x60>
+        printint(fd, va_arg(ap, int), 16, 0);
+    106c:	008b0913          	addi	s2,s6,8
+    1070:	4681                	li	a3,0
+    1072:	866a                	mv	a2,s10
+    1074:	000b2583          	lw	a1,0(s6)
+    1078:	8556                	mv	a0,s5
+    107a:	00000097          	auipc	ra,0x0
+    107e:	e70080e7          	jalr	-400(ra) # eea <printint>
+    1082:	8b4a                	mv	s6,s2
+      state = 0;
+    1084:	4981                	li	s3,0
+    1086:	bf85                	j	ff6 <vprintf+0x60>
+        printptr(fd, va_arg(ap, uint64));
+    1088:	008b0793          	addi	a5,s6,8
+    108c:	f8f43423          	sd	a5,-120(s0)
+    1090:	000b3983          	ld	s3,0(s6)
+  putc(fd, '0');
+    1094:	03000593          	li	a1,48
+    1098:	8556                	mv	a0,s5
+    109a:	00000097          	auipc	ra,0x0
+    109e:	e2e080e7          	jalr	-466(ra) # ec8 <putc>
+  putc(fd, 'x');
+    10a2:	07800593          	li	a1,120
+    10a6:	8556                	mv	a0,s5
+    10a8:	00000097          	auipc	ra,0x0
+    10ac:	e20080e7          	jalr	-480(ra) # ec8 <putc>
+    10b0:	896a                	mv	s2,s10
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+    10b2:	03c9d793          	srli	a5,s3,0x3c
+    10b6:	97de                	add	a5,a5,s7
+    10b8:	0007c583          	lbu	a1,0(a5)
+    10bc:	8556                	mv	a0,s5
+    10be:	00000097          	auipc	ra,0x0
+    10c2:	e0a080e7          	jalr	-502(ra) # ec8 <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+    10c6:	0992                	slli	s3,s3,0x4
+    10c8:	397d                	addiw	s2,s2,-1
+    10ca:	fe0914e3          	bnez	s2,10b2 <vprintf+0x11c>
+        printptr(fd, va_arg(ap, uint64));
+    10ce:	f8843b03          	ld	s6,-120(s0)
+      state = 0;
+    10d2:	4981                	li	s3,0
+    10d4:	b70d                	j	ff6 <vprintf+0x60>
+        s = va_arg(ap, char*);
+    10d6:	008b0913          	addi	s2,s6,8
+    10da:	000b3983          	ld	s3,0(s6)
+        if(s == 0)
+    10de:	02098163          	beqz	s3,1100 <vprintf+0x16a>
+        while(*s != 0){
+    10e2:	0009c583          	lbu	a1,0(s3)
+    10e6:	c5ad                	beqz	a1,1150 <vprintf+0x1ba>
+          putc(fd, *s);
+    10e8:	8556                	mv	a0,s5
+    10ea:	00000097          	auipc	ra,0x0
+    10ee:	dde080e7          	jalr	-546(ra) # ec8 <putc>
+          s++;
+    10f2:	0985                	addi	s3,s3,1
+        while(*s != 0){
+    10f4:	0009c583          	lbu	a1,0(s3)
+    10f8:	f9e5                	bnez	a1,10e8 <vprintf+0x152>
+        s = va_arg(ap, char*);
+    10fa:	8b4a                	mv	s6,s2
+      state = 0;
+    10fc:	4981                	li	s3,0
+    10fe:	bde5                	j	ff6 <vprintf+0x60>
+          s = "(null)";
+    1100:	00000997          	auipc	s3,0x0
+    1104:	58898993          	addi	s3,s3,1416 # 1688 <malloc+0x42e>
+        while(*s != 0){
+    1108:	85ee                	mv	a1,s11
+    110a:	bff9                	j	10e8 <vprintf+0x152>
+        putc(fd, va_arg(ap, uint));
+    110c:	008b0913          	addi	s2,s6,8
+    1110:	000b4583          	lbu	a1,0(s6)
+    1114:	8556                	mv	a0,s5
+    1116:	00000097          	auipc	ra,0x0
+    111a:	db2080e7          	jalr	-590(ra) # ec8 <putc>
+    111e:	8b4a                	mv	s6,s2
+      state = 0;
+    1120:	4981                	li	s3,0
+    1122:	bdd1                	j	ff6 <vprintf+0x60>
+        putc(fd, c);
+    1124:	85d2                	mv	a1,s4
+    1126:	8556                	mv	a0,s5
+    1128:	00000097          	auipc	ra,0x0
+    112c:	da0080e7          	jalr	-608(ra) # ec8 <putc>
+      state = 0;
+    1130:	4981                	li	s3,0
+    1132:	b5d1                	j	ff6 <vprintf+0x60>
+        putc(fd, '%');
+    1134:	85d2                	mv	a1,s4
+    1136:	8556                	mv	a0,s5
+    1138:	00000097          	auipc	ra,0x0
+    113c:	d90080e7          	jalr	-624(ra) # ec8 <putc>
+        putc(fd, c);
+    1140:	85ca                	mv	a1,s2
+    1142:	8556                	mv	a0,s5
+    1144:	00000097          	auipc	ra,0x0
+    1148:	d84080e7          	jalr	-636(ra) # ec8 <putc>
+      state = 0;
+    114c:	4981                	li	s3,0
+    114e:	b565                	j	ff6 <vprintf+0x60>
+        s = va_arg(ap, char*);
+    1150:	8b4a                	mv	s6,s2
+      state = 0;
+    1152:	4981                	li	s3,0
+    1154:	b54d                	j	ff6 <vprintf+0x60>
+    }
+  }
+}
+    1156:	70e6                	ld	ra,120(sp)
+    1158:	7446                	ld	s0,112(sp)
+    115a:	74a6                	ld	s1,104(sp)
+    115c:	7906                	ld	s2,96(sp)
+    115e:	69e6                	ld	s3,88(sp)
+    1160:	6a46                	ld	s4,80(sp)
+    1162:	6aa6                	ld	s5,72(sp)
+    1164:	6b06                	ld	s6,64(sp)
+    1166:	7be2                	ld	s7,56(sp)
+    1168:	7c42                	ld	s8,48(sp)
+    116a:	7ca2                	ld	s9,40(sp)
+    116c:	7d02                	ld	s10,32(sp)
+    116e:	6de2                	ld	s11,24(sp)
+    1170:	6109                	addi	sp,sp,128
+    1172:	8082                	ret
+
+0000000000001174 <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+    1174:	715d                	addi	sp,sp,-80
+    1176:	ec06                	sd	ra,24(sp)
+    1178:	e822                	sd	s0,16(sp)
+    117a:	1000                	addi	s0,sp,32
+    117c:	e010                	sd	a2,0(s0)
+    117e:	e414                	sd	a3,8(s0)
+    1180:	e818                	sd	a4,16(s0)
+    1182:	ec1c                	sd	a5,24(s0)
+    1184:	03043023          	sd	a6,32(s0)
+    1188:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+    118c:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+    1190:	8622                	mv	a2,s0
+    1192:	00000097          	auipc	ra,0x0
+    1196:	e04080e7          	jalr	-508(ra) # f96 <vprintf>
+}
+    119a:	60e2                	ld	ra,24(sp)
+    119c:	6442                	ld	s0,16(sp)
+    119e:	6161                	addi	sp,sp,80
+    11a0:	8082                	ret
+
+00000000000011a2 <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+    11a2:	711d                	addi	sp,sp,-96
+    11a4:	ec06                	sd	ra,24(sp)
+    11a6:	e822                	sd	s0,16(sp)
+    11a8:	1000                	addi	s0,sp,32
+    11aa:	e40c                	sd	a1,8(s0)
+    11ac:	e810                	sd	a2,16(s0)
+    11ae:	ec14                	sd	a3,24(s0)
+    11b0:	f018                	sd	a4,32(s0)
+    11b2:	f41c                	sd	a5,40(s0)
+    11b4:	03043823          	sd	a6,48(s0)
+    11b8:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+    11bc:	00840613          	addi	a2,s0,8
+    11c0:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+    11c4:	85aa                	mv	a1,a0
+    11c6:	4505                	li	a0,1
+    11c8:	00000097          	auipc	ra,0x0
+    11cc:	dce080e7          	jalr	-562(ra) # f96 <vprintf>
+}
+    11d0:	60e2                	ld	ra,24(sp)
+    11d2:	6442                	ld	s0,16(sp)
+    11d4:	6125                	addi	sp,sp,96
+    11d6:	8082                	ret
+
+00000000000011d8 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+    11d8:	1141                	addi	sp,sp,-16
+    11da:	e422                	sd	s0,8(sp)
+    11dc:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+    11de:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    11e2:	00000797          	auipc	a5,0x0
+    11e6:	5267b783          	ld	a5,1318(a5) # 1708 <freep>
+    11ea:	a02d                	j	1214 <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+    11ec:	4618                	lw	a4,8(a2)
+    11ee:	9f2d                	addw	a4,a4,a1
+    11f0:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+    11f4:	6398                	ld	a4,0(a5)
+    11f6:	6310                	ld	a2,0(a4)
+    11f8:	a83d                	j	1236 <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+    11fa:	ff852703          	lw	a4,-8(a0)
+    11fe:	9f31                	addw	a4,a4,a2
+    1200:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+    1202:	ff053683          	ld	a3,-16(a0)
+    1206:	a091                	j	124a <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    1208:	6398                	ld	a4,0(a5)
+    120a:	00e7e463          	bltu	a5,a4,1212 <free+0x3a>
+    120e:	00e6ea63          	bltu	a3,a4,1222 <free+0x4a>
+{
+    1212:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    1214:	fed7fae3          	bgeu	a5,a3,1208 <free+0x30>
+    1218:	6398                	ld	a4,0(a5)
+    121a:	00e6e463          	bltu	a3,a4,1222 <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    121e:	fee7eae3          	bltu	a5,a4,1212 <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+    1222:	ff852583          	lw	a1,-8(a0)
+    1226:	6390                	ld	a2,0(a5)
+    1228:	02059813          	slli	a6,a1,0x20
+    122c:	01c85713          	srli	a4,a6,0x1c
+    1230:	9736                	add	a4,a4,a3
+    1232:	fae60de3          	beq	a2,a4,11ec <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+    1236:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+    123a:	4790                	lw	a2,8(a5)
+    123c:	02061593          	slli	a1,a2,0x20
+    1240:	01c5d713          	srli	a4,a1,0x1c
+    1244:	973e                	add	a4,a4,a5
+    1246:	fae68ae3          	beq	a3,a4,11fa <free+0x22>
+    p->s.ptr = bp->s.ptr;
+    124a:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+    124c:	00000717          	auipc	a4,0x0
+    1250:	4af73e23          	sd	a5,1212(a4) # 1708 <freep>
+}
+    1254:	6422                	ld	s0,8(sp)
+    1256:	0141                	addi	sp,sp,16
+    1258:	8082                	ret
+
+000000000000125a <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+    125a:	7139                	addi	sp,sp,-64
+    125c:	fc06                	sd	ra,56(sp)
+    125e:	f822                	sd	s0,48(sp)
+    1260:	f426                	sd	s1,40(sp)
+    1262:	f04a                	sd	s2,32(sp)
+    1264:	ec4e                	sd	s3,24(sp)
+    1266:	e852                	sd	s4,16(sp)
+    1268:	e456                	sd	s5,8(sp)
+    126a:	e05a                	sd	s6,0(sp)
+    126c:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    126e:	02051493          	slli	s1,a0,0x20
+    1272:	9081                	srli	s1,s1,0x20
+    1274:	04bd                	addi	s1,s1,15
+    1276:	8091                	srli	s1,s1,0x4
+    1278:	0014899b          	addiw	s3,s1,1
+    127c:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+    127e:	00000517          	auipc	a0,0x0
+    1282:	48a53503          	ld	a0,1162(a0) # 1708 <freep>
+    1286:	c515                	beqz	a0,12b2 <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    1288:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+    128a:	4798                	lw	a4,8(a5)
+    128c:	02977f63          	bgeu	a4,s1,12ca <malloc+0x70>
+    1290:	8a4e                	mv	s4,s3
+    1292:	0009871b          	sext.w	a4,s3
+    1296:	6685                	lui	a3,0x1
+    1298:	00d77363          	bgeu	a4,a3,129e <malloc+0x44>
+    129c:	6a05                	lui	s4,0x1
+    129e:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+    12a2:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+    12a6:	00000917          	auipc	s2,0x0
+    12aa:	46290913          	addi	s2,s2,1122 # 1708 <freep>
+  if(p == (char*)-1)
+    12ae:	5afd                	li	s5,-1
+    12b0:	a895                	j	1324 <malloc+0xca>
+    base.s.ptr = freep = prevp = &base;
+    12b2:	00001797          	auipc	a5,0x1
+    12b6:	84678793          	addi	a5,a5,-1978 # 1af8 <base>
+    12ba:	00000717          	auipc	a4,0x0
+    12be:	44f73723          	sd	a5,1102(a4) # 1708 <freep>
+    12c2:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+    12c4:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+    12c8:	b7e1                	j	1290 <malloc+0x36>
+      if(p->s.size == nunits)
+    12ca:	02e48c63          	beq	s1,a4,1302 <malloc+0xa8>
+        p->s.size -= nunits;
+    12ce:	4137073b          	subw	a4,a4,s3
+    12d2:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+    12d4:	02071693          	slli	a3,a4,0x20
+    12d8:	01c6d713          	srli	a4,a3,0x1c
+    12dc:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+    12de:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+    12e2:	00000717          	auipc	a4,0x0
+    12e6:	42a73323          	sd	a0,1062(a4) # 1708 <freep>
+      return (void*)(p + 1);
+    12ea:	01078513          	addi	a0,a5,16
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+    12ee:	70e2                	ld	ra,56(sp)
+    12f0:	7442                	ld	s0,48(sp)
+    12f2:	74a2                	ld	s1,40(sp)
+    12f4:	7902                	ld	s2,32(sp)
+    12f6:	69e2                	ld	s3,24(sp)
+    12f8:	6a42                	ld	s4,16(sp)
+    12fa:	6aa2                	ld	s5,8(sp)
+    12fc:	6b02                	ld	s6,0(sp)
+    12fe:	6121                	addi	sp,sp,64
+    1300:	8082                	ret
+        prevp->s.ptr = p->s.ptr;
+    1302:	6398                	ld	a4,0(a5)
+    1304:	e118                	sd	a4,0(a0)
+    1306:	bff1                	j	12e2 <malloc+0x88>
+  hp->s.size = nu;
+    1308:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+    130c:	0541                	addi	a0,a0,16
+    130e:	00000097          	auipc	ra,0x0
+    1312:	eca080e7          	jalr	-310(ra) # 11d8 <free>
+  return freep;
+    1316:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+    131a:	d971                	beqz	a0,12ee <malloc+0x94>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    131c:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+    131e:	4798                	lw	a4,8(a5)
+    1320:	fa9775e3          	bgeu	a4,s1,12ca <malloc+0x70>
+    if(p == freep)
+    1324:	00093703          	ld	a4,0(s2)
+    1328:	853e                	mv	a0,a5
+    132a:	fef719e3          	bne	a4,a5,131c <malloc+0xc2>
+  p = sbrk(nu * sizeof(Header));
+    132e:	8552                	mv	a0,s4
+    1330:	00000097          	auipc	ra,0x0
+    1334:	b50080e7          	jalr	-1200(ra) # e80 <sbrk>
+  if(p == (char*)-1)
+    1338:	fd5518e3          	bne	a0,s5,1308 <malloc+0xae>
+        return 0;
+    133c:	4501                	li	a0,0
+    133e:	bf45                	j	12ee <malloc+0x94>
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/grind.d os-workshop/user/grind.d
--- xv6-riscv/user/grind.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/grind.d	2022-05-28 22:34:37.000000000 -0300
@@ -0,0 +1,3 @@
+user/grind.o: user/grind.c kernel/param.h kernel/types.h kernel/stat.h \
+ user/user.h kernel/fs.h kernel/fcntl.h kernel/syscall.h \
+ kernel/memlayout.h kernel/riscv.h
Binary files xv6-riscv/user/grind.o and os-workshop/user/grind.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/grind.sym os-workshop/user/grind.sym
--- xv6-riscv/user/grind.sym	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/grind.sym	2022-05-28 22:34:37.000000000 -0300
@@ -0,0 +1,83 @@
+0000000000000000 .text
+0000000000001340 .rodata
+0000000000001700 .sdata
+0000000000001708 .sbss
+0000000000001710 .bss
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_aranges
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_line
+0000000000000000 .debug_frame
+0000000000000000 .debug_str
+0000000000000000 .debug_line_str
+0000000000000000 .debug_loclists
+0000000000000000 .debug_rnglists
+0000000000000000 grind.c
+0000000000001710 buf.0
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+0000000000000ec8 putc
+0000000000000eea printint
+00000000000016e8 digits
+0000000000000000 umalloc.c
+0000000000001708 freep
+0000000000001af8 base
+0000000000000b8c strcpy
+00000000000011a2 printf
+0000000000001ef9 __global_pointer$
+0000000000000000 do_rand
+0000000000000d46 memmove
+0000000000000e40 mknod
+0000000000000ea8 semdown
+0000000000000c44 gets
+0000000000001700 __SDATA_BEGIN__
+0000000000000ea0 semget
+0000000000000e78 getpid
+0000000000000dd8 memcpy
+000000000000125a malloc
+0000000000000eb8 semclose
+0000000000000e88 sleep
+0000000000000e08 pipe
+0000000000000078 go
+0000000000000a60 iter
+0000000000000e18 write
+0000000000000e50 fstat
+0000000000001174 fprintf
+0000000000000e28 kill
+0000000000000f96 vprintf
+0000000000000e68 chdir
+0000000000000e30 exec
+0000000000000e00 wait
+0000000000000058 rand
+0000000000000e10 read
+0000000000000e48 unlink
+0000000000000d9e memcmp
+0000000000000df0 fork
+0000000000001700 rand_next
+0000000000001b08 __BSS_END__
+0000000000000e80 sbrk
+0000000000000e90 uptime
+0000000000001708 __bss_start
+0000000000000bfe memset
+0000000000000b56 main
+0000000000000ec0 timeout
+0000000000000ba8 strcmp
+0000000000000e70 dup
+00000000000016f9 __DATA_BEGIN__
+0000000000000cb8 stat
+0000000000001708 _edata
+0000000000000e98 setp
+0000000000001b08 _end
+0000000000000e58 link
+0000000000000df8 exit
+0000000000000cfe atoi
+0000000000000bd4 strlen
+0000000000000e38 open
+0000000000000eb0 semup
+0000000000000c20 strchr
+0000000000000e60 mkdir
+0000000000000e20 close
+00000000000011d8 free
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/helloworld.asm os-workshop/user/helloworld.asm
--- xv6-riscv/user/helloworld.asm	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/helloworld.asm	2022-05-28 22:34:31.000000000 -0300
@@ -0,0 +1,1346 @@
+
+user/_helloworld:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <main>:
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main() {
+   0:	1141                	addi	sp,sp,-16
+   2:	e406                	sd	ra,8(sp)
+   4:	e022                	sd	s0,0(sp)
+   6:	0800                	addi	s0,sp,16
+  printf("Hello world! \n");
+   8:	00000517          	auipc	a0,0x0
+   c:	7d050513          	addi	a0,a0,2000 # 7d8 <malloc+0xe8>
+  10:	00000097          	auipc	ra,0x0
+  14:	628080e7          	jalr	1576(ra) # 638 <printf>
+  exit(0);
+  18:	4501                	li	a0,0
+  1a:	00000097          	auipc	ra,0x0
+  1e:	274080e7          	jalr	628(ra) # 28e <exit>
+
+0000000000000022 <strcpy>:
+#include "kernel/fcntl.h"
+#include "user/user.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  22:	1141                	addi	sp,sp,-16
+  24:	e422                	sd	s0,8(sp)
+  26:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  28:	87aa                	mv	a5,a0
+  2a:	0585                	addi	a1,a1,1
+  2c:	0785                	addi	a5,a5,1
+  2e:	fff5c703          	lbu	a4,-1(a1)
+  32:	fee78fa3          	sb	a4,-1(a5)
+  36:	fb75                	bnez	a4,2a <strcpy+0x8>
+    ;
+  return os;
+}
+  38:	6422                	ld	s0,8(sp)
+  3a:	0141                	addi	sp,sp,16
+  3c:	8082                	ret
+
+000000000000003e <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  3e:	1141                	addi	sp,sp,-16
+  40:	e422                	sd	s0,8(sp)
+  42:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+  44:	00054783          	lbu	a5,0(a0)
+  48:	cb91                	beqz	a5,5c <strcmp+0x1e>
+  4a:	0005c703          	lbu	a4,0(a1)
+  4e:	00f71763          	bne	a4,a5,5c <strcmp+0x1e>
+    p++, q++;
+  52:	0505                	addi	a0,a0,1
+  54:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+  56:	00054783          	lbu	a5,0(a0)
+  5a:	fbe5                	bnez	a5,4a <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+  5c:	0005c503          	lbu	a0,0(a1)
+}
+  60:	40a7853b          	subw	a0,a5,a0
+  64:	6422                	ld	s0,8(sp)
+  66:	0141                	addi	sp,sp,16
+  68:	8082                	ret
+
+000000000000006a <strlen>:
+
+uint
+strlen(const char *s)
+{
+  6a:	1141                	addi	sp,sp,-16
+  6c:	e422                	sd	s0,8(sp)
+  6e:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+  70:	00054783          	lbu	a5,0(a0)
+  74:	cf91                	beqz	a5,90 <strlen+0x26>
+  76:	0505                	addi	a0,a0,1
+  78:	87aa                	mv	a5,a0
+  7a:	4685                	li	a3,1
+  7c:	9e89                	subw	a3,a3,a0
+  7e:	00f6853b          	addw	a0,a3,a5
+  82:	0785                	addi	a5,a5,1
+  84:	fff7c703          	lbu	a4,-1(a5)
+  88:	fb7d                	bnez	a4,7e <strlen+0x14>
+    ;
+  return n;
+}
+  8a:	6422                	ld	s0,8(sp)
+  8c:	0141                	addi	sp,sp,16
+  8e:	8082                	ret
+  for(n = 0; s[n]; n++)
+  90:	4501                	li	a0,0
+  92:	bfe5                	j	8a <strlen+0x20>
+
+0000000000000094 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  94:	1141                	addi	sp,sp,-16
+  96:	e422                	sd	s0,8(sp)
+  98:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+  9a:	ca19                	beqz	a2,b0 <memset+0x1c>
+  9c:	87aa                	mv	a5,a0
+  9e:	1602                	slli	a2,a2,0x20
+  a0:	9201                	srli	a2,a2,0x20
+  a2:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+  a6:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+  aa:	0785                	addi	a5,a5,1
+  ac:	fee79de3          	bne	a5,a4,a6 <memset+0x12>
+  }
+  return dst;
+}
+  b0:	6422                	ld	s0,8(sp)
+  b2:	0141                	addi	sp,sp,16
+  b4:	8082                	ret
+
+00000000000000b6 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+  b6:	1141                	addi	sp,sp,-16
+  b8:	e422                	sd	s0,8(sp)
+  ba:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+  bc:	00054783          	lbu	a5,0(a0)
+  c0:	cb99                	beqz	a5,d6 <strchr+0x20>
+    if(*s == c)
+  c2:	00f58763          	beq	a1,a5,d0 <strchr+0x1a>
+  for(; *s; s++)
+  c6:	0505                	addi	a0,a0,1
+  c8:	00054783          	lbu	a5,0(a0)
+  cc:	fbfd                	bnez	a5,c2 <strchr+0xc>
+      return (char*)s;
+  return 0;
+  ce:	4501                	li	a0,0
+}
+  d0:	6422                	ld	s0,8(sp)
+  d2:	0141                	addi	sp,sp,16
+  d4:	8082                	ret
+  return 0;
+  d6:	4501                	li	a0,0
+  d8:	bfe5                	j	d0 <strchr+0x1a>
+
+00000000000000da <gets>:
+
+char*
+gets(char *buf, int max)
+{
+  da:	711d                	addi	sp,sp,-96
+  dc:	ec86                	sd	ra,88(sp)
+  de:	e8a2                	sd	s0,80(sp)
+  e0:	e4a6                	sd	s1,72(sp)
+  e2:	e0ca                	sd	s2,64(sp)
+  e4:	fc4e                	sd	s3,56(sp)
+  e6:	f852                	sd	s4,48(sp)
+  e8:	f456                	sd	s5,40(sp)
+  ea:	f05a                	sd	s6,32(sp)
+  ec:	ec5e                	sd	s7,24(sp)
+  ee:	1080                	addi	s0,sp,96
+  f0:	8baa                	mv	s7,a0
+  f2:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+  f4:	892a                	mv	s2,a0
+  f6:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+  f8:	4aa9                	li	s5,10
+  fa:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+  fc:	89a6                	mv	s3,s1
+  fe:	2485                	addiw	s1,s1,1
+ 100:	0344d863          	bge	s1,s4,130 <gets+0x56>
+    cc = read(0, &c, 1);
+ 104:	4605                	li	a2,1
+ 106:	faf40593          	addi	a1,s0,-81
+ 10a:	4501                	li	a0,0
+ 10c:	00000097          	auipc	ra,0x0
+ 110:	19a080e7          	jalr	410(ra) # 2a6 <read>
+    if(cc < 1)
+ 114:	00a05e63          	blez	a0,130 <gets+0x56>
+    buf[i++] = c;
+ 118:	faf44783          	lbu	a5,-81(s0)
+ 11c:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+ 120:	01578763          	beq	a5,s5,12e <gets+0x54>
+ 124:	0905                	addi	s2,s2,1
+ 126:	fd679be3          	bne	a5,s6,fc <gets+0x22>
+  for(i=0; i+1 < max; ){
+ 12a:	89a6                	mv	s3,s1
+ 12c:	a011                	j	130 <gets+0x56>
+ 12e:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+ 130:	99de                	add	s3,s3,s7
+ 132:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+ 136:	855e                	mv	a0,s7
+ 138:	60e6                	ld	ra,88(sp)
+ 13a:	6446                	ld	s0,80(sp)
+ 13c:	64a6                	ld	s1,72(sp)
+ 13e:	6906                	ld	s2,64(sp)
+ 140:	79e2                	ld	s3,56(sp)
+ 142:	7a42                	ld	s4,48(sp)
+ 144:	7aa2                	ld	s5,40(sp)
+ 146:	7b02                	ld	s6,32(sp)
+ 148:	6be2                	ld	s7,24(sp)
+ 14a:	6125                	addi	sp,sp,96
+ 14c:	8082                	ret
+
+000000000000014e <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 14e:	1101                	addi	sp,sp,-32
+ 150:	ec06                	sd	ra,24(sp)
+ 152:	e822                	sd	s0,16(sp)
+ 154:	e426                	sd	s1,8(sp)
+ 156:	e04a                	sd	s2,0(sp)
+ 158:	1000                	addi	s0,sp,32
+ 15a:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 15c:	4581                	li	a1,0
+ 15e:	00000097          	auipc	ra,0x0
+ 162:	170080e7          	jalr	368(ra) # 2ce <open>
+  if(fd < 0)
+ 166:	02054563          	bltz	a0,190 <stat+0x42>
+ 16a:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+ 16c:	85ca                	mv	a1,s2
+ 16e:	00000097          	auipc	ra,0x0
+ 172:	178080e7          	jalr	376(ra) # 2e6 <fstat>
+ 176:	892a                	mv	s2,a0
+  close(fd);
+ 178:	8526                	mv	a0,s1
+ 17a:	00000097          	auipc	ra,0x0
+ 17e:	13c080e7          	jalr	316(ra) # 2b6 <close>
+  return r;
+}
+ 182:	854a                	mv	a0,s2
+ 184:	60e2                	ld	ra,24(sp)
+ 186:	6442                	ld	s0,16(sp)
+ 188:	64a2                	ld	s1,8(sp)
+ 18a:	6902                	ld	s2,0(sp)
+ 18c:	6105                	addi	sp,sp,32
+ 18e:	8082                	ret
+    return -1;
+ 190:	597d                	li	s2,-1
+ 192:	bfc5                	j	182 <stat+0x34>
+
+0000000000000194 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 194:	1141                	addi	sp,sp,-16
+ 196:	e422                	sd	s0,8(sp)
+ 198:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 19a:	00054683          	lbu	a3,0(a0)
+ 19e:	fd06879b          	addiw	a5,a3,-48
+ 1a2:	0ff7f793          	zext.b	a5,a5
+ 1a6:	4625                	li	a2,9
+ 1a8:	02f66863          	bltu	a2,a5,1d8 <atoi+0x44>
+ 1ac:	872a                	mv	a4,a0
+  n = 0;
+ 1ae:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+ 1b0:	0705                	addi	a4,a4,1
+ 1b2:	0025179b          	slliw	a5,a0,0x2
+ 1b6:	9fa9                	addw	a5,a5,a0
+ 1b8:	0017979b          	slliw	a5,a5,0x1
+ 1bc:	9fb5                	addw	a5,a5,a3
+ 1be:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+ 1c2:	00074683          	lbu	a3,0(a4)
+ 1c6:	fd06879b          	addiw	a5,a3,-48
+ 1ca:	0ff7f793          	zext.b	a5,a5
+ 1ce:	fef671e3          	bgeu	a2,a5,1b0 <atoi+0x1c>
+  return n;
+}
+ 1d2:	6422                	ld	s0,8(sp)
+ 1d4:	0141                	addi	sp,sp,16
+ 1d6:	8082                	ret
+  n = 0;
+ 1d8:	4501                	li	a0,0
+ 1da:	bfe5                	j	1d2 <atoi+0x3e>
+
+00000000000001dc <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 1dc:	1141                	addi	sp,sp,-16
+ 1de:	e422                	sd	s0,8(sp)
+ 1e0:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+ 1e2:	02b57463          	bgeu	a0,a1,20a <memmove+0x2e>
+    while(n-- > 0)
+ 1e6:	00c05f63          	blez	a2,204 <memmove+0x28>
+ 1ea:	1602                	slli	a2,a2,0x20
+ 1ec:	9201                	srli	a2,a2,0x20
+ 1ee:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+ 1f2:	872a                	mv	a4,a0
+      *dst++ = *src++;
+ 1f4:	0585                	addi	a1,a1,1
+ 1f6:	0705                	addi	a4,a4,1
+ 1f8:	fff5c683          	lbu	a3,-1(a1)
+ 1fc:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+ 200:	fee79ae3          	bne	a5,a4,1f4 <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+ 204:	6422                	ld	s0,8(sp)
+ 206:	0141                	addi	sp,sp,16
+ 208:	8082                	ret
+    dst += n;
+ 20a:	00c50733          	add	a4,a0,a2
+    src += n;
+ 20e:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+ 210:	fec05ae3          	blez	a2,204 <memmove+0x28>
+ 214:	fff6079b          	addiw	a5,a2,-1
+ 218:	1782                	slli	a5,a5,0x20
+ 21a:	9381                	srli	a5,a5,0x20
+ 21c:	fff7c793          	not	a5,a5
+ 220:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+ 222:	15fd                	addi	a1,a1,-1
+ 224:	177d                	addi	a4,a4,-1
+ 226:	0005c683          	lbu	a3,0(a1)
+ 22a:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+ 22e:	fee79ae3          	bne	a5,a4,222 <memmove+0x46>
+ 232:	bfc9                	j	204 <memmove+0x28>
+
+0000000000000234 <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+ 234:	1141                	addi	sp,sp,-16
+ 236:	e422                	sd	s0,8(sp)
+ 238:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+ 23a:	ca05                	beqz	a2,26a <memcmp+0x36>
+ 23c:	fff6069b          	addiw	a3,a2,-1
+ 240:	1682                	slli	a3,a3,0x20
+ 242:	9281                	srli	a3,a3,0x20
+ 244:	0685                	addi	a3,a3,1
+ 246:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+ 248:	00054783          	lbu	a5,0(a0)
+ 24c:	0005c703          	lbu	a4,0(a1)
+ 250:	00e79863          	bne	a5,a4,260 <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+ 254:	0505                	addi	a0,a0,1
+    p2++;
+ 256:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+ 258:	fed518e3          	bne	a0,a3,248 <memcmp+0x14>
+  }
+  return 0;
+ 25c:	4501                	li	a0,0
+ 25e:	a019                	j	264 <memcmp+0x30>
+      return *p1 - *p2;
+ 260:	40e7853b          	subw	a0,a5,a4
+}
+ 264:	6422                	ld	s0,8(sp)
+ 266:	0141                	addi	sp,sp,16
+ 268:	8082                	ret
+  return 0;
+ 26a:	4501                	li	a0,0
+ 26c:	bfe5                	j	264 <memcmp+0x30>
+
+000000000000026e <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+ 26e:	1141                	addi	sp,sp,-16
+ 270:	e406                	sd	ra,8(sp)
+ 272:	e022                	sd	s0,0(sp)
+ 274:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+ 276:	00000097          	auipc	ra,0x0
+ 27a:	f66080e7          	jalr	-154(ra) # 1dc <memmove>
+}
+ 27e:	60a2                	ld	ra,8(sp)
+ 280:	6402                	ld	s0,0(sp)
+ 282:	0141                	addi	sp,sp,16
+ 284:	8082                	ret
+
+0000000000000286 <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ 286:	4885                	li	a7,1
+ ecall
+ 288:	00000073          	ecall
+ ret
+ 28c:	8082                	ret
+
+000000000000028e <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+ 28e:	4889                	li	a7,2
+ ecall
+ 290:	00000073          	ecall
+ ret
+ 294:	8082                	ret
+
+0000000000000296 <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+ 296:	488d                	li	a7,3
+ ecall
+ 298:	00000073          	ecall
+ ret
+ 29c:	8082                	ret
+
+000000000000029e <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ 29e:	4891                	li	a7,4
+ ecall
+ 2a0:	00000073          	ecall
+ ret
+ 2a4:	8082                	ret
+
+00000000000002a6 <read>:
+.global read
+read:
+ li a7, SYS_read
+ 2a6:	4895                	li	a7,5
+ ecall
+ 2a8:	00000073          	ecall
+ ret
+ 2ac:	8082                	ret
+
+00000000000002ae <write>:
+.global write
+write:
+ li a7, SYS_write
+ 2ae:	48c1                	li	a7,16
+ ecall
+ 2b0:	00000073          	ecall
+ ret
+ 2b4:	8082                	ret
+
+00000000000002b6 <close>:
+.global close
+close:
+ li a7, SYS_close
+ 2b6:	48d5                	li	a7,21
+ ecall
+ 2b8:	00000073          	ecall
+ ret
+ 2bc:	8082                	ret
+
+00000000000002be <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+ 2be:	4899                	li	a7,6
+ ecall
+ 2c0:	00000073          	ecall
+ ret
+ 2c4:	8082                	ret
+
+00000000000002c6 <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+ 2c6:	489d                	li	a7,7
+ ecall
+ 2c8:	00000073          	ecall
+ ret
+ 2cc:	8082                	ret
+
+00000000000002ce <open>:
+.global open
+open:
+ li a7, SYS_open
+ 2ce:	48bd                	li	a7,15
+ ecall
+ 2d0:	00000073          	ecall
+ ret
+ 2d4:	8082                	ret
+
+00000000000002d6 <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ 2d6:	48c5                	li	a7,17
+ ecall
+ 2d8:	00000073          	ecall
+ ret
+ 2dc:	8082                	ret
+
+00000000000002de <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ 2de:	48c9                	li	a7,18
+ ecall
+ 2e0:	00000073          	ecall
+ ret
+ 2e4:	8082                	ret
+
+00000000000002e6 <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ 2e6:	48a1                	li	a7,8
+ ecall
+ 2e8:	00000073          	ecall
+ ret
+ 2ec:	8082                	ret
+
+00000000000002ee <link>:
+.global link
+link:
+ li a7, SYS_link
+ 2ee:	48cd                	li	a7,19
+ ecall
+ 2f0:	00000073          	ecall
+ ret
+ 2f4:	8082                	ret
+
+00000000000002f6 <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ 2f6:	48d1                	li	a7,20
+ ecall
+ 2f8:	00000073          	ecall
+ ret
+ 2fc:	8082                	ret
+
+00000000000002fe <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ 2fe:	48a5                	li	a7,9
+ ecall
+ 300:	00000073          	ecall
+ ret
+ 304:	8082                	ret
+
+0000000000000306 <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+ 306:	48a9                	li	a7,10
+ ecall
+ 308:	00000073          	ecall
+ ret
+ 30c:	8082                	ret
+
+000000000000030e <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ 30e:	48ad                	li	a7,11
+ ecall
+ 310:	00000073          	ecall
+ ret
+ 314:	8082                	ret
+
+0000000000000316 <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ 316:	48b1                	li	a7,12
+ ecall
+ 318:	00000073          	ecall
+ ret
+ 31c:	8082                	ret
+
+000000000000031e <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ 31e:	48b5                	li	a7,13
+ ecall
+ 320:	00000073          	ecall
+ ret
+ 324:	8082                	ret
+
+0000000000000326 <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ 326:	48b9                	li	a7,14
+ ecall
+ 328:	00000073          	ecall
+ ret
+ 32c:	8082                	ret
+
+000000000000032e <setp>:
+.global setp
+setp:
+ li a7, SYS_setp
+ 32e:	48d9                	li	a7,22
+ ecall
+ 330:	00000073          	ecall
+ ret
+ 334:	8082                	ret
+
+0000000000000336 <semget>:
+.global semget
+semget:
+ li a7, SYS_semget
+ 336:	48dd                	li	a7,23
+ ecall
+ 338:	00000073          	ecall
+ ret
+ 33c:	8082                	ret
+
+000000000000033e <semdown>:
+.global semdown
+semdown:
+ li a7, SYS_semdown
+ 33e:	48e1                	li	a7,24
+ ecall
+ 340:	00000073          	ecall
+ ret
+ 344:	8082                	ret
+
+0000000000000346 <semup>:
+.global semup
+semup:
+ li a7, SYS_semup
+ 346:	48e5                	li	a7,25
+ ecall
+ 348:	00000073          	ecall
+ ret
+ 34c:	8082                	ret
+
+000000000000034e <semclose>:
+.global semclose
+semclose:
+ li a7, SYS_semclose
+ 34e:	48e9                	li	a7,26
+ ecall
+ 350:	00000073          	ecall
+ ret
+ 354:	8082                	ret
+
+0000000000000356 <timeout>:
+.global timeout
+timeout:
+ li a7, SYS_timeout
+ 356:	48ed                	li	a7,27
+ ecall
+ 358:	00000073          	ecall
+ ret
+ 35c:	8082                	ret
+
+000000000000035e <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+ 35e:	1101                	addi	sp,sp,-32
+ 360:	ec06                	sd	ra,24(sp)
+ 362:	e822                	sd	s0,16(sp)
+ 364:	1000                	addi	s0,sp,32
+ 366:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+ 36a:	4605                	li	a2,1
+ 36c:	fef40593          	addi	a1,s0,-17
+ 370:	00000097          	auipc	ra,0x0
+ 374:	f3e080e7          	jalr	-194(ra) # 2ae <write>
+}
+ 378:	60e2                	ld	ra,24(sp)
+ 37a:	6442                	ld	s0,16(sp)
+ 37c:	6105                	addi	sp,sp,32
+ 37e:	8082                	ret
+
+0000000000000380 <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 380:	7139                	addi	sp,sp,-64
+ 382:	fc06                	sd	ra,56(sp)
+ 384:	f822                	sd	s0,48(sp)
+ 386:	f426                	sd	s1,40(sp)
+ 388:	f04a                	sd	s2,32(sp)
+ 38a:	ec4e                	sd	s3,24(sp)
+ 38c:	0080                	addi	s0,sp,64
+ 38e:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 390:	c299                	beqz	a3,396 <printint+0x16>
+ 392:	0805c963          	bltz	a1,424 <printint+0xa4>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 396:	2581                	sext.w	a1,a1
+  neg = 0;
+ 398:	4881                	li	a7,0
+ 39a:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+ 39e:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+ 3a0:	2601                	sext.w	a2,a2
+ 3a2:	00000517          	auipc	a0,0x0
+ 3a6:	4a650513          	addi	a0,a0,1190 # 848 <digits>
+ 3aa:	883a                	mv	a6,a4
+ 3ac:	2705                	addiw	a4,a4,1
+ 3ae:	02c5f7bb          	remuw	a5,a1,a2
+ 3b2:	1782                	slli	a5,a5,0x20
+ 3b4:	9381                	srli	a5,a5,0x20
+ 3b6:	97aa                	add	a5,a5,a0
+ 3b8:	0007c783          	lbu	a5,0(a5)
+ 3bc:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+ 3c0:	0005879b          	sext.w	a5,a1
+ 3c4:	02c5d5bb          	divuw	a1,a1,a2
+ 3c8:	0685                	addi	a3,a3,1
+ 3ca:	fec7f0e3          	bgeu	a5,a2,3aa <printint+0x2a>
+  if(neg)
+ 3ce:	00088c63          	beqz	a7,3e6 <printint+0x66>
+    buf[i++] = '-';
+ 3d2:	fd070793          	addi	a5,a4,-48
+ 3d6:	00878733          	add	a4,a5,s0
+ 3da:	02d00793          	li	a5,45
+ 3de:	fef70823          	sb	a5,-16(a4)
+ 3e2:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+ 3e6:	02e05863          	blez	a4,416 <printint+0x96>
+ 3ea:	fc040793          	addi	a5,s0,-64
+ 3ee:	00e78933          	add	s2,a5,a4
+ 3f2:	fff78993          	addi	s3,a5,-1
+ 3f6:	99ba                	add	s3,s3,a4
+ 3f8:	377d                	addiw	a4,a4,-1
+ 3fa:	1702                	slli	a4,a4,0x20
+ 3fc:	9301                	srli	a4,a4,0x20
+ 3fe:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+ 402:	fff94583          	lbu	a1,-1(s2)
+ 406:	8526                	mv	a0,s1
+ 408:	00000097          	auipc	ra,0x0
+ 40c:	f56080e7          	jalr	-170(ra) # 35e <putc>
+  while(--i >= 0)
+ 410:	197d                	addi	s2,s2,-1
+ 412:	ff3918e3          	bne	s2,s3,402 <printint+0x82>
+}
+ 416:	70e2                	ld	ra,56(sp)
+ 418:	7442                	ld	s0,48(sp)
+ 41a:	74a2                	ld	s1,40(sp)
+ 41c:	7902                	ld	s2,32(sp)
+ 41e:	69e2                	ld	s3,24(sp)
+ 420:	6121                	addi	sp,sp,64
+ 422:	8082                	ret
+    x = -xx;
+ 424:	40b005bb          	negw	a1,a1
+    neg = 1;
+ 428:	4885                	li	a7,1
+    x = -xx;
+ 42a:	bf85                	j	39a <printint+0x1a>
+
+000000000000042c <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+ 42c:	7119                	addi	sp,sp,-128
+ 42e:	fc86                	sd	ra,120(sp)
+ 430:	f8a2                	sd	s0,112(sp)
+ 432:	f4a6                	sd	s1,104(sp)
+ 434:	f0ca                	sd	s2,96(sp)
+ 436:	ecce                	sd	s3,88(sp)
+ 438:	e8d2                	sd	s4,80(sp)
+ 43a:	e4d6                	sd	s5,72(sp)
+ 43c:	e0da                	sd	s6,64(sp)
+ 43e:	fc5e                	sd	s7,56(sp)
+ 440:	f862                	sd	s8,48(sp)
+ 442:	f466                	sd	s9,40(sp)
+ 444:	f06a                	sd	s10,32(sp)
+ 446:	ec6e                	sd	s11,24(sp)
+ 448:	0100                	addi	s0,sp,128
+  char *s;
+  int c, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+ 44a:	0005c903          	lbu	s2,0(a1)
+ 44e:	18090f63          	beqz	s2,5ec <vprintf+0x1c0>
+ 452:	8aaa                	mv	s5,a0
+ 454:	8b32                	mv	s6,a2
+ 456:	00158493          	addi	s1,a1,1
+  state = 0;
+ 45a:	4981                	li	s3,0
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 45c:	02500a13          	li	s4,37
+ 460:	4c55                	li	s8,21
+ 462:	00000c97          	auipc	s9,0x0
+ 466:	38ec8c93          	addi	s9,s9,910 # 7f0 <malloc+0x100>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c == 's'){
+        s = va_arg(ap, char*);
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 46a:	02800d93          	li	s11,40
+  putc(fd, 'x');
+ 46e:	4d41                	li	s10,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 470:	00000b97          	auipc	s7,0x0
+ 474:	3d8b8b93          	addi	s7,s7,984 # 848 <digits>
+ 478:	a839                	j	496 <vprintf+0x6a>
+        putc(fd, c);
+ 47a:	85ca                	mv	a1,s2
+ 47c:	8556                	mv	a0,s5
+ 47e:	00000097          	auipc	ra,0x0
+ 482:	ee0080e7          	jalr	-288(ra) # 35e <putc>
+ 486:	a019                	j	48c <vprintf+0x60>
+    } else if(state == '%'){
+ 488:	01498d63          	beq	s3,s4,4a2 <vprintf+0x76>
+  for(i = 0; fmt[i]; i++){
+ 48c:	0485                	addi	s1,s1,1
+ 48e:	fff4c903          	lbu	s2,-1(s1)
+ 492:	14090d63          	beqz	s2,5ec <vprintf+0x1c0>
+    if(state == 0){
+ 496:	fe0999e3          	bnez	s3,488 <vprintf+0x5c>
+      if(c == '%'){
+ 49a:	ff4910e3          	bne	s2,s4,47a <vprintf+0x4e>
+        state = '%';
+ 49e:	89d2                	mv	s3,s4
+ 4a0:	b7f5                	j	48c <vprintf+0x60>
+      if(c == 'd'){
+ 4a2:	11490c63          	beq	s2,s4,5ba <vprintf+0x18e>
+ 4a6:	f9d9079b          	addiw	a5,s2,-99
+ 4aa:	0ff7f793          	zext.b	a5,a5
+ 4ae:	10fc6e63          	bltu	s8,a5,5ca <vprintf+0x19e>
+ 4b2:	f9d9079b          	addiw	a5,s2,-99
+ 4b6:	0ff7f713          	zext.b	a4,a5
+ 4ba:	10ec6863          	bltu	s8,a4,5ca <vprintf+0x19e>
+ 4be:	00271793          	slli	a5,a4,0x2
+ 4c2:	97e6                	add	a5,a5,s9
+ 4c4:	439c                	lw	a5,0(a5)
+ 4c6:	97e6                	add	a5,a5,s9
+ 4c8:	8782                	jr	a5
+        printint(fd, va_arg(ap, int), 10, 1);
+ 4ca:	008b0913          	addi	s2,s6,8
+ 4ce:	4685                	li	a3,1
+ 4d0:	4629                	li	a2,10
+ 4d2:	000b2583          	lw	a1,0(s6)
+ 4d6:	8556                	mv	a0,s5
+ 4d8:	00000097          	auipc	ra,0x0
+ 4dc:	ea8080e7          	jalr	-344(ra) # 380 <printint>
+ 4e0:	8b4a                	mv	s6,s2
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 4e2:	4981                	li	s3,0
+ 4e4:	b765                	j	48c <vprintf+0x60>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 4e6:	008b0913          	addi	s2,s6,8
+ 4ea:	4681                	li	a3,0
+ 4ec:	4629                	li	a2,10
+ 4ee:	000b2583          	lw	a1,0(s6)
+ 4f2:	8556                	mv	a0,s5
+ 4f4:	00000097          	auipc	ra,0x0
+ 4f8:	e8c080e7          	jalr	-372(ra) # 380 <printint>
+ 4fc:	8b4a                	mv	s6,s2
+      state = 0;
+ 4fe:	4981                	li	s3,0
+ 500:	b771                	j	48c <vprintf+0x60>
+        printint(fd, va_arg(ap, int), 16, 0);
+ 502:	008b0913          	addi	s2,s6,8
+ 506:	4681                	li	a3,0
+ 508:	866a                	mv	a2,s10
+ 50a:	000b2583          	lw	a1,0(s6)
+ 50e:	8556                	mv	a0,s5
+ 510:	00000097          	auipc	ra,0x0
+ 514:	e70080e7          	jalr	-400(ra) # 380 <printint>
+ 518:	8b4a                	mv	s6,s2
+      state = 0;
+ 51a:	4981                	li	s3,0
+ 51c:	bf85                	j	48c <vprintf+0x60>
+        printptr(fd, va_arg(ap, uint64));
+ 51e:	008b0793          	addi	a5,s6,8
+ 522:	f8f43423          	sd	a5,-120(s0)
+ 526:	000b3983          	ld	s3,0(s6)
+  putc(fd, '0');
+ 52a:	03000593          	li	a1,48
+ 52e:	8556                	mv	a0,s5
+ 530:	00000097          	auipc	ra,0x0
+ 534:	e2e080e7          	jalr	-466(ra) # 35e <putc>
+  putc(fd, 'x');
+ 538:	07800593          	li	a1,120
+ 53c:	8556                	mv	a0,s5
+ 53e:	00000097          	auipc	ra,0x0
+ 542:	e20080e7          	jalr	-480(ra) # 35e <putc>
+ 546:	896a                	mv	s2,s10
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 548:	03c9d793          	srli	a5,s3,0x3c
+ 54c:	97de                	add	a5,a5,s7
+ 54e:	0007c583          	lbu	a1,0(a5)
+ 552:	8556                	mv	a0,s5
+ 554:	00000097          	auipc	ra,0x0
+ 558:	e0a080e7          	jalr	-502(ra) # 35e <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+ 55c:	0992                	slli	s3,s3,0x4
+ 55e:	397d                	addiw	s2,s2,-1
+ 560:	fe0914e3          	bnez	s2,548 <vprintf+0x11c>
+        printptr(fd, va_arg(ap, uint64));
+ 564:	f8843b03          	ld	s6,-120(s0)
+      state = 0;
+ 568:	4981                	li	s3,0
+ 56a:	b70d                	j	48c <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 56c:	008b0913          	addi	s2,s6,8
+ 570:	000b3983          	ld	s3,0(s6)
+        if(s == 0)
+ 574:	02098163          	beqz	s3,596 <vprintf+0x16a>
+        while(*s != 0){
+ 578:	0009c583          	lbu	a1,0(s3)
+ 57c:	c5ad                	beqz	a1,5e6 <vprintf+0x1ba>
+          putc(fd, *s);
+ 57e:	8556                	mv	a0,s5
+ 580:	00000097          	auipc	ra,0x0
+ 584:	dde080e7          	jalr	-546(ra) # 35e <putc>
+          s++;
+ 588:	0985                	addi	s3,s3,1
+        while(*s != 0){
+ 58a:	0009c583          	lbu	a1,0(s3)
+ 58e:	f9e5                	bnez	a1,57e <vprintf+0x152>
+        s = va_arg(ap, char*);
+ 590:	8b4a                	mv	s6,s2
+      state = 0;
+ 592:	4981                	li	s3,0
+ 594:	bde5                	j	48c <vprintf+0x60>
+          s = "(null)";
+ 596:	00000997          	auipc	s3,0x0
+ 59a:	25298993          	addi	s3,s3,594 # 7e8 <malloc+0xf8>
+        while(*s != 0){
+ 59e:	85ee                	mv	a1,s11
+ 5a0:	bff9                	j	57e <vprintf+0x152>
+        putc(fd, va_arg(ap, uint));
+ 5a2:	008b0913          	addi	s2,s6,8
+ 5a6:	000b4583          	lbu	a1,0(s6)
+ 5aa:	8556                	mv	a0,s5
+ 5ac:	00000097          	auipc	ra,0x0
+ 5b0:	db2080e7          	jalr	-590(ra) # 35e <putc>
+ 5b4:	8b4a                	mv	s6,s2
+      state = 0;
+ 5b6:	4981                	li	s3,0
+ 5b8:	bdd1                	j	48c <vprintf+0x60>
+        putc(fd, c);
+ 5ba:	85d2                	mv	a1,s4
+ 5bc:	8556                	mv	a0,s5
+ 5be:	00000097          	auipc	ra,0x0
+ 5c2:	da0080e7          	jalr	-608(ra) # 35e <putc>
+      state = 0;
+ 5c6:	4981                	li	s3,0
+ 5c8:	b5d1                	j	48c <vprintf+0x60>
+        putc(fd, '%');
+ 5ca:	85d2                	mv	a1,s4
+ 5cc:	8556                	mv	a0,s5
+ 5ce:	00000097          	auipc	ra,0x0
+ 5d2:	d90080e7          	jalr	-624(ra) # 35e <putc>
+        putc(fd, c);
+ 5d6:	85ca                	mv	a1,s2
+ 5d8:	8556                	mv	a0,s5
+ 5da:	00000097          	auipc	ra,0x0
+ 5de:	d84080e7          	jalr	-636(ra) # 35e <putc>
+      state = 0;
+ 5e2:	4981                	li	s3,0
+ 5e4:	b565                	j	48c <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 5e6:	8b4a                	mv	s6,s2
+      state = 0;
+ 5e8:	4981                	li	s3,0
+ 5ea:	b54d                	j	48c <vprintf+0x60>
+    }
+  }
+}
+ 5ec:	70e6                	ld	ra,120(sp)
+ 5ee:	7446                	ld	s0,112(sp)
+ 5f0:	74a6                	ld	s1,104(sp)
+ 5f2:	7906                	ld	s2,96(sp)
+ 5f4:	69e6                	ld	s3,88(sp)
+ 5f6:	6a46                	ld	s4,80(sp)
+ 5f8:	6aa6                	ld	s5,72(sp)
+ 5fa:	6b06                	ld	s6,64(sp)
+ 5fc:	7be2                	ld	s7,56(sp)
+ 5fe:	7c42                	ld	s8,48(sp)
+ 600:	7ca2                	ld	s9,40(sp)
+ 602:	7d02                	ld	s10,32(sp)
+ 604:	6de2                	ld	s11,24(sp)
+ 606:	6109                	addi	sp,sp,128
+ 608:	8082                	ret
+
+000000000000060a <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+ 60a:	715d                	addi	sp,sp,-80
+ 60c:	ec06                	sd	ra,24(sp)
+ 60e:	e822                	sd	s0,16(sp)
+ 610:	1000                	addi	s0,sp,32
+ 612:	e010                	sd	a2,0(s0)
+ 614:	e414                	sd	a3,8(s0)
+ 616:	e818                	sd	a4,16(s0)
+ 618:	ec1c                	sd	a5,24(s0)
+ 61a:	03043023          	sd	a6,32(s0)
+ 61e:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 622:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+ 626:	8622                	mv	a2,s0
+ 628:	00000097          	auipc	ra,0x0
+ 62c:	e04080e7          	jalr	-508(ra) # 42c <vprintf>
+}
+ 630:	60e2                	ld	ra,24(sp)
+ 632:	6442                	ld	s0,16(sp)
+ 634:	6161                	addi	sp,sp,80
+ 636:	8082                	ret
+
+0000000000000638 <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+ 638:	711d                	addi	sp,sp,-96
+ 63a:	ec06                	sd	ra,24(sp)
+ 63c:	e822                	sd	s0,16(sp)
+ 63e:	1000                	addi	s0,sp,32
+ 640:	e40c                	sd	a1,8(s0)
+ 642:	e810                	sd	a2,16(s0)
+ 644:	ec14                	sd	a3,24(s0)
+ 646:	f018                	sd	a4,32(s0)
+ 648:	f41c                	sd	a5,40(s0)
+ 64a:	03043823          	sd	a6,48(s0)
+ 64e:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 652:	00840613          	addi	a2,s0,8
+ 656:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+ 65a:	85aa                	mv	a1,a0
+ 65c:	4505                	li	a0,1
+ 65e:	00000097          	auipc	ra,0x0
+ 662:	dce080e7          	jalr	-562(ra) # 42c <vprintf>
+}
+ 666:	60e2                	ld	ra,24(sp)
+ 668:	6442                	ld	s0,16(sp)
+ 66a:	6125                	addi	sp,sp,96
+ 66c:	8082                	ret
+
+000000000000066e <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 66e:	1141                	addi	sp,sp,-16
+ 670:	e422                	sd	s0,8(sp)
+ 672:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 674:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 678:	00000797          	auipc	a5,0x0
+ 67c:	1e87b783          	ld	a5,488(a5) # 860 <freep>
+ 680:	a02d                	j	6aa <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 682:	4618                	lw	a4,8(a2)
+ 684:	9f2d                	addw	a4,a4,a1
+ 686:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 68a:	6398                	ld	a4,0(a5)
+ 68c:	6310                	ld	a2,0(a4)
+ 68e:	a83d                	j	6cc <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 690:	ff852703          	lw	a4,-8(a0)
+ 694:	9f31                	addw	a4,a4,a2
+ 696:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+ 698:	ff053683          	ld	a3,-16(a0)
+ 69c:	a091                	j	6e0 <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 69e:	6398                	ld	a4,0(a5)
+ 6a0:	00e7e463          	bltu	a5,a4,6a8 <free+0x3a>
+ 6a4:	00e6ea63          	bltu	a3,a4,6b8 <free+0x4a>
+{
+ 6a8:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6aa:	fed7fae3          	bgeu	a5,a3,69e <free+0x30>
+ 6ae:	6398                	ld	a4,0(a5)
+ 6b0:	00e6e463          	bltu	a3,a4,6b8 <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6b4:	fee7eae3          	bltu	a5,a4,6a8 <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+ 6b8:	ff852583          	lw	a1,-8(a0)
+ 6bc:	6390                	ld	a2,0(a5)
+ 6be:	02059813          	slli	a6,a1,0x20
+ 6c2:	01c85713          	srli	a4,a6,0x1c
+ 6c6:	9736                	add	a4,a4,a3
+ 6c8:	fae60de3          	beq	a2,a4,682 <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6cc:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+ 6d0:	4790                	lw	a2,8(a5)
+ 6d2:	02061593          	slli	a1,a2,0x20
+ 6d6:	01c5d713          	srli	a4,a1,0x1c
+ 6da:	973e                	add	a4,a4,a5
+ 6dc:	fae68ae3          	beq	a3,a4,690 <free+0x22>
+    p->s.ptr = bp->s.ptr;
+ 6e0:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 6e2:	00000717          	auipc	a4,0x0
+ 6e6:	16f73f23          	sd	a5,382(a4) # 860 <freep>
+}
+ 6ea:	6422                	ld	s0,8(sp)
+ 6ec:	0141                	addi	sp,sp,16
+ 6ee:	8082                	ret
+
+00000000000006f0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6f0:	7139                	addi	sp,sp,-64
+ 6f2:	fc06                	sd	ra,56(sp)
+ 6f4:	f822                	sd	s0,48(sp)
+ 6f6:	f426                	sd	s1,40(sp)
+ 6f8:	f04a                	sd	s2,32(sp)
+ 6fa:	ec4e                	sd	s3,24(sp)
+ 6fc:	e852                	sd	s4,16(sp)
+ 6fe:	e456                	sd	s5,8(sp)
+ 700:	e05a                	sd	s6,0(sp)
+ 702:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 704:	02051493          	slli	s1,a0,0x20
+ 708:	9081                	srli	s1,s1,0x20
+ 70a:	04bd                	addi	s1,s1,15
+ 70c:	8091                	srli	s1,s1,0x4
+ 70e:	0014899b          	addiw	s3,s1,1
+ 712:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+ 714:	00000517          	auipc	a0,0x0
+ 718:	14c53503          	ld	a0,332(a0) # 860 <freep>
+ 71c:	c515                	beqz	a0,748 <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 71e:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 720:	4798                	lw	a4,8(a5)
+ 722:	02977f63          	bgeu	a4,s1,760 <malloc+0x70>
+ 726:	8a4e                	mv	s4,s3
+ 728:	0009871b          	sext.w	a4,s3
+ 72c:	6685                	lui	a3,0x1
+ 72e:	00d77363          	bgeu	a4,a3,734 <malloc+0x44>
+ 732:	6a05                	lui	s4,0x1
+ 734:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+ 738:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 73c:	00000917          	auipc	s2,0x0
+ 740:	12490913          	addi	s2,s2,292 # 860 <freep>
+  if(p == (char*)-1)
+ 744:	5afd                	li	s5,-1
+ 746:	a895                	j	7ba <malloc+0xca>
+    base.s.ptr = freep = prevp = &base;
+ 748:	00000797          	auipc	a5,0x0
+ 74c:	12078793          	addi	a5,a5,288 # 868 <base>
+ 750:	00000717          	auipc	a4,0x0
+ 754:	10f73823          	sd	a5,272(a4) # 860 <freep>
+ 758:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+ 75a:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+ 75e:	b7e1                	j	726 <malloc+0x36>
+      if(p->s.size == nunits)
+ 760:	02e48c63          	beq	s1,a4,798 <malloc+0xa8>
+        p->s.size -= nunits;
+ 764:	4137073b          	subw	a4,a4,s3
+ 768:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+ 76a:	02071693          	slli	a3,a4,0x20
+ 76e:	01c6d713          	srli	a4,a3,0x1c
+ 772:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+ 774:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+ 778:	00000717          	auipc	a4,0x0
+ 77c:	0ea73423          	sd	a0,232(a4) # 860 <freep>
+      return (void*)(p + 1);
+ 780:	01078513          	addi	a0,a5,16
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ 784:	70e2                	ld	ra,56(sp)
+ 786:	7442                	ld	s0,48(sp)
+ 788:	74a2                	ld	s1,40(sp)
+ 78a:	7902                	ld	s2,32(sp)
+ 78c:	69e2                	ld	s3,24(sp)
+ 78e:	6a42                	ld	s4,16(sp)
+ 790:	6aa2                	ld	s5,8(sp)
+ 792:	6b02                	ld	s6,0(sp)
+ 794:	6121                	addi	sp,sp,64
+ 796:	8082                	ret
+        prevp->s.ptr = p->s.ptr;
+ 798:	6398                	ld	a4,0(a5)
+ 79a:	e118                	sd	a4,0(a0)
+ 79c:	bff1                	j	778 <malloc+0x88>
+  hp->s.size = nu;
+ 79e:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+ 7a2:	0541                	addi	a0,a0,16
+ 7a4:	00000097          	auipc	ra,0x0
+ 7a8:	eca080e7          	jalr	-310(ra) # 66e <free>
+  return freep;
+ 7ac:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+ 7b0:	d971                	beqz	a0,784 <malloc+0x94>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7b2:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 7b4:	4798                	lw	a4,8(a5)
+ 7b6:	fa9775e3          	bgeu	a4,s1,760 <malloc+0x70>
+    if(p == freep)
+ 7ba:	00093703          	ld	a4,0(s2)
+ 7be:	853e                	mv	a0,a5
+ 7c0:	fef719e3          	bne	a4,a5,7b2 <malloc+0xc2>
+  p = sbrk(nu * sizeof(Header));
+ 7c4:	8552                	mv	a0,s4
+ 7c6:	00000097          	auipc	ra,0x0
+ 7ca:	b50080e7          	jalr	-1200(ra) # 316 <sbrk>
+  if(p == (char*)-1)
+ 7ce:	fd5518e3          	bne	a0,s5,79e <malloc+0xae>
+        return 0;
+ 7d2:	4501                	li	a0,0
+ 7d4:	bf45                	j	784 <malloc+0x94>
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/helloworld.c os-workshop/user/helloworld.c
--- xv6-riscv/user/helloworld.c	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/helloworld.c	2022-04-20 13:29:20.000000000 -0300
@@ -0,0 +1,8 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main() {
+  printf("Hello world! \n");
+  exit(0);
+}
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/helloworld.d os-workshop/user/helloworld.d
--- xv6-riscv/user/helloworld.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/helloworld.d	2022-05-28 22:34:31.000000000 -0300
@@ -0,0 +1,2 @@
+user/helloworld.o: user/helloworld.c kernel/types.h kernel/stat.h \
+ user/user.h
Binary files xv6-riscv/user/helloworld.o and os-workshop/user/helloworld.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/helloworld.sym os-workshop/user/helloworld.sym
--- xv6-riscv/user/helloworld.sym	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/helloworld.sym	2022-05-28 22:34:31.000000000 -0300
@@ -0,0 +1,76 @@
+0000000000000000 .text
+00000000000007d8 .rodata
+0000000000000860 .sbss
+0000000000000868 .bss
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_aranges
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_line
+0000000000000000 .debug_frame
+0000000000000000 .debug_str
+0000000000000000 .debug_line_str
+0000000000000000 .debug_loclists
+0000000000000000 .debug_rnglists
+0000000000000000 helloworld.c
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+000000000000035e putc
+0000000000000380 printint
+0000000000000848 digits
+0000000000000000 umalloc.c
+0000000000000860 freep
+0000000000000868 base
+0000000000000022 strcpy
+0000000000000638 printf
+0000000000001059 __global_pointer$
+00000000000001dc memmove
+00000000000002d6 mknod
+000000000000033e semdown
+00000000000000da gets
+0000000000000859 __SDATA_BEGIN__
+0000000000000336 semget
+000000000000030e getpid
+000000000000026e memcpy
+00000000000006f0 malloc
+000000000000034e semclose
+000000000000031e sleep
+000000000000029e pipe
+00000000000002ae write
+00000000000002e6 fstat
+000000000000060a fprintf
+00000000000002be kill
+000000000000042c vprintf
+00000000000002fe chdir
+00000000000002c6 exec
+0000000000000296 wait
+00000000000002a6 read
+00000000000002de unlink
+0000000000000234 memcmp
+0000000000000286 fork
+0000000000000878 __BSS_END__
+0000000000000316 sbrk
+0000000000000326 uptime
+0000000000000859 __bss_start
+0000000000000094 memset
+0000000000000000 main
+0000000000000356 timeout
+000000000000003e strcmp
+0000000000000306 dup
+0000000000000859 __DATA_BEGIN__
+000000000000014e stat
+0000000000000859 _edata
+000000000000032e setp
+0000000000000878 _end
+00000000000002ee link
+000000000000028e exit
+0000000000000194 atoi
+000000000000006a strlen
+00000000000002ce open
+0000000000000346 semup
+00000000000000b6 strchr
+00000000000002f6 mkdir
+00000000000002b6 close
+000000000000066e free
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/infloop.asm os-workshop/user/infloop.asm
--- xv6-riscv/user/infloop.asm	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/infloop.asm	2022-05-28 22:34:31.000000000 -0300
@@ -0,0 +1,1339 @@
+
+user/_infloop:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <main>:
+
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main() {
+   0:	1141                	addi	sp,sp,-16
+   2:	e422                	sd	s0,8(sp)
+   4:	0800                	addi	s0,sp,16
+  for (;;){};
+   6:	a001                	j	6 <main+0x6>
+
+0000000000000008 <strcpy>:
+#include "kernel/fcntl.h"
+#include "user/user.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+   8:	1141                	addi	sp,sp,-16
+   a:	e422                	sd	s0,8(sp)
+   c:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+   e:	87aa                	mv	a5,a0
+  10:	0585                	addi	a1,a1,1
+  12:	0785                	addi	a5,a5,1
+  14:	fff5c703          	lbu	a4,-1(a1)
+  18:	fee78fa3          	sb	a4,-1(a5)
+  1c:	fb75                	bnez	a4,10 <strcpy+0x8>
+    ;
+  return os;
+}
+  1e:	6422                	ld	s0,8(sp)
+  20:	0141                	addi	sp,sp,16
+  22:	8082                	ret
+
+0000000000000024 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  24:	1141                	addi	sp,sp,-16
+  26:	e422                	sd	s0,8(sp)
+  28:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+  2a:	00054783          	lbu	a5,0(a0)
+  2e:	cb91                	beqz	a5,42 <strcmp+0x1e>
+  30:	0005c703          	lbu	a4,0(a1)
+  34:	00f71763          	bne	a4,a5,42 <strcmp+0x1e>
+    p++, q++;
+  38:	0505                	addi	a0,a0,1
+  3a:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+  3c:	00054783          	lbu	a5,0(a0)
+  40:	fbe5                	bnez	a5,30 <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+  42:	0005c503          	lbu	a0,0(a1)
+}
+  46:	40a7853b          	subw	a0,a5,a0
+  4a:	6422                	ld	s0,8(sp)
+  4c:	0141                	addi	sp,sp,16
+  4e:	8082                	ret
+
+0000000000000050 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  50:	1141                	addi	sp,sp,-16
+  52:	e422                	sd	s0,8(sp)
+  54:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+  56:	00054783          	lbu	a5,0(a0)
+  5a:	cf91                	beqz	a5,76 <strlen+0x26>
+  5c:	0505                	addi	a0,a0,1
+  5e:	87aa                	mv	a5,a0
+  60:	4685                	li	a3,1
+  62:	9e89                	subw	a3,a3,a0
+  64:	00f6853b          	addw	a0,a3,a5
+  68:	0785                	addi	a5,a5,1
+  6a:	fff7c703          	lbu	a4,-1(a5)
+  6e:	fb7d                	bnez	a4,64 <strlen+0x14>
+    ;
+  return n;
+}
+  70:	6422                	ld	s0,8(sp)
+  72:	0141                	addi	sp,sp,16
+  74:	8082                	ret
+  for(n = 0; s[n]; n++)
+  76:	4501                	li	a0,0
+  78:	bfe5                	j	70 <strlen+0x20>
+
+000000000000007a <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  7a:	1141                	addi	sp,sp,-16
+  7c:	e422                	sd	s0,8(sp)
+  7e:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+  80:	ca19                	beqz	a2,96 <memset+0x1c>
+  82:	87aa                	mv	a5,a0
+  84:	1602                	slli	a2,a2,0x20
+  86:	9201                	srli	a2,a2,0x20
+  88:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+  8c:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+  90:	0785                	addi	a5,a5,1
+  92:	fee79de3          	bne	a5,a4,8c <memset+0x12>
+  }
+  return dst;
+}
+  96:	6422                	ld	s0,8(sp)
+  98:	0141                	addi	sp,sp,16
+  9a:	8082                	ret
+
+000000000000009c <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+  9c:	1141                	addi	sp,sp,-16
+  9e:	e422                	sd	s0,8(sp)
+  a0:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+  a2:	00054783          	lbu	a5,0(a0)
+  a6:	cb99                	beqz	a5,bc <strchr+0x20>
+    if(*s == c)
+  a8:	00f58763          	beq	a1,a5,b6 <strchr+0x1a>
+  for(; *s; s++)
+  ac:	0505                	addi	a0,a0,1
+  ae:	00054783          	lbu	a5,0(a0)
+  b2:	fbfd                	bnez	a5,a8 <strchr+0xc>
+      return (char*)s;
+  return 0;
+  b4:	4501                	li	a0,0
+}
+  b6:	6422                	ld	s0,8(sp)
+  b8:	0141                	addi	sp,sp,16
+  ba:	8082                	ret
+  return 0;
+  bc:	4501                	li	a0,0
+  be:	bfe5                	j	b6 <strchr+0x1a>
+
+00000000000000c0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+  c0:	711d                	addi	sp,sp,-96
+  c2:	ec86                	sd	ra,88(sp)
+  c4:	e8a2                	sd	s0,80(sp)
+  c6:	e4a6                	sd	s1,72(sp)
+  c8:	e0ca                	sd	s2,64(sp)
+  ca:	fc4e                	sd	s3,56(sp)
+  cc:	f852                	sd	s4,48(sp)
+  ce:	f456                	sd	s5,40(sp)
+  d0:	f05a                	sd	s6,32(sp)
+  d2:	ec5e                	sd	s7,24(sp)
+  d4:	1080                	addi	s0,sp,96
+  d6:	8baa                	mv	s7,a0
+  d8:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+  da:	892a                	mv	s2,a0
+  dc:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+  de:	4aa9                	li	s5,10
+  e0:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+  e2:	89a6                	mv	s3,s1
+  e4:	2485                	addiw	s1,s1,1
+  e6:	0344d863          	bge	s1,s4,116 <gets+0x56>
+    cc = read(0, &c, 1);
+  ea:	4605                	li	a2,1
+  ec:	faf40593          	addi	a1,s0,-81
+  f0:	4501                	li	a0,0
+  f2:	00000097          	auipc	ra,0x0
+  f6:	19a080e7          	jalr	410(ra) # 28c <read>
+    if(cc < 1)
+  fa:	00a05e63          	blez	a0,116 <gets+0x56>
+    buf[i++] = c;
+  fe:	faf44783          	lbu	a5,-81(s0)
+ 102:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+ 106:	01578763          	beq	a5,s5,114 <gets+0x54>
+ 10a:	0905                	addi	s2,s2,1
+ 10c:	fd679be3          	bne	a5,s6,e2 <gets+0x22>
+  for(i=0; i+1 < max; ){
+ 110:	89a6                	mv	s3,s1
+ 112:	a011                	j	116 <gets+0x56>
+ 114:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+ 116:	99de                	add	s3,s3,s7
+ 118:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+ 11c:	855e                	mv	a0,s7
+ 11e:	60e6                	ld	ra,88(sp)
+ 120:	6446                	ld	s0,80(sp)
+ 122:	64a6                	ld	s1,72(sp)
+ 124:	6906                	ld	s2,64(sp)
+ 126:	79e2                	ld	s3,56(sp)
+ 128:	7a42                	ld	s4,48(sp)
+ 12a:	7aa2                	ld	s5,40(sp)
+ 12c:	7b02                	ld	s6,32(sp)
+ 12e:	6be2                	ld	s7,24(sp)
+ 130:	6125                	addi	sp,sp,96
+ 132:	8082                	ret
+
+0000000000000134 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 134:	1101                	addi	sp,sp,-32
+ 136:	ec06                	sd	ra,24(sp)
+ 138:	e822                	sd	s0,16(sp)
+ 13a:	e426                	sd	s1,8(sp)
+ 13c:	e04a                	sd	s2,0(sp)
+ 13e:	1000                	addi	s0,sp,32
+ 140:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 142:	4581                	li	a1,0
+ 144:	00000097          	auipc	ra,0x0
+ 148:	170080e7          	jalr	368(ra) # 2b4 <open>
+  if(fd < 0)
+ 14c:	02054563          	bltz	a0,176 <stat+0x42>
+ 150:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+ 152:	85ca                	mv	a1,s2
+ 154:	00000097          	auipc	ra,0x0
+ 158:	178080e7          	jalr	376(ra) # 2cc <fstat>
+ 15c:	892a                	mv	s2,a0
+  close(fd);
+ 15e:	8526                	mv	a0,s1
+ 160:	00000097          	auipc	ra,0x0
+ 164:	13c080e7          	jalr	316(ra) # 29c <close>
+  return r;
+}
+ 168:	854a                	mv	a0,s2
+ 16a:	60e2                	ld	ra,24(sp)
+ 16c:	6442                	ld	s0,16(sp)
+ 16e:	64a2                	ld	s1,8(sp)
+ 170:	6902                	ld	s2,0(sp)
+ 172:	6105                	addi	sp,sp,32
+ 174:	8082                	ret
+    return -1;
+ 176:	597d                	li	s2,-1
+ 178:	bfc5                	j	168 <stat+0x34>
+
+000000000000017a <atoi>:
+
+int
+atoi(const char *s)
+{
+ 17a:	1141                	addi	sp,sp,-16
+ 17c:	e422                	sd	s0,8(sp)
+ 17e:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 180:	00054683          	lbu	a3,0(a0)
+ 184:	fd06879b          	addiw	a5,a3,-48
+ 188:	0ff7f793          	zext.b	a5,a5
+ 18c:	4625                	li	a2,9
+ 18e:	02f66863          	bltu	a2,a5,1be <atoi+0x44>
+ 192:	872a                	mv	a4,a0
+  n = 0;
+ 194:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+ 196:	0705                	addi	a4,a4,1
+ 198:	0025179b          	slliw	a5,a0,0x2
+ 19c:	9fa9                	addw	a5,a5,a0
+ 19e:	0017979b          	slliw	a5,a5,0x1
+ 1a2:	9fb5                	addw	a5,a5,a3
+ 1a4:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+ 1a8:	00074683          	lbu	a3,0(a4)
+ 1ac:	fd06879b          	addiw	a5,a3,-48
+ 1b0:	0ff7f793          	zext.b	a5,a5
+ 1b4:	fef671e3          	bgeu	a2,a5,196 <atoi+0x1c>
+  return n;
+}
+ 1b8:	6422                	ld	s0,8(sp)
+ 1ba:	0141                	addi	sp,sp,16
+ 1bc:	8082                	ret
+  n = 0;
+ 1be:	4501                	li	a0,0
+ 1c0:	bfe5                	j	1b8 <atoi+0x3e>
+
+00000000000001c2 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 1c2:	1141                	addi	sp,sp,-16
+ 1c4:	e422                	sd	s0,8(sp)
+ 1c6:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+ 1c8:	02b57463          	bgeu	a0,a1,1f0 <memmove+0x2e>
+    while(n-- > 0)
+ 1cc:	00c05f63          	blez	a2,1ea <memmove+0x28>
+ 1d0:	1602                	slli	a2,a2,0x20
+ 1d2:	9201                	srli	a2,a2,0x20
+ 1d4:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+ 1d8:	872a                	mv	a4,a0
+      *dst++ = *src++;
+ 1da:	0585                	addi	a1,a1,1
+ 1dc:	0705                	addi	a4,a4,1
+ 1de:	fff5c683          	lbu	a3,-1(a1)
+ 1e2:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+ 1e6:	fee79ae3          	bne	a5,a4,1da <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+ 1ea:	6422                	ld	s0,8(sp)
+ 1ec:	0141                	addi	sp,sp,16
+ 1ee:	8082                	ret
+    dst += n;
+ 1f0:	00c50733          	add	a4,a0,a2
+    src += n;
+ 1f4:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+ 1f6:	fec05ae3          	blez	a2,1ea <memmove+0x28>
+ 1fa:	fff6079b          	addiw	a5,a2,-1
+ 1fe:	1782                	slli	a5,a5,0x20
+ 200:	9381                	srli	a5,a5,0x20
+ 202:	fff7c793          	not	a5,a5
+ 206:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+ 208:	15fd                	addi	a1,a1,-1
+ 20a:	177d                	addi	a4,a4,-1
+ 20c:	0005c683          	lbu	a3,0(a1)
+ 210:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+ 214:	fee79ae3          	bne	a5,a4,208 <memmove+0x46>
+ 218:	bfc9                	j	1ea <memmove+0x28>
+
+000000000000021a <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+ 21a:	1141                	addi	sp,sp,-16
+ 21c:	e422                	sd	s0,8(sp)
+ 21e:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+ 220:	ca05                	beqz	a2,250 <memcmp+0x36>
+ 222:	fff6069b          	addiw	a3,a2,-1
+ 226:	1682                	slli	a3,a3,0x20
+ 228:	9281                	srli	a3,a3,0x20
+ 22a:	0685                	addi	a3,a3,1
+ 22c:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+ 22e:	00054783          	lbu	a5,0(a0)
+ 232:	0005c703          	lbu	a4,0(a1)
+ 236:	00e79863          	bne	a5,a4,246 <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+ 23a:	0505                	addi	a0,a0,1
+    p2++;
+ 23c:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+ 23e:	fed518e3          	bne	a0,a3,22e <memcmp+0x14>
+  }
+  return 0;
+ 242:	4501                	li	a0,0
+ 244:	a019                	j	24a <memcmp+0x30>
+      return *p1 - *p2;
+ 246:	40e7853b          	subw	a0,a5,a4
+}
+ 24a:	6422                	ld	s0,8(sp)
+ 24c:	0141                	addi	sp,sp,16
+ 24e:	8082                	ret
+  return 0;
+ 250:	4501                	li	a0,0
+ 252:	bfe5                	j	24a <memcmp+0x30>
+
+0000000000000254 <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+ 254:	1141                	addi	sp,sp,-16
+ 256:	e406                	sd	ra,8(sp)
+ 258:	e022                	sd	s0,0(sp)
+ 25a:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+ 25c:	00000097          	auipc	ra,0x0
+ 260:	f66080e7          	jalr	-154(ra) # 1c2 <memmove>
+}
+ 264:	60a2                	ld	ra,8(sp)
+ 266:	6402                	ld	s0,0(sp)
+ 268:	0141                	addi	sp,sp,16
+ 26a:	8082                	ret
+
+000000000000026c <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ 26c:	4885                	li	a7,1
+ ecall
+ 26e:	00000073          	ecall
+ ret
+ 272:	8082                	ret
+
+0000000000000274 <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+ 274:	4889                	li	a7,2
+ ecall
+ 276:	00000073          	ecall
+ ret
+ 27a:	8082                	ret
+
+000000000000027c <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+ 27c:	488d                	li	a7,3
+ ecall
+ 27e:	00000073          	ecall
+ ret
+ 282:	8082                	ret
+
+0000000000000284 <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ 284:	4891                	li	a7,4
+ ecall
+ 286:	00000073          	ecall
+ ret
+ 28a:	8082                	ret
+
+000000000000028c <read>:
+.global read
+read:
+ li a7, SYS_read
+ 28c:	4895                	li	a7,5
+ ecall
+ 28e:	00000073          	ecall
+ ret
+ 292:	8082                	ret
+
+0000000000000294 <write>:
+.global write
+write:
+ li a7, SYS_write
+ 294:	48c1                	li	a7,16
+ ecall
+ 296:	00000073          	ecall
+ ret
+ 29a:	8082                	ret
+
+000000000000029c <close>:
+.global close
+close:
+ li a7, SYS_close
+ 29c:	48d5                	li	a7,21
+ ecall
+ 29e:	00000073          	ecall
+ ret
+ 2a2:	8082                	ret
+
+00000000000002a4 <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+ 2a4:	4899                	li	a7,6
+ ecall
+ 2a6:	00000073          	ecall
+ ret
+ 2aa:	8082                	ret
+
+00000000000002ac <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+ 2ac:	489d                	li	a7,7
+ ecall
+ 2ae:	00000073          	ecall
+ ret
+ 2b2:	8082                	ret
+
+00000000000002b4 <open>:
+.global open
+open:
+ li a7, SYS_open
+ 2b4:	48bd                	li	a7,15
+ ecall
+ 2b6:	00000073          	ecall
+ ret
+ 2ba:	8082                	ret
+
+00000000000002bc <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ 2bc:	48c5                	li	a7,17
+ ecall
+ 2be:	00000073          	ecall
+ ret
+ 2c2:	8082                	ret
+
+00000000000002c4 <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ 2c4:	48c9                	li	a7,18
+ ecall
+ 2c6:	00000073          	ecall
+ ret
+ 2ca:	8082                	ret
+
+00000000000002cc <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ 2cc:	48a1                	li	a7,8
+ ecall
+ 2ce:	00000073          	ecall
+ ret
+ 2d2:	8082                	ret
+
+00000000000002d4 <link>:
+.global link
+link:
+ li a7, SYS_link
+ 2d4:	48cd                	li	a7,19
+ ecall
+ 2d6:	00000073          	ecall
+ ret
+ 2da:	8082                	ret
+
+00000000000002dc <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ 2dc:	48d1                	li	a7,20
+ ecall
+ 2de:	00000073          	ecall
+ ret
+ 2e2:	8082                	ret
+
+00000000000002e4 <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ 2e4:	48a5                	li	a7,9
+ ecall
+ 2e6:	00000073          	ecall
+ ret
+ 2ea:	8082                	ret
+
+00000000000002ec <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+ 2ec:	48a9                	li	a7,10
+ ecall
+ 2ee:	00000073          	ecall
+ ret
+ 2f2:	8082                	ret
+
+00000000000002f4 <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ 2f4:	48ad                	li	a7,11
+ ecall
+ 2f6:	00000073          	ecall
+ ret
+ 2fa:	8082                	ret
+
+00000000000002fc <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ 2fc:	48b1                	li	a7,12
+ ecall
+ 2fe:	00000073          	ecall
+ ret
+ 302:	8082                	ret
+
+0000000000000304 <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ 304:	48b5                	li	a7,13
+ ecall
+ 306:	00000073          	ecall
+ ret
+ 30a:	8082                	ret
+
+000000000000030c <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ 30c:	48b9                	li	a7,14
+ ecall
+ 30e:	00000073          	ecall
+ ret
+ 312:	8082                	ret
+
+0000000000000314 <setp>:
+.global setp
+setp:
+ li a7, SYS_setp
+ 314:	48d9                	li	a7,22
+ ecall
+ 316:	00000073          	ecall
+ ret
+ 31a:	8082                	ret
+
+000000000000031c <semget>:
+.global semget
+semget:
+ li a7, SYS_semget
+ 31c:	48dd                	li	a7,23
+ ecall
+ 31e:	00000073          	ecall
+ ret
+ 322:	8082                	ret
+
+0000000000000324 <semdown>:
+.global semdown
+semdown:
+ li a7, SYS_semdown
+ 324:	48e1                	li	a7,24
+ ecall
+ 326:	00000073          	ecall
+ ret
+ 32a:	8082                	ret
+
+000000000000032c <semup>:
+.global semup
+semup:
+ li a7, SYS_semup
+ 32c:	48e5                	li	a7,25
+ ecall
+ 32e:	00000073          	ecall
+ ret
+ 332:	8082                	ret
+
+0000000000000334 <semclose>:
+.global semclose
+semclose:
+ li a7, SYS_semclose
+ 334:	48e9                	li	a7,26
+ ecall
+ 336:	00000073          	ecall
+ ret
+ 33a:	8082                	ret
+
+000000000000033c <timeout>:
+.global timeout
+timeout:
+ li a7, SYS_timeout
+ 33c:	48ed                	li	a7,27
+ ecall
+ 33e:	00000073          	ecall
+ ret
+ 342:	8082                	ret
+
+0000000000000344 <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+ 344:	1101                	addi	sp,sp,-32
+ 346:	ec06                	sd	ra,24(sp)
+ 348:	e822                	sd	s0,16(sp)
+ 34a:	1000                	addi	s0,sp,32
+ 34c:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+ 350:	4605                	li	a2,1
+ 352:	fef40593          	addi	a1,s0,-17
+ 356:	00000097          	auipc	ra,0x0
+ 35a:	f3e080e7          	jalr	-194(ra) # 294 <write>
+}
+ 35e:	60e2                	ld	ra,24(sp)
+ 360:	6442                	ld	s0,16(sp)
+ 362:	6105                	addi	sp,sp,32
+ 364:	8082                	ret
+
+0000000000000366 <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 366:	7139                	addi	sp,sp,-64
+ 368:	fc06                	sd	ra,56(sp)
+ 36a:	f822                	sd	s0,48(sp)
+ 36c:	f426                	sd	s1,40(sp)
+ 36e:	f04a                	sd	s2,32(sp)
+ 370:	ec4e                	sd	s3,24(sp)
+ 372:	0080                	addi	s0,sp,64
+ 374:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 376:	c299                	beqz	a3,37c <printint+0x16>
+ 378:	0805c963          	bltz	a1,40a <printint+0xa4>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 37c:	2581                	sext.w	a1,a1
+  neg = 0;
+ 37e:	4881                	li	a7,0
+ 380:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+ 384:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+ 386:	2601                	sext.w	a2,a2
+ 388:	00000517          	auipc	a0,0x0
+ 38c:	49850513          	addi	a0,a0,1176 # 820 <digits>
+ 390:	883a                	mv	a6,a4
+ 392:	2705                	addiw	a4,a4,1
+ 394:	02c5f7bb          	remuw	a5,a1,a2
+ 398:	1782                	slli	a5,a5,0x20
+ 39a:	9381                	srli	a5,a5,0x20
+ 39c:	97aa                	add	a5,a5,a0
+ 39e:	0007c783          	lbu	a5,0(a5)
+ 3a2:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+ 3a6:	0005879b          	sext.w	a5,a1
+ 3aa:	02c5d5bb          	divuw	a1,a1,a2
+ 3ae:	0685                	addi	a3,a3,1
+ 3b0:	fec7f0e3          	bgeu	a5,a2,390 <printint+0x2a>
+  if(neg)
+ 3b4:	00088c63          	beqz	a7,3cc <printint+0x66>
+    buf[i++] = '-';
+ 3b8:	fd070793          	addi	a5,a4,-48
+ 3bc:	00878733          	add	a4,a5,s0
+ 3c0:	02d00793          	li	a5,45
+ 3c4:	fef70823          	sb	a5,-16(a4)
+ 3c8:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+ 3cc:	02e05863          	blez	a4,3fc <printint+0x96>
+ 3d0:	fc040793          	addi	a5,s0,-64
+ 3d4:	00e78933          	add	s2,a5,a4
+ 3d8:	fff78993          	addi	s3,a5,-1
+ 3dc:	99ba                	add	s3,s3,a4
+ 3de:	377d                	addiw	a4,a4,-1
+ 3e0:	1702                	slli	a4,a4,0x20
+ 3e2:	9301                	srli	a4,a4,0x20
+ 3e4:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+ 3e8:	fff94583          	lbu	a1,-1(s2)
+ 3ec:	8526                	mv	a0,s1
+ 3ee:	00000097          	auipc	ra,0x0
+ 3f2:	f56080e7          	jalr	-170(ra) # 344 <putc>
+  while(--i >= 0)
+ 3f6:	197d                	addi	s2,s2,-1
+ 3f8:	ff3918e3          	bne	s2,s3,3e8 <printint+0x82>
+}
+ 3fc:	70e2                	ld	ra,56(sp)
+ 3fe:	7442                	ld	s0,48(sp)
+ 400:	74a2                	ld	s1,40(sp)
+ 402:	7902                	ld	s2,32(sp)
+ 404:	69e2                	ld	s3,24(sp)
+ 406:	6121                	addi	sp,sp,64
+ 408:	8082                	ret
+    x = -xx;
+ 40a:	40b005bb          	negw	a1,a1
+    neg = 1;
+ 40e:	4885                	li	a7,1
+    x = -xx;
+ 410:	bf85                	j	380 <printint+0x1a>
+
+0000000000000412 <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+ 412:	7119                	addi	sp,sp,-128
+ 414:	fc86                	sd	ra,120(sp)
+ 416:	f8a2                	sd	s0,112(sp)
+ 418:	f4a6                	sd	s1,104(sp)
+ 41a:	f0ca                	sd	s2,96(sp)
+ 41c:	ecce                	sd	s3,88(sp)
+ 41e:	e8d2                	sd	s4,80(sp)
+ 420:	e4d6                	sd	s5,72(sp)
+ 422:	e0da                	sd	s6,64(sp)
+ 424:	fc5e                	sd	s7,56(sp)
+ 426:	f862                	sd	s8,48(sp)
+ 428:	f466                	sd	s9,40(sp)
+ 42a:	f06a                	sd	s10,32(sp)
+ 42c:	ec6e                	sd	s11,24(sp)
+ 42e:	0100                	addi	s0,sp,128
+  char *s;
+  int c, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+ 430:	0005c903          	lbu	s2,0(a1)
+ 434:	18090f63          	beqz	s2,5d2 <vprintf+0x1c0>
+ 438:	8aaa                	mv	s5,a0
+ 43a:	8b32                	mv	s6,a2
+ 43c:	00158493          	addi	s1,a1,1
+  state = 0;
+ 440:	4981                	li	s3,0
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 442:	02500a13          	li	s4,37
+ 446:	4c55                	li	s8,21
+ 448:	00000c97          	auipc	s9,0x0
+ 44c:	380c8c93          	addi	s9,s9,896 # 7c8 <malloc+0xf2>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c == 's'){
+        s = va_arg(ap, char*);
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 450:	02800d93          	li	s11,40
+  putc(fd, 'x');
+ 454:	4d41                	li	s10,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 456:	00000b97          	auipc	s7,0x0
+ 45a:	3cab8b93          	addi	s7,s7,970 # 820 <digits>
+ 45e:	a839                	j	47c <vprintf+0x6a>
+        putc(fd, c);
+ 460:	85ca                	mv	a1,s2
+ 462:	8556                	mv	a0,s5
+ 464:	00000097          	auipc	ra,0x0
+ 468:	ee0080e7          	jalr	-288(ra) # 344 <putc>
+ 46c:	a019                	j	472 <vprintf+0x60>
+    } else if(state == '%'){
+ 46e:	01498d63          	beq	s3,s4,488 <vprintf+0x76>
+  for(i = 0; fmt[i]; i++){
+ 472:	0485                	addi	s1,s1,1
+ 474:	fff4c903          	lbu	s2,-1(s1)
+ 478:	14090d63          	beqz	s2,5d2 <vprintf+0x1c0>
+    if(state == 0){
+ 47c:	fe0999e3          	bnez	s3,46e <vprintf+0x5c>
+      if(c == '%'){
+ 480:	ff4910e3          	bne	s2,s4,460 <vprintf+0x4e>
+        state = '%';
+ 484:	89d2                	mv	s3,s4
+ 486:	b7f5                	j	472 <vprintf+0x60>
+      if(c == 'd'){
+ 488:	11490c63          	beq	s2,s4,5a0 <vprintf+0x18e>
+ 48c:	f9d9079b          	addiw	a5,s2,-99
+ 490:	0ff7f793          	zext.b	a5,a5
+ 494:	10fc6e63          	bltu	s8,a5,5b0 <vprintf+0x19e>
+ 498:	f9d9079b          	addiw	a5,s2,-99
+ 49c:	0ff7f713          	zext.b	a4,a5
+ 4a0:	10ec6863          	bltu	s8,a4,5b0 <vprintf+0x19e>
+ 4a4:	00271793          	slli	a5,a4,0x2
+ 4a8:	97e6                	add	a5,a5,s9
+ 4aa:	439c                	lw	a5,0(a5)
+ 4ac:	97e6                	add	a5,a5,s9
+ 4ae:	8782                	jr	a5
+        printint(fd, va_arg(ap, int), 10, 1);
+ 4b0:	008b0913          	addi	s2,s6,8
+ 4b4:	4685                	li	a3,1
+ 4b6:	4629                	li	a2,10
+ 4b8:	000b2583          	lw	a1,0(s6)
+ 4bc:	8556                	mv	a0,s5
+ 4be:	00000097          	auipc	ra,0x0
+ 4c2:	ea8080e7          	jalr	-344(ra) # 366 <printint>
+ 4c6:	8b4a                	mv	s6,s2
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 4c8:	4981                	li	s3,0
+ 4ca:	b765                	j	472 <vprintf+0x60>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 4cc:	008b0913          	addi	s2,s6,8
+ 4d0:	4681                	li	a3,0
+ 4d2:	4629                	li	a2,10
+ 4d4:	000b2583          	lw	a1,0(s6)
+ 4d8:	8556                	mv	a0,s5
+ 4da:	00000097          	auipc	ra,0x0
+ 4de:	e8c080e7          	jalr	-372(ra) # 366 <printint>
+ 4e2:	8b4a                	mv	s6,s2
+      state = 0;
+ 4e4:	4981                	li	s3,0
+ 4e6:	b771                	j	472 <vprintf+0x60>
+        printint(fd, va_arg(ap, int), 16, 0);
+ 4e8:	008b0913          	addi	s2,s6,8
+ 4ec:	4681                	li	a3,0
+ 4ee:	866a                	mv	a2,s10
+ 4f0:	000b2583          	lw	a1,0(s6)
+ 4f4:	8556                	mv	a0,s5
+ 4f6:	00000097          	auipc	ra,0x0
+ 4fa:	e70080e7          	jalr	-400(ra) # 366 <printint>
+ 4fe:	8b4a                	mv	s6,s2
+      state = 0;
+ 500:	4981                	li	s3,0
+ 502:	bf85                	j	472 <vprintf+0x60>
+        printptr(fd, va_arg(ap, uint64));
+ 504:	008b0793          	addi	a5,s6,8
+ 508:	f8f43423          	sd	a5,-120(s0)
+ 50c:	000b3983          	ld	s3,0(s6)
+  putc(fd, '0');
+ 510:	03000593          	li	a1,48
+ 514:	8556                	mv	a0,s5
+ 516:	00000097          	auipc	ra,0x0
+ 51a:	e2e080e7          	jalr	-466(ra) # 344 <putc>
+  putc(fd, 'x');
+ 51e:	07800593          	li	a1,120
+ 522:	8556                	mv	a0,s5
+ 524:	00000097          	auipc	ra,0x0
+ 528:	e20080e7          	jalr	-480(ra) # 344 <putc>
+ 52c:	896a                	mv	s2,s10
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 52e:	03c9d793          	srli	a5,s3,0x3c
+ 532:	97de                	add	a5,a5,s7
+ 534:	0007c583          	lbu	a1,0(a5)
+ 538:	8556                	mv	a0,s5
+ 53a:	00000097          	auipc	ra,0x0
+ 53e:	e0a080e7          	jalr	-502(ra) # 344 <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+ 542:	0992                	slli	s3,s3,0x4
+ 544:	397d                	addiw	s2,s2,-1
+ 546:	fe0914e3          	bnez	s2,52e <vprintf+0x11c>
+        printptr(fd, va_arg(ap, uint64));
+ 54a:	f8843b03          	ld	s6,-120(s0)
+      state = 0;
+ 54e:	4981                	li	s3,0
+ 550:	b70d                	j	472 <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 552:	008b0913          	addi	s2,s6,8
+ 556:	000b3983          	ld	s3,0(s6)
+        if(s == 0)
+ 55a:	02098163          	beqz	s3,57c <vprintf+0x16a>
+        while(*s != 0){
+ 55e:	0009c583          	lbu	a1,0(s3)
+ 562:	c5ad                	beqz	a1,5cc <vprintf+0x1ba>
+          putc(fd, *s);
+ 564:	8556                	mv	a0,s5
+ 566:	00000097          	auipc	ra,0x0
+ 56a:	dde080e7          	jalr	-546(ra) # 344 <putc>
+          s++;
+ 56e:	0985                	addi	s3,s3,1
+        while(*s != 0){
+ 570:	0009c583          	lbu	a1,0(s3)
+ 574:	f9e5                	bnez	a1,564 <vprintf+0x152>
+        s = va_arg(ap, char*);
+ 576:	8b4a                	mv	s6,s2
+      state = 0;
+ 578:	4981                	li	s3,0
+ 57a:	bde5                	j	472 <vprintf+0x60>
+          s = "(null)";
+ 57c:	00000997          	auipc	s3,0x0
+ 580:	24498993          	addi	s3,s3,580 # 7c0 <malloc+0xea>
+        while(*s != 0){
+ 584:	85ee                	mv	a1,s11
+ 586:	bff9                	j	564 <vprintf+0x152>
+        putc(fd, va_arg(ap, uint));
+ 588:	008b0913          	addi	s2,s6,8
+ 58c:	000b4583          	lbu	a1,0(s6)
+ 590:	8556                	mv	a0,s5
+ 592:	00000097          	auipc	ra,0x0
+ 596:	db2080e7          	jalr	-590(ra) # 344 <putc>
+ 59a:	8b4a                	mv	s6,s2
+      state = 0;
+ 59c:	4981                	li	s3,0
+ 59e:	bdd1                	j	472 <vprintf+0x60>
+        putc(fd, c);
+ 5a0:	85d2                	mv	a1,s4
+ 5a2:	8556                	mv	a0,s5
+ 5a4:	00000097          	auipc	ra,0x0
+ 5a8:	da0080e7          	jalr	-608(ra) # 344 <putc>
+      state = 0;
+ 5ac:	4981                	li	s3,0
+ 5ae:	b5d1                	j	472 <vprintf+0x60>
+        putc(fd, '%');
+ 5b0:	85d2                	mv	a1,s4
+ 5b2:	8556                	mv	a0,s5
+ 5b4:	00000097          	auipc	ra,0x0
+ 5b8:	d90080e7          	jalr	-624(ra) # 344 <putc>
+        putc(fd, c);
+ 5bc:	85ca                	mv	a1,s2
+ 5be:	8556                	mv	a0,s5
+ 5c0:	00000097          	auipc	ra,0x0
+ 5c4:	d84080e7          	jalr	-636(ra) # 344 <putc>
+      state = 0;
+ 5c8:	4981                	li	s3,0
+ 5ca:	b565                	j	472 <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 5cc:	8b4a                	mv	s6,s2
+      state = 0;
+ 5ce:	4981                	li	s3,0
+ 5d0:	b54d                	j	472 <vprintf+0x60>
+    }
+  }
+}
+ 5d2:	70e6                	ld	ra,120(sp)
+ 5d4:	7446                	ld	s0,112(sp)
+ 5d6:	74a6                	ld	s1,104(sp)
+ 5d8:	7906                	ld	s2,96(sp)
+ 5da:	69e6                	ld	s3,88(sp)
+ 5dc:	6a46                	ld	s4,80(sp)
+ 5de:	6aa6                	ld	s5,72(sp)
+ 5e0:	6b06                	ld	s6,64(sp)
+ 5e2:	7be2                	ld	s7,56(sp)
+ 5e4:	7c42                	ld	s8,48(sp)
+ 5e6:	7ca2                	ld	s9,40(sp)
+ 5e8:	7d02                	ld	s10,32(sp)
+ 5ea:	6de2                	ld	s11,24(sp)
+ 5ec:	6109                	addi	sp,sp,128
+ 5ee:	8082                	ret
+
+00000000000005f0 <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+ 5f0:	715d                	addi	sp,sp,-80
+ 5f2:	ec06                	sd	ra,24(sp)
+ 5f4:	e822                	sd	s0,16(sp)
+ 5f6:	1000                	addi	s0,sp,32
+ 5f8:	e010                	sd	a2,0(s0)
+ 5fa:	e414                	sd	a3,8(s0)
+ 5fc:	e818                	sd	a4,16(s0)
+ 5fe:	ec1c                	sd	a5,24(s0)
+ 600:	03043023          	sd	a6,32(s0)
+ 604:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 608:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+ 60c:	8622                	mv	a2,s0
+ 60e:	00000097          	auipc	ra,0x0
+ 612:	e04080e7          	jalr	-508(ra) # 412 <vprintf>
+}
+ 616:	60e2                	ld	ra,24(sp)
+ 618:	6442                	ld	s0,16(sp)
+ 61a:	6161                	addi	sp,sp,80
+ 61c:	8082                	ret
+
+000000000000061e <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+ 61e:	711d                	addi	sp,sp,-96
+ 620:	ec06                	sd	ra,24(sp)
+ 622:	e822                	sd	s0,16(sp)
+ 624:	1000                	addi	s0,sp,32
+ 626:	e40c                	sd	a1,8(s0)
+ 628:	e810                	sd	a2,16(s0)
+ 62a:	ec14                	sd	a3,24(s0)
+ 62c:	f018                	sd	a4,32(s0)
+ 62e:	f41c                	sd	a5,40(s0)
+ 630:	03043823          	sd	a6,48(s0)
+ 634:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 638:	00840613          	addi	a2,s0,8
+ 63c:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+ 640:	85aa                	mv	a1,a0
+ 642:	4505                	li	a0,1
+ 644:	00000097          	auipc	ra,0x0
+ 648:	dce080e7          	jalr	-562(ra) # 412 <vprintf>
+}
+ 64c:	60e2                	ld	ra,24(sp)
+ 64e:	6442                	ld	s0,16(sp)
+ 650:	6125                	addi	sp,sp,96
+ 652:	8082                	ret
+
+0000000000000654 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 654:	1141                	addi	sp,sp,-16
+ 656:	e422                	sd	s0,8(sp)
+ 658:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 65a:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 65e:	00000797          	auipc	a5,0x0
+ 662:	1da7b783          	ld	a5,474(a5) # 838 <freep>
+ 666:	a02d                	j	690 <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 668:	4618                	lw	a4,8(a2)
+ 66a:	9f2d                	addw	a4,a4,a1
+ 66c:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 670:	6398                	ld	a4,0(a5)
+ 672:	6310                	ld	a2,0(a4)
+ 674:	a83d                	j	6b2 <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 676:	ff852703          	lw	a4,-8(a0)
+ 67a:	9f31                	addw	a4,a4,a2
+ 67c:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+ 67e:	ff053683          	ld	a3,-16(a0)
+ 682:	a091                	j	6c6 <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 684:	6398                	ld	a4,0(a5)
+ 686:	00e7e463          	bltu	a5,a4,68e <free+0x3a>
+ 68a:	00e6ea63          	bltu	a3,a4,69e <free+0x4a>
+{
+ 68e:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 690:	fed7fae3          	bgeu	a5,a3,684 <free+0x30>
+ 694:	6398                	ld	a4,0(a5)
+ 696:	00e6e463          	bltu	a3,a4,69e <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 69a:	fee7eae3          	bltu	a5,a4,68e <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+ 69e:	ff852583          	lw	a1,-8(a0)
+ 6a2:	6390                	ld	a2,0(a5)
+ 6a4:	02059813          	slli	a6,a1,0x20
+ 6a8:	01c85713          	srli	a4,a6,0x1c
+ 6ac:	9736                	add	a4,a4,a3
+ 6ae:	fae60de3          	beq	a2,a4,668 <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6b2:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+ 6b6:	4790                	lw	a2,8(a5)
+ 6b8:	02061593          	slli	a1,a2,0x20
+ 6bc:	01c5d713          	srli	a4,a1,0x1c
+ 6c0:	973e                	add	a4,a4,a5
+ 6c2:	fae68ae3          	beq	a3,a4,676 <free+0x22>
+    p->s.ptr = bp->s.ptr;
+ 6c6:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 6c8:	00000717          	auipc	a4,0x0
+ 6cc:	16f73823          	sd	a5,368(a4) # 838 <freep>
+}
+ 6d0:	6422                	ld	s0,8(sp)
+ 6d2:	0141                	addi	sp,sp,16
+ 6d4:	8082                	ret
+
+00000000000006d6 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6d6:	7139                	addi	sp,sp,-64
+ 6d8:	fc06                	sd	ra,56(sp)
+ 6da:	f822                	sd	s0,48(sp)
+ 6dc:	f426                	sd	s1,40(sp)
+ 6de:	f04a                	sd	s2,32(sp)
+ 6e0:	ec4e                	sd	s3,24(sp)
+ 6e2:	e852                	sd	s4,16(sp)
+ 6e4:	e456                	sd	s5,8(sp)
+ 6e6:	e05a                	sd	s6,0(sp)
+ 6e8:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6ea:	02051493          	slli	s1,a0,0x20
+ 6ee:	9081                	srli	s1,s1,0x20
+ 6f0:	04bd                	addi	s1,s1,15
+ 6f2:	8091                	srli	s1,s1,0x4
+ 6f4:	0014899b          	addiw	s3,s1,1
+ 6f8:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+ 6fa:	00000517          	auipc	a0,0x0
+ 6fe:	13e53503          	ld	a0,318(a0) # 838 <freep>
+ 702:	c515                	beqz	a0,72e <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 704:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 706:	4798                	lw	a4,8(a5)
+ 708:	02977f63          	bgeu	a4,s1,746 <malloc+0x70>
+ 70c:	8a4e                	mv	s4,s3
+ 70e:	0009871b          	sext.w	a4,s3
+ 712:	6685                	lui	a3,0x1
+ 714:	00d77363          	bgeu	a4,a3,71a <malloc+0x44>
+ 718:	6a05                	lui	s4,0x1
+ 71a:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+ 71e:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 722:	00000917          	auipc	s2,0x0
+ 726:	11690913          	addi	s2,s2,278 # 838 <freep>
+  if(p == (char*)-1)
+ 72a:	5afd                	li	s5,-1
+ 72c:	a895                	j	7a0 <malloc+0xca>
+    base.s.ptr = freep = prevp = &base;
+ 72e:	00000797          	auipc	a5,0x0
+ 732:	11278793          	addi	a5,a5,274 # 840 <base>
+ 736:	00000717          	auipc	a4,0x0
+ 73a:	10f73123          	sd	a5,258(a4) # 838 <freep>
+ 73e:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+ 740:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+ 744:	b7e1                	j	70c <malloc+0x36>
+      if(p->s.size == nunits)
+ 746:	02e48c63          	beq	s1,a4,77e <malloc+0xa8>
+        p->s.size -= nunits;
+ 74a:	4137073b          	subw	a4,a4,s3
+ 74e:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+ 750:	02071693          	slli	a3,a4,0x20
+ 754:	01c6d713          	srli	a4,a3,0x1c
+ 758:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+ 75a:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+ 75e:	00000717          	auipc	a4,0x0
+ 762:	0ca73d23          	sd	a0,218(a4) # 838 <freep>
+      return (void*)(p + 1);
+ 766:	01078513          	addi	a0,a5,16
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ 76a:	70e2                	ld	ra,56(sp)
+ 76c:	7442                	ld	s0,48(sp)
+ 76e:	74a2                	ld	s1,40(sp)
+ 770:	7902                	ld	s2,32(sp)
+ 772:	69e2                	ld	s3,24(sp)
+ 774:	6a42                	ld	s4,16(sp)
+ 776:	6aa2                	ld	s5,8(sp)
+ 778:	6b02                	ld	s6,0(sp)
+ 77a:	6121                	addi	sp,sp,64
+ 77c:	8082                	ret
+        prevp->s.ptr = p->s.ptr;
+ 77e:	6398                	ld	a4,0(a5)
+ 780:	e118                	sd	a4,0(a0)
+ 782:	bff1                	j	75e <malloc+0x88>
+  hp->s.size = nu;
+ 784:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+ 788:	0541                	addi	a0,a0,16
+ 78a:	00000097          	auipc	ra,0x0
+ 78e:	eca080e7          	jalr	-310(ra) # 654 <free>
+  return freep;
+ 792:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+ 796:	d971                	beqz	a0,76a <malloc+0x94>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 798:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 79a:	4798                	lw	a4,8(a5)
+ 79c:	fa9775e3          	bgeu	a4,s1,746 <malloc+0x70>
+    if(p == freep)
+ 7a0:	00093703          	ld	a4,0(s2)
+ 7a4:	853e                	mv	a0,a5
+ 7a6:	fef719e3          	bne	a4,a5,798 <malloc+0xc2>
+  p = sbrk(nu * sizeof(Header));
+ 7aa:	8552                	mv	a0,s4
+ 7ac:	00000097          	auipc	ra,0x0
+ 7b0:	b50080e7          	jalr	-1200(ra) # 2fc <sbrk>
+  if(p == (char*)-1)
+ 7b4:	fd5518e3          	bne	a0,s5,784 <malloc+0xae>
+        return 0;
+ 7b8:	4501                	li	a0,0
+ 7ba:	bf45                	j	76a <malloc+0x94>
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/infloop.c os-workshop/user/infloop.c
--- xv6-riscv/user/infloop.c	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/infloop.c	2022-04-28 18:25:44.000000000 -0300
@@ -0,0 +1,8 @@
+
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main() {
+  for (;;){};
+}
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/infloop.d os-workshop/user/infloop.d
--- xv6-riscv/user/infloop.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/infloop.d	2022-05-28 22:34:31.000000000 -0300
@@ -0,0 +1 @@
+user/infloop.o: user/infloop.c kernel/types.h kernel/stat.h user/user.h
Binary files xv6-riscv/user/infloop.o and os-workshop/user/infloop.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/infloop.sym os-workshop/user/infloop.sym
--- xv6-riscv/user/infloop.sym	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/infloop.sym	2022-05-28 22:34:31.000000000 -0300
@@ -0,0 +1,76 @@
+0000000000000000 .text
+00000000000007c0 .rodata
+0000000000000838 .sbss
+0000000000000840 .bss
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_aranges
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_line
+0000000000000000 .debug_frame
+0000000000000000 .debug_str
+0000000000000000 .debug_line_str
+0000000000000000 .debug_loclists
+0000000000000000 .debug_rnglists
+0000000000000000 infloop.c
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+0000000000000344 putc
+0000000000000366 printint
+0000000000000820 digits
+0000000000000000 umalloc.c
+0000000000000838 freep
+0000000000000840 base
+0000000000000008 strcpy
+000000000000061e printf
+0000000000001031 __global_pointer$
+00000000000001c2 memmove
+00000000000002bc mknod
+0000000000000324 semdown
+00000000000000c0 gets
+0000000000000831 __SDATA_BEGIN__
+000000000000031c semget
+00000000000002f4 getpid
+0000000000000254 memcpy
+00000000000006d6 malloc
+0000000000000334 semclose
+0000000000000304 sleep
+0000000000000284 pipe
+0000000000000294 write
+00000000000002cc fstat
+00000000000005f0 fprintf
+00000000000002a4 kill
+0000000000000412 vprintf
+00000000000002e4 chdir
+00000000000002ac exec
+000000000000027c wait
+000000000000028c read
+00000000000002c4 unlink
+000000000000021a memcmp
+000000000000026c fork
+0000000000000850 __BSS_END__
+00000000000002fc sbrk
+000000000000030c uptime
+0000000000000831 __bss_start
+000000000000007a memset
+0000000000000000 main
+000000000000033c timeout
+0000000000000024 strcmp
+00000000000002ec dup
+0000000000000831 __DATA_BEGIN__
+0000000000000134 stat
+0000000000000831 _edata
+0000000000000314 setp
+0000000000000850 _end
+00000000000002d4 link
+0000000000000274 exit
+000000000000017a atoi
+0000000000000050 strlen
+00000000000002b4 open
+000000000000032c semup
+000000000000009c strchr
+00000000000002dc mkdir
+000000000000029c close
+0000000000000654 free
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/init.asm os-workshop/user/init.asm
--- xv6-riscv/user/init.asm	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/init.asm	2022-05-28 22:34:33.000000000 -0300
@@ -0,0 +1,1442 @@
+
+user/_init:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <main>:
+
+char *argv[] = { "sh", 0 };
+
+int
+main(void)
+{
+   0:	1101                	addi	sp,sp,-32
+   2:	ec06                	sd	ra,24(sp)
+   4:	e822                	sd	s0,16(sp)
+   6:	e426                	sd	s1,8(sp)
+   8:	e04a                	sd	s2,0(sp)
+   a:	1000                	addi	s0,sp,32
+  int pid, wpid;
+
+  if(open("console", O_RDWR) < 0){
+   c:	4589                	li	a1,2
+   e:	00001517          	auipc	a0,0x1
+  12:	8a250513          	addi	a0,a0,-1886 # 8b0 <malloc+0xea>
+  16:	00000097          	auipc	ra,0x0
+  1a:	38e080e7          	jalr	910(ra) # 3a4 <open>
+  1e:	06054363          	bltz	a0,84 <main+0x84>
+    mknod("console", CONSOLE, 0);
+    open("console", O_RDWR);
+  }
+  dup(0);  // stdout
+  22:	4501                	li	a0,0
+  24:	00000097          	auipc	ra,0x0
+  28:	3b8080e7          	jalr	952(ra) # 3dc <dup>
+  dup(0);  // stderr
+  2c:	4501                	li	a0,0
+  2e:	00000097          	auipc	ra,0x0
+  32:	3ae080e7          	jalr	942(ra) # 3dc <dup>
+
+  for(;;){
+    printf("init: starting sh\n");
+  36:	00001917          	auipc	s2,0x1
+  3a:	88290913          	addi	s2,s2,-1918 # 8b8 <malloc+0xf2>
+  3e:	854a                	mv	a0,s2
+  40:	00000097          	auipc	ra,0x0
+  44:	6ce080e7          	jalr	1742(ra) # 70e <printf>
+    pid = fork();
+  48:	00000097          	auipc	ra,0x0
+  4c:	314080e7          	jalr	788(ra) # 35c <fork>
+  50:	84aa                	mv	s1,a0
+    if(pid < 0){
+  52:	04054d63          	bltz	a0,ac <main+0xac>
+      printf("init: fork failed\n");
+      exit(1);
+    }
+    if(pid == 0){
+  56:	c925                	beqz	a0,c6 <main+0xc6>
+    }
+
+    for(;;){
+      // this call to wait() returns if the shell exits,
+      // or if a parentless process exits.
+      wpid = wait((int *) 0);
+  58:	4501                	li	a0,0
+  5a:	00000097          	auipc	ra,0x0
+  5e:	312080e7          	jalr	786(ra) # 36c <wait>
+      if(wpid == pid){
+  62:	fca48ee3          	beq	s1,a0,3e <main+0x3e>
+        // the shell exited; restart it.
+        break;
+      } else if(wpid < 0){
+  66:	fe0559e3          	bgez	a0,58 <main+0x58>
+        printf("init: wait returned an error\n");
+  6a:	00001517          	auipc	a0,0x1
+  6e:	89e50513          	addi	a0,a0,-1890 # 908 <malloc+0x142>
+  72:	00000097          	auipc	ra,0x0
+  76:	69c080e7          	jalr	1692(ra) # 70e <printf>
+        exit(1);
+  7a:	4505                	li	a0,1
+  7c:	00000097          	auipc	ra,0x0
+  80:	2e8080e7          	jalr	744(ra) # 364 <exit>
+    mknod("console", CONSOLE, 0);
+  84:	4601                	li	a2,0
+  86:	4585                	li	a1,1
+  88:	00001517          	auipc	a0,0x1
+  8c:	82850513          	addi	a0,a0,-2008 # 8b0 <malloc+0xea>
+  90:	00000097          	auipc	ra,0x0
+  94:	31c080e7          	jalr	796(ra) # 3ac <mknod>
+    open("console", O_RDWR);
+  98:	4589                	li	a1,2
+  9a:	00001517          	auipc	a0,0x1
+  9e:	81650513          	addi	a0,a0,-2026 # 8b0 <malloc+0xea>
+  a2:	00000097          	auipc	ra,0x0
+  a6:	302080e7          	jalr	770(ra) # 3a4 <open>
+  aa:	bfa5                	j	22 <main+0x22>
+      printf("init: fork failed\n");
+  ac:	00001517          	auipc	a0,0x1
+  b0:	82450513          	addi	a0,a0,-2012 # 8d0 <malloc+0x10a>
+  b4:	00000097          	auipc	ra,0x0
+  b8:	65a080e7          	jalr	1626(ra) # 70e <printf>
+      exit(1);
+  bc:	4505                	li	a0,1
+  be:	00000097          	auipc	ra,0x0
+  c2:	2a6080e7          	jalr	678(ra) # 364 <exit>
+      exec("sh", argv);
+  c6:	00001597          	auipc	a1,0x1
+  ca:	8da58593          	addi	a1,a1,-1830 # 9a0 <argv>
+  ce:	00001517          	auipc	a0,0x1
+  d2:	81a50513          	addi	a0,a0,-2022 # 8e8 <malloc+0x122>
+  d6:	00000097          	auipc	ra,0x0
+  da:	2c6080e7          	jalr	710(ra) # 39c <exec>
+      printf("init: exec sh failed\n");
+  de:	00001517          	auipc	a0,0x1
+  e2:	81250513          	addi	a0,a0,-2030 # 8f0 <malloc+0x12a>
+  e6:	00000097          	auipc	ra,0x0
+  ea:	628080e7          	jalr	1576(ra) # 70e <printf>
+      exit(1);
+  ee:	4505                	li	a0,1
+  f0:	00000097          	auipc	ra,0x0
+  f4:	274080e7          	jalr	628(ra) # 364 <exit>
+
+00000000000000f8 <strcpy>:
+#include "kernel/fcntl.h"
+#include "user/user.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  f8:	1141                	addi	sp,sp,-16
+  fa:	e422                	sd	s0,8(sp)
+  fc:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  fe:	87aa                	mv	a5,a0
+ 100:	0585                	addi	a1,a1,1
+ 102:	0785                	addi	a5,a5,1
+ 104:	fff5c703          	lbu	a4,-1(a1)
+ 108:	fee78fa3          	sb	a4,-1(a5)
+ 10c:	fb75                	bnez	a4,100 <strcpy+0x8>
+    ;
+  return os;
+}
+ 10e:	6422                	ld	s0,8(sp)
+ 110:	0141                	addi	sp,sp,16
+ 112:	8082                	ret
+
+0000000000000114 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 114:	1141                	addi	sp,sp,-16
+ 116:	e422                	sd	s0,8(sp)
+ 118:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+ 11a:	00054783          	lbu	a5,0(a0)
+ 11e:	cb91                	beqz	a5,132 <strcmp+0x1e>
+ 120:	0005c703          	lbu	a4,0(a1)
+ 124:	00f71763          	bne	a4,a5,132 <strcmp+0x1e>
+    p++, q++;
+ 128:	0505                	addi	a0,a0,1
+ 12a:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+ 12c:	00054783          	lbu	a5,0(a0)
+ 130:	fbe5                	bnez	a5,120 <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+ 132:	0005c503          	lbu	a0,0(a1)
+}
+ 136:	40a7853b          	subw	a0,a5,a0
+ 13a:	6422                	ld	s0,8(sp)
+ 13c:	0141                	addi	sp,sp,16
+ 13e:	8082                	ret
+
+0000000000000140 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 140:	1141                	addi	sp,sp,-16
+ 142:	e422                	sd	s0,8(sp)
+ 144:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 146:	00054783          	lbu	a5,0(a0)
+ 14a:	cf91                	beqz	a5,166 <strlen+0x26>
+ 14c:	0505                	addi	a0,a0,1
+ 14e:	87aa                	mv	a5,a0
+ 150:	4685                	li	a3,1
+ 152:	9e89                	subw	a3,a3,a0
+ 154:	00f6853b          	addw	a0,a3,a5
+ 158:	0785                	addi	a5,a5,1
+ 15a:	fff7c703          	lbu	a4,-1(a5)
+ 15e:	fb7d                	bnez	a4,154 <strlen+0x14>
+    ;
+  return n;
+}
+ 160:	6422                	ld	s0,8(sp)
+ 162:	0141                	addi	sp,sp,16
+ 164:	8082                	ret
+  for(n = 0; s[n]; n++)
+ 166:	4501                	li	a0,0
+ 168:	bfe5                	j	160 <strlen+0x20>
+
+000000000000016a <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 16a:	1141                	addi	sp,sp,-16
+ 16c:	e422                	sd	s0,8(sp)
+ 16e:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+ 170:	ca19                	beqz	a2,186 <memset+0x1c>
+ 172:	87aa                	mv	a5,a0
+ 174:	1602                	slli	a2,a2,0x20
+ 176:	9201                	srli	a2,a2,0x20
+ 178:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+ 17c:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+ 180:	0785                	addi	a5,a5,1
+ 182:	fee79de3          	bne	a5,a4,17c <memset+0x12>
+  }
+  return dst;
+}
+ 186:	6422                	ld	s0,8(sp)
+ 188:	0141                	addi	sp,sp,16
+ 18a:	8082                	ret
+
+000000000000018c <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 18c:	1141                	addi	sp,sp,-16
+ 18e:	e422                	sd	s0,8(sp)
+ 190:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+ 192:	00054783          	lbu	a5,0(a0)
+ 196:	cb99                	beqz	a5,1ac <strchr+0x20>
+    if(*s == c)
+ 198:	00f58763          	beq	a1,a5,1a6 <strchr+0x1a>
+  for(; *s; s++)
+ 19c:	0505                	addi	a0,a0,1
+ 19e:	00054783          	lbu	a5,0(a0)
+ 1a2:	fbfd                	bnez	a5,198 <strchr+0xc>
+      return (char*)s;
+  return 0;
+ 1a4:	4501                	li	a0,0
+}
+ 1a6:	6422                	ld	s0,8(sp)
+ 1a8:	0141                	addi	sp,sp,16
+ 1aa:	8082                	ret
+  return 0;
+ 1ac:	4501                	li	a0,0
+ 1ae:	bfe5                	j	1a6 <strchr+0x1a>
+
+00000000000001b0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 1b0:	711d                	addi	sp,sp,-96
+ 1b2:	ec86                	sd	ra,88(sp)
+ 1b4:	e8a2                	sd	s0,80(sp)
+ 1b6:	e4a6                	sd	s1,72(sp)
+ 1b8:	e0ca                	sd	s2,64(sp)
+ 1ba:	fc4e                	sd	s3,56(sp)
+ 1bc:	f852                	sd	s4,48(sp)
+ 1be:	f456                	sd	s5,40(sp)
+ 1c0:	f05a                	sd	s6,32(sp)
+ 1c2:	ec5e                	sd	s7,24(sp)
+ 1c4:	1080                	addi	s0,sp,96
+ 1c6:	8baa                	mv	s7,a0
+ 1c8:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1ca:	892a                	mv	s2,a0
+ 1cc:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+ 1ce:	4aa9                	li	s5,10
+ 1d0:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+ 1d2:	89a6                	mv	s3,s1
+ 1d4:	2485                	addiw	s1,s1,1
+ 1d6:	0344d863          	bge	s1,s4,206 <gets+0x56>
+    cc = read(0, &c, 1);
+ 1da:	4605                	li	a2,1
+ 1dc:	faf40593          	addi	a1,s0,-81
+ 1e0:	4501                	li	a0,0
+ 1e2:	00000097          	auipc	ra,0x0
+ 1e6:	19a080e7          	jalr	410(ra) # 37c <read>
+    if(cc < 1)
+ 1ea:	00a05e63          	blez	a0,206 <gets+0x56>
+    buf[i++] = c;
+ 1ee:	faf44783          	lbu	a5,-81(s0)
+ 1f2:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+ 1f6:	01578763          	beq	a5,s5,204 <gets+0x54>
+ 1fa:	0905                	addi	s2,s2,1
+ 1fc:	fd679be3          	bne	a5,s6,1d2 <gets+0x22>
+  for(i=0; i+1 < max; ){
+ 200:	89a6                	mv	s3,s1
+ 202:	a011                	j	206 <gets+0x56>
+ 204:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+ 206:	99de                	add	s3,s3,s7
+ 208:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+ 20c:	855e                	mv	a0,s7
+ 20e:	60e6                	ld	ra,88(sp)
+ 210:	6446                	ld	s0,80(sp)
+ 212:	64a6                	ld	s1,72(sp)
+ 214:	6906                	ld	s2,64(sp)
+ 216:	79e2                	ld	s3,56(sp)
+ 218:	7a42                	ld	s4,48(sp)
+ 21a:	7aa2                	ld	s5,40(sp)
+ 21c:	7b02                	ld	s6,32(sp)
+ 21e:	6be2                	ld	s7,24(sp)
+ 220:	6125                	addi	sp,sp,96
+ 222:	8082                	ret
+
+0000000000000224 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 224:	1101                	addi	sp,sp,-32
+ 226:	ec06                	sd	ra,24(sp)
+ 228:	e822                	sd	s0,16(sp)
+ 22a:	e426                	sd	s1,8(sp)
+ 22c:	e04a                	sd	s2,0(sp)
+ 22e:	1000                	addi	s0,sp,32
+ 230:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 232:	4581                	li	a1,0
+ 234:	00000097          	auipc	ra,0x0
+ 238:	170080e7          	jalr	368(ra) # 3a4 <open>
+  if(fd < 0)
+ 23c:	02054563          	bltz	a0,266 <stat+0x42>
+ 240:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+ 242:	85ca                	mv	a1,s2
+ 244:	00000097          	auipc	ra,0x0
+ 248:	178080e7          	jalr	376(ra) # 3bc <fstat>
+ 24c:	892a                	mv	s2,a0
+  close(fd);
+ 24e:	8526                	mv	a0,s1
+ 250:	00000097          	auipc	ra,0x0
+ 254:	13c080e7          	jalr	316(ra) # 38c <close>
+  return r;
+}
+ 258:	854a                	mv	a0,s2
+ 25a:	60e2                	ld	ra,24(sp)
+ 25c:	6442                	ld	s0,16(sp)
+ 25e:	64a2                	ld	s1,8(sp)
+ 260:	6902                	ld	s2,0(sp)
+ 262:	6105                	addi	sp,sp,32
+ 264:	8082                	ret
+    return -1;
+ 266:	597d                	li	s2,-1
+ 268:	bfc5                	j	258 <stat+0x34>
+
+000000000000026a <atoi>:
+
+int
+atoi(const char *s)
+{
+ 26a:	1141                	addi	sp,sp,-16
+ 26c:	e422                	sd	s0,8(sp)
+ 26e:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 270:	00054683          	lbu	a3,0(a0)
+ 274:	fd06879b          	addiw	a5,a3,-48
+ 278:	0ff7f793          	zext.b	a5,a5
+ 27c:	4625                	li	a2,9
+ 27e:	02f66863          	bltu	a2,a5,2ae <atoi+0x44>
+ 282:	872a                	mv	a4,a0
+  n = 0;
+ 284:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+ 286:	0705                	addi	a4,a4,1
+ 288:	0025179b          	slliw	a5,a0,0x2
+ 28c:	9fa9                	addw	a5,a5,a0
+ 28e:	0017979b          	slliw	a5,a5,0x1
+ 292:	9fb5                	addw	a5,a5,a3
+ 294:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+ 298:	00074683          	lbu	a3,0(a4)
+ 29c:	fd06879b          	addiw	a5,a3,-48
+ 2a0:	0ff7f793          	zext.b	a5,a5
+ 2a4:	fef671e3          	bgeu	a2,a5,286 <atoi+0x1c>
+  return n;
+}
+ 2a8:	6422                	ld	s0,8(sp)
+ 2aa:	0141                	addi	sp,sp,16
+ 2ac:	8082                	ret
+  n = 0;
+ 2ae:	4501                	li	a0,0
+ 2b0:	bfe5                	j	2a8 <atoi+0x3e>
+
+00000000000002b2 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2b2:	1141                	addi	sp,sp,-16
+ 2b4:	e422                	sd	s0,8(sp)
+ 2b6:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+ 2b8:	02b57463          	bgeu	a0,a1,2e0 <memmove+0x2e>
+    while(n-- > 0)
+ 2bc:	00c05f63          	blez	a2,2da <memmove+0x28>
+ 2c0:	1602                	slli	a2,a2,0x20
+ 2c2:	9201                	srli	a2,a2,0x20
+ 2c4:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+ 2c8:	872a                	mv	a4,a0
+      *dst++ = *src++;
+ 2ca:	0585                	addi	a1,a1,1
+ 2cc:	0705                	addi	a4,a4,1
+ 2ce:	fff5c683          	lbu	a3,-1(a1)
+ 2d2:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+ 2d6:	fee79ae3          	bne	a5,a4,2ca <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+ 2da:	6422                	ld	s0,8(sp)
+ 2dc:	0141                	addi	sp,sp,16
+ 2de:	8082                	ret
+    dst += n;
+ 2e0:	00c50733          	add	a4,a0,a2
+    src += n;
+ 2e4:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+ 2e6:	fec05ae3          	blez	a2,2da <memmove+0x28>
+ 2ea:	fff6079b          	addiw	a5,a2,-1
+ 2ee:	1782                	slli	a5,a5,0x20
+ 2f0:	9381                	srli	a5,a5,0x20
+ 2f2:	fff7c793          	not	a5,a5
+ 2f6:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+ 2f8:	15fd                	addi	a1,a1,-1
+ 2fa:	177d                	addi	a4,a4,-1
+ 2fc:	0005c683          	lbu	a3,0(a1)
+ 300:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+ 304:	fee79ae3          	bne	a5,a4,2f8 <memmove+0x46>
+ 308:	bfc9                	j	2da <memmove+0x28>
+
+000000000000030a <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+ 30a:	1141                	addi	sp,sp,-16
+ 30c:	e422                	sd	s0,8(sp)
+ 30e:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+ 310:	ca05                	beqz	a2,340 <memcmp+0x36>
+ 312:	fff6069b          	addiw	a3,a2,-1
+ 316:	1682                	slli	a3,a3,0x20
+ 318:	9281                	srli	a3,a3,0x20
+ 31a:	0685                	addi	a3,a3,1
+ 31c:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+ 31e:	00054783          	lbu	a5,0(a0)
+ 322:	0005c703          	lbu	a4,0(a1)
+ 326:	00e79863          	bne	a5,a4,336 <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+ 32a:	0505                	addi	a0,a0,1
+    p2++;
+ 32c:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+ 32e:	fed518e3          	bne	a0,a3,31e <memcmp+0x14>
+  }
+  return 0;
+ 332:	4501                	li	a0,0
+ 334:	a019                	j	33a <memcmp+0x30>
+      return *p1 - *p2;
+ 336:	40e7853b          	subw	a0,a5,a4
+}
+ 33a:	6422                	ld	s0,8(sp)
+ 33c:	0141                	addi	sp,sp,16
+ 33e:	8082                	ret
+  return 0;
+ 340:	4501                	li	a0,0
+ 342:	bfe5                	j	33a <memcmp+0x30>
+
+0000000000000344 <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+ 344:	1141                	addi	sp,sp,-16
+ 346:	e406                	sd	ra,8(sp)
+ 348:	e022                	sd	s0,0(sp)
+ 34a:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+ 34c:	00000097          	auipc	ra,0x0
+ 350:	f66080e7          	jalr	-154(ra) # 2b2 <memmove>
+}
+ 354:	60a2                	ld	ra,8(sp)
+ 356:	6402                	ld	s0,0(sp)
+ 358:	0141                	addi	sp,sp,16
+ 35a:	8082                	ret
+
+000000000000035c <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ 35c:	4885                	li	a7,1
+ ecall
+ 35e:	00000073          	ecall
+ ret
+ 362:	8082                	ret
+
+0000000000000364 <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+ 364:	4889                	li	a7,2
+ ecall
+ 366:	00000073          	ecall
+ ret
+ 36a:	8082                	ret
+
+000000000000036c <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+ 36c:	488d                	li	a7,3
+ ecall
+ 36e:	00000073          	ecall
+ ret
+ 372:	8082                	ret
+
+0000000000000374 <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ 374:	4891                	li	a7,4
+ ecall
+ 376:	00000073          	ecall
+ ret
+ 37a:	8082                	ret
+
+000000000000037c <read>:
+.global read
+read:
+ li a7, SYS_read
+ 37c:	4895                	li	a7,5
+ ecall
+ 37e:	00000073          	ecall
+ ret
+ 382:	8082                	ret
+
+0000000000000384 <write>:
+.global write
+write:
+ li a7, SYS_write
+ 384:	48c1                	li	a7,16
+ ecall
+ 386:	00000073          	ecall
+ ret
+ 38a:	8082                	ret
+
+000000000000038c <close>:
+.global close
+close:
+ li a7, SYS_close
+ 38c:	48d5                	li	a7,21
+ ecall
+ 38e:	00000073          	ecall
+ ret
+ 392:	8082                	ret
+
+0000000000000394 <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+ 394:	4899                	li	a7,6
+ ecall
+ 396:	00000073          	ecall
+ ret
+ 39a:	8082                	ret
+
+000000000000039c <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+ 39c:	489d                	li	a7,7
+ ecall
+ 39e:	00000073          	ecall
+ ret
+ 3a2:	8082                	ret
+
+00000000000003a4 <open>:
+.global open
+open:
+ li a7, SYS_open
+ 3a4:	48bd                	li	a7,15
+ ecall
+ 3a6:	00000073          	ecall
+ ret
+ 3aa:	8082                	ret
+
+00000000000003ac <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ 3ac:	48c5                	li	a7,17
+ ecall
+ 3ae:	00000073          	ecall
+ ret
+ 3b2:	8082                	ret
+
+00000000000003b4 <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ 3b4:	48c9                	li	a7,18
+ ecall
+ 3b6:	00000073          	ecall
+ ret
+ 3ba:	8082                	ret
+
+00000000000003bc <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ 3bc:	48a1                	li	a7,8
+ ecall
+ 3be:	00000073          	ecall
+ ret
+ 3c2:	8082                	ret
+
+00000000000003c4 <link>:
+.global link
+link:
+ li a7, SYS_link
+ 3c4:	48cd                	li	a7,19
+ ecall
+ 3c6:	00000073          	ecall
+ ret
+ 3ca:	8082                	ret
+
+00000000000003cc <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ 3cc:	48d1                	li	a7,20
+ ecall
+ 3ce:	00000073          	ecall
+ ret
+ 3d2:	8082                	ret
+
+00000000000003d4 <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ 3d4:	48a5                	li	a7,9
+ ecall
+ 3d6:	00000073          	ecall
+ ret
+ 3da:	8082                	ret
+
+00000000000003dc <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+ 3dc:	48a9                	li	a7,10
+ ecall
+ 3de:	00000073          	ecall
+ ret
+ 3e2:	8082                	ret
+
+00000000000003e4 <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ 3e4:	48ad                	li	a7,11
+ ecall
+ 3e6:	00000073          	ecall
+ ret
+ 3ea:	8082                	ret
+
+00000000000003ec <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ 3ec:	48b1                	li	a7,12
+ ecall
+ 3ee:	00000073          	ecall
+ ret
+ 3f2:	8082                	ret
+
+00000000000003f4 <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ 3f4:	48b5                	li	a7,13
+ ecall
+ 3f6:	00000073          	ecall
+ ret
+ 3fa:	8082                	ret
+
+00000000000003fc <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ 3fc:	48b9                	li	a7,14
+ ecall
+ 3fe:	00000073          	ecall
+ ret
+ 402:	8082                	ret
+
+0000000000000404 <setp>:
+.global setp
+setp:
+ li a7, SYS_setp
+ 404:	48d9                	li	a7,22
+ ecall
+ 406:	00000073          	ecall
+ ret
+ 40a:	8082                	ret
+
+000000000000040c <semget>:
+.global semget
+semget:
+ li a7, SYS_semget
+ 40c:	48dd                	li	a7,23
+ ecall
+ 40e:	00000073          	ecall
+ ret
+ 412:	8082                	ret
+
+0000000000000414 <semdown>:
+.global semdown
+semdown:
+ li a7, SYS_semdown
+ 414:	48e1                	li	a7,24
+ ecall
+ 416:	00000073          	ecall
+ ret
+ 41a:	8082                	ret
+
+000000000000041c <semup>:
+.global semup
+semup:
+ li a7, SYS_semup
+ 41c:	48e5                	li	a7,25
+ ecall
+ 41e:	00000073          	ecall
+ ret
+ 422:	8082                	ret
+
+0000000000000424 <semclose>:
+.global semclose
+semclose:
+ li a7, SYS_semclose
+ 424:	48e9                	li	a7,26
+ ecall
+ 426:	00000073          	ecall
+ ret
+ 42a:	8082                	ret
+
+000000000000042c <timeout>:
+.global timeout
+timeout:
+ li a7, SYS_timeout
+ 42c:	48ed                	li	a7,27
+ ecall
+ 42e:	00000073          	ecall
+ ret
+ 432:	8082                	ret
+
+0000000000000434 <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+ 434:	1101                	addi	sp,sp,-32
+ 436:	ec06                	sd	ra,24(sp)
+ 438:	e822                	sd	s0,16(sp)
+ 43a:	1000                	addi	s0,sp,32
+ 43c:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+ 440:	4605                	li	a2,1
+ 442:	fef40593          	addi	a1,s0,-17
+ 446:	00000097          	auipc	ra,0x0
+ 44a:	f3e080e7          	jalr	-194(ra) # 384 <write>
+}
+ 44e:	60e2                	ld	ra,24(sp)
+ 450:	6442                	ld	s0,16(sp)
+ 452:	6105                	addi	sp,sp,32
+ 454:	8082                	ret
+
+0000000000000456 <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 456:	7139                	addi	sp,sp,-64
+ 458:	fc06                	sd	ra,56(sp)
+ 45a:	f822                	sd	s0,48(sp)
+ 45c:	f426                	sd	s1,40(sp)
+ 45e:	f04a                	sd	s2,32(sp)
+ 460:	ec4e                	sd	s3,24(sp)
+ 462:	0080                	addi	s0,sp,64
+ 464:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 466:	c299                	beqz	a3,46c <printint+0x16>
+ 468:	0805c963          	bltz	a1,4fa <printint+0xa4>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 46c:	2581                	sext.w	a1,a1
+  neg = 0;
+ 46e:	4881                	li	a7,0
+ 470:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+ 474:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+ 476:	2601                	sext.w	a2,a2
+ 478:	00000517          	auipc	a0,0x0
+ 47c:	51050513          	addi	a0,a0,1296 # 988 <digits>
+ 480:	883a                	mv	a6,a4
+ 482:	2705                	addiw	a4,a4,1
+ 484:	02c5f7bb          	remuw	a5,a1,a2
+ 488:	1782                	slli	a5,a5,0x20
+ 48a:	9381                	srli	a5,a5,0x20
+ 48c:	97aa                	add	a5,a5,a0
+ 48e:	0007c783          	lbu	a5,0(a5)
+ 492:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+ 496:	0005879b          	sext.w	a5,a1
+ 49a:	02c5d5bb          	divuw	a1,a1,a2
+ 49e:	0685                	addi	a3,a3,1
+ 4a0:	fec7f0e3          	bgeu	a5,a2,480 <printint+0x2a>
+  if(neg)
+ 4a4:	00088c63          	beqz	a7,4bc <printint+0x66>
+    buf[i++] = '-';
+ 4a8:	fd070793          	addi	a5,a4,-48
+ 4ac:	00878733          	add	a4,a5,s0
+ 4b0:	02d00793          	li	a5,45
+ 4b4:	fef70823          	sb	a5,-16(a4)
+ 4b8:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+ 4bc:	02e05863          	blez	a4,4ec <printint+0x96>
+ 4c0:	fc040793          	addi	a5,s0,-64
+ 4c4:	00e78933          	add	s2,a5,a4
+ 4c8:	fff78993          	addi	s3,a5,-1
+ 4cc:	99ba                	add	s3,s3,a4
+ 4ce:	377d                	addiw	a4,a4,-1
+ 4d0:	1702                	slli	a4,a4,0x20
+ 4d2:	9301                	srli	a4,a4,0x20
+ 4d4:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+ 4d8:	fff94583          	lbu	a1,-1(s2)
+ 4dc:	8526                	mv	a0,s1
+ 4de:	00000097          	auipc	ra,0x0
+ 4e2:	f56080e7          	jalr	-170(ra) # 434 <putc>
+  while(--i >= 0)
+ 4e6:	197d                	addi	s2,s2,-1
+ 4e8:	ff3918e3          	bne	s2,s3,4d8 <printint+0x82>
+}
+ 4ec:	70e2                	ld	ra,56(sp)
+ 4ee:	7442                	ld	s0,48(sp)
+ 4f0:	74a2                	ld	s1,40(sp)
+ 4f2:	7902                	ld	s2,32(sp)
+ 4f4:	69e2                	ld	s3,24(sp)
+ 4f6:	6121                	addi	sp,sp,64
+ 4f8:	8082                	ret
+    x = -xx;
+ 4fa:	40b005bb          	negw	a1,a1
+    neg = 1;
+ 4fe:	4885                	li	a7,1
+    x = -xx;
+ 500:	bf85                	j	470 <printint+0x1a>
+
+0000000000000502 <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+ 502:	7119                	addi	sp,sp,-128
+ 504:	fc86                	sd	ra,120(sp)
+ 506:	f8a2                	sd	s0,112(sp)
+ 508:	f4a6                	sd	s1,104(sp)
+ 50a:	f0ca                	sd	s2,96(sp)
+ 50c:	ecce                	sd	s3,88(sp)
+ 50e:	e8d2                	sd	s4,80(sp)
+ 510:	e4d6                	sd	s5,72(sp)
+ 512:	e0da                	sd	s6,64(sp)
+ 514:	fc5e                	sd	s7,56(sp)
+ 516:	f862                	sd	s8,48(sp)
+ 518:	f466                	sd	s9,40(sp)
+ 51a:	f06a                	sd	s10,32(sp)
+ 51c:	ec6e                	sd	s11,24(sp)
+ 51e:	0100                	addi	s0,sp,128
+  char *s;
+  int c, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+ 520:	0005c903          	lbu	s2,0(a1)
+ 524:	18090f63          	beqz	s2,6c2 <vprintf+0x1c0>
+ 528:	8aaa                	mv	s5,a0
+ 52a:	8b32                	mv	s6,a2
+ 52c:	00158493          	addi	s1,a1,1
+  state = 0;
+ 530:	4981                	li	s3,0
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 532:	02500a13          	li	s4,37
+ 536:	4c55                	li	s8,21
+ 538:	00000c97          	auipc	s9,0x0
+ 53c:	3f8c8c93          	addi	s9,s9,1016 # 930 <malloc+0x16a>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c == 's'){
+        s = va_arg(ap, char*);
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 540:	02800d93          	li	s11,40
+  putc(fd, 'x');
+ 544:	4d41                	li	s10,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 546:	00000b97          	auipc	s7,0x0
+ 54a:	442b8b93          	addi	s7,s7,1090 # 988 <digits>
+ 54e:	a839                	j	56c <vprintf+0x6a>
+        putc(fd, c);
+ 550:	85ca                	mv	a1,s2
+ 552:	8556                	mv	a0,s5
+ 554:	00000097          	auipc	ra,0x0
+ 558:	ee0080e7          	jalr	-288(ra) # 434 <putc>
+ 55c:	a019                	j	562 <vprintf+0x60>
+    } else if(state == '%'){
+ 55e:	01498d63          	beq	s3,s4,578 <vprintf+0x76>
+  for(i = 0; fmt[i]; i++){
+ 562:	0485                	addi	s1,s1,1
+ 564:	fff4c903          	lbu	s2,-1(s1)
+ 568:	14090d63          	beqz	s2,6c2 <vprintf+0x1c0>
+    if(state == 0){
+ 56c:	fe0999e3          	bnez	s3,55e <vprintf+0x5c>
+      if(c == '%'){
+ 570:	ff4910e3          	bne	s2,s4,550 <vprintf+0x4e>
+        state = '%';
+ 574:	89d2                	mv	s3,s4
+ 576:	b7f5                	j	562 <vprintf+0x60>
+      if(c == 'd'){
+ 578:	11490c63          	beq	s2,s4,690 <vprintf+0x18e>
+ 57c:	f9d9079b          	addiw	a5,s2,-99
+ 580:	0ff7f793          	zext.b	a5,a5
+ 584:	10fc6e63          	bltu	s8,a5,6a0 <vprintf+0x19e>
+ 588:	f9d9079b          	addiw	a5,s2,-99
+ 58c:	0ff7f713          	zext.b	a4,a5
+ 590:	10ec6863          	bltu	s8,a4,6a0 <vprintf+0x19e>
+ 594:	00271793          	slli	a5,a4,0x2
+ 598:	97e6                	add	a5,a5,s9
+ 59a:	439c                	lw	a5,0(a5)
+ 59c:	97e6                	add	a5,a5,s9
+ 59e:	8782                	jr	a5
+        printint(fd, va_arg(ap, int), 10, 1);
+ 5a0:	008b0913          	addi	s2,s6,8
+ 5a4:	4685                	li	a3,1
+ 5a6:	4629                	li	a2,10
+ 5a8:	000b2583          	lw	a1,0(s6)
+ 5ac:	8556                	mv	a0,s5
+ 5ae:	00000097          	auipc	ra,0x0
+ 5b2:	ea8080e7          	jalr	-344(ra) # 456 <printint>
+ 5b6:	8b4a                	mv	s6,s2
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 5b8:	4981                	li	s3,0
+ 5ba:	b765                	j	562 <vprintf+0x60>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 5bc:	008b0913          	addi	s2,s6,8
+ 5c0:	4681                	li	a3,0
+ 5c2:	4629                	li	a2,10
+ 5c4:	000b2583          	lw	a1,0(s6)
+ 5c8:	8556                	mv	a0,s5
+ 5ca:	00000097          	auipc	ra,0x0
+ 5ce:	e8c080e7          	jalr	-372(ra) # 456 <printint>
+ 5d2:	8b4a                	mv	s6,s2
+      state = 0;
+ 5d4:	4981                	li	s3,0
+ 5d6:	b771                	j	562 <vprintf+0x60>
+        printint(fd, va_arg(ap, int), 16, 0);
+ 5d8:	008b0913          	addi	s2,s6,8
+ 5dc:	4681                	li	a3,0
+ 5de:	866a                	mv	a2,s10
+ 5e0:	000b2583          	lw	a1,0(s6)
+ 5e4:	8556                	mv	a0,s5
+ 5e6:	00000097          	auipc	ra,0x0
+ 5ea:	e70080e7          	jalr	-400(ra) # 456 <printint>
+ 5ee:	8b4a                	mv	s6,s2
+      state = 0;
+ 5f0:	4981                	li	s3,0
+ 5f2:	bf85                	j	562 <vprintf+0x60>
+        printptr(fd, va_arg(ap, uint64));
+ 5f4:	008b0793          	addi	a5,s6,8
+ 5f8:	f8f43423          	sd	a5,-120(s0)
+ 5fc:	000b3983          	ld	s3,0(s6)
+  putc(fd, '0');
+ 600:	03000593          	li	a1,48
+ 604:	8556                	mv	a0,s5
+ 606:	00000097          	auipc	ra,0x0
+ 60a:	e2e080e7          	jalr	-466(ra) # 434 <putc>
+  putc(fd, 'x');
+ 60e:	07800593          	li	a1,120
+ 612:	8556                	mv	a0,s5
+ 614:	00000097          	auipc	ra,0x0
+ 618:	e20080e7          	jalr	-480(ra) # 434 <putc>
+ 61c:	896a                	mv	s2,s10
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 61e:	03c9d793          	srli	a5,s3,0x3c
+ 622:	97de                	add	a5,a5,s7
+ 624:	0007c583          	lbu	a1,0(a5)
+ 628:	8556                	mv	a0,s5
+ 62a:	00000097          	auipc	ra,0x0
+ 62e:	e0a080e7          	jalr	-502(ra) # 434 <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+ 632:	0992                	slli	s3,s3,0x4
+ 634:	397d                	addiw	s2,s2,-1
+ 636:	fe0914e3          	bnez	s2,61e <vprintf+0x11c>
+        printptr(fd, va_arg(ap, uint64));
+ 63a:	f8843b03          	ld	s6,-120(s0)
+      state = 0;
+ 63e:	4981                	li	s3,0
+ 640:	b70d                	j	562 <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 642:	008b0913          	addi	s2,s6,8
+ 646:	000b3983          	ld	s3,0(s6)
+        if(s == 0)
+ 64a:	02098163          	beqz	s3,66c <vprintf+0x16a>
+        while(*s != 0){
+ 64e:	0009c583          	lbu	a1,0(s3)
+ 652:	c5ad                	beqz	a1,6bc <vprintf+0x1ba>
+          putc(fd, *s);
+ 654:	8556                	mv	a0,s5
+ 656:	00000097          	auipc	ra,0x0
+ 65a:	dde080e7          	jalr	-546(ra) # 434 <putc>
+          s++;
+ 65e:	0985                	addi	s3,s3,1
+        while(*s != 0){
+ 660:	0009c583          	lbu	a1,0(s3)
+ 664:	f9e5                	bnez	a1,654 <vprintf+0x152>
+        s = va_arg(ap, char*);
+ 666:	8b4a                	mv	s6,s2
+      state = 0;
+ 668:	4981                	li	s3,0
+ 66a:	bde5                	j	562 <vprintf+0x60>
+          s = "(null)";
+ 66c:	00000997          	auipc	s3,0x0
+ 670:	2bc98993          	addi	s3,s3,700 # 928 <malloc+0x162>
+        while(*s != 0){
+ 674:	85ee                	mv	a1,s11
+ 676:	bff9                	j	654 <vprintf+0x152>
+        putc(fd, va_arg(ap, uint));
+ 678:	008b0913          	addi	s2,s6,8
+ 67c:	000b4583          	lbu	a1,0(s6)
+ 680:	8556                	mv	a0,s5
+ 682:	00000097          	auipc	ra,0x0
+ 686:	db2080e7          	jalr	-590(ra) # 434 <putc>
+ 68a:	8b4a                	mv	s6,s2
+      state = 0;
+ 68c:	4981                	li	s3,0
+ 68e:	bdd1                	j	562 <vprintf+0x60>
+        putc(fd, c);
+ 690:	85d2                	mv	a1,s4
+ 692:	8556                	mv	a0,s5
+ 694:	00000097          	auipc	ra,0x0
+ 698:	da0080e7          	jalr	-608(ra) # 434 <putc>
+      state = 0;
+ 69c:	4981                	li	s3,0
+ 69e:	b5d1                	j	562 <vprintf+0x60>
+        putc(fd, '%');
+ 6a0:	85d2                	mv	a1,s4
+ 6a2:	8556                	mv	a0,s5
+ 6a4:	00000097          	auipc	ra,0x0
+ 6a8:	d90080e7          	jalr	-624(ra) # 434 <putc>
+        putc(fd, c);
+ 6ac:	85ca                	mv	a1,s2
+ 6ae:	8556                	mv	a0,s5
+ 6b0:	00000097          	auipc	ra,0x0
+ 6b4:	d84080e7          	jalr	-636(ra) # 434 <putc>
+      state = 0;
+ 6b8:	4981                	li	s3,0
+ 6ba:	b565                	j	562 <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 6bc:	8b4a                	mv	s6,s2
+      state = 0;
+ 6be:	4981                	li	s3,0
+ 6c0:	b54d                	j	562 <vprintf+0x60>
+    }
+  }
+}
+ 6c2:	70e6                	ld	ra,120(sp)
+ 6c4:	7446                	ld	s0,112(sp)
+ 6c6:	74a6                	ld	s1,104(sp)
+ 6c8:	7906                	ld	s2,96(sp)
+ 6ca:	69e6                	ld	s3,88(sp)
+ 6cc:	6a46                	ld	s4,80(sp)
+ 6ce:	6aa6                	ld	s5,72(sp)
+ 6d0:	6b06                	ld	s6,64(sp)
+ 6d2:	7be2                	ld	s7,56(sp)
+ 6d4:	7c42                	ld	s8,48(sp)
+ 6d6:	7ca2                	ld	s9,40(sp)
+ 6d8:	7d02                	ld	s10,32(sp)
+ 6da:	6de2                	ld	s11,24(sp)
+ 6dc:	6109                	addi	sp,sp,128
+ 6de:	8082                	ret
+
+00000000000006e0 <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+ 6e0:	715d                	addi	sp,sp,-80
+ 6e2:	ec06                	sd	ra,24(sp)
+ 6e4:	e822                	sd	s0,16(sp)
+ 6e6:	1000                	addi	s0,sp,32
+ 6e8:	e010                	sd	a2,0(s0)
+ 6ea:	e414                	sd	a3,8(s0)
+ 6ec:	e818                	sd	a4,16(s0)
+ 6ee:	ec1c                	sd	a5,24(s0)
+ 6f0:	03043023          	sd	a6,32(s0)
+ 6f4:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 6f8:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+ 6fc:	8622                	mv	a2,s0
+ 6fe:	00000097          	auipc	ra,0x0
+ 702:	e04080e7          	jalr	-508(ra) # 502 <vprintf>
+}
+ 706:	60e2                	ld	ra,24(sp)
+ 708:	6442                	ld	s0,16(sp)
+ 70a:	6161                	addi	sp,sp,80
+ 70c:	8082                	ret
+
+000000000000070e <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+ 70e:	711d                	addi	sp,sp,-96
+ 710:	ec06                	sd	ra,24(sp)
+ 712:	e822                	sd	s0,16(sp)
+ 714:	1000                	addi	s0,sp,32
+ 716:	e40c                	sd	a1,8(s0)
+ 718:	e810                	sd	a2,16(s0)
+ 71a:	ec14                	sd	a3,24(s0)
+ 71c:	f018                	sd	a4,32(s0)
+ 71e:	f41c                	sd	a5,40(s0)
+ 720:	03043823          	sd	a6,48(s0)
+ 724:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 728:	00840613          	addi	a2,s0,8
+ 72c:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+ 730:	85aa                	mv	a1,a0
+ 732:	4505                	li	a0,1
+ 734:	00000097          	auipc	ra,0x0
+ 738:	dce080e7          	jalr	-562(ra) # 502 <vprintf>
+}
+ 73c:	60e2                	ld	ra,24(sp)
+ 73e:	6442                	ld	s0,16(sp)
+ 740:	6125                	addi	sp,sp,96
+ 742:	8082                	ret
+
+0000000000000744 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 744:	1141                	addi	sp,sp,-16
+ 746:	e422                	sd	s0,8(sp)
+ 748:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 74a:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 74e:	00000797          	auipc	a5,0x0
+ 752:	2627b783          	ld	a5,610(a5) # 9b0 <freep>
+ 756:	a02d                	j	780 <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 758:	4618                	lw	a4,8(a2)
+ 75a:	9f2d                	addw	a4,a4,a1
+ 75c:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 760:	6398                	ld	a4,0(a5)
+ 762:	6310                	ld	a2,0(a4)
+ 764:	a83d                	j	7a2 <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 766:	ff852703          	lw	a4,-8(a0)
+ 76a:	9f31                	addw	a4,a4,a2
+ 76c:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+ 76e:	ff053683          	ld	a3,-16(a0)
+ 772:	a091                	j	7b6 <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 774:	6398                	ld	a4,0(a5)
+ 776:	00e7e463          	bltu	a5,a4,77e <free+0x3a>
+ 77a:	00e6ea63          	bltu	a3,a4,78e <free+0x4a>
+{
+ 77e:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 780:	fed7fae3          	bgeu	a5,a3,774 <free+0x30>
+ 784:	6398                	ld	a4,0(a5)
+ 786:	00e6e463          	bltu	a3,a4,78e <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 78a:	fee7eae3          	bltu	a5,a4,77e <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+ 78e:	ff852583          	lw	a1,-8(a0)
+ 792:	6390                	ld	a2,0(a5)
+ 794:	02059813          	slli	a6,a1,0x20
+ 798:	01c85713          	srli	a4,a6,0x1c
+ 79c:	9736                	add	a4,a4,a3
+ 79e:	fae60de3          	beq	a2,a4,758 <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 7a2:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+ 7a6:	4790                	lw	a2,8(a5)
+ 7a8:	02061593          	slli	a1,a2,0x20
+ 7ac:	01c5d713          	srli	a4,a1,0x1c
+ 7b0:	973e                	add	a4,a4,a5
+ 7b2:	fae68ae3          	beq	a3,a4,766 <free+0x22>
+    p->s.ptr = bp->s.ptr;
+ 7b6:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 7b8:	00000717          	auipc	a4,0x0
+ 7bc:	1ef73c23          	sd	a5,504(a4) # 9b0 <freep>
+}
+ 7c0:	6422                	ld	s0,8(sp)
+ 7c2:	0141                	addi	sp,sp,16
+ 7c4:	8082                	ret
+
+00000000000007c6 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 7c6:	7139                	addi	sp,sp,-64
+ 7c8:	fc06                	sd	ra,56(sp)
+ 7ca:	f822                	sd	s0,48(sp)
+ 7cc:	f426                	sd	s1,40(sp)
+ 7ce:	f04a                	sd	s2,32(sp)
+ 7d0:	ec4e                	sd	s3,24(sp)
+ 7d2:	e852                	sd	s4,16(sp)
+ 7d4:	e456                	sd	s5,8(sp)
+ 7d6:	e05a                	sd	s6,0(sp)
+ 7d8:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 7da:	02051493          	slli	s1,a0,0x20
+ 7de:	9081                	srli	s1,s1,0x20
+ 7e0:	04bd                	addi	s1,s1,15
+ 7e2:	8091                	srli	s1,s1,0x4
+ 7e4:	0014899b          	addiw	s3,s1,1
+ 7e8:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+ 7ea:	00000517          	auipc	a0,0x0
+ 7ee:	1c653503          	ld	a0,454(a0) # 9b0 <freep>
+ 7f2:	c515                	beqz	a0,81e <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7f4:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 7f6:	4798                	lw	a4,8(a5)
+ 7f8:	02977f63          	bgeu	a4,s1,836 <malloc+0x70>
+ 7fc:	8a4e                	mv	s4,s3
+ 7fe:	0009871b          	sext.w	a4,s3
+ 802:	6685                	lui	a3,0x1
+ 804:	00d77363          	bgeu	a4,a3,80a <malloc+0x44>
+ 808:	6a05                	lui	s4,0x1
+ 80a:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+ 80e:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 812:	00000917          	auipc	s2,0x0
+ 816:	19e90913          	addi	s2,s2,414 # 9b0 <freep>
+  if(p == (char*)-1)
+ 81a:	5afd                	li	s5,-1
+ 81c:	a895                	j	890 <malloc+0xca>
+    base.s.ptr = freep = prevp = &base;
+ 81e:	00000797          	auipc	a5,0x0
+ 822:	19a78793          	addi	a5,a5,410 # 9b8 <base>
+ 826:	00000717          	auipc	a4,0x0
+ 82a:	18f73523          	sd	a5,394(a4) # 9b0 <freep>
+ 82e:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+ 830:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+ 834:	b7e1                	j	7fc <malloc+0x36>
+      if(p->s.size == nunits)
+ 836:	02e48c63          	beq	s1,a4,86e <malloc+0xa8>
+        p->s.size -= nunits;
+ 83a:	4137073b          	subw	a4,a4,s3
+ 83e:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+ 840:	02071693          	slli	a3,a4,0x20
+ 844:	01c6d713          	srli	a4,a3,0x1c
+ 848:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+ 84a:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+ 84e:	00000717          	auipc	a4,0x0
+ 852:	16a73123          	sd	a0,354(a4) # 9b0 <freep>
+      return (void*)(p + 1);
+ 856:	01078513          	addi	a0,a5,16
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ 85a:	70e2                	ld	ra,56(sp)
+ 85c:	7442                	ld	s0,48(sp)
+ 85e:	74a2                	ld	s1,40(sp)
+ 860:	7902                	ld	s2,32(sp)
+ 862:	69e2                	ld	s3,24(sp)
+ 864:	6a42                	ld	s4,16(sp)
+ 866:	6aa2                	ld	s5,8(sp)
+ 868:	6b02                	ld	s6,0(sp)
+ 86a:	6121                	addi	sp,sp,64
+ 86c:	8082                	ret
+        prevp->s.ptr = p->s.ptr;
+ 86e:	6398                	ld	a4,0(a5)
+ 870:	e118                	sd	a4,0(a0)
+ 872:	bff1                	j	84e <malloc+0x88>
+  hp->s.size = nu;
+ 874:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+ 878:	0541                	addi	a0,a0,16
+ 87a:	00000097          	auipc	ra,0x0
+ 87e:	eca080e7          	jalr	-310(ra) # 744 <free>
+  return freep;
+ 882:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+ 886:	d971                	beqz	a0,85a <malloc+0x94>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 888:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 88a:	4798                	lw	a4,8(a5)
+ 88c:	fa9775e3          	bgeu	a4,s1,836 <malloc+0x70>
+    if(p == freep)
+ 890:	00093703          	ld	a4,0(s2)
+ 894:	853e                	mv	a0,a5
+ 896:	fef719e3          	bne	a4,a5,888 <malloc+0xc2>
+  p = sbrk(nu * sizeof(Header));
+ 89a:	8552                	mv	a0,s4
+ 89c:	00000097          	auipc	ra,0x0
+ 8a0:	b50080e7          	jalr	-1200(ra) # 3ec <sbrk>
+  if(p == (char*)-1)
+ 8a4:	fd5518e3          	bne	a0,s5,874 <malloc+0xae>
+        return 0;
+ 8a8:	4501                	li	a0,0
+ 8aa:	bf45                	j	85a <malloc+0x94>
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/init.d os-workshop/user/init.d
--- xv6-riscv/user/init.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/init.d	2022-05-28 22:34:33.000000000 -0300
@@ -0,0 +1,2 @@
+user/init.o: user/init.c kernel/types.h kernel/stat.h kernel/spinlock.h \
+ kernel/sleeplock.h kernel/fs.h kernel/file.h user/user.h kernel/fcntl.h
Binary files xv6-riscv/user/init.o and os-workshop/user/init.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/init.sym os-workshop/user/init.sym
--- xv6-riscv/user/init.sym	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/init.sym	2022-05-28 22:34:33.000000000 -0300
@@ -0,0 +1,78 @@
+0000000000000000 .text
+00000000000008b0 .rodata
+00000000000009a0 .data
+00000000000009b0 .sbss
+00000000000009b8 .bss
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_aranges
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_line
+0000000000000000 .debug_frame
+0000000000000000 .debug_str
+0000000000000000 .debug_line_str
+0000000000000000 .debug_loclists
+0000000000000000 .debug_rnglists
+0000000000000000 init.c
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+0000000000000434 putc
+0000000000000456 printint
+0000000000000988 digits
+0000000000000000 umalloc.c
+00000000000009b0 freep
+00000000000009b8 base
+00000000000000f8 strcpy
+000000000000070e printf
+00000000000011a0 __global_pointer$
+00000000000009a0 argv
+00000000000002b2 memmove
+00000000000003ac mknod
+0000000000000414 semdown
+00000000000001b0 gets
+00000000000009b0 __SDATA_BEGIN__
+000000000000040c semget
+00000000000003e4 getpid
+0000000000000344 memcpy
+00000000000007c6 malloc
+0000000000000424 semclose
+00000000000003f4 sleep
+0000000000000374 pipe
+0000000000000384 write
+00000000000003bc fstat
+00000000000006e0 fprintf
+0000000000000394 kill
+0000000000000502 vprintf
+00000000000003d4 chdir
+000000000000039c exec
+000000000000036c wait
+000000000000037c read
+00000000000003b4 unlink
+000000000000030a memcmp
+000000000000035c fork
+00000000000009c8 __BSS_END__
+00000000000003ec sbrk
+00000000000003fc uptime
+00000000000009b0 __bss_start
+000000000000016a memset
+0000000000000000 main
+000000000000042c timeout
+0000000000000114 strcmp
+00000000000003dc dup
+00000000000009a0 __DATA_BEGIN__
+0000000000000224 stat
+00000000000009b0 _edata
+0000000000000404 setp
+00000000000009c8 _end
+00000000000003c4 link
+0000000000000364 exit
+000000000000026a atoi
+0000000000000140 strlen
+00000000000003a4 open
+000000000000041c semup
+000000000000018c strchr
+00000000000003cc mkdir
+000000000000038c close
+0000000000000744 free
Binary files xv6-riscv/user/initcode and os-workshop/user/initcode differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/initcode.asm os-workshop/user/initcode.asm
--- xv6-riscv/user/initcode.asm	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/initcode.asm	2022-05-28 22:34:29.000000000 -0300
@@ -0,0 +1,41 @@
+
+user/initcode.o:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <start>:
+#include "syscall.h"
+
+# exec(init, argv)
+.globl start
+start:
+        la a0, init
+   0:	00000517          	auipc	a0,0x0
+   4:	00050513          	mv	a0,a0
+        la a1, argv
+   8:	00000597          	auipc	a1,0x0
+   c:	00058593          	mv	a1,a1
+        li a7, SYS_exec
+  10:	00700893          	li	a7,7
+        ecall
+  14:	00000073          	ecall
+
+0000000000000018 <exit>:
+
+# for(;;) exit();
+exit:
+        li a7, SYS_exit
+  18:	00200893          	li	a7,2
+        ecall
+  1c:	00000073          	ecall
+        jal exit
+  20:	ff9ff0ef          	jal	ra,18 <exit>
+
+0000000000000024 <init>:
+  24:	696e692f          	.word	0x696e692f
+  28:	           	Address 0x0000000000000028 is out of bounds.
+
+
+000000000000002b <argv>:
+	...
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/initcode.d os-workshop/user/initcode.d
--- xv6-riscv/user/initcode.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/initcode.d	2022-05-28 22:34:29.000000000 -0300
@@ -0,0 +1 @@
+user/initcode.o: user/initcode.S kernel/syscall.h
Binary files xv6-riscv/user/initcode.o and os-workshop/user/initcode.o differ
Binary files xv6-riscv/user/initcode.out and os-workshop/user/initcode.out differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/kill.asm os-workshop/user/kill.asm
--- xv6-riscv/user/kill.asm	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/kill.asm	2022-05-28 22:34:33.000000000 -0300
@@ -0,0 +1,1378 @@
+
+user/_kill:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <main>:
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char **argv)
+{
+   0:	1101                	addi	sp,sp,-32
+   2:	ec06                	sd	ra,24(sp)
+   4:	e822                	sd	s0,16(sp)
+   6:	e426                	sd	s1,8(sp)
+   8:	e04a                	sd	s2,0(sp)
+   a:	1000                	addi	s0,sp,32
+  int i;
+
+  if(argc < 2){
+   c:	4785                	li	a5,1
+   e:	02a7dd63          	bge	a5,a0,48 <main+0x48>
+  12:	00858493          	addi	s1,a1,8
+  16:	ffe5091b          	addiw	s2,a0,-2
+  1a:	02091793          	slli	a5,s2,0x20
+  1e:	01d7d913          	srli	s2,a5,0x1d
+  22:	05c1                	addi	a1,a1,16
+  24:	992e                	add	s2,s2,a1
+    fprintf(2, "usage: kill pid...\n");
+    exit(1);
+  }
+  for(i=1; i<argc; i++)
+    kill(atoi(argv[i]));
+  26:	6088                	ld	a0,0(s1)
+  28:	00000097          	auipc	ra,0x0
+  2c:	1ae080e7          	jalr	430(ra) # 1d6 <atoi>
+  30:	00000097          	auipc	ra,0x0
+  34:	2d0080e7          	jalr	720(ra) # 300 <kill>
+  for(i=1; i<argc; i++)
+  38:	04a1                	addi	s1,s1,8
+  3a:	ff2496e3          	bne	s1,s2,26 <main+0x26>
+  exit(0);
+  3e:	4501                	li	a0,0
+  40:	00000097          	auipc	ra,0x0
+  44:	290080e7          	jalr	656(ra) # 2d0 <exit>
+    fprintf(2, "usage: kill pid...\n");
+  48:	00000597          	auipc	a1,0x0
+  4c:	7d058593          	addi	a1,a1,2000 # 818 <malloc+0xe6>
+  50:	4509                	li	a0,2
+  52:	00000097          	auipc	ra,0x0
+  56:	5fa080e7          	jalr	1530(ra) # 64c <fprintf>
+    exit(1);
+  5a:	4505                	li	a0,1
+  5c:	00000097          	auipc	ra,0x0
+  60:	274080e7          	jalr	628(ra) # 2d0 <exit>
+
+0000000000000064 <strcpy>:
+#include "kernel/fcntl.h"
+#include "user/user.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  64:	1141                	addi	sp,sp,-16
+  66:	e422                	sd	s0,8(sp)
+  68:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  6a:	87aa                	mv	a5,a0
+  6c:	0585                	addi	a1,a1,1
+  6e:	0785                	addi	a5,a5,1
+  70:	fff5c703          	lbu	a4,-1(a1)
+  74:	fee78fa3          	sb	a4,-1(a5)
+  78:	fb75                	bnez	a4,6c <strcpy+0x8>
+    ;
+  return os;
+}
+  7a:	6422                	ld	s0,8(sp)
+  7c:	0141                	addi	sp,sp,16
+  7e:	8082                	ret
+
+0000000000000080 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  80:	1141                	addi	sp,sp,-16
+  82:	e422                	sd	s0,8(sp)
+  84:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+  86:	00054783          	lbu	a5,0(a0)
+  8a:	cb91                	beqz	a5,9e <strcmp+0x1e>
+  8c:	0005c703          	lbu	a4,0(a1)
+  90:	00f71763          	bne	a4,a5,9e <strcmp+0x1e>
+    p++, q++;
+  94:	0505                	addi	a0,a0,1
+  96:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+  98:	00054783          	lbu	a5,0(a0)
+  9c:	fbe5                	bnez	a5,8c <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+  9e:	0005c503          	lbu	a0,0(a1)
+}
+  a2:	40a7853b          	subw	a0,a5,a0
+  a6:	6422                	ld	s0,8(sp)
+  a8:	0141                	addi	sp,sp,16
+  aa:	8082                	ret
+
+00000000000000ac <strlen>:
+
+uint
+strlen(const char *s)
+{
+  ac:	1141                	addi	sp,sp,-16
+  ae:	e422                	sd	s0,8(sp)
+  b0:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+  b2:	00054783          	lbu	a5,0(a0)
+  b6:	cf91                	beqz	a5,d2 <strlen+0x26>
+  b8:	0505                	addi	a0,a0,1
+  ba:	87aa                	mv	a5,a0
+  bc:	4685                	li	a3,1
+  be:	9e89                	subw	a3,a3,a0
+  c0:	00f6853b          	addw	a0,a3,a5
+  c4:	0785                	addi	a5,a5,1
+  c6:	fff7c703          	lbu	a4,-1(a5)
+  ca:	fb7d                	bnez	a4,c0 <strlen+0x14>
+    ;
+  return n;
+}
+  cc:	6422                	ld	s0,8(sp)
+  ce:	0141                	addi	sp,sp,16
+  d0:	8082                	ret
+  for(n = 0; s[n]; n++)
+  d2:	4501                	li	a0,0
+  d4:	bfe5                	j	cc <strlen+0x20>
+
+00000000000000d6 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  d6:	1141                	addi	sp,sp,-16
+  d8:	e422                	sd	s0,8(sp)
+  da:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+  dc:	ca19                	beqz	a2,f2 <memset+0x1c>
+  de:	87aa                	mv	a5,a0
+  e0:	1602                	slli	a2,a2,0x20
+  e2:	9201                	srli	a2,a2,0x20
+  e4:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+  e8:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+  ec:	0785                	addi	a5,a5,1
+  ee:	fee79de3          	bne	a5,a4,e8 <memset+0x12>
+  }
+  return dst;
+}
+  f2:	6422                	ld	s0,8(sp)
+  f4:	0141                	addi	sp,sp,16
+  f6:	8082                	ret
+
+00000000000000f8 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+  f8:	1141                	addi	sp,sp,-16
+  fa:	e422                	sd	s0,8(sp)
+  fc:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+  fe:	00054783          	lbu	a5,0(a0)
+ 102:	cb99                	beqz	a5,118 <strchr+0x20>
+    if(*s == c)
+ 104:	00f58763          	beq	a1,a5,112 <strchr+0x1a>
+  for(; *s; s++)
+ 108:	0505                	addi	a0,a0,1
+ 10a:	00054783          	lbu	a5,0(a0)
+ 10e:	fbfd                	bnez	a5,104 <strchr+0xc>
+      return (char*)s;
+  return 0;
+ 110:	4501                	li	a0,0
+}
+ 112:	6422                	ld	s0,8(sp)
+ 114:	0141                	addi	sp,sp,16
+ 116:	8082                	ret
+  return 0;
+ 118:	4501                	li	a0,0
+ 11a:	bfe5                	j	112 <strchr+0x1a>
+
+000000000000011c <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 11c:	711d                	addi	sp,sp,-96
+ 11e:	ec86                	sd	ra,88(sp)
+ 120:	e8a2                	sd	s0,80(sp)
+ 122:	e4a6                	sd	s1,72(sp)
+ 124:	e0ca                	sd	s2,64(sp)
+ 126:	fc4e                	sd	s3,56(sp)
+ 128:	f852                	sd	s4,48(sp)
+ 12a:	f456                	sd	s5,40(sp)
+ 12c:	f05a                	sd	s6,32(sp)
+ 12e:	ec5e                	sd	s7,24(sp)
+ 130:	1080                	addi	s0,sp,96
+ 132:	8baa                	mv	s7,a0
+ 134:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 136:	892a                	mv	s2,a0
+ 138:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+ 13a:	4aa9                	li	s5,10
+ 13c:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+ 13e:	89a6                	mv	s3,s1
+ 140:	2485                	addiw	s1,s1,1
+ 142:	0344d863          	bge	s1,s4,172 <gets+0x56>
+    cc = read(0, &c, 1);
+ 146:	4605                	li	a2,1
+ 148:	faf40593          	addi	a1,s0,-81
+ 14c:	4501                	li	a0,0
+ 14e:	00000097          	auipc	ra,0x0
+ 152:	19a080e7          	jalr	410(ra) # 2e8 <read>
+    if(cc < 1)
+ 156:	00a05e63          	blez	a0,172 <gets+0x56>
+    buf[i++] = c;
+ 15a:	faf44783          	lbu	a5,-81(s0)
+ 15e:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+ 162:	01578763          	beq	a5,s5,170 <gets+0x54>
+ 166:	0905                	addi	s2,s2,1
+ 168:	fd679be3          	bne	a5,s6,13e <gets+0x22>
+  for(i=0; i+1 < max; ){
+ 16c:	89a6                	mv	s3,s1
+ 16e:	a011                	j	172 <gets+0x56>
+ 170:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+ 172:	99de                	add	s3,s3,s7
+ 174:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+ 178:	855e                	mv	a0,s7
+ 17a:	60e6                	ld	ra,88(sp)
+ 17c:	6446                	ld	s0,80(sp)
+ 17e:	64a6                	ld	s1,72(sp)
+ 180:	6906                	ld	s2,64(sp)
+ 182:	79e2                	ld	s3,56(sp)
+ 184:	7a42                	ld	s4,48(sp)
+ 186:	7aa2                	ld	s5,40(sp)
+ 188:	7b02                	ld	s6,32(sp)
+ 18a:	6be2                	ld	s7,24(sp)
+ 18c:	6125                	addi	sp,sp,96
+ 18e:	8082                	ret
+
+0000000000000190 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 190:	1101                	addi	sp,sp,-32
+ 192:	ec06                	sd	ra,24(sp)
+ 194:	e822                	sd	s0,16(sp)
+ 196:	e426                	sd	s1,8(sp)
+ 198:	e04a                	sd	s2,0(sp)
+ 19a:	1000                	addi	s0,sp,32
+ 19c:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 19e:	4581                	li	a1,0
+ 1a0:	00000097          	auipc	ra,0x0
+ 1a4:	170080e7          	jalr	368(ra) # 310 <open>
+  if(fd < 0)
+ 1a8:	02054563          	bltz	a0,1d2 <stat+0x42>
+ 1ac:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+ 1ae:	85ca                	mv	a1,s2
+ 1b0:	00000097          	auipc	ra,0x0
+ 1b4:	178080e7          	jalr	376(ra) # 328 <fstat>
+ 1b8:	892a                	mv	s2,a0
+  close(fd);
+ 1ba:	8526                	mv	a0,s1
+ 1bc:	00000097          	auipc	ra,0x0
+ 1c0:	13c080e7          	jalr	316(ra) # 2f8 <close>
+  return r;
+}
+ 1c4:	854a                	mv	a0,s2
+ 1c6:	60e2                	ld	ra,24(sp)
+ 1c8:	6442                	ld	s0,16(sp)
+ 1ca:	64a2                	ld	s1,8(sp)
+ 1cc:	6902                	ld	s2,0(sp)
+ 1ce:	6105                	addi	sp,sp,32
+ 1d0:	8082                	ret
+    return -1;
+ 1d2:	597d                	li	s2,-1
+ 1d4:	bfc5                	j	1c4 <stat+0x34>
+
+00000000000001d6 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 1d6:	1141                	addi	sp,sp,-16
+ 1d8:	e422                	sd	s0,8(sp)
+ 1da:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 1dc:	00054683          	lbu	a3,0(a0)
+ 1e0:	fd06879b          	addiw	a5,a3,-48
+ 1e4:	0ff7f793          	zext.b	a5,a5
+ 1e8:	4625                	li	a2,9
+ 1ea:	02f66863          	bltu	a2,a5,21a <atoi+0x44>
+ 1ee:	872a                	mv	a4,a0
+  n = 0;
+ 1f0:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+ 1f2:	0705                	addi	a4,a4,1
+ 1f4:	0025179b          	slliw	a5,a0,0x2
+ 1f8:	9fa9                	addw	a5,a5,a0
+ 1fa:	0017979b          	slliw	a5,a5,0x1
+ 1fe:	9fb5                	addw	a5,a5,a3
+ 200:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+ 204:	00074683          	lbu	a3,0(a4)
+ 208:	fd06879b          	addiw	a5,a3,-48
+ 20c:	0ff7f793          	zext.b	a5,a5
+ 210:	fef671e3          	bgeu	a2,a5,1f2 <atoi+0x1c>
+  return n;
+}
+ 214:	6422                	ld	s0,8(sp)
+ 216:	0141                	addi	sp,sp,16
+ 218:	8082                	ret
+  n = 0;
+ 21a:	4501                	li	a0,0
+ 21c:	bfe5                	j	214 <atoi+0x3e>
+
+000000000000021e <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 21e:	1141                	addi	sp,sp,-16
+ 220:	e422                	sd	s0,8(sp)
+ 222:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+ 224:	02b57463          	bgeu	a0,a1,24c <memmove+0x2e>
+    while(n-- > 0)
+ 228:	00c05f63          	blez	a2,246 <memmove+0x28>
+ 22c:	1602                	slli	a2,a2,0x20
+ 22e:	9201                	srli	a2,a2,0x20
+ 230:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+ 234:	872a                	mv	a4,a0
+      *dst++ = *src++;
+ 236:	0585                	addi	a1,a1,1
+ 238:	0705                	addi	a4,a4,1
+ 23a:	fff5c683          	lbu	a3,-1(a1)
+ 23e:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+ 242:	fee79ae3          	bne	a5,a4,236 <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+ 246:	6422                	ld	s0,8(sp)
+ 248:	0141                	addi	sp,sp,16
+ 24a:	8082                	ret
+    dst += n;
+ 24c:	00c50733          	add	a4,a0,a2
+    src += n;
+ 250:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+ 252:	fec05ae3          	blez	a2,246 <memmove+0x28>
+ 256:	fff6079b          	addiw	a5,a2,-1
+ 25a:	1782                	slli	a5,a5,0x20
+ 25c:	9381                	srli	a5,a5,0x20
+ 25e:	fff7c793          	not	a5,a5
+ 262:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+ 264:	15fd                	addi	a1,a1,-1
+ 266:	177d                	addi	a4,a4,-1
+ 268:	0005c683          	lbu	a3,0(a1)
+ 26c:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+ 270:	fee79ae3          	bne	a5,a4,264 <memmove+0x46>
+ 274:	bfc9                	j	246 <memmove+0x28>
+
+0000000000000276 <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+ 276:	1141                	addi	sp,sp,-16
+ 278:	e422                	sd	s0,8(sp)
+ 27a:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+ 27c:	ca05                	beqz	a2,2ac <memcmp+0x36>
+ 27e:	fff6069b          	addiw	a3,a2,-1
+ 282:	1682                	slli	a3,a3,0x20
+ 284:	9281                	srli	a3,a3,0x20
+ 286:	0685                	addi	a3,a3,1
+ 288:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+ 28a:	00054783          	lbu	a5,0(a0)
+ 28e:	0005c703          	lbu	a4,0(a1)
+ 292:	00e79863          	bne	a5,a4,2a2 <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+ 296:	0505                	addi	a0,a0,1
+    p2++;
+ 298:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+ 29a:	fed518e3          	bne	a0,a3,28a <memcmp+0x14>
+  }
+  return 0;
+ 29e:	4501                	li	a0,0
+ 2a0:	a019                	j	2a6 <memcmp+0x30>
+      return *p1 - *p2;
+ 2a2:	40e7853b          	subw	a0,a5,a4
+}
+ 2a6:	6422                	ld	s0,8(sp)
+ 2a8:	0141                	addi	sp,sp,16
+ 2aa:	8082                	ret
+  return 0;
+ 2ac:	4501                	li	a0,0
+ 2ae:	bfe5                	j	2a6 <memcmp+0x30>
+
+00000000000002b0 <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+ 2b0:	1141                	addi	sp,sp,-16
+ 2b2:	e406                	sd	ra,8(sp)
+ 2b4:	e022                	sd	s0,0(sp)
+ 2b6:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+ 2b8:	00000097          	auipc	ra,0x0
+ 2bc:	f66080e7          	jalr	-154(ra) # 21e <memmove>
+}
+ 2c0:	60a2                	ld	ra,8(sp)
+ 2c2:	6402                	ld	s0,0(sp)
+ 2c4:	0141                	addi	sp,sp,16
+ 2c6:	8082                	ret
+
+00000000000002c8 <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ 2c8:	4885                	li	a7,1
+ ecall
+ 2ca:	00000073          	ecall
+ ret
+ 2ce:	8082                	ret
+
+00000000000002d0 <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+ 2d0:	4889                	li	a7,2
+ ecall
+ 2d2:	00000073          	ecall
+ ret
+ 2d6:	8082                	ret
+
+00000000000002d8 <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+ 2d8:	488d                	li	a7,3
+ ecall
+ 2da:	00000073          	ecall
+ ret
+ 2de:	8082                	ret
+
+00000000000002e0 <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ 2e0:	4891                	li	a7,4
+ ecall
+ 2e2:	00000073          	ecall
+ ret
+ 2e6:	8082                	ret
+
+00000000000002e8 <read>:
+.global read
+read:
+ li a7, SYS_read
+ 2e8:	4895                	li	a7,5
+ ecall
+ 2ea:	00000073          	ecall
+ ret
+ 2ee:	8082                	ret
+
+00000000000002f0 <write>:
+.global write
+write:
+ li a7, SYS_write
+ 2f0:	48c1                	li	a7,16
+ ecall
+ 2f2:	00000073          	ecall
+ ret
+ 2f6:	8082                	ret
+
+00000000000002f8 <close>:
+.global close
+close:
+ li a7, SYS_close
+ 2f8:	48d5                	li	a7,21
+ ecall
+ 2fa:	00000073          	ecall
+ ret
+ 2fe:	8082                	ret
+
+0000000000000300 <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+ 300:	4899                	li	a7,6
+ ecall
+ 302:	00000073          	ecall
+ ret
+ 306:	8082                	ret
+
+0000000000000308 <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+ 308:	489d                	li	a7,7
+ ecall
+ 30a:	00000073          	ecall
+ ret
+ 30e:	8082                	ret
+
+0000000000000310 <open>:
+.global open
+open:
+ li a7, SYS_open
+ 310:	48bd                	li	a7,15
+ ecall
+ 312:	00000073          	ecall
+ ret
+ 316:	8082                	ret
+
+0000000000000318 <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ 318:	48c5                	li	a7,17
+ ecall
+ 31a:	00000073          	ecall
+ ret
+ 31e:	8082                	ret
+
+0000000000000320 <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ 320:	48c9                	li	a7,18
+ ecall
+ 322:	00000073          	ecall
+ ret
+ 326:	8082                	ret
+
+0000000000000328 <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ 328:	48a1                	li	a7,8
+ ecall
+ 32a:	00000073          	ecall
+ ret
+ 32e:	8082                	ret
+
+0000000000000330 <link>:
+.global link
+link:
+ li a7, SYS_link
+ 330:	48cd                	li	a7,19
+ ecall
+ 332:	00000073          	ecall
+ ret
+ 336:	8082                	ret
+
+0000000000000338 <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ 338:	48d1                	li	a7,20
+ ecall
+ 33a:	00000073          	ecall
+ ret
+ 33e:	8082                	ret
+
+0000000000000340 <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ 340:	48a5                	li	a7,9
+ ecall
+ 342:	00000073          	ecall
+ ret
+ 346:	8082                	ret
+
+0000000000000348 <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+ 348:	48a9                	li	a7,10
+ ecall
+ 34a:	00000073          	ecall
+ ret
+ 34e:	8082                	ret
+
+0000000000000350 <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ 350:	48ad                	li	a7,11
+ ecall
+ 352:	00000073          	ecall
+ ret
+ 356:	8082                	ret
+
+0000000000000358 <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ 358:	48b1                	li	a7,12
+ ecall
+ 35a:	00000073          	ecall
+ ret
+ 35e:	8082                	ret
+
+0000000000000360 <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ 360:	48b5                	li	a7,13
+ ecall
+ 362:	00000073          	ecall
+ ret
+ 366:	8082                	ret
+
+0000000000000368 <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ 368:	48b9                	li	a7,14
+ ecall
+ 36a:	00000073          	ecall
+ ret
+ 36e:	8082                	ret
+
+0000000000000370 <setp>:
+.global setp
+setp:
+ li a7, SYS_setp
+ 370:	48d9                	li	a7,22
+ ecall
+ 372:	00000073          	ecall
+ ret
+ 376:	8082                	ret
+
+0000000000000378 <semget>:
+.global semget
+semget:
+ li a7, SYS_semget
+ 378:	48dd                	li	a7,23
+ ecall
+ 37a:	00000073          	ecall
+ ret
+ 37e:	8082                	ret
+
+0000000000000380 <semdown>:
+.global semdown
+semdown:
+ li a7, SYS_semdown
+ 380:	48e1                	li	a7,24
+ ecall
+ 382:	00000073          	ecall
+ ret
+ 386:	8082                	ret
+
+0000000000000388 <semup>:
+.global semup
+semup:
+ li a7, SYS_semup
+ 388:	48e5                	li	a7,25
+ ecall
+ 38a:	00000073          	ecall
+ ret
+ 38e:	8082                	ret
+
+0000000000000390 <semclose>:
+.global semclose
+semclose:
+ li a7, SYS_semclose
+ 390:	48e9                	li	a7,26
+ ecall
+ 392:	00000073          	ecall
+ ret
+ 396:	8082                	ret
+
+0000000000000398 <timeout>:
+.global timeout
+timeout:
+ li a7, SYS_timeout
+ 398:	48ed                	li	a7,27
+ ecall
+ 39a:	00000073          	ecall
+ ret
+ 39e:	8082                	ret
+
+00000000000003a0 <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+ 3a0:	1101                	addi	sp,sp,-32
+ 3a2:	ec06                	sd	ra,24(sp)
+ 3a4:	e822                	sd	s0,16(sp)
+ 3a6:	1000                	addi	s0,sp,32
+ 3a8:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+ 3ac:	4605                	li	a2,1
+ 3ae:	fef40593          	addi	a1,s0,-17
+ 3b2:	00000097          	auipc	ra,0x0
+ 3b6:	f3e080e7          	jalr	-194(ra) # 2f0 <write>
+}
+ 3ba:	60e2                	ld	ra,24(sp)
+ 3bc:	6442                	ld	s0,16(sp)
+ 3be:	6105                	addi	sp,sp,32
+ 3c0:	8082                	ret
+
+00000000000003c2 <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3c2:	7139                	addi	sp,sp,-64
+ 3c4:	fc06                	sd	ra,56(sp)
+ 3c6:	f822                	sd	s0,48(sp)
+ 3c8:	f426                	sd	s1,40(sp)
+ 3ca:	f04a                	sd	s2,32(sp)
+ 3cc:	ec4e                	sd	s3,24(sp)
+ 3ce:	0080                	addi	s0,sp,64
+ 3d0:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 3d2:	c299                	beqz	a3,3d8 <printint+0x16>
+ 3d4:	0805c963          	bltz	a1,466 <printint+0xa4>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 3d8:	2581                	sext.w	a1,a1
+  neg = 0;
+ 3da:	4881                	li	a7,0
+ 3dc:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+ 3e0:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+ 3e2:	2601                	sext.w	a2,a2
+ 3e4:	00000517          	auipc	a0,0x0
+ 3e8:	4ac50513          	addi	a0,a0,1196 # 890 <digits>
+ 3ec:	883a                	mv	a6,a4
+ 3ee:	2705                	addiw	a4,a4,1
+ 3f0:	02c5f7bb          	remuw	a5,a1,a2
+ 3f4:	1782                	slli	a5,a5,0x20
+ 3f6:	9381                	srli	a5,a5,0x20
+ 3f8:	97aa                	add	a5,a5,a0
+ 3fa:	0007c783          	lbu	a5,0(a5)
+ 3fe:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+ 402:	0005879b          	sext.w	a5,a1
+ 406:	02c5d5bb          	divuw	a1,a1,a2
+ 40a:	0685                	addi	a3,a3,1
+ 40c:	fec7f0e3          	bgeu	a5,a2,3ec <printint+0x2a>
+  if(neg)
+ 410:	00088c63          	beqz	a7,428 <printint+0x66>
+    buf[i++] = '-';
+ 414:	fd070793          	addi	a5,a4,-48
+ 418:	00878733          	add	a4,a5,s0
+ 41c:	02d00793          	li	a5,45
+ 420:	fef70823          	sb	a5,-16(a4)
+ 424:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+ 428:	02e05863          	blez	a4,458 <printint+0x96>
+ 42c:	fc040793          	addi	a5,s0,-64
+ 430:	00e78933          	add	s2,a5,a4
+ 434:	fff78993          	addi	s3,a5,-1
+ 438:	99ba                	add	s3,s3,a4
+ 43a:	377d                	addiw	a4,a4,-1
+ 43c:	1702                	slli	a4,a4,0x20
+ 43e:	9301                	srli	a4,a4,0x20
+ 440:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+ 444:	fff94583          	lbu	a1,-1(s2)
+ 448:	8526                	mv	a0,s1
+ 44a:	00000097          	auipc	ra,0x0
+ 44e:	f56080e7          	jalr	-170(ra) # 3a0 <putc>
+  while(--i >= 0)
+ 452:	197d                	addi	s2,s2,-1
+ 454:	ff3918e3          	bne	s2,s3,444 <printint+0x82>
+}
+ 458:	70e2                	ld	ra,56(sp)
+ 45a:	7442                	ld	s0,48(sp)
+ 45c:	74a2                	ld	s1,40(sp)
+ 45e:	7902                	ld	s2,32(sp)
+ 460:	69e2                	ld	s3,24(sp)
+ 462:	6121                	addi	sp,sp,64
+ 464:	8082                	ret
+    x = -xx;
+ 466:	40b005bb          	negw	a1,a1
+    neg = 1;
+ 46a:	4885                	li	a7,1
+    x = -xx;
+ 46c:	bf85                	j	3dc <printint+0x1a>
+
+000000000000046e <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+ 46e:	7119                	addi	sp,sp,-128
+ 470:	fc86                	sd	ra,120(sp)
+ 472:	f8a2                	sd	s0,112(sp)
+ 474:	f4a6                	sd	s1,104(sp)
+ 476:	f0ca                	sd	s2,96(sp)
+ 478:	ecce                	sd	s3,88(sp)
+ 47a:	e8d2                	sd	s4,80(sp)
+ 47c:	e4d6                	sd	s5,72(sp)
+ 47e:	e0da                	sd	s6,64(sp)
+ 480:	fc5e                	sd	s7,56(sp)
+ 482:	f862                	sd	s8,48(sp)
+ 484:	f466                	sd	s9,40(sp)
+ 486:	f06a                	sd	s10,32(sp)
+ 488:	ec6e                	sd	s11,24(sp)
+ 48a:	0100                	addi	s0,sp,128
+  char *s;
+  int c, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+ 48c:	0005c903          	lbu	s2,0(a1)
+ 490:	18090f63          	beqz	s2,62e <vprintf+0x1c0>
+ 494:	8aaa                	mv	s5,a0
+ 496:	8b32                	mv	s6,a2
+ 498:	00158493          	addi	s1,a1,1
+  state = 0;
+ 49c:	4981                	li	s3,0
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 49e:	02500a13          	li	s4,37
+ 4a2:	4c55                	li	s8,21
+ 4a4:	00000c97          	auipc	s9,0x0
+ 4a8:	394c8c93          	addi	s9,s9,916 # 838 <malloc+0x106>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c == 's'){
+        s = va_arg(ap, char*);
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 4ac:	02800d93          	li	s11,40
+  putc(fd, 'x');
+ 4b0:	4d41                	li	s10,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 4b2:	00000b97          	auipc	s7,0x0
+ 4b6:	3deb8b93          	addi	s7,s7,990 # 890 <digits>
+ 4ba:	a839                	j	4d8 <vprintf+0x6a>
+        putc(fd, c);
+ 4bc:	85ca                	mv	a1,s2
+ 4be:	8556                	mv	a0,s5
+ 4c0:	00000097          	auipc	ra,0x0
+ 4c4:	ee0080e7          	jalr	-288(ra) # 3a0 <putc>
+ 4c8:	a019                	j	4ce <vprintf+0x60>
+    } else if(state == '%'){
+ 4ca:	01498d63          	beq	s3,s4,4e4 <vprintf+0x76>
+  for(i = 0; fmt[i]; i++){
+ 4ce:	0485                	addi	s1,s1,1
+ 4d0:	fff4c903          	lbu	s2,-1(s1)
+ 4d4:	14090d63          	beqz	s2,62e <vprintf+0x1c0>
+    if(state == 0){
+ 4d8:	fe0999e3          	bnez	s3,4ca <vprintf+0x5c>
+      if(c == '%'){
+ 4dc:	ff4910e3          	bne	s2,s4,4bc <vprintf+0x4e>
+        state = '%';
+ 4e0:	89d2                	mv	s3,s4
+ 4e2:	b7f5                	j	4ce <vprintf+0x60>
+      if(c == 'd'){
+ 4e4:	11490c63          	beq	s2,s4,5fc <vprintf+0x18e>
+ 4e8:	f9d9079b          	addiw	a5,s2,-99
+ 4ec:	0ff7f793          	zext.b	a5,a5
+ 4f0:	10fc6e63          	bltu	s8,a5,60c <vprintf+0x19e>
+ 4f4:	f9d9079b          	addiw	a5,s2,-99
+ 4f8:	0ff7f713          	zext.b	a4,a5
+ 4fc:	10ec6863          	bltu	s8,a4,60c <vprintf+0x19e>
+ 500:	00271793          	slli	a5,a4,0x2
+ 504:	97e6                	add	a5,a5,s9
+ 506:	439c                	lw	a5,0(a5)
+ 508:	97e6                	add	a5,a5,s9
+ 50a:	8782                	jr	a5
+        printint(fd, va_arg(ap, int), 10, 1);
+ 50c:	008b0913          	addi	s2,s6,8
+ 510:	4685                	li	a3,1
+ 512:	4629                	li	a2,10
+ 514:	000b2583          	lw	a1,0(s6)
+ 518:	8556                	mv	a0,s5
+ 51a:	00000097          	auipc	ra,0x0
+ 51e:	ea8080e7          	jalr	-344(ra) # 3c2 <printint>
+ 522:	8b4a                	mv	s6,s2
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 524:	4981                	li	s3,0
+ 526:	b765                	j	4ce <vprintf+0x60>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 528:	008b0913          	addi	s2,s6,8
+ 52c:	4681                	li	a3,0
+ 52e:	4629                	li	a2,10
+ 530:	000b2583          	lw	a1,0(s6)
+ 534:	8556                	mv	a0,s5
+ 536:	00000097          	auipc	ra,0x0
+ 53a:	e8c080e7          	jalr	-372(ra) # 3c2 <printint>
+ 53e:	8b4a                	mv	s6,s2
+      state = 0;
+ 540:	4981                	li	s3,0
+ 542:	b771                	j	4ce <vprintf+0x60>
+        printint(fd, va_arg(ap, int), 16, 0);
+ 544:	008b0913          	addi	s2,s6,8
+ 548:	4681                	li	a3,0
+ 54a:	866a                	mv	a2,s10
+ 54c:	000b2583          	lw	a1,0(s6)
+ 550:	8556                	mv	a0,s5
+ 552:	00000097          	auipc	ra,0x0
+ 556:	e70080e7          	jalr	-400(ra) # 3c2 <printint>
+ 55a:	8b4a                	mv	s6,s2
+      state = 0;
+ 55c:	4981                	li	s3,0
+ 55e:	bf85                	j	4ce <vprintf+0x60>
+        printptr(fd, va_arg(ap, uint64));
+ 560:	008b0793          	addi	a5,s6,8
+ 564:	f8f43423          	sd	a5,-120(s0)
+ 568:	000b3983          	ld	s3,0(s6)
+  putc(fd, '0');
+ 56c:	03000593          	li	a1,48
+ 570:	8556                	mv	a0,s5
+ 572:	00000097          	auipc	ra,0x0
+ 576:	e2e080e7          	jalr	-466(ra) # 3a0 <putc>
+  putc(fd, 'x');
+ 57a:	07800593          	li	a1,120
+ 57e:	8556                	mv	a0,s5
+ 580:	00000097          	auipc	ra,0x0
+ 584:	e20080e7          	jalr	-480(ra) # 3a0 <putc>
+ 588:	896a                	mv	s2,s10
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 58a:	03c9d793          	srli	a5,s3,0x3c
+ 58e:	97de                	add	a5,a5,s7
+ 590:	0007c583          	lbu	a1,0(a5)
+ 594:	8556                	mv	a0,s5
+ 596:	00000097          	auipc	ra,0x0
+ 59a:	e0a080e7          	jalr	-502(ra) # 3a0 <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+ 59e:	0992                	slli	s3,s3,0x4
+ 5a0:	397d                	addiw	s2,s2,-1
+ 5a2:	fe0914e3          	bnez	s2,58a <vprintf+0x11c>
+        printptr(fd, va_arg(ap, uint64));
+ 5a6:	f8843b03          	ld	s6,-120(s0)
+      state = 0;
+ 5aa:	4981                	li	s3,0
+ 5ac:	b70d                	j	4ce <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 5ae:	008b0913          	addi	s2,s6,8
+ 5b2:	000b3983          	ld	s3,0(s6)
+        if(s == 0)
+ 5b6:	02098163          	beqz	s3,5d8 <vprintf+0x16a>
+        while(*s != 0){
+ 5ba:	0009c583          	lbu	a1,0(s3)
+ 5be:	c5ad                	beqz	a1,628 <vprintf+0x1ba>
+          putc(fd, *s);
+ 5c0:	8556                	mv	a0,s5
+ 5c2:	00000097          	auipc	ra,0x0
+ 5c6:	dde080e7          	jalr	-546(ra) # 3a0 <putc>
+          s++;
+ 5ca:	0985                	addi	s3,s3,1
+        while(*s != 0){
+ 5cc:	0009c583          	lbu	a1,0(s3)
+ 5d0:	f9e5                	bnez	a1,5c0 <vprintf+0x152>
+        s = va_arg(ap, char*);
+ 5d2:	8b4a                	mv	s6,s2
+      state = 0;
+ 5d4:	4981                	li	s3,0
+ 5d6:	bde5                	j	4ce <vprintf+0x60>
+          s = "(null)";
+ 5d8:	00000997          	auipc	s3,0x0
+ 5dc:	25898993          	addi	s3,s3,600 # 830 <malloc+0xfe>
+        while(*s != 0){
+ 5e0:	85ee                	mv	a1,s11
+ 5e2:	bff9                	j	5c0 <vprintf+0x152>
+        putc(fd, va_arg(ap, uint));
+ 5e4:	008b0913          	addi	s2,s6,8
+ 5e8:	000b4583          	lbu	a1,0(s6)
+ 5ec:	8556                	mv	a0,s5
+ 5ee:	00000097          	auipc	ra,0x0
+ 5f2:	db2080e7          	jalr	-590(ra) # 3a0 <putc>
+ 5f6:	8b4a                	mv	s6,s2
+      state = 0;
+ 5f8:	4981                	li	s3,0
+ 5fa:	bdd1                	j	4ce <vprintf+0x60>
+        putc(fd, c);
+ 5fc:	85d2                	mv	a1,s4
+ 5fe:	8556                	mv	a0,s5
+ 600:	00000097          	auipc	ra,0x0
+ 604:	da0080e7          	jalr	-608(ra) # 3a0 <putc>
+      state = 0;
+ 608:	4981                	li	s3,0
+ 60a:	b5d1                	j	4ce <vprintf+0x60>
+        putc(fd, '%');
+ 60c:	85d2                	mv	a1,s4
+ 60e:	8556                	mv	a0,s5
+ 610:	00000097          	auipc	ra,0x0
+ 614:	d90080e7          	jalr	-624(ra) # 3a0 <putc>
+        putc(fd, c);
+ 618:	85ca                	mv	a1,s2
+ 61a:	8556                	mv	a0,s5
+ 61c:	00000097          	auipc	ra,0x0
+ 620:	d84080e7          	jalr	-636(ra) # 3a0 <putc>
+      state = 0;
+ 624:	4981                	li	s3,0
+ 626:	b565                	j	4ce <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 628:	8b4a                	mv	s6,s2
+      state = 0;
+ 62a:	4981                	li	s3,0
+ 62c:	b54d                	j	4ce <vprintf+0x60>
+    }
+  }
+}
+ 62e:	70e6                	ld	ra,120(sp)
+ 630:	7446                	ld	s0,112(sp)
+ 632:	74a6                	ld	s1,104(sp)
+ 634:	7906                	ld	s2,96(sp)
+ 636:	69e6                	ld	s3,88(sp)
+ 638:	6a46                	ld	s4,80(sp)
+ 63a:	6aa6                	ld	s5,72(sp)
+ 63c:	6b06                	ld	s6,64(sp)
+ 63e:	7be2                	ld	s7,56(sp)
+ 640:	7c42                	ld	s8,48(sp)
+ 642:	7ca2                	ld	s9,40(sp)
+ 644:	7d02                	ld	s10,32(sp)
+ 646:	6de2                	ld	s11,24(sp)
+ 648:	6109                	addi	sp,sp,128
+ 64a:	8082                	ret
+
+000000000000064c <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+ 64c:	715d                	addi	sp,sp,-80
+ 64e:	ec06                	sd	ra,24(sp)
+ 650:	e822                	sd	s0,16(sp)
+ 652:	1000                	addi	s0,sp,32
+ 654:	e010                	sd	a2,0(s0)
+ 656:	e414                	sd	a3,8(s0)
+ 658:	e818                	sd	a4,16(s0)
+ 65a:	ec1c                	sd	a5,24(s0)
+ 65c:	03043023          	sd	a6,32(s0)
+ 660:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 664:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+ 668:	8622                	mv	a2,s0
+ 66a:	00000097          	auipc	ra,0x0
+ 66e:	e04080e7          	jalr	-508(ra) # 46e <vprintf>
+}
+ 672:	60e2                	ld	ra,24(sp)
+ 674:	6442                	ld	s0,16(sp)
+ 676:	6161                	addi	sp,sp,80
+ 678:	8082                	ret
+
+000000000000067a <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+ 67a:	711d                	addi	sp,sp,-96
+ 67c:	ec06                	sd	ra,24(sp)
+ 67e:	e822                	sd	s0,16(sp)
+ 680:	1000                	addi	s0,sp,32
+ 682:	e40c                	sd	a1,8(s0)
+ 684:	e810                	sd	a2,16(s0)
+ 686:	ec14                	sd	a3,24(s0)
+ 688:	f018                	sd	a4,32(s0)
+ 68a:	f41c                	sd	a5,40(s0)
+ 68c:	03043823          	sd	a6,48(s0)
+ 690:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 694:	00840613          	addi	a2,s0,8
+ 698:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+ 69c:	85aa                	mv	a1,a0
+ 69e:	4505                	li	a0,1
+ 6a0:	00000097          	auipc	ra,0x0
+ 6a4:	dce080e7          	jalr	-562(ra) # 46e <vprintf>
+}
+ 6a8:	60e2                	ld	ra,24(sp)
+ 6aa:	6442                	ld	s0,16(sp)
+ 6ac:	6125                	addi	sp,sp,96
+ 6ae:	8082                	ret
+
+00000000000006b0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6b0:	1141                	addi	sp,sp,-16
+ 6b2:	e422                	sd	s0,8(sp)
+ 6b4:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 6b6:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6ba:	00000797          	auipc	a5,0x0
+ 6be:	1ee7b783          	ld	a5,494(a5) # 8a8 <freep>
+ 6c2:	a02d                	j	6ec <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 6c4:	4618                	lw	a4,8(a2)
+ 6c6:	9f2d                	addw	a4,a4,a1
+ 6c8:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6cc:	6398                	ld	a4,0(a5)
+ 6ce:	6310                	ld	a2,0(a4)
+ 6d0:	a83d                	j	70e <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 6d2:	ff852703          	lw	a4,-8(a0)
+ 6d6:	9f31                	addw	a4,a4,a2
+ 6d8:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+ 6da:	ff053683          	ld	a3,-16(a0)
+ 6de:	a091                	j	722 <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6e0:	6398                	ld	a4,0(a5)
+ 6e2:	00e7e463          	bltu	a5,a4,6ea <free+0x3a>
+ 6e6:	00e6ea63          	bltu	a3,a4,6fa <free+0x4a>
+{
+ 6ea:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6ec:	fed7fae3          	bgeu	a5,a3,6e0 <free+0x30>
+ 6f0:	6398                	ld	a4,0(a5)
+ 6f2:	00e6e463          	bltu	a3,a4,6fa <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6f6:	fee7eae3          	bltu	a5,a4,6ea <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+ 6fa:	ff852583          	lw	a1,-8(a0)
+ 6fe:	6390                	ld	a2,0(a5)
+ 700:	02059813          	slli	a6,a1,0x20
+ 704:	01c85713          	srli	a4,a6,0x1c
+ 708:	9736                	add	a4,a4,a3
+ 70a:	fae60de3          	beq	a2,a4,6c4 <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 70e:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+ 712:	4790                	lw	a2,8(a5)
+ 714:	02061593          	slli	a1,a2,0x20
+ 718:	01c5d713          	srli	a4,a1,0x1c
+ 71c:	973e                	add	a4,a4,a5
+ 71e:	fae68ae3          	beq	a3,a4,6d2 <free+0x22>
+    p->s.ptr = bp->s.ptr;
+ 722:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 724:	00000717          	auipc	a4,0x0
+ 728:	18f73223          	sd	a5,388(a4) # 8a8 <freep>
+}
+ 72c:	6422                	ld	s0,8(sp)
+ 72e:	0141                	addi	sp,sp,16
+ 730:	8082                	ret
+
+0000000000000732 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 732:	7139                	addi	sp,sp,-64
+ 734:	fc06                	sd	ra,56(sp)
+ 736:	f822                	sd	s0,48(sp)
+ 738:	f426                	sd	s1,40(sp)
+ 73a:	f04a                	sd	s2,32(sp)
+ 73c:	ec4e                	sd	s3,24(sp)
+ 73e:	e852                	sd	s4,16(sp)
+ 740:	e456                	sd	s5,8(sp)
+ 742:	e05a                	sd	s6,0(sp)
+ 744:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 746:	02051493          	slli	s1,a0,0x20
+ 74a:	9081                	srli	s1,s1,0x20
+ 74c:	04bd                	addi	s1,s1,15
+ 74e:	8091                	srli	s1,s1,0x4
+ 750:	0014899b          	addiw	s3,s1,1
+ 754:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+ 756:	00000517          	auipc	a0,0x0
+ 75a:	15253503          	ld	a0,338(a0) # 8a8 <freep>
+ 75e:	c515                	beqz	a0,78a <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 760:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 762:	4798                	lw	a4,8(a5)
+ 764:	02977f63          	bgeu	a4,s1,7a2 <malloc+0x70>
+ 768:	8a4e                	mv	s4,s3
+ 76a:	0009871b          	sext.w	a4,s3
+ 76e:	6685                	lui	a3,0x1
+ 770:	00d77363          	bgeu	a4,a3,776 <malloc+0x44>
+ 774:	6a05                	lui	s4,0x1
+ 776:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+ 77a:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 77e:	00000917          	auipc	s2,0x0
+ 782:	12a90913          	addi	s2,s2,298 # 8a8 <freep>
+  if(p == (char*)-1)
+ 786:	5afd                	li	s5,-1
+ 788:	a895                	j	7fc <malloc+0xca>
+    base.s.ptr = freep = prevp = &base;
+ 78a:	00000797          	auipc	a5,0x0
+ 78e:	12678793          	addi	a5,a5,294 # 8b0 <base>
+ 792:	00000717          	auipc	a4,0x0
+ 796:	10f73b23          	sd	a5,278(a4) # 8a8 <freep>
+ 79a:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+ 79c:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+ 7a0:	b7e1                	j	768 <malloc+0x36>
+      if(p->s.size == nunits)
+ 7a2:	02e48c63          	beq	s1,a4,7da <malloc+0xa8>
+        p->s.size -= nunits;
+ 7a6:	4137073b          	subw	a4,a4,s3
+ 7aa:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+ 7ac:	02071693          	slli	a3,a4,0x20
+ 7b0:	01c6d713          	srli	a4,a3,0x1c
+ 7b4:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+ 7b6:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+ 7ba:	00000717          	auipc	a4,0x0
+ 7be:	0ea73723          	sd	a0,238(a4) # 8a8 <freep>
+      return (void*)(p + 1);
+ 7c2:	01078513          	addi	a0,a5,16
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ 7c6:	70e2                	ld	ra,56(sp)
+ 7c8:	7442                	ld	s0,48(sp)
+ 7ca:	74a2                	ld	s1,40(sp)
+ 7cc:	7902                	ld	s2,32(sp)
+ 7ce:	69e2                	ld	s3,24(sp)
+ 7d0:	6a42                	ld	s4,16(sp)
+ 7d2:	6aa2                	ld	s5,8(sp)
+ 7d4:	6b02                	ld	s6,0(sp)
+ 7d6:	6121                	addi	sp,sp,64
+ 7d8:	8082                	ret
+        prevp->s.ptr = p->s.ptr;
+ 7da:	6398                	ld	a4,0(a5)
+ 7dc:	e118                	sd	a4,0(a0)
+ 7de:	bff1                	j	7ba <malloc+0x88>
+  hp->s.size = nu;
+ 7e0:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+ 7e4:	0541                	addi	a0,a0,16
+ 7e6:	00000097          	auipc	ra,0x0
+ 7ea:	eca080e7          	jalr	-310(ra) # 6b0 <free>
+  return freep;
+ 7ee:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+ 7f2:	d971                	beqz	a0,7c6 <malloc+0x94>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7f4:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 7f6:	4798                	lw	a4,8(a5)
+ 7f8:	fa9775e3          	bgeu	a4,s1,7a2 <malloc+0x70>
+    if(p == freep)
+ 7fc:	00093703          	ld	a4,0(s2)
+ 800:	853e                	mv	a0,a5
+ 802:	fef719e3          	bne	a4,a5,7f4 <malloc+0xc2>
+  p = sbrk(nu * sizeof(Header));
+ 806:	8552                	mv	a0,s4
+ 808:	00000097          	auipc	ra,0x0
+ 80c:	b50080e7          	jalr	-1200(ra) # 358 <sbrk>
+  if(p == (char*)-1)
+ 810:	fd5518e3          	bne	a0,s5,7e0 <malloc+0xae>
+        return 0;
+ 814:	4501                	li	a0,0
+ 816:	bf45                	j	7c6 <malloc+0x94>
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/kill.d os-workshop/user/kill.d
--- xv6-riscv/user/kill.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/kill.d	2022-05-28 22:34:33.000000000 -0300
@@ -0,0 +1 @@
+user/kill.o: user/kill.c kernel/types.h kernel/stat.h user/user.h
Binary files xv6-riscv/user/kill.o and os-workshop/user/kill.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/kill.sym os-workshop/user/kill.sym
--- xv6-riscv/user/kill.sym	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/kill.sym	2022-05-28 22:34:33.000000000 -0300
@@ -0,0 +1,76 @@
+0000000000000000 .text
+0000000000000818 .rodata
+00000000000008a8 .sbss
+00000000000008b0 .bss
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_aranges
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_line
+0000000000000000 .debug_frame
+0000000000000000 .debug_str
+0000000000000000 .debug_line_str
+0000000000000000 .debug_loclists
+0000000000000000 .debug_rnglists
+0000000000000000 kill.c
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+00000000000003a0 putc
+00000000000003c2 printint
+0000000000000890 digits
+0000000000000000 umalloc.c
+00000000000008a8 freep
+00000000000008b0 base
+0000000000000064 strcpy
+000000000000067a printf
+00000000000010a1 __global_pointer$
+000000000000021e memmove
+0000000000000318 mknod
+0000000000000380 semdown
+000000000000011c gets
+00000000000008a1 __SDATA_BEGIN__
+0000000000000378 semget
+0000000000000350 getpid
+00000000000002b0 memcpy
+0000000000000732 malloc
+0000000000000390 semclose
+0000000000000360 sleep
+00000000000002e0 pipe
+00000000000002f0 write
+0000000000000328 fstat
+000000000000064c fprintf
+0000000000000300 kill
+000000000000046e vprintf
+0000000000000340 chdir
+0000000000000308 exec
+00000000000002d8 wait
+00000000000002e8 read
+0000000000000320 unlink
+0000000000000276 memcmp
+00000000000002c8 fork
+00000000000008c0 __BSS_END__
+0000000000000358 sbrk
+0000000000000368 uptime
+00000000000008a1 __bss_start
+00000000000000d6 memset
+0000000000000000 main
+0000000000000398 timeout
+0000000000000080 strcmp
+0000000000000348 dup
+00000000000008a1 __DATA_BEGIN__
+0000000000000190 stat
+00000000000008a1 _edata
+0000000000000370 setp
+00000000000008c0 _end
+0000000000000330 link
+00000000000002d0 exit
+00000000000001d6 atoi
+00000000000000ac strlen
+0000000000000310 open
+0000000000000388 semup
+00000000000000f8 strchr
+0000000000000338 mkdir
+00000000000002f8 close
+00000000000006b0 free
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/ln.asm os-workshop/user/ln.asm
--- xv6-riscv/user/ln.asm	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/ln.asm	2022-05-28 22:34:33.000000000 -0300
@@ -0,0 +1,1374 @@
+
+user/_ln:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <main>:
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	1101                	addi	sp,sp,-32
+   2:	ec06                	sd	ra,24(sp)
+   4:	e822                	sd	s0,16(sp)
+   6:	e426                	sd	s1,8(sp)
+   8:	1000                	addi	s0,sp,32
+  if(argc != 3){
+   a:	478d                	li	a5,3
+   c:	02f50063          	beq	a0,a5,2c <main+0x2c>
+    fprintf(2, "Usage: ln old new\n");
+  10:	00001597          	auipc	a1,0x1
+  14:	80858593          	addi	a1,a1,-2040 # 818 <malloc+0xea>
+  18:	4509                	li	a0,2
+  1a:	00000097          	auipc	ra,0x0
+  1e:	62e080e7          	jalr	1582(ra) # 648 <fprintf>
+    exit(1);
+  22:	4505                	li	a0,1
+  24:	00000097          	auipc	ra,0x0
+  28:	2a8080e7          	jalr	680(ra) # 2cc <exit>
+  2c:	84ae                	mv	s1,a1
+  }
+  if(link(argv[1], argv[2]) < 0)
+  2e:	698c                	ld	a1,16(a1)
+  30:	6488                	ld	a0,8(s1)
+  32:	00000097          	auipc	ra,0x0
+  36:	2fa080e7          	jalr	762(ra) # 32c <link>
+  3a:	00054763          	bltz	a0,48 <main+0x48>
+    fprintf(2, "link %s %s: failed\n", argv[1], argv[2]);
+  exit(0);
+  3e:	4501                	li	a0,0
+  40:	00000097          	auipc	ra,0x0
+  44:	28c080e7          	jalr	652(ra) # 2cc <exit>
+    fprintf(2, "link %s %s: failed\n", argv[1], argv[2]);
+  48:	6894                	ld	a3,16(s1)
+  4a:	6490                	ld	a2,8(s1)
+  4c:	00000597          	auipc	a1,0x0
+  50:	7e458593          	addi	a1,a1,2020 # 830 <malloc+0x102>
+  54:	4509                	li	a0,2
+  56:	00000097          	auipc	ra,0x0
+  5a:	5f2080e7          	jalr	1522(ra) # 648 <fprintf>
+  5e:	b7c5                	j	3e <main+0x3e>
+
+0000000000000060 <strcpy>:
+#include "kernel/fcntl.h"
+#include "user/user.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  60:	1141                	addi	sp,sp,-16
+  62:	e422                	sd	s0,8(sp)
+  64:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  66:	87aa                	mv	a5,a0
+  68:	0585                	addi	a1,a1,1
+  6a:	0785                	addi	a5,a5,1
+  6c:	fff5c703          	lbu	a4,-1(a1)
+  70:	fee78fa3          	sb	a4,-1(a5)
+  74:	fb75                	bnez	a4,68 <strcpy+0x8>
+    ;
+  return os;
+}
+  76:	6422                	ld	s0,8(sp)
+  78:	0141                	addi	sp,sp,16
+  7a:	8082                	ret
+
+000000000000007c <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  7c:	1141                	addi	sp,sp,-16
+  7e:	e422                	sd	s0,8(sp)
+  80:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+  82:	00054783          	lbu	a5,0(a0)
+  86:	cb91                	beqz	a5,9a <strcmp+0x1e>
+  88:	0005c703          	lbu	a4,0(a1)
+  8c:	00f71763          	bne	a4,a5,9a <strcmp+0x1e>
+    p++, q++;
+  90:	0505                	addi	a0,a0,1
+  92:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+  94:	00054783          	lbu	a5,0(a0)
+  98:	fbe5                	bnez	a5,88 <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+  9a:	0005c503          	lbu	a0,0(a1)
+}
+  9e:	40a7853b          	subw	a0,a5,a0
+  a2:	6422                	ld	s0,8(sp)
+  a4:	0141                	addi	sp,sp,16
+  a6:	8082                	ret
+
+00000000000000a8 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  a8:	1141                	addi	sp,sp,-16
+  aa:	e422                	sd	s0,8(sp)
+  ac:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+  ae:	00054783          	lbu	a5,0(a0)
+  b2:	cf91                	beqz	a5,ce <strlen+0x26>
+  b4:	0505                	addi	a0,a0,1
+  b6:	87aa                	mv	a5,a0
+  b8:	4685                	li	a3,1
+  ba:	9e89                	subw	a3,a3,a0
+  bc:	00f6853b          	addw	a0,a3,a5
+  c0:	0785                	addi	a5,a5,1
+  c2:	fff7c703          	lbu	a4,-1(a5)
+  c6:	fb7d                	bnez	a4,bc <strlen+0x14>
+    ;
+  return n;
+}
+  c8:	6422                	ld	s0,8(sp)
+  ca:	0141                	addi	sp,sp,16
+  cc:	8082                	ret
+  for(n = 0; s[n]; n++)
+  ce:	4501                	li	a0,0
+  d0:	bfe5                	j	c8 <strlen+0x20>
+
+00000000000000d2 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  d2:	1141                	addi	sp,sp,-16
+  d4:	e422                	sd	s0,8(sp)
+  d6:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+  d8:	ca19                	beqz	a2,ee <memset+0x1c>
+  da:	87aa                	mv	a5,a0
+  dc:	1602                	slli	a2,a2,0x20
+  de:	9201                	srli	a2,a2,0x20
+  e0:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+  e4:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+  e8:	0785                	addi	a5,a5,1
+  ea:	fee79de3          	bne	a5,a4,e4 <memset+0x12>
+  }
+  return dst;
+}
+  ee:	6422                	ld	s0,8(sp)
+  f0:	0141                	addi	sp,sp,16
+  f2:	8082                	ret
+
+00000000000000f4 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+  f4:	1141                	addi	sp,sp,-16
+  f6:	e422                	sd	s0,8(sp)
+  f8:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+  fa:	00054783          	lbu	a5,0(a0)
+  fe:	cb99                	beqz	a5,114 <strchr+0x20>
+    if(*s == c)
+ 100:	00f58763          	beq	a1,a5,10e <strchr+0x1a>
+  for(; *s; s++)
+ 104:	0505                	addi	a0,a0,1
+ 106:	00054783          	lbu	a5,0(a0)
+ 10a:	fbfd                	bnez	a5,100 <strchr+0xc>
+      return (char*)s;
+  return 0;
+ 10c:	4501                	li	a0,0
+}
+ 10e:	6422                	ld	s0,8(sp)
+ 110:	0141                	addi	sp,sp,16
+ 112:	8082                	ret
+  return 0;
+ 114:	4501                	li	a0,0
+ 116:	bfe5                	j	10e <strchr+0x1a>
+
+0000000000000118 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 118:	711d                	addi	sp,sp,-96
+ 11a:	ec86                	sd	ra,88(sp)
+ 11c:	e8a2                	sd	s0,80(sp)
+ 11e:	e4a6                	sd	s1,72(sp)
+ 120:	e0ca                	sd	s2,64(sp)
+ 122:	fc4e                	sd	s3,56(sp)
+ 124:	f852                	sd	s4,48(sp)
+ 126:	f456                	sd	s5,40(sp)
+ 128:	f05a                	sd	s6,32(sp)
+ 12a:	ec5e                	sd	s7,24(sp)
+ 12c:	1080                	addi	s0,sp,96
+ 12e:	8baa                	mv	s7,a0
+ 130:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 132:	892a                	mv	s2,a0
+ 134:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+ 136:	4aa9                	li	s5,10
+ 138:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+ 13a:	89a6                	mv	s3,s1
+ 13c:	2485                	addiw	s1,s1,1
+ 13e:	0344d863          	bge	s1,s4,16e <gets+0x56>
+    cc = read(0, &c, 1);
+ 142:	4605                	li	a2,1
+ 144:	faf40593          	addi	a1,s0,-81
+ 148:	4501                	li	a0,0
+ 14a:	00000097          	auipc	ra,0x0
+ 14e:	19a080e7          	jalr	410(ra) # 2e4 <read>
+    if(cc < 1)
+ 152:	00a05e63          	blez	a0,16e <gets+0x56>
+    buf[i++] = c;
+ 156:	faf44783          	lbu	a5,-81(s0)
+ 15a:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+ 15e:	01578763          	beq	a5,s5,16c <gets+0x54>
+ 162:	0905                	addi	s2,s2,1
+ 164:	fd679be3          	bne	a5,s6,13a <gets+0x22>
+  for(i=0; i+1 < max; ){
+ 168:	89a6                	mv	s3,s1
+ 16a:	a011                	j	16e <gets+0x56>
+ 16c:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+ 16e:	99de                	add	s3,s3,s7
+ 170:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+ 174:	855e                	mv	a0,s7
+ 176:	60e6                	ld	ra,88(sp)
+ 178:	6446                	ld	s0,80(sp)
+ 17a:	64a6                	ld	s1,72(sp)
+ 17c:	6906                	ld	s2,64(sp)
+ 17e:	79e2                	ld	s3,56(sp)
+ 180:	7a42                	ld	s4,48(sp)
+ 182:	7aa2                	ld	s5,40(sp)
+ 184:	7b02                	ld	s6,32(sp)
+ 186:	6be2                	ld	s7,24(sp)
+ 188:	6125                	addi	sp,sp,96
+ 18a:	8082                	ret
+
+000000000000018c <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 18c:	1101                	addi	sp,sp,-32
+ 18e:	ec06                	sd	ra,24(sp)
+ 190:	e822                	sd	s0,16(sp)
+ 192:	e426                	sd	s1,8(sp)
+ 194:	e04a                	sd	s2,0(sp)
+ 196:	1000                	addi	s0,sp,32
+ 198:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 19a:	4581                	li	a1,0
+ 19c:	00000097          	auipc	ra,0x0
+ 1a0:	170080e7          	jalr	368(ra) # 30c <open>
+  if(fd < 0)
+ 1a4:	02054563          	bltz	a0,1ce <stat+0x42>
+ 1a8:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+ 1aa:	85ca                	mv	a1,s2
+ 1ac:	00000097          	auipc	ra,0x0
+ 1b0:	178080e7          	jalr	376(ra) # 324 <fstat>
+ 1b4:	892a                	mv	s2,a0
+  close(fd);
+ 1b6:	8526                	mv	a0,s1
+ 1b8:	00000097          	auipc	ra,0x0
+ 1bc:	13c080e7          	jalr	316(ra) # 2f4 <close>
+  return r;
+}
+ 1c0:	854a                	mv	a0,s2
+ 1c2:	60e2                	ld	ra,24(sp)
+ 1c4:	6442                	ld	s0,16(sp)
+ 1c6:	64a2                	ld	s1,8(sp)
+ 1c8:	6902                	ld	s2,0(sp)
+ 1ca:	6105                	addi	sp,sp,32
+ 1cc:	8082                	ret
+    return -1;
+ 1ce:	597d                	li	s2,-1
+ 1d0:	bfc5                	j	1c0 <stat+0x34>
+
+00000000000001d2 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 1d2:	1141                	addi	sp,sp,-16
+ 1d4:	e422                	sd	s0,8(sp)
+ 1d6:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 1d8:	00054683          	lbu	a3,0(a0)
+ 1dc:	fd06879b          	addiw	a5,a3,-48
+ 1e0:	0ff7f793          	zext.b	a5,a5
+ 1e4:	4625                	li	a2,9
+ 1e6:	02f66863          	bltu	a2,a5,216 <atoi+0x44>
+ 1ea:	872a                	mv	a4,a0
+  n = 0;
+ 1ec:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+ 1ee:	0705                	addi	a4,a4,1
+ 1f0:	0025179b          	slliw	a5,a0,0x2
+ 1f4:	9fa9                	addw	a5,a5,a0
+ 1f6:	0017979b          	slliw	a5,a5,0x1
+ 1fa:	9fb5                	addw	a5,a5,a3
+ 1fc:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+ 200:	00074683          	lbu	a3,0(a4)
+ 204:	fd06879b          	addiw	a5,a3,-48
+ 208:	0ff7f793          	zext.b	a5,a5
+ 20c:	fef671e3          	bgeu	a2,a5,1ee <atoi+0x1c>
+  return n;
+}
+ 210:	6422                	ld	s0,8(sp)
+ 212:	0141                	addi	sp,sp,16
+ 214:	8082                	ret
+  n = 0;
+ 216:	4501                	li	a0,0
+ 218:	bfe5                	j	210 <atoi+0x3e>
+
+000000000000021a <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 21a:	1141                	addi	sp,sp,-16
+ 21c:	e422                	sd	s0,8(sp)
+ 21e:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+ 220:	02b57463          	bgeu	a0,a1,248 <memmove+0x2e>
+    while(n-- > 0)
+ 224:	00c05f63          	blez	a2,242 <memmove+0x28>
+ 228:	1602                	slli	a2,a2,0x20
+ 22a:	9201                	srli	a2,a2,0x20
+ 22c:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+ 230:	872a                	mv	a4,a0
+      *dst++ = *src++;
+ 232:	0585                	addi	a1,a1,1
+ 234:	0705                	addi	a4,a4,1
+ 236:	fff5c683          	lbu	a3,-1(a1)
+ 23a:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+ 23e:	fee79ae3          	bne	a5,a4,232 <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+ 242:	6422                	ld	s0,8(sp)
+ 244:	0141                	addi	sp,sp,16
+ 246:	8082                	ret
+    dst += n;
+ 248:	00c50733          	add	a4,a0,a2
+    src += n;
+ 24c:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+ 24e:	fec05ae3          	blez	a2,242 <memmove+0x28>
+ 252:	fff6079b          	addiw	a5,a2,-1
+ 256:	1782                	slli	a5,a5,0x20
+ 258:	9381                	srli	a5,a5,0x20
+ 25a:	fff7c793          	not	a5,a5
+ 25e:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+ 260:	15fd                	addi	a1,a1,-1
+ 262:	177d                	addi	a4,a4,-1
+ 264:	0005c683          	lbu	a3,0(a1)
+ 268:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+ 26c:	fee79ae3          	bne	a5,a4,260 <memmove+0x46>
+ 270:	bfc9                	j	242 <memmove+0x28>
+
+0000000000000272 <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+ 272:	1141                	addi	sp,sp,-16
+ 274:	e422                	sd	s0,8(sp)
+ 276:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+ 278:	ca05                	beqz	a2,2a8 <memcmp+0x36>
+ 27a:	fff6069b          	addiw	a3,a2,-1
+ 27e:	1682                	slli	a3,a3,0x20
+ 280:	9281                	srli	a3,a3,0x20
+ 282:	0685                	addi	a3,a3,1
+ 284:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+ 286:	00054783          	lbu	a5,0(a0)
+ 28a:	0005c703          	lbu	a4,0(a1)
+ 28e:	00e79863          	bne	a5,a4,29e <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+ 292:	0505                	addi	a0,a0,1
+    p2++;
+ 294:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+ 296:	fed518e3          	bne	a0,a3,286 <memcmp+0x14>
+  }
+  return 0;
+ 29a:	4501                	li	a0,0
+ 29c:	a019                	j	2a2 <memcmp+0x30>
+      return *p1 - *p2;
+ 29e:	40e7853b          	subw	a0,a5,a4
+}
+ 2a2:	6422                	ld	s0,8(sp)
+ 2a4:	0141                	addi	sp,sp,16
+ 2a6:	8082                	ret
+  return 0;
+ 2a8:	4501                	li	a0,0
+ 2aa:	bfe5                	j	2a2 <memcmp+0x30>
+
+00000000000002ac <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+ 2ac:	1141                	addi	sp,sp,-16
+ 2ae:	e406                	sd	ra,8(sp)
+ 2b0:	e022                	sd	s0,0(sp)
+ 2b2:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+ 2b4:	00000097          	auipc	ra,0x0
+ 2b8:	f66080e7          	jalr	-154(ra) # 21a <memmove>
+}
+ 2bc:	60a2                	ld	ra,8(sp)
+ 2be:	6402                	ld	s0,0(sp)
+ 2c0:	0141                	addi	sp,sp,16
+ 2c2:	8082                	ret
+
+00000000000002c4 <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ 2c4:	4885                	li	a7,1
+ ecall
+ 2c6:	00000073          	ecall
+ ret
+ 2ca:	8082                	ret
+
+00000000000002cc <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+ 2cc:	4889                	li	a7,2
+ ecall
+ 2ce:	00000073          	ecall
+ ret
+ 2d2:	8082                	ret
+
+00000000000002d4 <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+ 2d4:	488d                	li	a7,3
+ ecall
+ 2d6:	00000073          	ecall
+ ret
+ 2da:	8082                	ret
+
+00000000000002dc <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ 2dc:	4891                	li	a7,4
+ ecall
+ 2de:	00000073          	ecall
+ ret
+ 2e2:	8082                	ret
+
+00000000000002e4 <read>:
+.global read
+read:
+ li a7, SYS_read
+ 2e4:	4895                	li	a7,5
+ ecall
+ 2e6:	00000073          	ecall
+ ret
+ 2ea:	8082                	ret
+
+00000000000002ec <write>:
+.global write
+write:
+ li a7, SYS_write
+ 2ec:	48c1                	li	a7,16
+ ecall
+ 2ee:	00000073          	ecall
+ ret
+ 2f2:	8082                	ret
+
+00000000000002f4 <close>:
+.global close
+close:
+ li a7, SYS_close
+ 2f4:	48d5                	li	a7,21
+ ecall
+ 2f6:	00000073          	ecall
+ ret
+ 2fa:	8082                	ret
+
+00000000000002fc <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+ 2fc:	4899                	li	a7,6
+ ecall
+ 2fe:	00000073          	ecall
+ ret
+ 302:	8082                	ret
+
+0000000000000304 <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+ 304:	489d                	li	a7,7
+ ecall
+ 306:	00000073          	ecall
+ ret
+ 30a:	8082                	ret
+
+000000000000030c <open>:
+.global open
+open:
+ li a7, SYS_open
+ 30c:	48bd                	li	a7,15
+ ecall
+ 30e:	00000073          	ecall
+ ret
+ 312:	8082                	ret
+
+0000000000000314 <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ 314:	48c5                	li	a7,17
+ ecall
+ 316:	00000073          	ecall
+ ret
+ 31a:	8082                	ret
+
+000000000000031c <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ 31c:	48c9                	li	a7,18
+ ecall
+ 31e:	00000073          	ecall
+ ret
+ 322:	8082                	ret
+
+0000000000000324 <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ 324:	48a1                	li	a7,8
+ ecall
+ 326:	00000073          	ecall
+ ret
+ 32a:	8082                	ret
+
+000000000000032c <link>:
+.global link
+link:
+ li a7, SYS_link
+ 32c:	48cd                	li	a7,19
+ ecall
+ 32e:	00000073          	ecall
+ ret
+ 332:	8082                	ret
+
+0000000000000334 <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ 334:	48d1                	li	a7,20
+ ecall
+ 336:	00000073          	ecall
+ ret
+ 33a:	8082                	ret
+
+000000000000033c <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ 33c:	48a5                	li	a7,9
+ ecall
+ 33e:	00000073          	ecall
+ ret
+ 342:	8082                	ret
+
+0000000000000344 <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+ 344:	48a9                	li	a7,10
+ ecall
+ 346:	00000073          	ecall
+ ret
+ 34a:	8082                	ret
+
+000000000000034c <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ 34c:	48ad                	li	a7,11
+ ecall
+ 34e:	00000073          	ecall
+ ret
+ 352:	8082                	ret
+
+0000000000000354 <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ 354:	48b1                	li	a7,12
+ ecall
+ 356:	00000073          	ecall
+ ret
+ 35a:	8082                	ret
+
+000000000000035c <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ 35c:	48b5                	li	a7,13
+ ecall
+ 35e:	00000073          	ecall
+ ret
+ 362:	8082                	ret
+
+0000000000000364 <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ 364:	48b9                	li	a7,14
+ ecall
+ 366:	00000073          	ecall
+ ret
+ 36a:	8082                	ret
+
+000000000000036c <setp>:
+.global setp
+setp:
+ li a7, SYS_setp
+ 36c:	48d9                	li	a7,22
+ ecall
+ 36e:	00000073          	ecall
+ ret
+ 372:	8082                	ret
+
+0000000000000374 <semget>:
+.global semget
+semget:
+ li a7, SYS_semget
+ 374:	48dd                	li	a7,23
+ ecall
+ 376:	00000073          	ecall
+ ret
+ 37a:	8082                	ret
+
+000000000000037c <semdown>:
+.global semdown
+semdown:
+ li a7, SYS_semdown
+ 37c:	48e1                	li	a7,24
+ ecall
+ 37e:	00000073          	ecall
+ ret
+ 382:	8082                	ret
+
+0000000000000384 <semup>:
+.global semup
+semup:
+ li a7, SYS_semup
+ 384:	48e5                	li	a7,25
+ ecall
+ 386:	00000073          	ecall
+ ret
+ 38a:	8082                	ret
+
+000000000000038c <semclose>:
+.global semclose
+semclose:
+ li a7, SYS_semclose
+ 38c:	48e9                	li	a7,26
+ ecall
+ 38e:	00000073          	ecall
+ ret
+ 392:	8082                	ret
+
+0000000000000394 <timeout>:
+.global timeout
+timeout:
+ li a7, SYS_timeout
+ 394:	48ed                	li	a7,27
+ ecall
+ 396:	00000073          	ecall
+ ret
+ 39a:	8082                	ret
+
+000000000000039c <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+ 39c:	1101                	addi	sp,sp,-32
+ 39e:	ec06                	sd	ra,24(sp)
+ 3a0:	e822                	sd	s0,16(sp)
+ 3a2:	1000                	addi	s0,sp,32
+ 3a4:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+ 3a8:	4605                	li	a2,1
+ 3aa:	fef40593          	addi	a1,s0,-17
+ 3ae:	00000097          	auipc	ra,0x0
+ 3b2:	f3e080e7          	jalr	-194(ra) # 2ec <write>
+}
+ 3b6:	60e2                	ld	ra,24(sp)
+ 3b8:	6442                	ld	s0,16(sp)
+ 3ba:	6105                	addi	sp,sp,32
+ 3bc:	8082                	ret
+
+00000000000003be <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3be:	7139                	addi	sp,sp,-64
+ 3c0:	fc06                	sd	ra,56(sp)
+ 3c2:	f822                	sd	s0,48(sp)
+ 3c4:	f426                	sd	s1,40(sp)
+ 3c6:	f04a                	sd	s2,32(sp)
+ 3c8:	ec4e                	sd	s3,24(sp)
+ 3ca:	0080                	addi	s0,sp,64
+ 3cc:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 3ce:	c299                	beqz	a3,3d4 <printint+0x16>
+ 3d0:	0805c963          	bltz	a1,462 <printint+0xa4>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 3d4:	2581                	sext.w	a1,a1
+  neg = 0;
+ 3d6:	4881                	li	a7,0
+ 3d8:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+ 3dc:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+ 3de:	2601                	sext.w	a2,a2
+ 3e0:	00000517          	auipc	a0,0x0
+ 3e4:	4c850513          	addi	a0,a0,1224 # 8a8 <digits>
+ 3e8:	883a                	mv	a6,a4
+ 3ea:	2705                	addiw	a4,a4,1
+ 3ec:	02c5f7bb          	remuw	a5,a1,a2
+ 3f0:	1782                	slli	a5,a5,0x20
+ 3f2:	9381                	srli	a5,a5,0x20
+ 3f4:	97aa                	add	a5,a5,a0
+ 3f6:	0007c783          	lbu	a5,0(a5)
+ 3fa:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+ 3fe:	0005879b          	sext.w	a5,a1
+ 402:	02c5d5bb          	divuw	a1,a1,a2
+ 406:	0685                	addi	a3,a3,1
+ 408:	fec7f0e3          	bgeu	a5,a2,3e8 <printint+0x2a>
+  if(neg)
+ 40c:	00088c63          	beqz	a7,424 <printint+0x66>
+    buf[i++] = '-';
+ 410:	fd070793          	addi	a5,a4,-48
+ 414:	00878733          	add	a4,a5,s0
+ 418:	02d00793          	li	a5,45
+ 41c:	fef70823          	sb	a5,-16(a4)
+ 420:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+ 424:	02e05863          	blez	a4,454 <printint+0x96>
+ 428:	fc040793          	addi	a5,s0,-64
+ 42c:	00e78933          	add	s2,a5,a4
+ 430:	fff78993          	addi	s3,a5,-1
+ 434:	99ba                	add	s3,s3,a4
+ 436:	377d                	addiw	a4,a4,-1
+ 438:	1702                	slli	a4,a4,0x20
+ 43a:	9301                	srli	a4,a4,0x20
+ 43c:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+ 440:	fff94583          	lbu	a1,-1(s2)
+ 444:	8526                	mv	a0,s1
+ 446:	00000097          	auipc	ra,0x0
+ 44a:	f56080e7          	jalr	-170(ra) # 39c <putc>
+  while(--i >= 0)
+ 44e:	197d                	addi	s2,s2,-1
+ 450:	ff3918e3          	bne	s2,s3,440 <printint+0x82>
+}
+ 454:	70e2                	ld	ra,56(sp)
+ 456:	7442                	ld	s0,48(sp)
+ 458:	74a2                	ld	s1,40(sp)
+ 45a:	7902                	ld	s2,32(sp)
+ 45c:	69e2                	ld	s3,24(sp)
+ 45e:	6121                	addi	sp,sp,64
+ 460:	8082                	ret
+    x = -xx;
+ 462:	40b005bb          	negw	a1,a1
+    neg = 1;
+ 466:	4885                	li	a7,1
+    x = -xx;
+ 468:	bf85                	j	3d8 <printint+0x1a>
+
+000000000000046a <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+ 46a:	7119                	addi	sp,sp,-128
+ 46c:	fc86                	sd	ra,120(sp)
+ 46e:	f8a2                	sd	s0,112(sp)
+ 470:	f4a6                	sd	s1,104(sp)
+ 472:	f0ca                	sd	s2,96(sp)
+ 474:	ecce                	sd	s3,88(sp)
+ 476:	e8d2                	sd	s4,80(sp)
+ 478:	e4d6                	sd	s5,72(sp)
+ 47a:	e0da                	sd	s6,64(sp)
+ 47c:	fc5e                	sd	s7,56(sp)
+ 47e:	f862                	sd	s8,48(sp)
+ 480:	f466                	sd	s9,40(sp)
+ 482:	f06a                	sd	s10,32(sp)
+ 484:	ec6e                	sd	s11,24(sp)
+ 486:	0100                	addi	s0,sp,128
+  char *s;
+  int c, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+ 488:	0005c903          	lbu	s2,0(a1)
+ 48c:	18090f63          	beqz	s2,62a <vprintf+0x1c0>
+ 490:	8aaa                	mv	s5,a0
+ 492:	8b32                	mv	s6,a2
+ 494:	00158493          	addi	s1,a1,1
+  state = 0;
+ 498:	4981                	li	s3,0
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 49a:	02500a13          	li	s4,37
+ 49e:	4c55                	li	s8,21
+ 4a0:	00000c97          	auipc	s9,0x0
+ 4a4:	3b0c8c93          	addi	s9,s9,944 # 850 <malloc+0x122>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c == 's'){
+        s = va_arg(ap, char*);
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 4a8:	02800d93          	li	s11,40
+  putc(fd, 'x');
+ 4ac:	4d41                	li	s10,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 4ae:	00000b97          	auipc	s7,0x0
+ 4b2:	3fab8b93          	addi	s7,s7,1018 # 8a8 <digits>
+ 4b6:	a839                	j	4d4 <vprintf+0x6a>
+        putc(fd, c);
+ 4b8:	85ca                	mv	a1,s2
+ 4ba:	8556                	mv	a0,s5
+ 4bc:	00000097          	auipc	ra,0x0
+ 4c0:	ee0080e7          	jalr	-288(ra) # 39c <putc>
+ 4c4:	a019                	j	4ca <vprintf+0x60>
+    } else if(state == '%'){
+ 4c6:	01498d63          	beq	s3,s4,4e0 <vprintf+0x76>
+  for(i = 0; fmt[i]; i++){
+ 4ca:	0485                	addi	s1,s1,1
+ 4cc:	fff4c903          	lbu	s2,-1(s1)
+ 4d0:	14090d63          	beqz	s2,62a <vprintf+0x1c0>
+    if(state == 0){
+ 4d4:	fe0999e3          	bnez	s3,4c6 <vprintf+0x5c>
+      if(c == '%'){
+ 4d8:	ff4910e3          	bne	s2,s4,4b8 <vprintf+0x4e>
+        state = '%';
+ 4dc:	89d2                	mv	s3,s4
+ 4de:	b7f5                	j	4ca <vprintf+0x60>
+      if(c == 'd'){
+ 4e0:	11490c63          	beq	s2,s4,5f8 <vprintf+0x18e>
+ 4e4:	f9d9079b          	addiw	a5,s2,-99
+ 4e8:	0ff7f793          	zext.b	a5,a5
+ 4ec:	10fc6e63          	bltu	s8,a5,608 <vprintf+0x19e>
+ 4f0:	f9d9079b          	addiw	a5,s2,-99
+ 4f4:	0ff7f713          	zext.b	a4,a5
+ 4f8:	10ec6863          	bltu	s8,a4,608 <vprintf+0x19e>
+ 4fc:	00271793          	slli	a5,a4,0x2
+ 500:	97e6                	add	a5,a5,s9
+ 502:	439c                	lw	a5,0(a5)
+ 504:	97e6                	add	a5,a5,s9
+ 506:	8782                	jr	a5
+        printint(fd, va_arg(ap, int), 10, 1);
+ 508:	008b0913          	addi	s2,s6,8
+ 50c:	4685                	li	a3,1
+ 50e:	4629                	li	a2,10
+ 510:	000b2583          	lw	a1,0(s6)
+ 514:	8556                	mv	a0,s5
+ 516:	00000097          	auipc	ra,0x0
+ 51a:	ea8080e7          	jalr	-344(ra) # 3be <printint>
+ 51e:	8b4a                	mv	s6,s2
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 520:	4981                	li	s3,0
+ 522:	b765                	j	4ca <vprintf+0x60>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 524:	008b0913          	addi	s2,s6,8
+ 528:	4681                	li	a3,0
+ 52a:	4629                	li	a2,10
+ 52c:	000b2583          	lw	a1,0(s6)
+ 530:	8556                	mv	a0,s5
+ 532:	00000097          	auipc	ra,0x0
+ 536:	e8c080e7          	jalr	-372(ra) # 3be <printint>
+ 53a:	8b4a                	mv	s6,s2
+      state = 0;
+ 53c:	4981                	li	s3,0
+ 53e:	b771                	j	4ca <vprintf+0x60>
+        printint(fd, va_arg(ap, int), 16, 0);
+ 540:	008b0913          	addi	s2,s6,8
+ 544:	4681                	li	a3,0
+ 546:	866a                	mv	a2,s10
+ 548:	000b2583          	lw	a1,0(s6)
+ 54c:	8556                	mv	a0,s5
+ 54e:	00000097          	auipc	ra,0x0
+ 552:	e70080e7          	jalr	-400(ra) # 3be <printint>
+ 556:	8b4a                	mv	s6,s2
+      state = 0;
+ 558:	4981                	li	s3,0
+ 55a:	bf85                	j	4ca <vprintf+0x60>
+        printptr(fd, va_arg(ap, uint64));
+ 55c:	008b0793          	addi	a5,s6,8
+ 560:	f8f43423          	sd	a5,-120(s0)
+ 564:	000b3983          	ld	s3,0(s6)
+  putc(fd, '0');
+ 568:	03000593          	li	a1,48
+ 56c:	8556                	mv	a0,s5
+ 56e:	00000097          	auipc	ra,0x0
+ 572:	e2e080e7          	jalr	-466(ra) # 39c <putc>
+  putc(fd, 'x');
+ 576:	07800593          	li	a1,120
+ 57a:	8556                	mv	a0,s5
+ 57c:	00000097          	auipc	ra,0x0
+ 580:	e20080e7          	jalr	-480(ra) # 39c <putc>
+ 584:	896a                	mv	s2,s10
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 586:	03c9d793          	srli	a5,s3,0x3c
+ 58a:	97de                	add	a5,a5,s7
+ 58c:	0007c583          	lbu	a1,0(a5)
+ 590:	8556                	mv	a0,s5
+ 592:	00000097          	auipc	ra,0x0
+ 596:	e0a080e7          	jalr	-502(ra) # 39c <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+ 59a:	0992                	slli	s3,s3,0x4
+ 59c:	397d                	addiw	s2,s2,-1
+ 59e:	fe0914e3          	bnez	s2,586 <vprintf+0x11c>
+        printptr(fd, va_arg(ap, uint64));
+ 5a2:	f8843b03          	ld	s6,-120(s0)
+      state = 0;
+ 5a6:	4981                	li	s3,0
+ 5a8:	b70d                	j	4ca <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 5aa:	008b0913          	addi	s2,s6,8
+ 5ae:	000b3983          	ld	s3,0(s6)
+        if(s == 0)
+ 5b2:	02098163          	beqz	s3,5d4 <vprintf+0x16a>
+        while(*s != 0){
+ 5b6:	0009c583          	lbu	a1,0(s3)
+ 5ba:	c5ad                	beqz	a1,624 <vprintf+0x1ba>
+          putc(fd, *s);
+ 5bc:	8556                	mv	a0,s5
+ 5be:	00000097          	auipc	ra,0x0
+ 5c2:	dde080e7          	jalr	-546(ra) # 39c <putc>
+          s++;
+ 5c6:	0985                	addi	s3,s3,1
+        while(*s != 0){
+ 5c8:	0009c583          	lbu	a1,0(s3)
+ 5cc:	f9e5                	bnez	a1,5bc <vprintf+0x152>
+        s = va_arg(ap, char*);
+ 5ce:	8b4a                	mv	s6,s2
+      state = 0;
+ 5d0:	4981                	li	s3,0
+ 5d2:	bde5                	j	4ca <vprintf+0x60>
+          s = "(null)";
+ 5d4:	00000997          	auipc	s3,0x0
+ 5d8:	27498993          	addi	s3,s3,628 # 848 <malloc+0x11a>
+        while(*s != 0){
+ 5dc:	85ee                	mv	a1,s11
+ 5de:	bff9                	j	5bc <vprintf+0x152>
+        putc(fd, va_arg(ap, uint));
+ 5e0:	008b0913          	addi	s2,s6,8
+ 5e4:	000b4583          	lbu	a1,0(s6)
+ 5e8:	8556                	mv	a0,s5
+ 5ea:	00000097          	auipc	ra,0x0
+ 5ee:	db2080e7          	jalr	-590(ra) # 39c <putc>
+ 5f2:	8b4a                	mv	s6,s2
+      state = 0;
+ 5f4:	4981                	li	s3,0
+ 5f6:	bdd1                	j	4ca <vprintf+0x60>
+        putc(fd, c);
+ 5f8:	85d2                	mv	a1,s4
+ 5fa:	8556                	mv	a0,s5
+ 5fc:	00000097          	auipc	ra,0x0
+ 600:	da0080e7          	jalr	-608(ra) # 39c <putc>
+      state = 0;
+ 604:	4981                	li	s3,0
+ 606:	b5d1                	j	4ca <vprintf+0x60>
+        putc(fd, '%');
+ 608:	85d2                	mv	a1,s4
+ 60a:	8556                	mv	a0,s5
+ 60c:	00000097          	auipc	ra,0x0
+ 610:	d90080e7          	jalr	-624(ra) # 39c <putc>
+        putc(fd, c);
+ 614:	85ca                	mv	a1,s2
+ 616:	8556                	mv	a0,s5
+ 618:	00000097          	auipc	ra,0x0
+ 61c:	d84080e7          	jalr	-636(ra) # 39c <putc>
+      state = 0;
+ 620:	4981                	li	s3,0
+ 622:	b565                	j	4ca <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 624:	8b4a                	mv	s6,s2
+      state = 0;
+ 626:	4981                	li	s3,0
+ 628:	b54d                	j	4ca <vprintf+0x60>
+    }
+  }
+}
+ 62a:	70e6                	ld	ra,120(sp)
+ 62c:	7446                	ld	s0,112(sp)
+ 62e:	74a6                	ld	s1,104(sp)
+ 630:	7906                	ld	s2,96(sp)
+ 632:	69e6                	ld	s3,88(sp)
+ 634:	6a46                	ld	s4,80(sp)
+ 636:	6aa6                	ld	s5,72(sp)
+ 638:	6b06                	ld	s6,64(sp)
+ 63a:	7be2                	ld	s7,56(sp)
+ 63c:	7c42                	ld	s8,48(sp)
+ 63e:	7ca2                	ld	s9,40(sp)
+ 640:	7d02                	ld	s10,32(sp)
+ 642:	6de2                	ld	s11,24(sp)
+ 644:	6109                	addi	sp,sp,128
+ 646:	8082                	ret
+
+0000000000000648 <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+ 648:	715d                	addi	sp,sp,-80
+ 64a:	ec06                	sd	ra,24(sp)
+ 64c:	e822                	sd	s0,16(sp)
+ 64e:	1000                	addi	s0,sp,32
+ 650:	e010                	sd	a2,0(s0)
+ 652:	e414                	sd	a3,8(s0)
+ 654:	e818                	sd	a4,16(s0)
+ 656:	ec1c                	sd	a5,24(s0)
+ 658:	03043023          	sd	a6,32(s0)
+ 65c:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 660:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+ 664:	8622                	mv	a2,s0
+ 666:	00000097          	auipc	ra,0x0
+ 66a:	e04080e7          	jalr	-508(ra) # 46a <vprintf>
+}
+ 66e:	60e2                	ld	ra,24(sp)
+ 670:	6442                	ld	s0,16(sp)
+ 672:	6161                	addi	sp,sp,80
+ 674:	8082                	ret
+
+0000000000000676 <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+ 676:	711d                	addi	sp,sp,-96
+ 678:	ec06                	sd	ra,24(sp)
+ 67a:	e822                	sd	s0,16(sp)
+ 67c:	1000                	addi	s0,sp,32
+ 67e:	e40c                	sd	a1,8(s0)
+ 680:	e810                	sd	a2,16(s0)
+ 682:	ec14                	sd	a3,24(s0)
+ 684:	f018                	sd	a4,32(s0)
+ 686:	f41c                	sd	a5,40(s0)
+ 688:	03043823          	sd	a6,48(s0)
+ 68c:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 690:	00840613          	addi	a2,s0,8
+ 694:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+ 698:	85aa                	mv	a1,a0
+ 69a:	4505                	li	a0,1
+ 69c:	00000097          	auipc	ra,0x0
+ 6a0:	dce080e7          	jalr	-562(ra) # 46a <vprintf>
+}
+ 6a4:	60e2                	ld	ra,24(sp)
+ 6a6:	6442                	ld	s0,16(sp)
+ 6a8:	6125                	addi	sp,sp,96
+ 6aa:	8082                	ret
+
+00000000000006ac <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6ac:	1141                	addi	sp,sp,-16
+ 6ae:	e422                	sd	s0,8(sp)
+ 6b0:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 6b2:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6b6:	00000797          	auipc	a5,0x0
+ 6ba:	20a7b783          	ld	a5,522(a5) # 8c0 <freep>
+ 6be:	a02d                	j	6e8 <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 6c0:	4618                	lw	a4,8(a2)
+ 6c2:	9f2d                	addw	a4,a4,a1
+ 6c4:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6c8:	6398                	ld	a4,0(a5)
+ 6ca:	6310                	ld	a2,0(a4)
+ 6cc:	a83d                	j	70a <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 6ce:	ff852703          	lw	a4,-8(a0)
+ 6d2:	9f31                	addw	a4,a4,a2
+ 6d4:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+ 6d6:	ff053683          	ld	a3,-16(a0)
+ 6da:	a091                	j	71e <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6dc:	6398                	ld	a4,0(a5)
+ 6de:	00e7e463          	bltu	a5,a4,6e6 <free+0x3a>
+ 6e2:	00e6ea63          	bltu	a3,a4,6f6 <free+0x4a>
+{
+ 6e6:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6e8:	fed7fae3          	bgeu	a5,a3,6dc <free+0x30>
+ 6ec:	6398                	ld	a4,0(a5)
+ 6ee:	00e6e463          	bltu	a3,a4,6f6 <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6f2:	fee7eae3          	bltu	a5,a4,6e6 <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+ 6f6:	ff852583          	lw	a1,-8(a0)
+ 6fa:	6390                	ld	a2,0(a5)
+ 6fc:	02059813          	slli	a6,a1,0x20
+ 700:	01c85713          	srli	a4,a6,0x1c
+ 704:	9736                	add	a4,a4,a3
+ 706:	fae60de3          	beq	a2,a4,6c0 <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 70a:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+ 70e:	4790                	lw	a2,8(a5)
+ 710:	02061593          	slli	a1,a2,0x20
+ 714:	01c5d713          	srli	a4,a1,0x1c
+ 718:	973e                	add	a4,a4,a5
+ 71a:	fae68ae3          	beq	a3,a4,6ce <free+0x22>
+    p->s.ptr = bp->s.ptr;
+ 71e:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 720:	00000717          	auipc	a4,0x0
+ 724:	1af73023          	sd	a5,416(a4) # 8c0 <freep>
+}
+ 728:	6422                	ld	s0,8(sp)
+ 72a:	0141                	addi	sp,sp,16
+ 72c:	8082                	ret
+
+000000000000072e <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 72e:	7139                	addi	sp,sp,-64
+ 730:	fc06                	sd	ra,56(sp)
+ 732:	f822                	sd	s0,48(sp)
+ 734:	f426                	sd	s1,40(sp)
+ 736:	f04a                	sd	s2,32(sp)
+ 738:	ec4e                	sd	s3,24(sp)
+ 73a:	e852                	sd	s4,16(sp)
+ 73c:	e456                	sd	s5,8(sp)
+ 73e:	e05a                	sd	s6,0(sp)
+ 740:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 742:	02051493          	slli	s1,a0,0x20
+ 746:	9081                	srli	s1,s1,0x20
+ 748:	04bd                	addi	s1,s1,15
+ 74a:	8091                	srli	s1,s1,0x4
+ 74c:	0014899b          	addiw	s3,s1,1
+ 750:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+ 752:	00000517          	auipc	a0,0x0
+ 756:	16e53503          	ld	a0,366(a0) # 8c0 <freep>
+ 75a:	c515                	beqz	a0,786 <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 75c:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 75e:	4798                	lw	a4,8(a5)
+ 760:	02977f63          	bgeu	a4,s1,79e <malloc+0x70>
+ 764:	8a4e                	mv	s4,s3
+ 766:	0009871b          	sext.w	a4,s3
+ 76a:	6685                	lui	a3,0x1
+ 76c:	00d77363          	bgeu	a4,a3,772 <malloc+0x44>
+ 770:	6a05                	lui	s4,0x1
+ 772:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+ 776:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 77a:	00000917          	auipc	s2,0x0
+ 77e:	14690913          	addi	s2,s2,326 # 8c0 <freep>
+  if(p == (char*)-1)
+ 782:	5afd                	li	s5,-1
+ 784:	a895                	j	7f8 <malloc+0xca>
+    base.s.ptr = freep = prevp = &base;
+ 786:	00000797          	auipc	a5,0x0
+ 78a:	14278793          	addi	a5,a5,322 # 8c8 <base>
+ 78e:	00000717          	auipc	a4,0x0
+ 792:	12f73923          	sd	a5,306(a4) # 8c0 <freep>
+ 796:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+ 798:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+ 79c:	b7e1                	j	764 <malloc+0x36>
+      if(p->s.size == nunits)
+ 79e:	02e48c63          	beq	s1,a4,7d6 <malloc+0xa8>
+        p->s.size -= nunits;
+ 7a2:	4137073b          	subw	a4,a4,s3
+ 7a6:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+ 7a8:	02071693          	slli	a3,a4,0x20
+ 7ac:	01c6d713          	srli	a4,a3,0x1c
+ 7b0:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+ 7b2:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+ 7b6:	00000717          	auipc	a4,0x0
+ 7ba:	10a73523          	sd	a0,266(a4) # 8c0 <freep>
+      return (void*)(p + 1);
+ 7be:	01078513          	addi	a0,a5,16
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ 7c2:	70e2                	ld	ra,56(sp)
+ 7c4:	7442                	ld	s0,48(sp)
+ 7c6:	74a2                	ld	s1,40(sp)
+ 7c8:	7902                	ld	s2,32(sp)
+ 7ca:	69e2                	ld	s3,24(sp)
+ 7cc:	6a42                	ld	s4,16(sp)
+ 7ce:	6aa2                	ld	s5,8(sp)
+ 7d0:	6b02                	ld	s6,0(sp)
+ 7d2:	6121                	addi	sp,sp,64
+ 7d4:	8082                	ret
+        prevp->s.ptr = p->s.ptr;
+ 7d6:	6398                	ld	a4,0(a5)
+ 7d8:	e118                	sd	a4,0(a0)
+ 7da:	bff1                	j	7b6 <malloc+0x88>
+  hp->s.size = nu;
+ 7dc:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+ 7e0:	0541                	addi	a0,a0,16
+ 7e2:	00000097          	auipc	ra,0x0
+ 7e6:	eca080e7          	jalr	-310(ra) # 6ac <free>
+  return freep;
+ 7ea:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+ 7ee:	d971                	beqz	a0,7c2 <malloc+0x94>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7f0:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 7f2:	4798                	lw	a4,8(a5)
+ 7f4:	fa9775e3          	bgeu	a4,s1,79e <malloc+0x70>
+    if(p == freep)
+ 7f8:	00093703          	ld	a4,0(s2)
+ 7fc:	853e                	mv	a0,a5
+ 7fe:	fef719e3          	bne	a4,a5,7f0 <malloc+0xc2>
+  p = sbrk(nu * sizeof(Header));
+ 802:	8552                	mv	a0,s4
+ 804:	00000097          	auipc	ra,0x0
+ 808:	b50080e7          	jalr	-1200(ra) # 354 <sbrk>
+  if(p == (char*)-1)
+ 80c:	fd5518e3          	bne	a0,s5,7dc <malloc+0xae>
+        return 0;
+ 810:	4501                	li	a0,0
+ 812:	bf45                	j	7c2 <malloc+0x94>
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/ln.d os-workshop/user/ln.d
--- xv6-riscv/user/ln.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/ln.d	2022-05-28 22:34:33.000000000 -0300
@@ -0,0 +1 @@
+user/ln.o: user/ln.c kernel/types.h kernel/stat.h user/user.h
Binary files xv6-riscv/user/ln.o and os-workshop/user/ln.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/ln.sym os-workshop/user/ln.sym
--- xv6-riscv/user/ln.sym	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/ln.sym	2022-05-28 22:34:33.000000000 -0300
@@ -0,0 +1,76 @@
+0000000000000000 .text
+0000000000000818 .rodata
+00000000000008c0 .sbss
+00000000000008c8 .bss
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_aranges
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_line
+0000000000000000 .debug_frame
+0000000000000000 .debug_str
+0000000000000000 .debug_line_str
+0000000000000000 .debug_loclists
+0000000000000000 .debug_rnglists
+0000000000000000 ln.c
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+000000000000039c putc
+00000000000003be printint
+00000000000008a8 digits
+0000000000000000 umalloc.c
+00000000000008c0 freep
+00000000000008c8 base
+0000000000000060 strcpy
+0000000000000676 printf
+00000000000010b9 __global_pointer$
+000000000000021a memmove
+0000000000000314 mknod
+000000000000037c semdown
+0000000000000118 gets
+00000000000008b9 __SDATA_BEGIN__
+0000000000000374 semget
+000000000000034c getpid
+00000000000002ac memcpy
+000000000000072e malloc
+000000000000038c semclose
+000000000000035c sleep
+00000000000002dc pipe
+00000000000002ec write
+0000000000000324 fstat
+0000000000000648 fprintf
+00000000000002fc kill
+000000000000046a vprintf
+000000000000033c chdir
+0000000000000304 exec
+00000000000002d4 wait
+00000000000002e4 read
+000000000000031c unlink
+0000000000000272 memcmp
+00000000000002c4 fork
+00000000000008d8 __BSS_END__
+0000000000000354 sbrk
+0000000000000364 uptime
+00000000000008b9 __bss_start
+00000000000000d2 memset
+0000000000000000 main
+0000000000000394 timeout
+000000000000007c strcmp
+0000000000000344 dup
+00000000000008b9 __DATA_BEGIN__
+000000000000018c stat
+00000000000008b9 _edata
+000000000000036c setp
+00000000000008d8 _end
+000000000000032c link
+00000000000002cc exit
+00000000000001d2 atoi
+00000000000000a8 strlen
+000000000000030c open
+0000000000000384 semup
+00000000000000f4 strchr
+0000000000000334 mkdir
+00000000000002f4 close
+00000000000006ac free
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/ls.asm os-workshop/user/ls.asm
--- xv6-riscv/user/ls.asm	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/ls.asm	2022-05-28 22:34:34.000000000 -0300
@@ -0,0 +1,1643 @@
+
+user/_ls:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <fmtname>:
+#include "user/user.h"
+#include "kernel/fs.h"
+
+char*
+fmtname(char *path)
+{
+   0:	7179                	addi	sp,sp,-48
+   2:	f406                	sd	ra,40(sp)
+   4:	f022                	sd	s0,32(sp)
+   6:	ec26                	sd	s1,24(sp)
+   8:	e84a                	sd	s2,16(sp)
+   a:	e44e                	sd	s3,8(sp)
+   c:	1800                	addi	s0,sp,48
+   e:	84aa                	mv	s1,a0
+  static char buf[DIRSIZ+1];
+  char *p;
+
+  // Find first character after last slash.
+  for(p=path+strlen(path); p >= path && *p != '/'; p--)
+  10:	00000097          	auipc	ra,0x0
+  14:	30a080e7          	jalr	778(ra) # 31a <strlen>
+  18:	02051793          	slli	a5,a0,0x20
+  1c:	9381                	srli	a5,a5,0x20
+  1e:	97a6                	add	a5,a5,s1
+  20:	02f00693          	li	a3,47
+  24:	0097e963          	bltu	a5,s1,36 <fmtname+0x36>
+  28:	0007c703          	lbu	a4,0(a5)
+  2c:	00d70563          	beq	a4,a3,36 <fmtname+0x36>
+  30:	17fd                	addi	a5,a5,-1
+  32:	fe97fbe3          	bgeu	a5,s1,28 <fmtname+0x28>
+    ;
+  p++;
+  36:	00178493          	addi	s1,a5,1
+
+  // Return blank-padded name.
+  if(strlen(p) >= DIRSIZ)
+  3a:	8526                	mv	a0,s1
+  3c:	00000097          	auipc	ra,0x0
+  40:	2de080e7          	jalr	734(ra) # 31a <strlen>
+  44:	2501                	sext.w	a0,a0
+  46:	47b5                	li	a5,13
+  48:	00a7fa63          	bgeu	a5,a0,5c <fmtname+0x5c>
+    return p;
+  memmove(buf, p, strlen(p));
+  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
+  return buf;
+}
+  4c:	8526                	mv	a0,s1
+  4e:	70a2                	ld	ra,40(sp)
+  50:	7402                	ld	s0,32(sp)
+  52:	64e2                	ld	s1,24(sp)
+  54:	6942                	ld	s2,16(sp)
+  56:	69a2                	ld	s3,8(sp)
+  58:	6145                	addi	sp,sp,48
+  5a:	8082                	ret
+  memmove(buf, p, strlen(p));
+  5c:	8526                	mv	a0,s1
+  5e:	00000097          	auipc	ra,0x0
+  62:	2bc080e7          	jalr	700(ra) # 31a <strlen>
+  66:	00001997          	auipc	s3,0x1
+  6a:	b1298993          	addi	s3,s3,-1262 # b78 <buf.0>
+  6e:	0005061b          	sext.w	a2,a0
+  72:	85a6                	mv	a1,s1
+  74:	854e                	mv	a0,s3
+  76:	00000097          	auipc	ra,0x0
+  7a:	416080e7          	jalr	1046(ra) # 48c <memmove>
+  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
+  7e:	8526                	mv	a0,s1
+  80:	00000097          	auipc	ra,0x0
+  84:	29a080e7          	jalr	666(ra) # 31a <strlen>
+  88:	0005091b          	sext.w	s2,a0
+  8c:	8526                	mv	a0,s1
+  8e:	00000097          	auipc	ra,0x0
+  92:	28c080e7          	jalr	652(ra) # 31a <strlen>
+  96:	1902                	slli	s2,s2,0x20
+  98:	02095913          	srli	s2,s2,0x20
+  9c:	4639                	li	a2,14
+  9e:	9e09                	subw	a2,a2,a0
+  a0:	02000593          	li	a1,32
+  a4:	01298533          	add	a0,s3,s2
+  a8:	00000097          	auipc	ra,0x0
+  ac:	29c080e7          	jalr	668(ra) # 344 <memset>
+  return buf;
+  b0:	84ce                	mv	s1,s3
+  b2:	bf69                	j	4c <fmtname+0x4c>
+
+00000000000000b4 <ls>:
+
+void
+ls(char *path)
+{
+  b4:	d9010113          	addi	sp,sp,-624
+  b8:	26113423          	sd	ra,616(sp)
+  bc:	26813023          	sd	s0,608(sp)
+  c0:	24913c23          	sd	s1,600(sp)
+  c4:	25213823          	sd	s2,592(sp)
+  c8:	25313423          	sd	s3,584(sp)
+  cc:	25413023          	sd	s4,576(sp)
+  d0:	23513c23          	sd	s5,568(sp)
+  d4:	1c80                	addi	s0,sp,624
+  d6:	892a                	mv	s2,a0
+  char buf[512], *p;
+  int fd;
+  struct dirent de;
+  struct stat st;
+
+  if((fd = open(path, 0)) < 0){
+  d8:	4581                	li	a1,0
+  da:	00000097          	auipc	ra,0x0
+  de:	4a4080e7          	jalr	1188(ra) # 57e <open>
+  e2:	06054f63          	bltz	a0,160 <ls+0xac>
+  e6:	84aa                	mv	s1,a0
+    fprintf(2, "ls: cannot open %s\n", path);
+    return;
+  }
+
+  if(fstat(fd, &st) < 0){
+  e8:	d9840593          	addi	a1,s0,-616
+  ec:	00000097          	auipc	ra,0x0
+  f0:	4aa080e7          	jalr	1194(ra) # 596 <fstat>
+  f4:	08054163          	bltz	a0,176 <ls+0xc2>
+    fprintf(2, "ls: cannot stat %s\n", path);
+    close(fd);
+    return;
+  }
+
+  switch(st.type){
+  f8:	da041783          	lh	a5,-608(s0)
+  fc:	0007869b          	sext.w	a3,a5
+ 100:	4705                	li	a4,1
+ 102:	08e68a63          	beq	a3,a4,196 <ls+0xe2>
+ 106:	4709                	li	a4,2
+ 108:	02e69663          	bne	a3,a4,134 <ls+0x80>
+  case T_FILE:
+    printf("%s %d %d %l\n", fmtname(path), st.type, st.ino, st.size);
+ 10c:	854a                	mv	a0,s2
+ 10e:	00000097          	auipc	ra,0x0
+ 112:	ef2080e7          	jalr	-270(ra) # 0 <fmtname>
+ 116:	85aa                	mv	a1,a0
+ 118:	da843703          	ld	a4,-600(s0)
+ 11c:	d9c42683          	lw	a3,-612(s0)
+ 120:	da041603          	lh	a2,-608(s0)
+ 124:	00001517          	auipc	a0,0x1
+ 128:	99450513          	addi	a0,a0,-1644 # ab8 <malloc+0x118>
+ 12c:	00000097          	auipc	ra,0x0
+ 130:	7bc080e7          	jalr	1980(ra) # 8e8 <printf>
+      }
+      printf("%s %d %d %d\n", fmtname(buf), st.type, st.ino, st.size);
+    }
+    break;
+  }
+  close(fd);
+ 134:	8526                	mv	a0,s1
+ 136:	00000097          	auipc	ra,0x0
+ 13a:	430080e7          	jalr	1072(ra) # 566 <close>
+}
+ 13e:	26813083          	ld	ra,616(sp)
+ 142:	26013403          	ld	s0,608(sp)
+ 146:	25813483          	ld	s1,600(sp)
+ 14a:	25013903          	ld	s2,592(sp)
+ 14e:	24813983          	ld	s3,584(sp)
+ 152:	24013a03          	ld	s4,576(sp)
+ 156:	23813a83          	ld	s5,568(sp)
+ 15a:	27010113          	addi	sp,sp,624
+ 15e:	8082                	ret
+    fprintf(2, "ls: cannot open %s\n", path);
+ 160:	864a                	mv	a2,s2
+ 162:	00001597          	auipc	a1,0x1
+ 166:	92658593          	addi	a1,a1,-1754 # a88 <malloc+0xe8>
+ 16a:	4509                	li	a0,2
+ 16c:	00000097          	auipc	ra,0x0
+ 170:	74e080e7          	jalr	1870(ra) # 8ba <fprintf>
+    return;
+ 174:	b7e9                	j	13e <ls+0x8a>
+    fprintf(2, "ls: cannot stat %s\n", path);
+ 176:	864a                	mv	a2,s2
+ 178:	00001597          	auipc	a1,0x1
+ 17c:	92858593          	addi	a1,a1,-1752 # aa0 <malloc+0x100>
+ 180:	4509                	li	a0,2
+ 182:	00000097          	auipc	ra,0x0
+ 186:	738080e7          	jalr	1848(ra) # 8ba <fprintf>
+    close(fd);
+ 18a:	8526                	mv	a0,s1
+ 18c:	00000097          	auipc	ra,0x0
+ 190:	3da080e7          	jalr	986(ra) # 566 <close>
+    return;
+ 194:	b76d                	j	13e <ls+0x8a>
+    if(strlen(path) + 1 + DIRSIZ + 1 > sizeof buf){
+ 196:	854a                	mv	a0,s2
+ 198:	00000097          	auipc	ra,0x0
+ 19c:	182080e7          	jalr	386(ra) # 31a <strlen>
+ 1a0:	2541                	addiw	a0,a0,16
+ 1a2:	20000793          	li	a5,512
+ 1a6:	00a7fb63          	bgeu	a5,a0,1bc <ls+0x108>
+      printf("ls: path too long\n");
+ 1aa:	00001517          	auipc	a0,0x1
+ 1ae:	91e50513          	addi	a0,a0,-1762 # ac8 <malloc+0x128>
+ 1b2:	00000097          	auipc	ra,0x0
+ 1b6:	736080e7          	jalr	1846(ra) # 8e8 <printf>
+      break;
+ 1ba:	bfad                	j	134 <ls+0x80>
+    strcpy(buf, path);
+ 1bc:	85ca                	mv	a1,s2
+ 1be:	dc040513          	addi	a0,s0,-576
+ 1c2:	00000097          	auipc	ra,0x0
+ 1c6:	110080e7          	jalr	272(ra) # 2d2 <strcpy>
+    p = buf+strlen(buf);
+ 1ca:	dc040513          	addi	a0,s0,-576
+ 1ce:	00000097          	auipc	ra,0x0
+ 1d2:	14c080e7          	jalr	332(ra) # 31a <strlen>
+ 1d6:	1502                	slli	a0,a0,0x20
+ 1d8:	9101                	srli	a0,a0,0x20
+ 1da:	dc040793          	addi	a5,s0,-576
+ 1de:	00a78933          	add	s2,a5,a0
+    *p++ = '/';
+ 1e2:	00190993          	addi	s3,s2,1
+ 1e6:	02f00793          	li	a5,47
+ 1ea:	00f90023          	sb	a5,0(s2)
+      printf("%s %d %d %d\n", fmtname(buf), st.type, st.ino, st.size);
+ 1ee:	00001a17          	auipc	s4,0x1
+ 1f2:	8f2a0a13          	addi	s4,s4,-1806 # ae0 <malloc+0x140>
+        printf("ls: cannot stat %s\n", buf);
+ 1f6:	00001a97          	auipc	s5,0x1
+ 1fa:	8aaa8a93          	addi	s5,s5,-1878 # aa0 <malloc+0x100>
+    while(read(fd, &de, sizeof(de)) == sizeof(de)){
+ 1fe:	a801                	j	20e <ls+0x15a>
+        printf("ls: cannot stat %s\n", buf);
+ 200:	dc040593          	addi	a1,s0,-576
+ 204:	8556                	mv	a0,s5
+ 206:	00000097          	auipc	ra,0x0
+ 20a:	6e2080e7          	jalr	1762(ra) # 8e8 <printf>
+    while(read(fd, &de, sizeof(de)) == sizeof(de)){
+ 20e:	4641                	li	a2,16
+ 210:	db040593          	addi	a1,s0,-592
+ 214:	8526                	mv	a0,s1
+ 216:	00000097          	auipc	ra,0x0
+ 21a:	340080e7          	jalr	832(ra) # 556 <read>
+ 21e:	47c1                	li	a5,16
+ 220:	f0f51ae3          	bne	a0,a5,134 <ls+0x80>
+      if(de.inum == 0)
+ 224:	db045783          	lhu	a5,-592(s0)
+ 228:	d3fd                	beqz	a5,20e <ls+0x15a>
+      memmove(p, de.name, DIRSIZ);
+ 22a:	4639                	li	a2,14
+ 22c:	db240593          	addi	a1,s0,-590
+ 230:	854e                	mv	a0,s3
+ 232:	00000097          	auipc	ra,0x0
+ 236:	25a080e7          	jalr	602(ra) # 48c <memmove>
+      p[DIRSIZ] = 0;
+ 23a:	000907a3          	sb	zero,15(s2)
+      if(stat(buf, &st) < 0){
+ 23e:	d9840593          	addi	a1,s0,-616
+ 242:	dc040513          	addi	a0,s0,-576
+ 246:	00000097          	auipc	ra,0x0
+ 24a:	1b8080e7          	jalr	440(ra) # 3fe <stat>
+ 24e:	fa0549e3          	bltz	a0,200 <ls+0x14c>
+      printf("%s %d %d %d\n", fmtname(buf), st.type, st.ino, st.size);
+ 252:	dc040513          	addi	a0,s0,-576
+ 256:	00000097          	auipc	ra,0x0
+ 25a:	daa080e7          	jalr	-598(ra) # 0 <fmtname>
+ 25e:	85aa                	mv	a1,a0
+ 260:	da843703          	ld	a4,-600(s0)
+ 264:	d9c42683          	lw	a3,-612(s0)
+ 268:	da041603          	lh	a2,-608(s0)
+ 26c:	8552                	mv	a0,s4
+ 26e:	00000097          	auipc	ra,0x0
+ 272:	67a080e7          	jalr	1658(ra) # 8e8 <printf>
+ 276:	bf61                	j	20e <ls+0x15a>
+
+0000000000000278 <main>:
+
+int
+main(int argc, char *argv[])
+{
+ 278:	1101                	addi	sp,sp,-32
+ 27a:	ec06                	sd	ra,24(sp)
+ 27c:	e822                	sd	s0,16(sp)
+ 27e:	e426                	sd	s1,8(sp)
+ 280:	e04a                	sd	s2,0(sp)
+ 282:	1000                	addi	s0,sp,32
+  int i;
+
+  if(argc < 2){
+ 284:	4785                	li	a5,1
+ 286:	02a7d963          	bge	a5,a0,2b8 <main+0x40>
+ 28a:	00858493          	addi	s1,a1,8
+ 28e:	ffe5091b          	addiw	s2,a0,-2
+ 292:	02091793          	slli	a5,s2,0x20
+ 296:	01d7d913          	srli	s2,a5,0x1d
+ 29a:	05c1                	addi	a1,a1,16
+ 29c:	992e                	add	s2,s2,a1
+    ls(".");
+    exit(0);
+  }
+  for(i=1; i<argc; i++)
+    ls(argv[i]);
+ 29e:	6088                	ld	a0,0(s1)
+ 2a0:	00000097          	auipc	ra,0x0
+ 2a4:	e14080e7          	jalr	-492(ra) # b4 <ls>
+  for(i=1; i<argc; i++)
+ 2a8:	04a1                	addi	s1,s1,8
+ 2aa:	ff249ae3          	bne	s1,s2,29e <main+0x26>
+  exit(0);
+ 2ae:	4501                	li	a0,0
+ 2b0:	00000097          	auipc	ra,0x0
+ 2b4:	28e080e7          	jalr	654(ra) # 53e <exit>
+    ls(".");
+ 2b8:	00001517          	auipc	a0,0x1
+ 2bc:	83850513          	addi	a0,a0,-1992 # af0 <malloc+0x150>
+ 2c0:	00000097          	auipc	ra,0x0
+ 2c4:	df4080e7          	jalr	-524(ra) # b4 <ls>
+    exit(0);
+ 2c8:	4501                	li	a0,0
+ 2ca:	00000097          	auipc	ra,0x0
+ 2ce:	274080e7          	jalr	628(ra) # 53e <exit>
+
+00000000000002d2 <strcpy>:
+#include "kernel/fcntl.h"
+#include "user/user.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 2d2:	1141                	addi	sp,sp,-16
+ 2d4:	e422                	sd	s0,8(sp)
+ 2d6:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 2d8:	87aa                	mv	a5,a0
+ 2da:	0585                	addi	a1,a1,1
+ 2dc:	0785                	addi	a5,a5,1
+ 2de:	fff5c703          	lbu	a4,-1(a1)
+ 2e2:	fee78fa3          	sb	a4,-1(a5)
+ 2e6:	fb75                	bnez	a4,2da <strcpy+0x8>
+    ;
+  return os;
+}
+ 2e8:	6422                	ld	s0,8(sp)
+ 2ea:	0141                	addi	sp,sp,16
+ 2ec:	8082                	ret
+
+00000000000002ee <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 2ee:	1141                	addi	sp,sp,-16
+ 2f0:	e422                	sd	s0,8(sp)
+ 2f2:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+ 2f4:	00054783          	lbu	a5,0(a0)
+ 2f8:	cb91                	beqz	a5,30c <strcmp+0x1e>
+ 2fa:	0005c703          	lbu	a4,0(a1)
+ 2fe:	00f71763          	bne	a4,a5,30c <strcmp+0x1e>
+    p++, q++;
+ 302:	0505                	addi	a0,a0,1
+ 304:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+ 306:	00054783          	lbu	a5,0(a0)
+ 30a:	fbe5                	bnez	a5,2fa <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+ 30c:	0005c503          	lbu	a0,0(a1)
+}
+ 310:	40a7853b          	subw	a0,a5,a0
+ 314:	6422                	ld	s0,8(sp)
+ 316:	0141                	addi	sp,sp,16
+ 318:	8082                	ret
+
+000000000000031a <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 31a:	1141                	addi	sp,sp,-16
+ 31c:	e422                	sd	s0,8(sp)
+ 31e:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 320:	00054783          	lbu	a5,0(a0)
+ 324:	cf91                	beqz	a5,340 <strlen+0x26>
+ 326:	0505                	addi	a0,a0,1
+ 328:	87aa                	mv	a5,a0
+ 32a:	4685                	li	a3,1
+ 32c:	9e89                	subw	a3,a3,a0
+ 32e:	00f6853b          	addw	a0,a3,a5
+ 332:	0785                	addi	a5,a5,1
+ 334:	fff7c703          	lbu	a4,-1(a5)
+ 338:	fb7d                	bnez	a4,32e <strlen+0x14>
+    ;
+  return n;
+}
+ 33a:	6422                	ld	s0,8(sp)
+ 33c:	0141                	addi	sp,sp,16
+ 33e:	8082                	ret
+  for(n = 0; s[n]; n++)
+ 340:	4501                	li	a0,0
+ 342:	bfe5                	j	33a <strlen+0x20>
+
+0000000000000344 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 344:	1141                	addi	sp,sp,-16
+ 346:	e422                	sd	s0,8(sp)
+ 348:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+ 34a:	ca19                	beqz	a2,360 <memset+0x1c>
+ 34c:	87aa                	mv	a5,a0
+ 34e:	1602                	slli	a2,a2,0x20
+ 350:	9201                	srli	a2,a2,0x20
+ 352:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+ 356:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+ 35a:	0785                	addi	a5,a5,1
+ 35c:	fee79de3          	bne	a5,a4,356 <memset+0x12>
+  }
+  return dst;
+}
+ 360:	6422                	ld	s0,8(sp)
+ 362:	0141                	addi	sp,sp,16
+ 364:	8082                	ret
+
+0000000000000366 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 366:	1141                	addi	sp,sp,-16
+ 368:	e422                	sd	s0,8(sp)
+ 36a:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+ 36c:	00054783          	lbu	a5,0(a0)
+ 370:	cb99                	beqz	a5,386 <strchr+0x20>
+    if(*s == c)
+ 372:	00f58763          	beq	a1,a5,380 <strchr+0x1a>
+  for(; *s; s++)
+ 376:	0505                	addi	a0,a0,1
+ 378:	00054783          	lbu	a5,0(a0)
+ 37c:	fbfd                	bnez	a5,372 <strchr+0xc>
+      return (char*)s;
+  return 0;
+ 37e:	4501                	li	a0,0
+}
+ 380:	6422                	ld	s0,8(sp)
+ 382:	0141                	addi	sp,sp,16
+ 384:	8082                	ret
+  return 0;
+ 386:	4501                	li	a0,0
+ 388:	bfe5                	j	380 <strchr+0x1a>
+
+000000000000038a <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 38a:	711d                	addi	sp,sp,-96
+ 38c:	ec86                	sd	ra,88(sp)
+ 38e:	e8a2                	sd	s0,80(sp)
+ 390:	e4a6                	sd	s1,72(sp)
+ 392:	e0ca                	sd	s2,64(sp)
+ 394:	fc4e                	sd	s3,56(sp)
+ 396:	f852                	sd	s4,48(sp)
+ 398:	f456                	sd	s5,40(sp)
+ 39a:	f05a                	sd	s6,32(sp)
+ 39c:	ec5e                	sd	s7,24(sp)
+ 39e:	1080                	addi	s0,sp,96
+ 3a0:	8baa                	mv	s7,a0
+ 3a2:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 3a4:	892a                	mv	s2,a0
+ 3a6:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+ 3a8:	4aa9                	li	s5,10
+ 3aa:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+ 3ac:	89a6                	mv	s3,s1
+ 3ae:	2485                	addiw	s1,s1,1
+ 3b0:	0344d863          	bge	s1,s4,3e0 <gets+0x56>
+    cc = read(0, &c, 1);
+ 3b4:	4605                	li	a2,1
+ 3b6:	faf40593          	addi	a1,s0,-81
+ 3ba:	4501                	li	a0,0
+ 3bc:	00000097          	auipc	ra,0x0
+ 3c0:	19a080e7          	jalr	410(ra) # 556 <read>
+    if(cc < 1)
+ 3c4:	00a05e63          	blez	a0,3e0 <gets+0x56>
+    buf[i++] = c;
+ 3c8:	faf44783          	lbu	a5,-81(s0)
+ 3cc:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+ 3d0:	01578763          	beq	a5,s5,3de <gets+0x54>
+ 3d4:	0905                	addi	s2,s2,1
+ 3d6:	fd679be3          	bne	a5,s6,3ac <gets+0x22>
+  for(i=0; i+1 < max; ){
+ 3da:	89a6                	mv	s3,s1
+ 3dc:	a011                	j	3e0 <gets+0x56>
+ 3de:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+ 3e0:	99de                	add	s3,s3,s7
+ 3e2:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+ 3e6:	855e                	mv	a0,s7
+ 3e8:	60e6                	ld	ra,88(sp)
+ 3ea:	6446                	ld	s0,80(sp)
+ 3ec:	64a6                	ld	s1,72(sp)
+ 3ee:	6906                	ld	s2,64(sp)
+ 3f0:	79e2                	ld	s3,56(sp)
+ 3f2:	7a42                	ld	s4,48(sp)
+ 3f4:	7aa2                	ld	s5,40(sp)
+ 3f6:	7b02                	ld	s6,32(sp)
+ 3f8:	6be2                	ld	s7,24(sp)
+ 3fa:	6125                	addi	sp,sp,96
+ 3fc:	8082                	ret
+
+00000000000003fe <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 3fe:	1101                	addi	sp,sp,-32
+ 400:	ec06                	sd	ra,24(sp)
+ 402:	e822                	sd	s0,16(sp)
+ 404:	e426                	sd	s1,8(sp)
+ 406:	e04a                	sd	s2,0(sp)
+ 408:	1000                	addi	s0,sp,32
+ 40a:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 40c:	4581                	li	a1,0
+ 40e:	00000097          	auipc	ra,0x0
+ 412:	170080e7          	jalr	368(ra) # 57e <open>
+  if(fd < 0)
+ 416:	02054563          	bltz	a0,440 <stat+0x42>
+ 41a:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+ 41c:	85ca                	mv	a1,s2
+ 41e:	00000097          	auipc	ra,0x0
+ 422:	178080e7          	jalr	376(ra) # 596 <fstat>
+ 426:	892a                	mv	s2,a0
+  close(fd);
+ 428:	8526                	mv	a0,s1
+ 42a:	00000097          	auipc	ra,0x0
+ 42e:	13c080e7          	jalr	316(ra) # 566 <close>
+  return r;
+}
+ 432:	854a                	mv	a0,s2
+ 434:	60e2                	ld	ra,24(sp)
+ 436:	6442                	ld	s0,16(sp)
+ 438:	64a2                	ld	s1,8(sp)
+ 43a:	6902                	ld	s2,0(sp)
+ 43c:	6105                	addi	sp,sp,32
+ 43e:	8082                	ret
+    return -1;
+ 440:	597d                	li	s2,-1
+ 442:	bfc5                	j	432 <stat+0x34>
+
+0000000000000444 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 444:	1141                	addi	sp,sp,-16
+ 446:	e422                	sd	s0,8(sp)
+ 448:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 44a:	00054683          	lbu	a3,0(a0)
+ 44e:	fd06879b          	addiw	a5,a3,-48
+ 452:	0ff7f793          	zext.b	a5,a5
+ 456:	4625                	li	a2,9
+ 458:	02f66863          	bltu	a2,a5,488 <atoi+0x44>
+ 45c:	872a                	mv	a4,a0
+  n = 0;
+ 45e:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+ 460:	0705                	addi	a4,a4,1
+ 462:	0025179b          	slliw	a5,a0,0x2
+ 466:	9fa9                	addw	a5,a5,a0
+ 468:	0017979b          	slliw	a5,a5,0x1
+ 46c:	9fb5                	addw	a5,a5,a3
+ 46e:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+ 472:	00074683          	lbu	a3,0(a4)
+ 476:	fd06879b          	addiw	a5,a3,-48
+ 47a:	0ff7f793          	zext.b	a5,a5
+ 47e:	fef671e3          	bgeu	a2,a5,460 <atoi+0x1c>
+  return n;
+}
+ 482:	6422                	ld	s0,8(sp)
+ 484:	0141                	addi	sp,sp,16
+ 486:	8082                	ret
+  n = 0;
+ 488:	4501                	li	a0,0
+ 48a:	bfe5                	j	482 <atoi+0x3e>
+
+000000000000048c <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 48c:	1141                	addi	sp,sp,-16
+ 48e:	e422                	sd	s0,8(sp)
+ 490:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+ 492:	02b57463          	bgeu	a0,a1,4ba <memmove+0x2e>
+    while(n-- > 0)
+ 496:	00c05f63          	blez	a2,4b4 <memmove+0x28>
+ 49a:	1602                	slli	a2,a2,0x20
+ 49c:	9201                	srli	a2,a2,0x20
+ 49e:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+ 4a2:	872a                	mv	a4,a0
+      *dst++ = *src++;
+ 4a4:	0585                	addi	a1,a1,1
+ 4a6:	0705                	addi	a4,a4,1
+ 4a8:	fff5c683          	lbu	a3,-1(a1)
+ 4ac:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+ 4b0:	fee79ae3          	bne	a5,a4,4a4 <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+ 4b4:	6422                	ld	s0,8(sp)
+ 4b6:	0141                	addi	sp,sp,16
+ 4b8:	8082                	ret
+    dst += n;
+ 4ba:	00c50733          	add	a4,a0,a2
+    src += n;
+ 4be:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+ 4c0:	fec05ae3          	blez	a2,4b4 <memmove+0x28>
+ 4c4:	fff6079b          	addiw	a5,a2,-1
+ 4c8:	1782                	slli	a5,a5,0x20
+ 4ca:	9381                	srli	a5,a5,0x20
+ 4cc:	fff7c793          	not	a5,a5
+ 4d0:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+ 4d2:	15fd                	addi	a1,a1,-1
+ 4d4:	177d                	addi	a4,a4,-1
+ 4d6:	0005c683          	lbu	a3,0(a1)
+ 4da:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+ 4de:	fee79ae3          	bne	a5,a4,4d2 <memmove+0x46>
+ 4e2:	bfc9                	j	4b4 <memmove+0x28>
+
+00000000000004e4 <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+ 4e4:	1141                	addi	sp,sp,-16
+ 4e6:	e422                	sd	s0,8(sp)
+ 4e8:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+ 4ea:	ca05                	beqz	a2,51a <memcmp+0x36>
+ 4ec:	fff6069b          	addiw	a3,a2,-1
+ 4f0:	1682                	slli	a3,a3,0x20
+ 4f2:	9281                	srli	a3,a3,0x20
+ 4f4:	0685                	addi	a3,a3,1
+ 4f6:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+ 4f8:	00054783          	lbu	a5,0(a0)
+ 4fc:	0005c703          	lbu	a4,0(a1)
+ 500:	00e79863          	bne	a5,a4,510 <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+ 504:	0505                	addi	a0,a0,1
+    p2++;
+ 506:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+ 508:	fed518e3          	bne	a0,a3,4f8 <memcmp+0x14>
+  }
+  return 0;
+ 50c:	4501                	li	a0,0
+ 50e:	a019                	j	514 <memcmp+0x30>
+      return *p1 - *p2;
+ 510:	40e7853b          	subw	a0,a5,a4
+}
+ 514:	6422                	ld	s0,8(sp)
+ 516:	0141                	addi	sp,sp,16
+ 518:	8082                	ret
+  return 0;
+ 51a:	4501                	li	a0,0
+ 51c:	bfe5                	j	514 <memcmp+0x30>
+
+000000000000051e <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+ 51e:	1141                	addi	sp,sp,-16
+ 520:	e406                	sd	ra,8(sp)
+ 522:	e022                	sd	s0,0(sp)
+ 524:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+ 526:	00000097          	auipc	ra,0x0
+ 52a:	f66080e7          	jalr	-154(ra) # 48c <memmove>
+}
+ 52e:	60a2                	ld	ra,8(sp)
+ 530:	6402                	ld	s0,0(sp)
+ 532:	0141                	addi	sp,sp,16
+ 534:	8082                	ret
+
+0000000000000536 <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ 536:	4885                	li	a7,1
+ ecall
+ 538:	00000073          	ecall
+ ret
+ 53c:	8082                	ret
+
+000000000000053e <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+ 53e:	4889                	li	a7,2
+ ecall
+ 540:	00000073          	ecall
+ ret
+ 544:	8082                	ret
+
+0000000000000546 <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+ 546:	488d                	li	a7,3
+ ecall
+ 548:	00000073          	ecall
+ ret
+ 54c:	8082                	ret
+
+000000000000054e <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ 54e:	4891                	li	a7,4
+ ecall
+ 550:	00000073          	ecall
+ ret
+ 554:	8082                	ret
+
+0000000000000556 <read>:
+.global read
+read:
+ li a7, SYS_read
+ 556:	4895                	li	a7,5
+ ecall
+ 558:	00000073          	ecall
+ ret
+ 55c:	8082                	ret
+
+000000000000055e <write>:
+.global write
+write:
+ li a7, SYS_write
+ 55e:	48c1                	li	a7,16
+ ecall
+ 560:	00000073          	ecall
+ ret
+ 564:	8082                	ret
+
+0000000000000566 <close>:
+.global close
+close:
+ li a7, SYS_close
+ 566:	48d5                	li	a7,21
+ ecall
+ 568:	00000073          	ecall
+ ret
+ 56c:	8082                	ret
+
+000000000000056e <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+ 56e:	4899                	li	a7,6
+ ecall
+ 570:	00000073          	ecall
+ ret
+ 574:	8082                	ret
+
+0000000000000576 <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+ 576:	489d                	li	a7,7
+ ecall
+ 578:	00000073          	ecall
+ ret
+ 57c:	8082                	ret
+
+000000000000057e <open>:
+.global open
+open:
+ li a7, SYS_open
+ 57e:	48bd                	li	a7,15
+ ecall
+ 580:	00000073          	ecall
+ ret
+ 584:	8082                	ret
+
+0000000000000586 <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ 586:	48c5                	li	a7,17
+ ecall
+ 588:	00000073          	ecall
+ ret
+ 58c:	8082                	ret
+
+000000000000058e <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ 58e:	48c9                	li	a7,18
+ ecall
+ 590:	00000073          	ecall
+ ret
+ 594:	8082                	ret
+
+0000000000000596 <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ 596:	48a1                	li	a7,8
+ ecall
+ 598:	00000073          	ecall
+ ret
+ 59c:	8082                	ret
+
+000000000000059e <link>:
+.global link
+link:
+ li a7, SYS_link
+ 59e:	48cd                	li	a7,19
+ ecall
+ 5a0:	00000073          	ecall
+ ret
+ 5a4:	8082                	ret
+
+00000000000005a6 <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ 5a6:	48d1                	li	a7,20
+ ecall
+ 5a8:	00000073          	ecall
+ ret
+ 5ac:	8082                	ret
+
+00000000000005ae <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ 5ae:	48a5                	li	a7,9
+ ecall
+ 5b0:	00000073          	ecall
+ ret
+ 5b4:	8082                	ret
+
+00000000000005b6 <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+ 5b6:	48a9                	li	a7,10
+ ecall
+ 5b8:	00000073          	ecall
+ ret
+ 5bc:	8082                	ret
+
+00000000000005be <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ 5be:	48ad                	li	a7,11
+ ecall
+ 5c0:	00000073          	ecall
+ ret
+ 5c4:	8082                	ret
+
+00000000000005c6 <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ 5c6:	48b1                	li	a7,12
+ ecall
+ 5c8:	00000073          	ecall
+ ret
+ 5cc:	8082                	ret
+
+00000000000005ce <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ 5ce:	48b5                	li	a7,13
+ ecall
+ 5d0:	00000073          	ecall
+ ret
+ 5d4:	8082                	ret
+
+00000000000005d6 <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ 5d6:	48b9                	li	a7,14
+ ecall
+ 5d8:	00000073          	ecall
+ ret
+ 5dc:	8082                	ret
+
+00000000000005de <setp>:
+.global setp
+setp:
+ li a7, SYS_setp
+ 5de:	48d9                	li	a7,22
+ ecall
+ 5e0:	00000073          	ecall
+ ret
+ 5e4:	8082                	ret
+
+00000000000005e6 <semget>:
+.global semget
+semget:
+ li a7, SYS_semget
+ 5e6:	48dd                	li	a7,23
+ ecall
+ 5e8:	00000073          	ecall
+ ret
+ 5ec:	8082                	ret
+
+00000000000005ee <semdown>:
+.global semdown
+semdown:
+ li a7, SYS_semdown
+ 5ee:	48e1                	li	a7,24
+ ecall
+ 5f0:	00000073          	ecall
+ ret
+ 5f4:	8082                	ret
+
+00000000000005f6 <semup>:
+.global semup
+semup:
+ li a7, SYS_semup
+ 5f6:	48e5                	li	a7,25
+ ecall
+ 5f8:	00000073          	ecall
+ ret
+ 5fc:	8082                	ret
+
+00000000000005fe <semclose>:
+.global semclose
+semclose:
+ li a7, SYS_semclose
+ 5fe:	48e9                	li	a7,26
+ ecall
+ 600:	00000073          	ecall
+ ret
+ 604:	8082                	ret
+
+0000000000000606 <timeout>:
+.global timeout
+timeout:
+ li a7, SYS_timeout
+ 606:	48ed                	li	a7,27
+ ecall
+ 608:	00000073          	ecall
+ ret
+ 60c:	8082                	ret
+
+000000000000060e <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+ 60e:	1101                	addi	sp,sp,-32
+ 610:	ec06                	sd	ra,24(sp)
+ 612:	e822                	sd	s0,16(sp)
+ 614:	1000                	addi	s0,sp,32
+ 616:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+ 61a:	4605                	li	a2,1
+ 61c:	fef40593          	addi	a1,s0,-17
+ 620:	00000097          	auipc	ra,0x0
+ 624:	f3e080e7          	jalr	-194(ra) # 55e <write>
+}
+ 628:	60e2                	ld	ra,24(sp)
+ 62a:	6442                	ld	s0,16(sp)
+ 62c:	6105                	addi	sp,sp,32
+ 62e:	8082                	ret
+
+0000000000000630 <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 630:	7139                	addi	sp,sp,-64
+ 632:	fc06                	sd	ra,56(sp)
+ 634:	f822                	sd	s0,48(sp)
+ 636:	f426                	sd	s1,40(sp)
+ 638:	f04a                	sd	s2,32(sp)
+ 63a:	ec4e                	sd	s3,24(sp)
+ 63c:	0080                	addi	s0,sp,64
+ 63e:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 640:	c299                	beqz	a3,646 <printint+0x16>
+ 642:	0805c963          	bltz	a1,6d4 <printint+0xa4>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 646:	2581                	sext.w	a1,a1
+  neg = 0;
+ 648:	4881                	li	a7,0
+ 64a:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+ 64e:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+ 650:	2601                	sext.w	a2,a2
+ 652:	00000517          	auipc	a0,0x0
+ 656:	50650513          	addi	a0,a0,1286 # b58 <digits>
+ 65a:	883a                	mv	a6,a4
+ 65c:	2705                	addiw	a4,a4,1
+ 65e:	02c5f7bb          	remuw	a5,a1,a2
+ 662:	1782                	slli	a5,a5,0x20
+ 664:	9381                	srli	a5,a5,0x20
+ 666:	97aa                	add	a5,a5,a0
+ 668:	0007c783          	lbu	a5,0(a5)
+ 66c:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+ 670:	0005879b          	sext.w	a5,a1
+ 674:	02c5d5bb          	divuw	a1,a1,a2
+ 678:	0685                	addi	a3,a3,1
+ 67a:	fec7f0e3          	bgeu	a5,a2,65a <printint+0x2a>
+  if(neg)
+ 67e:	00088c63          	beqz	a7,696 <printint+0x66>
+    buf[i++] = '-';
+ 682:	fd070793          	addi	a5,a4,-48
+ 686:	00878733          	add	a4,a5,s0
+ 68a:	02d00793          	li	a5,45
+ 68e:	fef70823          	sb	a5,-16(a4)
+ 692:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+ 696:	02e05863          	blez	a4,6c6 <printint+0x96>
+ 69a:	fc040793          	addi	a5,s0,-64
+ 69e:	00e78933          	add	s2,a5,a4
+ 6a2:	fff78993          	addi	s3,a5,-1
+ 6a6:	99ba                	add	s3,s3,a4
+ 6a8:	377d                	addiw	a4,a4,-1
+ 6aa:	1702                	slli	a4,a4,0x20
+ 6ac:	9301                	srli	a4,a4,0x20
+ 6ae:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+ 6b2:	fff94583          	lbu	a1,-1(s2)
+ 6b6:	8526                	mv	a0,s1
+ 6b8:	00000097          	auipc	ra,0x0
+ 6bc:	f56080e7          	jalr	-170(ra) # 60e <putc>
+  while(--i >= 0)
+ 6c0:	197d                	addi	s2,s2,-1
+ 6c2:	ff3918e3          	bne	s2,s3,6b2 <printint+0x82>
+}
+ 6c6:	70e2                	ld	ra,56(sp)
+ 6c8:	7442                	ld	s0,48(sp)
+ 6ca:	74a2                	ld	s1,40(sp)
+ 6cc:	7902                	ld	s2,32(sp)
+ 6ce:	69e2                	ld	s3,24(sp)
+ 6d0:	6121                	addi	sp,sp,64
+ 6d2:	8082                	ret
+    x = -xx;
+ 6d4:	40b005bb          	negw	a1,a1
+    neg = 1;
+ 6d8:	4885                	li	a7,1
+    x = -xx;
+ 6da:	bf85                	j	64a <printint+0x1a>
+
+00000000000006dc <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+ 6dc:	7119                	addi	sp,sp,-128
+ 6de:	fc86                	sd	ra,120(sp)
+ 6e0:	f8a2                	sd	s0,112(sp)
+ 6e2:	f4a6                	sd	s1,104(sp)
+ 6e4:	f0ca                	sd	s2,96(sp)
+ 6e6:	ecce                	sd	s3,88(sp)
+ 6e8:	e8d2                	sd	s4,80(sp)
+ 6ea:	e4d6                	sd	s5,72(sp)
+ 6ec:	e0da                	sd	s6,64(sp)
+ 6ee:	fc5e                	sd	s7,56(sp)
+ 6f0:	f862                	sd	s8,48(sp)
+ 6f2:	f466                	sd	s9,40(sp)
+ 6f4:	f06a                	sd	s10,32(sp)
+ 6f6:	ec6e                	sd	s11,24(sp)
+ 6f8:	0100                	addi	s0,sp,128
+  char *s;
+  int c, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+ 6fa:	0005c903          	lbu	s2,0(a1)
+ 6fe:	18090f63          	beqz	s2,89c <vprintf+0x1c0>
+ 702:	8aaa                	mv	s5,a0
+ 704:	8b32                	mv	s6,a2
+ 706:	00158493          	addi	s1,a1,1
+  state = 0;
+ 70a:	4981                	li	s3,0
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 70c:	02500a13          	li	s4,37
+ 710:	4c55                	li	s8,21
+ 712:	00000c97          	auipc	s9,0x0
+ 716:	3eec8c93          	addi	s9,s9,1006 # b00 <malloc+0x160>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c == 's'){
+        s = va_arg(ap, char*);
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 71a:	02800d93          	li	s11,40
+  putc(fd, 'x');
+ 71e:	4d41                	li	s10,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 720:	00000b97          	auipc	s7,0x0
+ 724:	438b8b93          	addi	s7,s7,1080 # b58 <digits>
+ 728:	a839                	j	746 <vprintf+0x6a>
+        putc(fd, c);
+ 72a:	85ca                	mv	a1,s2
+ 72c:	8556                	mv	a0,s5
+ 72e:	00000097          	auipc	ra,0x0
+ 732:	ee0080e7          	jalr	-288(ra) # 60e <putc>
+ 736:	a019                	j	73c <vprintf+0x60>
+    } else if(state == '%'){
+ 738:	01498d63          	beq	s3,s4,752 <vprintf+0x76>
+  for(i = 0; fmt[i]; i++){
+ 73c:	0485                	addi	s1,s1,1
+ 73e:	fff4c903          	lbu	s2,-1(s1)
+ 742:	14090d63          	beqz	s2,89c <vprintf+0x1c0>
+    if(state == 0){
+ 746:	fe0999e3          	bnez	s3,738 <vprintf+0x5c>
+      if(c == '%'){
+ 74a:	ff4910e3          	bne	s2,s4,72a <vprintf+0x4e>
+        state = '%';
+ 74e:	89d2                	mv	s3,s4
+ 750:	b7f5                	j	73c <vprintf+0x60>
+      if(c == 'd'){
+ 752:	11490c63          	beq	s2,s4,86a <vprintf+0x18e>
+ 756:	f9d9079b          	addiw	a5,s2,-99
+ 75a:	0ff7f793          	zext.b	a5,a5
+ 75e:	10fc6e63          	bltu	s8,a5,87a <vprintf+0x19e>
+ 762:	f9d9079b          	addiw	a5,s2,-99
+ 766:	0ff7f713          	zext.b	a4,a5
+ 76a:	10ec6863          	bltu	s8,a4,87a <vprintf+0x19e>
+ 76e:	00271793          	slli	a5,a4,0x2
+ 772:	97e6                	add	a5,a5,s9
+ 774:	439c                	lw	a5,0(a5)
+ 776:	97e6                	add	a5,a5,s9
+ 778:	8782                	jr	a5
+        printint(fd, va_arg(ap, int), 10, 1);
+ 77a:	008b0913          	addi	s2,s6,8
+ 77e:	4685                	li	a3,1
+ 780:	4629                	li	a2,10
+ 782:	000b2583          	lw	a1,0(s6)
+ 786:	8556                	mv	a0,s5
+ 788:	00000097          	auipc	ra,0x0
+ 78c:	ea8080e7          	jalr	-344(ra) # 630 <printint>
+ 790:	8b4a                	mv	s6,s2
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 792:	4981                	li	s3,0
+ 794:	b765                	j	73c <vprintf+0x60>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 796:	008b0913          	addi	s2,s6,8
+ 79a:	4681                	li	a3,0
+ 79c:	4629                	li	a2,10
+ 79e:	000b2583          	lw	a1,0(s6)
+ 7a2:	8556                	mv	a0,s5
+ 7a4:	00000097          	auipc	ra,0x0
+ 7a8:	e8c080e7          	jalr	-372(ra) # 630 <printint>
+ 7ac:	8b4a                	mv	s6,s2
+      state = 0;
+ 7ae:	4981                	li	s3,0
+ 7b0:	b771                	j	73c <vprintf+0x60>
+        printint(fd, va_arg(ap, int), 16, 0);
+ 7b2:	008b0913          	addi	s2,s6,8
+ 7b6:	4681                	li	a3,0
+ 7b8:	866a                	mv	a2,s10
+ 7ba:	000b2583          	lw	a1,0(s6)
+ 7be:	8556                	mv	a0,s5
+ 7c0:	00000097          	auipc	ra,0x0
+ 7c4:	e70080e7          	jalr	-400(ra) # 630 <printint>
+ 7c8:	8b4a                	mv	s6,s2
+      state = 0;
+ 7ca:	4981                	li	s3,0
+ 7cc:	bf85                	j	73c <vprintf+0x60>
+        printptr(fd, va_arg(ap, uint64));
+ 7ce:	008b0793          	addi	a5,s6,8
+ 7d2:	f8f43423          	sd	a5,-120(s0)
+ 7d6:	000b3983          	ld	s3,0(s6)
+  putc(fd, '0');
+ 7da:	03000593          	li	a1,48
+ 7de:	8556                	mv	a0,s5
+ 7e0:	00000097          	auipc	ra,0x0
+ 7e4:	e2e080e7          	jalr	-466(ra) # 60e <putc>
+  putc(fd, 'x');
+ 7e8:	07800593          	li	a1,120
+ 7ec:	8556                	mv	a0,s5
+ 7ee:	00000097          	auipc	ra,0x0
+ 7f2:	e20080e7          	jalr	-480(ra) # 60e <putc>
+ 7f6:	896a                	mv	s2,s10
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 7f8:	03c9d793          	srli	a5,s3,0x3c
+ 7fc:	97de                	add	a5,a5,s7
+ 7fe:	0007c583          	lbu	a1,0(a5)
+ 802:	8556                	mv	a0,s5
+ 804:	00000097          	auipc	ra,0x0
+ 808:	e0a080e7          	jalr	-502(ra) # 60e <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+ 80c:	0992                	slli	s3,s3,0x4
+ 80e:	397d                	addiw	s2,s2,-1
+ 810:	fe0914e3          	bnez	s2,7f8 <vprintf+0x11c>
+        printptr(fd, va_arg(ap, uint64));
+ 814:	f8843b03          	ld	s6,-120(s0)
+      state = 0;
+ 818:	4981                	li	s3,0
+ 81a:	b70d                	j	73c <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 81c:	008b0913          	addi	s2,s6,8
+ 820:	000b3983          	ld	s3,0(s6)
+        if(s == 0)
+ 824:	02098163          	beqz	s3,846 <vprintf+0x16a>
+        while(*s != 0){
+ 828:	0009c583          	lbu	a1,0(s3)
+ 82c:	c5ad                	beqz	a1,896 <vprintf+0x1ba>
+          putc(fd, *s);
+ 82e:	8556                	mv	a0,s5
+ 830:	00000097          	auipc	ra,0x0
+ 834:	dde080e7          	jalr	-546(ra) # 60e <putc>
+          s++;
+ 838:	0985                	addi	s3,s3,1
+        while(*s != 0){
+ 83a:	0009c583          	lbu	a1,0(s3)
+ 83e:	f9e5                	bnez	a1,82e <vprintf+0x152>
+        s = va_arg(ap, char*);
+ 840:	8b4a                	mv	s6,s2
+      state = 0;
+ 842:	4981                	li	s3,0
+ 844:	bde5                	j	73c <vprintf+0x60>
+          s = "(null)";
+ 846:	00000997          	auipc	s3,0x0
+ 84a:	2b298993          	addi	s3,s3,690 # af8 <malloc+0x158>
+        while(*s != 0){
+ 84e:	85ee                	mv	a1,s11
+ 850:	bff9                	j	82e <vprintf+0x152>
+        putc(fd, va_arg(ap, uint));
+ 852:	008b0913          	addi	s2,s6,8
+ 856:	000b4583          	lbu	a1,0(s6)
+ 85a:	8556                	mv	a0,s5
+ 85c:	00000097          	auipc	ra,0x0
+ 860:	db2080e7          	jalr	-590(ra) # 60e <putc>
+ 864:	8b4a                	mv	s6,s2
+      state = 0;
+ 866:	4981                	li	s3,0
+ 868:	bdd1                	j	73c <vprintf+0x60>
+        putc(fd, c);
+ 86a:	85d2                	mv	a1,s4
+ 86c:	8556                	mv	a0,s5
+ 86e:	00000097          	auipc	ra,0x0
+ 872:	da0080e7          	jalr	-608(ra) # 60e <putc>
+      state = 0;
+ 876:	4981                	li	s3,0
+ 878:	b5d1                	j	73c <vprintf+0x60>
+        putc(fd, '%');
+ 87a:	85d2                	mv	a1,s4
+ 87c:	8556                	mv	a0,s5
+ 87e:	00000097          	auipc	ra,0x0
+ 882:	d90080e7          	jalr	-624(ra) # 60e <putc>
+        putc(fd, c);
+ 886:	85ca                	mv	a1,s2
+ 888:	8556                	mv	a0,s5
+ 88a:	00000097          	auipc	ra,0x0
+ 88e:	d84080e7          	jalr	-636(ra) # 60e <putc>
+      state = 0;
+ 892:	4981                	li	s3,0
+ 894:	b565                	j	73c <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 896:	8b4a                	mv	s6,s2
+      state = 0;
+ 898:	4981                	li	s3,0
+ 89a:	b54d                	j	73c <vprintf+0x60>
+    }
+  }
+}
+ 89c:	70e6                	ld	ra,120(sp)
+ 89e:	7446                	ld	s0,112(sp)
+ 8a0:	74a6                	ld	s1,104(sp)
+ 8a2:	7906                	ld	s2,96(sp)
+ 8a4:	69e6                	ld	s3,88(sp)
+ 8a6:	6a46                	ld	s4,80(sp)
+ 8a8:	6aa6                	ld	s5,72(sp)
+ 8aa:	6b06                	ld	s6,64(sp)
+ 8ac:	7be2                	ld	s7,56(sp)
+ 8ae:	7c42                	ld	s8,48(sp)
+ 8b0:	7ca2                	ld	s9,40(sp)
+ 8b2:	7d02                	ld	s10,32(sp)
+ 8b4:	6de2                	ld	s11,24(sp)
+ 8b6:	6109                	addi	sp,sp,128
+ 8b8:	8082                	ret
+
+00000000000008ba <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+ 8ba:	715d                	addi	sp,sp,-80
+ 8bc:	ec06                	sd	ra,24(sp)
+ 8be:	e822                	sd	s0,16(sp)
+ 8c0:	1000                	addi	s0,sp,32
+ 8c2:	e010                	sd	a2,0(s0)
+ 8c4:	e414                	sd	a3,8(s0)
+ 8c6:	e818                	sd	a4,16(s0)
+ 8c8:	ec1c                	sd	a5,24(s0)
+ 8ca:	03043023          	sd	a6,32(s0)
+ 8ce:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 8d2:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+ 8d6:	8622                	mv	a2,s0
+ 8d8:	00000097          	auipc	ra,0x0
+ 8dc:	e04080e7          	jalr	-508(ra) # 6dc <vprintf>
+}
+ 8e0:	60e2                	ld	ra,24(sp)
+ 8e2:	6442                	ld	s0,16(sp)
+ 8e4:	6161                	addi	sp,sp,80
+ 8e6:	8082                	ret
+
+00000000000008e8 <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+ 8e8:	711d                	addi	sp,sp,-96
+ 8ea:	ec06                	sd	ra,24(sp)
+ 8ec:	e822                	sd	s0,16(sp)
+ 8ee:	1000                	addi	s0,sp,32
+ 8f0:	e40c                	sd	a1,8(s0)
+ 8f2:	e810                	sd	a2,16(s0)
+ 8f4:	ec14                	sd	a3,24(s0)
+ 8f6:	f018                	sd	a4,32(s0)
+ 8f8:	f41c                	sd	a5,40(s0)
+ 8fa:	03043823          	sd	a6,48(s0)
+ 8fe:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 902:	00840613          	addi	a2,s0,8
+ 906:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+ 90a:	85aa                	mv	a1,a0
+ 90c:	4505                	li	a0,1
+ 90e:	00000097          	auipc	ra,0x0
+ 912:	dce080e7          	jalr	-562(ra) # 6dc <vprintf>
+}
+ 916:	60e2                	ld	ra,24(sp)
+ 918:	6442                	ld	s0,16(sp)
+ 91a:	6125                	addi	sp,sp,96
+ 91c:	8082                	ret
+
+000000000000091e <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 91e:	1141                	addi	sp,sp,-16
+ 920:	e422                	sd	s0,8(sp)
+ 922:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 924:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 928:	00000797          	auipc	a5,0x0
+ 92c:	2487b783          	ld	a5,584(a5) # b70 <freep>
+ 930:	a02d                	j	95a <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 932:	4618                	lw	a4,8(a2)
+ 934:	9f2d                	addw	a4,a4,a1
+ 936:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 93a:	6398                	ld	a4,0(a5)
+ 93c:	6310                	ld	a2,0(a4)
+ 93e:	a83d                	j	97c <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 940:	ff852703          	lw	a4,-8(a0)
+ 944:	9f31                	addw	a4,a4,a2
+ 946:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+ 948:	ff053683          	ld	a3,-16(a0)
+ 94c:	a091                	j	990 <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 94e:	6398                	ld	a4,0(a5)
+ 950:	00e7e463          	bltu	a5,a4,958 <free+0x3a>
+ 954:	00e6ea63          	bltu	a3,a4,968 <free+0x4a>
+{
+ 958:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 95a:	fed7fae3          	bgeu	a5,a3,94e <free+0x30>
+ 95e:	6398                	ld	a4,0(a5)
+ 960:	00e6e463          	bltu	a3,a4,968 <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 964:	fee7eae3          	bltu	a5,a4,958 <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+ 968:	ff852583          	lw	a1,-8(a0)
+ 96c:	6390                	ld	a2,0(a5)
+ 96e:	02059813          	slli	a6,a1,0x20
+ 972:	01c85713          	srli	a4,a6,0x1c
+ 976:	9736                	add	a4,a4,a3
+ 978:	fae60de3          	beq	a2,a4,932 <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 97c:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+ 980:	4790                	lw	a2,8(a5)
+ 982:	02061593          	slli	a1,a2,0x20
+ 986:	01c5d713          	srli	a4,a1,0x1c
+ 98a:	973e                	add	a4,a4,a5
+ 98c:	fae68ae3          	beq	a3,a4,940 <free+0x22>
+    p->s.ptr = bp->s.ptr;
+ 990:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 992:	00000717          	auipc	a4,0x0
+ 996:	1cf73f23          	sd	a5,478(a4) # b70 <freep>
+}
+ 99a:	6422                	ld	s0,8(sp)
+ 99c:	0141                	addi	sp,sp,16
+ 99e:	8082                	ret
+
+00000000000009a0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 9a0:	7139                	addi	sp,sp,-64
+ 9a2:	fc06                	sd	ra,56(sp)
+ 9a4:	f822                	sd	s0,48(sp)
+ 9a6:	f426                	sd	s1,40(sp)
+ 9a8:	f04a                	sd	s2,32(sp)
+ 9aa:	ec4e                	sd	s3,24(sp)
+ 9ac:	e852                	sd	s4,16(sp)
+ 9ae:	e456                	sd	s5,8(sp)
+ 9b0:	e05a                	sd	s6,0(sp)
+ 9b2:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 9b4:	02051493          	slli	s1,a0,0x20
+ 9b8:	9081                	srli	s1,s1,0x20
+ 9ba:	04bd                	addi	s1,s1,15
+ 9bc:	8091                	srli	s1,s1,0x4
+ 9be:	0014899b          	addiw	s3,s1,1
+ 9c2:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+ 9c4:	00000517          	auipc	a0,0x0
+ 9c8:	1ac53503          	ld	a0,428(a0) # b70 <freep>
+ 9cc:	c515                	beqz	a0,9f8 <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 9ce:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 9d0:	4798                	lw	a4,8(a5)
+ 9d2:	02977f63          	bgeu	a4,s1,a10 <malloc+0x70>
+ 9d6:	8a4e                	mv	s4,s3
+ 9d8:	0009871b          	sext.w	a4,s3
+ 9dc:	6685                	lui	a3,0x1
+ 9de:	00d77363          	bgeu	a4,a3,9e4 <malloc+0x44>
+ 9e2:	6a05                	lui	s4,0x1
+ 9e4:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+ 9e8:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 9ec:	00000917          	auipc	s2,0x0
+ 9f0:	18490913          	addi	s2,s2,388 # b70 <freep>
+  if(p == (char*)-1)
+ 9f4:	5afd                	li	s5,-1
+ 9f6:	a895                	j	a6a <malloc+0xca>
+    base.s.ptr = freep = prevp = &base;
+ 9f8:	00000797          	auipc	a5,0x0
+ 9fc:	19078793          	addi	a5,a5,400 # b88 <base>
+ a00:	00000717          	auipc	a4,0x0
+ a04:	16f73823          	sd	a5,368(a4) # b70 <freep>
+ a08:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+ a0a:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+ a0e:	b7e1                	j	9d6 <malloc+0x36>
+      if(p->s.size == nunits)
+ a10:	02e48c63          	beq	s1,a4,a48 <malloc+0xa8>
+        p->s.size -= nunits;
+ a14:	4137073b          	subw	a4,a4,s3
+ a18:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+ a1a:	02071693          	slli	a3,a4,0x20
+ a1e:	01c6d713          	srli	a4,a3,0x1c
+ a22:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+ a24:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+ a28:	00000717          	auipc	a4,0x0
+ a2c:	14a73423          	sd	a0,328(a4) # b70 <freep>
+      return (void*)(p + 1);
+ a30:	01078513          	addi	a0,a5,16
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ a34:	70e2                	ld	ra,56(sp)
+ a36:	7442                	ld	s0,48(sp)
+ a38:	74a2                	ld	s1,40(sp)
+ a3a:	7902                	ld	s2,32(sp)
+ a3c:	69e2                	ld	s3,24(sp)
+ a3e:	6a42                	ld	s4,16(sp)
+ a40:	6aa2                	ld	s5,8(sp)
+ a42:	6b02                	ld	s6,0(sp)
+ a44:	6121                	addi	sp,sp,64
+ a46:	8082                	ret
+        prevp->s.ptr = p->s.ptr;
+ a48:	6398                	ld	a4,0(a5)
+ a4a:	e118                	sd	a4,0(a0)
+ a4c:	bff1                	j	a28 <malloc+0x88>
+  hp->s.size = nu;
+ a4e:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+ a52:	0541                	addi	a0,a0,16
+ a54:	00000097          	auipc	ra,0x0
+ a58:	eca080e7          	jalr	-310(ra) # 91e <free>
+  return freep;
+ a5c:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+ a60:	d971                	beqz	a0,a34 <malloc+0x94>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ a62:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ a64:	4798                	lw	a4,8(a5)
+ a66:	fa9775e3          	bgeu	a4,s1,a10 <malloc+0x70>
+    if(p == freep)
+ a6a:	00093703          	ld	a4,0(s2)
+ a6e:	853e                	mv	a0,a5
+ a70:	fef719e3          	bne	a4,a5,a62 <malloc+0xc2>
+  p = sbrk(nu * sizeof(Header));
+ a74:	8552                	mv	a0,s4
+ a76:	00000097          	auipc	ra,0x0
+ a7a:	b50080e7          	jalr	-1200(ra) # 5c6 <sbrk>
+  if(p == (char*)-1)
+ a7e:	fd5518e3          	bne	a0,s5,a4e <malloc+0xae>
+        return 0;
+ a82:	4501                	li	a0,0
+ a84:	bf45                	j	a34 <malloc+0x94>
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/ls.d os-workshop/user/ls.d
--- xv6-riscv/user/ls.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/ls.d	2022-05-28 22:34:34.000000000 -0300
@@ -0,0 +1 @@
+user/ls.o: user/ls.c kernel/types.h kernel/stat.h user/user.h kernel/fs.h
Binary files xv6-riscv/user/ls.o and os-workshop/user/ls.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/ls.sym os-workshop/user/ls.sym
--- xv6-riscv/user/ls.sym	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/ls.sym	2022-05-28 22:34:34.000000000 -0300
@@ -0,0 +1,79 @@
+0000000000000000 .text
+0000000000000a88 .rodata
+0000000000000b70 .sbss
+0000000000000b78 .bss
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_aranges
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_line
+0000000000000000 .debug_frame
+0000000000000000 .debug_str
+0000000000000000 .debug_line_str
+0000000000000000 .debug_loclists
+0000000000000000 .debug_rnglists
+0000000000000000 ls.c
+0000000000000b78 buf.0
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+000000000000060e putc
+0000000000000630 printint
+0000000000000b58 digits
+0000000000000000 umalloc.c
+0000000000000b70 freep
+0000000000000b88 base
+00000000000002d2 strcpy
+0000000000000000 fmtname
+00000000000008e8 printf
+0000000000001369 __global_pointer$
+000000000000048c memmove
+0000000000000586 mknod
+00000000000005ee semdown
+000000000000038a gets
+0000000000000b69 __SDATA_BEGIN__
+00000000000005e6 semget
+00000000000005be getpid
+000000000000051e memcpy
+00000000000009a0 malloc
+00000000000005fe semclose
+00000000000005ce sleep
+000000000000054e pipe
+000000000000055e write
+0000000000000596 fstat
+00000000000008ba fprintf
+000000000000056e kill
+00000000000006dc vprintf
+00000000000005ae chdir
+0000000000000576 exec
+0000000000000546 wait
+0000000000000556 read
+000000000000058e unlink
+00000000000004e4 memcmp
+0000000000000536 fork
+0000000000000b98 __BSS_END__
+00000000000005c6 sbrk
+00000000000005d6 uptime
+0000000000000b69 __bss_start
+0000000000000344 memset
+0000000000000278 main
+0000000000000606 timeout
+00000000000002ee strcmp
+00000000000005b6 dup
+0000000000000b69 __DATA_BEGIN__
+00000000000003fe stat
+0000000000000b69 _edata
+00000000000005de setp
+0000000000000b98 _end
+000000000000059e link
+00000000000000b4 ls
+000000000000053e exit
+0000000000000444 atoi
+000000000000031a strlen
+000000000000057e open
+00000000000005f6 semup
+0000000000000366 strchr
+00000000000005a6 mkdir
+0000000000000566 close
+000000000000091e free
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/midprior.asm os-workshop/user/midprior.asm
--- xv6-riscv/user/midprior.asm	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/midprior.asm	2022-05-28 22:34:30.000000000 -0300
@@ -0,0 +1,1344 @@
+
+user/_midprior:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <main>:
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main() {
+   0:	1141                	addi	sp,sp,-16
+   2:	e406                	sd	ra,8(sp)
+   4:	e022                	sd	s0,0(sp)
+   6:	0800                	addi	s0,sp,16
+  for(;;){
+    setp(2);
+   8:	4509                	li	a0,2
+   a:	00000097          	auipc	ra,0x0
+   e:	316080e7          	jalr	790(ra) # 320 <setp>
+  for(;;){
+  12:	bfdd                	j	8 <main+0x8>
+
+0000000000000014 <strcpy>:
+#include "kernel/fcntl.h"
+#include "user/user.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  14:	1141                	addi	sp,sp,-16
+  16:	e422                	sd	s0,8(sp)
+  18:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  1a:	87aa                	mv	a5,a0
+  1c:	0585                	addi	a1,a1,1
+  1e:	0785                	addi	a5,a5,1
+  20:	fff5c703          	lbu	a4,-1(a1)
+  24:	fee78fa3          	sb	a4,-1(a5)
+  28:	fb75                	bnez	a4,1c <strcpy+0x8>
+    ;
+  return os;
+}
+  2a:	6422                	ld	s0,8(sp)
+  2c:	0141                	addi	sp,sp,16
+  2e:	8082                	ret
+
+0000000000000030 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  30:	1141                	addi	sp,sp,-16
+  32:	e422                	sd	s0,8(sp)
+  34:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+  36:	00054783          	lbu	a5,0(a0)
+  3a:	cb91                	beqz	a5,4e <strcmp+0x1e>
+  3c:	0005c703          	lbu	a4,0(a1)
+  40:	00f71763          	bne	a4,a5,4e <strcmp+0x1e>
+    p++, q++;
+  44:	0505                	addi	a0,a0,1
+  46:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+  48:	00054783          	lbu	a5,0(a0)
+  4c:	fbe5                	bnez	a5,3c <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+  4e:	0005c503          	lbu	a0,0(a1)
+}
+  52:	40a7853b          	subw	a0,a5,a0
+  56:	6422                	ld	s0,8(sp)
+  58:	0141                	addi	sp,sp,16
+  5a:	8082                	ret
+
+000000000000005c <strlen>:
+
+uint
+strlen(const char *s)
+{
+  5c:	1141                	addi	sp,sp,-16
+  5e:	e422                	sd	s0,8(sp)
+  60:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+  62:	00054783          	lbu	a5,0(a0)
+  66:	cf91                	beqz	a5,82 <strlen+0x26>
+  68:	0505                	addi	a0,a0,1
+  6a:	87aa                	mv	a5,a0
+  6c:	4685                	li	a3,1
+  6e:	9e89                	subw	a3,a3,a0
+  70:	00f6853b          	addw	a0,a3,a5
+  74:	0785                	addi	a5,a5,1
+  76:	fff7c703          	lbu	a4,-1(a5)
+  7a:	fb7d                	bnez	a4,70 <strlen+0x14>
+    ;
+  return n;
+}
+  7c:	6422                	ld	s0,8(sp)
+  7e:	0141                	addi	sp,sp,16
+  80:	8082                	ret
+  for(n = 0; s[n]; n++)
+  82:	4501                	li	a0,0
+  84:	bfe5                	j	7c <strlen+0x20>
+
+0000000000000086 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  86:	1141                	addi	sp,sp,-16
+  88:	e422                	sd	s0,8(sp)
+  8a:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+  8c:	ca19                	beqz	a2,a2 <memset+0x1c>
+  8e:	87aa                	mv	a5,a0
+  90:	1602                	slli	a2,a2,0x20
+  92:	9201                	srli	a2,a2,0x20
+  94:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+  98:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+  9c:	0785                	addi	a5,a5,1
+  9e:	fee79de3          	bne	a5,a4,98 <memset+0x12>
+  }
+  return dst;
+}
+  a2:	6422                	ld	s0,8(sp)
+  a4:	0141                	addi	sp,sp,16
+  a6:	8082                	ret
+
+00000000000000a8 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+  a8:	1141                	addi	sp,sp,-16
+  aa:	e422                	sd	s0,8(sp)
+  ac:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+  ae:	00054783          	lbu	a5,0(a0)
+  b2:	cb99                	beqz	a5,c8 <strchr+0x20>
+    if(*s == c)
+  b4:	00f58763          	beq	a1,a5,c2 <strchr+0x1a>
+  for(; *s; s++)
+  b8:	0505                	addi	a0,a0,1
+  ba:	00054783          	lbu	a5,0(a0)
+  be:	fbfd                	bnez	a5,b4 <strchr+0xc>
+      return (char*)s;
+  return 0;
+  c0:	4501                	li	a0,0
+}
+  c2:	6422                	ld	s0,8(sp)
+  c4:	0141                	addi	sp,sp,16
+  c6:	8082                	ret
+  return 0;
+  c8:	4501                	li	a0,0
+  ca:	bfe5                	j	c2 <strchr+0x1a>
+
+00000000000000cc <gets>:
+
+char*
+gets(char *buf, int max)
+{
+  cc:	711d                	addi	sp,sp,-96
+  ce:	ec86                	sd	ra,88(sp)
+  d0:	e8a2                	sd	s0,80(sp)
+  d2:	e4a6                	sd	s1,72(sp)
+  d4:	e0ca                	sd	s2,64(sp)
+  d6:	fc4e                	sd	s3,56(sp)
+  d8:	f852                	sd	s4,48(sp)
+  da:	f456                	sd	s5,40(sp)
+  dc:	f05a                	sd	s6,32(sp)
+  de:	ec5e                	sd	s7,24(sp)
+  e0:	1080                	addi	s0,sp,96
+  e2:	8baa                	mv	s7,a0
+  e4:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+  e6:	892a                	mv	s2,a0
+  e8:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+  ea:	4aa9                	li	s5,10
+  ec:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+  ee:	89a6                	mv	s3,s1
+  f0:	2485                	addiw	s1,s1,1
+  f2:	0344d863          	bge	s1,s4,122 <gets+0x56>
+    cc = read(0, &c, 1);
+  f6:	4605                	li	a2,1
+  f8:	faf40593          	addi	a1,s0,-81
+  fc:	4501                	li	a0,0
+  fe:	00000097          	auipc	ra,0x0
+ 102:	19a080e7          	jalr	410(ra) # 298 <read>
+    if(cc < 1)
+ 106:	00a05e63          	blez	a0,122 <gets+0x56>
+    buf[i++] = c;
+ 10a:	faf44783          	lbu	a5,-81(s0)
+ 10e:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+ 112:	01578763          	beq	a5,s5,120 <gets+0x54>
+ 116:	0905                	addi	s2,s2,1
+ 118:	fd679be3          	bne	a5,s6,ee <gets+0x22>
+  for(i=0; i+1 < max; ){
+ 11c:	89a6                	mv	s3,s1
+ 11e:	a011                	j	122 <gets+0x56>
+ 120:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+ 122:	99de                	add	s3,s3,s7
+ 124:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+ 128:	855e                	mv	a0,s7
+ 12a:	60e6                	ld	ra,88(sp)
+ 12c:	6446                	ld	s0,80(sp)
+ 12e:	64a6                	ld	s1,72(sp)
+ 130:	6906                	ld	s2,64(sp)
+ 132:	79e2                	ld	s3,56(sp)
+ 134:	7a42                	ld	s4,48(sp)
+ 136:	7aa2                	ld	s5,40(sp)
+ 138:	7b02                	ld	s6,32(sp)
+ 13a:	6be2                	ld	s7,24(sp)
+ 13c:	6125                	addi	sp,sp,96
+ 13e:	8082                	ret
+
+0000000000000140 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 140:	1101                	addi	sp,sp,-32
+ 142:	ec06                	sd	ra,24(sp)
+ 144:	e822                	sd	s0,16(sp)
+ 146:	e426                	sd	s1,8(sp)
+ 148:	e04a                	sd	s2,0(sp)
+ 14a:	1000                	addi	s0,sp,32
+ 14c:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 14e:	4581                	li	a1,0
+ 150:	00000097          	auipc	ra,0x0
+ 154:	170080e7          	jalr	368(ra) # 2c0 <open>
+  if(fd < 0)
+ 158:	02054563          	bltz	a0,182 <stat+0x42>
+ 15c:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+ 15e:	85ca                	mv	a1,s2
+ 160:	00000097          	auipc	ra,0x0
+ 164:	178080e7          	jalr	376(ra) # 2d8 <fstat>
+ 168:	892a                	mv	s2,a0
+  close(fd);
+ 16a:	8526                	mv	a0,s1
+ 16c:	00000097          	auipc	ra,0x0
+ 170:	13c080e7          	jalr	316(ra) # 2a8 <close>
+  return r;
+}
+ 174:	854a                	mv	a0,s2
+ 176:	60e2                	ld	ra,24(sp)
+ 178:	6442                	ld	s0,16(sp)
+ 17a:	64a2                	ld	s1,8(sp)
+ 17c:	6902                	ld	s2,0(sp)
+ 17e:	6105                	addi	sp,sp,32
+ 180:	8082                	ret
+    return -1;
+ 182:	597d                	li	s2,-1
+ 184:	bfc5                	j	174 <stat+0x34>
+
+0000000000000186 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 186:	1141                	addi	sp,sp,-16
+ 188:	e422                	sd	s0,8(sp)
+ 18a:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 18c:	00054683          	lbu	a3,0(a0)
+ 190:	fd06879b          	addiw	a5,a3,-48
+ 194:	0ff7f793          	zext.b	a5,a5
+ 198:	4625                	li	a2,9
+ 19a:	02f66863          	bltu	a2,a5,1ca <atoi+0x44>
+ 19e:	872a                	mv	a4,a0
+  n = 0;
+ 1a0:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+ 1a2:	0705                	addi	a4,a4,1
+ 1a4:	0025179b          	slliw	a5,a0,0x2
+ 1a8:	9fa9                	addw	a5,a5,a0
+ 1aa:	0017979b          	slliw	a5,a5,0x1
+ 1ae:	9fb5                	addw	a5,a5,a3
+ 1b0:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+ 1b4:	00074683          	lbu	a3,0(a4)
+ 1b8:	fd06879b          	addiw	a5,a3,-48
+ 1bc:	0ff7f793          	zext.b	a5,a5
+ 1c0:	fef671e3          	bgeu	a2,a5,1a2 <atoi+0x1c>
+  return n;
+}
+ 1c4:	6422                	ld	s0,8(sp)
+ 1c6:	0141                	addi	sp,sp,16
+ 1c8:	8082                	ret
+  n = 0;
+ 1ca:	4501                	li	a0,0
+ 1cc:	bfe5                	j	1c4 <atoi+0x3e>
+
+00000000000001ce <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 1ce:	1141                	addi	sp,sp,-16
+ 1d0:	e422                	sd	s0,8(sp)
+ 1d2:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+ 1d4:	02b57463          	bgeu	a0,a1,1fc <memmove+0x2e>
+    while(n-- > 0)
+ 1d8:	00c05f63          	blez	a2,1f6 <memmove+0x28>
+ 1dc:	1602                	slli	a2,a2,0x20
+ 1de:	9201                	srli	a2,a2,0x20
+ 1e0:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+ 1e4:	872a                	mv	a4,a0
+      *dst++ = *src++;
+ 1e6:	0585                	addi	a1,a1,1
+ 1e8:	0705                	addi	a4,a4,1
+ 1ea:	fff5c683          	lbu	a3,-1(a1)
+ 1ee:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+ 1f2:	fee79ae3          	bne	a5,a4,1e6 <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+ 1f6:	6422                	ld	s0,8(sp)
+ 1f8:	0141                	addi	sp,sp,16
+ 1fa:	8082                	ret
+    dst += n;
+ 1fc:	00c50733          	add	a4,a0,a2
+    src += n;
+ 200:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+ 202:	fec05ae3          	blez	a2,1f6 <memmove+0x28>
+ 206:	fff6079b          	addiw	a5,a2,-1
+ 20a:	1782                	slli	a5,a5,0x20
+ 20c:	9381                	srli	a5,a5,0x20
+ 20e:	fff7c793          	not	a5,a5
+ 212:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+ 214:	15fd                	addi	a1,a1,-1
+ 216:	177d                	addi	a4,a4,-1
+ 218:	0005c683          	lbu	a3,0(a1)
+ 21c:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+ 220:	fee79ae3          	bne	a5,a4,214 <memmove+0x46>
+ 224:	bfc9                	j	1f6 <memmove+0x28>
+
+0000000000000226 <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+ 226:	1141                	addi	sp,sp,-16
+ 228:	e422                	sd	s0,8(sp)
+ 22a:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+ 22c:	ca05                	beqz	a2,25c <memcmp+0x36>
+ 22e:	fff6069b          	addiw	a3,a2,-1
+ 232:	1682                	slli	a3,a3,0x20
+ 234:	9281                	srli	a3,a3,0x20
+ 236:	0685                	addi	a3,a3,1
+ 238:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+ 23a:	00054783          	lbu	a5,0(a0)
+ 23e:	0005c703          	lbu	a4,0(a1)
+ 242:	00e79863          	bne	a5,a4,252 <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+ 246:	0505                	addi	a0,a0,1
+    p2++;
+ 248:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+ 24a:	fed518e3          	bne	a0,a3,23a <memcmp+0x14>
+  }
+  return 0;
+ 24e:	4501                	li	a0,0
+ 250:	a019                	j	256 <memcmp+0x30>
+      return *p1 - *p2;
+ 252:	40e7853b          	subw	a0,a5,a4
+}
+ 256:	6422                	ld	s0,8(sp)
+ 258:	0141                	addi	sp,sp,16
+ 25a:	8082                	ret
+  return 0;
+ 25c:	4501                	li	a0,0
+ 25e:	bfe5                	j	256 <memcmp+0x30>
+
+0000000000000260 <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+ 260:	1141                	addi	sp,sp,-16
+ 262:	e406                	sd	ra,8(sp)
+ 264:	e022                	sd	s0,0(sp)
+ 266:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+ 268:	00000097          	auipc	ra,0x0
+ 26c:	f66080e7          	jalr	-154(ra) # 1ce <memmove>
+}
+ 270:	60a2                	ld	ra,8(sp)
+ 272:	6402                	ld	s0,0(sp)
+ 274:	0141                	addi	sp,sp,16
+ 276:	8082                	ret
+
+0000000000000278 <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ 278:	4885                	li	a7,1
+ ecall
+ 27a:	00000073          	ecall
+ ret
+ 27e:	8082                	ret
+
+0000000000000280 <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+ 280:	4889                	li	a7,2
+ ecall
+ 282:	00000073          	ecall
+ ret
+ 286:	8082                	ret
+
+0000000000000288 <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+ 288:	488d                	li	a7,3
+ ecall
+ 28a:	00000073          	ecall
+ ret
+ 28e:	8082                	ret
+
+0000000000000290 <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ 290:	4891                	li	a7,4
+ ecall
+ 292:	00000073          	ecall
+ ret
+ 296:	8082                	ret
+
+0000000000000298 <read>:
+.global read
+read:
+ li a7, SYS_read
+ 298:	4895                	li	a7,5
+ ecall
+ 29a:	00000073          	ecall
+ ret
+ 29e:	8082                	ret
+
+00000000000002a0 <write>:
+.global write
+write:
+ li a7, SYS_write
+ 2a0:	48c1                	li	a7,16
+ ecall
+ 2a2:	00000073          	ecall
+ ret
+ 2a6:	8082                	ret
+
+00000000000002a8 <close>:
+.global close
+close:
+ li a7, SYS_close
+ 2a8:	48d5                	li	a7,21
+ ecall
+ 2aa:	00000073          	ecall
+ ret
+ 2ae:	8082                	ret
+
+00000000000002b0 <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+ 2b0:	4899                	li	a7,6
+ ecall
+ 2b2:	00000073          	ecall
+ ret
+ 2b6:	8082                	ret
+
+00000000000002b8 <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+ 2b8:	489d                	li	a7,7
+ ecall
+ 2ba:	00000073          	ecall
+ ret
+ 2be:	8082                	ret
+
+00000000000002c0 <open>:
+.global open
+open:
+ li a7, SYS_open
+ 2c0:	48bd                	li	a7,15
+ ecall
+ 2c2:	00000073          	ecall
+ ret
+ 2c6:	8082                	ret
+
+00000000000002c8 <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ 2c8:	48c5                	li	a7,17
+ ecall
+ 2ca:	00000073          	ecall
+ ret
+ 2ce:	8082                	ret
+
+00000000000002d0 <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ 2d0:	48c9                	li	a7,18
+ ecall
+ 2d2:	00000073          	ecall
+ ret
+ 2d6:	8082                	ret
+
+00000000000002d8 <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ 2d8:	48a1                	li	a7,8
+ ecall
+ 2da:	00000073          	ecall
+ ret
+ 2de:	8082                	ret
+
+00000000000002e0 <link>:
+.global link
+link:
+ li a7, SYS_link
+ 2e0:	48cd                	li	a7,19
+ ecall
+ 2e2:	00000073          	ecall
+ ret
+ 2e6:	8082                	ret
+
+00000000000002e8 <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ 2e8:	48d1                	li	a7,20
+ ecall
+ 2ea:	00000073          	ecall
+ ret
+ 2ee:	8082                	ret
+
+00000000000002f0 <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ 2f0:	48a5                	li	a7,9
+ ecall
+ 2f2:	00000073          	ecall
+ ret
+ 2f6:	8082                	ret
+
+00000000000002f8 <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+ 2f8:	48a9                	li	a7,10
+ ecall
+ 2fa:	00000073          	ecall
+ ret
+ 2fe:	8082                	ret
+
+0000000000000300 <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ 300:	48ad                	li	a7,11
+ ecall
+ 302:	00000073          	ecall
+ ret
+ 306:	8082                	ret
+
+0000000000000308 <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ 308:	48b1                	li	a7,12
+ ecall
+ 30a:	00000073          	ecall
+ ret
+ 30e:	8082                	ret
+
+0000000000000310 <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ 310:	48b5                	li	a7,13
+ ecall
+ 312:	00000073          	ecall
+ ret
+ 316:	8082                	ret
+
+0000000000000318 <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ 318:	48b9                	li	a7,14
+ ecall
+ 31a:	00000073          	ecall
+ ret
+ 31e:	8082                	ret
+
+0000000000000320 <setp>:
+.global setp
+setp:
+ li a7, SYS_setp
+ 320:	48d9                	li	a7,22
+ ecall
+ 322:	00000073          	ecall
+ ret
+ 326:	8082                	ret
+
+0000000000000328 <semget>:
+.global semget
+semget:
+ li a7, SYS_semget
+ 328:	48dd                	li	a7,23
+ ecall
+ 32a:	00000073          	ecall
+ ret
+ 32e:	8082                	ret
+
+0000000000000330 <semdown>:
+.global semdown
+semdown:
+ li a7, SYS_semdown
+ 330:	48e1                	li	a7,24
+ ecall
+ 332:	00000073          	ecall
+ ret
+ 336:	8082                	ret
+
+0000000000000338 <semup>:
+.global semup
+semup:
+ li a7, SYS_semup
+ 338:	48e5                	li	a7,25
+ ecall
+ 33a:	00000073          	ecall
+ ret
+ 33e:	8082                	ret
+
+0000000000000340 <semclose>:
+.global semclose
+semclose:
+ li a7, SYS_semclose
+ 340:	48e9                	li	a7,26
+ ecall
+ 342:	00000073          	ecall
+ ret
+ 346:	8082                	ret
+
+0000000000000348 <timeout>:
+.global timeout
+timeout:
+ li a7, SYS_timeout
+ 348:	48ed                	li	a7,27
+ ecall
+ 34a:	00000073          	ecall
+ ret
+ 34e:	8082                	ret
+
+0000000000000350 <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+ 350:	1101                	addi	sp,sp,-32
+ 352:	ec06                	sd	ra,24(sp)
+ 354:	e822                	sd	s0,16(sp)
+ 356:	1000                	addi	s0,sp,32
+ 358:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+ 35c:	4605                	li	a2,1
+ 35e:	fef40593          	addi	a1,s0,-17
+ 362:	00000097          	auipc	ra,0x0
+ 366:	f3e080e7          	jalr	-194(ra) # 2a0 <write>
+}
+ 36a:	60e2                	ld	ra,24(sp)
+ 36c:	6442                	ld	s0,16(sp)
+ 36e:	6105                	addi	sp,sp,32
+ 370:	8082                	ret
+
+0000000000000372 <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 372:	7139                	addi	sp,sp,-64
+ 374:	fc06                	sd	ra,56(sp)
+ 376:	f822                	sd	s0,48(sp)
+ 378:	f426                	sd	s1,40(sp)
+ 37a:	f04a                	sd	s2,32(sp)
+ 37c:	ec4e                	sd	s3,24(sp)
+ 37e:	0080                	addi	s0,sp,64
+ 380:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 382:	c299                	beqz	a3,388 <printint+0x16>
+ 384:	0805c963          	bltz	a1,416 <printint+0xa4>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 388:	2581                	sext.w	a1,a1
+  neg = 0;
+ 38a:	4881                	li	a7,0
+ 38c:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+ 390:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+ 392:	2601                	sext.w	a2,a2
+ 394:	00000517          	auipc	a0,0x0
+ 398:	49450513          	addi	a0,a0,1172 # 828 <digits>
+ 39c:	883a                	mv	a6,a4
+ 39e:	2705                	addiw	a4,a4,1
+ 3a0:	02c5f7bb          	remuw	a5,a1,a2
+ 3a4:	1782                	slli	a5,a5,0x20
+ 3a6:	9381                	srli	a5,a5,0x20
+ 3a8:	97aa                	add	a5,a5,a0
+ 3aa:	0007c783          	lbu	a5,0(a5)
+ 3ae:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+ 3b2:	0005879b          	sext.w	a5,a1
+ 3b6:	02c5d5bb          	divuw	a1,a1,a2
+ 3ba:	0685                	addi	a3,a3,1
+ 3bc:	fec7f0e3          	bgeu	a5,a2,39c <printint+0x2a>
+  if(neg)
+ 3c0:	00088c63          	beqz	a7,3d8 <printint+0x66>
+    buf[i++] = '-';
+ 3c4:	fd070793          	addi	a5,a4,-48
+ 3c8:	00878733          	add	a4,a5,s0
+ 3cc:	02d00793          	li	a5,45
+ 3d0:	fef70823          	sb	a5,-16(a4)
+ 3d4:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+ 3d8:	02e05863          	blez	a4,408 <printint+0x96>
+ 3dc:	fc040793          	addi	a5,s0,-64
+ 3e0:	00e78933          	add	s2,a5,a4
+ 3e4:	fff78993          	addi	s3,a5,-1
+ 3e8:	99ba                	add	s3,s3,a4
+ 3ea:	377d                	addiw	a4,a4,-1
+ 3ec:	1702                	slli	a4,a4,0x20
+ 3ee:	9301                	srli	a4,a4,0x20
+ 3f0:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+ 3f4:	fff94583          	lbu	a1,-1(s2)
+ 3f8:	8526                	mv	a0,s1
+ 3fa:	00000097          	auipc	ra,0x0
+ 3fe:	f56080e7          	jalr	-170(ra) # 350 <putc>
+  while(--i >= 0)
+ 402:	197d                	addi	s2,s2,-1
+ 404:	ff3918e3          	bne	s2,s3,3f4 <printint+0x82>
+}
+ 408:	70e2                	ld	ra,56(sp)
+ 40a:	7442                	ld	s0,48(sp)
+ 40c:	74a2                	ld	s1,40(sp)
+ 40e:	7902                	ld	s2,32(sp)
+ 410:	69e2                	ld	s3,24(sp)
+ 412:	6121                	addi	sp,sp,64
+ 414:	8082                	ret
+    x = -xx;
+ 416:	40b005bb          	negw	a1,a1
+    neg = 1;
+ 41a:	4885                	li	a7,1
+    x = -xx;
+ 41c:	bf85                	j	38c <printint+0x1a>
+
+000000000000041e <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+ 41e:	7119                	addi	sp,sp,-128
+ 420:	fc86                	sd	ra,120(sp)
+ 422:	f8a2                	sd	s0,112(sp)
+ 424:	f4a6                	sd	s1,104(sp)
+ 426:	f0ca                	sd	s2,96(sp)
+ 428:	ecce                	sd	s3,88(sp)
+ 42a:	e8d2                	sd	s4,80(sp)
+ 42c:	e4d6                	sd	s5,72(sp)
+ 42e:	e0da                	sd	s6,64(sp)
+ 430:	fc5e                	sd	s7,56(sp)
+ 432:	f862                	sd	s8,48(sp)
+ 434:	f466                	sd	s9,40(sp)
+ 436:	f06a                	sd	s10,32(sp)
+ 438:	ec6e                	sd	s11,24(sp)
+ 43a:	0100                	addi	s0,sp,128
+  char *s;
+  int c, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+ 43c:	0005c903          	lbu	s2,0(a1)
+ 440:	18090f63          	beqz	s2,5de <vprintf+0x1c0>
+ 444:	8aaa                	mv	s5,a0
+ 446:	8b32                	mv	s6,a2
+ 448:	00158493          	addi	s1,a1,1
+  state = 0;
+ 44c:	4981                	li	s3,0
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 44e:	02500a13          	li	s4,37
+ 452:	4c55                	li	s8,21
+ 454:	00000c97          	auipc	s9,0x0
+ 458:	37cc8c93          	addi	s9,s9,892 # 7d0 <malloc+0xee>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c == 's'){
+        s = va_arg(ap, char*);
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 45c:	02800d93          	li	s11,40
+  putc(fd, 'x');
+ 460:	4d41                	li	s10,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 462:	00000b97          	auipc	s7,0x0
+ 466:	3c6b8b93          	addi	s7,s7,966 # 828 <digits>
+ 46a:	a839                	j	488 <vprintf+0x6a>
+        putc(fd, c);
+ 46c:	85ca                	mv	a1,s2
+ 46e:	8556                	mv	a0,s5
+ 470:	00000097          	auipc	ra,0x0
+ 474:	ee0080e7          	jalr	-288(ra) # 350 <putc>
+ 478:	a019                	j	47e <vprintf+0x60>
+    } else if(state == '%'){
+ 47a:	01498d63          	beq	s3,s4,494 <vprintf+0x76>
+  for(i = 0; fmt[i]; i++){
+ 47e:	0485                	addi	s1,s1,1
+ 480:	fff4c903          	lbu	s2,-1(s1)
+ 484:	14090d63          	beqz	s2,5de <vprintf+0x1c0>
+    if(state == 0){
+ 488:	fe0999e3          	bnez	s3,47a <vprintf+0x5c>
+      if(c == '%'){
+ 48c:	ff4910e3          	bne	s2,s4,46c <vprintf+0x4e>
+        state = '%';
+ 490:	89d2                	mv	s3,s4
+ 492:	b7f5                	j	47e <vprintf+0x60>
+      if(c == 'd'){
+ 494:	11490c63          	beq	s2,s4,5ac <vprintf+0x18e>
+ 498:	f9d9079b          	addiw	a5,s2,-99
+ 49c:	0ff7f793          	zext.b	a5,a5
+ 4a0:	10fc6e63          	bltu	s8,a5,5bc <vprintf+0x19e>
+ 4a4:	f9d9079b          	addiw	a5,s2,-99
+ 4a8:	0ff7f713          	zext.b	a4,a5
+ 4ac:	10ec6863          	bltu	s8,a4,5bc <vprintf+0x19e>
+ 4b0:	00271793          	slli	a5,a4,0x2
+ 4b4:	97e6                	add	a5,a5,s9
+ 4b6:	439c                	lw	a5,0(a5)
+ 4b8:	97e6                	add	a5,a5,s9
+ 4ba:	8782                	jr	a5
+        printint(fd, va_arg(ap, int), 10, 1);
+ 4bc:	008b0913          	addi	s2,s6,8
+ 4c0:	4685                	li	a3,1
+ 4c2:	4629                	li	a2,10
+ 4c4:	000b2583          	lw	a1,0(s6)
+ 4c8:	8556                	mv	a0,s5
+ 4ca:	00000097          	auipc	ra,0x0
+ 4ce:	ea8080e7          	jalr	-344(ra) # 372 <printint>
+ 4d2:	8b4a                	mv	s6,s2
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 4d4:	4981                	li	s3,0
+ 4d6:	b765                	j	47e <vprintf+0x60>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 4d8:	008b0913          	addi	s2,s6,8
+ 4dc:	4681                	li	a3,0
+ 4de:	4629                	li	a2,10
+ 4e0:	000b2583          	lw	a1,0(s6)
+ 4e4:	8556                	mv	a0,s5
+ 4e6:	00000097          	auipc	ra,0x0
+ 4ea:	e8c080e7          	jalr	-372(ra) # 372 <printint>
+ 4ee:	8b4a                	mv	s6,s2
+      state = 0;
+ 4f0:	4981                	li	s3,0
+ 4f2:	b771                	j	47e <vprintf+0x60>
+        printint(fd, va_arg(ap, int), 16, 0);
+ 4f4:	008b0913          	addi	s2,s6,8
+ 4f8:	4681                	li	a3,0
+ 4fa:	866a                	mv	a2,s10
+ 4fc:	000b2583          	lw	a1,0(s6)
+ 500:	8556                	mv	a0,s5
+ 502:	00000097          	auipc	ra,0x0
+ 506:	e70080e7          	jalr	-400(ra) # 372 <printint>
+ 50a:	8b4a                	mv	s6,s2
+      state = 0;
+ 50c:	4981                	li	s3,0
+ 50e:	bf85                	j	47e <vprintf+0x60>
+        printptr(fd, va_arg(ap, uint64));
+ 510:	008b0793          	addi	a5,s6,8
+ 514:	f8f43423          	sd	a5,-120(s0)
+ 518:	000b3983          	ld	s3,0(s6)
+  putc(fd, '0');
+ 51c:	03000593          	li	a1,48
+ 520:	8556                	mv	a0,s5
+ 522:	00000097          	auipc	ra,0x0
+ 526:	e2e080e7          	jalr	-466(ra) # 350 <putc>
+  putc(fd, 'x');
+ 52a:	07800593          	li	a1,120
+ 52e:	8556                	mv	a0,s5
+ 530:	00000097          	auipc	ra,0x0
+ 534:	e20080e7          	jalr	-480(ra) # 350 <putc>
+ 538:	896a                	mv	s2,s10
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 53a:	03c9d793          	srli	a5,s3,0x3c
+ 53e:	97de                	add	a5,a5,s7
+ 540:	0007c583          	lbu	a1,0(a5)
+ 544:	8556                	mv	a0,s5
+ 546:	00000097          	auipc	ra,0x0
+ 54a:	e0a080e7          	jalr	-502(ra) # 350 <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+ 54e:	0992                	slli	s3,s3,0x4
+ 550:	397d                	addiw	s2,s2,-1
+ 552:	fe0914e3          	bnez	s2,53a <vprintf+0x11c>
+        printptr(fd, va_arg(ap, uint64));
+ 556:	f8843b03          	ld	s6,-120(s0)
+      state = 0;
+ 55a:	4981                	li	s3,0
+ 55c:	b70d                	j	47e <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 55e:	008b0913          	addi	s2,s6,8
+ 562:	000b3983          	ld	s3,0(s6)
+        if(s == 0)
+ 566:	02098163          	beqz	s3,588 <vprintf+0x16a>
+        while(*s != 0){
+ 56a:	0009c583          	lbu	a1,0(s3)
+ 56e:	c5ad                	beqz	a1,5d8 <vprintf+0x1ba>
+          putc(fd, *s);
+ 570:	8556                	mv	a0,s5
+ 572:	00000097          	auipc	ra,0x0
+ 576:	dde080e7          	jalr	-546(ra) # 350 <putc>
+          s++;
+ 57a:	0985                	addi	s3,s3,1
+        while(*s != 0){
+ 57c:	0009c583          	lbu	a1,0(s3)
+ 580:	f9e5                	bnez	a1,570 <vprintf+0x152>
+        s = va_arg(ap, char*);
+ 582:	8b4a                	mv	s6,s2
+      state = 0;
+ 584:	4981                	li	s3,0
+ 586:	bde5                	j	47e <vprintf+0x60>
+          s = "(null)";
+ 588:	00000997          	auipc	s3,0x0
+ 58c:	24098993          	addi	s3,s3,576 # 7c8 <malloc+0xe6>
+        while(*s != 0){
+ 590:	85ee                	mv	a1,s11
+ 592:	bff9                	j	570 <vprintf+0x152>
+        putc(fd, va_arg(ap, uint));
+ 594:	008b0913          	addi	s2,s6,8
+ 598:	000b4583          	lbu	a1,0(s6)
+ 59c:	8556                	mv	a0,s5
+ 59e:	00000097          	auipc	ra,0x0
+ 5a2:	db2080e7          	jalr	-590(ra) # 350 <putc>
+ 5a6:	8b4a                	mv	s6,s2
+      state = 0;
+ 5a8:	4981                	li	s3,0
+ 5aa:	bdd1                	j	47e <vprintf+0x60>
+        putc(fd, c);
+ 5ac:	85d2                	mv	a1,s4
+ 5ae:	8556                	mv	a0,s5
+ 5b0:	00000097          	auipc	ra,0x0
+ 5b4:	da0080e7          	jalr	-608(ra) # 350 <putc>
+      state = 0;
+ 5b8:	4981                	li	s3,0
+ 5ba:	b5d1                	j	47e <vprintf+0x60>
+        putc(fd, '%');
+ 5bc:	85d2                	mv	a1,s4
+ 5be:	8556                	mv	a0,s5
+ 5c0:	00000097          	auipc	ra,0x0
+ 5c4:	d90080e7          	jalr	-624(ra) # 350 <putc>
+        putc(fd, c);
+ 5c8:	85ca                	mv	a1,s2
+ 5ca:	8556                	mv	a0,s5
+ 5cc:	00000097          	auipc	ra,0x0
+ 5d0:	d84080e7          	jalr	-636(ra) # 350 <putc>
+      state = 0;
+ 5d4:	4981                	li	s3,0
+ 5d6:	b565                	j	47e <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 5d8:	8b4a                	mv	s6,s2
+      state = 0;
+ 5da:	4981                	li	s3,0
+ 5dc:	b54d                	j	47e <vprintf+0x60>
+    }
+  }
+}
+ 5de:	70e6                	ld	ra,120(sp)
+ 5e0:	7446                	ld	s0,112(sp)
+ 5e2:	74a6                	ld	s1,104(sp)
+ 5e4:	7906                	ld	s2,96(sp)
+ 5e6:	69e6                	ld	s3,88(sp)
+ 5e8:	6a46                	ld	s4,80(sp)
+ 5ea:	6aa6                	ld	s5,72(sp)
+ 5ec:	6b06                	ld	s6,64(sp)
+ 5ee:	7be2                	ld	s7,56(sp)
+ 5f0:	7c42                	ld	s8,48(sp)
+ 5f2:	7ca2                	ld	s9,40(sp)
+ 5f4:	7d02                	ld	s10,32(sp)
+ 5f6:	6de2                	ld	s11,24(sp)
+ 5f8:	6109                	addi	sp,sp,128
+ 5fa:	8082                	ret
+
+00000000000005fc <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+ 5fc:	715d                	addi	sp,sp,-80
+ 5fe:	ec06                	sd	ra,24(sp)
+ 600:	e822                	sd	s0,16(sp)
+ 602:	1000                	addi	s0,sp,32
+ 604:	e010                	sd	a2,0(s0)
+ 606:	e414                	sd	a3,8(s0)
+ 608:	e818                	sd	a4,16(s0)
+ 60a:	ec1c                	sd	a5,24(s0)
+ 60c:	03043023          	sd	a6,32(s0)
+ 610:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 614:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+ 618:	8622                	mv	a2,s0
+ 61a:	00000097          	auipc	ra,0x0
+ 61e:	e04080e7          	jalr	-508(ra) # 41e <vprintf>
+}
+ 622:	60e2                	ld	ra,24(sp)
+ 624:	6442                	ld	s0,16(sp)
+ 626:	6161                	addi	sp,sp,80
+ 628:	8082                	ret
+
+000000000000062a <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+ 62a:	711d                	addi	sp,sp,-96
+ 62c:	ec06                	sd	ra,24(sp)
+ 62e:	e822                	sd	s0,16(sp)
+ 630:	1000                	addi	s0,sp,32
+ 632:	e40c                	sd	a1,8(s0)
+ 634:	e810                	sd	a2,16(s0)
+ 636:	ec14                	sd	a3,24(s0)
+ 638:	f018                	sd	a4,32(s0)
+ 63a:	f41c                	sd	a5,40(s0)
+ 63c:	03043823          	sd	a6,48(s0)
+ 640:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 644:	00840613          	addi	a2,s0,8
+ 648:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+ 64c:	85aa                	mv	a1,a0
+ 64e:	4505                	li	a0,1
+ 650:	00000097          	auipc	ra,0x0
+ 654:	dce080e7          	jalr	-562(ra) # 41e <vprintf>
+}
+ 658:	60e2                	ld	ra,24(sp)
+ 65a:	6442                	ld	s0,16(sp)
+ 65c:	6125                	addi	sp,sp,96
+ 65e:	8082                	ret
+
+0000000000000660 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 660:	1141                	addi	sp,sp,-16
+ 662:	e422                	sd	s0,8(sp)
+ 664:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 666:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 66a:	00000797          	auipc	a5,0x0
+ 66e:	1d67b783          	ld	a5,470(a5) # 840 <freep>
+ 672:	a02d                	j	69c <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 674:	4618                	lw	a4,8(a2)
+ 676:	9f2d                	addw	a4,a4,a1
+ 678:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 67c:	6398                	ld	a4,0(a5)
+ 67e:	6310                	ld	a2,0(a4)
+ 680:	a83d                	j	6be <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 682:	ff852703          	lw	a4,-8(a0)
+ 686:	9f31                	addw	a4,a4,a2
+ 688:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+ 68a:	ff053683          	ld	a3,-16(a0)
+ 68e:	a091                	j	6d2 <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 690:	6398                	ld	a4,0(a5)
+ 692:	00e7e463          	bltu	a5,a4,69a <free+0x3a>
+ 696:	00e6ea63          	bltu	a3,a4,6aa <free+0x4a>
+{
+ 69a:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 69c:	fed7fae3          	bgeu	a5,a3,690 <free+0x30>
+ 6a0:	6398                	ld	a4,0(a5)
+ 6a2:	00e6e463          	bltu	a3,a4,6aa <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6a6:	fee7eae3          	bltu	a5,a4,69a <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+ 6aa:	ff852583          	lw	a1,-8(a0)
+ 6ae:	6390                	ld	a2,0(a5)
+ 6b0:	02059813          	slli	a6,a1,0x20
+ 6b4:	01c85713          	srli	a4,a6,0x1c
+ 6b8:	9736                	add	a4,a4,a3
+ 6ba:	fae60de3          	beq	a2,a4,674 <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6be:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+ 6c2:	4790                	lw	a2,8(a5)
+ 6c4:	02061593          	slli	a1,a2,0x20
+ 6c8:	01c5d713          	srli	a4,a1,0x1c
+ 6cc:	973e                	add	a4,a4,a5
+ 6ce:	fae68ae3          	beq	a3,a4,682 <free+0x22>
+    p->s.ptr = bp->s.ptr;
+ 6d2:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 6d4:	00000717          	auipc	a4,0x0
+ 6d8:	16f73623          	sd	a5,364(a4) # 840 <freep>
+}
+ 6dc:	6422                	ld	s0,8(sp)
+ 6de:	0141                	addi	sp,sp,16
+ 6e0:	8082                	ret
+
+00000000000006e2 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6e2:	7139                	addi	sp,sp,-64
+ 6e4:	fc06                	sd	ra,56(sp)
+ 6e6:	f822                	sd	s0,48(sp)
+ 6e8:	f426                	sd	s1,40(sp)
+ 6ea:	f04a                	sd	s2,32(sp)
+ 6ec:	ec4e                	sd	s3,24(sp)
+ 6ee:	e852                	sd	s4,16(sp)
+ 6f0:	e456                	sd	s5,8(sp)
+ 6f2:	e05a                	sd	s6,0(sp)
+ 6f4:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6f6:	02051493          	slli	s1,a0,0x20
+ 6fa:	9081                	srli	s1,s1,0x20
+ 6fc:	04bd                	addi	s1,s1,15
+ 6fe:	8091                	srli	s1,s1,0x4
+ 700:	0014899b          	addiw	s3,s1,1
+ 704:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+ 706:	00000517          	auipc	a0,0x0
+ 70a:	13a53503          	ld	a0,314(a0) # 840 <freep>
+ 70e:	c515                	beqz	a0,73a <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 710:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 712:	4798                	lw	a4,8(a5)
+ 714:	02977f63          	bgeu	a4,s1,752 <malloc+0x70>
+ 718:	8a4e                	mv	s4,s3
+ 71a:	0009871b          	sext.w	a4,s3
+ 71e:	6685                	lui	a3,0x1
+ 720:	00d77363          	bgeu	a4,a3,726 <malloc+0x44>
+ 724:	6a05                	lui	s4,0x1
+ 726:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+ 72a:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 72e:	00000917          	auipc	s2,0x0
+ 732:	11290913          	addi	s2,s2,274 # 840 <freep>
+  if(p == (char*)-1)
+ 736:	5afd                	li	s5,-1
+ 738:	a895                	j	7ac <malloc+0xca>
+    base.s.ptr = freep = prevp = &base;
+ 73a:	00000797          	auipc	a5,0x0
+ 73e:	10e78793          	addi	a5,a5,270 # 848 <base>
+ 742:	00000717          	auipc	a4,0x0
+ 746:	0ef73f23          	sd	a5,254(a4) # 840 <freep>
+ 74a:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+ 74c:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+ 750:	b7e1                	j	718 <malloc+0x36>
+      if(p->s.size == nunits)
+ 752:	02e48c63          	beq	s1,a4,78a <malloc+0xa8>
+        p->s.size -= nunits;
+ 756:	4137073b          	subw	a4,a4,s3
+ 75a:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+ 75c:	02071693          	slli	a3,a4,0x20
+ 760:	01c6d713          	srli	a4,a3,0x1c
+ 764:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+ 766:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+ 76a:	00000717          	auipc	a4,0x0
+ 76e:	0ca73b23          	sd	a0,214(a4) # 840 <freep>
+      return (void*)(p + 1);
+ 772:	01078513          	addi	a0,a5,16
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ 776:	70e2                	ld	ra,56(sp)
+ 778:	7442                	ld	s0,48(sp)
+ 77a:	74a2                	ld	s1,40(sp)
+ 77c:	7902                	ld	s2,32(sp)
+ 77e:	69e2                	ld	s3,24(sp)
+ 780:	6a42                	ld	s4,16(sp)
+ 782:	6aa2                	ld	s5,8(sp)
+ 784:	6b02                	ld	s6,0(sp)
+ 786:	6121                	addi	sp,sp,64
+ 788:	8082                	ret
+        prevp->s.ptr = p->s.ptr;
+ 78a:	6398                	ld	a4,0(a5)
+ 78c:	e118                	sd	a4,0(a0)
+ 78e:	bff1                	j	76a <malloc+0x88>
+  hp->s.size = nu;
+ 790:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+ 794:	0541                	addi	a0,a0,16
+ 796:	00000097          	auipc	ra,0x0
+ 79a:	eca080e7          	jalr	-310(ra) # 660 <free>
+  return freep;
+ 79e:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+ 7a2:	d971                	beqz	a0,776 <malloc+0x94>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7a4:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 7a6:	4798                	lw	a4,8(a5)
+ 7a8:	fa9775e3          	bgeu	a4,s1,752 <malloc+0x70>
+    if(p == freep)
+ 7ac:	00093703          	ld	a4,0(s2)
+ 7b0:	853e                	mv	a0,a5
+ 7b2:	fef719e3          	bne	a4,a5,7a4 <malloc+0xc2>
+  p = sbrk(nu * sizeof(Header));
+ 7b6:	8552                	mv	a0,s4
+ 7b8:	00000097          	auipc	ra,0x0
+ 7bc:	b50080e7          	jalr	-1200(ra) # 308 <sbrk>
+  if(p == (char*)-1)
+ 7c0:	fd5518e3          	bne	a0,s5,790 <malloc+0xae>
+        return 0;
+ 7c4:	4501                	li	a0,0
+ 7c6:	bf45                	j	776 <malloc+0x94>
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/midprior.c os-workshop/user/midprior.c
--- xv6-riscv/user/midprior.c	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/midprior.c	2022-04-28 18:25:44.000000000 -0300
@@ -0,0 +1,10 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main() {
+  for(;;){
+    setp(2);
+  };
+  exit(0);
+}
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/midprior.d os-workshop/user/midprior.d
--- xv6-riscv/user/midprior.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/midprior.d	2022-05-28 22:34:30.000000000 -0300
@@ -0,0 +1 @@
+user/midprior.o: user/midprior.c kernel/types.h kernel/stat.h user/user.h
Binary files xv6-riscv/user/midprior.o and os-workshop/user/midprior.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/midprior.sym os-workshop/user/midprior.sym
--- xv6-riscv/user/midprior.sym	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/midprior.sym	2022-05-28 22:34:30.000000000 -0300
@@ -0,0 +1,76 @@
+0000000000000000 .text
+00000000000007c8 .rodata
+0000000000000840 .sbss
+0000000000000848 .bss
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_aranges
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_line
+0000000000000000 .debug_frame
+0000000000000000 .debug_str
+0000000000000000 .debug_line_str
+0000000000000000 .debug_loclists
+0000000000000000 .debug_rnglists
+0000000000000000 midprior.c
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+0000000000000350 putc
+0000000000000372 printint
+0000000000000828 digits
+0000000000000000 umalloc.c
+0000000000000840 freep
+0000000000000848 base
+0000000000000014 strcpy
+000000000000062a printf
+0000000000001039 __global_pointer$
+00000000000001ce memmove
+00000000000002c8 mknod
+0000000000000330 semdown
+00000000000000cc gets
+0000000000000839 __SDATA_BEGIN__
+0000000000000328 semget
+0000000000000300 getpid
+0000000000000260 memcpy
+00000000000006e2 malloc
+0000000000000340 semclose
+0000000000000310 sleep
+0000000000000290 pipe
+00000000000002a0 write
+00000000000002d8 fstat
+00000000000005fc fprintf
+00000000000002b0 kill
+000000000000041e vprintf
+00000000000002f0 chdir
+00000000000002b8 exec
+0000000000000288 wait
+0000000000000298 read
+00000000000002d0 unlink
+0000000000000226 memcmp
+0000000000000278 fork
+0000000000000858 __BSS_END__
+0000000000000308 sbrk
+0000000000000318 uptime
+0000000000000839 __bss_start
+0000000000000086 memset
+0000000000000000 main
+0000000000000348 timeout
+0000000000000030 strcmp
+00000000000002f8 dup
+0000000000000839 __DATA_BEGIN__
+0000000000000140 stat
+0000000000000839 _edata
+0000000000000320 setp
+0000000000000858 _end
+00000000000002e0 link
+0000000000000280 exit
+0000000000000186 atoi
+000000000000005c strlen
+00000000000002c0 open
+0000000000000338 semup
+00000000000000a8 strchr
+00000000000002e8 mkdir
+00000000000002a8 close
+0000000000000660 free
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/mkdir.asm os-workshop/user/mkdir.asm
--- xv6-riscv/user/mkdir.asm	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/mkdir.asm	2022-05-28 22:34:34.000000000 -0300
@@ -0,0 +1,1391 @@
+
+user/_mkdir:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <main>:
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	7179                	addi	sp,sp,-48
+   2:	f406                	sd	ra,40(sp)
+   4:	f022                	sd	s0,32(sp)
+   6:	ec26                	sd	s1,24(sp)
+   8:	e84a                	sd	s2,16(sp)
+   a:	e44e                	sd	s3,8(sp)
+   c:	1800                	addi	s0,sp,48
+  int i;
+
+  if(argc < 2){
+   e:	4785                	li	a5,1
+  10:	02a7d763          	bge	a5,a0,3e <main+0x3e>
+  14:	00858493          	addi	s1,a1,8
+  18:	ffe5091b          	addiw	s2,a0,-2
+  1c:	02091793          	slli	a5,s2,0x20
+  20:	01d7d913          	srli	s2,a5,0x1d
+  24:	05c1                	addi	a1,a1,16
+  26:	992e                	add	s2,s2,a1
+    fprintf(2, "Usage: mkdir files...\n");
+    exit(1);
+  }
+
+  for(i = 1; i < argc; i++){
+    if(mkdir(argv[i]) < 0){
+  28:	6088                	ld	a0,0(s1)
+  2a:	00000097          	auipc	ra,0x0
+  2e:	322080e7          	jalr	802(ra) # 34c <mkdir>
+  32:	02054463          	bltz	a0,5a <main+0x5a>
+  for(i = 1; i < argc; i++){
+  36:	04a1                	addi	s1,s1,8
+  38:	ff2498e3          	bne	s1,s2,28 <main+0x28>
+  3c:	a80d                	j	6e <main+0x6e>
+    fprintf(2, "Usage: mkdir files...\n");
+  3e:	00000597          	auipc	a1,0x0
+  42:	7f258593          	addi	a1,a1,2034 # 830 <malloc+0xea>
+  46:	4509                	li	a0,2
+  48:	00000097          	auipc	ra,0x0
+  4c:	618080e7          	jalr	1560(ra) # 660 <fprintf>
+    exit(1);
+  50:	4505                	li	a0,1
+  52:	00000097          	auipc	ra,0x0
+  56:	292080e7          	jalr	658(ra) # 2e4 <exit>
+      fprintf(2, "mkdir: %s failed to create\n", argv[i]);
+  5a:	6090                	ld	a2,0(s1)
+  5c:	00000597          	auipc	a1,0x0
+  60:	7ec58593          	addi	a1,a1,2028 # 848 <malloc+0x102>
+  64:	4509                	li	a0,2
+  66:	00000097          	auipc	ra,0x0
+  6a:	5fa080e7          	jalr	1530(ra) # 660 <fprintf>
+      break;
+    }
+  }
+
+  exit(0);
+  6e:	4501                	li	a0,0
+  70:	00000097          	auipc	ra,0x0
+  74:	274080e7          	jalr	628(ra) # 2e4 <exit>
+
+0000000000000078 <strcpy>:
+#include "kernel/fcntl.h"
+#include "user/user.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  78:	1141                	addi	sp,sp,-16
+  7a:	e422                	sd	s0,8(sp)
+  7c:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  7e:	87aa                	mv	a5,a0
+  80:	0585                	addi	a1,a1,1
+  82:	0785                	addi	a5,a5,1
+  84:	fff5c703          	lbu	a4,-1(a1)
+  88:	fee78fa3          	sb	a4,-1(a5)
+  8c:	fb75                	bnez	a4,80 <strcpy+0x8>
+    ;
+  return os;
+}
+  8e:	6422                	ld	s0,8(sp)
+  90:	0141                	addi	sp,sp,16
+  92:	8082                	ret
+
+0000000000000094 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  94:	1141                	addi	sp,sp,-16
+  96:	e422                	sd	s0,8(sp)
+  98:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+  9a:	00054783          	lbu	a5,0(a0)
+  9e:	cb91                	beqz	a5,b2 <strcmp+0x1e>
+  a0:	0005c703          	lbu	a4,0(a1)
+  a4:	00f71763          	bne	a4,a5,b2 <strcmp+0x1e>
+    p++, q++;
+  a8:	0505                	addi	a0,a0,1
+  aa:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+  ac:	00054783          	lbu	a5,0(a0)
+  b0:	fbe5                	bnez	a5,a0 <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+  b2:	0005c503          	lbu	a0,0(a1)
+}
+  b6:	40a7853b          	subw	a0,a5,a0
+  ba:	6422                	ld	s0,8(sp)
+  bc:	0141                	addi	sp,sp,16
+  be:	8082                	ret
+
+00000000000000c0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  c0:	1141                	addi	sp,sp,-16
+  c2:	e422                	sd	s0,8(sp)
+  c4:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+  c6:	00054783          	lbu	a5,0(a0)
+  ca:	cf91                	beqz	a5,e6 <strlen+0x26>
+  cc:	0505                	addi	a0,a0,1
+  ce:	87aa                	mv	a5,a0
+  d0:	4685                	li	a3,1
+  d2:	9e89                	subw	a3,a3,a0
+  d4:	00f6853b          	addw	a0,a3,a5
+  d8:	0785                	addi	a5,a5,1
+  da:	fff7c703          	lbu	a4,-1(a5)
+  de:	fb7d                	bnez	a4,d4 <strlen+0x14>
+    ;
+  return n;
+}
+  e0:	6422                	ld	s0,8(sp)
+  e2:	0141                	addi	sp,sp,16
+  e4:	8082                	ret
+  for(n = 0; s[n]; n++)
+  e6:	4501                	li	a0,0
+  e8:	bfe5                	j	e0 <strlen+0x20>
+
+00000000000000ea <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  ea:	1141                	addi	sp,sp,-16
+  ec:	e422                	sd	s0,8(sp)
+  ee:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+  f0:	ca19                	beqz	a2,106 <memset+0x1c>
+  f2:	87aa                	mv	a5,a0
+  f4:	1602                	slli	a2,a2,0x20
+  f6:	9201                	srli	a2,a2,0x20
+  f8:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+  fc:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+ 100:	0785                	addi	a5,a5,1
+ 102:	fee79de3          	bne	a5,a4,fc <memset+0x12>
+  }
+  return dst;
+}
+ 106:	6422                	ld	s0,8(sp)
+ 108:	0141                	addi	sp,sp,16
+ 10a:	8082                	ret
+
+000000000000010c <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 10c:	1141                	addi	sp,sp,-16
+ 10e:	e422                	sd	s0,8(sp)
+ 110:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+ 112:	00054783          	lbu	a5,0(a0)
+ 116:	cb99                	beqz	a5,12c <strchr+0x20>
+    if(*s == c)
+ 118:	00f58763          	beq	a1,a5,126 <strchr+0x1a>
+  for(; *s; s++)
+ 11c:	0505                	addi	a0,a0,1
+ 11e:	00054783          	lbu	a5,0(a0)
+ 122:	fbfd                	bnez	a5,118 <strchr+0xc>
+      return (char*)s;
+  return 0;
+ 124:	4501                	li	a0,0
+}
+ 126:	6422                	ld	s0,8(sp)
+ 128:	0141                	addi	sp,sp,16
+ 12a:	8082                	ret
+  return 0;
+ 12c:	4501                	li	a0,0
+ 12e:	bfe5                	j	126 <strchr+0x1a>
+
+0000000000000130 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 130:	711d                	addi	sp,sp,-96
+ 132:	ec86                	sd	ra,88(sp)
+ 134:	e8a2                	sd	s0,80(sp)
+ 136:	e4a6                	sd	s1,72(sp)
+ 138:	e0ca                	sd	s2,64(sp)
+ 13a:	fc4e                	sd	s3,56(sp)
+ 13c:	f852                	sd	s4,48(sp)
+ 13e:	f456                	sd	s5,40(sp)
+ 140:	f05a                	sd	s6,32(sp)
+ 142:	ec5e                	sd	s7,24(sp)
+ 144:	1080                	addi	s0,sp,96
+ 146:	8baa                	mv	s7,a0
+ 148:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 14a:	892a                	mv	s2,a0
+ 14c:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+ 14e:	4aa9                	li	s5,10
+ 150:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+ 152:	89a6                	mv	s3,s1
+ 154:	2485                	addiw	s1,s1,1
+ 156:	0344d863          	bge	s1,s4,186 <gets+0x56>
+    cc = read(0, &c, 1);
+ 15a:	4605                	li	a2,1
+ 15c:	faf40593          	addi	a1,s0,-81
+ 160:	4501                	li	a0,0
+ 162:	00000097          	auipc	ra,0x0
+ 166:	19a080e7          	jalr	410(ra) # 2fc <read>
+    if(cc < 1)
+ 16a:	00a05e63          	blez	a0,186 <gets+0x56>
+    buf[i++] = c;
+ 16e:	faf44783          	lbu	a5,-81(s0)
+ 172:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+ 176:	01578763          	beq	a5,s5,184 <gets+0x54>
+ 17a:	0905                	addi	s2,s2,1
+ 17c:	fd679be3          	bne	a5,s6,152 <gets+0x22>
+  for(i=0; i+1 < max; ){
+ 180:	89a6                	mv	s3,s1
+ 182:	a011                	j	186 <gets+0x56>
+ 184:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+ 186:	99de                	add	s3,s3,s7
+ 188:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+ 18c:	855e                	mv	a0,s7
+ 18e:	60e6                	ld	ra,88(sp)
+ 190:	6446                	ld	s0,80(sp)
+ 192:	64a6                	ld	s1,72(sp)
+ 194:	6906                	ld	s2,64(sp)
+ 196:	79e2                	ld	s3,56(sp)
+ 198:	7a42                	ld	s4,48(sp)
+ 19a:	7aa2                	ld	s5,40(sp)
+ 19c:	7b02                	ld	s6,32(sp)
+ 19e:	6be2                	ld	s7,24(sp)
+ 1a0:	6125                	addi	sp,sp,96
+ 1a2:	8082                	ret
+
+00000000000001a4 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1a4:	1101                	addi	sp,sp,-32
+ 1a6:	ec06                	sd	ra,24(sp)
+ 1a8:	e822                	sd	s0,16(sp)
+ 1aa:	e426                	sd	s1,8(sp)
+ 1ac:	e04a                	sd	s2,0(sp)
+ 1ae:	1000                	addi	s0,sp,32
+ 1b0:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1b2:	4581                	li	a1,0
+ 1b4:	00000097          	auipc	ra,0x0
+ 1b8:	170080e7          	jalr	368(ra) # 324 <open>
+  if(fd < 0)
+ 1bc:	02054563          	bltz	a0,1e6 <stat+0x42>
+ 1c0:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+ 1c2:	85ca                	mv	a1,s2
+ 1c4:	00000097          	auipc	ra,0x0
+ 1c8:	178080e7          	jalr	376(ra) # 33c <fstat>
+ 1cc:	892a                	mv	s2,a0
+  close(fd);
+ 1ce:	8526                	mv	a0,s1
+ 1d0:	00000097          	auipc	ra,0x0
+ 1d4:	13c080e7          	jalr	316(ra) # 30c <close>
+  return r;
+}
+ 1d8:	854a                	mv	a0,s2
+ 1da:	60e2                	ld	ra,24(sp)
+ 1dc:	6442                	ld	s0,16(sp)
+ 1de:	64a2                	ld	s1,8(sp)
+ 1e0:	6902                	ld	s2,0(sp)
+ 1e2:	6105                	addi	sp,sp,32
+ 1e4:	8082                	ret
+    return -1;
+ 1e6:	597d                	li	s2,-1
+ 1e8:	bfc5                	j	1d8 <stat+0x34>
+
+00000000000001ea <atoi>:
+
+int
+atoi(const char *s)
+{
+ 1ea:	1141                	addi	sp,sp,-16
+ 1ec:	e422                	sd	s0,8(sp)
+ 1ee:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 1f0:	00054683          	lbu	a3,0(a0)
+ 1f4:	fd06879b          	addiw	a5,a3,-48
+ 1f8:	0ff7f793          	zext.b	a5,a5
+ 1fc:	4625                	li	a2,9
+ 1fe:	02f66863          	bltu	a2,a5,22e <atoi+0x44>
+ 202:	872a                	mv	a4,a0
+  n = 0;
+ 204:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+ 206:	0705                	addi	a4,a4,1
+ 208:	0025179b          	slliw	a5,a0,0x2
+ 20c:	9fa9                	addw	a5,a5,a0
+ 20e:	0017979b          	slliw	a5,a5,0x1
+ 212:	9fb5                	addw	a5,a5,a3
+ 214:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+ 218:	00074683          	lbu	a3,0(a4)
+ 21c:	fd06879b          	addiw	a5,a3,-48
+ 220:	0ff7f793          	zext.b	a5,a5
+ 224:	fef671e3          	bgeu	a2,a5,206 <atoi+0x1c>
+  return n;
+}
+ 228:	6422                	ld	s0,8(sp)
+ 22a:	0141                	addi	sp,sp,16
+ 22c:	8082                	ret
+  n = 0;
+ 22e:	4501                	li	a0,0
+ 230:	bfe5                	j	228 <atoi+0x3e>
+
+0000000000000232 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 232:	1141                	addi	sp,sp,-16
+ 234:	e422                	sd	s0,8(sp)
+ 236:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+ 238:	02b57463          	bgeu	a0,a1,260 <memmove+0x2e>
+    while(n-- > 0)
+ 23c:	00c05f63          	blez	a2,25a <memmove+0x28>
+ 240:	1602                	slli	a2,a2,0x20
+ 242:	9201                	srli	a2,a2,0x20
+ 244:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+ 248:	872a                	mv	a4,a0
+      *dst++ = *src++;
+ 24a:	0585                	addi	a1,a1,1
+ 24c:	0705                	addi	a4,a4,1
+ 24e:	fff5c683          	lbu	a3,-1(a1)
+ 252:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+ 256:	fee79ae3          	bne	a5,a4,24a <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+ 25a:	6422                	ld	s0,8(sp)
+ 25c:	0141                	addi	sp,sp,16
+ 25e:	8082                	ret
+    dst += n;
+ 260:	00c50733          	add	a4,a0,a2
+    src += n;
+ 264:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+ 266:	fec05ae3          	blez	a2,25a <memmove+0x28>
+ 26a:	fff6079b          	addiw	a5,a2,-1
+ 26e:	1782                	slli	a5,a5,0x20
+ 270:	9381                	srli	a5,a5,0x20
+ 272:	fff7c793          	not	a5,a5
+ 276:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+ 278:	15fd                	addi	a1,a1,-1
+ 27a:	177d                	addi	a4,a4,-1
+ 27c:	0005c683          	lbu	a3,0(a1)
+ 280:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+ 284:	fee79ae3          	bne	a5,a4,278 <memmove+0x46>
+ 288:	bfc9                	j	25a <memmove+0x28>
+
+000000000000028a <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+ 28a:	1141                	addi	sp,sp,-16
+ 28c:	e422                	sd	s0,8(sp)
+ 28e:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+ 290:	ca05                	beqz	a2,2c0 <memcmp+0x36>
+ 292:	fff6069b          	addiw	a3,a2,-1
+ 296:	1682                	slli	a3,a3,0x20
+ 298:	9281                	srli	a3,a3,0x20
+ 29a:	0685                	addi	a3,a3,1
+ 29c:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+ 29e:	00054783          	lbu	a5,0(a0)
+ 2a2:	0005c703          	lbu	a4,0(a1)
+ 2a6:	00e79863          	bne	a5,a4,2b6 <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+ 2aa:	0505                	addi	a0,a0,1
+    p2++;
+ 2ac:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+ 2ae:	fed518e3          	bne	a0,a3,29e <memcmp+0x14>
+  }
+  return 0;
+ 2b2:	4501                	li	a0,0
+ 2b4:	a019                	j	2ba <memcmp+0x30>
+      return *p1 - *p2;
+ 2b6:	40e7853b          	subw	a0,a5,a4
+}
+ 2ba:	6422                	ld	s0,8(sp)
+ 2bc:	0141                	addi	sp,sp,16
+ 2be:	8082                	ret
+  return 0;
+ 2c0:	4501                	li	a0,0
+ 2c2:	bfe5                	j	2ba <memcmp+0x30>
+
+00000000000002c4 <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+ 2c4:	1141                	addi	sp,sp,-16
+ 2c6:	e406                	sd	ra,8(sp)
+ 2c8:	e022                	sd	s0,0(sp)
+ 2ca:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+ 2cc:	00000097          	auipc	ra,0x0
+ 2d0:	f66080e7          	jalr	-154(ra) # 232 <memmove>
+}
+ 2d4:	60a2                	ld	ra,8(sp)
+ 2d6:	6402                	ld	s0,0(sp)
+ 2d8:	0141                	addi	sp,sp,16
+ 2da:	8082                	ret
+
+00000000000002dc <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ 2dc:	4885                	li	a7,1
+ ecall
+ 2de:	00000073          	ecall
+ ret
+ 2e2:	8082                	ret
+
+00000000000002e4 <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+ 2e4:	4889                	li	a7,2
+ ecall
+ 2e6:	00000073          	ecall
+ ret
+ 2ea:	8082                	ret
+
+00000000000002ec <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+ 2ec:	488d                	li	a7,3
+ ecall
+ 2ee:	00000073          	ecall
+ ret
+ 2f2:	8082                	ret
+
+00000000000002f4 <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ 2f4:	4891                	li	a7,4
+ ecall
+ 2f6:	00000073          	ecall
+ ret
+ 2fa:	8082                	ret
+
+00000000000002fc <read>:
+.global read
+read:
+ li a7, SYS_read
+ 2fc:	4895                	li	a7,5
+ ecall
+ 2fe:	00000073          	ecall
+ ret
+ 302:	8082                	ret
+
+0000000000000304 <write>:
+.global write
+write:
+ li a7, SYS_write
+ 304:	48c1                	li	a7,16
+ ecall
+ 306:	00000073          	ecall
+ ret
+ 30a:	8082                	ret
+
+000000000000030c <close>:
+.global close
+close:
+ li a7, SYS_close
+ 30c:	48d5                	li	a7,21
+ ecall
+ 30e:	00000073          	ecall
+ ret
+ 312:	8082                	ret
+
+0000000000000314 <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+ 314:	4899                	li	a7,6
+ ecall
+ 316:	00000073          	ecall
+ ret
+ 31a:	8082                	ret
+
+000000000000031c <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+ 31c:	489d                	li	a7,7
+ ecall
+ 31e:	00000073          	ecall
+ ret
+ 322:	8082                	ret
+
+0000000000000324 <open>:
+.global open
+open:
+ li a7, SYS_open
+ 324:	48bd                	li	a7,15
+ ecall
+ 326:	00000073          	ecall
+ ret
+ 32a:	8082                	ret
+
+000000000000032c <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ 32c:	48c5                	li	a7,17
+ ecall
+ 32e:	00000073          	ecall
+ ret
+ 332:	8082                	ret
+
+0000000000000334 <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ 334:	48c9                	li	a7,18
+ ecall
+ 336:	00000073          	ecall
+ ret
+ 33a:	8082                	ret
+
+000000000000033c <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ 33c:	48a1                	li	a7,8
+ ecall
+ 33e:	00000073          	ecall
+ ret
+ 342:	8082                	ret
+
+0000000000000344 <link>:
+.global link
+link:
+ li a7, SYS_link
+ 344:	48cd                	li	a7,19
+ ecall
+ 346:	00000073          	ecall
+ ret
+ 34a:	8082                	ret
+
+000000000000034c <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ 34c:	48d1                	li	a7,20
+ ecall
+ 34e:	00000073          	ecall
+ ret
+ 352:	8082                	ret
+
+0000000000000354 <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ 354:	48a5                	li	a7,9
+ ecall
+ 356:	00000073          	ecall
+ ret
+ 35a:	8082                	ret
+
+000000000000035c <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+ 35c:	48a9                	li	a7,10
+ ecall
+ 35e:	00000073          	ecall
+ ret
+ 362:	8082                	ret
+
+0000000000000364 <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ 364:	48ad                	li	a7,11
+ ecall
+ 366:	00000073          	ecall
+ ret
+ 36a:	8082                	ret
+
+000000000000036c <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ 36c:	48b1                	li	a7,12
+ ecall
+ 36e:	00000073          	ecall
+ ret
+ 372:	8082                	ret
+
+0000000000000374 <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ 374:	48b5                	li	a7,13
+ ecall
+ 376:	00000073          	ecall
+ ret
+ 37a:	8082                	ret
+
+000000000000037c <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ 37c:	48b9                	li	a7,14
+ ecall
+ 37e:	00000073          	ecall
+ ret
+ 382:	8082                	ret
+
+0000000000000384 <setp>:
+.global setp
+setp:
+ li a7, SYS_setp
+ 384:	48d9                	li	a7,22
+ ecall
+ 386:	00000073          	ecall
+ ret
+ 38a:	8082                	ret
+
+000000000000038c <semget>:
+.global semget
+semget:
+ li a7, SYS_semget
+ 38c:	48dd                	li	a7,23
+ ecall
+ 38e:	00000073          	ecall
+ ret
+ 392:	8082                	ret
+
+0000000000000394 <semdown>:
+.global semdown
+semdown:
+ li a7, SYS_semdown
+ 394:	48e1                	li	a7,24
+ ecall
+ 396:	00000073          	ecall
+ ret
+ 39a:	8082                	ret
+
+000000000000039c <semup>:
+.global semup
+semup:
+ li a7, SYS_semup
+ 39c:	48e5                	li	a7,25
+ ecall
+ 39e:	00000073          	ecall
+ ret
+ 3a2:	8082                	ret
+
+00000000000003a4 <semclose>:
+.global semclose
+semclose:
+ li a7, SYS_semclose
+ 3a4:	48e9                	li	a7,26
+ ecall
+ 3a6:	00000073          	ecall
+ ret
+ 3aa:	8082                	ret
+
+00000000000003ac <timeout>:
+.global timeout
+timeout:
+ li a7, SYS_timeout
+ 3ac:	48ed                	li	a7,27
+ ecall
+ 3ae:	00000073          	ecall
+ ret
+ 3b2:	8082                	ret
+
+00000000000003b4 <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+ 3b4:	1101                	addi	sp,sp,-32
+ 3b6:	ec06                	sd	ra,24(sp)
+ 3b8:	e822                	sd	s0,16(sp)
+ 3ba:	1000                	addi	s0,sp,32
+ 3bc:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+ 3c0:	4605                	li	a2,1
+ 3c2:	fef40593          	addi	a1,s0,-17
+ 3c6:	00000097          	auipc	ra,0x0
+ 3ca:	f3e080e7          	jalr	-194(ra) # 304 <write>
+}
+ 3ce:	60e2                	ld	ra,24(sp)
+ 3d0:	6442                	ld	s0,16(sp)
+ 3d2:	6105                	addi	sp,sp,32
+ 3d4:	8082                	ret
+
+00000000000003d6 <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3d6:	7139                	addi	sp,sp,-64
+ 3d8:	fc06                	sd	ra,56(sp)
+ 3da:	f822                	sd	s0,48(sp)
+ 3dc:	f426                	sd	s1,40(sp)
+ 3de:	f04a                	sd	s2,32(sp)
+ 3e0:	ec4e                	sd	s3,24(sp)
+ 3e2:	0080                	addi	s0,sp,64
+ 3e4:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 3e6:	c299                	beqz	a3,3ec <printint+0x16>
+ 3e8:	0805c963          	bltz	a1,47a <printint+0xa4>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 3ec:	2581                	sext.w	a1,a1
+  neg = 0;
+ 3ee:	4881                	li	a7,0
+ 3f0:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+ 3f4:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+ 3f6:	2601                	sext.w	a2,a2
+ 3f8:	00000517          	auipc	a0,0x0
+ 3fc:	4d050513          	addi	a0,a0,1232 # 8c8 <digits>
+ 400:	883a                	mv	a6,a4
+ 402:	2705                	addiw	a4,a4,1
+ 404:	02c5f7bb          	remuw	a5,a1,a2
+ 408:	1782                	slli	a5,a5,0x20
+ 40a:	9381                	srli	a5,a5,0x20
+ 40c:	97aa                	add	a5,a5,a0
+ 40e:	0007c783          	lbu	a5,0(a5)
+ 412:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+ 416:	0005879b          	sext.w	a5,a1
+ 41a:	02c5d5bb          	divuw	a1,a1,a2
+ 41e:	0685                	addi	a3,a3,1
+ 420:	fec7f0e3          	bgeu	a5,a2,400 <printint+0x2a>
+  if(neg)
+ 424:	00088c63          	beqz	a7,43c <printint+0x66>
+    buf[i++] = '-';
+ 428:	fd070793          	addi	a5,a4,-48
+ 42c:	00878733          	add	a4,a5,s0
+ 430:	02d00793          	li	a5,45
+ 434:	fef70823          	sb	a5,-16(a4)
+ 438:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+ 43c:	02e05863          	blez	a4,46c <printint+0x96>
+ 440:	fc040793          	addi	a5,s0,-64
+ 444:	00e78933          	add	s2,a5,a4
+ 448:	fff78993          	addi	s3,a5,-1
+ 44c:	99ba                	add	s3,s3,a4
+ 44e:	377d                	addiw	a4,a4,-1
+ 450:	1702                	slli	a4,a4,0x20
+ 452:	9301                	srli	a4,a4,0x20
+ 454:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+ 458:	fff94583          	lbu	a1,-1(s2)
+ 45c:	8526                	mv	a0,s1
+ 45e:	00000097          	auipc	ra,0x0
+ 462:	f56080e7          	jalr	-170(ra) # 3b4 <putc>
+  while(--i >= 0)
+ 466:	197d                	addi	s2,s2,-1
+ 468:	ff3918e3          	bne	s2,s3,458 <printint+0x82>
+}
+ 46c:	70e2                	ld	ra,56(sp)
+ 46e:	7442                	ld	s0,48(sp)
+ 470:	74a2                	ld	s1,40(sp)
+ 472:	7902                	ld	s2,32(sp)
+ 474:	69e2                	ld	s3,24(sp)
+ 476:	6121                	addi	sp,sp,64
+ 478:	8082                	ret
+    x = -xx;
+ 47a:	40b005bb          	negw	a1,a1
+    neg = 1;
+ 47e:	4885                	li	a7,1
+    x = -xx;
+ 480:	bf85                	j	3f0 <printint+0x1a>
+
+0000000000000482 <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+ 482:	7119                	addi	sp,sp,-128
+ 484:	fc86                	sd	ra,120(sp)
+ 486:	f8a2                	sd	s0,112(sp)
+ 488:	f4a6                	sd	s1,104(sp)
+ 48a:	f0ca                	sd	s2,96(sp)
+ 48c:	ecce                	sd	s3,88(sp)
+ 48e:	e8d2                	sd	s4,80(sp)
+ 490:	e4d6                	sd	s5,72(sp)
+ 492:	e0da                	sd	s6,64(sp)
+ 494:	fc5e                	sd	s7,56(sp)
+ 496:	f862                	sd	s8,48(sp)
+ 498:	f466                	sd	s9,40(sp)
+ 49a:	f06a                	sd	s10,32(sp)
+ 49c:	ec6e                	sd	s11,24(sp)
+ 49e:	0100                	addi	s0,sp,128
+  char *s;
+  int c, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+ 4a0:	0005c903          	lbu	s2,0(a1)
+ 4a4:	18090f63          	beqz	s2,642 <vprintf+0x1c0>
+ 4a8:	8aaa                	mv	s5,a0
+ 4aa:	8b32                	mv	s6,a2
+ 4ac:	00158493          	addi	s1,a1,1
+  state = 0;
+ 4b0:	4981                	li	s3,0
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 4b2:	02500a13          	li	s4,37
+ 4b6:	4c55                	li	s8,21
+ 4b8:	00000c97          	auipc	s9,0x0
+ 4bc:	3b8c8c93          	addi	s9,s9,952 # 870 <malloc+0x12a>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c == 's'){
+        s = va_arg(ap, char*);
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 4c0:	02800d93          	li	s11,40
+  putc(fd, 'x');
+ 4c4:	4d41                	li	s10,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 4c6:	00000b97          	auipc	s7,0x0
+ 4ca:	402b8b93          	addi	s7,s7,1026 # 8c8 <digits>
+ 4ce:	a839                	j	4ec <vprintf+0x6a>
+        putc(fd, c);
+ 4d0:	85ca                	mv	a1,s2
+ 4d2:	8556                	mv	a0,s5
+ 4d4:	00000097          	auipc	ra,0x0
+ 4d8:	ee0080e7          	jalr	-288(ra) # 3b4 <putc>
+ 4dc:	a019                	j	4e2 <vprintf+0x60>
+    } else if(state == '%'){
+ 4de:	01498d63          	beq	s3,s4,4f8 <vprintf+0x76>
+  for(i = 0; fmt[i]; i++){
+ 4e2:	0485                	addi	s1,s1,1
+ 4e4:	fff4c903          	lbu	s2,-1(s1)
+ 4e8:	14090d63          	beqz	s2,642 <vprintf+0x1c0>
+    if(state == 0){
+ 4ec:	fe0999e3          	bnez	s3,4de <vprintf+0x5c>
+      if(c == '%'){
+ 4f0:	ff4910e3          	bne	s2,s4,4d0 <vprintf+0x4e>
+        state = '%';
+ 4f4:	89d2                	mv	s3,s4
+ 4f6:	b7f5                	j	4e2 <vprintf+0x60>
+      if(c == 'd'){
+ 4f8:	11490c63          	beq	s2,s4,610 <vprintf+0x18e>
+ 4fc:	f9d9079b          	addiw	a5,s2,-99
+ 500:	0ff7f793          	zext.b	a5,a5
+ 504:	10fc6e63          	bltu	s8,a5,620 <vprintf+0x19e>
+ 508:	f9d9079b          	addiw	a5,s2,-99
+ 50c:	0ff7f713          	zext.b	a4,a5
+ 510:	10ec6863          	bltu	s8,a4,620 <vprintf+0x19e>
+ 514:	00271793          	slli	a5,a4,0x2
+ 518:	97e6                	add	a5,a5,s9
+ 51a:	439c                	lw	a5,0(a5)
+ 51c:	97e6                	add	a5,a5,s9
+ 51e:	8782                	jr	a5
+        printint(fd, va_arg(ap, int), 10, 1);
+ 520:	008b0913          	addi	s2,s6,8
+ 524:	4685                	li	a3,1
+ 526:	4629                	li	a2,10
+ 528:	000b2583          	lw	a1,0(s6)
+ 52c:	8556                	mv	a0,s5
+ 52e:	00000097          	auipc	ra,0x0
+ 532:	ea8080e7          	jalr	-344(ra) # 3d6 <printint>
+ 536:	8b4a                	mv	s6,s2
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 538:	4981                	li	s3,0
+ 53a:	b765                	j	4e2 <vprintf+0x60>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 53c:	008b0913          	addi	s2,s6,8
+ 540:	4681                	li	a3,0
+ 542:	4629                	li	a2,10
+ 544:	000b2583          	lw	a1,0(s6)
+ 548:	8556                	mv	a0,s5
+ 54a:	00000097          	auipc	ra,0x0
+ 54e:	e8c080e7          	jalr	-372(ra) # 3d6 <printint>
+ 552:	8b4a                	mv	s6,s2
+      state = 0;
+ 554:	4981                	li	s3,0
+ 556:	b771                	j	4e2 <vprintf+0x60>
+        printint(fd, va_arg(ap, int), 16, 0);
+ 558:	008b0913          	addi	s2,s6,8
+ 55c:	4681                	li	a3,0
+ 55e:	866a                	mv	a2,s10
+ 560:	000b2583          	lw	a1,0(s6)
+ 564:	8556                	mv	a0,s5
+ 566:	00000097          	auipc	ra,0x0
+ 56a:	e70080e7          	jalr	-400(ra) # 3d6 <printint>
+ 56e:	8b4a                	mv	s6,s2
+      state = 0;
+ 570:	4981                	li	s3,0
+ 572:	bf85                	j	4e2 <vprintf+0x60>
+        printptr(fd, va_arg(ap, uint64));
+ 574:	008b0793          	addi	a5,s6,8
+ 578:	f8f43423          	sd	a5,-120(s0)
+ 57c:	000b3983          	ld	s3,0(s6)
+  putc(fd, '0');
+ 580:	03000593          	li	a1,48
+ 584:	8556                	mv	a0,s5
+ 586:	00000097          	auipc	ra,0x0
+ 58a:	e2e080e7          	jalr	-466(ra) # 3b4 <putc>
+  putc(fd, 'x');
+ 58e:	07800593          	li	a1,120
+ 592:	8556                	mv	a0,s5
+ 594:	00000097          	auipc	ra,0x0
+ 598:	e20080e7          	jalr	-480(ra) # 3b4 <putc>
+ 59c:	896a                	mv	s2,s10
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 59e:	03c9d793          	srli	a5,s3,0x3c
+ 5a2:	97de                	add	a5,a5,s7
+ 5a4:	0007c583          	lbu	a1,0(a5)
+ 5a8:	8556                	mv	a0,s5
+ 5aa:	00000097          	auipc	ra,0x0
+ 5ae:	e0a080e7          	jalr	-502(ra) # 3b4 <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+ 5b2:	0992                	slli	s3,s3,0x4
+ 5b4:	397d                	addiw	s2,s2,-1
+ 5b6:	fe0914e3          	bnez	s2,59e <vprintf+0x11c>
+        printptr(fd, va_arg(ap, uint64));
+ 5ba:	f8843b03          	ld	s6,-120(s0)
+      state = 0;
+ 5be:	4981                	li	s3,0
+ 5c0:	b70d                	j	4e2 <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 5c2:	008b0913          	addi	s2,s6,8
+ 5c6:	000b3983          	ld	s3,0(s6)
+        if(s == 0)
+ 5ca:	02098163          	beqz	s3,5ec <vprintf+0x16a>
+        while(*s != 0){
+ 5ce:	0009c583          	lbu	a1,0(s3)
+ 5d2:	c5ad                	beqz	a1,63c <vprintf+0x1ba>
+          putc(fd, *s);
+ 5d4:	8556                	mv	a0,s5
+ 5d6:	00000097          	auipc	ra,0x0
+ 5da:	dde080e7          	jalr	-546(ra) # 3b4 <putc>
+          s++;
+ 5de:	0985                	addi	s3,s3,1
+        while(*s != 0){
+ 5e0:	0009c583          	lbu	a1,0(s3)
+ 5e4:	f9e5                	bnez	a1,5d4 <vprintf+0x152>
+        s = va_arg(ap, char*);
+ 5e6:	8b4a                	mv	s6,s2
+      state = 0;
+ 5e8:	4981                	li	s3,0
+ 5ea:	bde5                	j	4e2 <vprintf+0x60>
+          s = "(null)";
+ 5ec:	00000997          	auipc	s3,0x0
+ 5f0:	27c98993          	addi	s3,s3,636 # 868 <malloc+0x122>
+        while(*s != 0){
+ 5f4:	85ee                	mv	a1,s11
+ 5f6:	bff9                	j	5d4 <vprintf+0x152>
+        putc(fd, va_arg(ap, uint));
+ 5f8:	008b0913          	addi	s2,s6,8
+ 5fc:	000b4583          	lbu	a1,0(s6)
+ 600:	8556                	mv	a0,s5
+ 602:	00000097          	auipc	ra,0x0
+ 606:	db2080e7          	jalr	-590(ra) # 3b4 <putc>
+ 60a:	8b4a                	mv	s6,s2
+      state = 0;
+ 60c:	4981                	li	s3,0
+ 60e:	bdd1                	j	4e2 <vprintf+0x60>
+        putc(fd, c);
+ 610:	85d2                	mv	a1,s4
+ 612:	8556                	mv	a0,s5
+ 614:	00000097          	auipc	ra,0x0
+ 618:	da0080e7          	jalr	-608(ra) # 3b4 <putc>
+      state = 0;
+ 61c:	4981                	li	s3,0
+ 61e:	b5d1                	j	4e2 <vprintf+0x60>
+        putc(fd, '%');
+ 620:	85d2                	mv	a1,s4
+ 622:	8556                	mv	a0,s5
+ 624:	00000097          	auipc	ra,0x0
+ 628:	d90080e7          	jalr	-624(ra) # 3b4 <putc>
+        putc(fd, c);
+ 62c:	85ca                	mv	a1,s2
+ 62e:	8556                	mv	a0,s5
+ 630:	00000097          	auipc	ra,0x0
+ 634:	d84080e7          	jalr	-636(ra) # 3b4 <putc>
+      state = 0;
+ 638:	4981                	li	s3,0
+ 63a:	b565                	j	4e2 <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 63c:	8b4a                	mv	s6,s2
+      state = 0;
+ 63e:	4981                	li	s3,0
+ 640:	b54d                	j	4e2 <vprintf+0x60>
+    }
+  }
+}
+ 642:	70e6                	ld	ra,120(sp)
+ 644:	7446                	ld	s0,112(sp)
+ 646:	74a6                	ld	s1,104(sp)
+ 648:	7906                	ld	s2,96(sp)
+ 64a:	69e6                	ld	s3,88(sp)
+ 64c:	6a46                	ld	s4,80(sp)
+ 64e:	6aa6                	ld	s5,72(sp)
+ 650:	6b06                	ld	s6,64(sp)
+ 652:	7be2                	ld	s7,56(sp)
+ 654:	7c42                	ld	s8,48(sp)
+ 656:	7ca2                	ld	s9,40(sp)
+ 658:	7d02                	ld	s10,32(sp)
+ 65a:	6de2                	ld	s11,24(sp)
+ 65c:	6109                	addi	sp,sp,128
+ 65e:	8082                	ret
+
+0000000000000660 <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+ 660:	715d                	addi	sp,sp,-80
+ 662:	ec06                	sd	ra,24(sp)
+ 664:	e822                	sd	s0,16(sp)
+ 666:	1000                	addi	s0,sp,32
+ 668:	e010                	sd	a2,0(s0)
+ 66a:	e414                	sd	a3,8(s0)
+ 66c:	e818                	sd	a4,16(s0)
+ 66e:	ec1c                	sd	a5,24(s0)
+ 670:	03043023          	sd	a6,32(s0)
+ 674:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 678:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+ 67c:	8622                	mv	a2,s0
+ 67e:	00000097          	auipc	ra,0x0
+ 682:	e04080e7          	jalr	-508(ra) # 482 <vprintf>
+}
+ 686:	60e2                	ld	ra,24(sp)
+ 688:	6442                	ld	s0,16(sp)
+ 68a:	6161                	addi	sp,sp,80
+ 68c:	8082                	ret
+
+000000000000068e <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+ 68e:	711d                	addi	sp,sp,-96
+ 690:	ec06                	sd	ra,24(sp)
+ 692:	e822                	sd	s0,16(sp)
+ 694:	1000                	addi	s0,sp,32
+ 696:	e40c                	sd	a1,8(s0)
+ 698:	e810                	sd	a2,16(s0)
+ 69a:	ec14                	sd	a3,24(s0)
+ 69c:	f018                	sd	a4,32(s0)
+ 69e:	f41c                	sd	a5,40(s0)
+ 6a0:	03043823          	sd	a6,48(s0)
+ 6a4:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 6a8:	00840613          	addi	a2,s0,8
+ 6ac:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+ 6b0:	85aa                	mv	a1,a0
+ 6b2:	4505                	li	a0,1
+ 6b4:	00000097          	auipc	ra,0x0
+ 6b8:	dce080e7          	jalr	-562(ra) # 482 <vprintf>
+}
+ 6bc:	60e2                	ld	ra,24(sp)
+ 6be:	6442                	ld	s0,16(sp)
+ 6c0:	6125                	addi	sp,sp,96
+ 6c2:	8082                	ret
+
+00000000000006c4 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6c4:	1141                	addi	sp,sp,-16
+ 6c6:	e422                	sd	s0,8(sp)
+ 6c8:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 6ca:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6ce:	00000797          	auipc	a5,0x0
+ 6d2:	2127b783          	ld	a5,530(a5) # 8e0 <freep>
+ 6d6:	a02d                	j	700 <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 6d8:	4618                	lw	a4,8(a2)
+ 6da:	9f2d                	addw	a4,a4,a1
+ 6dc:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6e0:	6398                	ld	a4,0(a5)
+ 6e2:	6310                	ld	a2,0(a4)
+ 6e4:	a83d                	j	722 <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 6e6:	ff852703          	lw	a4,-8(a0)
+ 6ea:	9f31                	addw	a4,a4,a2
+ 6ec:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+ 6ee:	ff053683          	ld	a3,-16(a0)
+ 6f2:	a091                	j	736 <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6f4:	6398                	ld	a4,0(a5)
+ 6f6:	00e7e463          	bltu	a5,a4,6fe <free+0x3a>
+ 6fa:	00e6ea63          	bltu	a3,a4,70e <free+0x4a>
+{
+ 6fe:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 700:	fed7fae3          	bgeu	a5,a3,6f4 <free+0x30>
+ 704:	6398                	ld	a4,0(a5)
+ 706:	00e6e463          	bltu	a3,a4,70e <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 70a:	fee7eae3          	bltu	a5,a4,6fe <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+ 70e:	ff852583          	lw	a1,-8(a0)
+ 712:	6390                	ld	a2,0(a5)
+ 714:	02059813          	slli	a6,a1,0x20
+ 718:	01c85713          	srli	a4,a6,0x1c
+ 71c:	9736                	add	a4,a4,a3
+ 71e:	fae60de3          	beq	a2,a4,6d8 <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 722:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+ 726:	4790                	lw	a2,8(a5)
+ 728:	02061593          	slli	a1,a2,0x20
+ 72c:	01c5d713          	srli	a4,a1,0x1c
+ 730:	973e                	add	a4,a4,a5
+ 732:	fae68ae3          	beq	a3,a4,6e6 <free+0x22>
+    p->s.ptr = bp->s.ptr;
+ 736:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 738:	00000717          	auipc	a4,0x0
+ 73c:	1af73423          	sd	a5,424(a4) # 8e0 <freep>
+}
+ 740:	6422                	ld	s0,8(sp)
+ 742:	0141                	addi	sp,sp,16
+ 744:	8082                	ret
+
+0000000000000746 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 746:	7139                	addi	sp,sp,-64
+ 748:	fc06                	sd	ra,56(sp)
+ 74a:	f822                	sd	s0,48(sp)
+ 74c:	f426                	sd	s1,40(sp)
+ 74e:	f04a                	sd	s2,32(sp)
+ 750:	ec4e                	sd	s3,24(sp)
+ 752:	e852                	sd	s4,16(sp)
+ 754:	e456                	sd	s5,8(sp)
+ 756:	e05a                	sd	s6,0(sp)
+ 758:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 75a:	02051493          	slli	s1,a0,0x20
+ 75e:	9081                	srli	s1,s1,0x20
+ 760:	04bd                	addi	s1,s1,15
+ 762:	8091                	srli	s1,s1,0x4
+ 764:	0014899b          	addiw	s3,s1,1
+ 768:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+ 76a:	00000517          	auipc	a0,0x0
+ 76e:	17653503          	ld	a0,374(a0) # 8e0 <freep>
+ 772:	c515                	beqz	a0,79e <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 774:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 776:	4798                	lw	a4,8(a5)
+ 778:	02977f63          	bgeu	a4,s1,7b6 <malloc+0x70>
+ 77c:	8a4e                	mv	s4,s3
+ 77e:	0009871b          	sext.w	a4,s3
+ 782:	6685                	lui	a3,0x1
+ 784:	00d77363          	bgeu	a4,a3,78a <malloc+0x44>
+ 788:	6a05                	lui	s4,0x1
+ 78a:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+ 78e:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 792:	00000917          	auipc	s2,0x0
+ 796:	14e90913          	addi	s2,s2,334 # 8e0 <freep>
+  if(p == (char*)-1)
+ 79a:	5afd                	li	s5,-1
+ 79c:	a895                	j	810 <malloc+0xca>
+    base.s.ptr = freep = prevp = &base;
+ 79e:	00000797          	auipc	a5,0x0
+ 7a2:	14a78793          	addi	a5,a5,330 # 8e8 <base>
+ 7a6:	00000717          	auipc	a4,0x0
+ 7aa:	12f73d23          	sd	a5,314(a4) # 8e0 <freep>
+ 7ae:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+ 7b0:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+ 7b4:	b7e1                	j	77c <malloc+0x36>
+      if(p->s.size == nunits)
+ 7b6:	02e48c63          	beq	s1,a4,7ee <malloc+0xa8>
+        p->s.size -= nunits;
+ 7ba:	4137073b          	subw	a4,a4,s3
+ 7be:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+ 7c0:	02071693          	slli	a3,a4,0x20
+ 7c4:	01c6d713          	srli	a4,a3,0x1c
+ 7c8:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+ 7ca:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+ 7ce:	00000717          	auipc	a4,0x0
+ 7d2:	10a73923          	sd	a0,274(a4) # 8e0 <freep>
+      return (void*)(p + 1);
+ 7d6:	01078513          	addi	a0,a5,16
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ 7da:	70e2                	ld	ra,56(sp)
+ 7dc:	7442                	ld	s0,48(sp)
+ 7de:	74a2                	ld	s1,40(sp)
+ 7e0:	7902                	ld	s2,32(sp)
+ 7e2:	69e2                	ld	s3,24(sp)
+ 7e4:	6a42                	ld	s4,16(sp)
+ 7e6:	6aa2                	ld	s5,8(sp)
+ 7e8:	6b02                	ld	s6,0(sp)
+ 7ea:	6121                	addi	sp,sp,64
+ 7ec:	8082                	ret
+        prevp->s.ptr = p->s.ptr;
+ 7ee:	6398                	ld	a4,0(a5)
+ 7f0:	e118                	sd	a4,0(a0)
+ 7f2:	bff1                	j	7ce <malloc+0x88>
+  hp->s.size = nu;
+ 7f4:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+ 7f8:	0541                	addi	a0,a0,16
+ 7fa:	00000097          	auipc	ra,0x0
+ 7fe:	eca080e7          	jalr	-310(ra) # 6c4 <free>
+  return freep;
+ 802:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+ 806:	d971                	beqz	a0,7da <malloc+0x94>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 808:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 80a:	4798                	lw	a4,8(a5)
+ 80c:	fa9775e3          	bgeu	a4,s1,7b6 <malloc+0x70>
+    if(p == freep)
+ 810:	00093703          	ld	a4,0(s2)
+ 814:	853e                	mv	a0,a5
+ 816:	fef719e3          	bne	a4,a5,808 <malloc+0xc2>
+  p = sbrk(nu * sizeof(Header));
+ 81a:	8552                	mv	a0,s4
+ 81c:	00000097          	auipc	ra,0x0
+ 820:	b50080e7          	jalr	-1200(ra) # 36c <sbrk>
+  if(p == (char*)-1)
+ 824:	fd5518e3          	bne	a0,s5,7f4 <malloc+0xae>
+        return 0;
+ 828:	4501                	li	a0,0
+ 82a:	bf45                	j	7da <malloc+0x94>
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/mkdir.d os-workshop/user/mkdir.d
--- xv6-riscv/user/mkdir.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/mkdir.d	2022-05-28 22:34:34.000000000 -0300
@@ -0,0 +1 @@
+user/mkdir.o: user/mkdir.c kernel/types.h kernel/stat.h user/user.h
Binary files xv6-riscv/user/mkdir.o and os-workshop/user/mkdir.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/mkdir.sym os-workshop/user/mkdir.sym
--- xv6-riscv/user/mkdir.sym	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/mkdir.sym	2022-05-28 22:34:34.000000000 -0300
@@ -0,0 +1,76 @@
+0000000000000000 .text
+0000000000000830 .rodata
+00000000000008e0 .sbss
+00000000000008e8 .bss
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_aranges
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_line
+0000000000000000 .debug_frame
+0000000000000000 .debug_str
+0000000000000000 .debug_line_str
+0000000000000000 .debug_loclists
+0000000000000000 .debug_rnglists
+0000000000000000 mkdir.c
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+00000000000003b4 putc
+00000000000003d6 printint
+00000000000008c8 digits
+0000000000000000 umalloc.c
+00000000000008e0 freep
+00000000000008e8 base
+0000000000000078 strcpy
+000000000000068e printf
+00000000000010d9 __global_pointer$
+0000000000000232 memmove
+000000000000032c mknod
+0000000000000394 semdown
+0000000000000130 gets
+00000000000008d9 __SDATA_BEGIN__
+000000000000038c semget
+0000000000000364 getpid
+00000000000002c4 memcpy
+0000000000000746 malloc
+00000000000003a4 semclose
+0000000000000374 sleep
+00000000000002f4 pipe
+0000000000000304 write
+000000000000033c fstat
+0000000000000660 fprintf
+0000000000000314 kill
+0000000000000482 vprintf
+0000000000000354 chdir
+000000000000031c exec
+00000000000002ec wait
+00000000000002fc read
+0000000000000334 unlink
+000000000000028a memcmp
+00000000000002dc fork
+00000000000008f8 __BSS_END__
+000000000000036c sbrk
+000000000000037c uptime
+00000000000008d9 __bss_start
+00000000000000ea memset
+0000000000000000 main
+00000000000003ac timeout
+0000000000000094 strcmp
+000000000000035c dup
+00000000000008d9 __DATA_BEGIN__
+00000000000001a4 stat
+00000000000008d9 _edata
+0000000000000384 setp
+00000000000008f8 _end
+0000000000000344 link
+00000000000002e4 exit
+00000000000001ea atoi
+00000000000000c0 strlen
+0000000000000324 open
+000000000000039c semup
+000000000000010c strchr
+000000000000034c mkdir
+000000000000030c close
+00000000000006c4 free
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/printf.d os-workshop/user/printf.d
--- xv6-riscv/user/printf.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/printf.d	2022-05-28 22:34:30.000000000 -0300
@@ -0,0 +1,2 @@
+user/printf.o: user/printf.c kernel/types.h kernel/stat.h user/user.h \
+ /usr/local/Cellar/riscv-gnu-toolchain/main/lib/gcc/riscv64-unknown-elf/11.1.0/include/stdarg.h
Binary files xv6-riscv/user/printf.o and os-workshop/user/printf.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/prod.asm os-workshop/user/prod.asm
--- xv6-riscv/user/prod.asm	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/prod.asm	2022-05-28 22:34:38.000000000 -0300
@@ -0,0 +1,1407 @@
+
+user/_prod:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <main>:
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fcntl.h"
+
+int main(void) {
+   0:	7139                	addi	sp,sp,-64
+   2:	fc06                	sd	ra,56(sp)
+   4:	f822                	sd	s0,48(sp)
+   6:	f426                	sd	s1,40(sp)
+   8:	f04a                	sd	s2,32(sp)
+   a:	ec4e                	sd	s3,24(sp)
+   c:	e852                	sd	s4,16(sp)
+   e:	e456                	sd	s5,8(sp)
+  10:	e05a                	sd	s6,0(sp)
+  12:	0080                	addi	s0,sp,64
+
+  int fd = open("buffer", O_CREATE | O_WRONLY);
+  14:	20100593          	li	a1,513
+  18:	00001517          	auipc	a0,0x1
+  1c:	85050513          	addi	a0,a0,-1968 # 868 <malloc+0xea>
+  20:	00000097          	auipc	ra,0x0
+  24:	33c080e7          	jalr	828(ra) # 35c <open>
+  28:	8a2a                	mv	s4,a0
+  int sid = semget(23, 1);
+  2a:	4585                	li	a1,1
+  2c:	455d                	li	a0,23
+  2e:	00000097          	auipc	ra,0x0
+  32:	396080e7          	jalr	918(ra) # 3c4 <semget>
+  36:	84aa                	mv	s1,a0
+  for (;;) {
+    if (semdown(sid) == 0) {
+      printf("PROD IN \n");
+  38:	00001b17          	auipc	s6,0x1
+  3c:	838b0b13          	addi	s6,s6,-1992 # 870 <malloc+0xf2>
+      timeout(10000);
+  40:	6909                	lui	s2,0x2
+  42:	71090913          	addi	s2,s2,1808 # 2710 <__global_pointer$+0x1607>
+      write(fd, "product", strlen("product"));
+  46:	00001997          	auipc	s3,0x1
+  4a:	83a98993          	addi	s3,s3,-1990 # 880 <malloc+0x102>
+      printf("PROD OUT \n");
+  4e:	00001a97          	auipc	s5,0x1
+  52:	83aa8a93          	addi	s5,s5,-1990 # 888 <malloc+0x10a>
+    if (semdown(sid) == 0) {
+  56:	8526                	mv	a0,s1
+  58:	00000097          	auipc	ra,0x0
+  5c:	374080e7          	jalr	884(ra) # 3cc <semdown>
+  60:	f97d                	bnez	a0,56 <main+0x56>
+      printf("PROD IN \n");
+  62:	855a                	mv	a0,s6
+  64:	00000097          	auipc	ra,0x0
+  68:	662080e7          	jalr	1634(ra) # 6c6 <printf>
+      timeout(10000);
+  6c:	854a                	mv	a0,s2
+  6e:	00000097          	auipc	ra,0x0
+  72:	376080e7          	jalr	886(ra) # 3e4 <timeout>
+      write(fd, "product", strlen("product"));
+  76:	854e                	mv	a0,s3
+  78:	00000097          	auipc	ra,0x0
+  7c:	080080e7          	jalr	128(ra) # f8 <strlen>
+  80:	0005061b          	sext.w	a2,a0
+  84:	85ce                	mv	a1,s3
+  86:	8552                	mv	a0,s4
+  88:	00000097          	auipc	ra,0x0
+  8c:	2b4080e7          	jalr	692(ra) # 33c <write>
+      printf("PROD OUT \n");
+  90:	8556                	mv	a0,s5
+  92:	00000097          	auipc	ra,0x0
+  96:	634080e7          	jalr	1588(ra) # 6c6 <printf>
+      timeout(10000);
+  9a:	854a                	mv	a0,s2
+  9c:	00000097          	auipc	ra,0x0
+  a0:	348080e7          	jalr	840(ra) # 3e4 <timeout>
+      semup(sid);
+  a4:	8526                	mv	a0,s1
+  a6:	00000097          	auipc	ra,0x0
+  aa:	32e080e7          	jalr	814(ra) # 3d4 <semup>
+  ae:	b765                	j	56 <main+0x56>
+
+00000000000000b0 <strcpy>:
+#include "kernel/fcntl.h"
+#include "user/user.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  b0:	1141                	addi	sp,sp,-16
+  b2:	e422                	sd	s0,8(sp)
+  b4:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  b6:	87aa                	mv	a5,a0
+  b8:	0585                	addi	a1,a1,1
+  ba:	0785                	addi	a5,a5,1
+  bc:	fff5c703          	lbu	a4,-1(a1)
+  c0:	fee78fa3          	sb	a4,-1(a5)
+  c4:	fb75                	bnez	a4,b8 <strcpy+0x8>
+    ;
+  return os;
+}
+  c6:	6422                	ld	s0,8(sp)
+  c8:	0141                	addi	sp,sp,16
+  ca:	8082                	ret
+
+00000000000000cc <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  cc:	1141                	addi	sp,sp,-16
+  ce:	e422                	sd	s0,8(sp)
+  d0:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+  d2:	00054783          	lbu	a5,0(a0)
+  d6:	cb91                	beqz	a5,ea <strcmp+0x1e>
+  d8:	0005c703          	lbu	a4,0(a1)
+  dc:	00f71763          	bne	a4,a5,ea <strcmp+0x1e>
+    p++, q++;
+  e0:	0505                	addi	a0,a0,1
+  e2:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+  e4:	00054783          	lbu	a5,0(a0)
+  e8:	fbe5                	bnez	a5,d8 <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+  ea:	0005c503          	lbu	a0,0(a1)
+}
+  ee:	40a7853b          	subw	a0,a5,a0
+  f2:	6422                	ld	s0,8(sp)
+  f4:	0141                	addi	sp,sp,16
+  f6:	8082                	ret
+
+00000000000000f8 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  f8:	1141                	addi	sp,sp,-16
+  fa:	e422                	sd	s0,8(sp)
+  fc:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+  fe:	00054783          	lbu	a5,0(a0)
+ 102:	cf91                	beqz	a5,11e <strlen+0x26>
+ 104:	0505                	addi	a0,a0,1
+ 106:	87aa                	mv	a5,a0
+ 108:	4685                	li	a3,1
+ 10a:	9e89                	subw	a3,a3,a0
+ 10c:	00f6853b          	addw	a0,a3,a5
+ 110:	0785                	addi	a5,a5,1
+ 112:	fff7c703          	lbu	a4,-1(a5)
+ 116:	fb7d                	bnez	a4,10c <strlen+0x14>
+    ;
+  return n;
+}
+ 118:	6422                	ld	s0,8(sp)
+ 11a:	0141                	addi	sp,sp,16
+ 11c:	8082                	ret
+  for(n = 0; s[n]; n++)
+ 11e:	4501                	li	a0,0
+ 120:	bfe5                	j	118 <strlen+0x20>
+
+0000000000000122 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 122:	1141                	addi	sp,sp,-16
+ 124:	e422                	sd	s0,8(sp)
+ 126:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+ 128:	ca19                	beqz	a2,13e <memset+0x1c>
+ 12a:	87aa                	mv	a5,a0
+ 12c:	1602                	slli	a2,a2,0x20
+ 12e:	9201                	srli	a2,a2,0x20
+ 130:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+ 134:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+ 138:	0785                	addi	a5,a5,1
+ 13a:	fee79de3          	bne	a5,a4,134 <memset+0x12>
+  }
+  return dst;
+}
+ 13e:	6422                	ld	s0,8(sp)
+ 140:	0141                	addi	sp,sp,16
+ 142:	8082                	ret
+
+0000000000000144 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 144:	1141                	addi	sp,sp,-16
+ 146:	e422                	sd	s0,8(sp)
+ 148:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+ 14a:	00054783          	lbu	a5,0(a0)
+ 14e:	cb99                	beqz	a5,164 <strchr+0x20>
+    if(*s == c)
+ 150:	00f58763          	beq	a1,a5,15e <strchr+0x1a>
+  for(; *s; s++)
+ 154:	0505                	addi	a0,a0,1
+ 156:	00054783          	lbu	a5,0(a0)
+ 15a:	fbfd                	bnez	a5,150 <strchr+0xc>
+      return (char*)s;
+  return 0;
+ 15c:	4501                	li	a0,0
+}
+ 15e:	6422                	ld	s0,8(sp)
+ 160:	0141                	addi	sp,sp,16
+ 162:	8082                	ret
+  return 0;
+ 164:	4501                	li	a0,0
+ 166:	bfe5                	j	15e <strchr+0x1a>
+
+0000000000000168 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 168:	711d                	addi	sp,sp,-96
+ 16a:	ec86                	sd	ra,88(sp)
+ 16c:	e8a2                	sd	s0,80(sp)
+ 16e:	e4a6                	sd	s1,72(sp)
+ 170:	e0ca                	sd	s2,64(sp)
+ 172:	fc4e                	sd	s3,56(sp)
+ 174:	f852                	sd	s4,48(sp)
+ 176:	f456                	sd	s5,40(sp)
+ 178:	f05a                	sd	s6,32(sp)
+ 17a:	ec5e                	sd	s7,24(sp)
+ 17c:	1080                	addi	s0,sp,96
+ 17e:	8baa                	mv	s7,a0
+ 180:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 182:	892a                	mv	s2,a0
+ 184:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+ 186:	4aa9                	li	s5,10
+ 188:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+ 18a:	89a6                	mv	s3,s1
+ 18c:	2485                	addiw	s1,s1,1
+ 18e:	0344d863          	bge	s1,s4,1be <gets+0x56>
+    cc = read(0, &c, 1);
+ 192:	4605                	li	a2,1
+ 194:	faf40593          	addi	a1,s0,-81
+ 198:	4501                	li	a0,0
+ 19a:	00000097          	auipc	ra,0x0
+ 19e:	19a080e7          	jalr	410(ra) # 334 <read>
+    if(cc < 1)
+ 1a2:	00a05e63          	blez	a0,1be <gets+0x56>
+    buf[i++] = c;
+ 1a6:	faf44783          	lbu	a5,-81(s0)
+ 1aa:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+ 1ae:	01578763          	beq	a5,s5,1bc <gets+0x54>
+ 1b2:	0905                	addi	s2,s2,1
+ 1b4:	fd679be3          	bne	a5,s6,18a <gets+0x22>
+  for(i=0; i+1 < max; ){
+ 1b8:	89a6                	mv	s3,s1
+ 1ba:	a011                	j	1be <gets+0x56>
+ 1bc:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+ 1be:	99de                	add	s3,s3,s7
+ 1c0:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+ 1c4:	855e                	mv	a0,s7
+ 1c6:	60e6                	ld	ra,88(sp)
+ 1c8:	6446                	ld	s0,80(sp)
+ 1ca:	64a6                	ld	s1,72(sp)
+ 1cc:	6906                	ld	s2,64(sp)
+ 1ce:	79e2                	ld	s3,56(sp)
+ 1d0:	7a42                	ld	s4,48(sp)
+ 1d2:	7aa2                	ld	s5,40(sp)
+ 1d4:	7b02                	ld	s6,32(sp)
+ 1d6:	6be2                	ld	s7,24(sp)
+ 1d8:	6125                	addi	sp,sp,96
+ 1da:	8082                	ret
+
+00000000000001dc <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1dc:	1101                	addi	sp,sp,-32
+ 1de:	ec06                	sd	ra,24(sp)
+ 1e0:	e822                	sd	s0,16(sp)
+ 1e2:	e426                	sd	s1,8(sp)
+ 1e4:	e04a                	sd	s2,0(sp)
+ 1e6:	1000                	addi	s0,sp,32
+ 1e8:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1ea:	4581                	li	a1,0
+ 1ec:	00000097          	auipc	ra,0x0
+ 1f0:	170080e7          	jalr	368(ra) # 35c <open>
+  if(fd < 0)
+ 1f4:	02054563          	bltz	a0,21e <stat+0x42>
+ 1f8:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+ 1fa:	85ca                	mv	a1,s2
+ 1fc:	00000097          	auipc	ra,0x0
+ 200:	178080e7          	jalr	376(ra) # 374 <fstat>
+ 204:	892a                	mv	s2,a0
+  close(fd);
+ 206:	8526                	mv	a0,s1
+ 208:	00000097          	auipc	ra,0x0
+ 20c:	13c080e7          	jalr	316(ra) # 344 <close>
+  return r;
+}
+ 210:	854a                	mv	a0,s2
+ 212:	60e2                	ld	ra,24(sp)
+ 214:	6442                	ld	s0,16(sp)
+ 216:	64a2                	ld	s1,8(sp)
+ 218:	6902                	ld	s2,0(sp)
+ 21a:	6105                	addi	sp,sp,32
+ 21c:	8082                	ret
+    return -1;
+ 21e:	597d                	li	s2,-1
+ 220:	bfc5                	j	210 <stat+0x34>
+
+0000000000000222 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 222:	1141                	addi	sp,sp,-16
+ 224:	e422                	sd	s0,8(sp)
+ 226:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 228:	00054683          	lbu	a3,0(a0)
+ 22c:	fd06879b          	addiw	a5,a3,-48
+ 230:	0ff7f793          	zext.b	a5,a5
+ 234:	4625                	li	a2,9
+ 236:	02f66863          	bltu	a2,a5,266 <atoi+0x44>
+ 23a:	872a                	mv	a4,a0
+  n = 0;
+ 23c:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+ 23e:	0705                	addi	a4,a4,1
+ 240:	0025179b          	slliw	a5,a0,0x2
+ 244:	9fa9                	addw	a5,a5,a0
+ 246:	0017979b          	slliw	a5,a5,0x1
+ 24a:	9fb5                	addw	a5,a5,a3
+ 24c:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+ 250:	00074683          	lbu	a3,0(a4)
+ 254:	fd06879b          	addiw	a5,a3,-48
+ 258:	0ff7f793          	zext.b	a5,a5
+ 25c:	fef671e3          	bgeu	a2,a5,23e <atoi+0x1c>
+  return n;
+}
+ 260:	6422                	ld	s0,8(sp)
+ 262:	0141                	addi	sp,sp,16
+ 264:	8082                	ret
+  n = 0;
+ 266:	4501                	li	a0,0
+ 268:	bfe5                	j	260 <atoi+0x3e>
+
+000000000000026a <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 26a:	1141                	addi	sp,sp,-16
+ 26c:	e422                	sd	s0,8(sp)
+ 26e:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+ 270:	02b57463          	bgeu	a0,a1,298 <memmove+0x2e>
+    while(n-- > 0)
+ 274:	00c05f63          	blez	a2,292 <memmove+0x28>
+ 278:	1602                	slli	a2,a2,0x20
+ 27a:	9201                	srli	a2,a2,0x20
+ 27c:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+ 280:	872a                	mv	a4,a0
+      *dst++ = *src++;
+ 282:	0585                	addi	a1,a1,1
+ 284:	0705                	addi	a4,a4,1
+ 286:	fff5c683          	lbu	a3,-1(a1)
+ 28a:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+ 28e:	fee79ae3          	bne	a5,a4,282 <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+ 292:	6422                	ld	s0,8(sp)
+ 294:	0141                	addi	sp,sp,16
+ 296:	8082                	ret
+    dst += n;
+ 298:	00c50733          	add	a4,a0,a2
+    src += n;
+ 29c:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+ 29e:	fec05ae3          	blez	a2,292 <memmove+0x28>
+ 2a2:	fff6079b          	addiw	a5,a2,-1
+ 2a6:	1782                	slli	a5,a5,0x20
+ 2a8:	9381                	srli	a5,a5,0x20
+ 2aa:	fff7c793          	not	a5,a5
+ 2ae:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+ 2b0:	15fd                	addi	a1,a1,-1
+ 2b2:	177d                	addi	a4,a4,-1
+ 2b4:	0005c683          	lbu	a3,0(a1)
+ 2b8:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+ 2bc:	fee79ae3          	bne	a5,a4,2b0 <memmove+0x46>
+ 2c0:	bfc9                	j	292 <memmove+0x28>
+
+00000000000002c2 <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+ 2c2:	1141                	addi	sp,sp,-16
+ 2c4:	e422                	sd	s0,8(sp)
+ 2c6:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+ 2c8:	ca05                	beqz	a2,2f8 <memcmp+0x36>
+ 2ca:	fff6069b          	addiw	a3,a2,-1
+ 2ce:	1682                	slli	a3,a3,0x20
+ 2d0:	9281                	srli	a3,a3,0x20
+ 2d2:	0685                	addi	a3,a3,1
+ 2d4:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+ 2d6:	00054783          	lbu	a5,0(a0)
+ 2da:	0005c703          	lbu	a4,0(a1)
+ 2de:	00e79863          	bne	a5,a4,2ee <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+ 2e2:	0505                	addi	a0,a0,1
+    p2++;
+ 2e4:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+ 2e6:	fed518e3          	bne	a0,a3,2d6 <memcmp+0x14>
+  }
+  return 0;
+ 2ea:	4501                	li	a0,0
+ 2ec:	a019                	j	2f2 <memcmp+0x30>
+      return *p1 - *p2;
+ 2ee:	40e7853b          	subw	a0,a5,a4
+}
+ 2f2:	6422                	ld	s0,8(sp)
+ 2f4:	0141                	addi	sp,sp,16
+ 2f6:	8082                	ret
+  return 0;
+ 2f8:	4501                	li	a0,0
+ 2fa:	bfe5                	j	2f2 <memcmp+0x30>
+
+00000000000002fc <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+ 2fc:	1141                	addi	sp,sp,-16
+ 2fe:	e406                	sd	ra,8(sp)
+ 300:	e022                	sd	s0,0(sp)
+ 302:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+ 304:	00000097          	auipc	ra,0x0
+ 308:	f66080e7          	jalr	-154(ra) # 26a <memmove>
+}
+ 30c:	60a2                	ld	ra,8(sp)
+ 30e:	6402                	ld	s0,0(sp)
+ 310:	0141                	addi	sp,sp,16
+ 312:	8082                	ret
+
+0000000000000314 <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ 314:	4885                	li	a7,1
+ ecall
+ 316:	00000073          	ecall
+ ret
+ 31a:	8082                	ret
+
+000000000000031c <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+ 31c:	4889                	li	a7,2
+ ecall
+ 31e:	00000073          	ecall
+ ret
+ 322:	8082                	ret
+
+0000000000000324 <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+ 324:	488d                	li	a7,3
+ ecall
+ 326:	00000073          	ecall
+ ret
+ 32a:	8082                	ret
+
+000000000000032c <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ 32c:	4891                	li	a7,4
+ ecall
+ 32e:	00000073          	ecall
+ ret
+ 332:	8082                	ret
+
+0000000000000334 <read>:
+.global read
+read:
+ li a7, SYS_read
+ 334:	4895                	li	a7,5
+ ecall
+ 336:	00000073          	ecall
+ ret
+ 33a:	8082                	ret
+
+000000000000033c <write>:
+.global write
+write:
+ li a7, SYS_write
+ 33c:	48c1                	li	a7,16
+ ecall
+ 33e:	00000073          	ecall
+ ret
+ 342:	8082                	ret
+
+0000000000000344 <close>:
+.global close
+close:
+ li a7, SYS_close
+ 344:	48d5                	li	a7,21
+ ecall
+ 346:	00000073          	ecall
+ ret
+ 34a:	8082                	ret
+
+000000000000034c <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+ 34c:	4899                	li	a7,6
+ ecall
+ 34e:	00000073          	ecall
+ ret
+ 352:	8082                	ret
+
+0000000000000354 <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+ 354:	489d                	li	a7,7
+ ecall
+ 356:	00000073          	ecall
+ ret
+ 35a:	8082                	ret
+
+000000000000035c <open>:
+.global open
+open:
+ li a7, SYS_open
+ 35c:	48bd                	li	a7,15
+ ecall
+ 35e:	00000073          	ecall
+ ret
+ 362:	8082                	ret
+
+0000000000000364 <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ 364:	48c5                	li	a7,17
+ ecall
+ 366:	00000073          	ecall
+ ret
+ 36a:	8082                	ret
+
+000000000000036c <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ 36c:	48c9                	li	a7,18
+ ecall
+ 36e:	00000073          	ecall
+ ret
+ 372:	8082                	ret
+
+0000000000000374 <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ 374:	48a1                	li	a7,8
+ ecall
+ 376:	00000073          	ecall
+ ret
+ 37a:	8082                	ret
+
+000000000000037c <link>:
+.global link
+link:
+ li a7, SYS_link
+ 37c:	48cd                	li	a7,19
+ ecall
+ 37e:	00000073          	ecall
+ ret
+ 382:	8082                	ret
+
+0000000000000384 <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ 384:	48d1                	li	a7,20
+ ecall
+ 386:	00000073          	ecall
+ ret
+ 38a:	8082                	ret
+
+000000000000038c <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ 38c:	48a5                	li	a7,9
+ ecall
+ 38e:	00000073          	ecall
+ ret
+ 392:	8082                	ret
+
+0000000000000394 <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+ 394:	48a9                	li	a7,10
+ ecall
+ 396:	00000073          	ecall
+ ret
+ 39a:	8082                	ret
+
+000000000000039c <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ 39c:	48ad                	li	a7,11
+ ecall
+ 39e:	00000073          	ecall
+ ret
+ 3a2:	8082                	ret
+
+00000000000003a4 <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ 3a4:	48b1                	li	a7,12
+ ecall
+ 3a6:	00000073          	ecall
+ ret
+ 3aa:	8082                	ret
+
+00000000000003ac <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ 3ac:	48b5                	li	a7,13
+ ecall
+ 3ae:	00000073          	ecall
+ ret
+ 3b2:	8082                	ret
+
+00000000000003b4 <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ 3b4:	48b9                	li	a7,14
+ ecall
+ 3b6:	00000073          	ecall
+ ret
+ 3ba:	8082                	ret
+
+00000000000003bc <setp>:
+.global setp
+setp:
+ li a7, SYS_setp
+ 3bc:	48d9                	li	a7,22
+ ecall
+ 3be:	00000073          	ecall
+ ret
+ 3c2:	8082                	ret
+
+00000000000003c4 <semget>:
+.global semget
+semget:
+ li a7, SYS_semget
+ 3c4:	48dd                	li	a7,23
+ ecall
+ 3c6:	00000073          	ecall
+ ret
+ 3ca:	8082                	ret
+
+00000000000003cc <semdown>:
+.global semdown
+semdown:
+ li a7, SYS_semdown
+ 3cc:	48e1                	li	a7,24
+ ecall
+ 3ce:	00000073          	ecall
+ ret
+ 3d2:	8082                	ret
+
+00000000000003d4 <semup>:
+.global semup
+semup:
+ li a7, SYS_semup
+ 3d4:	48e5                	li	a7,25
+ ecall
+ 3d6:	00000073          	ecall
+ ret
+ 3da:	8082                	ret
+
+00000000000003dc <semclose>:
+.global semclose
+semclose:
+ li a7, SYS_semclose
+ 3dc:	48e9                	li	a7,26
+ ecall
+ 3de:	00000073          	ecall
+ ret
+ 3e2:	8082                	ret
+
+00000000000003e4 <timeout>:
+.global timeout
+timeout:
+ li a7, SYS_timeout
+ 3e4:	48ed                	li	a7,27
+ ecall
+ 3e6:	00000073          	ecall
+ ret
+ 3ea:	8082                	ret
+
+00000000000003ec <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+ 3ec:	1101                	addi	sp,sp,-32
+ 3ee:	ec06                	sd	ra,24(sp)
+ 3f0:	e822                	sd	s0,16(sp)
+ 3f2:	1000                	addi	s0,sp,32
+ 3f4:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+ 3f8:	4605                	li	a2,1
+ 3fa:	fef40593          	addi	a1,s0,-17
+ 3fe:	00000097          	auipc	ra,0x0
+ 402:	f3e080e7          	jalr	-194(ra) # 33c <write>
+}
+ 406:	60e2                	ld	ra,24(sp)
+ 408:	6442                	ld	s0,16(sp)
+ 40a:	6105                	addi	sp,sp,32
+ 40c:	8082                	ret
+
+000000000000040e <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 40e:	7139                	addi	sp,sp,-64
+ 410:	fc06                	sd	ra,56(sp)
+ 412:	f822                	sd	s0,48(sp)
+ 414:	f426                	sd	s1,40(sp)
+ 416:	f04a                	sd	s2,32(sp)
+ 418:	ec4e                	sd	s3,24(sp)
+ 41a:	0080                	addi	s0,sp,64
+ 41c:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 41e:	c299                	beqz	a3,424 <printint+0x16>
+ 420:	0805c963          	bltz	a1,4b2 <printint+0xa4>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 424:	2581                	sext.w	a1,a1
+  neg = 0;
+ 426:	4881                	li	a7,0
+ 428:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+ 42c:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+ 42e:	2601                	sext.w	a2,a2
+ 430:	00000517          	auipc	a0,0x0
+ 434:	4c850513          	addi	a0,a0,1224 # 8f8 <digits>
+ 438:	883a                	mv	a6,a4
+ 43a:	2705                	addiw	a4,a4,1
+ 43c:	02c5f7bb          	remuw	a5,a1,a2
+ 440:	1782                	slli	a5,a5,0x20
+ 442:	9381                	srli	a5,a5,0x20
+ 444:	97aa                	add	a5,a5,a0
+ 446:	0007c783          	lbu	a5,0(a5)
+ 44a:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+ 44e:	0005879b          	sext.w	a5,a1
+ 452:	02c5d5bb          	divuw	a1,a1,a2
+ 456:	0685                	addi	a3,a3,1
+ 458:	fec7f0e3          	bgeu	a5,a2,438 <printint+0x2a>
+  if(neg)
+ 45c:	00088c63          	beqz	a7,474 <printint+0x66>
+    buf[i++] = '-';
+ 460:	fd070793          	addi	a5,a4,-48
+ 464:	00878733          	add	a4,a5,s0
+ 468:	02d00793          	li	a5,45
+ 46c:	fef70823          	sb	a5,-16(a4)
+ 470:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+ 474:	02e05863          	blez	a4,4a4 <printint+0x96>
+ 478:	fc040793          	addi	a5,s0,-64
+ 47c:	00e78933          	add	s2,a5,a4
+ 480:	fff78993          	addi	s3,a5,-1
+ 484:	99ba                	add	s3,s3,a4
+ 486:	377d                	addiw	a4,a4,-1
+ 488:	1702                	slli	a4,a4,0x20
+ 48a:	9301                	srli	a4,a4,0x20
+ 48c:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+ 490:	fff94583          	lbu	a1,-1(s2)
+ 494:	8526                	mv	a0,s1
+ 496:	00000097          	auipc	ra,0x0
+ 49a:	f56080e7          	jalr	-170(ra) # 3ec <putc>
+  while(--i >= 0)
+ 49e:	197d                	addi	s2,s2,-1
+ 4a0:	ff3918e3          	bne	s2,s3,490 <printint+0x82>
+}
+ 4a4:	70e2                	ld	ra,56(sp)
+ 4a6:	7442                	ld	s0,48(sp)
+ 4a8:	74a2                	ld	s1,40(sp)
+ 4aa:	7902                	ld	s2,32(sp)
+ 4ac:	69e2                	ld	s3,24(sp)
+ 4ae:	6121                	addi	sp,sp,64
+ 4b0:	8082                	ret
+    x = -xx;
+ 4b2:	40b005bb          	negw	a1,a1
+    neg = 1;
+ 4b6:	4885                	li	a7,1
+    x = -xx;
+ 4b8:	bf85                	j	428 <printint+0x1a>
+
+00000000000004ba <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+ 4ba:	7119                	addi	sp,sp,-128
+ 4bc:	fc86                	sd	ra,120(sp)
+ 4be:	f8a2                	sd	s0,112(sp)
+ 4c0:	f4a6                	sd	s1,104(sp)
+ 4c2:	f0ca                	sd	s2,96(sp)
+ 4c4:	ecce                	sd	s3,88(sp)
+ 4c6:	e8d2                	sd	s4,80(sp)
+ 4c8:	e4d6                	sd	s5,72(sp)
+ 4ca:	e0da                	sd	s6,64(sp)
+ 4cc:	fc5e                	sd	s7,56(sp)
+ 4ce:	f862                	sd	s8,48(sp)
+ 4d0:	f466                	sd	s9,40(sp)
+ 4d2:	f06a                	sd	s10,32(sp)
+ 4d4:	ec6e                	sd	s11,24(sp)
+ 4d6:	0100                	addi	s0,sp,128
+  char *s;
+  int c, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+ 4d8:	0005c903          	lbu	s2,0(a1)
+ 4dc:	18090f63          	beqz	s2,67a <vprintf+0x1c0>
+ 4e0:	8aaa                	mv	s5,a0
+ 4e2:	8b32                	mv	s6,a2
+ 4e4:	00158493          	addi	s1,a1,1
+  state = 0;
+ 4e8:	4981                	li	s3,0
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 4ea:	02500a13          	li	s4,37
+ 4ee:	4c55                	li	s8,21
+ 4f0:	00000c97          	auipc	s9,0x0
+ 4f4:	3b0c8c93          	addi	s9,s9,944 # 8a0 <malloc+0x122>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c == 's'){
+        s = va_arg(ap, char*);
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 4f8:	02800d93          	li	s11,40
+  putc(fd, 'x');
+ 4fc:	4d41                	li	s10,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 4fe:	00000b97          	auipc	s7,0x0
+ 502:	3fab8b93          	addi	s7,s7,1018 # 8f8 <digits>
+ 506:	a839                	j	524 <vprintf+0x6a>
+        putc(fd, c);
+ 508:	85ca                	mv	a1,s2
+ 50a:	8556                	mv	a0,s5
+ 50c:	00000097          	auipc	ra,0x0
+ 510:	ee0080e7          	jalr	-288(ra) # 3ec <putc>
+ 514:	a019                	j	51a <vprintf+0x60>
+    } else if(state == '%'){
+ 516:	01498d63          	beq	s3,s4,530 <vprintf+0x76>
+  for(i = 0; fmt[i]; i++){
+ 51a:	0485                	addi	s1,s1,1
+ 51c:	fff4c903          	lbu	s2,-1(s1)
+ 520:	14090d63          	beqz	s2,67a <vprintf+0x1c0>
+    if(state == 0){
+ 524:	fe0999e3          	bnez	s3,516 <vprintf+0x5c>
+      if(c == '%'){
+ 528:	ff4910e3          	bne	s2,s4,508 <vprintf+0x4e>
+        state = '%';
+ 52c:	89d2                	mv	s3,s4
+ 52e:	b7f5                	j	51a <vprintf+0x60>
+      if(c == 'd'){
+ 530:	11490c63          	beq	s2,s4,648 <vprintf+0x18e>
+ 534:	f9d9079b          	addiw	a5,s2,-99
+ 538:	0ff7f793          	zext.b	a5,a5
+ 53c:	10fc6e63          	bltu	s8,a5,658 <vprintf+0x19e>
+ 540:	f9d9079b          	addiw	a5,s2,-99
+ 544:	0ff7f713          	zext.b	a4,a5
+ 548:	10ec6863          	bltu	s8,a4,658 <vprintf+0x19e>
+ 54c:	00271793          	slli	a5,a4,0x2
+ 550:	97e6                	add	a5,a5,s9
+ 552:	439c                	lw	a5,0(a5)
+ 554:	97e6                	add	a5,a5,s9
+ 556:	8782                	jr	a5
+        printint(fd, va_arg(ap, int), 10, 1);
+ 558:	008b0913          	addi	s2,s6,8
+ 55c:	4685                	li	a3,1
+ 55e:	4629                	li	a2,10
+ 560:	000b2583          	lw	a1,0(s6)
+ 564:	8556                	mv	a0,s5
+ 566:	00000097          	auipc	ra,0x0
+ 56a:	ea8080e7          	jalr	-344(ra) # 40e <printint>
+ 56e:	8b4a                	mv	s6,s2
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 570:	4981                	li	s3,0
+ 572:	b765                	j	51a <vprintf+0x60>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 574:	008b0913          	addi	s2,s6,8
+ 578:	4681                	li	a3,0
+ 57a:	4629                	li	a2,10
+ 57c:	000b2583          	lw	a1,0(s6)
+ 580:	8556                	mv	a0,s5
+ 582:	00000097          	auipc	ra,0x0
+ 586:	e8c080e7          	jalr	-372(ra) # 40e <printint>
+ 58a:	8b4a                	mv	s6,s2
+      state = 0;
+ 58c:	4981                	li	s3,0
+ 58e:	b771                	j	51a <vprintf+0x60>
+        printint(fd, va_arg(ap, int), 16, 0);
+ 590:	008b0913          	addi	s2,s6,8
+ 594:	4681                	li	a3,0
+ 596:	866a                	mv	a2,s10
+ 598:	000b2583          	lw	a1,0(s6)
+ 59c:	8556                	mv	a0,s5
+ 59e:	00000097          	auipc	ra,0x0
+ 5a2:	e70080e7          	jalr	-400(ra) # 40e <printint>
+ 5a6:	8b4a                	mv	s6,s2
+      state = 0;
+ 5a8:	4981                	li	s3,0
+ 5aa:	bf85                	j	51a <vprintf+0x60>
+        printptr(fd, va_arg(ap, uint64));
+ 5ac:	008b0793          	addi	a5,s6,8
+ 5b0:	f8f43423          	sd	a5,-120(s0)
+ 5b4:	000b3983          	ld	s3,0(s6)
+  putc(fd, '0');
+ 5b8:	03000593          	li	a1,48
+ 5bc:	8556                	mv	a0,s5
+ 5be:	00000097          	auipc	ra,0x0
+ 5c2:	e2e080e7          	jalr	-466(ra) # 3ec <putc>
+  putc(fd, 'x');
+ 5c6:	07800593          	li	a1,120
+ 5ca:	8556                	mv	a0,s5
+ 5cc:	00000097          	auipc	ra,0x0
+ 5d0:	e20080e7          	jalr	-480(ra) # 3ec <putc>
+ 5d4:	896a                	mv	s2,s10
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 5d6:	03c9d793          	srli	a5,s3,0x3c
+ 5da:	97de                	add	a5,a5,s7
+ 5dc:	0007c583          	lbu	a1,0(a5)
+ 5e0:	8556                	mv	a0,s5
+ 5e2:	00000097          	auipc	ra,0x0
+ 5e6:	e0a080e7          	jalr	-502(ra) # 3ec <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+ 5ea:	0992                	slli	s3,s3,0x4
+ 5ec:	397d                	addiw	s2,s2,-1
+ 5ee:	fe0914e3          	bnez	s2,5d6 <vprintf+0x11c>
+        printptr(fd, va_arg(ap, uint64));
+ 5f2:	f8843b03          	ld	s6,-120(s0)
+      state = 0;
+ 5f6:	4981                	li	s3,0
+ 5f8:	b70d                	j	51a <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 5fa:	008b0913          	addi	s2,s6,8
+ 5fe:	000b3983          	ld	s3,0(s6)
+        if(s == 0)
+ 602:	02098163          	beqz	s3,624 <vprintf+0x16a>
+        while(*s != 0){
+ 606:	0009c583          	lbu	a1,0(s3)
+ 60a:	c5ad                	beqz	a1,674 <vprintf+0x1ba>
+          putc(fd, *s);
+ 60c:	8556                	mv	a0,s5
+ 60e:	00000097          	auipc	ra,0x0
+ 612:	dde080e7          	jalr	-546(ra) # 3ec <putc>
+          s++;
+ 616:	0985                	addi	s3,s3,1
+        while(*s != 0){
+ 618:	0009c583          	lbu	a1,0(s3)
+ 61c:	f9e5                	bnez	a1,60c <vprintf+0x152>
+        s = va_arg(ap, char*);
+ 61e:	8b4a                	mv	s6,s2
+      state = 0;
+ 620:	4981                	li	s3,0
+ 622:	bde5                	j	51a <vprintf+0x60>
+          s = "(null)";
+ 624:	00000997          	auipc	s3,0x0
+ 628:	27498993          	addi	s3,s3,628 # 898 <malloc+0x11a>
+        while(*s != 0){
+ 62c:	85ee                	mv	a1,s11
+ 62e:	bff9                	j	60c <vprintf+0x152>
+        putc(fd, va_arg(ap, uint));
+ 630:	008b0913          	addi	s2,s6,8
+ 634:	000b4583          	lbu	a1,0(s6)
+ 638:	8556                	mv	a0,s5
+ 63a:	00000097          	auipc	ra,0x0
+ 63e:	db2080e7          	jalr	-590(ra) # 3ec <putc>
+ 642:	8b4a                	mv	s6,s2
+      state = 0;
+ 644:	4981                	li	s3,0
+ 646:	bdd1                	j	51a <vprintf+0x60>
+        putc(fd, c);
+ 648:	85d2                	mv	a1,s4
+ 64a:	8556                	mv	a0,s5
+ 64c:	00000097          	auipc	ra,0x0
+ 650:	da0080e7          	jalr	-608(ra) # 3ec <putc>
+      state = 0;
+ 654:	4981                	li	s3,0
+ 656:	b5d1                	j	51a <vprintf+0x60>
+        putc(fd, '%');
+ 658:	85d2                	mv	a1,s4
+ 65a:	8556                	mv	a0,s5
+ 65c:	00000097          	auipc	ra,0x0
+ 660:	d90080e7          	jalr	-624(ra) # 3ec <putc>
+        putc(fd, c);
+ 664:	85ca                	mv	a1,s2
+ 666:	8556                	mv	a0,s5
+ 668:	00000097          	auipc	ra,0x0
+ 66c:	d84080e7          	jalr	-636(ra) # 3ec <putc>
+      state = 0;
+ 670:	4981                	li	s3,0
+ 672:	b565                	j	51a <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 674:	8b4a                	mv	s6,s2
+      state = 0;
+ 676:	4981                	li	s3,0
+ 678:	b54d                	j	51a <vprintf+0x60>
+    }
+  }
+}
+ 67a:	70e6                	ld	ra,120(sp)
+ 67c:	7446                	ld	s0,112(sp)
+ 67e:	74a6                	ld	s1,104(sp)
+ 680:	7906                	ld	s2,96(sp)
+ 682:	69e6                	ld	s3,88(sp)
+ 684:	6a46                	ld	s4,80(sp)
+ 686:	6aa6                	ld	s5,72(sp)
+ 688:	6b06                	ld	s6,64(sp)
+ 68a:	7be2                	ld	s7,56(sp)
+ 68c:	7c42                	ld	s8,48(sp)
+ 68e:	7ca2                	ld	s9,40(sp)
+ 690:	7d02                	ld	s10,32(sp)
+ 692:	6de2                	ld	s11,24(sp)
+ 694:	6109                	addi	sp,sp,128
+ 696:	8082                	ret
+
+0000000000000698 <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+ 698:	715d                	addi	sp,sp,-80
+ 69a:	ec06                	sd	ra,24(sp)
+ 69c:	e822                	sd	s0,16(sp)
+ 69e:	1000                	addi	s0,sp,32
+ 6a0:	e010                	sd	a2,0(s0)
+ 6a2:	e414                	sd	a3,8(s0)
+ 6a4:	e818                	sd	a4,16(s0)
+ 6a6:	ec1c                	sd	a5,24(s0)
+ 6a8:	03043023          	sd	a6,32(s0)
+ 6ac:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 6b0:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+ 6b4:	8622                	mv	a2,s0
+ 6b6:	00000097          	auipc	ra,0x0
+ 6ba:	e04080e7          	jalr	-508(ra) # 4ba <vprintf>
+}
+ 6be:	60e2                	ld	ra,24(sp)
+ 6c0:	6442                	ld	s0,16(sp)
+ 6c2:	6161                	addi	sp,sp,80
+ 6c4:	8082                	ret
+
+00000000000006c6 <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+ 6c6:	711d                	addi	sp,sp,-96
+ 6c8:	ec06                	sd	ra,24(sp)
+ 6ca:	e822                	sd	s0,16(sp)
+ 6cc:	1000                	addi	s0,sp,32
+ 6ce:	e40c                	sd	a1,8(s0)
+ 6d0:	e810                	sd	a2,16(s0)
+ 6d2:	ec14                	sd	a3,24(s0)
+ 6d4:	f018                	sd	a4,32(s0)
+ 6d6:	f41c                	sd	a5,40(s0)
+ 6d8:	03043823          	sd	a6,48(s0)
+ 6dc:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 6e0:	00840613          	addi	a2,s0,8
+ 6e4:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+ 6e8:	85aa                	mv	a1,a0
+ 6ea:	4505                	li	a0,1
+ 6ec:	00000097          	auipc	ra,0x0
+ 6f0:	dce080e7          	jalr	-562(ra) # 4ba <vprintf>
+}
+ 6f4:	60e2                	ld	ra,24(sp)
+ 6f6:	6442                	ld	s0,16(sp)
+ 6f8:	6125                	addi	sp,sp,96
+ 6fa:	8082                	ret
+
+00000000000006fc <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6fc:	1141                	addi	sp,sp,-16
+ 6fe:	e422                	sd	s0,8(sp)
+ 700:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 702:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 706:	00000797          	auipc	a5,0x0
+ 70a:	20a7b783          	ld	a5,522(a5) # 910 <freep>
+ 70e:	a02d                	j	738 <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 710:	4618                	lw	a4,8(a2)
+ 712:	9f2d                	addw	a4,a4,a1
+ 714:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 718:	6398                	ld	a4,0(a5)
+ 71a:	6310                	ld	a2,0(a4)
+ 71c:	a83d                	j	75a <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 71e:	ff852703          	lw	a4,-8(a0)
+ 722:	9f31                	addw	a4,a4,a2
+ 724:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+ 726:	ff053683          	ld	a3,-16(a0)
+ 72a:	a091                	j	76e <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 72c:	6398                	ld	a4,0(a5)
+ 72e:	00e7e463          	bltu	a5,a4,736 <free+0x3a>
+ 732:	00e6ea63          	bltu	a3,a4,746 <free+0x4a>
+{
+ 736:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 738:	fed7fae3          	bgeu	a5,a3,72c <free+0x30>
+ 73c:	6398                	ld	a4,0(a5)
+ 73e:	00e6e463          	bltu	a3,a4,746 <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 742:	fee7eae3          	bltu	a5,a4,736 <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+ 746:	ff852583          	lw	a1,-8(a0)
+ 74a:	6390                	ld	a2,0(a5)
+ 74c:	02059813          	slli	a6,a1,0x20
+ 750:	01c85713          	srli	a4,a6,0x1c
+ 754:	9736                	add	a4,a4,a3
+ 756:	fae60de3          	beq	a2,a4,710 <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 75a:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+ 75e:	4790                	lw	a2,8(a5)
+ 760:	02061593          	slli	a1,a2,0x20
+ 764:	01c5d713          	srli	a4,a1,0x1c
+ 768:	973e                	add	a4,a4,a5
+ 76a:	fae68ae3          	beq	a3,a4,71e <free+0x22>
+    p->s.ptr = bp->s.ptr;
+ 76e:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 770:	00000717          	auipc	a4,0x0
+ 774:	1af73023          	sd	a5,416(a4) # 910 <freep>
+}
+ 778:	6422                	ld	s0,8(sp)
+ 77a:	0141                	addi	sp,sp,16
+ 77c:	8082                	ret
+
+000000000000077e <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 77e:	7139                	addi	sp,sp,-64
+ 780:	fc06                	sd	ra,56(sp)
+ 782:	f822                	sd	s0,48(sp)
+ 784:	f426                	sd	s1,40(sp)
+ 786:	f04a                	sd	s2,32(sp)
+ 788:	ec4e                	sd	s3,24(sp)
+ 78a:	e852                	sd	s4,16(sp)
+ 78c:	e456                	sd	s5,8(sp)
+ 78e:	e05a                	sd	s6,0(sp)
+ 790:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 792:	02051493          	slli	s1,a0,0x20
+ 796:	9081                	srli	s1,s1,0x20
+ 798:	04bd                	addi	s1,s1,15
+ 79a:	8091                	srli	s1,s1,0x4
+ 79c:	0014899b          	addiw	s3,s1,1
+ 7a0:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+ 7a2:	00000517          	auipc	a0,0x0
+ 7a6:	16e53503          	ld	a0,366(a0) # 910 <freep>
+ 7aa:	c515                	beqz	a0,7d6 <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7ac:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 7ae:	4798                	lw	a4,8(a5)
+ 7b0:	02977f63          	bgeu	a4,s1,7ee <malloc+0x70>
+ 7b4:	8a4e                	mv	s4,s3
+ 7b6:	0009871b          	sext.w	a4,s3
+ 7ba:	6685                	lui	a3,0x1
+ 7bc:	00d77363          	bgeu	a4,a3,7c2 <malloc+0x44>
+ 7c0:	6a05                	lui	s4,0x1
+ 7c2:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+ 7c6:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 7ca:	00000917          	auipc	s2,0x0
+ 7ce:	14690913          	addi	s2,s2,326 # 910 <freep>
+  if(p == (char*)-1)
+ 7d2:	5afd                	li	s5,-1
+ 7d4:	a895                	j	848 <malloc+0xca>
+    base.s.ptr = freep = prevp = &base;
+ 7d6:	00000797          	auipc	a5,0x0
+ 7da:	14278793          	addi	a5,a5,322 # 918 <base>
+ 7de:	00000717          	auipc	a4,0x0
+ 7e2:	12f73923          	sd	a5,306(a4) # 910 <freep>
+ 7e6:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+ 7e8:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+ 7ec:	b7e1                	j	7b4 <malloc+0x36>
+      if(p->s.size == nunits)
+ 7ee:	02e48c63          	beq	s1,a4,826 <malloc+0xa8>
+        p->s.size -= nunits;
+ 7f2:	4137073b          	subw	a4,a4,s3
+ 7f6:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+ 7f8:	02071693          	slli	a3,a4,0x20
+ 7fc:	01c6d713          	srli	a4,a3,0x1c
+ 800:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+ 802:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+ 806:	00000717          	auipc	a4,0x0
+ 80a:	10a73523          	sd	a0,266(a4) # 910 <freep>
+      return (void*)(p + 1);
+ 80e:	01078513          	addi	a0,a5,16
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ 812:	70e2                	ld	ra,56(sp)
+ 814:	7442                	ld	s0,48(sp)
+ 816:	74a2                	ld	s1,40(sp)
+ 818:	7902                	ld	s2,32(sp)
+ 81a:	69e2                	ld	s3,24(sp)
+ 81c:	6a42                	ld	s4,16(sp)
+ 81e:	6aa2                	ld	s5,8(sp)
+ 820:	6b02                	ld	s6,0(sp)
+ 822:	6121                	addi	sp,sp,64
+ 824:	8082                	ret
+        prevp->s.ptr = p->s.ptr;
+ 826:	6398                	ld	a4,0(a5)
+ 828:	e118                	sd	a4,0(a0)
+ 82a:	bff1                	j	806 <malloc+0x88>
+  hp->s.size = nu;
+ 82c:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+ 830:	0541                	addi	a0,a0,16
+ 832:	00000097          	auipc	ra,0x0
+ 836:	eca080e7          	jalr	-310(ra) # 6fc <free>
+  return freep;
+ 83a:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+ 83e:	d971                	beqz	a0,812 <malloc+0x94>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 840:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 842:	4798                	lw	a4,8(a5)
+ 844:	fa9775e3          	bgeu	a4,s1,7ee <malloc+0x70>
+    if(p == freep)
+ 848:	00093703          	ld	a4,0(s2)
+ 84c:	853e                	mv	a0,a5
+ 84e:	fef719e3          	bne	a4,a5,840 <malloc+0xc2>
+  p = sbrk(nu * sizeof(Header));
+ 852:	8552                	mv	a0,s4
+ 854:	00000097          	auipc	ra,0x0
+ 858:	b50080e7          	jalr	-1200(ra) # 3a4 <sbrk>
+  if(p == (char*)-1)
+ 85c:	fd5518e3          	bne	a0,s5,82c <malloc+0xae>
+        return 0;
+ 860:	4501                	li	a0,0
+ 862:	bf45                	j	812 <malloc+0x94>
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/prod.c os-workshop/user/prod.c
--- xv6-riscv/user/prod.c	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/prod.c	2022-05-28 22:04:25.000000000 -0300
@@ -0,0 +1,23 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fcntl.h"
+
+int main(void) {
+
+  int fd = open("buffer", O_CREATE | O_WRONLY);
+  int sid = semget(23, 1);
+  for (;;) {
+    if (semdown(sid) == 0) {
+      printf("PROD IN \n");
+      timeout(10000);
+      write(fd, "product", strlen("product"));
+      printf("PROD OUT \n");
+      timeout(10000);
+      semup(sid);
+    }
+  }
+  semclose(sid);
+  close(fd);
+  exit(0);
+}
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/prod.d os-workshop/user/prod.d
--- xv6-riscv/user/prod.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/prod.d	2022-05-28 22:34:38.000000000 -0300
@@ -0,0 +1,2 @@
+user/prod.o: user/prod.c kernel/types.h kernel/stat.h user/user.h \
+ kernel/fcntl.h
Binary files xv6-riscv/user/prod.o and os-workshop/user/prod.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/prod.sym os-workshop/user/prod.sym
--- xv6-riscv/user/prod.sym	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/prod.sym	2022-05-28 22:34:38.000000000 -0300
@@ -0,0 +1,76 @@
+0000000000000000 .text
+0000000000000868 .rodata
+0000000000000910 .sbss
+0000000000000918 .bss
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_aranges
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_line
+0000000000000000 .debug_frame
+0000000000000000 .debug_str
+0000000000000000 .debug_line_str
+0000000000000000 .debug_loclists
+0000000000000000 .debug_rnglists
+0000000000000000 prod.c
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+00000000000003ec putc
+000000000000040e printint
+00000000000008f8 digits
+0000000000000000 umalloc.c
+0000000000000910 freep
+0000000000000918 base
+00000000000000b0 strcpy
+00000000000006c6 printf
+0000000000001109 __global_pointer$
+000000000000026a memmove
+0000000000000364 mknod
+00000000000003cc semdown
+0000000000000168 gets
+0000000000000909 __SDATA_BEGIN__
+00000000000003c4 semget
+000000000000039c getpid
+00000000000002fc memcpy
+000000000000077e malloc
+00000000000003dc semclose
+00000000000003ac sleep
+000000000000032c pipe
+000000000000033c write
+0000000000000374 fstat
+0000000000000698 fprintf
+000000000000034c kill
+00000000000004ba vprintf
+000000000000038c chdir
+0000000000000354 exec
+0000000000000324 wait
+0000000000000334 read
+000000000000036c unlink
+00000000000002c2 memcmp
+0000000000000314 fork
+0000000000000928 __BSS_END__
+00000000000003a4 sbrk
+00000000000003b4 uptime
+0000000000000909 __bss_start
+0000000000000122 memset
+0000000000000000 main
+00000000000003e4 timeout
+00000000000000cc strcmp
+0000000000000394 dup
+0000000000000909 __DATA_BEGIN__
+00000000000001dc stat
+0000000000000909 _edata
+00000000000003bc setp
+0000000000000928 _end
+000000000000037c link
+000000000000031c exit
+0000000000000222 atoi
+00000000000000f8 strlen
+000000000000035c open
+00000000000003d4 semup
+0000000000000144 strchr
+0000000000000384 mkdir
+0000000000000344 close
+00000000000006fc free
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/rm.asm os-workshop/user/rm.asm
--- xv6-riscv/user/rm.asm	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/rm.asm	2022-05-28 22:34:34.000000000 -0300
@@ -0,0 +1,1391 @@
+
+user/_rm:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <main>:
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	7179                	addi	sp,sp,-48
+   2:	f406                	sd	ra,40(sp)
+   4:	f022                	sd	s0,32(sp)
+   6:	ec26                	sd	s1,24(sp)
+   8:	e84a                	sd	s2,16(sp)
+   a:	e44e                	sd	s3,8(sp)
+   c:	1800                	addi	s0,sp,48
+  int i;
+
+  if(argc < 2){
+   e:	4785                	li	a5,1
+  10:	02a7d763          	bge	a5,a0,3e <main+0x3e>
+  14:	00858493          	addi	s1,a1,8
+  18:	ffe5091b          	addiw	s2,a0,-2
+  1c:	02091793          	slli	a5,s2,0x20
+  20:	01d7d913          	srli	s2,a5,0x1d
+  24:	05c1                	addi	a1,a1,16
+  26:	992e                	add	s2,s2,a1
+    fprintf(2, "Usage: rm files...\n");
+    exit(1);
+  }
+
+  for(i = 1; i < argc; i++){
+    if(unlink(argv[i]) < 0){
+  28:	6088                	ld	a0,0(s1)
+  2a:	00000097          	auipc	ra,0x0
+  2e:	30a080e7          	jalr	778(ra) # 334 <unlink>
+  32:	02054463          	bltz	a0,5a <main+0x5a>
+  for(i = 1; i < argc; i++){
+  36:	04a1                	addi	s1,s1,8
+  38:	ff2498e3          	bne	s1,s2,28 <main+0x28>
+  3c:	a80d                	j	6e <main+0x6e>
+    fprintf(2, "Usage: rm files...\n");
+  3e:	00000597          	auipc	a1,0x0
+  42:	7f258593          	addi	a1,a1,2034 # 830 <malloc+0xea>
+  46:	4509                	li	a0,2
+  48:	00000097          	auipc	ra,0x0
+  4c:	618080e7          	jalr	1560(ra) # 660 <fprintf>
+    exit(1);
+  50:	4505                	li	a0,1
+  52:	00000097          	auipc	ra,0x0
+  56:	292080e7          	jalr	658(ra) # 2e4 <exit>
+      fprintf(2, "rm: %s failed to delete\n", argv[i]);
+  5a:	6090                	ld	a2,0(s1)
+  5c:	00000597          	auipc	a1,0x0
+  60:	7ec58593          	addi	a1,a1,2028 # 848 <malloc+0x102>
+  64:	4509                	li	a0,2
+  66:	00000097          	auipc	ra,0x0
+  6a:	5fa080e7          	jalr	1530(ra) # 660 <fprintf>
+      break;
+    }
+  }
+
+  exit(0);
+  6e:	4501                	li	a0,0
+  70:	00000097          	auipc	ra,0x0
+  74:	274080e7          	jalr	628(ra) # 2e4 <exit>
+
+0000000000000078 <strcpy>:
+#include "kernel/fcntl.h"
+#include "user/user.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  78:	1141                	addi	sp,sp,-16
+  7a:	e422                	sd	s0,8(sp)
+  7c:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  7e:	87aa                	mv	a5,a0
+  80:	0585                	addi	a1,a1,1
+  82:	0785                	addi	a5,a5,1
+  84:	fff5c703          	lbu	a4,-1(a1)
+  88:	fee78fa3          	sb	a4,-1(a5)
+  8c:	fb75                	bnez	a4,80 <strcpy+0x8>
+    ;
+  return os;
+}
+  8e:	6422                	ld	s0,8(sp)
+  90:	0141                	addi	sp,sp,16
+  92:	8082                	ret
+
+0000000000000094 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  94:	1141                	addi	sp,sp,-16
+  96:	e422                	sd	s0,8(sp)
+  98:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+  9a:	00054783          	lbu	a5,0(a0)
+  9e:	cb91                	beqz	a5,b2 <strcmp+0x1e>
+  a0:	0005c703          	lbu	a4,0(a1)
+  a4:	00f71763          	bne	a4,a5,b2 <strcmp+0x1e>
+    p++, q++;
+  a8:	0505                	addi	a0,a0,1
+  aa:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+  ac:	00054783          	lbu	a5,0(a0)
+  b0:	fbe5                	bnez	a5,a0 <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+  b2:	0005c503          	lbu	a0,0(a1)
+}
+  b6:	40a7853b          	subw	a0,a5,a0
+  ba:	6422                	ld	s0,8(sp)
+  bc:	0141                	addi	sp,sp,16
+  be:	8082                	ret
+
+00000000000000c0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  c0:	1141                	addi	sp,sp,-16
+  c2:	e422                	sd	s0,8(sp)
+  c4:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+  c6:	00054783          	lbu	a5,0(a0)
+  ca:	cf91                	beqz	a5,e6 <strlen+0x26>
+  cc:	0505                	addi	a0,a0,1
+  ce:	87aa                	mv	a5,a0
+  d0:	4685                	li	a3,1
+  d2:	9e89                	subw	a3,a3,a0
+  d4:	00f6853b          	addw	a0,a3,a5
+  d8:	0785                	addi	a5,a5,1
+  da:	fff7c703          	lbu	a4,-1(a5)
+  de:	fb7d                	bnez	a4,d4 <strlen+0x14>
+    ;
+  return n;
+}
+  e0:	6422                	ld	s0,8(sp)
+  e2:	0141                	addi	sp,sp,16
+  e4:	8082                	ret
+  for(n = 0; s[n]; n++)
+  e6:	4501                	li	a0,0
+  e8:	bfe5                	j	e0 <strlen+0x20>
+
+00000000000000ea <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  ea:	1141                	addi	sp,sp,-16
+  ec:	e422                	sd	s0,8(sp)
+  ee:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+  f0:	ca19                	beqz	a2,106 <memset+0x1c>
+  f2:	87aa                	mv	a5,a0
+  f4:	1602                	slli	a2,a2,0x20
+  f6:	9201                	srli	a2,a2,0x20
+  f8:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+  fc:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+ 100:	0785                	addi	a5,a5,1
+ 102:	fee79de3          	bne	a5,a4,fc <memset+0x12>
+  }
+  return dst;
+}
+ 106:	6422                	ld	s0,8(sp)
+ 108:	0141                	addi	sp,sp,16
+ 10a:	8082                	ret
+
+000000000000010c <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 10c:	1141                	addi	sp,sp,-16
+ 10e:	e422                	sd	s0,8(sp)
+ 110:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+ 112:	00054783          	lbu	a5,0(a0)
+ 116:	cb99                	beqz	a5,12c <strchr+0x20>
+    if(*s == c)
+ 118:	00f58763          	beq	a1,a5,126 <strchr+0x1a>
+  for(; *s; s++)
+ 11c:	0505                	addi	a0,a0,1
+ 11e:	00054783          	lbu	a5,0(a0)
+ 122:	fbfd                	bnez	a5,118 <strchr+0xc>
+      return (char*)s;
+  return 0;
+ 124:	4501                	li	a0,0
+}
+ 126:	6422                	ld	s0,8(sp)
+ 128:	0141                	addi	sp,sp,16
+ 12a:	8082                	ret
+  return 0;
+ 12c:	4501                	li	a0,0
+ 12e:	bfe5                	j	126 <strchr+0x1a>
+
+0000000000000130 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 130:	711d                	addi	sp,sp,-96
+ 132:	ec86                	sd	ra,88(sp)
+ 134:	e8a2                	sd	s0,80(sp)
+ 136:	e4a6                	sd	s1,72(sp)
+ 138:	e0ca                	sd	s2,64(sp)
+ 13a:	fc4e                	sd	s3,56(sp)
+ 13c:	f852                	sd	s4,48(sp)
+ 13e:	f456                	sd	s5,40(sp)
+ 140:	f05a                	sd	s6,32(sp)
+ 142:	ec5e                	sd	s7,24(sp)
+ 144:	1080                	addi	s0,sp,96
+ 146:	8baa                	mv	s7,a0
+ 148:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 14a:	892a                	mv	s2,a0
+ 14c:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+ 14e:	4aa9                	li	s5,10
+ 150:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+ 152:	89a6                	mv	s3,s1
+ 154:	2485                	addiw	s1,s1,1
+ 156:	0344d863          	bge	s1,s4,186 <gets+0x56>
+    cc = read(0, &c, 1);
+ 15a:	4605                	li	a2,1
+ 15c:	faf40593          	addi	a1,s0,-81
+ 160:	4501                	li	a0,0
+ 162:	00000097          	auipc	ra,0x0
+ 166:	19a080e7          	jalr	410(ra) # 2fc <read>
+    if(cc < 1)
+ 16a:	00a05e63          	blez	a0,186 <gets+0x56>
+    buf[i++] = c;
+ 16e:	faf44783          	lbu	a5,-81(s0)
+ 172:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+ 176:	01578763          	beq	a5,s5,184 <gets+0x54>
+ 17a:	0905                	addi	s2,s2,1
+ 17c:	fd679be3          	bne	a5,s6,152 <gets+0x22>
+  for(i=0; i+1 < max; ){
+ 180:	89a6                	mv	s3,s1
+ 182:	a011                	j	186 <gets+0x56>
+ 184:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+ 186:	99de                	add	s3,s3,s7
+ 188:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+ 18c:	855e                	mv	a0,s7
+ 18e:	60e6                	ld	ra,88(sp)
+ 190:	6446                	ld	s0,80(sp)
+ 192:	64a6                	ld	s1,72(sp)
+ 194:	6906                	ld	s2,64(sp)
+ 196:	79e2                	ld	s3,56(sp)
+ 198:	7a42                	ld	s4,48(sp)
+ 19a:	7aa2                	ld	s5,40(sp)
+ 19c:	7b02                	ld	s6,32(sp)
+ 19e:	6be2                	ld	s7,24(sp)
+ 1a0:	6125                	addi	sp,sp,96
+ 1a2:	8082                	ret
+
+00000000000001a4 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1a4:	1101                	addi	sp,sp,-32
+ 1a6:	ec06                	sd	ra,24(sp)
+ 1a8:	e822                	sd	s0,16(sp)
+ 1aa:	e426                	sd	s1,8(sp)
+ 1ac:	e04a                	sd	s2,0(sp)
+ 1ae:	1000                	addi	s0,sp,32
+ 1b0:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1b2:	4581                	li	a1,0
+ 1b4:	00000097          	auipc	ra,0x0
+ 1b8:	170080e7          	jalr	368(ra) # 324 <open>
+  if(fd < 0)
+ 1bc:	02054563          	bltz	a0,1e6 <stat+0x42>
+ 1c0:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+ 1c2:	85ca                	mv	a1,s2
+ 1c4:	00000097          	auipc	ra,0x0
+ 1c8:	178080e7          	jalr	376(ra) # 33c <fstat>
+ 1cc:	892a                	mv	s2,a0
+  close(fd);
+ 1ce:	8526                	mv	a0,s1
+ 1d0:	00000097          	auipc	ra,0x0
+ 1d4:	13c080e7          	jalr	316(ra) # 30c <close>
+  return r;
+}
+ 1d8:	854a                	mv	a0,s2
+ 1da:	60e2                	ld	ra,24(sp)
+ 1dc:	6442                	ld	s0,16(sp)
+ 1de:	64a2                	ld	s1,8(sp)
+ 1e0:	6902                	ld	s2,0(sp)
+ 1e2:	6105                	addi	sp,sp,32
+ 1e4:	8082                	ret
+    return -1;
+ 1e6:	597d                	li	s2,-1
+ 1e8:	bfc5                	j	1d8 <stat+0x34>
+
+00000000000001ea <atoi>:
+
+int
+atoi(const char *s)
+{
+ 1ea:	1141                	addi	sp,sp,-16
+ 1ec:	e422                	sd	s0,8(sp)
+ 1ee:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 1f0:	00054683          	lbu	a3,0(a0)
+ 1f4:	fd06879b          	addiw	a5,a3,-48
+ 1f8:	0ff7f793          	zext.b	a5,a5
+ 1fc:	4625                	li	a2,9
+ 1fe:	02f66863          	bltu	a2,a5,22e <atoi+0x44>
+ 202:	872a                	mv	a4,a0
+  n = 0;
+ 204:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+ 206:	0705                	addi	a4,a4,1
+ 208:	0025179b          	slliw	a5,a0,0x2
+ 20c:	9fa9                	addw	a5,a5,a0
+ 20e:	0017979b          	slliw	a5,a5,0x1
+ 212:	9fb5                	addw	a5,a5,a3
+ 214:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+ 218:	00074683          	lbu	a3,0(a4)
+ 21c:	fd06879b          	addiw	a5,a3,-48
+ 220:	0ff7f793          	zext.b	a5,a5
+ 224:	fef671e3          	bgeu	a2,a5,206 <atoi+0x1c>
+  return n;
+}
+ 228:	6422                	ld	s0,8(sp)
+ 22a:	0141                	addi	sp,sp,16
+ 22c:	8082                	ret
+  n = 0;
+ 22e:	4501                	li	a0,0
+ 230:	bfe5                	j	228 <atoi+0x3e>
+
+0000000000000232 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 232:	1141                	addi	sp,sp,-16
+ 234:	e422                	sd	s0,8(sp)
+ 236:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+ 238:	02b57463          	bgeu	a0,a1,260 <memmove+0x2e>
+    while(n-- > 0)
+ 23c:	00c05f63          	blez	a2,25a <memmove+0x28>
+ 240:	1602                	slli	a2,a2,0x20
+ 242:	9201                	srli	a2,a2,0x20
+ 244:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+ 248:	872a                	mv	a4,a0
+      *dst++ = *src++;
+ 24a:	0585                	addi	a1,a1,1
+ 24c:	0705                	addi	a4,a4,1
+ 24e:	fff5c683          	lbu	a3,-1(a1)
+ 252:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+ 256:	fee79ae3          	bne	a5,a4,24a <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+ 25a:	6422                	ld	s0,8(sp)
+ 25c:	0141                	addi	sp,sp,16
+ 25e:	8082                	ret
+    dst += n;
+ 260:	00c50733          	add	a4,a0,a2
+    src += n;
+ 264:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+ 266:	fec05ae3          	blez	a2,25a <memmove+0x28>
+ 26a:	fff6079b          	addiw	a5,a2,-1
+ 26e:	1782                	slli	a5,a5,0x20
+ 270:	9381                	srli	a5,a5,0x20
+ 272:	fff7c793          	not	a5,a5
+ 276:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+ 278:	15fd                	addi	a1,a1,-1
+ 27a:	177d                	addi	a4,a4,-1
+ 27c:	0005c683          	lbu	a3,0(a1)
+ 280:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+ 284:	fee79ae3          	bne	a5,a4,278 <memmove+0x46>
+ 288:	bfc9                	j	25a <memmove+0x28>
+
+000000000000028a <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+ 28a:	1141                	addi	sp,sp,-16
+ 28c:	e422                	sd	s0,8(sp)
+ 28e:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+ 290:	ca05                	beqz	a2,2c0 <memcmp+0x36>
+ 292:	fff6069b          	addiw	a3,a2,-1
+ 296:	1682                	slli	a3,a3,0x20
+ 298:	9281                	srli	a3,a3,0x20
+ 29a:	0685                	addi	a3,a3,1
+ 29c:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+ 29e:	00054783          	lbu	a5,0(a0)
+ 2a2:	0005c703          	lbu	a4,0(a1)
+ 2a6:	00e79863          	bne	a5,a4,2b6 <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+ 2aa:	0505                	addi	a0,a0,1
+    p2++;
+ 2ac:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+ 2ae:	fed518e3          	bne	a0,a3,29e <memcmp+0x14>
+  }
+  return 0;
+ 2b2:	4501                	li	a0,0
+ 2b4:	a019                	j	2ba <memcmp+0x30>
+      return *p1 - *p2;
+ 2b6:	40e7853b          	subw	a0,a5,a4
+}
+ 2ba:	6422                	ld	s0,8(sp)
+ 2bc:	0141                	addi	sp,sp,16
+ 2be:	8082                	ret
+  return 0;
+ 2c0:	4501                	li	a0,0
+ 2c2:	bfe5                	j	2ba <memcmp+0x30>
+
+00000000000002c4 <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+ 2c4:	1141                	addi	sp,sp,-16
+ 2c6:	e406                	sd	ra,8(sp)
+ 2c8:	e022                	sd	s0,0(sp)
+ 2ca:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+ 2cc:	00000097          	auipc	ra,0x0
+ 2d0:	f66080e7          	jalr	-154(ra) # 232 <memmove>
+}
+ 2d4:	60a2                	ld	ra,8(sp)
+ 2d6:	6402                	ld	s0,0(sp)
+ 2d8:	0141                	addi	sp,sp,16
+ 2da:	8082                	ret
+
+00000000000002dc <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ 2dc:	4885                	li	a7,1
+ ecall
+ 2de:	00000073          	ecall
+ ret
+ 2e2:	8082                	ret
+
+00000000000002e4 <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+ 2e4:	4889                	li	a7,2
+ ecall
+ 2e6:	00000073          	ecall
+ ret
+ 2ea:	8082                	ret
+
+00000000000002ec <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+ 2ec:	488d                	li	a7,3
+ ecall
+ 2ee:	00000073          	ecall
+ ret
+ 2f2:	8082                	ret
+
+00000000000002f4 <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ 2f4:	4891                	li	a7,4
+ ecall
+ 2f6:	00000073          	ecall
+ ret
+ 2fa:	8082                	ret
+
+00000000000002fc <read>:
+.global read
+read:
+ li a7, SYS_read
+ 2fc:	4895                	li	a7,5
+ ecall
+ 2fe:	00000073          	ecall
+ ret
+ 302:	8082                	ret
+
+0000000000000304 <write>:
+.global write
+write:
+ li a7, SYS_write
+ 304:	48c1                	li	a7,16
+ ecall
+ 306:	00000073          	ecall
+ ret
+ 30a:	8082                	ret
+
+000000000000030c <close>:
+.global close
+close:
+ li a7, SYS_close
+ 30c:	48d5                	li	a7,21
+ ecall
+ 30e:	00000073          	ecall
+ ret
+ 312:	8082                	ret
+
+0000000000000314 <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+ 314:	4899                	li	a7,6
+ ecall
+ 316:	00000073          	ecall
+ ret
+ 31a:	8082                	ret
+
+000000000000031c <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+ 31c:	489d                	li	a7,7
+ ecall
+ 31e:	00000073          	ecall
+ ret
+ 322:	8082                	ret
+
+0000000000000324 <open>:
+.global open
+open:
+ li a7, SYS_open
+ 324:	48bd                	li	a7,15
+ ecall
+ 326:	00000073          	ecall
+ ret
+ 32a:	8082                	ret
+
+000000000000032c <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ 32c:	48c5                	li	a7,17
+ ecall
+ 32e:	00000073          	ecall
+ ret
+ 332:	8082                	ret
+
+0000000000000334 <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ 334:	48c9                	li	a7,18
+ ecall
+ 336:	00000073          	ecall
+ ret
+ 33a:	8082                	ret
+
+000000000000033c <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ 33c:	48a1                	li	a7,8
+ ecall
+ 33e:	00000073          	ecall
+ ret
+ 342:	8082                	ret
+
+0000000000000344 <link>:
+.global link
+link:
+ li a7, SYS_link
+ 344:	48cd                	li	a7,19
+ ecall
+ 346:	00000073          	ecall
+ ret
+ 34a:	8082                	ret
+
+000000000000034c <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ 34c:	48d1                	li	a7,20
+ ecall
+ 34e:	00000073          	ecall
+ ret
+ 352:	8082                	ret
+
+0000000000000354 <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ 354:	48a5                	li	a7,9
+ ecall
+ 356:	00000073          	ecall
+ ret
+ 35a:	8082                	ret
+
+000000000000035c <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+ 35c:	48a9                	li	a7,10
+ ecall
+ 35e:	00000073          	ecall
+ ret
+ 362:	8082                	ret
+
+0000000000000364 <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ 364:	48ad                	li	a7,11
+ ecall
+ 366:	00000073          	ecall
+ ret
+ 36a:	8082                	ret
+
+000000000000036c <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ 36c:	48b1                	li	a7,12
+ ecall
+ 36e:	00000073          	ecall
+ ret
+ 372:	8082                	ret
+
+0000000000000374 <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ 374:	48b5                	li	a7,13
+ ecall
+ 376:	00000073          	ecall
+ ret
+ 37a:	8082                	ret
+
+000000000000037c <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ 37c:	48b9                	li	a7,14
+ ecall
+ 37e:	00000073          	ecall
+ ret
+ 382:	8082                	ret
+
+0000000000000384 <setp>:
+.global setp
+setp:
+ li a7, SYS_setp
+ 384:	48d9                	li	a7,22
+ ecall
+ 386:	00000073          	ecall
+ ret
+ 38a:	8082                	ret
+
+000000000000038c <semget>:
+.global semget
+semget:
+ li a7, SYS_semget
+ 38c:	48dd                	li	a7,23
+ ecall
+ 38e:	00000073          	ecall
+ ret
+ 392:	8082                	ret
+
+0000000000000394 <semdown>:
+.global semdown
+semdown:
+ li a7, SYS_semdown
+ 394:	48e1                	li	a7,24
+ ecall
+ 396:	00000073          	ecall
+ ret
+ 39a:	8082                	ret
+
+000000000000039c <semup>:
+.global semup
+semup:
+ li a7, SYS_semup
+ 39c:	48e5                	li	a7,25
+ ecall
+ 39e:	00000073          	ecall
+ ret
+ 3a2:	8082                	ret
+
+00000000000003a4 <semclose>:
+.global semclose
+semclose:
+ li a7, SYS_semclose
+ 3a4:	48e9                	li	a7,26
+ ecall
+ 3a6:	00000073          	ecall
+ ret
+ 3aa:	8082                	ret
+
+00000000000003ac <timeout>:
+.global timeout
+timeout:
+ li a7, SYS_timeout
+ 3ac:	48ed                	li	a7,27
+ ecall
+ 3ae:	00000073          	ecall
+ ret
+ 3b2:	8082                	ret
+
+00000000000003b4 <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+ 3b4:	1101                	addi	sp,sp,-32
+ 3b6:	ec06                	sd	ra,24(sp)
+ 3b8:	e822                	sd	s0,16(sp)
+ 3ba:	1000                	addi	s0,sp,32
+ 3bc:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+ 3c0:	4605                	li	a2,1
+ 3c2:	fef40593          	addi	a1,s0,-17
+ 3c6:	00000097          	auipc	ra,0x0
+ 3ca:	f3e080e7          	jalr	-194(ra) # 304 <write>
+}
+ 3ce:	60e2                	ld	ra,24(sp)
+ 3d0:	6442                	ld	s0,16(sp)
+ 3d2:	6105                	addi	sp,sp,32
+ 3d4:	8082                	ret
+
+00000000000003d6 <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3d6:	7139                	addi	sp,sp,-64
+ 3d8:	fc06                	sd	ra,56(sp)
+ 3da:	f822                	sd	s0,48(sp)
+ 3dc:	f426                	sd	s1,40(sp)
+ 3de:	f04a                	sd	s2,32(sp)
+ 3e0:	ec4e                	sd	s3,24(sp)
+ 3e2:	0080                	addi	s0,sp,64
+ 3e4:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 3e6:	c299                	beqz	a3,3ec <printint+0x16>
+ 3e8:	0805c963          	bltz	a1,47a <printint+0xa4>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 3ec:	2581                	sext.w	a1,a1
+  neg = 0;
+ 3ee:	4881                	li	a7,0
+ 3f0:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+ 3f4:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+ 3f6:	2601                	sext.w	a2,a2
+ 3f8:	00000517          	auipc	a0,0x0
+ 3fc:	4d050513          	addi	a0,a0,1232 # 8c8 <digits>
+ 400:	883a                	mv	a6,a4
+ 402:	2705                	addiw	a4,a4,1
+ 404:	02c5f7bb          	remuw	a5,a1,a2
+ 408:	1782                	slli	a5,a5,0x20
+ 40a:	9381                	srli	a5,a5,0x20
+ 40c:	97aa                	add	a5,a5,a0
+ 40e:	0007c783          	lbu	a5,0(a5)
+ 412:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+ 416:	0005879b          	sext.w	a5,a1
+ 41a:	02c5d5bb          	divuw	a1,a1,a2
+ 41e:	0685                	addi	a3,a3,1
+ 420:	fec7f0e3          	bgeu	a5,a2,400 <printint+0x2a>
+  if(neg)
+ 424:	00088c63          	beqz	a7,43c <printint+0x66>
+    buf[i++] = '-';
+ 428:	fd070793          	addi	a5,a4,-48
+ 42c:	00878733          	add	a4,a5,s0
+ 430:	02d00793          	li	a5,45
+ 434:	fef70823          	sb	a5,-16(a4)
+ 438:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+ 43c:	02e05863          	blez	a4,46c <printint+0x96>
+ 440:	fc040793          	addi	a5,s0,-64
+ 444:	00e78933          	add	s2,a5,a4
+ 448:	fff78993          	addi	s3,a5,-1
+ 44c:	99ba                	add	s3,s3,a4
+ 44e:	377d                	addiw	a4,a4,-1
+ 450:	1702                	slli	a4,a4,0x20
+ 452:	9301                	srli	a4,a4,0x20
+ 454:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+ 458:	fff94583          	lbu	a1,-1(s2)
+ 45c:	8526                	mv	a0,s1
+ 45e:	00000097          	auipc	ra,0x0
+ 462:	f56080e7          	jalr	-170(ra) # 3b4 <putc>
+  while(--i >= 0)
+ 466:	197d                	addi	s2,s2,-1
+ 468:	ff3918e3          	bne	s2,s3,458 <printint+0x82>
+}
+ 46c:	70e2                	ld	ra,56(sp)
+ 46e:	7442                	ld	s0,48(sp)
+ 470:	74a2                	ld	s1,40(sp)
+ 472:	7902                	ld	s2,32(sp)
+ 474:	69e2                	ld	s3,24(sp)
+ 476:	6121                	addi	sp,sp,64
+ 478:	8082                	ret
+    x = -xx;
+ 47a:	40b005bb          	negw	a1,a1
+    neg = 1;
+ 47e:	4885                	li	a7,1
+    x = -xx;
+ 480:	bf85                	j	3f0 <printint+0x1a>
+
+0000000000000482 <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+ 482:	7119                	addi	sp,sp,-128
+ 484:	fc86                	sd	ra,120(sp)
+ 486:	f8a2                	sd	s0,112(sp)
+ 488:	f4a6                	sd	s1,104(sp)
+ 48a:	f0ca                	sd	s2,96(sp)
+ 48c:	ecce                	sd	s3,88(sp)
+ 48e:	e8d2                	sd	s4,80(sp)
+ 490:	e4d6                	sd	s5,72(sp)
+ 492:	e0da                	sd	s6,64(sp)
+ 494:	fc5e                	sd	s7,56(sp)
+ 496:	f862                	sd	s8,48(sp)
+ 498:	f466                	sd	s9,40(sp)
+ 49a:	f06a                	sd	s10,32(sp)
+ 49c:	ec6e                	sd	s11,24(sp)
+ 49e:	0100                	addi	s0,sp,128
+  char *s;
+  int c, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+ 4a0:	0005c903          	lbu	s2,0(a1)
+ 4a4:	18090f63          	beqz	s2,642 <vprintf+0x1c0>
+ 4a8:	8aaa                	mv	s5,a0
+ 4aa:	8b32                	mv	s6,a2
+ 4ac:	00158493          	addi	s1,a1,1
+  state = 0;
+ 4b0:	4981                	li	s3,0
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 4b2:	02500a13          	li	s4,37
+ 4b6:	4c55                	li	s8,21
+ 4b8:	00000c97          	auipc	s9,0x0
+ 4bc:	3b8c8c93          	addi	s9,s9,952 # 870 <malloc+0x12a>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c == 's'){
+        s = va_arg(ap, char*);
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 4c0:	02800d93          	li	s11,40
+  putc(fd, 'x');
+ 4c4:	4d41                	li	s10,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 4c6:	00000b97          	auipc	s7,0x0
+ 4ca:	402b8b93          	addi	s7,s7,1026 # 8c8 <digits>
+ 4ce:	a839                	j	4ec <vprintf+0x6a>
+        putc(fd, c);
+ 4d0:	85ca                	mv	a1,s2
+ 4d2:	8556                	mv	a0,s5
+ 4d4:	00000097          	auipc	ra,0x0
+ 4d8:	ee0080e7          	jalr	-288(ra) # 3b4 <putc>
+ 4dc:	a019                	j	4e2 <vprintf+0x60>
+    } else if(state == '%'){
+ 4de:	01498d63          	beq	s3,s4,4f8 <vprintf+0x76>
+  for(i = 0; fmt[i]; i++){
+ 4e2:	0485                	addi	s1,s1,1
+ 4e4:	fff4c903          	lbu	s2,-1(s1)
+ 4e8:	14090d63          	beqz	s2,642 <vprintf+0x1c0>
+    if(state == 0){
+ 4ec:	fe0999e3          	bnez	s3,4de <vprintf+0x5c>
+      if(c == '%'){
+ 4f0:	ff4910e3          	bne	s2,s4,4d0 <vprintf+0x4e>
+        state = '%';
+ 4f4:	89d2                	mv	s3,s4
+ 4f6:	b7f5                	j	4e2 <vprintf+0x60>
+      if(c == 'd'){
+ 4f8:	11490c63          	beq	s2,s4,610 <vprintf+0x18e>
+ 4fc:	f9d9079b          	addiw	a5,s2,-99
+ 500:	0ff7f793          	zext.b	a5,a5
+ 504:	10fc6e63          	bltu	s8,a5,620 <vprintf+0x19e>
+ 508:	f9d9079b          	addiw	a5,s2,-99
+ 50c:	0ff7f713          	zext.b	a4,a5
+ 510:	10ec6863          	bltu	s8,a4,620 <vprintf+0x19e>
+ 514:	00271793          	slli	a5,a4,0x2
+ 518:	97e6                	add	a5,a5,s9
+ 51a:	439c                	lw	a5,0(a5)
+ 51c:	97e6                	add	a5,a5,s9
+ 51e:	8782                	jr	a5
+        printint(fd, va_arg(ap, int), 10, 1);
+ 520:	008b0913          	addi	s2,s6,8
+ 524:	4685                	li	a3,1
+ 526:	4629                	li	a2,10
+ 528:	000b2583          	lw	a1,0(s6)
+ 52c:	8556                	mv	a0,s5
+ 52e:	00000097          	auipc	ra,0x0
+ 532:	ea8080e7          	jalr	-344(ra) # 3d6 <printint>
+ 536:	8b4a                	mv	s6,s2
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 538:	4981                	li	s3,0
+ 53a:	b765                	j	4e2 <vprintf+0x60>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 53c:	008b0913          	addi	s2,s6,8
+ 540:	4681                	li	a3,0
+ 542:	4629                	li	a2,10
+ 544:	000b2583          	lw	a1,0(s6)
+ 548:	8556                	mv	a0,s5
+ 54a:	00000097          	auipc	ra,0x0
+ 54e:	e8c080e7          	jalr	-372(ra) # 3d6 <printint>
+ 552:	8b4a                	mv	s6,s2
+      state = 0;
+ 554:	4981                	li	s3,0
+ 556:	b771                	j	4e2 <vprintf+0x60>
+        printint(fd, va_arg(ap, int), 16, 0);
+ 558:	008b0913          	addi	s2,s6,8
+ 55c:	4681                	li	a3,0
+ 55e:	866a                	mv	a2,s10
+ 560:	000b2583          	lw	a1,0(s6)
+ 564:	8556                	mv	a0,s5
+ 566:	00000097          	auipc	ra,0x0
+ 56a:	e70080e7          	jalr	-400(ra) # 3d6 <printint>
+ 56e:	8b4a                	mv	s6,s2
+      state = 0;
+ 570:	4981                	li	s3,0
+ 572:	bf85                	j	4e2 <vprintf+0x60>
+        printptr(fd, va_arg(ap, uint64));
+ 574:	008b0793          	addi	a5,s6,8
+ 578:	f8f43423          	sd	a5,-120(s0)
+ 57c:	000b3983          	ld	s3,0(s6)
+  putc(fd, '0');
+ 580:	03000593          	li	a1,48
+ 584:	8556                	mv	a0,s5
+ 586:	00000097          	auipc	ra,0x0
+ 58a:	e2e080e7          	jalr	-466(ra) # 3b4 <putc>
+  putc(fd, 'x');
+ 58e:	07800593          	li	a1,120
+ 592:	8556                	mv	a0,s5
+ 594:	00000097          	auipc	ra,0x0
+ 598:	e20080e7          	jalr	-480(ra) # 3b4 <putc>
+ 59c:	896a                	mv	s2,s10
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 59e:	03c9d793          	srli	a5,s3,0x3c
+ 5a2:	97de                	add	a5,a5,s7
+ 5a4:	0007c583          	lbu	a1,0(a5)
+ 5a8:	8556                	mv	a0,s5
+ 5aa:	00000097          	auipc	ra,0x0
+ 5ae:	e0a080e7          	jalr	-502(ra) # 3b4 <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+ 5b2:	0992                	slli	s3,s3,0x4
+ 5b4:	397d                	addiw	s2,s2,-1
+ 5b6:	fe0914e3          	bnez	s2,59e <vprintf+0x11c>
+        printptr(fd, va_arg(ap, uint64));
+ 5ba:	f8843b03          	ld	s6,-120(s0)
+      state = 0;
+ 5be:	4981                	li	s3,0
+ 5c0:	b70d                	j	4e2 <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 5c2:	008b0913          	addi	s2,s6,8
+ 5c6:	000b3983          	ld	s3,0(s6)
+        if(s == 0)
+ 5ca:	02098163          	beqz	s3,5ec <vprintf+0x16a>
+        while(*s != 0){
+ 5ce:	0009c583          	lbu	a1,0(s3)
+ 5d2:	c5ad                	beqz	a1,63c <vprintf+0x1ba>
+          putc(fd, *s);
+ 5d4:	8556                	mv	a0,s5
+ 5d6:	00000097          	auipc	ra,0x0
+ 5da:	dde080e7          	jalr	-546(ra) # 3b4 <putc>
+          s++;
+ 5de:	0985                	addi	s3,s3,1
+        while(*s != 0){
+ 5e0:	0009c583          	lbu	a1,0(s3)
+ 5e4:	f9e5                	bnez	a1,5d4 <vprintf+0x152>
+        s = va_arg(ap, char*);
+ 5e6:	8b4a                	mv	s6,s2
+      state = 0;
+ 5e8:	4981                	li	s3,0
+ 5ea:	bde5                	j	4e2 <vprintf+0x60>
+          s = "(null)";
+ 5ec:	00000997          	auipc	s3,0x0
+ 5f0:	27c98993          	addi	s3,s3,636 # 868 <malloc+0x122>
+        while(*s != 0){
+ 5f4:	85ee                	mv	a1,s11
+ 5f6:	bff9                	j	5d4 <vprintf+0x152>
+        putc(fd, va_arg(ap, uint));
+ 5f8:	008b0913          	addi	s2,s6,8
+ 5fc:	000b4583          	lbu	a1,0(s6)
+ 600:	8556                	mv	a0,s5
+ 602:	00000097          	auipc	ra,0x0
+ 606:	db2080e7          	jalr	-590(ra) # 3b4 <putc>
+ 60a:	8b4a                	mv	s6,s2
+      state = 0;
+ 60c:	4981                	li	s3,0
+ 60e:	bdd1                	j	4e2 <vprintf+0x60>
+        putc(fd, c);
+ 610:	85d2                	mv	a1,s4
+ 612:	8556                	mv	a0,s5
+ 614:	00000097          	auipc	ra,0x0
+ 618:	da0080e7          	jalr	-608(ra) # 3b4 <putc>
+      state = 0;
+ 61c:	4981                	li	s3,0
+ 61e:	b5d1                	j	4e2 <vprintf+0x60>
+        putc(fd, '%');
+ 620:	85d2                	mv	a1,s4
+ 622:	8556                	mv	a0,s5
+ 624:	00000097          	auipc	ra,0x0
+ 628:	d90080e7          	jalr	-624(ra) # 3b4 <putc>
+        putc(fd, c);
+ 62c:	85ca                	mv	a1,s2
+ 62e:	8556                	mv	a0,s5
+ 630:	00000097          	auipc	ra,0x0
+ 634:	d84080e7          	jalr	-636(ra) # 3b4 <putc>
+      state = 0;
+ 638:	4981                	li	s3,0
+ 63a:	b565                	j	4e2 <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 63c:	8b4a                	mv	s6,s2
+      state = 0;
+ 63e:	4981                	li	s3,0
+ 640:	b54d                	j	4e2 <vprintf+0x60>
+    }
+  }
+}
+ 642:	70e6                	ld	ra,120(sp)
+ 644:	7446                	ld	s0,112(sp)
+ 646:	74a6                	ld	s1,104(sp)
+ 648:	7906                	ld	s2,96(sp)
+ 64a:	69e6                	ld	s3,88(sp)
+ 64c:	6a46                	ld	s4,80(sp)
+ 64e:	6aa6                	ld	s5,72(sp)
+ 650:	6b06                	ld	s6,64(sp)
+ 652:	7be2                	ld	s7,56(sp)
+ 654:	7c42                	ld	s8,48(sp)
+ 656:	7ca2                	ld	s9,40(sp)
+ 658:	7d02                	ld	s10,32(sp)
+ 65a:	6de2                	ld	s11,24(sp)
+ 65c:	6109                	addi	sp,sp,128
+ 65e:	8082                	ret
+
+0000000000000660 <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+ 660:	715d                	addi	sp,sp,-80
+ 662:	ec06                	sd	ra,24(sp)
+ 664:	e822                	sd	s0,16(sp)
+ 666:	1000                	addi	s0,sp,32
+ 668:	e010                	sd	a2,0(s0)
+ 66a:	e414                	sd	a3,8(s0)
+ 66c:	e818                	sd	a4,16(s0)
+ 66e:	ec1c                	sd	a5,24(s0)
+ 670:	03043023          	sd	a6,32(s0)
+ 674:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 678:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+ 67c:	8622                	mv	a2,s0
+ 67e:	00000097          	auipc	ra,0x0
+ 682:	e04080e7          	jalr	-508(ra) # 482 <vprintf>
+}
+ 686:	60e2                	ld	ra,24(sp)
+ 688:	6442                	ld	s0,16(sp)
+ 68a:	6161                	addi	sp,sp,80
+ 68c:	8082                	ret
+
+000000000000068e <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+ 68e:	711d                	addi	sp,sp,-96
+ 690:	ec06                	sd	ra,24(sp)
+ 692:	e822                	sd	s0,16(sp)
+ 694:	1000                	addi	s0,sp,32
+ 696:	e40c                	sd	a1,8(s0)
+ 698:	e810                	sd	a2,16(s0)
+ 69a:	ec14                	sd	a3,24(s0)
+ 69c:	f018                	sd	a4,32(s0)
+ 69e:	f41c                	sd	a5,40(s0)
+ 6a0:	03043823          	sd	a6,48(s0)
+ 6a4:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 6a8:	00840613          	addi	a2,s0,8
+ 6ac:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+ 6b0:	85aa                	mv	a1,a0
+ 6b2:	4505                	li	a0,1
+ 6b4:	00000097          	auipc	ra,0x0
+ 6b8:	dce080e7          	jalr	-562(ra) # 482 <vprintf>
+}
+ 6bc:	60e2                	ld	ra,24(sp)
+ 6be:	6442                	ld	s0,16(sp)
+ 6c0:	6125                	addi	sp,sp,96
+ 6c2:	8082                	ret
+
+00000000000006c4 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6c4:	1141                	addi	sp,sp,-16
+ 6c6:	e422                	sd	s0,8(sp)
+ 6c8:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 6ca:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6ce:	00000797          	auipc	a5,0x0
+ 6d2:	2127b783          	ld	a5,530(a5) # 8e0 <freep>
+ 6d6:	a02d                	j	700 <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 6d8:	4618                	lw	a4,8(a2)
+ 6da:	9f2d                	addw	a4,a4,a1
+ 6dc:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6e0:	6398                	ld	a4,0(a5)
+ 6e2:	6310                	ld	a2,0(a4)
+ 6e4:	a83d                	j	722 <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 6e6:	ff852703          	lw	a4,-8(a0)
+ 6ea:	9f31                	addw	a4,a4,a2
+ 6ec:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+ 6ee:	ff053683          	ld	a3,-16(a0)
+ 6f2:	a091                	j	736 <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6f4:	6398                	ld	a4,0(a5)
+ 6f6:	00e7e463          	bltu	a5,a4,6fe <free+0x3a>
+ 6fa:	00e6ea63          	bltu	a3,a4,70e <free+0x4a>
+{
+ 6fe:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 700:	fed7fae3          	bgeu	a5,a3,6f4 <free+0x30>
+ 704:	6398                	ld	a4,0(a5)
+ 706:	00e6e463          	bltu	a3,a4,70e <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 70a:	fee7eae3          	bltu	a5,a4,6fe <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+ 70e:	ff852583          	lw	a1,-8(a0)
+ 712:	6390                	ld	a2,0(a5)
+ 714:	02059813          	slli	a6,a1,0x20
+ 718:	01c85713          	srli	a4,a6,0x1c
+ 71c:	9736                	add	a4,a4,a3
+ 71e:	fae60de3          	beq	a2,a4,6d8 <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 722:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+ 726:	4790                	lw	a2,8(a5)
+ 728:	02061593          	slli	a1,a2,0x20
+ 72c:	01c5d713          	srli	a4,a1,0x1c
+ 730:	973e                	add	a4,a4,a5
+ 732:	fae68ae3          	beq	a3,a4,6e6 <free+0x22>
+    p->s.ptr = bp->s.ptr;
+ 736:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 738:	00000717          	auipc	a4,0x0
+ 73c:	1af73423          	sd	a5,424(a4) # 8e0 <freep>
+}
+ 740:	6422                	ld	s0,8(sp)
+ 742:	0141                	addi	sp,sp,16
+ 744:	8082                	ret
+
+0000000000000746 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 746:	7139                	addi	sp,sp,-64
+ 748:	fc06                	sd	ra,56(sp)
+ 74a:	f822                	sd	s0,48(sp)
+ 74c:	f426                	sd	s1,40(sp)
+ 74e:	f04a                	sd	s2,32(sp)
+ 750:	ec4e                	sd	s3,24(sp)
+ 752:	e852                	sd	s4,16(sp)
+ 754:	e456                	sd	s5,8(sp)
+ 756:	e05a                	sd	s6,0(sp)
+ 758:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 75a:	02051493          	slli	s1,a0,0x20
+ 75e:	9081                	srli	s1,s1,0x20
+ 760:	04bd                	addi	s1,s1,15
+ 762:	8091                	srli	s1,s1,0x4
+ 764:	0014899b          	addiw	s3,s1,1
+ 768:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+ 76a:	00000517          	auipc	a0,0x0
+ 76e:	17653503          	ld	a0,374(a0) # 8e0 <freep>
+ 772:	c515                	beqz	a0,79e <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 774:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 776:	4798                	lw	a4,8(a5)
+ 778:	02977f63          	bgeu	a4,s1,7b6 <malloc+0x70>
+ 77c:	8a4e                	mv	s4,s3
+ 77e:	0009871b          	sext.w	a4,s3
+ 782:	6685                	lui	a3,0x1
+ 784:	00d77363          	bgeu	a4,a3,78a <malloc+0x44>
+ 788:	6a05                	lui	s4,0x1
+ 78a:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+ 78e:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 792:	00000917          	auipc	s2,0x0
+ 796:	14e90913          	addi	s2,s2,334 # 8e0 <freep>
+  if(p == (char*)-1)
+ 79a:	5afd                	li	s5,-1
+ 79c:	a895                	j	810 <malloc+0xca>
+    base.s.ptr = freep = prevp = &base;
+ 79e:	00000797          	auipc	a5,0x0
+ 7a2:	14a78793          	addi	a5,a5,330 # 8e8 <base>
+ 7a6:	00000717          	auipc	a4,0x0
+ 7aa:	12f73d23          	sd	a5,314(a4) # 8e0 <freep>
+ 7ae:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+ 7b0:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+ 7b4:	b7e1                	j	77c <malloc+0x36>
+      if(p->s.size == nunits)
+ 7b6:	02e48c63          	beq	s1,a4,7ee <malloc+0xa8>
+        p->s.size -= nunits;
+ 7ba:	4137073b          	subw	a4,a4,s3
+ 7be:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+ 7c0:	02071693          	slli	a3,a4,0x20
+ 7c4:	01c6d713          	srli	a4,a3,0x1c
+ 7c8:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+ 7ca:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+ 7ce:	00000717          	auipc	a4,0x0
+ 7d2:	10a73923          	sd	a0,274(a4) # 8e0 <freep>
+      return (void*)(p + 1);
+ 7d6:	01078513          	addi	a0,a5,16
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ 7da:	70e2                	ld	ra,56(sp)
+ 7dc:	7442                	ld	s0,48(sp)
+ 7de:	74a2                	ld	s1,40(sp)
+ 7e0:	7902                	ld	s2,32(sp)
+ 7e2:	69e2                	ld	s3,24(sp)
+ 7e4:	6a42                	ld	s4,16(sp)
+ 7e6:	6aa2                	ld	s5,8(sp)
+ 7e8:	6b02                	ld	s6,0(sp)
+ 7ea:	6121                	addi	sp,sp,64
+ 7ec:	8082                	ret
+        prevp->s.ptr = p->s.ptr;
+ 7ee:	6398                	ld	a4,0(a5)
+ 7f0:	e118                	sd	a4,0(a0)
+ 7f2:	bff1                	j	7ce <malloc+0x88>
+  hp->s.size = nu;
+ 7f4:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+ 7f8:	0541                	addi	a0,a0,16
+ 7fa:	00000097          	auipc	ra,0x0
+ 7fe:	eca080e7          	jalr	-310(ra) # 6c4 <free>
+  return freep;
+ 802:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+ 806:	d971                	beqz	a0,7da <malloc+0x94>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 808:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 80a:	4798                	lw	a4,8(a5)
+ 80c:	fa9775e3          	bgeu	a4,s1,7b6 <malloc+0x70>
+    if(p == freep)
+ 810:	00093703          	ld	a4,0(s2)
+ 814:	853e                	mv	a0,a5
+ 816:	fef719e3          	bne	a4,a5,808 <malloc+0xc2>
+  p = sbrk(nu * sizeof(Header));
+ 81a:	8552                	mv	a0,s4
+ 81c:	00000097          	auipc	ra,0x0
+ 820:	b50080e7          	jalr	-1200(ra) # 36c <sbrk>
+  if(p == (char*)-1)
+ 824:	fd5518e3          	bne	a0,s5,7f4 <malloc+0xae>
+        return 0;
+ 828:	4501                	li	a0,0
+ 82a:	bf45                	j	7da <malloc+0x94>
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/rm.d os-workshop/user/rm.d
--- xv6-riscv/user/rm.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/rm.d	2022-05-28 22:34:34.000000000 -0300
@@ -0,0 +1 @@
+user/rm.o: user/rm.c kernel/types.h kernel/stat.h user/user.h
Binary files xv6-riscv/user/rm.o and os-workshop/user/rm.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/rm.sym os-workshop/user/rm.sym
--- xv6-riscv/user/rm.sym	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/rm.sym	2022-05-28 22:34:34.000000000 -0300
@@ -0,0 +1,76 @@
+0000000000000000 .text
+0000000000000830 .rodata
+00000000000008e0 .sbss
+00000000000008e8 .bss
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_aranges
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_line
+0000000000000000 .debug_frame
+0000000000000000 .debug_str
+0000000000000000 .debug_line_str
+0000000000000000 .debug_loclists
+0000000000000000 .debug_rnglists
+0000000000000000 rm.c
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+00000000000003b4 putc
+00000000000003d6 printint
+00000000000008c8 digits
+0000000000000000 umalloc.c
+00000000000008e0 freep
+00000000000008e8 base
+0000000000000078 strcpy
+000000000000068e printf
+00000000000010d9 __global_pointer$
+0000000000000232 memmove
+000000000000032c mknod
+0000000000000394 semdown
+0000000000000130 gets
+00000000000008d9 __SDATA_BEGIN__
+000000000000038c semget
+0000000000000364 getpid
+00000000000002c4 memcpy
+0000000000000746 malloc
+00000000000003a4 semclose
+0000000000000374 sleep
+00000000000002f4 pipe
+0000000000000304 write
+000000000000033c fstat
+0000000000000660 fprintf
+0000000000000314 kill
+0000000000000482 vprintf
+0000000000000354 chdir
+000000000000031c exec
+00000000000002ec wait
+00000000000002fc read
+0000000000000334 unlink
+000000000000028a memcmp
+00000000000002dc fork
+00000000000008f8 __BSS_END__
+000000000000036c sbrk
+000000000000037c uptime
+00000000000008d9 __bss_start
+00000000000000ea memset
+0000000000000000 main
+00000000000003ac timeout
+0000000000000094 strcmp
+000000000000035c dup
+00000000000008d9 __DATA_BEGIN__
+00000000000001a4 stat
+00000000000008d9 _edata
+0000000000000384 setp
+00000000000008f8 _end
+0000000000000344 link
+00000000000002e4 exit
+00000000000001ea atoi
+00000000000000c0 strlen
+0000000000000324 open
+000000000000039c semup
+000000000000010c strchr
+000000000000034c mkdir
+000000000000030c close
+00000000000006c4 free
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/sh.asm os-workshop/user/sh.asm
--- xv6-riscv/user/sh.asm	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/sh.asm	2022-05-28 22:34:35.000000000 -0300
@@ -0,0 +1,2764 @@
+
+user/_sh:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <getcmd>:
+  exit(0);
+}
+
+int
+getcmd(char *buf, int nbuf)
+{
+       0:	1101                	addi	sp,sp,-32
+       2:	ec06                	sd	ra,24(sp)
+       4:	e822                	sd	s0,16(sp)
+       6:	e426                	sd	s1,8(sp)
+       8:	e04a                	sd	s2,0(sp)
+       a:	1000                	addi	s0,sp,32
+       c:	84aa                	mv	s1,a0
+       e:	892e                	mv	s2,a1
+  fprintf(2, "$ ");
+      10:	00001597          	auipc	a1,0x1
+      14:	30058593          	addi	a1,a1,768 # 1310 <malloc+0xe6>
+      18:	4509                	li	a0,2
+      1a:	00001097          	auipc	ra,0x1
+      1e:	12a080e7          	jalr	298(ra) # 1144 <fprintf>
+  memset(buf, 0, nbuf);
+      22:	864a                	mv	a2,s2
+      24:	4581                	li	a1,0
+      26:	8526                	mv	a0,s1
+      28:	00001097          	auipc	ra,0x1
+      2c:	ba6080e7          	jalr	-1114(ra) # bce <memset>
+  gets(buf, nbuf);
+      30:	85ca                	mv	a1,s2
+      32:	8526                	mv	a0,s1
+      34:	00001097          	auipc	ra,0x1
+      38:	be0080e7          	jalr	-1056(ra) # c14 <gets>
+  if(buf[0] == 0) // EOF
+      3c:	0004c503          	lbu	a0,0(s1)
+      40:	00153513          	seqz	a0,a0
+    return -1;
+  return 0;
+}
+      44:	40a00533          	neg	a0,a0
+      48:	60e2                	ld	ra,24(sp)
+      4a:	6442                	ld	s0,16(sp)
+      4c:	64a2                	ld	s1,8(sp)
+      4e:	6902                	ld	s2,0(sp)
+      50:	6105                	addi	sp,sp,32
+      52:	8082                	ret
+
+0000000000000054 <panic>:
+  exit(0);
+}
+
+void
+panic(char *s)
+{
+      54:	1141                	addi	sp,sp,-16
+      56:	e406                	sd	ra,8(sp)
+      58:	e022                	sd	s0,0(sp)
+      5a:	0800                	addi	s0,sp,16
+      5c:	862a                	mv	a2,a0
+  fprintf(2, "%s\n", s);
+      5e:	00001597          	auipc	a1,0x1
+      62:	2ba58593          	addi	a1,a1,698 # 1318 <malloc+0xee>
+      66:	4509                	li	a0,2
+      68:	00001097          	auipc	ra,0x1
+      6c:	0dc080e7          	jalr	220(ra) # 1144 <fprintf>
+  exit(1);
+      70:	4505                	li	a0,1
+      72:	00001097          	auipc	ra,0x1
+      76:	d56080e7          	jalr	-682(ra) # dc8 <exit>
+
+000000000000007a <fork1>:
+}
+
+int
+fork1(void)
+{
+      7a:	1141                	addi	sp,sp,-16
+      7c:	e406                	sd	ra,8(sp)
+      7e:	e022                	sd	s0,0(sp)
+      80:	0800                	addi	s0,sp,16
+  int pid;
+
+  pid = fork();
+      82:	00001097          	auipc	ra,0x1
+      86:	d3e080e7          	jalr	-706(ra) # dc0 <fork>
+  if(pid == -1)
+      8a:	57fd                	li	a5,-1
+      8c:	00f50663          	beq	a0,a5,98 <fork1+0x1e>
+    panic("fork");
+  return pid;
+}
+      90:	60a2                	ld	ra,8(sp)
+      92:	6402                	ld	s0,0(sp)
+      94:	0141                	addi	sp,sp,16
+      96:	8082                	ret
+    panic("fork");
+      98:	00001517          	auipc	a0,0x1
+      9c:	28850513          	addi	a0,a0,648 # 1320 <malloc+0xf6>
+      a0:	00000097          	auipc	ra,0x0
+      a4:	fb4080e7          	jalr	-76(ra) # 54 <panic>
+
+00000000000000a8 <runcmd>:
+{
+      a8:	7179                	addi	sp,sp,-48
+      aa:	f406                	sd	ra,40(sp)
+      ac:	f022                	sd	s0,32(sp)
+      ae:	ec26                	sd	s1,24(sp)
+      b0:	1800                	addi	s0,sp,48
+  if(cmd == 0)
+      b2:	c10d                	beqz	a0,d4 <runcmd+0x2c>
+      b4:	84aa                	mv	s1,a0
+  switch(cmd->type){
+      b6:	4118                	lw	a4,0(a0)
+      b8:	4795                	li	a5,5
+      ba:	02e7e263          	bltu	a5,a4,de <runcmd+0x36>
+      be:	00056783          	lwu	a5,0(a0)
+      c2:	078a                	slli	a5,a5,0x2
+      c4:	00001717          	auipc	a4,0x1
+      c8:	35c70713          	addi	a4,a4,860 # 1420 <malloc+0x1f6>
+      cc:	97ba                	add	a5,a5,a4
+      ce:	439c                	lw	a5,0(a5)
+      d0:	97ba                	add	a5,a5,a4
+      d2:	8782                	jr	a5
+    exit(1);
+      d4:	4505                	li	a0,1
+      d6:	00001097          	auipc	ra,0x1
+      da:	cf2080e7          	jalr	-782(ra) # dc8 <exit>
+    panic("runcmd");
+      de:	00001517          	auipc	a0,0x1
+      e2:	24a50513          	addi	a0,a0,586 # 1328 <malloc+0xfe>
+      e6:	00000097          	auipc	ra,0x0
+      ea:	f6e080e7          	jalr	-146(ra) # 54 <panic>
+    if(ecmd->argv[0] == 0)
+      ee:	6508                	ld	a0,8(a0)
+      f0:	c515                	beqz	a0,11c <runcmd+0x74>
+    exec(ecmd->argv[0], ecmd->argv);
+      f2:	00848593          	addi	a1,s1,8
+      f6:	00001097          	auipc	ra,0x1
+      fa:	d0a080e7          	jalr	-758(ra) # e00 <exec>
+    fprintf(2, "exec %s failed\n", ecmd->argv[0]);
+      fe:	6490                	ld	a2,8(s1)
+     100:	00001597          	auipc	a1,0x1
+     104:	23058593          	addi	a1,a1,560 # 1330 <malloc+0x106>
+     108:	4509                	li	a0,2
+     10a:	00001097          	auipc	ra,0x1
+     10e:	03a080e7          	jalr	58(ra) # 1144 <fprintf>
+  exit(0);
+     112:	4501                	li	a0,0
+     114:	00001097          	auipc	ra,0x1
+     118:	cb4080e7          	jalr	-844(ra) # dc8 <exit>
+      exit(1);
+     11c:	4505                	li	a0,1
+     11e:	00001097          	auipc	ra,0x1
+     122:	caa080e7          	jalr	-854(ra) # dc8 <exit>
+    close(rcmd->fd);
+     126:	5148                	lw	a0,36(a0)
+     128:	00001097          	auipc	ra,0x1
+     12c:	cc8080e7          	jalr	-824(ra) # df0 <close>
+    if(open(rcmd->file, rcmd->mode) < 0){
+     130:	508c                	lw	a1,32(s1)
+     132:	6888                	ld	a0,16(s1)
+     134:	00001097          	auipc	ra,0x1
+     138:	cd4080e7          	jalr	-812(ra) # e08 <open>
+     13c:	00054763          	bltz	a0,14a <runcmd+0xa2>
+    runcmd(rcmd->cmd);
+     140:	6488                	ld	a0,8(s1)
+     142:	00000097          	auipc	ra,0x0
+     146:	f66080e7          	jalr	-154(ra) # a8 <runcmd>
+      fprintf(2, "open %s failed\n", rcmd->file);
+     14a:	6890                	ld	a2,16(s1)
+     14c:	00001597          	auipc	a1,0x1
+     150:	1f458593          	addi	a1,a1,500 # 1340 <malloc+0x116>
+     154:	4509                	li	a0,2
+     156:	00001097          	auipc	ra,0x1
+     15a:	fee080e7          	jalr	-18(ra) # 1144 <fprintf>
+      exit(1);
+     15e:	4505                	li	a0,1
+     160:	00001097          	auipc	ra,0x1
+     164:	c68080e7          	jalr	-920(ra) # dc8 <exit>
+    if(fork1() == 0)
+     168:	00000097          	auipc	ra,0x0
+     16c:	f12080e7          	jalr	-238(ra) # 7a <fork1>
+     170:	c919                	beqz	a0,186 <runcmd+0xde>
+    wait(0);
+     172:	4501                	li	a0,0
+     174:	00001097          	auipc	ra,0x1
+     178:	c5c080e7          	jalr	-932(ra) # dd0 <wait>
+    runcmd(lcmd->right);
+     17c:	6888                	ld	a0,16(s1)
+     17e:	00000097          	auipc	ra,0x0
+     182:	f2a080e7          	jalr	-214(ra) # a8 <runcmd>
+      runcmd(lcmd->left);
+     186:	6488                	ld	a0,8(s1)
+     188:	00000097          	auipc	ra,0x0
+     18c:	f20080e7          	jalr	-224(ra) # a8 <runcmd>
+    if(pipe(p) < 0)
+     190:	fd840513          	addi	a0,s0,-40
+     194:	00001097          	auipc	ra,0x1
+     198:	c44080e7          	jalr	-956(ra) # dd8 <pipe>
+     19c:	04054363          	bltz	a0,1e2 <runcmd+0x13a>
+    if(fork1() == 0){
+     1a0:	00000097          	auipc	ra,0x0
+     1a4:	eda080e7          	jalr	-294(ra) # 7a <fork1>
+     1a8:	c529                	beqz	a0,1f2 <runcmd+0x14a>
+    if(fork1() == 0){
+     1aa:	00000097          	auipc	ra,0x0
+     1ae:	ed0080e7          	jalr	-304(ra) # 7a <fork1>
+     1b2:	cd25                	beqz	a0,22a <runcmd+0x182>
+    close(p[0]);
+     1b4:	fd842503          	lw	a0,-40(s0)
+     1b8:	00001097          	auipc	ra,0x1
+     1bc:	c38080e7          	jalr	-968(ra) # df0 <close>
+    close(p[1]);
+     1c0:	fdc42503          	lw	a0,-36(s0)
+     1c4:	00001097          	auipc	ra,0x1
+     1c8:	c2c080e7          	jalr	-980(ra) # df0 <close>
+    wait(0);
+     1cc:	4501                	li	a0,0
+     1ce:	00001097          	auipc	ra,0x1
+     1d2:	c02080e7          	jalr	-1022(ra) # dd0 <wait>
+    wait(0);
+     1d6:	4501                	li	a0,0
+     1d8:	00001097          	auipc	ra,0x1
+     1dc:	bf8080e7          	jalr	-1032(ra) # dd0 <wait>
+    break;
+     1e0:	bf0d                	j	112 <runcmd+0x6a>
+      panic("pipe");
+     1e2:	00001517          	auipc	a0,0x1
+     1e6:	16e50513          	addi	a0,a0,366 # 1350 <malloc+0x126>
+     1ea:	00000097          	auipc	ra,0x0
+     1ee:	e6a080e7          	jalr	-406(ra) # 54 <panic>
+      close(1);
+     1f2:	4505                	li	a0,1
+     1f4:	00001097          	auipc	ra,0x1
+     1f8:	bfc080e7          	jalr	-1028(ra) # df0 <close>
+      dup(p[1]);
+     1fc:	fdc42503          	lw	a0,-36(s0)
+     200:	00001097          	auipc	ra,0x1
+     204:	c40080e7          	jalr	-960(ra) # e40 <dup>
+      close(p[0]);
+     208:	fd842503          	lw	a0,-40(s0)
+     20c:	00001097          	auipc	ra,0x1
+     210:	be4080e7          	jalr	-1052(ra) # df0 <close>
+      close(p[1]);
+     214:	fdc42503          	lw	a0,-36(s0)
+     218:	00001097          	auipc	ra,0x1
+     21c:	bd8080e7          	jalr	-1064(ra) # df0 <close>
+      runcmd(pcmd->left);
+     220:	6488                	ld	a0,8(s1)
+     222:	00000097          	auipc	ra,0x0
+     226:	e86080e7          	jalr	-378(ra) # a8 <runcmd>
+      close(0);
+     22a:	00001097          	auipc	ra,0x1
+     22e:	bc6080e7          	jalr	-1082(ra) # df0 <close>
+      dup(p[0]);
+     232:	fd842503          	lw	a0,-40(s0)
+     236:	00001097          	auipc	ra,0x1
+     23a:	c0a080e7          	jalr	-1014(ra) # e40 <dup>
+      close(p[0]);
+     23e:	fd842503          	lw	a0,-40(s0)
+     242:	00001097          	auipc	ra,0x1
+     246:	bae080e7          	jalr	-1106(ra) # df0 <close>
+      close(p[1]);
+     24a:	fdc42503          	lw	a0,-36(s0)
+     24e:	00001097          	auipc	ra,0x1
+     252:	ba2080e7          	jalr	-1118(ra) # df0 <close>
+      runcmd(pcmd->right);
+     256:	6888                	ld	a0,16(s1)
+     258:	00000097          	auipc	ra,0x0
+     25c:	e50080e7          	jalr	-432(ra) # a8 <runcmd>
+    if(fork1() == 0)
+     260:	00000097          	auipc	ra,0x0
+     264:	e1a080e7          	jalr	-486(ra) # 7a <fork1>
+     268:	ea0515e3          	bnez	a0,112 <runcmd+0x6a>
+      runcmd(bcmd->cmd);
+     26c:	6488                	ld	a0,8(s1)
+     26e:	00000097          	auipc	ra,0x0
+     272:	e3a080e7          	jalr	-454(ra) # a8 <runcmd>
+
+0000000000000276 <execcmd>:
+//PAGEBREAK!
+// Constructors
+
+struct cmd*
+execcmd(void)
+{
+     276:	1101                	addi	sp,sp,-32
+     278:	ec06                	sd	ra,24(sp)
+     27a:	e822                	sd	s0,16(sp)
+     27c:	e426                	sd	s1,8(sp)
+     27e:	1000                	addi	s0,sp,32
+  struct execcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     280:	0a800513          	li	a0,168
+     284:	00001097          	auipc	ra,0x1
+     288:	fa6080e7          	jalr	-90(ra) # 122a <malloc>
+     28c:	84aa                	mv	s1,a0
+  memset(cmd, 0, sizeof(*cmd));
+     28e:	0a800613          	li	a2,168
+     292:	4581                	li	a1,0
+     294:	00001097          	auipc	ra,0x1
+     298:	93a080e7          	jalr	-1734(ra) # bce <memset>
+  cmd->type = EXEC;
+     29c:	4785                	li	a5,1
+     29e:	c09c                	sw	a5,0(s1)
+  return (struct cmd*)cmd;
+}
+     2a0:	8526                	mv	a0,s1
+     2a2:	60e2                	ld	ra,24(sp)
+     2a4:	6442                	ld	s0,16(sp)
+     2a6:	64a2                	ld	s1,8(sp)
+     2a8:	6105                	addi	sp,sp,32
+     2aa:	8082                	ret
+
+00000000000002ac <redircmd>:
+
+struct cmd*
+redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
+{
+     2ac:	7139                	addi	sp,sp,-64
+     2ae:	fc06                	sd	ra,56(sp)
+     2b0:	f822                	sd	s0,48(sp)
+     2b2:	f426                	sd	s1,40(sp)
+     2b4:	f04a                	sd	s2,32(sp)
+     2b6:	ec4e                	sd	s3,24(sp)
+     2b8:	e852                	sd	s4,16(sp)
+     2ba:	e456                	sd	s5,8(sp)
+     2bc:	e05a                	sd	s6,0(sp)
+     2be:	0080                	addi	s0,sp,64
+     2c0:	8b2a                	mv	s6,a0
+     2c2:	8aae                	mv	s5,a1
+     2c4:	8a32                	mv	s4,a2
+     2c6:	89b6                	mv	s3,a3
+     2c8:	893a                	mv	s2,a4
+  struct redircmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     2ca:	02800513          	li	a0,40
+     2ce:	00001097          	auipc	ra,0x1
+     2d2:	f5c080e7          	jalr	-164(ra) # 122a <malloc>
+     2d6:	84aa                	mv	s1,a0
+  memset(cmd, 0, sizeof(*cmd));
+     2d8:	02800613          	li	a2,40
+     2dc:	4581                	li	a1,0
+     2de:	00001097          	auipc	ra,0x1
+     2e2:	8f0080e7          	jalr	-1808(ra) # bce <memset>
+  cmd->type = REDIR;
+     2e6:	4789                	li	a5,2
+     2e8:	c09c                	sw	a5,0(s1)
+  cmd->cmd = subcmd;
+     2ea:	0164b423          	sd	s6,8(s1)
+  cmd->file = file;
+     2ee:	0154b823          	sd	s5,16(s1)
+  cmd->efile = efile;
+     2f2:	0144bc23          	sd	s4,24(s1)
+  cmd->mode = mode;
+     2f6:	0334a023          	sw	s3,32(s1)
+  cmd->fd = fd;
+     2fa:	0324a223          	sw	s2,36(s1)
+  return (struct cmd*)cmd;
+}
+     2fe:	8526                	mv	a0,s1
+     300:	70e2                	ld	ra,56(sp)
+     302:	7442                	ld	s0,48(sp)
+     304:	74a2                	ld	s1,40(sp)
+     306:	7902                	ld	s2,32(sp)
+     308:	69e2                	ld	s3,24(sp)
+     30a:	6a42                	ld	s4,16(sp)
+     30c:	6aa2                	ld	s5,8(sp)
+     30e:	6b02                	ld	s6,0(sp)
+     310:	6121                	addi	sp,sp,64
+     312:	8082                	ret
+
+0000000000000314 <pipecmd>:
+
+struct cmd*
+pipecmd(struct cmd *left, struct cmd *right)
+{
+     314:	7179                	addi	sp,sp,-48
+     316:	f406                	sd	ra,40(sp)
+     318:	f022                	sd	s0,32(sp)
+     31a:	ec26                	sd	s1,24(sp)
+     31c:	e84a                	sd	s2,16(sp)
+     31e:	e44e                	sd	s3,8(sp)
+     320:	1800                	addi	s0,sp,48
+     322:	89aa                	mv	s3,a0
+     324:	892e                	mv	s2,a1
+  struct pipecmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     326:	4561                	li	a0,24
+     328:	00001097          	auipc	ra,0x1
+     32c:	f02080e7          	jalr	-254(ra) # 122a <malloc>
+     330:	84aa                	mv	s1,a0
+  memset(cmd, 0, sizeof(*cmd));
+     332:	4661                	li	a2,24
+     334:	4581                	li	a1,0
+     336:	00001097          	auipc	ra,0x1
+     33a:	898080e7          	jalr	-1896(ra) # bce <memset>
+  cmd->type = PIPE;
+     33e:	478d                	li	a5,3
+     340:	c09c                	sw	a5,0(s1)
+  cmd->left = left;
+     342:	0134b423          	sd	s3,8(s1)
+  cmd->right = right;
+     346:	0124b823          	sd	s2,16(s1)
+  return (struct cmd*)cmd;
+}
+     34a:	8526                	mv	a0,s1
+     34c:	70a2                	ld	ra,40(sp)
+     34e:	7402                	ld	s0,32(sp)
+     350:	64e2                	ld	s1,24(sp)
+     352:	6942                	ld	s2,16(sp)
+     354:	69a2                	ld	s3,8(sp)
+     356:	6145                	addi	sp,sp,48
+     358:	8082                	ret
+
+000000000000035a <listcmd>:
+
+struct cmd*
+listcmd(struct cmd *left, struct cmd *right)
+{
+     35a:	7179                	addi	sp,sp,-48
+     35c:	f406                	sd	ra,40(sp)
+     35e:	f022                	sd	s0,32(sp)
+     360:	ec26                	sd	s1,24(sp)
+     362:	e84a                	sd	s2,16(sp)
+     364:	e44e                	sd	s3,8(sp)
+     366:	1800                	addi	s0,sp,48
+     368:	89aa                	mv	s3,a0
+     36a:	892e                	mv	s2,a1
+  struct listcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     36c:	4561                	li	a0,24
+     36e:	00001097          	auipc	ra,0x1
+     372:	ebc080e7          	jalr	-324(ra) # 122a <malloc>
+     376:	84aa                	mv	s1,a0
+  memset(cmd, 0, sizeof(*cmd));
+     378:	4661                	li	a2,24
+     37a:	4581                	li	a1,0
+     37c:	00001097          	auipc	ra,0x1
+     380:	852080e7          	jalr	-1966(ra) # bce <memset>
+  cmd->type = LIST;
+     384:	4791                	li	a5,4
+     386:	c09c                	sw	a5,0(s1)
+  cmd->left = left;
+     388:	0134b423          	sd	s3,8(s1)
+  cmd->right = right;
+     38c:	0124b823          	sd	s2,16(s1)
+  return (struct cmd*)cmd;
+}
+     390:	8526                	mv	a0,s1
+     392:	70a2                	ld	ra,40(sp)
+     394:	7402                	ld	s0,32(sp)
+     396:	64e2                	ld	s1,24(sp)
+     398:	6942                	ld	s2,16(sp)
+     39a:	69a2                	ld	s3,8(sp)
+     39c:	6145                	addi	sp,sp,48
+     39e:	8082                	ret
+
+00000000000003a0 <backcmd>:
+
+struct cmd*
+backcmd(struct cmd *subcmd)
+{
+     3a0:	1101                	addi	sp,sp,-32
+     3a2:	ec06                	sd	ra,24(sp)
+     3a4:	e822                	sd	s0,16(sp)
+     3a6:	e426                	sd	s1,8(sp)
+     3a8:	e04a                	sd	s2,0(sp)
+     3aa:	1000                	addi	s0,sp,32
+     3ac:	892a                	mv	s2,a0
+  struct backcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     3ae:	4541                	li	a0,16
+     3b0:	00001097          	auipc	ra,0x1
+     3b4:	e7a080e7          	jalr	-390(ra) # 122a <malloc>
+     3b8:	84aa                	mv	s1,a0
+  memset(cmd, 0, sizeof(*cmd));
+     3ba:	4641                	li	a2,16
+     3bc:	4581                	li	a1,0
+     3be:	00001097          	auipc	ra,0x1
+     3c2:	810080e7          	jalr	-2032(ra) # bce <memset>
+  cmd->type = BACK;
+     3c6:	4795                	li	a5,5
+     3c8:	c09c                	sw	a5,0(s1)
+  cmd->cmd = subcmd;
+     3ca:	0124b423          	sd	s2,8(s1)
+  return (struct cmd*)cmd;
+}
+     3ce:	8526                	mv	a0,s1
+     3d0:	60e2                	ld	ra,24(sp)
+     3d2:	6442                	ld	s0,16(sp)
+     3d4:	64a2                	ld	s1,8(sp)
+     3d6:	6902                	ld	s2,0(sp)
+     3d8:	6105                	addi	sp,sp,32
+     3da:	8082                	ret
+
+00000000000003dc <gettoken>:
+char whitespace[] = " \t\r\n\v";
+char symbols[] = "<|>&;()";
+
+int
+gettoken(char **ps, char *es, char **q, char **eq)
+{
+     3dc:	7139                	addi	sp,sp,-64
+     3de:	fc06                	sd	ra,56(sp)
+     3e0:	f822                	sd	s0,48(sp)
+     3e2:	f426                	sd	s1,40(sp)
+     3e4:	f04a                	sd	s2,32(sp)
+     3e6:	ec4e                	sd	s3,24(sp)
+     3e8:	e852                	sd	s4,16(sp)
+     3ea:	e456                	sd	s5,8(sp)
+     3ec:	e05a                	sd	s6,0(sp)
+     3ee:	0080                	addi	s0,sp,64
+     3f0:	8a2a                	mv	s4,a0
+     3f2:	892e                	mv	s2,a1
+     3f4:	8ab2                	mv	s5,a2
+     3f6:	8b36                	mv	s6,a3
+  char *s;
+  int ret;
+
+  s = *ps;
+     3f8:	6104                	ld	s1,0(a0)
+  while(s < es && strchr(whitespace, *s))
+     3fa:	00001997          	auipc	s3,0x1
+     3fe:	0d698993          	addi	s3,s3,214 # 14d0 <whitespace>
+     402:	00b4fe63          	bgeu	s1,a1,41e <gettoken+0x42>
+     406:	0004c583          	lbu	a1,0(s1)
+     40a:	854e                	mv	a0,s3
+     40c:	00000097          	auipc	ra,0x0
+     410:	7e4080e7          	jalr	2020(ra) # bf0 <strchr>
+     414:	c509                	beqz	a0,41e <gettoken+0x42>
+    s++;
+     416:	0485                	addi	s1,s1,1
+  while(s < es && strchr(whitespace, *s))
+     418:	fe9917e3          	bne	s2,s1,406 <gettoken+0x2a>
+    s++;
+     41c:	84ca                	mv	s1,s2
+  if(q)
+     41e:	000a8463          	beqz	s5,426 <gettoken+0x4a>
+    *q = s;
+     422:	009ab023          	sd	s1,0(s5)
+  ret = *s;
+     426:	0004c783          	lbu	a5,0(s1)
+     42a:	00078a9b          	sext.w	s5,a5
+  switch(*s){
+     42e:	03c00713          	li	a4,60
+     432:	06f76663          	bltu	a4,a5,49e <gettoken+0xc2>
+     436:	03a00713          	li	a4,58
+     43a:	00f76e63          	bltu	a4,a5,456 <gettoken+0x7a>
+     43e:	cf89                	beqz	a5,458 <gettoken+0x7c>
+     440:	02600713          	li	a4,38
+     444:	00e78963          	beq	a5,a4,456 <gettoken+0x7a>
+     448:	fd87879b          	addiw	a5,a5,-40
+     44c:	0ff7f793          	zext.b	a5,a5
+     450:	4705                	li	a4,1
+     452:	06f76d63          	bltu	a4,a5,4cc <gettoken+0xf0>
+  case '(':
+  case ')':
+  case ';':
+  case '&':
+  case '<':
+    s++;
+     456:	0485                	addi	s1,s1,1
+    ret = 'a';
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+      s++;
+    break;
+  }
+  if(eq)
+     458:	000b0463          	beqz	s6,460 <gettoken+0x84>
+    *eq = s;
+     45c:	009b3023          	sd	s1,0(s6)
+
+  while(s < es && strchr(whitespace, *s))
+     460:	00001997          	auipc	s3,0x1
+     464:	07098993          	addi	s3,s3,112 # 14d0 <whitespace>
+     468:	0124fe63          	bgeu	s1,s2,484 <gettoken+0xa8>
+     46c:	0004c583          	lbu	a1,0(s1)
+     470:	854e                	mv	a0,s3
+     472:	00000097          	auipc	ra,0x0
+     476:	77e080e7          	jalr	1918(ra) # bf0 <strchr>
+     47a:	c509                	beqz	a0,484 <gettoken+0xa8>
+    s++;
+     47c:	0485                	addi	s1,s1,1
+  while(s < es && strchr(whitespace, *s))
+     47e:	fe9917e3          	bne	s2,s1,46c <gettoken+0x90>
+    s++;
+     482:	84ca                	mv	s1,s2
+  *ps = s;
+     484:	009a3023          	sd	s1,0(s4)
+  return ret;
+}
+     488:	8556                	mv	a0,s5
+     48a:	70e2                	ld	ra,56(sp)
+     48c:	7442                	ld	s0,48(sp)
+     48e:	74a2                	ld	s1,40(sp)
+     490:	7902                	ld	s2,32(sp)
+     492:	69e2                	ld	s3,24(sp)
+     494:	6a42                	ld	s4,16(sp)
+     496:	6aa2                	ld	s5,8(sp)
+     498:	6b02                	ld	s6,0(sp)
+     49a:	6121                	addi	sp,sp,64
+     49c:	8082                	ret
+  switch(*s){
+     49e:	03e00713          	li	a4,62
+     4a2:	02e79163          	bne	a5,a4,4c4 <gettoken+0xe8>
+    s++;
+     4a6:	00148693          	addi	a3,s1,1
+    if(*s == '>'){
+     4aa:	0014c703          	lbu	a4,1(s1)
+     4ae:	03e00793          	li	a5,62
+      s++;
+     4b2:	0489                	addi	s1,s1,2
+      ret = '+';
+     4b4:	02b00a93          	li	s5,43
+    if(*s == '>'){
+     4b8:	faf700e3          	beq	a4,a5,458 <gettoken+0x7c>
+    s++;
+     4bc:	84b6                	mv	s1,a3
+  ret = *s;
+     4be:	03e00a93          	li	s5,62
+     4c2:	bf59                	j	458 <gettoken+0x7c>
+  switch(*s){
+     4c4:	07c00713          	li	a4,124
+     4c8:	f8e787e3          	beq	a5,a4,456 <gettoken+0x7a>
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     4cc:	00001997          	auipc	s3,0x1
+     4d0:	00498993          	addi	s3,s3,4 # 14d0 <whitespace>
+     4d4:	00001a97          	auipc	s5,0x1
+     4d8:	ff4a8a93          	addi	s5,s5,-12 # 14c8 <symbols>
+     4dc:	0324f663          	bgeu	s1,s2,508 <gettoken+0x12c>
+     4e0:	0004c583          	lbu	a1,0(s1)
+     4e4:	854e                	mv	a0,s3
+     4e6:	00000097          	auipc	ra,0x0
+     4ea:	70a080e7          	jalr	1802(ra) # bf0 <strchr>
+     4ee:	e50d                	bnez	a0,518 <gettoken+0x13c>
+     4f0:	0004c583          	lbu	a1,0(s1)
+     4f4:	8556                	mv	a0,s5
+     4f6:	00000097          	auipc	ra,0x0
+     4fa:	6fa080e7          	jalr	1786(ra) # bf0 <strchr>
+     4fe:	e911                	bnez	a0,512 <gettoken+0x136>
+      s++;
+     500:	0485                	addi	s1,s1,1
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     502:	fc991fe3          	bne	s2,s1,4e0 <gettoken+0x104>
+      s++;
+     506:	84ca                	mv	s1,s2
+  if(eq)
+     508:	06100a93          	li	s5,97
+     50c:	f40b18e3          	bnez	s6,45c <gettoken+0x80>
+     510:	bf95                	j	484 <gettoken+0xa8>
+    ret = 'a';
+     512:	06100a93          	li	s5,97
+     516:	b789                	j	458 <gettoken+0x7c>
+     518:	06100a93          	li	s5,97
+     51c:	bf35                	j	458 <gettoken+0x7c>
+
+000000000000051e <peek>:
+
+int
+peek(char **ps, char *es, char *toks)
+{
+     51e:	7139                	addi	sp,sp,-64
+     520:	fc06                	sd	ra,56(sp)
+     522:	f822                	sd	s0,48(sp)
+     524:	f426                	sd	s1,40(sp)
+     526:	f04a                	sd	s2,32(sp)
+     528:	ec4e                	sd	s3,24(sp)
+     52a:	e852                	sd	s4,16(sp)
+     52c:	e456                	sd	s5,8(sp)
+     52e:	0080                	addi	s0,sp,64
+     530:	8a2a                	mv	s4,a0
+     532:	892e                	mv	s2,a1
+     534:	8ab2                	mv	s5,a2
+  char *s;
+
+  s = *ps;
+     536:	6104                	ld	s1,0(a0)
+  while(s < es && strchr(whitespace, *s))
+     538:	00001997          	auipc	s3,0x1
+     53c:	f9898993          	addi	s3,s3,-104 # 14d0 <whitespace>
+     540:	00b4fe63          	bgeu	s1,a1,55c <peek+0x3e>
+     544:	0004c583          	lbu	a1,0(s1)
+     548:	854e                	mv	a0,s3
+     54a:	00000097          	auipc	ra,0x0
+     54e:	6a6080e7          	jalr	1702(ra) # bf0 <strchr>
+     552:	c509                	beqz	a0,55c <peek+0x3e>
+    s++;
+     554:	0485                	addi	s1,s1,1
+  while(s < es && strchr(whitespace, *s))
+     556:	fe9917e3          	bne	s2,s1,544 <peek+0x26>
+    s++;
+     55a:	84ca                	mv	s1,s2
+  *ps = s;
+     55c:	009a3023          	sd	s1,0(s4)
+  return *s && strchr(toks, *s);
+     560:	0004c583          	lbu	a1,0(s1)
+     564:	4501                	li	a0,0
+     566:	e991                	bnez	a1,57a <peek+0x5c>
+}
+     568:	70e2                	ld	ra,56(sp)
+     56a:	7442                	ld	s0,48(sp)
+     56c:	74a2                	ld	s1,40(sp)
+     56e:	7902                	ld	s2,32(sp)
+     570:	69e2                	ld	s3,24(sp)
+     572:	6a42                	ld	s4,16(sp)
+     574:	6aa2                	ld	s5,8(sp)
+     576:	6121                	addi	sp,sp,64
+     578:	8082                	ret
+  return *s && strchr(toks, *s);
+     57a:	8556                	mv	a0,s5
+     57c:	00000097          	auipc	ra,0x0
+     580:	674080e7          	jalr	1652(ra) # bf0 <strchr>
+     584:	00a03533          	snez	a0,a0
+     588:	b7c5                	j	568 <peek+0x4a>
+
+000000000000058a <parseredirs>:
+  return cmd;
+}
+
+struct cmd*
+parseredirs(struct cmd *cmd, char **ps, char *es)
+{
+     58a:	7159                	addi	sp,sp,-112
+     58c:	f486                	sd	ra,104(sp)
+     58e:	f0a2                	sd	s0,96(sp)
+     590:	eca6                	sd	s1,88(sp)
+     592:	e8ca                	sd	s2,80(sp)
+     594:	e4ce                	sd	s3,72(sp)
+     596:	e0d2                	sd	s4,64(sp)
+     598:	fc56                	sd	s5,56(sp)
+     59a:	f85a                	sd	s6,48(sp)
+     59c:	f45e                	sd	s7,40(sp)
+     59e:	f062                	sd	s8,32(sp)
+     5a0:	ec66                	sd	s9,24(sp)
+     5a2:	1880                	addi	s0,sp,112
+     5a4:	8a2a                	mv	s4,a0
+     5a6:	89ae                	mv	s3,a1
+     5a8:	8932                	mv	s2,a2
+  int tok;
+  char *q, *eq;
+
+  while(peek(ps, es, "<>")){
+     5aa:	00001b97          	auipc	s7,0x1
+     5ae:	dceb8b93          	addi	s7,s7,-562 # 1378 <malloc+0x14e>
+    tok = gettoken(ps, es, 0, 0);
+    if(gettoken(ps, es, &q, &eq) != 'a')
+     5b2:	06100c13          	li	s8,97
+      panic("missing file for redirection");
+    switch(tok){
+     5b6:	03c00c93          	li	s9,60
+  while(peek(ps, es, "<>")){
+     5ba:	a02d                	j	5e4 <parseredirs+0x5a>
+      panic("missing file for redirection");
+     5bc:	00001517          	auipc	a0,0x1
+     5c0:	d9c50513          	addi	a0,a0,-612 # 1358 <malloc+0x12e>
+     5c4:	00000097          	auipc	ra,0x0
+     5c8:	a90080e7          	jalr	-1392(ra) # 54 <panic>
+    case '<':
+      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);
+     5cc:	4701                	li	a4,0
+     5ce:	4681                	li	a3,0
+     5d0:	f9043603          	ld	a2,-112(s0)
+     5d4:	f9843583          	ld	a1,-104(s0)
+     5d8:	8552                	mv	a0,s4
+     5da:	00000097          	auipc	ra,0x0
+     5de:	cd2080e7          	jalr	-814(ra) # 2ac <redircmd>
+     5e2:	8a2a                	mv	s4,a0
+    switch(tok){
+     5e4:	03e00b13          	li	s6,62
+     5e8:	02b00a93          	li	s5,43
+  while(peek(ps, es, "<>")){
+     5ec:	865e                	mv	a2,s7
+     5ee:	85ca                	mv	a1,s2
+     5f0:	854e                	mv	a0,s3
+     5f2:	00000097          	auipc	ra,0x0
+     5f6:	f2c080e7          	jalr	-212(ra) # 51e <peek>
+     5fa:	c925                	beqz	a0,66a <parseredirs+0xe0>
+    tok = gettoken(ps, es, 0, 0);
+     5fc:	4681                	li	a3,0
+     5fe:	4601                	li	a2,0
+     600:	85ca                	mv	a1,s2
+     602:	854e                	mv	a0,s3
+     604:	00000097          	auipc	ra,0x0
+     608:	dd8080e7          	jalr	-552(ra) # 3dc <gettoken>
+     60c:	84aa                	mv	s1,a0
+    if(gettoken(ps, es, &q, &eq) != 'a')
+     60e:	f9040693          	addi	a3,s0,-112
+     612:	f9840613          	addi	a2,s0,-104
+     616:	85ca                	mv	a1,s2
+     618:	854e                	mv	a0,s3
+     61a:	00000097          	auipc	ra,0x0
+     61e:	dc2080e7          	jalr	-574(ra) # 3dc <gettoken>
+     622:	f9851de3          	bne	a0,s8,5bc <parseredirs+0x32>
+    switch(tok){
+     626:	fb9483e3          	beq	s1,s9,5cc <parseredirs+0x42>
+     62a:	03648263          	beq	s1,s6,64e <parseredirs+0xc4>
+     62e:	fb549fe3          	bne	s1,s5,5ec <parseredirs+0x62>
+      break;
+    case '>':
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE|O_TRUNC, 1);
+      break;
+    case '+':  // >>
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+     632:	4705                	li	a4,1
+     634:	20100693          	li	a3,513
+     638:	f9043603          	ld	a2,-112(s0)
+     63c:	f9843583          	ld	a1,-104(s0)
+     640:	8552                	mv	a0,s4
+     642:	00000097          	auipc	ra,0x0
+     646:	c6a080e7          	jalr	-918(ra) # 2ac <redircmd>
+     64a:	8a2a                	mv	s4,a0
+      break;
+     64c:	bf61                	j	5e4 <parseredirs+0x5a>
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE|O_TRUNC, 1);
+     64e:	4705                	li	a4,1
+     650:	60100693          	li	a3,1537
+     654:	f9043603          	ld	a2,-112(s0)
+     658:	f9843583          	ld	a1,-104(s0)
+     65c:	8552                	mv	a0,s4
+     65e:	00000097          	auipc	ra,0x0
+     662:	c4e080e7          	jalr	-946(ra) # 2ac <redircmd>
+     666:	8a2a                	mv	s4,a0
+      break;
+     668:	bfb5                	j	5e4 <parseredirs+0x5a>
+    }
+  }
+  return cmd;
+}
+     66a:	8552                	mv	a0,s4
+     66c:	70a6                	ld	ra,104(sp)
+     66e:	7406                	ld	s0,96(sp)
+     670:	64e6                	ld	s1,88(sp)
+     672:	6946                	ld	s2,80(sp)
+     674:	69a6                	ld	s3,72(sp)
+     676:	6a06                	ld	s4,64(sp)
+     678:	7ae2                	ld	s5,56(sp)
+     67a:	7b42                	ld	s6,48(sp)
+     67c:	7ba2                	ld	s7,40(sp)
+     67e:	7c02                	ld	s8,32(sp)
+     680:	6ce2                	ld	s9,24(sp)
+     682:	6165                	addi	sp,sp,112
+     684:	8082                	ret
+
+0000000000000686 <parseexec>:
+  return cmd;
+}
+
+struct cmd*
+parseexec(char **ps, char *es)
+{
+     686:	7159                	addi	sp,sp,-112
+     688:	f486                	sd	ra,104(sp)
+     68a:	f0a2                	sd	s0,96(sp)
+     68c:	eca6                	sd	s1,88(sp)
+     68e:	e8ca                	sd	s2,80(sp)
+     690:	e4ce                	sd	s3,72(sp)
+     692:	e0d2                	sd	s4,64(sp)
+     694:	fc56                	sd	s5,56(sp)
+     696:	f85a                	sd	s6,48(sp)
+     698:	f45e                	sd	s7,40(sp)
+     69a:	f062                	sd	s8,32(sp)
+     69c:	ec66                	sd	s9,24(sp)
+     69e:	1880                	addi	s0,sp,112
+     6a0:	8a2a                	mv	s4,a0
+     6a2:	8aae                	mv	s5,a1
+  char *q, *eq;
+  int tok, argc;
+  struct execcmd *cmd;
+  struct cmd *ret;
+
+  if(peek(ps, es, "("))
+     6a4:	00001617          	auipc	a2,0x1
+     6a8:	cdc60613          	addi	a2,a2,-804 # 1380 <malloc+0x156>
+     6ac:	00000097          	auipc	ra,0x0
+     6b0:	e72080e7          	jalr	-398(ra) # 51e <peek>
+     6b4:	e905                	bnez	a0,6e4 <parseexec+0x5e>
+     6b6:	89aa                	mv	s3,a0
+    return parseblock(ps, es);
+
+  ret = execcmd();
+     6b8:	00000097          	auipc	ra,0x0
+     6bc:	bbe080e7          	jalr	-1090(ra) # 276 <execcmd>
+     6c0:	8c2a                	mv	s8,a0
+  cmd = (struct execcmd*)ret;
+
+  argc = 0;
+  ret = parseredirs(ret, ps, es);
+     6c2:	8656                	mv	a2,s5
+     6c4:	85d2                	mv	a1,s4
+     6c6:	00000097          	auipc	ra,0x0
+     6ca:	ec4080e7          	jalr	-316(ra) # 58a <parseredirs>
+     6ce:	84aa                	mv	s1,a0
+  while(!peek(ps, es, "|)&;")){
+     6d0:	008c0913          	addi	s2,s8,8
+     6d4:	00001b17          	auipc	s6,0x1
+     6d8:	cccb0b13          	addi	s6,s6,-820 # 13a0 <malloc+0x176>
+    if((tok=gettoken(ps, es, &q, &eq)) == 0)
+      break;
+    if(tok != 'a')
+     6dc:	06100c93          	li	s9,97
+      panic("syntax");
+    cmd->argv[argc] = q;
+    cmd->eargv[argc] = eq;
+    argc++;
+    if(argc >= MAXARGS)
+     6e0:	4ba9                	li	s7,10
+  while(!peek(ps, es, "|)&;")){
+     6e2:	a0b1                	j	72e <parseexec+0xa8>
+    return parseblock(ps, es);
+     6e4:	85d6                	mv	a1,s5
+     6e6:	8552                	mv	a0,s4
+     6e8:	00000097          	auipc	ra,0x0
+     6ec:	1bc080e7          	jalr	444(ra) # 8a4 <parseblock>
+     6f0:	84aa                	mv	s1,a0
+    ret = parseredirs(ret, ps, es);
+  }
+  cmd->argv[argc] = 0;
+  cmd->eargv[argc] = 0;
+  return ret;
+}
+     6f2:	8526                	mv	a0,s1
+     6f4:	70a6                	ld	ra,104(sp)
+     6f6:	7406                	ld	s0,96(sp)
+     6f8:	64e6                	ld	s1,88(sp)
+     6fa:	6946                	ld	s2,80(sp)
+     6fc:	69a6                	ld	s3,72(sp)
+     6fe:	6a06                	ld	s4,64(sp)
+     700:	7ae2                	ld	s5,56(sp)
+     702:	7b42                	ld	s6,48(sp)
+     704:	7ba2                	ld	s7,40(sp)
+     706:	7c02                	ld	s8,32(sp)
+     708:	6ce2                	ld	s9,24(sp)
+     70a:	6165                	addi	sp,sp,112
+     70c:	8082                	ret
+      panic("syntax");
+     70e:	00001517          	auipc	a0,0x1
+     712:	c7a50513          	addi	a0,a0,-902 # 1388 <malloc+0x15e>
+     716:	00000097          	auipc	ra,0x0
+     71a:	93e080e7          	jalr	-1730(ra) # 54 <panic>
+    ret = parseredirs(ret, ps, es);
+     71e:	8656                	mv	a2,s5
+     720:	85d2                	mv	a1,s4
+     722:	8526                	mv	a0,s1
+     724:	00000097          	auipc	ra,0x0
+     728:	e66080e7          	jalr	-410(ra) # 58a <parseredirs>
+     72c:	84aa                	mv	s1,a0
+  while(!peek(ps, es, "|)&;")){
+     72e:	865a                	mv	a2,s6
+     730:	85d6                	mv	a1,s5
+     732:	8552                	mv	a0,s4
+     734:	00000097          	auipc	ra,0x0
+     738:	dea080e7          	jalr	-534(ra) # 51e <peek>
+     73c:	e131                	bnez	a0,780 <parseexec+0xfa>
+    if((tok=gettoken(ps, es, &q, &eq)) == 0)
+     73e:	f9040693          	addi	a3,s0,-112
+     742:	f9840613          	addi	a2,s0,-104
+     746:	85d6                	mv	a1,s5
+     748:	8552                	mv	a0,s4
+     74a:	00000097          	auipc	ra,0x0
+     74e:	c92080e7          	jalr	-878(ra) # 3dc <gettoken>
+     752:	c51d                	beqz	a0,780 <parseexec+0xfa>
+    if(tok != 'a')
+     754:	fb951de3          	bne	a0,s9,70e <parseexec+0x88>
+    cmd->argv[argc] = q;
+     758:	f9843783          	ld	a5,-104(s0)
+     75c:	00f93023          	sd	a5,0(s2)
+    cmd->eargv[argc] = eq;
+     760:	f9043783          	ld	a5,-112(s0)
+     764:	04f93823          	sd	a5,80(s2)
+    argc++;
+     768:	2985                	addiw	s3,s3,1
+    if(argc >= MAXARGS)
+     76a:	0921                	addi	s2,s2,8
+     76c:	fb7999e3          	bne	s3,s7,71e <parseexec+0x98>
+      panic("too many args");
+     770:	00001517          	auipc	a0,0x1
+     774:	c2050513          	addi	a0,a0,-992 # 1390 <malloc+0x166>
+     778:	00000097          	auipc	ra,0x0
+     77c:	8dc080e7          	jalr	-1828(ra) # 54 <panic>
+  cmd->argv[argc] = 0;
+     780:	098e                	slli	s3,s3,0x3
+     782:	9c4e                	add	s8,s8,s3
+     784:	000c3423          	sd	zero,8(s8)
+  cmd->eargv[argc] = 0;
+     788:	040c3c23          	sd	zero,88(s8)
+  return ret;
+     78c:	b79d                	j	6f2 <parseexec+0x6c>
+
+000000000000078e <parsepipe>:
+{
+     78e:	7179                	addi	sp,sp,-48
+     790:	f406                	sd	ra,40(sp)
+     792:	f022                	sd	s0,32(sp)
+     794:	ec26                	sd	s1,24(sp)
+     796:	e84a                	sd	s2,16(sp)
+     798:	e44e                	sd	s3,8(sp)
+     79a:	1800                	addi	s0,sp,48
+     79c:	892a                	mv	s2,a0
+     79e:	89ae                	mv	s3,a1
+  cmd = parseexec(ps, es);
+     7a0:	00000097          	auipc	ra,0x0
+     7a4:	ee6080e7          	jalr	-282(ra) # 686 <parseexec>
+     7a8:	84aa                	mv	s1,a0
+  if(peek(ps, es, "|")){
+     7aa:	00001617          	auipc	a2,0x1
+     7ae:	bfe60613          	addi	a2,a2,-1026 # 13a8 <malloc+0x17e>
+     7b2:	85ce                	mv	a1,s3
+     7b4:	854a                	mv	a0,s2
+     7b6:	00000097          	auipc	ra,0x0
+     7ba:	d68080e7          	jalr	-664(ra) # 51e <peek>
+     7be:	e909                	bnez	a0,7d0 <parsepipe+0x42>
+}
+     7c0:	8526                	mv	a0,s1
+     7c2:	70a2                	ld	ra,40(sp)
+     7c4:	7402                	ld	s0,32(sp)
+     7c6:	64e2                	ld	s1,24(sp)
+     7c8:	6942                	ld	s2,16(sp)
+     7ca:	69a2                	ld	s3,8(sp)
+     7cc:	6145                	addi	sp,sp,48
+     7ce:	8082                	ret
+    gettoken(ps, es, 0, 0);
+     7d0:	4681                	li	a3,0
+     7d2:	4601                	li	a2,0
+     7d4:	85ce                	mv	a1,s3
+     7d6:	854a                	mv	a0,s2
+     7d8:	00000097          	auipc	ra,0x0
+     7dc:	c04080e7          	jalr	-1020(ra) # 3dc <gettoken>
+    cmd = pipecmd(cmd, parsepipe(ps, es));
+     7e0:	85ce                	mv	a1,s3
+     7e2:	854a                	mv	a0,s2
+     7e4:	00000097          	auipc	ra,0x0
+     7e8:	faa080e7          	jalr	-86(ra) # 78e <parsepipe>
+     7ec:	85aa                	mv	a1,a0
+     7ee:	8526                	mv	a0,s1
+     7f0:	00000097          	auipc	ra,0x0
+     7f4:	b24080e7          	jalr	-1244(ra) # 314 <pipecmd>
+     7f8:	84aa                	mv	s1,a0
+  return cmd;
+     7fa:	b7d9                	j	7c0 <parsepipe+0x32>
+
+00000000000007fc <parseline>:
+{
+     7fc:	7179                	addi	sp,sp,-48
+     7fe:	f406                	sd	ra,40(sp)
+     800:	f022                	sd	s0,32(sp)
+     802:	ec26                	sd	s1,24(sp)
+     804:	e84a                	sd	s2,16(sp)
+     806:	e44e                	sd	s3,8(sp)
+     808:	e052                	sd	s4,0(sp)
+     80a:	1800                	addi	s0,sp,48
+     80c:	892a                	mv	s2,a0
+     80e:	89ae                	mv	s3,a1
+  cmd = parsepipe(ps, es);
+     810:	00000097          	auipc	ra,0x0
+     814:	f7e080e7          	jalr	-130(ra) # 78e <parsepipe>
+     818:	84aa                	mv	s1,a0
+  while(peek(ps, es, "&")){
+     81a:	00001a17          	auipc	s4,0x1
+     81e:	b96a0a13          	addi	s4,s4,-1130 # 13b0 <malloc+0x186>
+     822:	a839                	j	840 <parseline+0x44>
+    gettoken(ps, es, 0, 0);
+     824:	4681                	li	a3,0
+     826:	4601                	li	a2,0
+     828:	85ce                	mv	a1,s3
+     82a:	854a                	mv	a0,s2
+     82c:	00000097          	auipc	ra,0x0
+     830:	bb0080e7          	jalr	-1104(ra) # 3dc <gettoken>
+    cmd = backcmd(cmd);
+     834:	8526                	mv	a0,s1
+     836:	00000097          	auipc	ra,0x0
+     83a:	b6a080e7          	jalr	-1174(ra) # 3a0 <backcmd>
+     83e:	84aa                	mv	s1,a0
+  while(peek(ps, es, "&")){
+     840:	8652                	mv	a2,s4
+     842:	85ce                	mv	a1,s3
+     844:	854a                	mv	a0,s2
+     846:	00000097          	auipc	ra,0x0
+     84a:	cd8080e7          	jalr	-808(ra) # 51e <peek>
+     84e:	f979                	bnez	a0,824 <parseline+0x28>
+  if(peek(ps, es, ";")){
+     850:	00001617          	auipc	a2,0x1
+     854:	b6860613          	addi	a2,a2,-1176 # 13b8 <malloc+0x18e>
+     858:	85ce                	mv	a1,s3
+     85a:	854a                	mv	a0,s2
+     85c:	00000097          	auipc	ra,0x0
+     860:	cc2080e7          	jalr	-830(ra) # 51e <peek>
+     864:	e911                	bnez	a0,878 <parseline+0x7c>
+}
+     866:	8526                	mv	a0,s1
+     868:	70a2                	ld	ra,40(sp)
+     86a:	7402                	ld	s0,32(sp)
+     86c:	64e2                	ld	s1,24(sp)
+     86e:	6942                	ld	s2,16(sp)
+     870:	69a2                	ld	s3,8(sp)
+     872:	6a02                	ld	s4,0(sp)
+     874:	6145                	addi	sp,sp,48
+     876:	8082                	ret
+    gettoken(ps, es, 0, 0);
+     878:	4681                	li	a3,0
+     87a:	4601                	li	a2,0
+     87c:	85ce                	mv	a1,s3
+     87e:	854a                	mv	a0,s2
+     880:	00000097          	auipc	ra,0x0
+     884:	b5c080e7          	jalr	-1188(ra) # 3dc <gettoken>
+    cmd = listcmd(cmd, parseline(ps, es));
+     888:	85ce                	mv	a1,s3
+     88a:	854a                	mv	a0,s2
+     88c:	00000097          	auipc	ra,0x0
+     890:	f70080e7          	jalr	-144(ra) # 7fc <parseline>
+     894:	85aa                	mv	a1,a0
+     896:	8526                	mv	a0,s1
+     898:	00000097          	auipc	ra,0x0
+     89c:	ac2080e7          	jalr	-1342(ra) # 35a <listcmd>
+     8a0:	84aa                	mv	s1,a0
+  return cmd;
+     8a2:	b7d1                	j	866 <parseline+0x6a>
+
+00000000000008a4 <parseblock>:
+{
+     8a4:	7179                	addi	sp,sp,-48
+     8a6:	f406                	sd	ra,40(sp)
+     8a8:	f022                	sd	s0,32(sp)
+     8aa:	ec26                	sd	s1,24(sp)
+     8ac:	e84a                	sd	s2,16(sp)
+     8ae:	e44e                	sd	s3,8(sp)
+     8b0:	1800                	addi	s0,sp,48
+     8b2:	84aa                	mv	s1,a0
+     8b4:	892e                	mv	s2,a1
+  if(!peek(ps, es, "("))
+     8b6:	00001617          	auipc	a2,0x1
+     8ba:	aca60613          	addi	a2,a2,-1334 # 1380 <malloc+0x156>
+     8be:	00000097          	auipc	ra,0x0
+     8c2:	c60080e7          	jalr	-928(ra) # 51e <peek>
+     8c6:	c12d                	beqz	a0,928 <parseblock+0x84>
+  gettoken(ps, es, 0, 0);
+     8c8:	4681                	li	a3,0
+     8ca:	4601                	li	a2,0
+     8cc:	85ca                	mv	a1,s2
+     8ce:	8526                	mv	a0,s1
+     8d0:	00000097          	auipc	ra,0x0
+     8d4:	b0c080e7          	jalr	-1268(ra) # 3dc <gettoken>
+  cmd = parseline(ps, es);
+     8d8:	85ca                	mv	a1,s2
+     8da:	8526                	mv	a0,s1
+     8dc:	00000097          	auipc	ra,0x0
+     8e0:	f20080e7          	jalr	-224(ra) # 7fc <parseline>
+     8e4:	89aa                	mv	s3,a0
+  if(!peek(ps, es, ")"))
+     8e6:	00001617          	auipc	a2,0x1
+     8ea:	aea60613          	addi	a2,a2,-1302 # 13d0 <malloc+0x1a6>
+     8ee:	85ca                	mv	a1,s2
+     8f0:	8526                	mv	a0,s1
+     8f2:	00000097          	auipc	ra,0x0
+     8f6:	c2c080e7          	jalr	-980(ra) # 51e <peek>
+     8fa:	cd1d                	beqz	a0,938 <parseblock+0x94>
+  gettoken(ps, es, 0, 0);
+     8fc:	4681                	li	a3,0
+     8fe:	4601                	li	a2,0
+     900:	85ca                	mv	a1,s2
+     902:	8526                	mv	a0,s1
+     904:	00000097          	auipc	ra,0x0
+     908:	ad8080e7          	jalr	-1320(ra) # 3dc <gettoken>
+  cmd = parseredirs(cmd, ps, es);
+     90c:	864a                	mv	a2,s2
+     90e:	85a6                	mv	a1,s1
+     910:	854e                	mv	a0,s3
+     912:	00000097          	auipc	ra,0x0
+     916:	c78080e7          	jalr	-904(ra) # 58a <parseredirs>
+}
+     91a:	70a2                	ld	ra,40(sp)
+     91c:	7402                	ld	s0,32(sp)
+     91e:	64e2                	ld	s1,24(sp)
+     920:	6942                	ld	s2,16(sp)
+     922:	69a2                	ld	s3,8(sp)
+     924:	6145                	addi	sp,sp,48
+     926:	8082                	ret
+    panic("parseblock");
+     928:	00001517          	auipc	a0,0x1
+     92c:	a9850513          	addi	a0,a0,-1384 # 13c0 <malloc+0x196>
+     930:	fffff097          	auipc	ra,0xfffff
+     934:	724080e7          	jalr	1828(ra) # 54 <panic>
+    panic("syntax - missing )");
+     938:	00001517          	auipc	a0,0x1
+     93c:	aa050513          	addi	a0,a0,-1376 # 13d8 <malloc+0x1ae>
+     940:	fffff097          	auipc	ra,0xfffff
+     944:	714080e7          	jalr	1812(ra) # 54 <panic>
+
+0000000000000948 <nulterminate>:
+
+// NUL-terminate all the counted strings.
+struct cmd*
+nulterminate(struct cmd *cmd)
+{
+     948:	1101                	addi	sp,sp,-32
+     94a:	ec06                	sd	ra,24(sp)
+     94c:	e822                	sd	s0,16(sp)
+     94e:	e426                	sd	s1,8(sp)
+     950:	1000                	addi	s0,sp,32
+     952:	84aa                	mv	s1,a0
+  struct execcmd *ecmd;
+  struct listcmd *lcmd;
+  struct pipecmd *pcmd;
+  struct redircmd *rcmd;
+
+  if(cmd == 0)
+     954:	c521                	beqz	a0,99c <nulterminate+0x54>
+    return 0;
+
+  switch(cmd->type){
+     956:	4118                	lw	a4,0(a0)
+     958:	4795                	li	a5,5
+     95a:	04e7e163          	bltu	a5,a4,99c <nulterminate+0x54>
+     95e:	00056783          	lwu	a5,0(a0)
+     962:	078a                	slli	a5,a5,0x2
+     964:	00001717          	auipc	a4,0x1
+     968:	ad470713          	addi	a4,a4,-1324 # 1438 <malloc+0x20e>
+     96c:	97ba                	add	a5,a5,a4
+     96e:	439c                	lw	a5,0(a5)
+     970:	97ba                	add	a5,a5,a4
+     972:	8782                	jr	a5
+  case EXEC:
+    ecmd = (struct execcmd*)cmd;
+    for(i=0; ecmd->argv[i]; i++)
+     974:	651c                	ld	a5,8(a0)
+     976:	c39d                	beqz	a5,99c <nulterminate+0x54>
+     978:	01050793          	addi	a5,a0,16
+      *ecmd->eargv[i] = 0;
+     97c:	67b8                	ld	a4,72(a5)
+     97e:	00070023          	sb	zero,0(a4)
+    for(i=0; ecmd->argv[i]; i++)
+     982:	07a1                	addi	a5,a5,8
+     984:	ff87b703          	ld	a4,-8(a5)
+     988:	fb75                	bnez	a4,97c <nulterminate+0x34>
+     98a:	a809                	j	99c <nulterminate+0x54>
+    break;
+
+  case REDIR:
+    rcmd = (struct redircmd*)cmd;
+    nulterminate(rcmd->cmd);
+     98c:	6508                	ld	a0,8(a0)
+     98e:	00000097          	auipc	ra,0x0
+     992:	fba080e7          	jalr	-70(ra) # 948 <nulterminate>
+    *rcmd->efile = 0;
+     996:	6c9c                	ld	a5,24(s1)
+     998:	00078023          	sb	zero,0(a5)
+    bcmd = (struct backcmd*)cmd;
+    nulterminate(bcmd->cmd);
+    break;
+  }
+  return cmd;
+}
+     99c:	8526                	mv	a0,s1
+     99e:	60e2                	ld	ra,24(sp)
+     9a0:	6442                	ld	s0,16(sp)
+     9a2:	64a2                	ld	s1,8(sp)
+     9a4:	6105                	addi	sp,sp,32
+     9a6:	8082                	ret
+    nulterminate(pcmd->left);
+     9a8:	6508                	ld	a0,8(a0)
+     9aa:	00000097          	auipc	ra,0x0
+     9ae:	f9e080e7          	jalr	-98(ra) # 948 <nulterminate>
+    nulterminate(pcmd->right);
+     9b2:	6888                	ld	a0,16(s1)
+     9b4:	00000097          	auipc	ra,0x0
+     9b8:	f94080e7          	jalr	-108(ra) # 948 <nulterminate>
+    break;
+     9bc:	b7c5                	j	99c <nulterminate+0x54>
+    nulterminate(lcmd->left);
+     9be:	6508                	ld	a0,8(a0)
+     9c0:	00000097          	auipc	ra,0x0
+     9c4:	f88080e7          	jalr	-120(ra) # 948 <nulterminate>
+    nulterminate(lcmd->right);
+     9c8:	6888                	ld	a0,16(s1)
+     9ca:	00000097          	auipc	ra,0x0
+     9ce:	f7e080e7          	jalr	-130(ra) # 948 <nulterminate>
+    break;
+     9d2:	b7e9                	j	99c <nulterminate+0x54>
+    nulterminate(bcmd->cmd);
+     9d4:	6508                	ld	a0,8(a0)
+     9d6:	00000097          	auipc	ra,0x0
+     9da:	f72080e7          	jalr	-142(ra) # 948 <nulterminate>
+    break;
+     9de:	bf7d                	j	99c <nulterminate+0x54>
+
+00000000000009e0 <parsecmd>:
+{
+     9e0:	7179                	addi	sp,sp,-48
+     9e2:	f406                	sd	ra,40(sp)
+     9e4:	f022                	sd	s0,32(sp)
+     9e6:	ec26                	sd	s1,24(sp)
+     9e8:	e84a                	sd	s2,16(sp)
+     9ea:	1800                	addi	s0,sp,48
+     9ec:	fca43c23          	sd	a0,-40(s0)
+  es = s + strlen(s);
+     9f0:	84aa                	mv	s1,a0
+     9f2:	00000097          	auipc	ra,0x0
+     9f6:	1b2080e7          	jalr	434(ra) # ba4 <strlen>
+     9fa:	1502                	slli	a0,a0,0x20
+     9fc:	9101                	srli	a0,a0,0x20
+     9fe:	94aa                	add	s1,s1,a0
+  cmd = parseline(&s, es);
+     a00:	85a6                	mv	a1,s1
+     a02:	fd840513          	addi	a0,s0,-40
+     a06:	00000097          	auipc	ra,0x0
+     a0a:	df6080e7          	jalr	-522(ra) # 7fc <parseline>
+     a0e:	892a                	mv	s2,a0
+  peek(&s, es, "");
+     a10:	00001617          	auipc	a2,0x1
+     a14:	9e060613          	addi	a2,a2,-1568 # 13f0 <malloc+0x1c6>
+     a18:	85a6                	mv	a1,s1
+     a1a:	fd840513          	addi	a0,s0,-40
+     a1e:	00000097          	auipc	ra,0x0
+     a22:	b00080e7          	jalr	-1280(ra) # 51e <peek>
+  if(s != es){
+     a26:	fd843603          	ld	a2,-40(s0)
+     a2a:	00961e63          	bne	a2,s1,a46 <parsecmd+0x66>
+  nulterminate(cmd);
+     a2e:	854a                	mv	a0,s2
+     a30:	00000097          	auipc	ra,0x0
+     a34:	f18080e7          	jalr	-232(ra) # 948 <nulterminate>
+}
+     a38:	854a                	mv	a0,s2
+     a3a:	70a2                	ld	ra,40(sp)
+     a3c:	7402                	ld	s0,32(sp)
+     a3e:	64e2                	ld	s1,24(sp)
+     a40:	6942                	ld	s2,16(sp)
+     a42:	6145                	addi	sp,sp,48
+     a44:	8082                	ret
+    fprintf(2, "leftovers: %s\n", s);
+     a46:	00001597          	auipc	a1,0x1
+     a4a:	9b258593          	addi	a1,a1,-1614 # 13f8 <malloc+0x1ce>
+     a4e:	4509                	li	a0,2
+     a50:	00000097          	auipc	ra,0x0
+     a54:	6f4080e7          	jalr	1780(ra) # 1144 <fprintf>
+    panic("syntax");
+     a58:	00001517          	auipc	a0,0x1
+     a5c:	93050513          	addi	a0,a0,-1744 # 1388 <malloc+0x15e>
+     a60:	fffff097          	auipc	ra,0xfffff
+     a64:	5f4080e7          	jalr	1524(ra) # 54 <panic>
+
+0000000000000a68 <main>:
+{
+     a68:	7139                	addi	sp,sp,-64
+     a6a:	fc06                	sd	ra,56(sp)
+     a6c:	f822                	sd	s0,48(sp)
+     a6e:	f426                	sd	s1,40(sp)
+     a70:	f04a                	sd	s2,32(sp)
+     a72:	ec4e                	sd	s3,24(sp)
+     a74:	e852                	sd	s4,16(sp)
+     a76:	e456                	sd	s5,8(sp)
+     a78:	0080                	addi	s0,sp,64
+  while((fd = open("console", O_RDWR)) >= 0){
+     a7a:	00001497          	auipc	s1,0x1
+     a7e:	98e48493          	addi	s1,s1,-1650 # 1408 <malloc+0x1de>
+     a82:	4589                	li	a1,2
+     a84:	8526                	mv	a0,s1
+     a86:	00000097          	auipc	ra,0x0
+     a8a:	382080e7          	jalr	898(ra) # e08 <open>
+     a8e:	00054963          	bltz	a0,aa0 <main+0x38>
+    if(fd >= 3){
+     a92:	4789                	li	a5,2
+     a94:	fea7d7e3          	bge	a5,a0,a82 <main+0x1a>
+      close(fd);
+     a98:	00000097          	auipc	ra,0x0
+     a9c:	358080e7          	jalr	856(ra) # df0 <close>
+  while(getcmd(buf, sizeof(buf)) >= 0){
+     aa0:	00001497          	auipc	s1,0x1
+     aa4:	a4048493          	addi	s1,s1,-1472 # 14e0 <buf.0>
+    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
+     aa8:	06300913          	li	s2,99
+     aac:	02000993          	li	s3,32
+      if(chdir(buf+3) < 0)
+     ab0:	00001a17          	auipc	s4,0x1
+     ab4:	a33a0a13          	addi	s4,s4,-1485 # 14e3 <buf.0+0x3>
+        fprintf(2, "cannot cd %s\n", buf+3);
+     ab8:	00001a97          	auipc	s5,0x1
+     abc:	958a8a93          	addi	s5,s5,-1704 # 1410 <malloc+0x1e6>
+     ac0:	a819                	j	ad6 <main+0x6e>
+    if(fork1() == 0)
+     ac2:	fffff097          	auipc	ra,0xfffff
+     ac6:	5b8080e7          	jalr	1464(ra) # 7a <fork1>
+     aca:	c925                	beqz	a0,b3a <main+0xd2>
+    wait(0);
+     acc:	4501                	li	a0,0
+     ace:	00000097          	auipc	ra,0x0
+     ad2:	302080e7          	jalr	770(ra) # dd0 <wait>
+  while(getcmd(buf, sizeof(buf)) >= 0){
+     ad6:	06400593          	li	a1,100
+     ada:	8526                	mv	a0,s1
+     adc:	fffff097          	auipc	ra,0xfffff
+     ae0:	524080e7          	jalr	1316(ra) # 0 <getcmd>
+     ae4:	06054763          	bltz	a0,b52 <main+0xea>
+    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
+     ae8:	0004c783          	lbu	a5,0(s1)
+     aec:	fd279be3          	bne	a5,s2,ac2 <main+0x5a>
+     af0:	0014c703          	lbu	a4,1(s1)
+     af4:	06400793          	li	a5,100
+     af8:	fcf715e3          	bne	a4,a5,ac2 <main+0x5a>
+     afc:	0024c783          	lbu	a5,2(s1)
+     b00:	fd3791e3          	bne	a5,s3,ac2 <main+0x5a>
+      buf[strlen(buf)-1] = 0;  // chop \n
+     b04:	8526                	mv	a0,s1
+     b06:	00000097          	auipc	ra,0x0
+     b0a:	09e080e7          	jalr	158(ra) # ba4 <strlen>
+     b0e:	fff5079b          	addiw	a5,a0,-1
+     b12:	1782                	slli	a5,a5,0x20
+     b14:	9381                	srli	a5,a5,0x20
+     b16:	97a6                	add	a5,a5,s1
+     b18:	00078023          	sb	zero,0(a5)
+      if(chdir(buf+3) < 0)
+     b1c:	8552                	mv	a0,s4
+     b1e:	00000097          	auipc	ra,0x0
+     b22:	31a080e7          	jalr	794(ra) # e38 <chdir>
+     b26:	fa0558e3          	bgez	a0,ad6 <main+0x6e>
+        fprintf(2, "cannot cd %s\n", buf+3);
+     b2a:	8652                	mv	a2,s4
+     b2c:	85d6                	mv	a1,s5
+     b2e:	4509                	li	a0,2
+     b30:	00000097          	auipc	ra,0x0
+     b34:	614080e7          	jalr	1556(ra) # 1144 <fprintf>
+     b38:	bf79                	j	ad6 <main+0x6e>
+      runcmd(parsecmd(buf));
+     b3a:	00001517          	auipc	a0,0x1
+     b3e:	9a650513          	addi	a0,a0,-1626 # 14e0 <buf.0>
+     b42:	00000097          	auipc	ra,0x0
+     b46:	e9e080e7          	jalr	-354(ra) # 9e0 <parsecmd>
+     b4a:	fffff097          	auipc	ra,0xfffff
+     b4e:	55e080e7          	jalr	1374(ra) # a8 <runcmd>
+  exit(0);
+     b52:	4501                	li	a0,0
+     b54:	00000097          	auipc	ra,0x0
+     b58:	274080e7          	jalr	628(ra) # dc8 <exit>
+
+0000000000000b5c <strcpy>:
+#include "kernel/fcntl.h"
+#include "user/user.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+     b5c:	1141                	addi	sp,sp,-16
+     b5e:	e422                	sd	s0,8(sp)
+     b60:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+     b62:	87aa                	mv	a5,a0
+     b64:	0585                	addi	a1,a1,1
+     b66:	0785                	addi	a5,a5,1
+     b68:	fff5c703          	lbu	a4,-1(a1)
+     b6c:	fee78fa3          	sb	a4,-1(a5)
+     b70:	fb75                	bnez	a4,b64 <strcpy+0x8>
+    ;
+  return os;
+}
+     b72:	6422                	ld	s0,8(sp)
+     b74:	0141                	addi	sp,sp,16
+     b76:	8082                	ret
+
+0000000000000b78 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+     b78:	1141                	addi	sp,sp,-16
+     b7a:	e422                	sd	s0,8(sp)
+     b7c:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+     b7e:	00054783          	lbu	a5,0(a0)
+     b82:	cb91                	beqz	a5,b96 <strcmp+0x1e>
+     b84:	0005c703          	lbu	a4,0(a1)
+     b88:	00f71763          	bne	a4,a5,b96 <strcmp+0x1e>
+    p++, q++;
+     b8c:	0505                	addi	a0,a0,1
+     b8e:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+     b90:	00054783          	lbu	a5,0(a0)
+     b94:	fbe5                	bnez	a5,b84 <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+     b96:	0005c503          	lbu	a0,0(a1)
+}
+     b9a:	40a7853b          	subw	a0,a5,a0
+     b9e:	6422                	ld	s0,8(sp)
+     ba0:	0141                	addi	sp,sp,16
+     ba2:	8082                	ret
+
+0000000000000ba4 <strlen>:
+
+uint
+strlen(const char *s)
+{
+     ba4:	1141                	addi	sp,sp,-16
+     ba6:	e422                	sd	s0,8(sp)
+     ba8:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+     baa:	00054783          	lbu	a5,0(a0)
+     bae:	cf91                	beqz	a5,bca <strlen+0x26>
+     bb0:	0505                	addi	a0,a0,1
+     bb2:	87aa                	mv	a5,a0
+     bb4:	4685                	li	a3,1
+     bb6:	9e89                	subw	a3,a3,a0
+     bb8:	00f6853b          	addw	a0,a3,a5
+     bbc:	0785                	addi	a5,a5,1
+     bbe:	fff7c703          	lbu	a4,-1(a5)
+     bc2:	fb7d                	bnez	a4,bb8 <strlen+0x14>
+    ;
+  return n;
+}
+     bc4:	6422                	ld	s0,8(sp)
+     bc6:	0141                	addi	sp,sp,16
+     bc8:	8082                	ret
+  for(n = 0; s[n]; n++)
+     bca:	4501                	li	a0,0
+     bcc:	bfe5                	j	bc4 <strlen+0x20>
+
+0000000000000bce <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+     bce:	1141                	addi	sp,sp,-16
+     bd0:	e422                	sd	s0,8(sp)
+     bd2:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+     bd4:	ca19                	beqz	a2,bea <memset+0x1c>
+     bd6:	87aa                	mv	a5,a0
+     bd8:	1602                	slli	a2,a2,0x20
+     bda:	9201                	srli	a2,a2,0x20
+     bdc:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+     be0:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+     be4:	0785                	addi	a5,a5,1
+     be6:	fee79de3          	bne	a5,a4,be0 <memset+0x12>
+  }
+  return dst;
+}
+     bea:	6422                	ld	s0,8(sp)
+     bec:	0141                	addi	sp,sp,16
+     bee:	8082                	ret
+
+0000000000000bf0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+     bf0:	1141                	addi	sp,sp,-16
+     bf2:	e422                	sd	s0,8(sp)
+     bf4:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+     bf6:	00054783          	lbu	a5,0(a0)
+     bfa:	cb99                	beqz	a5,c10 <strchr+0x20>
+    if(*s == c)
+     bfc:	00f58763          	beq	a1,a5,c0a <strchr+0x1a>
+  for(; *s; s++)
+     c00:	0505                	addi	a0,a0,1
+     c02:	00054783          	lbu	a5,0(a0)
+     c06:	fbfd                	bnez	a5,bfc <strchr+0xc>
+      return (char*)s;
+  return 0;
+     c08:	4501                	li	a0,0
+}
+     c0a:	6422                	ld	s0,8(sp)
+     c0c:	0141                	addi	sp,sp,16
+     c0e:	8082                	ret
+  return 0;
+     c10:	4501                	li	a0,0
+     c12:	bfe5                	j	c0a <strchr+0x1a>
+
+0000000000000c14 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+     c14:	711d                	addi	sp,sp,-96
+     c16:	ec86                	sd	ra,88(sp)
+     c18:	e8a2                	sd	s0,80(sp)
+     c1a:	e4a6                	sd	s1,72(sp)
+     c1c:	e0ca                	sd	s2,64(sp)
+     c1e:	fc4e                	sd	s3,56(sp)
+     c20:	f852                	sd	s4,48(sp)
+     c22:	f456                	sd	s5,40(sp)
+     c24:	f05a                	sd	s6,32(sp)
+     c26:	ec5e                	sd	s7,24(sp)
+     c28:	1080                	addi	s0,sp,96
+     c2a:	8baa                	mv	s7,a0
+     c2c:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+     c2e:	892a                	mv	s2,a0
+     c30:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+     c32:	4aa9                	li	s5,10
+     c34:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+     c36:	89a6                	mv	s3,s1
+     c38:	2485                	addiw	s1,s1,1
+     c3a:	0344d863          	bge	s1,s4,c6a <gets+0x56>
+    cc = read(0, &c, 1);
+     c3e:	4605                	li	a2,1
+     c40:	faf40593          	addi	a1,s0,-81
+     c44:	4501                	li	a0,0
+     c46:	00000097          	auipc	ra,0x0
+     c4a:	19a080e7          	jalr	410(ra) # de0 <read>
+    if(cc < 1)
+     c4e:	00a05e63          	blez	a0,c6a <gets+0x56>
+    buf[i++] = c;
+     c52:	faf44783          	lbu	a5,-81(s0)
+     c56:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+     c5a:	01578763          	beq	a5,s5,c68 <gets+0x54>
+     c5e:	0905                	addi	s2,s2,1
+     c60:	fd679be3          	bne	a5,s6,c36 <gets+0x22>
+  for(i=0; i+1 < max; ){
+     c64:	89a6                	mv	s3,s1
+     c66:	a011                	j	c6a <gets+0x56>
+     c68:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+     c6a:	99de                	add	s3,s3,s7
+     c6c:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+     c70:	855e                	mv	a0,s7
+     c72:	60e6                	ld	ra,88(sp)
+     c74:	6446                	ld	s0,80(sp)
+     c76:	64a6                	ld	s1,72(sp)
+     c78:	6906                	ld	s2,64(sp)
+     c7a:	79e2                	ld	s3,56(sp)
+     c7c:	7a42                	ld	s4,48(sp)
+     c7e:	7aa2                	ld	s5,40(sp)
+     c80:	7b02                	ld	s6,32(sp)
+     c82:	6be2                	ld	s7,24(sp)
+     c84:	6125                	addi	sp,sp,96
+     c86:	8082                	ret
+
+0000000000000c88 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+     c88:	1101                	addi	sp,sp,-32
+     c8a:	ec06                	sd	ra,24(sp)
+     c8c:	e822                	sd	s0,16(sp)
+     c8e:	e426                	sd	s1,8(sp)
+     c90:	e04a                	sd	s2,0(sp)
+     c92:	1000                	addi	s0,sp,32
+     c94:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+     c96:	4581                	li	a1,0
+     c98:	00000097          	auipc	ra,0x0
+     c9c:	170080e7          	jalr	368(ra) # e08 <open>
+  if(fd < 0)
+     ca0:	02054563          	bltz	a0,cca <stat+0x42>
+     ca4:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+     ca6:	85ca                	mv	a1,s2
+     ca8:	00000097          	auipc	ra,0x0
+     cac:	178080e7          	jalr	376(ra) # e20 <fstat>
+     cb0:	892a                	mv	s2,a0
+  close(fd);
+     cb2:	8526                	mv	a0,s1
+     cb4:	00000097          	auipc	ra,0x0
+     cb8:	13c080e7          	jalr	316(ra) # df0 <close>
+  return r;
+}
+     cbc:	854a                	mv	a0,s2
+     cbe:	60e2                	ld	ra,24(sp)
+     cc0:	6442                	ld	s0,16(sp)
+     cc2:	64a2                	ld	s1,8(sp)
+     cc4:	6902                	ld	s2,0(sp)
+     cc6:	6105                	addi	sp,sp,32
+     cc8:	8082                	ret
+    return -1;
+     cca:	597d                	li	s2,-1
+     ccc:	bfc5                	j	cbc <stat+0x34>
+
+0000000000000cce <atoi>:
+
+int
+atoi(const char *s)
+{
+     cce:	1141                	addi	sp,sp,-16
+     cd0:	e422                	sd	s0,8(sp)
+     cd2:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+     cd4:	00054683          	lbu	a3,0(a0)
+     cd8:	fd06879b          	addiw	a5,a3,-48
+     cdc:	0ff7f793          	zext.b	a5,a5
+     ce0:	4625                	li	a2,9
+     ce2:	02f66863          	bltu	a2,a5,d12 <atoi+0x44>
+     ce6:	872a                	mv	a4,a0
+  n = 0;
+     ce8:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+     cea:	0705                	addi	a4,a4,1
+     cec:	0025179b          	slliw	a5,a0,0x2
+     cf0:	9fa9                	addw	a5,a5,a0
+     cf2:	0017979b          	slliw	a5,a5,0x1
+     cf6:	9fb5                	addw	a5,a5,a3
+     cf8:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+     cfc:	00074683          	lbu	a3,0(a4)
+     d00:	fd06879b          	addiw	a5,a3,-48
+     d04:	0ff7f793          	zext.b	a5,a5
+     d08:	fef671e3          	bgeu	a2,a5,cea <atoi+0x1c>
+  return n;
+}
+     d0c:	6422                	ld	s0,8(sp)
+     d0e:	0141                	addi	sp,sp,16
+     d10:	8082                	ret
+  n = 0;
+     d12:	4501                	li	a0,0
+     d14:	bfe5                	j	d0c <atoi+0x3e>
+
+0000000000000d16 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+     d16:	1141                	addi	sp,sp,-16
+     d18:	e422                	sd	s0,8(sp)
+     d1a:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+     d1c:	02b57463          	bgeu	a0,a1,d44 <memmove+0x2e>
+    while(n-- > 0)
+     d20:	00c05f63          	blez	a2,d3e <memmove+0x28>
+     d24:	1602                	slli	a2,a2,0x20
+     d26:	9201                	srli	a2,a2,0x20
+     d28:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+     d2c:	872a                	mv	a4,a0
+      *dst++ = *src++;
+     d2e:	0585                	addi	a1,a1,1
+     d30:	0705                	addi	a4,a4,1
+     d32:	fff5c683          	lbu	a3,-1(a1)
+     d36:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+     d3a:	fee79ae3          	bne	a5,a4,d2e <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+     d3e:	6422                	ld	s0,8(sp)
+     d40:	0141                	addi	sp,sp,16
+     d42:	8082                	ret
+    dst += n;
+     d44:	00c50733          	add	a4,a0,a2
+    src += n;
+     d48:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+     d4a:	fec05ae3          	blez	a2,d3e <memmove+0x28>
+     d4e:	fff6079b          	addiw	a5,a2,-1
+     d52:	1782                	slli	a5,a5,0x20
+     d54:	9381                	srli	a5,a5,0x20
+     d56:	fff7c793          	not	a5,a5
+     d5a:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+     d5c:	15fd                	addi	a1,a1,-1
+     d5e:	177d                	addi	a4,a4,-1
+     d60:	0005c683          	lbu	a3,0(a1)
+     d64:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+     d68:	fee79ae3          	bne	a5,a4,d5c <memmove+0x46>
+     d6c:	bfc9                	j	d3e <memmove+0x28>
+
+0000000000000d6e <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+     d6e:	1141                	addi	sp,sp,-16
+     d70:	e422                	sd	s0,8(sp)
+     d72:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+     d74:	ca05                	beqz	a2,da4 <memcmp+0x36>
+     d76:	fff6069b          	addiw	a3,a2,-1
+     d7a:	1682                	slli	a3,a3,0x20
+     d7c:	9281                	srli	a3,a3,0x20
+     d7e:	0685                	addi	a3,a3,1
+     d80:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+     d82:	00054783          	lbu	a5,0(a0)
+     d86:	0005c703          	lbu	a4,0(a1)
+     d8a:	00e79863          	bne	a5,a4,d9a <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+     d8e:	0505                	addi	a0,a0,1
+    p2++;
+     d90:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+     d92:	fed518e3          	bne	a0,a3,d82 <memcmp+0x14>
+  }
+  return 0;
+     d96:	4501                	li	a0,0
+     d98:	a019                	j	d9e <memcmp+0x30>
+      return *p1 - *p2;
+     d9a:	40e7853b          	subw	a0,a5,a4
+}
+     d9e:	6422                	ld	s0,8(sp)
+     da0:	0141                	addi	sp,sp,16
+     da2:	8082                	ret
+  return 0;
+     da4:	4501                	li	a0,0
+     da6:	bfe5                	j	d9e <memcmp+0x30>
+
+0000000000000da8 <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+     da8:	1141                	addi	sp,sp,-16
+     daa:	e406                	sd	ra,8(sp)
+     dac:	e022                	sd	s0,0(sp)
+     dae:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+     db0:	00000097          	auipc	ra,0x0
+     db4:	f66080e7          	jalr	-154(ra) # d16 <memmove>
+}
+     db8:	60a2                	ld	ra,8(sp)
+     dba:	6402                	ld	s0,0(sp)
+     dbc:	0141                	addi	sp,sp,16
+     dbe:	8082                	ret
+
+0000000000000dc0 <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+     dc0:	4885                	li	a7,1
+ ecall
+     dc2:	00000073          	ecall
+ ret
+     dc6:	8082                	ret
+
+0000000000000dc8 <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+     dc8:	4889                	li	a7,2
+ ecall
+     dca:	00000073          	ecall
+ ret
+     dce:	8082                	ret
+
+0000000000000dd0 <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+     dd0:	488d                	li	a7,3
+ ecall
+     dd2:	00000073          	ecall
+ ret
+     dd6:	8082                	ret
+
+0000000000000dd8 <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+     dd8:	4891                	li	a7,4
+ ecall
+     dda:	00000073          	ecall
+ ret
+     dde:	8082                	ret
+
+0000000000000de0 <read>:
+.global read
+read:
+ li a7, SYS_read
+     de0:	4895                	li	a7,5
+ ecall
+     de2:	00000073          	ecall
+ ret
+     de6:	8082                	ret
+
+0000000000000de8 <write>:
+.global write
+write:
+ li a7, SYS_write
+     de8:	48c1                	li	a7,16
+ ecall
+     dea:	00000073          	ecall
+ ret
+     dee:	8082                	ret
+
+0000000000000df0 <close>:
+.global close
+close:
+ li a7, SYS_close
+     df0:	48d5                	li	a7,21
+ ecall
+     df2:	00000073          	ecall
+ ret
+     df6:	8082                	ret
+
+0000000000000df8 <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+     df8:	4899                	li	a7,6
+ ecall
+     dfa:	00000073          	ecall
+ ret
+     dfe:	8082                	ret
+
+0000000000000e00 <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+     e00:	489d                	li	a7,7
+ ecall
+     e02:	00000073          	ecall
+ ret
+     e06:	8082                	ret
+
+0000000000000e08 <open>:
+.global open
+open:
+ li a7, SYS_open
+     e08:	48bd                	li	a7,15
+ ecall
+     e0a:	00000073          	ecall
+ ret
+     e0e:	8082                	ret
+
+0000000000000e10 <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+     e10:	48c5                	li	a7,17
+ ecall
+     e12:	00000073          	ecall
+ ret
+     e16:	8082                	ret
+
+0000000000000e18 <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+     e18:	48c9                	li	a7,18
+ ecall
+     e1a:	00000073          	ecall
+ ret
+     e1e:	8082                	ret
+
+0000000000000e20 <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+     e20:	48a1                	li	a7,8
+ ecall
+     e22:	00000073          	ecall
+ ret
+     e26:	8082                	ret
+
+0000000000000e28 <link>:
+.global link
+link:
+ li a7, SYS_link
+     e28:	48cd                	li	a7,19
+ ecall
+     e2a:	00000073          	ecall
+ ret
+     e2e:	8082                	ret
+
+0000000000000e30 <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+     e30:	48d1                	li	a7,20
+ ecall
+     e32:	00000073          	ecall
+ ret
+     e36:	8082                	ret
+
+0000000000000e38 <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+     e38:	48a5                	li	a7,9
+ ecall
+     e3a:	00000073          	ecall
+ ret
+     e3e:	8082                	ret
+
+0000000000000e40 <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+     e40:	48a9                	li	a7,10
+ ecall
+     e42:	00000073          	ecall
+ ret
+     e46:	8082                	ret
+
+0000000000000e48 <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+     e48:	48ad                	li	a7,11
+ ecall
+     e4a:	00000073          	ecall
+ ret
+     e4e:	8082                	ret
+
+0000000000000e50 <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+     e50:	48b1                	li	a7,12
+ ecall
+     e52:	00000073          	ecall
+ ret
+     e56:	8082                	ret
+
+0000000000000e58 <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+     e58:	48b5                	li	a7,13
+ ecall
+     e5a:	00000073          	ecall
+ ret
+     e5e:	8082                	ret
+
+0000000000000e60 <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+     e60:	48b9                	li	a7,14
+ ecall
+     e62:	00000073          	ecall
+ ret
+     e66:	8082                	ret
+
+0000000000000e68 <setp>:
+.global setp
+setp:
+ li a7, SYS_setp
+     e68:	48d9                	li	a7,22
+ ecall
+     e6a:	00000073          	ecall
+ ret
+     e6e:	8082                	ret
+
+0000000000000e70 <semget>:
+.global semget
+semget:
+ li a7, SYS_semget
+     e70:	48dd                	li	a7,23
+ ecall
+     e72:	00000073          	ecall
+ ret
+     e76:	8082                	ret
+
+0000000000000e78 <semdown>:
+.global semdown
+semdown:
+ li a7, SYS_semdown
+     e78:	48e1                	li	a7,24
+ ecall
+     e7a:	00000073          	ecall
+ ret
+     e7e:	8082                	ret
+
+0000000000000e80 <semup>:
+.global semup
+semup:
+ li a7, SYS_semup
+     e80:	48e5                	li	a7,25
+ ecall
+     e82:	00000073          	ecall
+ ret
+     e86:	8082                	ret
+
+0000000000000e88 <semclose>:
+.global semclose
+semclose:
+ li a7, SYS_semclose
+     e88:	48e9                	li	a7,26
+ ecall
+     e8a:	00000073          	ecall
+ ret
+     e8e:	8082                	ret
+
+0000000000000e90 <timeout>:
+.global timeout
+timeout:
+ li a7, SYS_timeout
+     e90:	48ed                	li	a7,27
+ ecall
+     e92:	00000073          	ecall
+ ret
+     e96:	8082                	ret
+
+0000000000000e98 <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+     e98:	1101                	addi	sp,sp,-32
+     e9a:	ec06                	sd	ra,24(sp)
+     e9c:	e822                	sd	s0,16(sp)
+     e9e:	1000                	addi	s0,sp,32
+     ea0:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+     ea4:	4605                	li	a2,1
+     ea6:	fef40593          	addi	a1,s0,-17
+     eaa:	00000097          	auipc	ra,0x0
+     eae:	f3e080e7          	jalr	-194(ra) # de8 <write>
+}
+     eb2:	60e2                	ld	ra,24(sp)
+     eb4:	6442                	ld	s0,16(sp)
+     eb6:	6105                	addi	sp,sp,32
+     eb8:	8082                	ret
+
+0000000000000eba <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+     eba:	7139                	addi	sp,sp,-64
+     ebc:	fc06                	sd	ra,56(sp)
+     ebe:	f822                	sd	s0,48(sp)
+     ec0:	f426                	sd	s1,40(sp)
+     ec2:	f04a                	sd	s2,32(sp)
+     ec4:	ec4e                	sd	s3,24(sp)
+     ec6:	0080                	addi	s0,sp,64
+     ec8:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+     eca:	c299                	beqz	a3,ed0 <printint+0x16>
+     ecc:	0805c963          	bltz	a1,f5e <printint+0xa4>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+     ed0:	2581                	sext.w	a1,a1
+  neg = 0;
+     ed2:	4881                	li	a7,0
+     ed4:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+     ed8:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+     eda:	2601                	sext.w	a2,a2
+     edc:	00000517          	auipc	a0,0x0
+     ee0:	5d450513          	addi	a0,a0,1492 # 14b0 <digits>
+     ee4:	883a                	mv	a6,a4
+     ee6:	2705                	addiw	a4,a4,1
+     ee8:	02c5f7bb          	remuw	a5,a1,a2
+     eec:	1782                	slli	a5,a5,0x20
+     eee:	9381                	srli	a5,a5,0x20
+     ef0:	97aa                	add	a5,a5,a0
+     ef2:	0007c783          	lbu	a5,0(a5)
+     ef6:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+     efa:	0005879b          	sext.w	a5,a1
+     efe:	02c5d5bb          	divuw	a1,a1,a2
+     f02:	0685                	addi	a3,a3,1
+     f04:	fec7f0e3          	bgeu	a5,a2,ee4 <printint+0x2a>
+  if(neg)
+     f08:	00088c63          	beqz	a7,f20 <printint+0x66>
+    buf[i++] = '-';
+     f0c:	fd070793          	addi	a5,a4,-48
+     f10:	00878733          	add	a4,a5,s0
+     f14:	02d00793          	li	a5,45
+     f18:	fef70823          	sb	a5,-16(a4)
+     f1c:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+     f20:	02e05863          	blez	a4,f50 <printint+0x96>
+     f24:	fc040793          	addi	a5,s0,-64
+     f28:	00e78933          	add	s2,a5,a4
+     f2c:	fff78993          	addi	s3,a5,-1
+     f30:	99ba                	add	s3,s3,a4
+     f32:	377d                	addiw	a4,a4,-1
+     f34:	1702                	slli	a4,a4,0x20
+     f36:	9301                	srli	a4,a4,0x20
+     f38:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+     f3c:	fff94583          	lbu	a1,-1(s2)
+     f40:	8526                	mv	a0,s1
+     f42:	00000097          	auipc	ra,0x0
+     f46:	f56080e7          	jalr	-170(ra) # e98 <putc>
+  while(--i >= 0)
+     f4a:	197d                	addi	s2,s2,-1
+     f4c:	ff3918e3          	bne	s2,s3,f3c <printint+0x82>
+}
+     f50:	70e2                	ld	ra,56(sp)
+     f52:	7442                	ld	s0,48(sp)
+     f54:	74a2                	ld	s1,40(sp)
+     f56:	7902                	ld	s2,32(sp)
+     f58:	69e2                	ld	s3,24(sp)
+     f5a:	6121                	addi	sp,sp,64
+     f5c:	8082                	ret
+    x = -xx;
+     f5e:	40b005bb          	negw	a1,a1
+    neg = 1;
+     f62:	4885                	li	a7,1
+    x = -xx;
+     f64:	bf85                	j	ed4 <printint+0x1a>
+
+0000000000000f66 <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+     f66:	7119                	addi	sp,sp,-128
+     f68:	fc86                	sd	ra,120(sp)
+     f6a:	f8a2                	sd	s0,112(sp)
+     f6c:	f4a6                	sd	s1,104(sp)
+     f6e:	f0ca                	sd	s2,96(sp)
+     f70:	ecce                	sd	s3,88(sp)
+     f72:	e8d2                	sd	s4,80(sp)
+     f74:	e4d6                	sd	s5,72(sp)
+     f76:	e0da                	sd	s6,64(sp)
+     f78:	fc5e                	sd	s7,56(sp)
+     f7a:	f862                	sd	s8,48(sp)
+     f7c:	f466                	sd	s9,40(sp)
+     f7e:	f06a                	sd	s10,32(sp)
+     f80:	ec6e                	sd	s11,24(sp)
+     f82:	0100                	addi	s0,sp,128
+  char *s;
+  int c, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+     f84:	0005c903          	lbu	s2,0(a1)
+     f88:	18090f63          	beqz	s2,1126 <vprintf+0x1c0>
+     f8c:	8aaa                	mv	s5,a0
+     f8e:	8b32                	mv	s6,a2
+     f90:	00158493          	addi	s1,a1,1
+  state = 0;
+     f94:	4981                	li	s3,0
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+     f96:	02500a13          	li	s4,37
+     f9a:	4c55                	li	s8,21
+     f9c:	00000c97          	auipc	s9,0x0
+     fa0:	4bcc8c93          	addi	s9,s9,1212 # 1458 <malloc+0x22e>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c == 's'){
+        s = va_arg(ap, char*);
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+     fa4:	02800d93          	li	s11,40
+  putc(fd, 'x');
+     fa8:	4d41                	li	s10,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+     faa:	00000b97          	auipc	s7,0x0
+     fae:	506b8b93          	addi	s7,s7,1286 # 14b0 <digits>
+     fb2:	a839                	j	fd0 <vprintf+0x6a>
+        putc(fd, c);
+     fb4:	85ca                	mv	a1,s2
+     fb6:	8556                	mv	a0,s5
+     fb8:	00000097          	auipc	ra,0x0
+     fbc:	ee0080e7          	jalr	-288(ra) # e98 <putc>
+     fc0:	a019                	j	fc6 <vprintf+0x60>
+    } else if(state == '%'){
+     fc2:	01498d63          	beq	s3,s4,fdc <vprintf+0x76>
+  for(i = 0; fmt[i]; i++){
+     fc6:	0485                	addi	s1,s1,1
+     fc8:	fff4c903          	lbu	s2,-1(s1)
+     fcc:	14090d63          	beqz	s2,1126 <vprintf+0x1c0>
+    if(state == 0){
+     fd0:	fe0999e3          	bnez	s3,fc2 <vprintf+0x5c>
+      if(c == '%'){
+     fd4:	ff4910e3          	bne	s2,s4,fb4 <vprintf+0x4e>
+        state = '%';
+     fd8:	89d2                	mv	s3,s4
+     fda:	b7f5                	j	fc6 <vprintf+0x60>
+      if(c == 'd'){
+     fdc:	11490c63          	beq	s2,s4,10f4 <vprintf+0x18e>
+     fe0:	f9d9079b          	addiw	a5,s2,-99
+     fe4:	0ff7f793          	zext.b	a5,a5
+     fe8:	10fc6e63          	bltu	s8,a5,1104 <vprintf+0x19e>
+     fec:	f9d9079b          	addiw	a5,s2,-99
+     ff0:	0ff7f713          	zext.b	a4,a5
+     ff4:	10ec6863          	bltu	s8,a4,1104 <vprintf+0x19e>
+     ff8:	00271793          	slli	a5,a4,0x2
+     ffc:	97e6                	add	a5,a5,s9
+     ffe:	439c                	lw	a5,0(a5)
+    1000:	97e6                	add	a5,a5,s9
+    1002:	8782                	jr	a5
+        printint(fd, va_arg(ap, int), 10, 1);
+    1004:	008b0913          	addi	s2,s6,8
+    1008:	4685                	li	a3,1
+    100a:	4629                	li	a2,10
+    100c:	000b2583          	lw	a1,0(s6)
+    1010:	8556                	mv	a0,s5
+    1012:	00000097          	auipc	ra,0x0
+    1016:	ea8080e7          	jalr	-344(ra) # eba <printint>
+    101a:	8b4a                	mv	s6,s2
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+    101c:	4981                	li	s3,0
+    101e:	b765                	j	fc6 <vprintf+0x60>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+    1020:	008b0913          	addi	s2,s6,8
+    1024:	4681                	li	a3,0
+    1026:	4629                	li	a2,10
+    1028:	000b2583          	lw	a1,0(s6)
+    102c:	8556                	mv	a0,s5
+    102e:	00000097          	auipc	ra,0x0
+    1032:	e8c080e7          	jalr	-372(ra) # eba <printint>
+    1036:	8b4a                	mv	s6,s2
+      state = 0;
+    1038:	4981                	li	s3,0
+    103a:	b771                	j	fc6 <vprintf+0x60>
+        printint(fd, va_arg(ap, int), 16, 0);
+    103c:	008b0913          	addi	s2,s6,8
+    1040:	4681                	li	a3,0
+    1042:	866a                	mv	a2,s10
+    1044:	000b2583          	lw	a1,0(s6)
+    1048:	8556                	mv	a0,s5
+    104a:	00000097          	auipc	ra,0x0
+    104e:	e70080e7          	jalr	-400(ra) # eba <printint>
+    1052:	8b4a                	mv	s6,s2
+      state = 0;
+    1054:	4981                	li	s3,0
+    1056:	bf85                	j	fc6 <vprintf+0x60>
+        printptr(fd, va_arg(ap, uint64));
+    1058:	008b0793          	addi	a5,s6,8
+    105c:	f8f43423          	sd	a5,-120(s0)
+    1060:	000b3983          	ld	s3,0(s6)
+  putc(fd, '0');
+    1064:	03000593          	li	a1,48
+    1068:	8556                	mv	a0,s5
+    106a:	00000097          	auipc	ra,0x0
+    106e:	e2e080e7          	jalr	-466(ra) # e98 <putc>
+  putc(fd, 'x');
+    1072:	07800593          	li	a1,120
+    1076:	8556                	mv	a0,s5
+    1078:	00000097          	auipc	ra,0x0
+    107c:	e20080e7          	jalr	-480(ra) # e98 <putc>
+    1080:	896a                	mv	s2,s10
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+    1082:	03c9d793          	srli	a5,s3,0x3c
+    1086:	97de                	add	a5,a5,s7
+    1088:	0007c583          	lbu	a1,0(a5)
+    108c:	8556                	mv	a0,s5
+    108e:	00000097          	auipc	ra,0x0
+    1092:	e0a080e7          	jalr	-502(ra) # e98 <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+    1096:	0992                	slli	s3,s3,0x4
+    1098:	397d                	addiw	s2,s2,-1
+    109a:	fe0914e3          	bnez	s2,1082 <vprintf+0x11c>
+        printptr(fd, va_arg(ap, uint64));
+    109e:	f8843b03          	ld	s6,-120(s0)
+      state = 0;
+    10a2:	4981                	li	s3,0
+    10a4:	b70d                	j	fc6 <vprintf+0x60>
+        s = va_arg(ap, char*);
+    10a6:	008b0913          	addi	s2,s6,8
+    10aa:	000b3983          	ld	s3,0(s6)
+        if(s == 0)
+    10ae:	02098163          	beqz	s3,10d0 <vprintf+0x16a>
+        while(*s != 0){
+    10b2:	0009c583          	lbu	a1,0(s3)
+    10b6:	c5ad                	beqz	a1,1120 <vprintf+0x1ba>
+          putc(fd, *s);
+    10b8:	8556                	mv	a0,s5
+    10ba:	00000097          	auipc	ra,0x0
+    10be:	dde080e7          	jalr	-546(ra) # e98 <putc>
+          s++;
+    10c2:	0985                	addi	s3,s3,1
+        while(*s != 0){
+    10c4:	0009c583          	lbu	a1,0(s3)
+    10c8:	f9e5                	bnez	a1,10b8 <vprintf+0x152>
+        s = va_arg(ap, char*);
+    10ca:	8b4a                	mv	s6,s2
+      state = 0;
+    10cc:	4981                	li	s3,0
+    10ce:	bde5                	j	fc6 <vprintf+0x60>
+          s = "(null)";
+    10d0:	00000997          	auipc	s3,0x0
+    10d4:	38098993          	addi	s3,s3,896 # 1450 <malloc+0x226>
+        while(*s != 0){
+    10d8:	85ee                	mv	a1,s11
+    10da:	bff9                	j	10b8 <vprintf+0x152>
+        putc(fd, va_arg(ap, uint));
+    10dc:	008b0913          	addi	s2,s6,8
+    10e0:	000b4583          	lbu	a1,0(s6)
+    10e4:	8556                	mv	a0,s5
+    10e6:	00000097          	auipc	ra,0x0
+    10ea:	db2080e7          	jalr	-590(ra) # e98 <putc>
+    10ee:	8b4a                	mv	s6,s2
+      state = 0;
+    10f0:	4981                	li	s3,0
+    10f2:	bdd1                	j	fc6 <vprintf+0x60>
+        putc(fd, c);
+    10f4:	85d2                	mv	a1,s4
+    10f6:	8556                	mv	a0,s5
+    10f8:	00000097          	auipc	ra,0x0
+    10fc:	da0080e7          	jalr	-608(ra) # e98 <putc>
+      state = 0;
+    1100:	4981                	li	s3,0
+    1102:	b5d1                	j	fc6 <vprintf+0x60>
+        putc(fd, '%');
+    1104:	85d2                	mv	a1,s4
+    1106:	8556                	mv	a0,s5
+    1108:	00000097          	auipc	ra,0x0
+    110c:	d90080e7          	jalr	-624(ra) # e98 <putc>
+        putc(fd, c);
+    1110:	85ca                	mv	a1,s2
+    1112:	8556                	mv	a0,s5
+    1114:	00000097          	auipc	ra,0x0
+    1118:	d84080e7          	jalr	-636(ra) # e98 <putc>
+      state = 0;
+    111c:	4981                	li	s3,0
+    111e:	b565                	j	fc6 <vprintf+0x60>
+        s = va_arg(ap, char*);
+    1120:	8b4a                	mv	s6,s2
+      state = 0;
+    1122:	4981                	li	s3,0
+    1124:	b54d                	j	fc6 <vprintf+0x60>
+    }
+  }
+}
+    1126:	70e6                	ld	ra,120(sp)
+    1128:	7446                	ld	s0,112(sp)
+    112a:	74a6                	ld	s1,104(sp)
+    112c:	7906                	ld	s2,96(sp)
+    112e:	69e6                	ld	s3,88(sp)
+    1130:	6a46                	ld	s4,80(sp)
+    1132:	6aa6                	ld	s5,72(sp)
+    1134:	6b06                	ld	s6,64(sp)
+    1136:	7be2                	ld	s7,56(sp)
+    1138:	7c42                	ld	s8,48(sp)
+    113a:	7ca2                	ld	s9,40(sp)
+    113c:	7d02                	ld	s10,32(sp)
+    113e:	6de2                	ld	s11,24(sp)
+    1140:	6109                	addi	sp,sp,128
+    1142:	8082                	ret
+
+0000000000001144 <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+    1144:	715d                	addi	sp,sp,-80
+    1146:	ec06                	sd	ra,24(sp)
+    1148:	e822                	sd	s0,16(sp)
+    114a:	1000                	addi	s0,sp,32
+    114c:	e010                	sd	a2,0(s0)
+    114e:	e414                	sd	a3,8(s0)
+    1150:	e818                	sd	a4,16(s0)
+    1152:	ec1c                	sd	a5,24(s0)
+    1154:	03043023          	sd	a6,32(s0)
+    1158:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+    115c:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+    1160:	8622                	mv	a2,s0
+    1162:	00000097          	auipc	ra,0x0
+    1166:	e04080e7          	jalr	-508(ra) # f66 <vprintf>
+}
+    116a:	60e2                	ld	ra,24(sp)
+    116c:	6442                	ld	s0,16(sp)
+    116e:	6161                	addi	sp,sp,80
+    1170:	8082                	ret
+
+0000000000001172 <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+    1172:	711d                	addi	sp,sp,-96
+    1174:	ec06                	sd	ra,24(sp)
+    1176:	e822                	sd	s0,16(sp)
+    1178:	1000                	addi	s0,sp,32
+    117a:	e40c                	sd	a1,8(s0)
+    117c:	e810                	sd	a2,16(s0)
+    117e:	ec14                	sd	a3,24(s0)
+    1180:	f018                	sd	a4,32(s0)
+    1182:	f41c                	sd	a5,40(s0)
+    1184:	03043823          	sd	a6,48(s0)
+    1188:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+    118c:	00840613          	addi	a2,s0,8
+    1190:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+    1194:	85aa                	mv	a1,a0
+    1196:	4505                	li	a0,1
+    1198:	00000097          	auipc	ra,0x0
+    119c:	dce080e7          	jalr	-562(ra) # f66 <vprintf>
+}
+    11a0:	60e2                	ld	ra,24(sp)
+    11a2:	6442                	ld	s0,16(sp)
+    11a4:	6125                	addi	sp,sp,96
+    11a6:	8082                	ret
+
+00000000000011a8 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+    11a8:	1141                	addi	sp,sp,-16
+    11aa:	e422                	sd	s0,8(sp)
+    11ac:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+    11ae:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    11b2:	00000797          	auipc	a5,0x0
+    11b6:	3267b783          	ld	a5,806(a5) # 14d8 <freep>
+    11ba:	a02d                	j	11e4 <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+    11bc:	4618                	lw	a4,8(a2)
+    11be:	9f2d                	addw	a4,a4,a1
+    11c0:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+    11c4:	6398                	ld	a4,0(a5)
+    11c6:	6310                	ld	a2,0(a4)
+    11c8:	a83d                	j	1206 <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+    11ca:	ff852703          	lw	a4,-8(a0)
+    11ce:	9f31                	addw	a4,a4,a2
+    11d0:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+    11d2:	ff053683          	ld	a3,-16(a0)
+    11d6:	a091                	j	121a <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    11d8:	6398                	ld	a4,0(a5)
+    11da:	00e7e463          	bltu	a5,a4,11e2 <free+0x3a>
+    11de:	00e6ea63          	bltu	a3,a4,11f2 <free+0x4a>
+{
+    11e2:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    11e4:	fed7fae3          	bgeu	a5,a3,11d8 <free+0x30>
+    11e8:	6398                	ld	a4,0(a5)
+    11ea:	00e6e463          	bltu	a3,a4,11f2 <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    11ee:	fee7eae3          	bltu	a5,a4,11e2 <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+    11f2:	ff852583          	lw	a1,-8(a0)
+    11f6:	6390                	ld	a2,0(a5)
+    11f8:	02059813          	slli	a6,a1,0x20
+    11fc:	01c85713          	srli	a4,a6,0x1c
+    1200:	9736                	add	a4,a4,a3
+    1202:	fae60de3          	beq	a2,a4,11bc <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+    1206:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+    120a:	4790                	lw	a2,8(a5)
+    120c:	02061593          	slli	a1,a2,0x20
+    1210:	01c5d713          	srli	a4,a1,0x1c
+    1214:	973e                	add	a4,a4,a5
+    1216:	fae68ae3          	beq	a3,a4,11ca <free+0x22>
+    p->s.ptr = bp->s.ptr;
+    121a:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+    121c:	00000717          	auipc	a4,0x0
+    1220:	2af73e23          	sd	a5,700(a4) # 14d8 <freep>
+}
+    1224:	6422                	ld	s0,8(sp)
+    1226:	0141                	addi	sp,sp,16
+    1228:	8082                	ret
+
+000000000000122a <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+    122a:	7139                	addi	sp,sp,-64
+    122c:	fc06                	sd	ra,56(sp)
+    122e:	f822                	sd	s0,48(sp)
+    1230:	f426                	sd	s1,40(sp)
+    1232:	f04a                	sd	s2,32(sp)
+    1234:	ec4e                	sd	s3,24(sp)
+    1236:	e852                	sd	s4,16(sp)
+    1238:	e456                	sd	s5,8(sp)
+    123a:	e05a                	sd	s6,0(sp)
+    123c:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    123e:	02051493          	slli	s1,a0,0x20
+    1242:	9081                	srli	s1,s1,0x20
+    1244:	04bd                	addi	s1,s1,15
+    1246:	8091                	srli	s1,s1,0x4
+    1248:	0014899b          	addiw	s3,s1,1
+    124c:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+    124e:	00000517          	auipc	a0,0x0
+    1252:	28a53503          	ld	a0,650(a0) # 14d8 <freep>
+    1256:	c515                	beqz	a0,1282 <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    1258:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+    125a:	4798                	lw	a4,8(a5)
+    125c:	02977f63          	bgeu	a4,s1,129a <malloc+0x70>
+    1260:	8a4e                	mv	s4,s3
+    1262:	0009871b          	sext.w	a4,s3
+    1266:	6685                	lui	a3,0x1
+    1268:	00d77363          	bgeu	a4,a3,126e <malloc+0x44>
+    126c:	6a05                	lui	s4,0x1
+    126e:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+    1272:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+    1276:	00000917          	auipc	s2,0x0
+    127a:	26290913          	addi	s2,s2,610 # 14d8 <freep>
+  if(p == (char*)-1)
+    127e:	5afd                	li	s5,-1
+    1280:	a895                	j	12f4 <malloc+0xca>
+    base.s.ptr = freep = prevp = &base;
+    1282:	00000797          	auipc	a5,0x0
+    1286:	2c678793          	addi	a5,a5,710 # 1548 <base>
+    128a:	00000717          	auipc	a4,0x0
+    128e:	24f73723          	sd	a5,590(a4) # 14d8 <freep>
+    1292:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+    1294:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+    1298:	b7e1                	j	1260 <malloc+0x36>
+      if(p->s.size == nunits)
+    129a:	02e48c63          	beq	s1,a4,12d2 <malloc+0xa8>
+        p->s.size -= nunits;
+    129e:	4137073b          	subw	a4,a4,s3
+    12a2:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+    12a4:	02071693          	slli	a3,a4,0x20
+    12a8:	01c6d713          	srli	a4,a3,0x1c
+    12ac:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+    12ae:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+    12b2:	00000717          	auipc	a4,0x0
+    12b6:	22a73323          	sd	a0,550(a4) # 14d8 <freep>
+      return (void*)(p + 1);
+    12ba:	01078513          	addi	a0,a5,16
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+    12be:	70e2                	ld	ra,56(sp)
+    12c0:	7442                	ld	s0,48(sp)
+    12c2:	74a2                	ld	s1,40(sp)
+    12c4:	7902                	ld	s2,32(sp)
+    12c6:	69e2                	ld	s3,24(sp)
+    12c8:	6a42                	ld	s4,16(sp)
+    12ca:	6aa2                	ld	s5,8(sp)
+    12cc:	6b02                	ld	s6,0(sp)
+    12ce:	6121                	addi	sp,sp,64
+    12d0:	8082                	ret
+        prevp->s.ptr = p->s.ptr;
+    12d2:	6398                	ld	a4,0(a5)
+    12d4:	e118                	sd	a4,0(a0)
+    12d6:	bff1                	j	12b2 <malloc+0x88>
+  hp->s.size = nu;
+    12d8:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+    12dc:	0541                	addi	a0,a0,16
+    12de:	00000097          	auipc	ra,0x0
+    12e2:	eca080e7          	jalr	-310(ra) # 11a8 <free>
+  return freep;
+    12e6:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+    12ea:	d971                	beqz	a0,12be <malloc+0x94>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    12ec:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+    12ee:	4798                	lw	a4,8(a5)
+    12f0:	fa9775e3          	bgeu	a4,s1,129a <malloc+0x70>
+    if(p == freep)
+    12f4:	00093703          	ld	a4,0(s2)
+    12f8:	853e                	mv	a0,a5
+    12fa:	fef719e3          	bne	a4,a5,12ec <malloc+0xc2>
+  p = sbrk(nu * sizeof(Header));
+    12fe:	8552                	mv	a0,s4
+    1300:	00000097          	auipc	ra,0x0
+    1304:	b50080e7          	jalr	-1200(ra) # e50 <sbrk>
+  if(p == (char*)-1)
+    1308:	fd5518e3          	bne	a0,s5,12d8 <malloc+0xae>
+        return 0;
+    130c:	4501                	li	a0,0
+    130e:	bf45                	j	12be <malloc+0x94>
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/sh.d os-workshop/user/sh.d
--- xv6-riscv/user/sh.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/sh.d	2022-05-28 22:34:35.000000000 -0300
@@ -0,0 +1 @@
+user/sh.o: user/sh.c kernel/types.h user/user.h kernel/fcntl.h
Binary files xv6-riscv/user/sh.o and os-workshop/user/sh.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/sh.sym os-workshop/user/sh.sym
--- xv6-riscv/user/sh.sym	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/sh.sym	2022-05-28 22:34:35.000000000 -0300
@@ -0,0 +1,98 @@
+0000000000000000 .text
+0000000000001310 .rodata
+00000000000014c8 .sdata
+00000000000014d8 .sbss
+00000000000014e0 .bss
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_aranges
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_line
+0000000000000000 .debug_frame
+0000000000000000 .debug_str
+0000000000000000 .debug_line_str
+0000000000000000 .debug_loclists
+0000000000000000 .debug_rnglists
+0000000000000000 sh.c
+00000000000014e0 buf.0
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+0000000000000e98 putc
+0000000000000eba printint
+00000000000014b0 digits
+0000000000000000 umalloc.c
+00000000000014d8 freep
+0000000000001548 base
+0000000000000b5c strcpy
+0000000000001172 printf
+0000000000001cc1 __global_pointer$
+0000000000000d16 memmove
+0000000000000e10 mknod
+0000000000000276 execcmd
+0000000000000e78 semdown
+0000000000000c14 gets
+00000000000014c8 __SDATA_BEGIN__
+0000000000000e70 semget
+0000000000000e48 getpid
+000000000000078e parsepipe
+00000000000009e0 parsecmd
+0000000000000da8 memcpy
+00000000000003a0 backcmd
+000000000000051e peek
+000000000000058a parseredirs
+00000000000003dc gettoken
+000000000000122a malloc
+0000000000000e88 semclose
+0000000000000e58 sleep
+00000000000014d0 whitespace
+000000000000007a fork1
+0000000000000948 nulterminate
+0000000000000dd8 pipe
+0000000000000000 getcmd
+0000000000000de8 write
+0000000000000e20 fstat
+0000000000001144 fprintf
+0000000000000df8 kill
+0000000000000f66 vprintf
+0000000000000e38 chdir
+00000000000007fc parseline
+00000000000000a8 runcmd
+00000000000008a4 parseblock
+0000000000000e00 exec
+0000000000000dd0 wait
+00000000000014c8 symbols
+0000000000000de0 read
+0000000000000686 parseexec
+0000000000000e18 unlink
+0000000000000054 panic
+0000000000000d6e memcmp
+0000000000000dc0 fork
+0000000000001558 __BSS_END__
+0000000000000e50 sbrk
+0000000000000e60 uptime
+00000000000014d6 __bss_start
+0000000000000bce memset
+0000000000000a68 main
+0000000000000e90 timeout
+0000000000000b78 strcmp
+0000000000000e40 dup
+0000000000000314 pipecmd
+00000000000002ac redircmd
+00000000000014c1 __DATA_BEGIN__
+0000000000000c88 stat
+00000000000014d6 _edata
+0000000000000e68 setp
+0000000000001558 _end
+0000000000000e28 link
+0000000000000dc8 exit
+0000000000000cce atoi
+0000000000000ba4 strlen
+0000000000000e08 open
+0000000000000e80 semup
+0000000000000bf0 strchr
+0000000000000e30 mkdir
+0000000000000df0 close
+000000000000035a listcmd
+00000000000011a8 free
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/stressfs.asm os-workshop/user/stressfs.asm
--- xv6-riscv/user/stressfs.asm	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/stressfs.asm	2022-05-28 22:34:35.000000000 -0300
@@ -0,0 +1,1445 @@
+
+user/_stressfs:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <main>:
+#include "kernel/fs.h"
+#include "kernel/fcntl.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	dd010113          	addi	sp,sp,-560
+   4:	22113423          	sd	ra,552(sp)
+   8:	22813023          	sd	s0,544(sp)
+   c:	20913c23          	sd	s1,536(sp)
+  10:	21213823          	sd	s2,528(sp)
+  14:	1c00                	addi	s0,sp,560
+  int fd, i;
+  char path[] = "stressfs0";
+  16:	00001797          	auipc	a5,0x1
+  1a:	8da78793          	addi	a5,a5,-1830 # 8f0 <malloc+0x116>
+  1e:	6398                	ld	a4,0(a5)
+  20:	fce43823          	sd	a4,-48(s0)
+  24:	0087d783          	lhu	a5,8(a5)
+  28:	fcf41c23          	sh	a5,-40(s0)
+  char data[512];
+
+  printf("stressfs starting\n");
+  2c:	00001517          	auipc	a0,0x1
+  30:	89450513          	addi	a0,a0,-1900 # 8c0 <malloc+0xe6>
+  34:	00000097          	auipc	ra,0x0
+  38:	6ee080e7          	jalr	1774(ra) # 722 <printf>
+  memset(data, 'a', sizeof(data));
+  3c:	20000613          	li	a2,512
+  40:	06100593          	li	a1,97
+  44:	dd040513          	addi	a0,s0,-560
+  48:	00000097          	auipc	ra,0x0
+  4c:	136080e7          	jalr	310(ra) # 17e <memset>
+
+  for(i = 0; i < 4; i++)
+  50:	4481                	li	s1,0
+  52:	4911                	li	s2,4
+    if(fork() > 0)
+  54:	00000097          	auipc	ra,0x0
+  58:	31c080e7          	jalr	796(ra) # 370 <fork>
+  5c:	00a04563          	bgtz	a0,66 <main+0x66>
+  for(i = 0; i < 4; i++)
+  60:	2485                	addiw	s1,s1,1
+  62:	ff2499e3          	bne	s1,s2,54 <main+0x54>
+      break;
+
+  printf("write %d\n", i);
+  66:	85a6                	mv	a1,s1
+  68:	00001517          	auipc	a0,0x1
+  6c:	87050513          	addi	a0,a0,-1936 # 8d8 <malloc+0xfe>
+  70:	00000097          	auipc	ra,0x0
+  74:	6b2080e7          	jalr	1714(ra) # 722 <printf>
+
+  path[8] += i;
+  78:	fd844783          	lbu	a5,-40(s0)
+  7c:	9fa5                	addw	a5,a5,s1
+  7e:	fcf40c23          	sb	a5,-40(s0)
+  fd = open(path, O_CREATE | O_RDWR);
+  82:	20200593          	li	a1,514
+  86:	fd040513          	addi	a0,s0,-48
+  8a:	00000097          	auipc	ra,0x0
+  8e:	32e080e7          	jalr	814(ra) # 3b8 <open>
+  92:	892a                	mv	s2,a0
+  94:	44d1                	li	s1,20
+  for(i = 0; i < 20; i++)
+//    printf(fd, "%d\n", i);
+    write(fd, data, sizeof(data));
+  96:	20000613          	li	a2,512
+  9a:	dd040593          	addi	a1,s0,-560
+  9e:	854a                	mv	a0,s2
+  a0:	00000097          	auipc	ra,0x0
+  a4:	2f8080e7          	jalr	760(ra) # 398 <write>
+  for(i = 0; i < 20; i++)
+  a8:	34fd                	addiw	s1,s1,-1
+  aa:	f4f5                	bnez	s1,96 <main+0x96>
+  close(fd);
+  ac:	854a                	mv	a0,s2
+  ae:	00000097          	auipc	ra,0x0
+  b2:	2f2080e7          	jalr	754(ra) # 3a0 <close>
+
+  printf("read\n");
+  b6:	00001517          	auipc	a0,0x1
+  ba:	83250513          	addi	a0,a0,-1998 # 8e8 <malloc+0x10e>
+  be:	00000097          	auipc	ra,0x0
+  c2:	664080e7          	jalr	1636(ra) # 722 <printf>
+
+  fd = open(path, O_RDONLY);
+  c6:	4581                	li	a1,0
+  c8:	fd040513          	addi	a0,s0,-48
+  cc:	00000097          	auipc	ra,0x0
+  d0:	2ec080e7          	jalr	748(ra) # 3b8 <open>
+  d4:	892a                	mv	s2,a0
+  d6:	44d1                	li	s1,20
+  for (i = 0; i < 20; i++)
+    read(fd, data, sizeof(data));
+  d8:	20000613          	li	a2,512
+  dc:	dd040593          	addi	a1,s0,-560
+  e0:	854a                	mv	a0,s2
+  e2:	00000097          	auipc	ra,0x0
+  e6:	2ae080e7          	jalr	686(ra) # 390 <read>
+  for (i = 0; i < 20; i++)
+  ea:	34fd                	addiw	s1,s1,-1
+  ec:	f4f5                	bnez	s1,d8 <main+0xd8>
+  close(fd);
+  ee:	854a                	mv	a0,s2
+  f0:	00000097          	auipc	ra,0x0
+  f4:	2b0080e7          	jalr	688(ra) # 3a0 <close>
+
+  wait(0);
+  f8:	4501                	li	a0,0
+  fa:	00000097          	auipc	ra,0x0
+  fe:	286080e7          	jalr	646(ra) # 380 <wait>
+
+  exit(0);
+ 102:	4501                	li	a0,0
+ 104:	00000097          	auipc	ra,0x0
+ 108:	274080e7          	jalr	628(ra) # 378 <exit>
+
+000000000000010c <strcpy>:
+#include "kernel/fcntl.h"
+#include "user/user.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 10c:	1141                	addi	sp,sp,-16
+ 10e:	e422                	sd	s0,8(sp)
+ 110:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 112:	87aa                	mv	a5,a0
+ 114:	0585                	addi	a1,a1,1
+ 116:	0785                	addi	a5,a5,1
+ 118:	fff5c703          	lbu	a4,-1(a1)
+ 11c:	fee78fa3          	sb	a4,-1(a5)
+ 120:	fb75                	bnez	a4,114 <strcpy+0x8>
+    ;
+  return os;
+}
+ 122:	6422                	ld	s0,8(sp)
+ 124:	0141                	addi	sp,sp,16
+ 126:	8082                	ret
+
+0000000000000128 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 128:	1141                	addi	sp,sp,-16
+ 12a:	e422                	sd	s0,8(sp)
+ 12c:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+ 12e:	00054783          	lbu	a5,0(a0)
+ 132:	cb91                	beqz	a5,146 <strcmp+0x1e>
+ 134:	0005c703          	lbu	a4,0(a1)
+ 138:	00f71763          	bne	a4,a5,146 <strcmp+0x1e>
+    p++, q++;
+ 13c:	0505                	addi	a0,a0,1
+ 13e:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+ 140:	00054783          	lbu	a5,0(a0)
+ 144:	fbe5                	bnez	a5,134 <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+ 146:	0005c503          	lbu	a0,0(a1)
+}
+ 14a:	40a7853b          	subw	a0,a5,a0
+ 14e:	6422                	ld	s0,8(sp)
+ 150:	0141                	addi	sp,sp,16
+ 152:	8082                	ret
+
+0000000000000154 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 154:	1141                	addi	sp,sp,-16
+ 156:	e422                	sd	s0,8(sp)
+ 158:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 15a:	00054783          	lbu	a5,0(a0)
+ 15e:	cf91                	beqz	a5,17a <strlen+0x26>
+ 160:	0505                	addi	a0,a0,1
+ 162:	87aa                	mv	a5,a0
+ 164:	4685                	li	a3,1
+ 166:	9e89                	subw	a3,a3,a0
+ 168:	00f6853b          	addw	a0,a3,a5
+ 16c:	0785                	addi	a5,a5,1
+ 16e:	fff7c703          	lbu	a4,-1(a5)
+ 172:	fb7d                	bnez	a4,168 <strlen+0x14>
+    ;
+  return n;
+}
+ 174:	6422                	ld	s0,8(sp)
+ 176:	0141                	addi	sp,sp,16
+ 178:	8082                	ret
+  for(n = 0; s[n]; n++)
+ 17a:	4501                	li	a0,0
+ 17c:	bfe5                	j	174 <strlen+0x20>
+
+000000000000017e <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 17e:	1141                	addi	sp,sp,-16
+ 180:	e422                	sd	s0,8(sp)
+ 182:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+ 184:	ca19                	beqz	a2,19a <memset+0x1c>
+ 186:	87aa                	mv	a5,a0
+ 188:	1602                	slli	a2,a2,0x20
+ 18a:	9201                	srli	a2,a2,0x20
+ 18c:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+ 190:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+ 194:	0785                	addi	a5,a5,1
+ 196:	fee79de3          	bne	a5,a4,190 <memset+0x12>
+  }
+  return dst;
+}
+ 19a:	6422                	ld	s0,8(sp)
+ 19c:	0141                	addi	sp,sp,16
+ 19e:	8082                	ret
+
+00000000000001a0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 1a0:	1141                	addi	sp,sp,-16
+ 1a2:	e422                	sd	s0,8(sp)
+ 1a4:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+ 1a6:	00054783          	lbu	a5,0(a0)
+ 1aa:	cb99                	beqz	a5,1c0 <strchr+0x20>
+    if(*s == c)
+ 1ac:	00f58763          	beq	a1,a5,1ba <strchr+0x1a>
+  for(; *s; s++)
+ 1b0:	0505                	addi	a0,a0,1
+ 1b2:	00054783          	lbu	a5,0(a0)
+ 1b6:	fbfd                	bnez	a5,1ac <strchr+0xc>
+      return (char*)s;
+  return 0;
+ 1b8:	4501                	li	a0,0
+}
+ 1ba:	6422                	ld	s0,8(sp)
+ 1bc:	0141                	addi	sp,sp,16
+ 1be:	8082                	ret
+  return 0;
+ 1c0:	4501                	li	a0,0
+ 1c2:	bfe5                	j	1ba <strchr+0x1a>
+
+00000000000001c4 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 1c4:	711d                	addi	sp,sp,-96
+ 1c6:	ec86                	sd	ra,88(sp)
+ 1c8:	e8a2                	sd	s0,80(sp)
+ 1ca:	e4a6                	sd	s1,72(sp)
+ 1cc:	e0ca                	sd	s2,64(sp)
+ 1ce:	fc4e                	sd	s3,56(sp)
+ 1d0:	f852                	sd	s4,48(sp)
+ 1d2:	f456                	sd	s5,40(sp)
+ 1d4:	f05a                	sd	s6,32(sp)
+ 1d6:	ec5e                	sd	s7,24(sp)
+ 1d8:	1080                	addi	s0,sp,96
+ 1da:	8baa                	mv	s7,a0
+ 1dc:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1de:	892a                	mv	s2,a0
+ 1e0:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+ 1e2:	4aa9                	li	s5,10
+ 1e4:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+ 1e6:	89a6                	mv	s3,s1
+ 1e8:	2485                	addiw	s1,s1,1
+ 1ea:	0344d863          	bge	s1,s4,21a <gets+0x56>
+    cc = read(0, &c, 1);
+ 1ee:	4605                	li	a2,1
+ 1f0:	faf40593          	addi	a1,s0,-81
+ 1f4:	4501                	li	a0,0
+ 1f6:	00000097          	auipc	ra,0x0
+ 1fa:	19a080e7          	jalr	410(ra) # 390 <read>
+    if(cc < 1)
+ 1fe:	00a05e63          	blez	a0,21a <gets+0x56>
+    buf[i++] = c;
+ 202:	faf44783          	lbu	a5,-81(s0)
+ 206:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+ 20a:	01578763          	beq	a5,s5,218 <gets+0x54>
+ 20e:	0905                	addi	s2,s2,1
+ 210:	fd679be3          	bne	a5,s6,1e6 <gets+0x22>
+  for(i=0; i+1 < max; ){
+ 214:	89a6                	mv	s3,s1
+ 216:	a011                	j	21a <gets+0x56>
+ 218:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+ 21a:	99de                	add	s3,s3,s7
+ 21c:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+ 220:	855e                	mv	a0,s7
+ 222:	60e6                	ld	ra,88(sp)
+ 224:	6446                	ld	s0,80(sp)
+ 226:	64a6                	ld	s1,72(sp)
+ 228:	6906                	ld	s2,64(sp)
+ 22a:	79e2                	ld	s3,56(sp)
+ 22c:	7a42                	ld	s4,48(sp)
+ 22e:	7aa2                	ld	s5,40(sp)
+ 230:	7b02                	ld	s6,32(sp)
+ 232:	6be2                	ld	s7,24(sp)
+ 234:	6125                	addi	sp,sp,96
+ 236:	8082                	ret
+
+0000000000000238 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 238:	1101                	addi	sp,sp,-32
+ 23a:	ec06                	sd	ra,24(sp)
+ 23c:	e822                	sd	s0,16(sp)
+ 23e:	e426                	sd	s1,8(sp)
+ 240:	e04a                	sd	s2,0(sp)
+ 242:	1000                	addi	s0,sp,32
+ 244:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 246:	4581                	li	a1,0
+ 248:	00000097          	auipc	ra,0x0
+ 24c:	170080e7          	jalr	368(ra) # 3b8 <open>
+  if(fd < 0)
+ 250:	02054563          	bltz	a0,27a <stat+0x42>
+ 254:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+ 256:	85ca                	mv	a1,s2
+ 258:	00000097          	auipc	ra,0x0
+ 25c:	178080e7          	jalr	376(ra) # 3d0 <fstat>
+ 260:	892a                	mv	s2,a0
+  close(fd);
+ 262:	8526                	mv	a0,s1
+ 264:	00000097          	auipc	ra,0x0
+ 268:	13c080e7          	jalr	316(ra) # 3a0 <close>
+  return r;
+}
+ 26c:	854a                	mv	a0,s2
+ 26e:	60e2                	ld	ra,24(sp)
+ 270:	6442                	ld	s0,16(sp)
+ 272:	64a2                	ld	s1,8(sp)
+ 274:	6902                	ld	s2,0(sp)
+ 276:	6105                	addi	sp,sp,32
+ 278:	8082                	ret
+    return -1;
+ 27a:	597d                	li	s2,-1
+ 27c:	bfc5                	j	26c <stat+0x34>
+
+000000000000027e <atoi>:
+
+int
+atoi(const char *s)
+{
+ 27e:	1141                	addi	sp,sp,-16
+ 280:	e422                	sd	s0,8(sp)
+ 282:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 284:	00054683          	lbu	a3,0(a0)
+ 288:	fd06879b          	addiw	a5,a3,-48
+ 28c:	0ff7f793          	zext.b	a5,a5
+ 290:	4625                	li	a2,9
+ 292:	02f66863          	bltu	a2,a5,2c2 <atoi+0x44>
+ 296:	872a                	mv	a4,a0
+  n = 0;
+ 298:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+ 29a:	0705                	addi	a4,a4,1
+ 29c:	0025179b          	slliw	a5,a0,0x2
+ 2a0:	9fa9                	addw	a5,a5,a0
+ 2a2:	0017979b          	slliw	a5,a5,0x1
+ 2a6:	9fb5                	addw	a5,a5,a3
+ 2a8:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+ 2ac:	00074683          	lbu	a3,0(a4)
+ 2b0:	fd06879b          	addiw	a5,a3,-48
+ 2b4:	0ff7f793          	zext.b	a5,a5
+ 2b8:	fef671e3          	bgeu	a2,a5,29a <atoi+0x1c>
+  return n;
+}
+ 2bc:	6422                	ld	s0,8(sp)
+ 2be:	0141                	addi	sp,sp,16
+ 2c0:	8082                	ret
+  n = 0;
+ 2c2:	4501                	li	a0,0
+ 2c4:	bfe5                	j	2bc <atoi+0x3e>
+
+00000000000002c6 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2c6:	1141                	addi	sp,sp,-16
+ 2c8:	e422                	sd	s0,8(sp)
+ 2ca:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+ 2cc:	02b57463          	bgeu	a0,a1,2f4 <memmove+0x2e>
+    while(n-- > 0)
+ 2d0:	00c05f63          	blez	a2,2ee <memmove+0x28>
+ 2d4:	1602                	slli	a2,a2,0x20
+ 2d6:	9201                	srli	a2,a2,0x20
+ 2d8:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+ 2dc:	872a                	mv	a4,a0
+      *dst++ = *src++;
+ 2de:	0585                	addi	a1,a1,1
+ 2e0:	0705                	addi	a4,a4,1
+ 2e2:	fff5c683          	lbu	a3,-1(a1)
+ 2e6:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+ 2ea:	fee79ae3          	bne	a5,a4,2de <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+ 2ee:	6422                	ld	s0,8(sp)
+ 2f0:	0141                	addi	sp,sp,16
+ 2f2:	8082                	ret
+    dst += n;
+ 2f4:	00c50733          	add	a4,a0,a2
+    src += n;
+ 2f8:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+ 2fa:	fec05ae3          	blez	a2,2ee <memmove+0x28>
+ 2fe:	fff6079b          	addiw	a5,a2,-1
+ 302:	1782                	slli	a5,a5,0x20
+ 304:	9381                	srli	a5,a5,0x20
+ 306:	fff7c793          	not	a5,a5
+ 30a:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+ 30c:	15fd                	addi	a1,a1,-1
+ 30e:	177d                	addi	a4,a4,-1
+ 310:	0005c683          	lbu	a3,0(a1)
+ 314:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+ 318:	fee79ae3          	bne	a5,a4,30c <memmove+0x46>
+ 31c:	bfc9                	j	2ee <memmove+0x28>
+
+000000000000031e <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+ 31e:	1141                	addi	sp,sp,-16
+ 320:	e422                	sd	s0,8(sp)
+ 322:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+ 324:	ca05                	beqz	a2,354 <memcmp+0x36>
+ 326:	fff6069b          	addiw	a3,a2,-1
+ 32a:	1682                	slli	a3,a3,0x20
+ 32c:	9281                	srli	a3,a3,0x20
+ 32e:	0685                	addi	a3,a3,1
+ 330:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+ 332:	00054783          	lbu	a5,0(a0)
+ 336:	0005c703          	lbu	a4,0(a1)
+ 33a:	00e79863          	bne	a5,a4,34a <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+ 33e:	0505                	addi	a0,a0,1
+    p2++;
+ 340:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+ 342:	fed518e3          	bne	a0,a3,332 <memcmp+0x14>
+  }
+  return 0;
+ 346:	4501                	li	a0,0
+ 348:	a019                	j	34e <memcmp+0x30>
+      return *p1 - *p2;
+ 34a:	40e7853b          	subw	a0,a5,a4
+}
+ 34e:	6422                	ld	s0,8(sp)
+ 350:	0141                	addi	sp,sp,16
+ 352:	8082                	ret
+  return 0;
+ 354:	4501                	li	a0,0
+ 356:	bfe5                	j	34e <memcmp+0x30>
+
+0000000000000358 <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+ 358:	1141                	addi	sp,sp,-16
+ 35a:	e406                	sd	ra,8(sp)
+ 35c:	e022                	sd	s0,0(sp)
+ 35e:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+ 360:	00000097          	auipc	ra,0x0
+ 364:	f66080e7          	jalr	-154(ra) # 2c6 <memmove>
+}
+ 368:	60a2                	ld	ra,8(sp)
+ 36a:	6402                	ld	s0,0(sp)
+ 36c:	0141                	addi	sp,sp,16
+ 36e:	8082                	ret
+
+0000000000000370 <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ 370:	4885                	li	a7,1
+ ecall
+ 372:	00000073          	ecall
+ ret
+ 376:	8082                	ret
+
+0000000000000378 <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+ 378:	4889                	li	a7,2
+ ecall
+ 37a:	00000073          	ecall
+ ret
+ 37e:	8082                	ret
+
+0000000000000380 <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+ 380:	488d                	li	a7,3
+ ecall
+ 382:	00000073          	ecall
+ ret
+ 386:	8082                	ret
+
+0000000000000388 <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ 388:	4891                	li	a7,4
+ ecall
+ 38a:	00000073          	ecall
+ ret
+ 38e:	8082                	ret
+
+0000000000000390 <read>:
+.global read
+read:
+ li a7, SYS_read
+ 390:	4895                	li	a7,5
+ ecall
+ 392:	00000073          	ecall
+ ret
+ 396:	8082                	ret
+
+0000000000000398 <write>:
+.global write
+write:
+ li a7, SYS_write
+ 398:	48c1                	li	a7,16
+ ecall
+ 39a:	00000073          	ecall
+ ret
+ 39e:	8082                	ret
+
+00000000000003a0 <close>:
+.global close
+close:
+ li a7, SYS_close
+ 3a0:	48d5                	li	a7,21
+ ecall
+ 3a2:	00000073          	ecall
+ ret
+ 3a6:	8082                	ret
+
+00000000000003a8 <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+ 3a8:	4899                	li	a7,6
+ ecall
+ 3aa:	00000073          	ecall
+ ret
+ 3ae:	8082                	ret
+
+00000000000003b0 <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+ 3b0:	489d                	li	a7,7
+ ecall
+ 3b2:	00000073          	ecall
+ ret
+ 3b6:	8082                	ret
+
+00000000000003b8 <open>:
+.global open
+open:
+ li a7, SYS_open
+ 3b8:	48bd                	li	a7,15
+ ecall
+ 3ba:	00000073          	ecall
+ ret
+ 3be:	8082                	ret
+
+00000000000003c0 <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ 3c0:	48c5                	li	a7,17
+ ecall
+ 3c2:	00000073          	ecall
+ ret
+ 3c6:	8082                	ret
+
+00000000000003c8 <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ 3c8:	48c9                	li	a7,18
+ ecall
+ 3ca:	00000073          	ecall
+ ret
+ 3ce:	8082                	ret
+
+00000000000003d0 <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ 3d0:	48a1                	li	a7,8
+ ecall
+ 3d2:	00000073          	ecall
+ ret
+ 3d6:	8082                	ret
+
+00000000000003d8 <link>:
+.global link
+link:
+ li a7, SYS_link
+ 3d8:	48cd                	li	a7,19
+ ecall
+ 3da:	00000073          	ecall
+ ret
+ 3de:	8082                	ret
+
+00000000000003e0 <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ 3e0:	48d1                	li	a7,20
+ ecall
+ 3e2:	00000073          	ecall
+ ret
+ 3e6:	8082                	ret
+
+00000000000003e8 <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ 3e8:	48a5                	li	a7,9
+ ecall
+ 3ea:	00000073          	ecall
+ ret
+ 3ee:	8082                	ret
+
+00000000000003f0 <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+ 3f0:	48a9                	li	a7,10
+ ecall
+ 3f2:	00000073          	ecall
+ ret
+ 3f6:	8082                	ret
+
+00000000000003f8 <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ 3f8:	48ad                	li	a7,11
+ ecall
+ 3fa:	00000073          	ecall
+ ret
+ 3fe:	8082                	ret
+
+0000000000000400 <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ 400:	48b1                	li	a7,12
+ ecall
+ 402:	00000073          	ecall
+ ret
+ 406:	8082                	ret
+
+0000000000000408 <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ 408:	48b5                	li	a7,13
+ ecall
+ 40a:	00000073          	ecall
+ ret
+ 40e:	8082                	ret
+
+0000000000000410 <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ 410:	48b9                	li	a7,14
+ ecall
+ 412:	00000073          	ecall
+ ret
+ 416:	8082                	ret
+
+0000000000000418 <setp>:
+.global setp
+setp:
+ li a7, SYS_setp
+ 418:	48d9                	li	a7,22
+ ecall
+ 41a:	00000073          	ecall
+ ret
+ 41e:	8082                	ret
+
+0000000000000420 <semget>:
+.global semget
+semget:
+ li a7, SYS_semget
+ 420:	48dd                	li	a7,23
+ ecall
+ 422:	00000073          	ecall
+ ret
+ 426:	8082                	ret
+
+0000000000000428 <semdown>:
+.global semdown
+semdown:
+ li a7, SYS_semdown
+ 428:	48e1                	li	a7,24
+ ecall
+ 42a:	00000073          	ecall
+ ret
+ 42e:	8082                	ret
+
+0000000000000430 <semup>:
+.global semup
+semup:
+ li a7, SYS_semup
+ 430:	48e5                	li	a7,25
+ ecall
+ 432:	00000073          	ecall
+ ret
+ 436:	8082                	ret
+
+0000000000000438 <semclose>:
+.global semclose
+semclose:
+ li a7, SYS_semclose
+ 438:	48e9                	li	a7,26
+ ecall
+ 43a:	00000073          	ecall
+ ret
+ 43e:	8082                	ret
+
+0000000000000440 <timeout>:
+.global timeout
+timeout:
+ li a7, SYS_timeout
+ 440:	48ed                	li	a7,27
+ ecall
+ 442:	00000073          	ecall
+ ret
+ 446:	8082                	ret
+
+0000000000000448 <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+ 448:	1101                	addi	sp,sp,-32
+ 44a:	ec06                	sd	ra,24(sp)
+ 44c:	e822                	sd	s0,16(sp)
+ 44e:	1000                	addi	s0,sp,32
+ 450:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+ 454:	4605                	li	a2,1
+ 456:	fef40593          	addi	a1,s0,-17
+ 45a:	00000097          	auipc	ra,0x0
+ 45e:	f3e080e7          	jalr	-194(ra) # 398 <write>
+}
+ 462:	60e2                	ld	ra,24(sp)
+ 464:	6442                	ld	s0,16(sp)
+ 466:	6105                	addi	sp,sp,32
+ 468:	8082                	ret
+
+000000000000046a <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 46a:	7139                	addi	sp,sp,-64
+ 46c:	fc06                	sd	ra,56(sp)
+ 46e:	f822                	sd	s0,48(sp)
+ 470:	f426                	sd	s1,40(sp)
+ 472:	f04a                	sd	s2,32(sp)
+ 474:	ec4e                	sd	s3,24(sp)
+ 476:	0080                	addi	s0,sp,64
+ 478:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 47a:	c299                	beqz	a3,480 <printint+0x16>
+ 47c:	0805c963          	bltz	a1,50e <printint+0xa4>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 480:	2581                	sext.w	a1,a1
+  neg = 0;
+ 482:	4881                	li	a7,0
+ 484:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+ 488:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+ 48a:	2601                	sext.w	a2,a2
+ 48c:	00000517          	auipc	a0,0x0
+ 490:	4d450513          	addi	a0,a0,1236 # 960 <digits>
+ 494:	883a                	mv	a6,a4
+ 496:	2705                	addiw	a4,a4,1
+ 498:	02c5f7bb          	remuw	a5,a1,a2
+ 49c:	1782                	slli	a5,a5,0x20
+ 49e:	9381                	srli	a5,a5,0x20
+ 4a0:	97aa                	add	a5,a5,a0
+ 4a2:	0007c783          	lbu	a5,0(a5)
+ 4a6:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+ 4aa:	0005879b          	sext.w	a5,a1
+ 4ae:	02c5d5bb          	divuw	a1,a1,a2
+ 4b2:	0685                	addi	a3,a3,1
+ 4b4:	fec7f0e3          	bgeu	a5,a2,494 <printint+0x2a>
+  if(neg)
+ 4b8:	00088c63          	beqz	a7,4d0 <printint+0x66>
+    buf[i++] = '-';
+ 4bc:	fd070793          	addi	a5,a4,-48
+ 4c0:	00878733          	add	a4,a5,s0
+ 4c4:	02d00793          	li	a5,45
+ 4c8:	fef70823          	sb	a5,-16(a4)
+ 4cc:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+ 4d0:	02e05863          	blez	a4,500 <printint+0x96>
+ 4d4:	fc040793          	addi	a5,s0,-64
+ 4d8:	00e78933          	add	s2,a5,a4
+ 4dc:	fff78993          	addi	s3,a5,-1
+ 4e0:	99ba                	add	s3,s3,a4
+ 4e2:	377d                	addiw	a4,a4,-1
+ 4e4:	1702                	slli	a4,a4,0x20
+ 4e6:	9301                	srli	a4,a4,0x20
+ 4e8:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+ 4ec:	fff94583          	lbu	a1,-1(s2)
+ 4f0:	8526                	mv	a0,s1
+ 4f2:	00000097          	auipc	ra,0x0
+ 4f6:	f56080e7          	jalr	-170(ra) # 448 <putc>
+  while(--i >= 0)
+ 4fa:	197d                	addi	s2,s2,-1
+ 4fc:	ff3918e3          	bne	s2,s3,4ec <printint+0x82>
+}
+ 500:	70e2                	ld	ra,56(sp)
+ 502:	7442                	ld	s0,48(sp)
+ 504:	74a2                	ld	s1,40(sp)
+ 506:	7902                	ld	s2,32(sp)
+ 508:	69e2                	ld	s3,24(sp)
+ 50a:	6121                	addi	sp,sp,64
+ 50c:	8082                	ret
+    x = -xx;
+ 50e:	40b005bb          	negw	a1,a1
+    neg = 1;
+ 512:	4885                	li	a7,1
+    x = -xx;
+ 514:	bf85                	j	484 <printint+0x1a>
+
+0000000000000516 <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+ 516:	7119                	addi	sp,sp,-128
+ 518:	fc86                	sd	ra,120(sp)
+ 51a:	f8a2                	sd	s0,112(sp)
+ 51c:	f4a6                	sd	s1,104(sp)
+ 51e:	f0ca                	sd	s2,96(sp)
+ 520:	ecce                	sd	s3,88(sp)
+ 522:	e8d2                	sd	s4,80(sp)
+ 524:	e4d6                	sd	s5,72(sp)
+ 526:	e0da                	sd	s6,64(sp)
+ 528:	fc5e                	sd	s7,56(sp)
+ 52a:	f862                	sd	s8,48(sp)
+ 52c:	f466                	sd	s9,40(sp)
+ 52e:	f06a                	sd	s10,32(sp)
+ 530:	ec6e                	sd	s11,24(sp)
+ 532:	0100                	addi	s0,sp,128
+  char *s;
+  int c, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+ 534:	0005c903          	lbu	s2,0(a1)
+ 538:	18090f63          	beqz	s2,6d6 <vprintf+0x1c0>
+ 53c:	8aaa                	mv	s5,a0
+ 53e:	8b32                	mv	s6,a2
+ 540:	00158493          	addi	s1,a1,1
+  state = 0;
+ 544:	4981                	li	s3,0
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 546:	02500a13          	li	s4,37
+ 54a:	4c55                	li	s8,21
+ 54c:	00000c97          	auipc	s9,0x0
+ 550:	3bcc8c93          	addi	s9,s9,956 # 908 <malloc+0x12e>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c == 's'){
+        s = va_arg(ap, char*);
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 554:	02800d93          	li	s11,40
+  putc(fd, 'x');
+ 558:	4d41                	li	s10,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 55a:	00000b97          	auipc	s7,0x0
+ 55e:	406b8b93          	addi	s7,s7,1030 # 960 <digits>
+ 562:	a839                	j	580 <vprintf+0x6a>
+        putc(fd, c);
+ 564:	85ca                	mv	a1,s2
+ 566:	8556                	mv	a0,s5
+ 568:	00000097          	auipc	ra,0x0
+ 56c:	ee0080e7          	jalr	-288(ra) # 448 <putc>
+ 570:	a019                	j	576 <vprintf+0x60>
+    } else if(state == '%'){
+ 572:	01498d63          	beq	s3,s4,58c <vprintf+0x76>
+  for(i = 0; fmt[i]; i++){
+ 576:	0485                	addi	s1,s1,1
+ 578:	fff4c903          	lbu	s2,-1(s1)
+ 57c:	14090d63          	beqz	s2,6d6 <vprintf+0x1c0>
+    if(state == 0){
+ 580:	fe0999e3          	bnez	s3,572 <vprintf+0x5c>
+      if(c == '%'){
+ 584:	ff4910e3          	bne	s2,s4,564 <vprintf+0x4e>
+        state = '%';
+ 588:	89d2                	mv	s3,s4
+ 58a:	b7f5                	j	576 <vprintf+0x60>
+      if(c == 'd'){
+ 58c:	11490c63          	beq	s2,s4,6a4 <vprintf+0x18e>
+ 590:	f9d9079b          	addiw	a5,s2,-99
+ 594:	0ff7f793          	zext.b	a5,a5
+ 598:	10fc6e63          	bltu	s8,a5,6b4 <vprintf+0x19e>
+ 59c:	f9d9079b          	addiw	a5,s2,-99
+ 5a0:	0ff7f713          	zext.b	a4,a5
+ 5a4:	10ec6863          	bltu	s8,a4,6b4 <vprintf+0x19e>
+ 5a8:	00271793          	slli	a5,a4,0x2
+ 5ac:	97e6                	add	a5,a5,s9
+ 5ae:	439c                	lw	a5,0(a5)
+ 5b0:	97e6                	add	a5,a5,s9
+ 5b2:	8782                	jr	a5
+        printint(fd, va_arg(ap, int), 10, 1);
+ 5b4:	008b0913          	addi	s2,s6,8
+ 5b8:	4685                	li	a3,1
+ 5ba:	4629                	li	a2,10
+ 5bc:	000b2583          	lw	a1,0(s6)
+ 5c0:	8556                	mv	a0,s5
+ 5c2:	00000097          	auipc	ra,0x0
+ 5c6:	ea8080e7          	jalr	-344(ra) # 46a <printint>
+ 5ca:	8b4a                	mv	s6,s2
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 5cc:	4981                	li	s3,0
+ 5ce:	b765                	j	576 <vprintf+0x60>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 5d0:	008b0913          	addi	s2,s6,8
+ 5d4:	4681                	li	a3,0
+ 5d6:	4629                	li	a2,10
+ 5d8:	000b2583          	lw	a1,0(s6)
+ 5dc:	8556                	mv	a0,s5
+ 5de:	00000097          	auipc	ra,0x0
+ 5e2:	e8c080e7          	jalr	-372(ra) # 46a <printint>
+ 5e6:	8b4a                	mv	s6,s2
+      state = 0;
+ 5e8:	4981                	li	s3,0
+ 5ea:	b771                	j	576 <vprintf+0x60>
+        printint(fd, va_arg(ap, int), 16, 0);
+ 5ec:	008b0913          	addi	s2,s6,8
+ 5f0:	4681                	li	a3,0
+ 5f2:	866a                	mv	a2,s10
+ 5f4:	000b2583          	lw	a1,0(s6)
+ 5f8:	8556                	mv	a0,s5
+ 5fa:	00000097          	auipc	ra,0x0
+ 5fe:	e70080e7          	jalr	-400(ra) # 46a <printint>
+ 602:	8b4a                	mv	s6,s2
+      state = 0;
+ 604:	4981                	li	s3,0
+ 606:	bf85                	j	576 <vprintf+0x60>
+        printptr(fd, va_arg(ap, uint64));
+ 608:	008b0793          	addi	a5,s6,8
+ 60c:	f8f43423          	sd	a5,-120(s0)
+ 610:	000b3983          	ld	s3,0(s6)
+  putc(fd, '0');
+ 614:	03000593          	li	a1,48
+ 618:	8556                	mv	a0,s5
+ 61a:	00000097          	auipc	ra,0x0
+ 61e:	e2e080e7          	jalr	-466(ra) # 448 <putc>
+  putc(fd, 'x');
+ 622:	07800593          	li	a1,120
+ 626:	8556                	mv	a0,s5
+ 628:	00000097          	auipc	ra,0x0
+ 62c:	e20080e7          	jalr	-480(ra) # 448 <putc>
+ 630:	896a                	mv	s2,s10
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 632:	03c9d793          	srli	a5,s3,0x3c
+ 636:	97de                	add	a5,a5,s7
+ 638:	0007c583          	lbu	a1,0(a5)
+ 63c:	8556                	mv	a0,s5
+ 63e:	00000097          	auipc	ra,0x0
+ 642:	e0a080e7          	jalr	-502(ra) # 448 <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+ 646:	0992                	slli	s3,s3,0x4
+ 648:	397d                	addiw	s2,s2,-1
+ 64a:	fe0914e3          	bnez	s2,632 <vprintf+0x11c>
+        printptr(fd, va_arg(ap, uint64));
+ 64e:	f8843b03          	ld	s6,-120(s0)
+      state = 0;
+ 652:	4981                	li	s3,0
+ 654:	b70d                	j	576 <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 656:	008b0913          	addi	s2,s6,8
+ 65a:	000b3983          	ld	s3,0(s6)
+        if(s == 0)
+ 65e:	02098163          	beqz	s3,680 <vprintf+0x16a>
+        while(*s != 0){
+ 662:	0009c583          	lbu	a1,0(s3)
+ 666:	c5ad                	beqz	a1,6d0 <vprintf+0x1ba>
+          putc(fd, *s);
+ 668:	8556                	mv	a0,s5
+ 66a:	00000097          	auipc	ra,0x0
+ 66e:	dde080e7          	jalr	-546(ra) # 448 <putc>
+          s++;
+ 672:	0985                	addi	s3,s3,1
+        while(*s != 0){
+ 674:	0009c583          	lbu	a1,0(s3)
+ 678:	f9e5                	bnez	a1,668 <vprintf+0x152>
+        s = va_arg(ap, char*);
+ 67a:	8b4a                	mv	s6,s2
+      state = 0;
+ 67c:	4981                	li	s3,0
+ 67e:	bde5                	j	576 <vprintf+0x60>
+          s = "(null)";
+ 680:	00000997          	auipc	s3,0x0
+ 684:	28098993          	addi	s3,s3,640 # 900 <malloc+0x126>
+        while(*s != 0){
+ 688:	85ee                	mv	a1,s11
+ 68a:	bff9                	j	668 <vprintf+0x152>
+        putc(fd, va_arg(ap, uint));
+ 68c:	008b0913          	addi	s2,s6,8
+ 690:	000b4583          	lbu	a1,0(s6)
+ 694:	8556                	mv	a0,s5
+ 696:	00000097          	auipc	ra,0x0
+ 69a:	db2080e7          	jalr	-590(ra) # 448 <putc>
+ 69e:	8b4a                	mv	s6,s2
+      state = 0;
+ 6a0:	4981                	li	s3,0
+ 6a2:	bdd1                	j	576 <vprintf+0x60>
+        putc(fd, c);
+ 6a4:	85d2                	mv	a1,s4
+ 6a6:	8556                	mv	a0,s5
+ 6a8:	00000097          	auipc	ra,0x0
+ 6ac:	da0080e7          	jalr	-608(ra) # 448 <putc>
+      state = 0;
+ 6b0:	4981                	li	s3,0
+ 6b2:	b5d1                	j	576 <vprintf+0x60>
+        putc(fd, '%');
+ 6b4:	85d2                	mv	a1,s4
+ 6b6:	8556                	mv	a0,s5
+ 6b8:	00000097          	auipc	ra,0x0
+ 6bc:	d90080e7          	jalr	-624(ra) # 448 <putc>
+        putc(fd, c);
+ 6c0:	85ca                	mv	a1,s2
+ 6c2:	8556                	mv	a0,s5
+ 6c4:	00000097          	auipc	ra,0x0
+ 6c8:	d84080e7          	jalr	-636(ra) # 448 <putc>
+      state = 0;
+ 6cc:	4981                	li	s3,0
+ 6ce:	b565                	j	576 <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 6d0:	8b4a                	mv	s6,s2
+      state = 0;
+ 6d2:	4981                	li	s3,0
+ 6d4:	b54d                	j	576 <vprintf+0x60>
+    }
+  }
+}
+ 6d6:	70e6                	ld	ra,120(sp)
+ 6d8:	7446                	ld	s0,112(sp)
+ 6da:	74a6                	ld	s1,104(sp)
+ 6dc:	7906                	ld	s2,96(sp)
+ 6de:	69e6                	ld	s3,88(sp)
+ 6e0:	6a46                	ld	s4,80(sp)
+ 6e2:	6aa6                	ld	s5,72(sp)
+ 6e4:	6b06                	ld	s6,64(sp)
+ 6e6:	7be2                	ld	s7,56(sp)
+ 6e8:	7c42                	ld	s8,48(sp)
+ 6ea:	7ca2                	ld	s9,40(sp)
+ 6ec:	7d02                	ld	s10,32(sp)
+ 6ee:	6de2                	ld	s11,24(sp)
+ 6f0:	6109                	addi	sp,sp,128
+ 6f2:	8082                	ret
+
+00000000000006f4 <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+ 6f4:	715d                	addi	sp,sp,-80
+ 6f6:	ec06                	sd	ra,24(sp)
+ 6f8:	e822                	sd	s0,16(sp)
+ 6fa:	1000                	addi	s0,sp,32
+ 6fc:	e010                	sd	a2,0(s0)
+ 6fe:	e414                	sd	a3,8(s0)
+ 700:	e818                	sd	a4,16(s0)
+ 702:	ec1c                	sd	a5,24(s0)
+ 704:	03043023          	sd	a6,32(s0)
+ 708:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 70c:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+ 710:	8622                	mv	a2,s0
+ 712:	00000097          	auipc	ra,0x0
+ 716:	e04080e7          	jalr	-508(ra) # 516 <vprintf>
+}
+ 71a:	60e2                	ld	ra,24(sp)
+ 71c:	6442                	ld	s0,16(sp)
+ 71e:	6161                	addi	sp,sp,80
+ 720:	8082                	ret
+
+0000000000000722 <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+ 722:	711d                	addi	sp,sp,-96
+ 724:	ec06                	sd	ra,24(sp)
+ 726:	e822                	sd	s0,16(sp)
+ 728:	1000                	addi	s0,sp,32
+ 72a:	e40c                	sd	a1,8(s0)
+ 72c:	e810                	sd	a2,16(s0)
+ 72e:	ec14                	sd	a3,24(s0)
+ 730:	f018                	sd	a4,32(s0)
+ 732:	f41c                	sd	a5,40(s0)
+ 734:	03043823          	sd	a6,48(s0)
+ 738:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 73c:	00840613          	addi	a2,s0,8
+ 740:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+ 744:	85aa                	mv	a1,a0
+ 746:	4505                	li	a0,1
+ 748:	00000097          	auipc	ra,0x0
+ 74c:	dce080e7          	jalr	-562(ra) # 516 <vprintf>
+}
+ 750:	60e2                	ld	ra,24(sp)
+ 752:	6442                	ld	s0,16(sp)
+ 754:	6125                	addi	sp,sp,96
+ 756:	8082                	ret
+
+0000000000000758 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 758:	1141                	addi	sp,sp,-16
+ 75a:	e422                	sd	s0,8(sp)
+ 75c:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 75e:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 762:	00000797          	auipc	a5,0x0
+ 766:	2167b783          	ld	a5,534(a5) # 978 <freep>
+ 76a:	a02d                	j	794 <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 76c:	4618                	lw	a4,8(a2)
+ 76e:	9f2d                	addw	a4,a4,a1
+ 770:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 774:	6398                	ld	a4,0(a5)
+ 776:	6310                	ld	a2,0(a4)
+ 778:	a83d                	j	7b6 <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 77a:	ff852703          	lw	a4,-8(a0)
+ 77e:	9f31                	addw	a4,a4,a2
+ 780:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+ 782:	ff053683          	ld	a3,-16(a0)
+ 786:	a091                	j	7ca <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 788:	6398                	ld	a4,0(a5)
+ 78a:	00e7e463          	bltu	a5,a4,792 <free+0x3a>
+ 78e:	00e6ea63          	bltu	a3,a4,7a2 <free+0x4a>
+{
+ 792:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 794:	fed7fae3          	bgeu	a5,a3,788 <free+0x30>
+ 798:	6398                	ld	a4,0(a5)
+ 79a:	00e6e463          	bltu	a3,a4,7a2 <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 79e:	fee7eae3          	bltu	a5,a4,792 <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+ 7a2:	ff852583          	lw	a1,-8(a0)
+ 7a6:	6390                	ld	a2,0(a5)
+ 7a8:	02059813          	slli	a6,a1,0x20
+ 7ac:	01c85713          	srli	a4,a6,0x1c
+ 7b0:	9736                	add	a4,a4,a3
+ 7b2:	fae60de3          	beq	a2,a4,76c <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 7b6:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+ 7ba:	4790                	lw	a2,8(a5)
+ 7bc:	02061593          	slli	a1,a2,0x20
+ 7c0:	01c5d713          	srli	a4,a1,0x1c
+ 7c4:	973e                	add	a4,a4,a5
+ 7c6:	fae68ae3          	beq	a3,a4,77a <free+0x22>
+    p->s.ptr = bp->s.ptr;
+ 7ca:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 7cc:	00000717          	auipc	a4,0x0
+ 7d0:	1af73623          	sd	a5,428(a4) # 978 <freep>
+}
+ 7d4:	6422                	ld	s0,8(sp)
+ 7d6:	0141                	addi	sp,sp,16
+ 7d8:	8082                	ret
+
+00000000000007da <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 7da:	7139                	addi	sp,sp,-64
+ 7dc:	fc06                	sd	ra,56(sp)
+ 7de:	f822                	sd	s0,48(sp)
+ 7e0:	f426                	sd	s1,40(sp)
+ 7e2:	f04a                	sd	s2,32(sp)
+ 7e4:	ec4e                	sd	s3,24(sp)
+ 7e6:	e852                	sd	s4,16(sp)
+ 7e8:	e456                	sd	s5,8(sp)
+ 7ea:	e05a                	sd	s6,0(sp)
+ 7ec:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 7ee:	02051493          	slli	s1,a0,0x20
+ 7f2:	9081                	srli	s1,s1,0x20
+ 7f4:	04bd                	addi	s1,s1,15
+ 7f6:	8091                	srli	s1,s1,0x4
+ 7f8:	0014899b          	addiw	s3,s1,1
+ 7fc:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+ 7fe:	00000517          	auipc	a0,0x0
+ 802:	17a53503          	ld	a0,378(a0) # 978 <freep>
+ 806:	c515                	beqz	a0,832 <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 808:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 80a:	4798                	lw	a4,8(a5)
+ 80c:	02977f63          	bgeu	a4,s1,84a <malloc+0x70>
+ 810:	8a4e                	mv	s4,s3
+ 812:	0009871b          	sext.w	a4,s3
+ 816:	6685                	lui	a3,0x1
+ 818:	00d77363          	bgeu	a4,a3,81e <malloc+0x44>
+ 81c:	6a05                	lui	s4,0x1
+ 81e:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+ 822:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 826:	00000917          	auipc	s2,0x0
+ 82a:	15290913          	addi	s2,s2,338 # 978 <freep>
+  if(p == (char*)-1)
+ 82e:	5afd                	li	s5,-1
+ 830:	a895                	j	8a4 <malloc+0xca>
+    base.s.ptr = freep = prevp = &base;
+ 832:	00000797          	auipc	a5,0x0
+ 836:	14e78793          	addi	a5,a5,334 # 980 <base>
+ 83a:	00000717          	auipc	a4,0x0
+ 83e:	12f73f23          	sd	a5,318(a4) # 978 <freep>
+ 842:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+ 844:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+ 848:	b7e1                	j	810 <malloc+0x36>
+      if(p->s.size == nunits)
+ 84a:	02e48c63          	beq	s1,a4,882 <malloc+0xa8>
+        p->s.size -= nunits;
+ 84e:	4137073b          	subw	a4,a4,s3
+ 852:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+ 854:	02071693          	slli	a3,a4,0x20
+ 858:	01c6d713          	srli	a4,a3,0x1c
+ 85c:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+ 85e:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+ 862:	00000717          	auipc	a4,0x0
+ 866:	10a73b23          	sd	a0,278(a4) # 978 <freep>
+      return (void*)(p + 1);
+ 86a:	01078513          	addi	a0,a5,16
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ 86e:	70e2                	ld	ra,56(sp)
+ 870:	7442                	ld	s0,48(sp)
+ 872:	74a2                	ld	s1,40(sp)
+ 874:	7902                	ld	s2,32(sp)
+ 876:	69e2                	ld	s3,24(sp)
+ 878:	6a42                	ld	s4,16(sp)
+ 87a:	6aa2                	ld	s5,8(sp)
+ 87c:	6b02                	ld	s6,0(sp)
+ 87e:	6121                	addi	sp,sp,64
+ 880:	8082                	ret
+        prevp->s.ptr = p->s.ptr;
+ 882:	6398                	ld	a4,0(a5)
+ 884:	e118                	sd	a4,0(a0)
+ 886:	bff1                	j	862 <malloc+0x88>
+  hp->s.size = nu;
+ 888:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+ 88c:	0541                	addi	a0,a0,16
+ 88e:	00000097          	auipc	ra,0x0
+ 892:	eca080e7          	jalr	-310(ra) # 758 <free>
+  return freep;
+ 896:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+ 89a:	d971                	beqz	a0,86e <malloc+0x94>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 89c:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 89e:	4798                	lw	a4,8(a5)
+ 8a0:	fa9775e3          	bgeu	a4,s1,84a <malloc+0x70>
+    if(p == freep)
+ 8a4:	00093703          	ld	a4,0(s2)
+ 8a8:	853e                	mv	a0,a5
+ 8aa:	fef719e3          	bne	a4,a5,89c <malloc+0xc2>
+  p = sbrk(nu * sizeof(Header));
+ 8ae:	8552                	mv	a0,s4
+ 8b0:	00000097          	auipc	ra,0x0
+ 8b4:	b50080e7          	jalr	-1200(ra) # 400 <sbrk>
+  if(p == (char*)-1)
+ 8b8:	fd5518e3          	bne	a0,s5,888 <malloc+0xae>
+        return 0;
+ 8bc:	4501                	li	a0,0
+ 8be:	bf45                	j	86e <malloc+0x94>
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/stressfs.d os-workshop/user/stressfs.d
--- xv6-riscv/user/stressfs.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/stressfs.d	2022-05-28 22:34:35.000000000 -0300
@@ -0,0 +1,2 @@
+user/stressfs.o: user/stressfs.c kernel/types.h kernel/stat.h user/user.h \
+ kernel/fs.h kernel/fcntl.h
Binary files xv6-riscv/user/stressfs.o and os-workshop/user/stressfs.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/stressfs.sym os-workshop/user/stressfs.sym
--- xv6-riscv/user/stressfs.sym	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/stressfs.sym	2022-05-28 22:34:35.000000000 -0300
@@ -0,0 +1,76 @@
+0000000000000000 .text
+00000000000008c0 .rodata
+0000000000000978 .sbss
+0000000000000980 .bss
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_aranges
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_line
+0000000000000000 .debug_frame
+0000000000000000 .debug_str
+0000000000000000 .debug_line_str
+0000000000000000 .debug_loclists
+0000000000000000 .debug_rnglists
+0000000000000000 stressfs.c
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+0000000000000448 putc
+000000000000046a printint
+0000000000000960 digits
+0000000000000000 umalloc.c
+0000000000000978 freep
+0000000000000980 base
+000000000000010c strcpy
+0000000000000722 printf
+0000000000001171 __global_pointer$
+00000000000002c6 memmove
+00000000000003c0 mknod
+0000000000000428 semdown
+00000000000001c4 gets
+0000000000000971 __SDATA_BEGIN__
+0000000000000420 semget
+00000000000003f8 getpid
+0000000000000358 memcpy
+00000000000007da malloc
+0000000000000438 semclose
+0000000000000408 sleep
+0000000000000388 pipe
+0000000000000398 write
+00000000000003d0 fstat
+00000000000006f4 fprintf
+00000000000003a8 kill
+0000000000000516 vprintf
+00000000000003e8 chdir
+00000000000003b0 exec
+0000000000000380 wait
+0000000000000390 read
+00000000000003c8 unlink
+000000000000031e memcmp
+0000000000000370 fork
+0000000000000990 __BSS_END__
+0000000000000400 sbrk
+0000000000000410 uptime
+0000000000000971 __bss_start
+000000000000017e memset
+0000000000000000 main
+0000000000000440 timeout
+0000000000000128 strcmp
+00000000000003f0 dup
+0000000000000971 __DATA_BEGIN__
+0000000000000238 stat
+0000000000000971 _edata
+0000000000000418 setp
+0000000000000990 _end
+00000000000003d8 link
+0000000000000378 exit
+000000000000027e atoi
+0000000000000154 strlen
+00000000000003b8 open
+0000000000000430 semup
+00000000000001a0 strchr
+00000000000003e0 mkdir
+00000000000003a0 close
+0000000000000758 free
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/topprior.asm os-workshop/user/topprior.asm
--- xv6-riscv/user/topprior.asm	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/topprior.asm	2022-05-28 22:34:30.000000000 -0300
@@ -0,0 +1,1344 @@
+
+user/_topprior:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <main>:
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main() {
+   0:	1141                	addi	sp,sp,-16
+   2:	e406                	sd	ra,8(sp)
+   4:	e022                	sd	s0,0(sp)
+   6:	0800                	addi	s0,sp,16
+  for(;;){
+    setp(1);
+   8:	4505                	li	a0,1
+   a:	00000097          	auipc	ra,0x0
+   e:	316080e7          	jalr	790(ra) # 320 <setp>
+  for(;;){
+  12:	bfdd                	j	8 <main+0x8>
+
+0000000000000014 <strcpy>:
+#include "kernel/fcntl.h"
+#include "user/user.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  14:	1141                	addi	sp,sp,-16
+  16:	e422                	sd	s0,8(sp)
+  18:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  1a:	87aa                	mv	a5,a0
+  1c:	0585                	addi	a1,a1,1
+  1e:	0785                	addi	a5,a5,1
+  20:	fff5c703          	lbu	a4,-1(a1)
+  24:	fee78fa3          	sb	a4,-1(a5)
+  28:	fb75                	bnez	a4,1c <strcpy+0x8>
+    ;
+  return os;
+}
+  2a:	6422                	ld	s0,8(sp)
+  2c:	0141                	addi	sp,sp,16
+  2e:	8082                	ret
+
+0000000000000030 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  30:	1141                	addi	sp,sp,-16
+  32:	e422                	sd	s0,8(sp)
+  34:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+  36:	00054783          	lbu	a5,0(a0)
+  3a:	cb91                	beqz	a5,4e <strcmp+0x1e>
+  3c:	0005c703          	lbu	a4,0(a1)
+  40:	00f71763          	bne	a4,a5,4e <strcmp+0x1e>
+    p++, q++;
+  44:	0505                	addi	a0,a0,1
+  46:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+  48:	00054783          	lbu	a5,0(a0)
+  4c:	fbe5                	bnez	a5,3c <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+  4e:	0005c503          	lbu	a0,0(a1)
+}
+  52:	40a7853b          	subw	a0,a5,a0
+  56:	6422                	ld	s0,8(sp)
+  58:	0141                	addi	sp,sp,16
+  5a:	8082                	ret
+
+000000000000005c <strlen>:
+
+uint
+strlen(const char *s)
+{
+  5c:	1141                	addi	sp,sp,-16
+  5e:	e422                	sd	s0,8(sp)
+  60:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+  62:	00054783          	lbu	a5,0(a0)
+  66:	cf91                	beqz	a5,82 <strlen+0x26>
+  68:	0505                	addi	a0,a0,1
+  6a:	87aa                	mv	a5,a0
+  6c:	4685                	li	a3,1
+  6e:	9e89                	subw	a3,a3,a0
+  70:	00f6853b          	addw	a0,a3,a5
+  74:	0785                	addi	a5,a5,1
+  76:	fff7c703          	lbu	a4,-1(a5)
+  7a:	fb7d                	bnez	a4,70 <strlen+0x14>
+    ;
+  return n;
+}
+  7c:	6422                	ld	s0,8(sp)
+  7e:	0141                	addi	sp,sp,16
+  80:	8082                	ret
+  for(n = 0; s[n]; n++)
+  82:	4501                	li	a0,0
+  84:	bfe5                	j	7c <strlen+0x20>
+
+0000000000000086 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  86:	1141                	addi	sp,sp,-16
+  88:	e422                	sd	s0,8(sp)
+  8a:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+  8c:	ca19                	beqz	a2,a2 <memset+0x1c>
+  8e:	87aa                	mv	a5,a0
+  90:	1602                	slli	a2,a2,0x20
+  92:	9201                	srli	a2,a2,0x20
+  94:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+  98:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+  9c:	0785                	addi	a5,a5,1
+  9e:	fee79de3          	bne	a5,a4,98 <memset+0x12>
+  }
+  return dst;
+}
+  a2:	6422                	ld	s0,8(sp)
+  a4:	0141                	addi	sp,sp,16
+  a6:	8082                	ret
+
+00000000000000a8 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+  a8:	1141                	addi	sp,sp,-16
+  aa:	e422                	sd	s0,8(sp)
+  ac:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+  ae:	00054783          	lbu	a5,0(a0)
+  b2:	cb99                	beqz	a5,c8 <strchr+0x20>
+    if(*s == c)
+  b4:	00f58763          	beq	a1,a5,c2 <strchr+0x1a>
+  for(; *s; s++)
+  b8:	0505                	addi	a0,a0,1
+  ba:	00054783          	lbu	a5,0(a0)
+  be:	fbfd                	bnez	a5,b4 <strchr+0xc>
+      return (char*)s;
+  return 0;
+  c0:	4501                	li	a0,0
+}
+  c2:	6422                	ld	s0,8(sp)
+  c4:	0141                	addi	sp,sp,16
+  c6:	8082                	ret
+  return 0;
+  c8:	4501                	li	a0,0
+  ca:	bfe5                	j	c2 <strchr+0x1a>
+
+00000000000000cc <gets>:
+
+char*
+gets(char *buf, int max)
+{
+  cc:	711d                	addi	sp,sp,-96
+  ce:	ec86                	sd	ra,88(sp)
+  d0:	e8a2                	sd	s0,80(sp)
+  d2:	e4a6                	sd	s1,72(sp)
+  d4:	e0ca                	sd	s2,64(sp)
+  d6:	fc4e                	sd	s3,56(sp)
+  d8:	f852                	sd	s4,48(sp)
+  da:	f456                	sd	s5,40(sp)
+  dc:	f05a                	sd	s6,32(sp)
+  de:	ec5e                	sd	s7,24(sp)
+  e0:	1080                	addi	s0,sp,96
+  e2:	8baa                	mv	s7,a0
+  e4:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+  e6:	892a                	mv	s2,a0
+  e8:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+  ea:	4aa9                	li	s5,10
+  ec:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+  ee:	89a6                	mv	s3,s1
+  f0:	2485                	addiw	s1,s1,1
+  f2:	0344d863          	bge	s1,s4,122 <gets+0x56>
+    cc = read(0, &c, 1);
+  f6:	4605                	li	a2,1
+  f8:	faf40593          	addi	a1,s0,-81
+  fc:	4501                	li	a0,0
+  fe:	00000097          	auipc	ra,0x0
+ 102:	19a080e7          	jalr	410(ra) # 298 <read>
+    if(cc < 1)
+ 106:	00a05e63          	blez	a0,122 <gets+0x56>
+    buf[i++] = c;
+ 10a:	faf44783          	lbu	a5,-81(s0)
+ 10e:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+ 112:	01578763          	beq	a5,s5,120 <gets+0x54>
+ 116:	0905                	addi	s2,s2,1
+ 118:	fd679be3          	bne	a5,s6,ee <gets+0x22>
+  for(i=0; i+1 < max; ){
+ 11c:	89a6                	mv	s3,s1
+ 11e:	a011                	j	122 <gets+0x56>
+ 120:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+ 122:	99de                	add	s3,s3,s7
+ 124:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+ 128:	855e                	mv	a0,s7
+ 12a:	60e6                	ld	ra,88(sp)
+ 12c:	6446                	ld	s0,80(sp)
+ 12e:	64a6                	ld	s1,72(sp)
+ 130:	6906                	ld	s2,64(sp)
+ 132:	79e2                	ld	s3,56(sp)
+ 134:	7a42                	ld	s4,48(sp)
+ 136:	7aa2                	ld	s5,40(sp)
+ 138:	7b02                	ld	s6,32(sp)
+ 13a:	6be2                	ld	s7,24(sp)
+ 13c:	6125                	addi	sp,sp,96
+ 13e:	8082                	ret
+
+0000000000000140 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 140:	1101                	addi	sp,sp,-32
+ 142:	ec06                	sd	ra,24(sp)
+ 144:	e822                	sd	s0,16(sp)
+ 146:	e426                	sd	s1,8(sp)
+ 148:	e04a                	sd	s2,0(sp)
+ 14a:	1000                	addi	s0,sp,32
+ 14c:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 14e:	4581                	li	a1,0
+ 150:	00000097          	auipc	ra,0x0
+ 154:	170080e7          	jalr	368(ra) # 2c0 <open>
+  if(fd < 0)
+ 158:	02054563          	bltz	a0,182 <stat+0x42>
+ 15c:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+ 15e:	85ca                	mv	a1,s2
+ 160:	00000097          	auipc	ra,0x0
+ 164:	178080e7          	jalr	376(ra) # 2d8 <fstat>
+ 168:	892a                	mv	s2,a0
+  close(fd);
+ 16a:	8526                	mv	a0,s1
+ 16c:	00000097          	auipc	ra,0x0
+ 170:	13c080e7          	jalr	316(ra) # 2a8 <close>
+  return r;
+}
+ 174:	854a                	mv	a0,s2
+ 176:	60e2                	ld	ra,24(sp)
+ 178:	6442                	ld	s0,16(sp)
+ 17a:	64a2                	ld	s1,8(sp)
+ 17c:	6902                	ld	s2,0(sp)
+ 17e:	6105                	addi	sp,sp,32
+ 180:	8082                	ret
+    return -1;
+ 182:	597d                	li	s2,-1
+ 184:	bfc5                	j	174 <stat+0x34>
+
+0000000000000186 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 186:	1141                	addi	sp,sp,-16
+ 188:	e422                	sd	s0,8(sp)
+ 18a:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 18c:	00054683          	lbu	a3,0(a0)
+ 190:	fd06879b          	addiw	a5,a3,-48
+ 194:	0ff7f793          	zext.b	a5,a5
+ 198:	4625                	li	a2,9
+ 19a:	02f66863          	bltu	a2,a5,1ca <atoi+0x44>
+ 19e:	872a                	mv	a4,a0
+  n = 0;
+ 1a0:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+ 1a2:	0705                	addi	a4,a4,1
+ 1a4:	0025179b          	slliw	a5,a0,0x2
+ 1a8:	9fa9                	addw	a5,a5,a0
+ 1aa:	0017979b          	slliw	a5,a5,0x1
+ 1ae:	9fb5                	addw	a5,a5,a3
+ 1b0:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+ 1b4:	00074683          	lbu	a3,0(a4)
+ 1b8:	fd06879b          	addiw	a5,a3,-48
+ 1bc:	0ff7f793          	zext.b	a5,a5
+ 1c0:	fef671e3          	bgeu	a2,a5,1a2 <atoi+0x1c>
+  return n;
+}
+ 1c4:	6422                	ld	s0,8(sp)
+ 1c6:	0141                	addi	sp,sp,16
+ 1c8:	8082                	ret
+  n = 0;
+ 1ca:	4501                	li	a0,0
+ 1cc:	bfe5                	j	1c4 <atoi+0x3e>
+
+00000000000001ce <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 1ce:	1141                	addi	sp,sp,-16
+ 1d0:	e422                	sd	s0,8(sp)
+ 1d2:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+ 1d4:	02b57463          	bgeu	a0,a1,1fc <memmove+0x2e>
+    while(n-- > 0)
+ 1d8:	00c05f63          	blez	a2,1f6 <memmove+0x28>
+ 1dc:	1602                	slli	a2,a2,0x20
+ 1de:	9201                	srli	a2,a2,0x20
+ 1e0:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+ 1e4:	872a                	mv	a4,a0
+      *dst++ = *src++;
+ 1e6:	0585                	addi	a1,a1,1
+ 1e8:	0705                	addi	a4,a4,1
+ 1ea:	fff5c683          	lbu	a3,-1(a1)
+ 1ee:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+ 1f2:	fee79ae3          	bne	a5,a4,1e6 <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+ 1f6:	6422                	ld	s0,8(sp)
+ 1f8:	0141                	addi	sp,sp,16
+ 1fa:	8082                	ret
+    dst += n;
+ 1fc:	00c50733          	add	a4,a0,a2
+    src += n;
+ 200:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+ 202:	fec05ae3          	blez	a2,1f6 <memmove+0x28>
+ 206:	fff6079b          	addiw	a5,a2,-1
+ 20a:	1782                	slli	a5,a5,0x20
+ 20c:	9381                	srli	a5,a5,0x20
+ 20e:	fff7c793          	not	a5,a5
+ 212:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+ 214:	15fd                	addi	a1,a1,-1
+ 216:	177d                	addi	a4,a4,-1
+ 218:	0005c683          	lbu	a3,0(a1)
+ 21c:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+ 220:	fee79ae3          	bne	a5,a4,214 <memmove+0x46>
+ 224:	bfc9                	j	1f6 <memmove+0x28>
+
+0000000000000226 <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+ 226:	1141                	addi	sp,sp,-16
+ 228:	e422                	sd	s0,8(sp)
+ 22a:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+ 22c:	ca05                	beqz	a2,25c <memcmp+0x36>
+ 22e:	fff6069b          	addiw	a3,a2,-1
+ 232:	1682                	slli	a3,a3,0x20
+ 234:	9281                	srli	a3,a3,0x20
+ 236:	0685                	addi	a3,a3,1
+ 238:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+ 23a:	00054783          	lbu	a5,0(a0)
+ 23e:	0005c703          	lbu	a4,0(a1)
+ 242:	00e79863          	bne	a5,a4,252 <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+ 246:	0505                	addi	a0,a0,1
+    p2++;
+ 248:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+ 24a:	fed518e3          	bne	a0,a3,23a <memcmp+0x14>
+  }
+  return 0;
+ 24e:	4501                	li	a0,0
+ 250:	a019                	j	256 <memcmp+0x30>
+      return *p1 - *p2;
+ 252:	40e7853b          	subw	a0,a5,a4
+}
+ 256:	6422                	ld	s0,8(sp)
+ 258:	0141                	addi	sp,sp,16
+ 25a:	8082                	ret
+  return 0;
+ 25c:	4501                	li	a0,0
+ 25e:	bfe5                	j	256 <memcmp+0x30>
+
+0000000000000260 <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+ 260:	1141                	addi	sp,sp,-16
+ 262:	e406                	sd	ra,8(sp)
+ 264:	e022                	sd	s0,0(sp)
+ 266:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+ 268:	00000097          	auipc	ra,0x0
+ 26c:	f66080e7          	jalr	-154(ra) # 1ce <memmove>
+}
+ 270:	60a2                	ld	ra,8(sp)
+ 272:	6402                	ld	s0,0(sp)
+ 274:	0141                	addi	sp,sp,16
+ 276:	8082                	ret
+
+0000000000000278 <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ 278:	4885                	li	a7,1
+ ecall
+ 27a:	00000073          	ecall
+ ret
+ 27e:	8082                	ret
+
+0000000000000280 <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+ 280:	4889                	li	a7,2
+ ecall
+ 282:	00000073          	ecall
+ ret
+ 286:	8082                	ret
+
+0000000000000288 <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+ 288:	488d                	li	a7,3
+ ecall
+ 28a:	00000073          	ecall
+ ret
+ 28e:	8082                	ret
+
+0000000000000290 <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ 290:	4891                	li	a7,4
+ ecall
+ 292:	00000073          	ecall
+ ret
+ 296:	8082                	ret
+
+0000000000000298 <read>:
+.global read
+read:
+ li a7, SYS_read
+ 298:	4895                	li	a7,5
+ ecall
+ 29a:	00000073          	ecall
+ ret
+ 29e:	8082                	ret
+
+00000000000002a0 <write>:
+.global write
+write:
+ li a7, SYS_write
+ 2a0:	48c1                	li	a7,16
+ ecall
+ 2a2:	00000073          	ecall
+ ret
+ 2a6:	8082                	ret
+
+00000000000002a8 <close>:
+.global close
+close:
+ li a7, SYS_close
+ 2a8:	48d5                	li	a7,21
+ ecall
+ 2aa:	00000073          	ecall
+ ret
+ 2ae:	8082                	ret
+
+00000000000002b0 <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+ 2b0:	4899                	li	a7,6
+ ecall
+ 2b2:	00000073          	ecall
+ ret
+ 2b6:	8082                	ret
+
+00000000000002b8 <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+ 2b8:	489d                	li	a7,7
+ ecall
+ 2ba:	00000073          	ecall
+ ret
+ 2be:	8082                	ret
+
+00000000000002c0 <open>:
+.global open
+open:
+ li a7, SYS_open
+ 2c0:	48bd                	li	a7,15
+ ecall
+ 2c2:	00000073          	ecall
+ ret
+ 2c6:	8082                	ret
+
+00000000000002c8 <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ 2c8:	48c5                	li	a7,17
+ ecall
+ 2ca:	00000073          	ecall
+ ret
+ 2ce:	8082                	ret
+
+00000000000002d0 <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ 2d0:	48c9                	li	a7,18
+ ecall
+ 2d2:	00000073          	ecall
+ ret
+ 2d6:	8082                	ret
+
+00000000000002d8 <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ 2d8:	48a1                	li	a7,8
+ ecall
+ 2da:	00000073          	ecall
+ ret
+ 2de:	8082                	ret
+
+00000000000002e0 <link>:
+.global link
+link:
+ li a7, SYS_link
+ 2e0:	48cd                	li	a7,19
+ ecall
+ 2e2:	00000073          	ecall
+ ret
+ 2e6:	8082                	ret
+
+00000000000002e8 <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ 2e8:	48d1                	li	a7,20
+ ecall
+ 2ea:	00000073          	ecall
+ ret
+ 2ee:	8082                	ret
+
+00000000000002f0 <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ 2f0:	48a5                	li	a7,9
+ ecall
+ 2f2:	00000073          	ecall
+ ret
+ 2f6:	8082                	ret
+
+00000000000002f8 <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+ 2f8:	48a9                	li	a7,10
+ ecall
+ 2fa:	00000073          	ecall
+ ret
+ 2fe:	8082                	ret
+
+0000000000000300 <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ 300:	48ad                	li	a7,11
+ ecall
+ 302:	00000073          	ecall
+ ret
+ 306:	8082                	ret
+
+0000000000000308 <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ 308:	48b1                	li	a7,12
+ ecall
+ 30a:	00000073          	ecall
+ ret
+ 30e:	8082                	ret
+
+0000000000000310 <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ 310:	48b5                	li	a7,13
+ ecall
+ 312:	00000073          	ecall
+ ret
+ 316:	8082                	ret
+
+0000000000000318 <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ 318:	48b9                	li	a7,14
+ ecall
+ 31a:	00000073          	ecall
+ ret
+ 31e:	8082                	ret
+
+0000000000000320 <setp>:
+.global setp
+setp:
+ li a7, SYS_setp
+ 320:	48d9                	li	a7,22
+ ecall
+ 322:	00000073          	ecall
+ ret
+ 326:	8082                	ret
+
+0000000000000328 <semget>:
+.global semget
+semget:
+ li a7, SYS_semget
+ 328:	48dd                	li	a7,23
+ ecall
+ 32a:	00000073          	ecall
+ ret
+ 32e:	8082                	ret
+
+0000000000000330 <semdown>:
+.global semdown
+semdown:
+ li a7, SYS_semdown
+ 330:	48e1                	li	a7,24
+ ecall
+ 332:	00000073          	ecall
+ ret
+ 336:	8082                	ret
+
+0000000000000338 <semup>:
+.global semup
+semup:
+ li a7, SYS_semup
+ 338:	48e5                	li	a7,25
+ ecall
+ 33a:	00000073          	ecall
+ ret
+ 33e:	8082                	ret
+
+0000000000000340 <semclose>:
+.global semclose
+semclose:
+ li a7, SYS_semclose
+ 340:	48e9                	li	a7,26
+ ecall
+ 342:	00000073          	ecall
+ ret
+ 346:	8082                	ret
+
+0000000000000348 <timeout>:
+.global timeout
+timeout:
+ li a7, SYS_timeout
+ 348:	48ed                	li	a7,27
+ ecall
+ 34a:	00000073          	ecall
+ ret
+ 34e:	8082                	ret
+
+0000000000000350 <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+ 350:	1101                	addi	sp,sp,-32
+ 352:	ec06                	sd	ra,24(sp)
+ 354:	e822                	sd	s0,16(sp)
+ 356:	1000                	addi	s0,sp,32
+ 358:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+ 35c:	4605                	li	a2,1
+ 35e:	fef40593          	addi	a1,s0,-17
+ 362:	00000097          	auipc	ra,0x0
+ 366:	f3e080e7          	jalr	-194(ra) # 2a0 <write>
+}
+ 36a:	60e2                	ld	ra,24(sp)
+ 36c:	6442                	ld	s0,16(sp)
+ 36e:	6105                	addi	sp,sp,32
+ 370:	8082                	ret
+
+0000000000000372 <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 372:	7139                	addi	sp,sp,-64
+ 374:	fc06                	sd	ra,56(sp)
+ 376:	f822                	sd	s0,48(sp)
+ 378:	f426                	sd	s1,40(sp)
+ 37a:	f04a                	sd	s2,32(sp)
+ 37c:	ec4e                	sd	s3,24(sp)
+ 37e:	0080                	addi	s0,sp,64
+ 380:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 382:	c299                	beqz	a3,388 <printint+0x16>
+ 384:	0805c963          	bltz	a1,416 <printint+0xa4>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 388:	2581                	sext.w	a1,a1
+  neg = 0;
+ 38a:	4881                	li	a7,0
+ 38c:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+ 390:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+ 392:	2601                	sext.w	a2,a2
+ 394:	00000517          	auipc	a0,0x0
+ 398:	49450513          	addi	a0,a0,1172 # 828 <digits>
+ 39c:	883a                	mv	a6,a4
+ 39e:	2705                	addiw	a4,a4,1
+ 3a0:	02c5f7bb          	remuw	a5,a1,a2
+ 3a4:	1782                	slli	a5,a5,0x20
+ 3a6:	9381                	srli	a5,a5,0x20
+ 3a8:	97aa                	add	a5,a5,a0
+ 3aa:	0007c783          	lbu	a5,0(a5)
+ 3ae:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+ 3b2:	0005879b          	sext.w	a5,a1
+ 3b6:	02c5d5bb          	divuw	a1,a1,a2
+ 3ba:	0685                	addi	a3,a3,1
+ 3bc:	fec7f0e3          	bgeu	a5,a2,39c <printint+0x2a>
+  if(neg)
+ 3c0:	00088c63          	beqz	a7,3d8 <printint+0x66>
+    buf[i++] = '-';
+ 3c4:	fd070793          	addi	a5,a4,-48
+ 3c8:	00878733          	add	a4,a5,s0
+ 3cc:	02d00793          	li	a5,45
+ 3d0:	fef70823          	sb	a5,-16(a4)
+ 3d4:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+ 3d8:	02e05863          	blez	a4,408 <printint+0x96>
+ 3dc:	fc040793          	addi	a5,s0,-64
+ 3e0:	00e78933          	add	s2,a5,a4
+ 3e4:	fff78993          	addi	s3,a5,-1
+ 3e8:	99ba                	add	s3,s3,a4
+ 3ea:	377d                	addiw	a4,a4,-1
+ 3ec:	1702                	slli	a4,a4,0x20
+ 3ee:	9301                	srli	a4,a4,0x20
+ 3f0:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+ 3f4:	fff94583          	lbu	a1,-1(s2)
+ 3f8:	8526                	mv	a0,s1
+ 3fa:	00000097          	auipc	ra,0x0
+ 3fe:	f56080e7          	jalr	-170(ra) # 350 <putc>
+  while(--i >= 0)
+ 402:	197d                	addi	s2,s2,-1
+ 404:	ff3918e3          	bne	s2,s3,3f4 <printint+0x82>
+}
+ 408:	70e2                	ld	ra,56(sp)
+ 40a:	7442                	ld	s0,48(sp)
+ 40c:	74a2                	ld	s1,40(sp)
+ 40e:	7902                	ld	s2,32(sp)
+ 410:	69e2                	ld	s3,24(sp)
+ 412:	6121                	addi	sp,sp,64
+ 414:	8082                	ret
+    x = -xx;
+ 416:	40b005bb          	negw	a1,a1
+    neg = 1;
+ 41a:	4885                	li	a7,1
+    x = -xx;
+ 41c:	bf85                	j	38c <printint+0x1a>
+
+000000000000041e <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+ 41e:	7119                	addi	sp,sp,-128
+ 420:	fc86                	sd	ra,120(sp)
+ 422:	f8a2                	sd	s0,112(sp)
+ 424:	f4a6                	sd	s1,104(sp)
+ 426:	f0ca                	sd	s2,96(sp)
+ 428:	ecce                	sd	s3,88(sp)
+ 42a:	e8d2                	sd	s4,80(sp)
+ 42c:	e4d6                	sd	s5,72(sp)
+ 42e:	e0da                	sd	s6,64(sp)
+ 430:	fc5e                	sd	s7,56(sp)
+ 432:	f862                	sd	s8,48(sp)
+ 434:	f466                	sd	s9,40(sp)
+ 436:	f06a                	sd	s10,32(sp)
+ 438:	ec6e                	sd	s11,24(sp)
+ 43a:	0100                	addi	s0,sp,128
+  char *s;
+  int c, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+ 43c:	0005c903          	lbu	s2,0(a1)
+ 440:	18090f63          	beqz	s2,5de <vprintf+0x1c0>
+ 444:	8aaa                	mv	s5,a0
+ 446:	8b32                	mv	s6,a2
+ 448:	00158493          	addi	s1,a1,1
+  state = 0;
+ 44c:	4981                	li	s3,0
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 44e:	02500a13          	li	s4,37
+ 452:	4c55                	li	s8,21
+ 454:	00000c97          	auipc	s9,0x0
+ 458:	37cc8c93          	addi	s9,s9,892 # 7d0 <malloc+0xee>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c == 's'){
+        s = va_arg(ap, char*);
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 45c:	02800d93          	li	s11,40
+  putc(fd, 'x');
+ 460:	4d41                	li	s10,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 462:	00000b97          	auipc	s7,0x0
+ 466:	3c6b8b93          	addi	s7,s7,966 # 828 <digits>
+ 46a:	a839                	j	488 <vprintf+0x6a>
+        putc(fd, c);
+ 46c:	85ca                	mv	a1,s2
+ 46e:	8556                	mv	a0,s5
+ 470:	00000097          	auipc	ra,0x0
+ 474:	ee0080e7          	jalr	-288(ra) # 350 <putc>
+ 478:	a019                	j	47e <vprintf+0x60>
+    } else if(state == '%'){
+ 47a:	01498d63          	beq	s3,s4,494 <vprintf+0x76>
+  for(i = 0; fmt[i]; i++){
+ 47e:	0485                	addi	s1,s1,1
+ 480:	fff4c903          	lbu	s2,-1(s1)
+ 484:	14090d63          	beqz	s2,5de <vprintf+0x1c0>
+    if(state == 0){
+ 488:	fe0999e3          	bnez	s3,47a <vprintf+0x5c>
+      if(c == '%'){
+ 48c:	ff4910e3          	bne	s2,s4,46c <vprintf+0x4e>
+        state = '%';
+ 490:	89d2                	mv	s3,s4
+ 492:	b7f5                	j	47e <vprintf+0x60>
+      if(c == 'd'){
+ 494:	11490c63          	beq	s2,s4,5ac <vprintf+0x18e>
+ 498:	f9d9079b          	addiw	a5,s2,-99
+ 49c:	0ff7f793          	zext.b	a5,a5
+ 4a0:	10fc6e63          	bltu	s8,a5,5bc <vprintf+0x19e>
+ 4a4:	f9d9079b          	addiw	a5,s2,-99
+ 4a8:	0ff7f713          	zext.b	a4,a5
+ 4ac:	10ec6863          	bltu	s8,a4,5bc <vprintf+0x19e>
+ 4b0:	00271793          	slli	a5,a4,0x2
+ 4b4:	97e6                	add	a5,a5,s9
+ 4b6:	439c                	lw	a5,0(a5)
+ 4b8:	97e6                	add	a5,a5,s9
+ 4ba:	8782                	jr	a5
+        printint(fd, va_arg(ap, int), 10, 1);
+ 4bc:	008b0913          	addi	s2,s6,8
+ 4c0:	4685                	li	a3,1
+ 4c2:	4629                	li	a2,10
+ 4c4:	000b2583          	lw	a1,0(s6)
+ 4c8:	8556                	mv	a0,s5
+ 4ca:	00000097          	auipc	ra,0x0
+ 4ce:	ea8080e7          	jalr	-344(ra) # 372 <printint>
+ 4d2:	8b4a                	mv	s6,s2
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 4d4:	4981                	li	s3,0
+ 4d6:	b765                	j	47e <vprintf+0x60>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 4d8:	008b0913          	addi	s2,s6,8
+ 4dc:	4681                	li	a3,0
+ 4de:	4629                	li	a2,10
+ 4e0:	000b2583          	lw	a1,0(s6)
+ 4e4:	8556                	mv	a0,s5
+ 4e6:	00000097          	auipc	ra,0x0
+ 4ea:	e8c080e7          	jalr	-372(ra) # 372 <printint>
+ 4ee:	8b4a                	mv	s6,s2
+      state = 0;
+ 4f0:	4981                	li	s3,0
+ 4f2:	b771                	j	47e <vprintf+0x60>
+        printint(fd, va_arg(ap, int), 16, 0);
+ 4f4:	008b0913          	addi	s2,s6,8
+ 4f8:	4681                	li	a3,0
+ 4fa:	866a                	mv	a2,s10
+ 4fc:	000b2583          	lw	a1,0(s6)
+ 500:	8556                	mv	a0,s5
+ 502:	00000097          	auipc	ra,0x0
+ 506:	e70080e7          	jalr	-400(ra) # 372 <printint>
+ 50a:	8b4a                	mv	s6,s2
+      state = 0;
+ 50c:	4981                	li	s3,0
+ 50e:	bf85                	j	47e <vprintf+0x60>
+        printptr(fd, va_arg(ap, uint64));
+ 510:	008b0793          	addi	a5,s6,8
+ 514:	f8f43423          	sd	a5,-120(s0)
+ 518:	000b3983          	ld	s3,0(s6)
+  putc(fd, '0');
+ 51c:	03000593          	li	a1,48
+ 520:	8556                	mv	a0,s5
+ 522:	00000097          	auipc	ra,0x0
+ 526:	e2e080e7          	jalr	-466(ra) # 350 <putc>
+  putc(fd, 'x');
+ 52a:	07800593          	li	a1,120
+ 52e:	8556                	mv	a0,s5
+ 530:	00000097          	auipc	ra,0x0
+ 534:	e20080e7          	jalr	-480(ra) # 350 <putc>
+ 538:	896a                	mv	s2,s10
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 53a:	03c9d793          	srli	a5,s3,0x3c
+ 53e:	97de                	add	a5,a5,s7
+ 540:	0007c583          	lbu	a1,0(a5)
+ 544:	8556                	mv	a0,s5
+ 546:	00000097          	auipc	ra,0x0
+ 54a:	e0a080e7          	jalr	-502(ra) # 350 <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+ 54e:	0992                	slli	s3,s3,0x4
+ 550:	397d                	addiw	s2,s2,-1
+ 552:	fe0914e3          	bnez	s2,53a <vprintf+0x11c>
+        printptr(fd, va_arg(ap, uint64));
+ 556:	f8843b03          	ld	s6,-120(s0)
+      state = 0;
+ 55a:	4981                	li	s3,0
+ 55c:	b70d                	j	47e <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 55e:	008b0913          	addi	s2,s6,8
+ 562:	000b3983          	ld	s3,0(s6)
+        if(s == 0)
+ 566:	02098163          	beqz	s3,588 <vprintf+0x16a>
+        while(*s != 0){
+ 56a:	0009c583          	lbu	a1,0(s3)
+ 56e:	c5ad                	beqz	a1,5d8 <vprintf+0x1ba>
+          putc(fd, *s);
+ 570:	8556                	mv	a0,s5
+ 572:	00000097          	auipc	ra,0x0
+ 576:	dde080e7          	jalr	-546(ra) # 350 <putc>
+          s++;
+ 57a:	0985                	addi	s3,s3,1
+        while(*s != 0){
+ 57c:	0009c583          	lbu	a1,0(s3)
+ 580:	f9e5                	bnez	a1,570 <vprintf+0x152>
+        s = va_arg(ap, char*);
+ 582:	8b4a                	mv	s6,s2
+      state = 0;
+ 584:	4981                	li	s3,0
+ 586:	bde5                	j	47e <vprintf+0x60>
+          s = "(null)";
+ 588:	00000997          	auipc	s3,0x0
+ 58c:	24098993          	addi	s3,s3,576 # 7c8 <malloc+0xe6>
+        while(*s != 0){
+ 590:	85ee                	mv	a1,s11
+ 592:	bff9                	j	570 <vprintf+0x152>
+        putc(fd, va_arg(ap, uint));
+ 594:	008b0913          	addi	s2,s6,8
+ 598:	000b4583          	lbu	a1,0(s6)
+ 59c:	8556                	mv	a0,s5
+ 59e:	00000097          	auipc	ra,0x0
+ 5a2:	db2080e7          	jalr	-590(ra) # 350 <putc>
+ 5a6:	8b4a                	mv	s6,s2
+      state = 0;
+ 5a8:	4981                	li	s3,0
+ 5aa:	bdd1                	j	47e <vprintf+0x60>
+        putc(fd, c);
+ 5ac:	85d2                	mv	a1,s4
+ 5ae:	8556                	mv	a0,s5
+ 5b0:	00000097          	auipc	ra,0x0
+ 5b4:	da0080e7          	jalr	-608(ra) # 350 <putc>
+      state = 0;
+ 5b8:	4981                	li	s3,0
+ 5ba:	b5d1                	j	47e <vprintf+0x60>
+        putc(fd, '%');
+ 5bc:	85d2                	mv	a1,s4
+ 5be:	8556                	mv	a0,s5
+ 5c0:	00000097          	auipc	ra,0x0
+ 5c4:	d90080e7          	jalr	-624(ra) # 350 <putc>
+        putc(fd, c);
+ 5c8:	85ca                	mv	a1,s2
+ 5ca:	8556                	mv	a0,s5
+ 5cc:	00000097          	auipc	ra,0x0
+ 5d0:	d84080e7          	jalr	-636(ra) # 350 <putc>
+      state = 0;
+ 5d4:	4981                	li	s3,0
+ 5d6:	b565                	j	47e <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 5d8:	8b4a                	mv	s6,s2
+      state = 0;
+ 5da:	4981                	li	s3,0
+ 5dc:	b54d                	j	47e <vprintf+0x60>
+    }
+  }
+}
+ 5de:	70e6                	ld	ra,120(sp)
+ 5e0:	7446                	ld	s0,112(sp)
+ 5e2:	74a6                	ld	s1,104(sp)
+ 5e4:	7906                	ld	s2,96(sp)
+ 5e6:	69e6                	ld	s3,88(sp)
+ 5e8:	6a46                	ld	s4,80(sp)
+ 5ea:	6aa6                	ld	s5,72(sp)
+ 5ec:	6b06                	ld	s6,64(sp)
+ 5ee:	7be2                	ld	s7,56(sp)
+ 5f0:	7c42                	ld	s8,48(sp)
+ 5f2:	7ca2                	ld	s9,40(sp)
+ 5f4:	7d02                	ld	s10,32(sp)
+ 5f6:	6de2                	ld	s11,24(sp)
+ 5f8:	6109                	addi	sp,sp,128
+ 5fa:	8082                	ret
+
+00000000000005fc <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+ 5fc:	715d                	addi	sp,sp,-80
+ 5fe:	ec06                	sd	ra,24(sp)
+ 600:	e822                	sd	s0,16(sp)
+ 602:	1000                	addi	s0,sp,32
+ 604:	e010                	sd	a2,0(s0)
+ 606:	e414                	sd	a3,8(s0)
+ 608:	e818                	sd	a4,16(s0)
+ 60a:	ec1c                	sd	a5,24(s0)
+ 60c:	03043023          	sd	a6,32(s0)
+ 610:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 614:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+ 618:	8622                	mv	a2,s0
+ 61a:	00000097          	auipc	ra,0x0
+ 61e:	e04080e7          	jalr	-508(ra) # 41e <vprintf>
+}
+ 622:	60e2                	ld	ra,24(sp)
+ 624:	6442                	ld	s0,16(sp)
+ 626:	6161                	addi	sp,sp,80
+ 628:	8082                	ret
+
+000000000000062a <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+ 62a:	711d                	addi	sp,sp,-96
+ 62c:	ec06                	sd	ra,24(sp)
+ 62e:	e822                	sd	s0,16(sp)
+ 630:	1000                	addi	s0,sp,32
+ 632:	e40c                	sd	a1,8(s0)
+ 634:	e810                	sd	a2,16(s0)
+ 636:	ec14                	sd	a3,24(s0)
+ 638:	f018                	sd	a4,32(s0)
+ 63a:	f41c                	sd	a5,40(s0)
+ 63c:	03043823          	sd	a6,48(s0)
+ 640:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 644:	00840613          	addi	a2,s0,8
+ 648:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+ 64c:	85aa                	mv	a1,a0
+ 64e:	4505                	li	a0,1
+ 650:	00000097          	auipc	ra,0x0
+ 654:	dce080e7          	jalr	-562(ra) # 41e <vprintf>
+}
+ 658:	60e2                	ld	ra,24(sp)
+ 65a:	6442                	ld	s0,16(sp)
+ 65c:	6125                	addi	sp,sp,96
+ 65e:	8082                	ret
+
+0000000000000660 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 660:	1141                	addi	sp,sp,-16
+ 662:	e422                	sd	s0,8(sp)
+ 664:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 666:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 66a:	00000797          	auipc	a5,0x0
+ 66e:	1d67b783          	ld	a5,470(a5) # 840 <freep>
+ 672:	a02d                	j	69c <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 674:	4618                	lw	a4,8(a2)
+ 676:	9f2d                	addw	a4,a4,a1
+ 678:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 67c:	6398                	ld	a4,0(a5)
+ 67e:	6310                	ld	a2,0(a4)
+ 680:	a83d                	j	6be <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 682:	ff852703          	lw	a4,-8(a0)
+ 686:	9f31                	addw	a4,a4,a2
+ 688:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+ 68a:	ff053683          	ld	a3,-16(a0)
+ 68e:	a091                	j	6d2 <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 690:	6398                	ld	a4,0(a5)
+ 692:	00e7e463          	bltu	a5,a4,69a <free+0x3a>
+ 696:	00e6ea63          	bltu	a3,a4,6aa <free+0x4a>
+{
+ 69a:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 69c:	fed7fae3          	bgeu	a5,a3,690 <free+0x30>
+ 6a0:	6398                	ld	a4,0(a5)
+ 6a2:	00e6e463          	bltu	a3,a4,6aa <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6a6:	fee7eae3          	bltu	a5,a4,69a <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+ 6aa:	ff852583          	lw	a1,-8(a0)
+ 6ae:	6390                	ld	a2,0(a5)
+ 6b0:	02059813          	slli	a6,a1,0x20
+ 6b4:	01c85713          	srli	a4,a6,0x1c
+ 6b8:	9736                	add	a4,a4,a3
+ 6ba:	fae60de3          	beq	a2,a4,674 <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6be:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+ 6c2:	4790                	lw	a2,8(a5)
+ 6c4:	02061593          	slli	a1,a2,0x20
+ 6c8:	01c5d713          	srli	a4,a1,0x1c
+ 6cc:	973e                	add	a4,a4,a5
+ 6ce:	fae68ae3          	beq	a3,a4,682 <free+0x22>
+    p->s.ptr = bp->s.ptr;
+ 6d2:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 6d4:	00000717          	auipc	a4,0x0
+ 6d8:	16f73623          	sd	a5,364(a4) # 840 <freep>
+}
+ 6dc:	6422                	ld	s0,8(sp)
+ 6de:	0141                	addi	sp,sp,16
+ 6e0:	8082                	ret
+
+00000000000006e2 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6e2:	7139                	addi	sp,sp,-64
+ 6e4:	fc06                	sd	ra,56(sp)
+ 6e6:	f822                	sd	s0,48(sp)
+ 6e8:	f426                	sd	s1,40(sp)
+ 6ea:	f04a                	sd	s2,32(sp)
+ 6ec:	ec4e                	sd	s3,24(sp)
+ 6ee:	e852                	sd	s4,16(sp)
+ 6f0:	e456                	sd	s5,8(sp)
+ 6f2:	e05a                	sd	s6,0(sp)
+ 6f4:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6f6:	02051493          	slli	s1,a0,0x20
+ 6fa:	9081                	srli	s1,s1,0x20
+ 6fc:	04bd                	addi	s1,s1,15
+ 6fe:	8091                	srli	s1,s1,0x4
+ 700:	0014899b          	addiw	s3,s1,1
+ 704:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+ 706:	00000517          	auipc	a0,0x0
+ 70a:	13a53503          	ld	a0,314(a0) # 840 <freep>
+ 70e:	c515                	beqz	a0,73a <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 710:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 712:	4798                	lw	a4,8(a5)
+ 714:	02977f63          	bgeu	a4,s1,752 <malloc+0x70>
+ 718:	8a4e                	mv	s4,s3
+ 71a:	0009871b          	sext.w	a4,s3
+ 71e:	6685                	lui	a3,0x1
+ 720:	00d77363          	bgeu	a4,a3,726 <malloc+0x44>
+ 724:	6a05                	lui	s4,0x1
+ 726:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+ 72a:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 72e:	00000917          	auipc	s2,0x0
+ 732:	11290913          	addi	s2,s2,274 # 840 <freep>
+  if(p == (char*)-1)
+ 736:	5afd                	li	s5,-1
+ 738:	a895                	j	7ac <malloc+0xca>
+    base.s.ptr = freep = prevp = &base;
+ 73a:	00000797          	auipc	a5,0x0
+ 73e:	10e78793          	addi	a5,a5,270 # 848 <base>
+ 742:	00000717          	auipc	a4,0x0
+ 746:	0ef73f23          	sd	a5,254(a4) # 840 <freep>
+ 74a:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+ 74c:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+ 750:	b7e1                	j	718 <malloc+0x36>
+      if(p->s.size == nunits)
+ 752:	02e48c63          	beq	s1,a4,78a <malloc+0xa8>
+        p->s.size -= nunits;
+ 756:	4137073b          	subw	a4,a4,s3
+ 75a:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+ 75c:	02071693          	slli	a3,a4,0x20
+ 760:	01c6d713          	srli	a4,a3,0x1c
+ 764:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+ 766:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+ 76a:	00000717          	auipc	a4,0x0
+ 76e:	0ca73b23          	sd	a0,214(a4) # 840 <freep>
+      return (void*)(p + 1);
+ 772:	01078513          	addi	a0,a5,16
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ 776:	70e2                	ld	ra,56(sp)
+ 778:	7442                	ld	s0,48(sp)
+ 77a:	74a2                	ld	s1,40(sp)
+ 77c:	7902                	ld	s2,32(sp)
+ 77e:	69e2                	ld	s3,24(sp)
+ 780:	6a42                	ld	s4,16(sp)
+ 782:	6aa2                	ld	s5,8(sp)
+ 784:	6b02                	ld	s6,0(sp)
+ 786:	6121                	addi	sp,sp,64
+ 788:	8082                	ret
+        prevp->s.ptr = p->s.ptr;
+ 78a:	6398                	ld	a4,0(a5)
+ 78c:	e118                	sd	a4,0(a0)
+ 78e:	bff1                	j	76a <malloc+0x88>
+  hp->s.size = nu;
+ 790:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+ 794:	0541                	addi	a0,a0,16
+ 796:	00000097          	auipc	ra,0x0
+ 79a:	eca080e7          	jalr	-310(ra) # 660 <free>
+  return freep;
+ 79e:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+ 7a2:	d971                	beqz	a0,776 <malloc+0x94>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7a4:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 7a6:	4798                	lw	a4,8(a5)
+ 7a8:	fa9775e3          	bgeu	a4,s1,752 <malloc+0x70>
+    if(p == freep)
+ 7ac:	00093703          	ld	a4,0(s2)
+ 7b0:	853e                	mv	a0,a5
+ 7b2:	fef719e3          	bne	a4,a5,7a4 <malloc+0xc2>
+  p = sbrk(nu * sizeof(Header));
+ 7b6:	8552                	mv	a0,s4
+ 7b8:	00000097          	auipc	ra,0x0
+ 7bc:	b50080e7          	jalr	-1200(ra) # 308 <sbrk>
+  if(p == (char*)-1)
+ 7c0:	fd5518e3          	bne	a0,s5,790 <malloc+0xae>
+        return 0;
+ 7c4:	4501                	li	a0,0
+ 7c6:	bf45                	j	776 <malloc+0x94>
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/topprior.c os-workshop/user/topprior.c
--- xv6-riscv/user/topprior.c	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/topprior.c	2022-04-28 18:25:44.000000000 -0300
@@ -0,0 +1,10 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main() {
+  for(;;){
+    setp(1);
+  }
+  exit(0);
+}
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/topprior.d os-workshop/user/topprior.d
--- xv6-riscv/user/topprior.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/topprior.d	2022-05-28 22:34:30.000000000 -0300
@@ -0,0 +1 @@
+user/topprior.o: user/topprior.c kernel/types.h kernel/stat.h user/user.h
Binary files xv6-riscv/user/topprior.o and os-workshop/user/topprior.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/topprior.sym os-workshop/user/topprior.sym
--- xv6-riscv/user/topprior.sym	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/topprior.sym	2022-05-28 22:34:30.000000000 -0300
@@ -0,0 +1,76 @@
+0000000000000000 .text
+00000000000007c8 .rodata
+0000000000000840 .sbss
+0000000000000848 .bss
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_aranges
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_line
+0000000000000000 .debug_frame
+0000000000000000 .debug_str
+0000000000000000 .debug_line_str
+0000000000000000 .debug_loclists
+0000000000000000 .debug_rnglists
+0000000000000000 topprior.c
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+0000000000000350 putc
+0000000000000372 printint
+0000000000000828 digits
+0000000000000000 umalloc.c
+0000000000000840 freep
+0000000000000848 base
+0000000000000014 strcpy
+000000000000062a printf
+0000000000001039 __global_pointer$
+00000000000001ce memmove
+00000000000002c8 mknod
+0000000000000330 semdown
+00000000000000cc gets
+0000000000000839 __SDATA_BEGIN__
+0000000000000328 semget
+0000000000000300 getpid
+0000000000000260 memcpy
+00000000000006e2 malloc
+0000000000000340 semclose
+0000000000000310 sleep
+0000000000000290 pipe
+00000000000002a0 write
+00000000000002d8 fstat
+00000000000005fc fprintf
+00000000000002b0 kill
+000000000000041e vprintf
+00000000000002f0 chdir
+00000000000002b8 exec
+0000000000000288 wait
+0000000000000298 read
+00000000000002d0 unlink
+0000000000000226 memcmp
+0000000000000278 fork
+0000000000000858 __BSS_END__
+0000000000000308 sbrk
+0000000000000318 uptime
+0000000000000839 __bss_start
+0000000000000086 memset
+0000000000000000 main
+0000000000000348 timeout
+0000000000000030 strcmp
+00000000000002f8 dup
+0000000000000839 __DATA_BEGIN__
+0000000000000140 stat
+0000000000000839 _edata
+0000000000000320 setp
+0000000000000858 _end
+00000000000002e0 link
+0000000000000280 exit
+0000000000000186 atoi
+000000000000005c strlen
+00000000000002c0 open
+0000000000000338 semup
+00000000000000a8 strchr
+00000000000002e8 mkdir
+00000000000002a8 close
+0000000000000660 free
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/ulib.d os-workshop/user/ulib.d
--- xv6-riscv/user/ulib.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/ulib.d	2022-05-28 22:34:29.000000000 -0300
@@ -0,0 +1,2 @@
+user/ulib.o: user/ulib.c kernel/types.h kernel/stat.h kernel/fcntl.h \
+ user/user.h
Binary files xv6-riscv/user/ulib.o and os-workshop/user/ulib.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/umalloc.d os-workshop/user/umalloc.d
--- xv6-riscv/user/umalloc.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/umalloc.d	2022-05-28 22:34:30.000000000 -0300
@@ -0,0 +1,2 @@
+user/umalloc.o: user/umalloc.c kernel/types.h kernel/stat.h user/user.h \
+ kernel/param.h
Binary files xv6-riscv/user/umalloc.o and os-workshop/user/umalloc.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/user.h os-workshop/user/user.h
--- xv6-riscv/user/user.h	2022-05-28 22:43:35.000000000 -0300
+++ os-workshop/user/user.h	2022-05-28 21:58:57.000000000 -0300
@@ -23,6 +23,12 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int setp(int);
+int semget(int, int);
+int semclose(int);
+int semdown(int);
+int semup(int);
+int timeout(int);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/usertests.asm os-workshop/user/usertests.asm
--- xv6-riscv/user/usertests.asm	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/usertests.asm	2022-05-28 22:34:37.000000000 -0300
@@ -0,0 +1,10128 @@
+
+user/_usertests:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <copyinstr1>:
+}
+
+// what if you pass ridiculous string pointers to system calls?
+void
+copyinstr1(char *s)
+{
+       0:	1141                	addi	sp,sp,-16
+       2:	e406                	sd	ra,8(sp)
+       4:	e022                	sd	s0,0(sp)
+       6:	0800                	addi	s0,sp,16
+  uint64 addrs[] = { 0x80000000LL, 0xffffffffffffffff };
+
+  for(int ai = 0; ai < 2; ai++){
+    uint64 addr = addrs[ai];
+
+    int fd = open((char *)addr, O_CREATE|O_WRONLY);
+       8:	20100593          	li	a1,513
+       c:	4505                	li	a0,1
+       e:	057e                	slli	a0,a0,0x1f
+      10:	00006097          	auipc	ra,0x6
+      14:	872080e7          	jalr	-1934(ra) # 5882 <open>
+    if(fd >= 0){
+      18:	02055063          	bgez	a0,38 <copyinstr1+0x38>
+    int fd = open((char *)addr, O_CREATE|O_WRONLY);
+      1c:	20100593          	li	a1,513
+      20:	557d                	li	a0,-1
+      22:	00006097          	auipc	ra,0x6
+      26:	860080e7          	jalr	-1952(ra) # 5882 <open>
+    uint64 addr = addrs[ai];
+      2a:	55fd                	li	a1,-1
+    if(fd >= 0){
+      2c:	00055863          	bgez	a0,3c <copyinstr1+0x3c>
+      printf("open(%p) returned %d, not -1\n", addr, fd);
+      exit(1);
+    }
+  }
+}
+      30:	60a2                	ld	ra,8(sp)
+      32:	6402                	ld	s0,0(sp)
+      34:	0141                	addi	sp,sp,16
+      36:	8082                	ret
+    uint64 addr = addrs[ai];
+      38:	4585                	li	a1,1
+      3a:	05fe                	slli	a1,a1,0x1f
+      printf("open(%p) returned %d, not -1\n", addr, fd);
+      3c:	862a                	mv	a2,a0
+      3e:	00006517          	auipc	a0,0x6
+      42:	d5250513          	addi	a0,a0,-686 # 5d90 <malloc+0xec>
+      46:	00006097          	auipc	ra,0x6
+      4a:	ba6080e7          	jalr	-1114(ra) # 5bec <printf>
+      exit(1);
+      4e:	4505                	li	a0,1
+      50:	00005097          	auipc	ra,0x5
+      54:	7f2080e7          	jalr	2034(ra) # 5842 <exit>
+
+0000000000000058 <bsstest>:
+void
+bsstest(char *s)
+{
+  int i;
+
+  for(i = 0; i < sizeof(uninit); i++){
+      58:	00009797          	auipc	a5,0x9
+      5c:	6a078793          	addi	a5,a5,1696 # 96f8 <uninit>
+      60:	0000c697          	auipc	a3,0xc
+      64:	da868693          	addi	a3,a3,-600 # be08 <buf>
+    if(uninit[i] != '\0'){
+      68:	0007c703          	lbu	a4,0(a5)
+      6c:	e709                	bnez	a4,76 <bsstest+0x1e>
+  for(i = 0; i < sizeof(uninit); i++){
+      6e:	0785                	addi	a5,a5,1
+      70:	fed79ce3          	bne	a5,a3,68 <bsstest+0x10>
+      74:	8082                	ret
+{
+      76:	1141                	addi	sp,sp,-16
+      78:	e406                	sd	ra,8(sp)
+      7a:	e022                	sd	s0,0(sp)
+      7c:	0800                	addi	s0,sp,16
+      printf("%s: bss test failed\n", s);
+      7e:	85aa                	mv	a1,a0
+      80:	00006517          	auipc	a0,0x6
+      84:	d3050513          	addi	a0,a0,-720 # 5db0 <malloc+0x10c>
+      88:	00006097          	auipc	ra,0x6
+      8c:	b64080e7          	jalr	-1180(ra) # 5bec <printf>
+      exit(1);
+      90:	4505                	li	a0,1
+      92:	00005097          	auipc	ra,0x5
+      96:	7b0080e7          	jalr	1968(ra) # 5842 <exit>
+
+000000000000009a <opentest>:
+{
+      9a:	1101                	addi	sp,sp,-32
+      9c:	ec06                	sd	ra,24(sp)
+      9e:	e822                	sd	s0,16(sp)
+      a0:	e426                	sd	s1,8(sp)
+      a2:	1000                	addi	s0,sp,32
+      a4:	84aa                	mv	s1,a0
+  fd = open("echo", 0);
+      a6:	4581                	li	a1,0
+      a8:	00006517          	auipc	a0,0x6
+      ac:	d2050513          	addi	a0,a0,-736 # 5dc8 <malloc+0x124>
+      b0:	00005097          	auipc	ra,0x5
+      b4:	7d2080e7          	jalr	2002(ra) # 5882 <open>
+  if(fd < 0){
+      b8:	02054663          	bltz	a0,e4 <opentest+0x4a>
+  close(fd);
+      bc:	00005097          	auipc	ra,0x5
+      c0:	7ae080e7          	jalr	1966(ra) # 586a <close>
+  fd = open("doesnotexist", 0);
+      c4:	4581                	li	a1,0
+      c6:	00006517          	auipc	a0,0x6
+      ca:	d2250513          	addi	a0,a0,-734 # 5de8 <malloc+0x144>
+      ce:	00005097          	auipc	ra,0x5
+      d2:	7b4080e7          	jalr	1972(ra) # 5882 <open>
+  if(fd >= 0){
+      d6:	02055563          	bgez	a0,100 <opentest+0x66>
+}
+      da:	60e2                	ld	ra,24(sp)
+      dc:	6442                	ld	s0,16(sp)
+      de:	64a2                	ld	s1,8(sp)
+      e0:	6105                	addi	sp,sp,32
+      e2:	8082                	ret
+    printf("%s: open echo failed!\n", s);
+      e4:	85a6                	mv	a1,s1
+      e6:	00006517          	auipc	a0,0x6
+      ea:	cea50513          	addi	a0,a0,-790 # 5dd0 <malloc+0x12c>
+      ee:	00006097          	auipc	ra,0x6
+      f2:	afe080e7          	jalr	-1282(ra) # 5bec <printf>
+    exit(1);
+      f6:	4505                	li	a0,1
+      f8:	00005097          	auipc	ra,0x5
+      fc:	74a080e7          	jalr	1866(ra) # 5842 <exit>
+    printf("%s: open doesnotexist succeeded!\n", s);
+     100:	85a6                	mv	a1,s1
+     102:	00006517          	auipc	a0,0x6
+     106:	cf650513          	addi	a0,a0,-778 # 5df8 <malloc+0x154>
+     10a:	00006097          	auipc	ra,0x6
+     10e:	ae2080e7          	jalr	-1310(ra) # 5bec <printf>
+    exit(1);
+     112:	4505                	li	a0,1
+     114:	00005097          	auipc	ra,0x5
+     118:	72e080e7          	jalr	1838(ra) # 5842 <exit>
+
+000000000000011c <truncate2>:
+{
+     11c:	7179                	addi	sp,sp,-48
+     11e:	f406                	sd	ra,40(sp)
+     120:	f022                	sd	s0,32(sp)
+     122:	ec26                	sd	s1,24(sp)
+     124:	e84a                	sd	s2,16(sp)
+     126:	e44e                	sd	s3,8(sp)
+     128:	1800                	addi	s0,sp,48
+     12a:	89aa                	mv	s3,a0
+  unlink("truncfile");
+     12c:	00006517          	auipc	a0,0x6
+     130:	cf450513          	addi	a0,a0,-780 # 5e20 <malloc+0x17c>
+     134:	00005097          	auipc	ra,0x5
+     138:	75e080e7          	jalr	1886(ra) # 5892 <unlink>
+  int fd1 = open("truncfile", O_CREATE|O_TRUNC|O_WRONLY);
+     13c:	60100593          	li	a1,1537
+     140:	00006517          	auipc	a0,0x6
+     144:	ce050513          	addi	a0,a0,-800 # 5e20 <malloc+0x17c>
+     148:	00005097          	auipc	ra,0x5
+     14c:	73a080e7          	jalr	1850(ra) # 5882 <open>
+     150:	84aa                	mv	s1,a0
+  write(fd1, "abcd", 4);
+     152:	4611                	li	a2,4
+     154:	00006597          	auipc	a1,0x6
+     158:	cdc58593          	addi	a1,a1,-804 # 5e30 <malloc+0x18c>
+     15c:	00005097          	auipc	ra,0x5
+     160:	706080e7          	jalr	1798(ra) # 5862 <write>
+  int fd2 = open("truncfile", O_TRUNC|O_WRONLY);
+     164:	40100593          	li	a1,1025
+     168:	00006517          	auipc	a0,0x6
+     16c:	cb850513          	addi	a0,a0,-840 # 5e20 <malloc+0x17c>
+     170:	00005097          	auipc	ra,0x5
+     174:	712080e7          	jalr	1810(ra) # 5882 <open>
+     178:	892a                	mv	s2,a0
+  int n = write(fd1, "x", 1);
+     17a:	4605                	li	a2,1
+     17c:	00006597          	auipc	a1,0x6
+     180:	cbc58593          	addi	a1,a1,-836 # 5e38 <malloc+0x194>
+     184:	8526                	mv	a0,s1
+     186:	00005097          	auipc	ra,0x5
+     18a:	6dc080e7          	jalr	1756(ra) # 5862 <write>
+  if(n != -1){
+     18e:	57fd                	li	a5,-1
+     190:	02f51b63          	bne	a0,a5,1c6 <truncate2+0xaa>
+  unlink("truncfile");
+     194:	00006517          	auipc	a0,0x6
+     198:	c8c50513          	addi	a0,a0,-884 # 5e20 <malloc+0x17c>
+     19c:	00005097          	auipc	ra,0x5
+     1a0:	6f6080e7          	jalr	1782(ra) # 5892 <unlink>
+  close(fd1);
+     1a4:	8526                	mv	a0,s1
+     1a6:	00005097          	auipc	ra,0x5
+     1aa:	6c4080e7          	jalr	1732(ra) # 586a <close>
+  close(fd2);
+     1ae:	854a                	mv	a0,s2
+     1b0:	00005097          	auipc	ra,0x5
+     1b4:	6ba080e7          	jalr	1722(ra) # 586a <close>
+}
+     1b8:	70a2                	ld	ra,40(sp)
+     1ba:	7402                	ld	s0,32(sp)
+     1bc:	64e2                	ld	s1,24(sp)
+     1be:	6942                	ld	s2,16(sp)
+     1c0:	69a2                	ld	s3,8(sp)
+     1c2:	6145                	addi	sp,sp,48
+     1c4:	8082                	ret
+    printf("%s: write returned %d, expected -1\n", s, n);
+     1c6:	862a                	mv	a2,a0
+     1c8:	85ce                	mv	a1,s3
+     1ca:	00006517          	auipc	a0,0x6
+     1ce:	c7650513          	addi	a0,a0,-906 # 5e40 <malloc+0x19c>
+     1d2:	00006097          	auipc	ra,0x6
+     1d6:	a1a080e7          	jalr	-1510(ra) # 5bec <printf>
+    exit(1);
+     1da:	4505                	li	a0,1
+     1dc:	00005097          	auipc	ra,0x5
+     1e0:	666080e7          	jalr	1638(ra) # 5842 <exit>
+
+00000000000001e4 <createtest>:
+{
+     1e4:	7179                	addi	sp,sp,-48
+     1e6:	f406                	sd	ra,40(sp)
+     1e8:	f022                	sd	s0,32(sp)
+     1ea:	ec26                	sd	s1,24(sp)
+     1ec:	e84a                	sd	s2,16(sp)
+     1ee:	1800                	addi	s0,sp,48
+  name[0] = 'a';
+     1f0:	06100793          	li	a5,97
+     1f4:	fcf40c23          	sb	a5,-40(s0)
+  name[2] = '\0';
+     1f8:	fc040d23          	sb	zero,-38(s0)
+     1fc:	03000493          	li	s1,48
+  for(i = 0; i < N; i++){
+     200:	06400913          	li	s2,100
+    name[1] = '0' + i;
+     204:	fc940ca3          	sb	s1,-39(s0)
+    fd = open(name, O_CREATE|O_RDWR);
+     208:	20200593          	li	a1,514
+     20c:	fd840513          	addi	a0,s0,-40
+     210:	00005097          	auipc	ra,0x5
+     214:	672080e7          	jalr	1650(ra) # 5882 <open>
+    close(fd);
+     218:	00005097          	auipc	ra,0x5
+     21c:	652080e7          	jalr	1618(ra) # 586a <close>
+  for(i = 0; i < N; i++){
+     220:	2485                	addiw	s1,s1,1
+     222:	0ff4f493          	zext.b	s1,s1
+     226:	fd249fe3          	bne	s1,s2,204 <createtest+0x20>
+  name[0] = 'a';
+     22a:	06100793          	li	a5,97
+     22e:	fcf40c23          	sb	a5,-40(s0)
+  name[2] = '\0';
+     232:	fc040d23          	sb	zero,-38(s0)
+     236:	03000493          	li	s1,48
+  for(i = 0; i < N; i++){
+     23a:	06400913          	li	s2,100
+    name[1] = '0' + i;
+     23e:	fc940ca3          	sb	s1,-39(s0)
+    unlink(name);
+     242:	fd840513          	addi	a0,s0,-40
+     246:	00005097          	auipc	ra,0x5
+     24a:	64c080e7          	jalr	1612(ra) # 5892 <unlink>
+  for(i = 0; i < N; i++){
+     24e:	2485                	addiw	s1,s1,1
+     250:	0ff4f493          	zext.b	s1,s1
+     254:	ff2495e3          	bne	s1,s2,23e <createtest+0x5a>
+}
+     258:	70a2                	ld	ra,40(sp)
+     25a:	7402                	ld	s0,32(sp)
+     25c:	64e2                	ld	s1,24(sp)
+     25e:	6942                	ld	s2,16(sp)
+     260:	6145                	addi	sp,sp,48
+     262:	8082                	ret
+
+0000000000000264 <bigwrite>:
+{
+     264:	715d                	addi	sp,sp,-80
+     266:	e486                	sd	ra,72(sp)
+     268:	e0a2                	sd	s0,64(sp)
+     26a:	fc26                	sd	s1,56(sp)
+     26c:	f84a                	sd	s2,48(sp)
+     26e:	f44e                	sd	s3,40(sp)
+     270:	f052                	sd	s4,32(sp)
+     272:	ec56                	sd	s5,24(sp)
+     274:	e85a                	sd	s6,16(sp)
+     276:	e45e                	sd	s7,8(sp)
+     278:	0880                	addi	s0,sp,80
+     27a:	8baa                	mv	s7,a0
+  unlink("bigwrite");
+     27c:	00006517          	auipc	a0,0x6
+     280:	bec50513          	addi	a0,a0,-1044 # 5e68 <malloc+0x1c4>
+     284:	00005097          	auipc	ra,0x5
+     288:	60e080e7          	jalr	1550(ra) # 5892 <unlink>
+  for(sz = 499; sz < (MAXOPBLOCKS+2)*BSIZE; sz += 471){
+     28c:	1f300493          	li	s1,499
+    fd = open("bigwrite", O_CREATE | O_RDWR);
+     290:	00006a97          	auipc	s5,0x6
+     294:	bd8a8a93          	addi	s5,s5,-1064 # 5e68 <malloc+0x1c4>
+      int cc = write(fd, buf, sz);
+     298:	0000ca17          	auipc	s4,0xc
+     29c:	b70a0a13          	addi	s4,s4,-1168 # be08 <buf>
+  for(sz = 499; sz < (MAXOPBLOCKS+2)*BSIZE; sz += 471){
+     2a0:	6b0d                	lui	s6,0x3
+     2a2:	1c9b0b13          	addi	s6,s6,457 # 31c9 <dirtest+0x97>
+    fd = open("bigwrite", O_CREATE | O_RDWR);
+     2a6:	20200593          	li	a1,514
+     2aa:	8556                	mv	a0,s5
+     2ac:	00005097          	auipc	ra,0x5
+     2b0:	5d6080e7          	jalr	1494(ra) # 5882 <open>
+     2b4:	892a                	mv	s2,a0
+    if(fd < 0){
+     2b6:	04054d63          	bltz	a0,310 <bigwrite+0xac>
+      int cc = write(fd, buf, sz);
+     2ba:	8626                	mv	a2,s1
+     2bc:	85d2                	mv	a1,s4
+     2be:	00005097          	auipc	ra,0x5
+     2c2:	5a4080e7          	jalr	1444(ra) # 5862 <write>
+     2c6:	89aa                	mv	s3,a0
+      if(cc != sz){
+     2c8:	06a49263          	bne	s1,a0,32c <bigwrite+0xc8>
+      int cc = write(fd, buf, sz);
+     2cc:	8626                	mv	a2,s1
+     2ce:	85d2                	mv	a1,s4
+     2d0:	854a                	mv	a0,s2
+     2d2:	00005097          	auipc	ra,0x5
+     2d6:	590080e7          	jalr	1424(ra) # 5862 <write>
+      if(cc != sz){
+     2da:	04951a63          	bne	a0,s1,32e <bigwrite+0xca>
+    close(fd);
+     2de:	854a                	mv	a0,s2
+     2e0:	00005097          	auipc	ra,0x5
+     2e4:	58a080e7          	jalr	1418(ra) # 586a <close>
+    unlink("bigwrite");
+     2e8:	8556                	mv	a0,s5
+     2ea:	00005097          	auipc	ra,0x5
+     2ee:	5a8080e7          	jalr	1448(ra) # 5892 <unlink>
+  for(sz = 499; sz < (MAXOPBLOCKS+2)*BSIZE; sz += 471){
+     2f2:	1d74849b          	addiw	s1,s1,471
+     2f6:	fb6498e3          	bne	s1,s6,2a6 <bigwrite+0x42>
+}
+     2fa:	60a6                	ld	ra,72(sp)
+     2fc:	6406                	ld	s0,64(sp)
+     2fe:	74e2                	ld	s1,56(sp)
+     300:	7942                	ld	s2,48(sp)
+     302:	79a2                	ld	s3,40(sp)
+     304:	7a02                	ld	s4,32(sp)
+     306:	6ae2                	ld	s5,24(sp)
+     308:	6b42                	ld	s6,16(sp)
+     30a:	6ba2                	ld	s7,8(sp)
+     30c:	6161                	addi	sp,sp,80
+     30e:	8082                	ret
+      printf("%s: cannot create bigwrite\n", s);
+     310:	85de                	mv	a1,s7
+     312:	00006517          	auipc	a0,0x6
+     316:	b6650513          	addi	a0,a0,-1178 # 5e78 <malloc+0x1d4>
+     31a:	00006097          	auipc	ra,0x6
+     31e:	8d2080e7          	jalr	-1838(ra) # 5bec <printf>
+      exit(1);
+     322:	4505                	li	a0,1
+     324:	00005097          	auipc	ra,0x5
+     328:	51e080e7          	jalr	1310(ra) # 5842 <exit>
+      if(cc != sz){
+     32c:	89a6                	mv	s3,s1
+        printf("%s: write(%d) ret %d\n", s, sz, cc);
+     32e:	86aa                	mv	a3,a0
+     330:	864e                	mv	a2,s3
+     332:	85de                	mv	a1,s7
+     334:	00006517          	auipc	a0,0x6
+     338:	b6450513          	addi	a0,a0,-1180 # 5e98 <malloc+0x1f4>
+     33c:	00006097          	auipc	ra,0x6
+     340:	8b0080e7          	jalr	-1872(ra) # 5bec <printf>
+        exit(1);
+     344:	4505                	li	a0,1
+     346:	00005097          	auipc	ra,0x5
+     34a:	4fc080e7          	jalr	1276(ra) # 5842 <exit>
+
+000000000000034e <copyin>:
+{
+     34e:	715d                	addi	sp,sp,-80
+     350:	e486                	sd	ra,72(sp)
+     352:	e0a2                	sd	s0,64(sp)
+     354:	fc26                	sd	s1,56(sp)
+     356:	f84a                	sd	s2,48(sp)
+     358:	f44e                	sd	s3,40(sp)
+     35a:	f052                	sd	s4,32(sp)
+     35c:	0880                	addi	s0,sp,80
+  uint64 addrs[] = { 0x80000000LL, 0xffffffffffffffff };
+     35e:	4785                	li	a5,1
+     360:	07fe                	slli	a5,a5,0x1f
+     362:	fcf43023          	sd	a5,-64(s0)
+     366:	57fd                	li	a5,-1
+     368:	fcf43423          	sd	a5,-56(s0)
+  for(int ai = 0; ai < 2; ai++){
+     36c:	fc040913          	addi	s2,s0,-64
+    int fd = open("copyin1", O_CREATE|O_WRONLY);
+     370:	00006a17          	auipc	s4,0x6
+     374:	b40a0a13          	addi	s4,s4,-1216 # 5eb0 <malloc+0x20c>
+    uint64 addr = addrs[ai];
+     378:	00093983          	ld	s3,0(s2)
+    int fd = open("copyin1", O_CREATE|O_WRONLY);
+     37c:	20100593          	li	a1,513
+     380:	8552                	mv	a0,s4
+     382:	00005097          	auipc	ra,0x5
+     386:	500080e7          	jalr	1280(ra) # 5882 <open>
+     38a:	84aa                	mv	s1,a0
+    if(fd < 0){
+     38c:	08054863          	bltz	a0,41c <copyin+0xce>
+    int n = write(fd, (void*)addr, 8192);
+     390:	6609                	lui	a2,0x2
+     392:	85ce                	mv	a1,s3
+     394:	00005097          	auipc	ra,0x5
+     398:	4ce080e7          	jalr	1230(ra) # 5862 <write>
+    if(n >= 0){
+     39c:	08055d63          	bgez	a0,436 <copyin+0xe8>
+    close(fd);
+     3a0:	8526                	mv	a0,s1
+     3a2:	00005097          	auipc	ra,0x5
+     3a6:	4c8080e7          	jalr	1224(ra) # 586a <close>
+    unlink("copyin1");
+     3aa:	8552                	mv	a0,s4
+     3ac:	00005097          	auipc	ra,0x5
+     3b0:	4e6080e7          	jalr	1254(ra) # 5892 <unlink>
+    n = write(1, (char*)addr, 8192);
+     3b4:	6609                	lui	a2,0x2
+     3b6:	85ce                	mv	a1,s3
+     3b8:	4505                	li	a0,1
+     3ba:	00005097          	auipc	ra,0x5
+     3be:	4a8080e7          	jalr	1192(ra) # 5862 <write>
+    if(n > 0){
+     3c2:	08a04963          	bgtz	a0,454 <copyin+0x106>
+    if(pipe(fds) < 0){
+     3c6:	fb840513          	addi	a0,s0,-72
+     3ca:	00005097          	auipc	ra,0x5
+     3ce:	488080e7          	jalr	1160(ra) # 5852 <pipe>
+     3d2:	0a054063          	bltz	a0,472 <copyin+0x124>
+    n = write(fds[1], (char*)addr, 8192);
+     3d6:	6609                	lui	a2,0x2
+     3d8:	85ce                	mv	a1,s3
+     3da:	fbc42503          	lw	a0,-68(s0)
+     3de:	00005097          	auipc	ra,0x5
+     3e2:	484080e7          	jalr	1156(ra) # 5862 <write>
+    if(n > 0){
+     3e6:	0aa04363          	bgtz	a0,48c <copyin+0x13e>
+    close(fds[0]);
+     3ea:	fb842503          	lw	a0,-72(s0)
+     3ee:	00005097          	auipc	ra,0x5
+     3f2:	47c080e7          	jalr	1148(ra) # 586a <close>
+    close(fds[1]);
+     3f6:	fbc42503          	lw	a0,-68(s0)
+     3fa:	00005097          	auipc	ra,0x5
+     3fe:	470080e7          	jalr	1136(ra) # 586a <close>
+  for(int ai = 0; ai < 2; ai++){
+     402:	0921                	addi	s2,s2,8
+     404:	fd040793          	addi	a5,s0,-48
+     408:	f6f918e3          	bne	s2,a5,378 <copyin+0x2a>
+}
+     40c:	60a6                	ld	ra,72(sp)
+     40e:	6406                	ld	s0,64(sp)
+     410:	74e2                	ld	s1,56(sp)
+     412:	7942                	ld	s2,48(sp)
+     414:	79a2                	ld	s3,40(sp)
+     416:	7a02                	ld	s4,32(sp)
+     418:	6161                	addi	sp,sp,80
+     41a:	8082                	ret
+      printf("open(copyin1) failed\n");
+     41c:	00006517          	auipc	a0,0x6
+     420:	a9c50513          	addi	a0,a0,-1380 # 5eb8 <malloc+0x214>
+     424:	00005097          	auipc	ra,0x5
+     428:	7c8080e7          	jalr	1992(ra) # 5bec <printf>
+      exit(1);
+     42c:	4505                	li	a0,1
+     42e:	00005097          	auipc	ra,0x5
+     432:	414080e7          	jalr	1044(ra) # 5842 <exit>
+      printf("write(fd, %p, 8192) returned %d, not -1\n", addr, n);
+     436:	862a                	mv	a2,a0
+     438:	85ce                	mv	a1,s3
+     43a:	00006517          	auipc	a0,0x6
+     43e:	a9650513          	addi	a0,a0,-1386 # 5ed0 <malloc+0x22c>
+     442:	00005097          	auipc	ra,0x5
+     446:	7aa080e7          	jalr	1962(ra) # 5bec <printf>
+      exit(1);
+     44a:	4505                	li	a0,1
+     44c:	00005097          	auipc	ra,0x5
+     450:	3f6080e7          	jalr	1014(ra) # 5842 <exit>
+      printf("write(1, %p, 8192) returned %d, not -1 or 0\n", addr, n);
+     454:	862a                	mv	a2,a0
+     456:	85ce                	mv	a1,s3
+     458:	00006517          	auipc	a0,0x6
+     45c:	aa850513          	addi	a0,a0,-1368 # 5f00 <malloc+0x25c>
+     460:	00005097          	auipc	ra,0x5
+     464:	78c080e7          	jalr	1932(ra) # 5bec <printf>
+      exit(1);
+     468:	4505                	li	a0,1
+     46a:	00005097          	auipc	ra,0x5
+     46e:	3d8080e7          	jalr	984(ra) # 5842 <exit>
+      printf("pipe() failed\n");
+     472:	00006517          	auipc	a0,0x6
+     476:	abe50513          	addi	a0,a0,-1346 # 5f30 <malloc+0x28c>
+     47a:	00005097          	auipc	ra,0x5
+     47e:	772080e7          	jalr	1906(ra) # 5bec <printf>
+      exit(1);
+     482:	4505                	li	a0,1
+     484:	00005097          	auipc	ra,0x5
+     488:	3be080e7          	jalr	958(ra) # 5842 <exit>
+      printf("write(pipe, %p, 8192) returned %d, not -1 or 0\n", addr, n);
+     48c:	862a                	mv	a2,a0
+     48e:	85ce                	mv	a1,s3
+     490:	00006517          	auipc	a0,0x6
+     494:	ab050513          	addi	a0,a0,-1360 # 5f40 <malloc+0x29c>
+     498:	00005097          	auipc	ra,0x5
+     49c:	754080e7          	jalr	1876(ra) # 5bec <printf>
+      exit(1);
+     4a0:	4505                	li	a0,1
+     4a2:	00005097          	auipc	ra,0x5
+     4a6:	3a0080e7          	jalr	928(ra) # 5842 <exit>
+
+00000000000004aa <copyout>:
+{
+     4aa:	711d                	addi	sp,sp,-96
+     4ac:	ec86                	sd	ra,88(sp)
+     4ae:	e8a2                	sd	s0,80(sp)
+     4b0:	e4a6                	sd	s1,72(sp)
+     4b2:	e0ca                	sd	s2,64(sp)
+     4b4:	fc4e                	sd	s3,56(sp)
+     4b6:	f852                	sd	s4,48(sp)
+     4b8:	f456                	sd	s5,40(sp)
+     4ba:	1080                	addi	s0,sp,96
+  uint64 addrs[] = { 0x80000000LL, 0xffffffffffffffff };
+     4bc:	4785                	li	a5,1
+     4be:	07fe                	slli	a5,a5,0x1f
+     4c0:	faf43823          	sd	a5,-80(s0)
+     4c4:	57fd                	li	a5,-1
+     4c6:	faf43c23          	sd	a5,-72(s0)
+  for(int ai = 0; ai < 2; ai++){
+     4ca:	fb040913          	addi	s2,s0,-80
+    int fd = open("README", 0);
+     4ce:	00006a17          	auipc	s4,0x6
+     4d2:	aa2a0a13          	addi	s4,s4,-1374 # 5f70 <malloc+0x2cc>
+    n = write(fds[1], "x", 1);
+     4d6:	00006a97          	auipc	s5,0x6
+     4da:	962a8a93          	addi	s5,s5,-1694 # 5e38 <malloc+0x194>
+    uint64 addr = addrs[ai];
+     4de:	00093983          	ld	s3,0(s2)
+    int fd = open("README", 0);
+     4e2:	4581                	li	a1,0
+     4e4:	8552                	mv	a0,s4
+     4e6:	00005097          	auipc	ra,0x5
+     4ea:	39c080e7          	jalr	924(ra) # 5882 <open>
+     4ee:	84aa                	mv	s1,a0
+    if(fd < 0){
+     4f0:	08054663          	bltz	a0,57c <copyout+0xd2>
+    int n = read(fd, (void*)addr, 8192);
+     4f4:	6609                	lui	a2,0x2
+     4f6:	85ce                	mv	a1,s3
+     4f8:	00005097          	auipc	ra,0x5
+     4fc:	362080e7          	jalr	866(ra) # 585a <read>
+    if(n > 0){
+     500:	08a04b63          	bgtz	a0,596 <copyout+0xec>
+    close(fd);
+     504:	8526                	mv	a0,s1
+     506:	00005097          	auipc	ra,0x5
+     50a:	364080e7          	jalr	868(ra) # 586a <close>
+    if(pipe(fds) < 0){
+     50e:	fa840513          	addi	a0,s0,-88
+     512:	00005097          	auipc	ra,0x5
+     516:	340080e7          	jalr	832(ra) # 5852 <pipe>
+     51a:	08054d63          	bltz	a0,5b4 <copyout+0x10a>
+    n = write(fds[1], "x", 1);
+     51e:	4605                	li	a2,1
+     520:	85d6                	mv	a1,s5
+     522:	fac42503          	lw	a0,-84(s0)
+     526:	00005097          	auipc	ra,0x5
+     52a:	33c080e7          	jalr	828(ra) # 5862 <write>
+    if(n != 1){
+     52e:	4785                	li	a5,1
+     530:	08f51f63          	bne	a0,a5,5ce <copyout+0x124>
+    n = read(fds[0], (void*)addr, 8192);
+     534:	6609                	lui	a2,0x2
+     536:	85ce                	mv	a1,s3
+     538:	fa842503          	lw	a0,-88(s0)
+     53c:	00005097          	auipc	ra,0x5
+     540:	31e080e7          	jalr	798(ra) # 585a <read>
+    if(n > 0){
+     544:	0aa04263          	bgtz	a0,5e8 <copyout+0x13e>
+    close(fds[0]);
+     548:	fa842503          	lw	a0,-88(s0)
+     54c:	00005097          	auipc	ra,0x5
+     550:	31e080e7          	jalr	798(ra) # 586a <close>
+    close(fds[1]);
+     554:	fac42503          	lw	a0,-84(s0)
+     558:	00005097          	auipc	ra,0x5
+     55c:	312080e7          	jalr	786(ra) # 586a <close>
+  for(int ai = 0; ai < 2; ai++){
+     560:	0921                	addi	s2,s2,8
+     562:	fc040793          	addi	a5,s0,-64
+     566:	f6f91ce3          	bne	s2,a5,4de <copyout+0x34>
+}
+     56a:	60e6                	ld	ra,88(sp)
+     56c:	6446                	ld	s0,80(sp)
+     56e:	64a6                	ld	s1,72(sp)
+     570:	6906                	ld	s2,64(sp)
+     572:	79e2                	ld	s3,56(sp)
+     574:	7a42                	ld	s4,48(sp)
+     576:	7aa2                	ld	s5,40(sp)
+     578:	6125                	addi	sp,sp,96
+     57a:	8082                	ret
+      printf("open(README) failed\n");
+     57c:	00006517          	auipc	a0,0x6
+     580:	9fc50513          	addi	a0,a0,-1540 # 5f78 <malloc+0x2d4>
+     584:	00005097          	auipc	ra,0x5
+     588:	668080e7          	jalr	1640(ra) # 5bec <printf>
+      exit(1);
+     58c:	4505                	li	a0,1
+     58e:	00005097          	auipc	ra,0x5
+     592:	2b4080e7          	jalr	692(ra) # 5842 <exit>
+      printf("read(fd, %p, 8192) returned %d, not -1 or 0\n", addr, n);
+     596:	862a                	mv	a2,a0
+     598:	85ce                	mv	a1,s3
+     59a:	00006517          	auipc	a0,0x6
+     59e:	9f650513          	addi	a0,a0,-1546 # 5f90 <malloc+0x2ec>
+     5a2:	00005097          	auipc	ra,0x5
+     5a6:	64a080e7          	jalr	1610(ra) # 5bec <printf>
+      exit(1);
+     5aa:	4505                	li	a0,1
+     5ac:	00005097          	auipc	ra,0x5
+     5b0:	296080e7          	jalr	662(ra) # 5842 <exit>
+      printf("pipe() failed\n");
+     5b4:	00006517          	auipc	a0,0x6
+     5b8:	97c50513          	addi	a0,a0,-1668 # 5f30 <malloc+0x28c>
+     5bc:	00005097          	auipc	ra,0x5
+     5c0:	630080e7          	jalr	1584(ra) # 5bec <printf>
+      exit(1);
+     5c4:	4505                	li	a0,1
+     5c6:	00005097          	auipc	ra,0x5
+     5ca:	27c080e7          	jalr	636(ra) # 5842 <exit>
+      printf("pipe write failed\n");
+     5ce:	00006517          	auipc	a0,0x6
+     5d2:	9f250513          	addi	a0,a0,-1550 # 5fc0 <malloc+0x31c>
+     5d6:	00005097          	auipc	ra,0x5
+     5da:	616080e7          	jalr	1558(ra) # 5bec <printf>
+      exit(1);
+     5de:	4505                	li	a0,1
+     5e0:	00005097          	auipc	ra,0x5
+     5e4:	262080e7          	jalr	610(ra) # 5842 <exit>
+      printf("read(pipe, %p, 8192) returned %d, not -1 or 0\n", addr, n);
+     5e8:	862a                	mv	a2,a0
+     5ea:	85ce                	mv	a1,s3
+     5ec:	00006517          	auipc	a0,0x6
+     5f0:	9ec50513          	addi	a0,a0,-1556 # 5fd8 <malloc+0x334>
+     5f4:	00005097          	auipc	ra,0x5
+     5f8:	5f8080e7          	jalr	1528(ra) # 5bec <printf>
+      exit(1);
+     5fc:	4505                	li	a0,1
+     5fe:	00005097          	auipc	ra,0x5
+     602:	244080e7          	jalr	580(ra) # 5842 <exit>
+
+0000000000000606 <truncate1>:
+{
+     606:	711d                	addi	sp,sp,-96
+     608:	ec86                	sd	ra,88(sp)
+     60a:	e8a2                	sd	s0,80(sp)
+     60c:	e4a6                	sd	s1,72(sp)
+     60e:	e0ca                	sd	s2,64(sp)
+     610:	fc4e                	sd	s3,56(sp)
+     612:	f852                	sd	s4,48(sp)
+     614:	f456                	sd	s5,40(sp)
+     616:	1080                	addi	s0,sp,96
+     618:	8aaa                	mv	s5,a0
+  unlink("truncfile");
+     61a:	00006517          	auipc	a0,0x6
+     61e:	80650513          	addi	a0,a0,-2042 # 5e20 <malloc+0x17c>
+     622:	00005097          	auipc	ra,0x5
+     626:	270080e7          	jalr	624(ra) # 5892 <unlink>
+  int fd1 = open("truncfile", O_CREATE|O_WRONLY|O_TRUNC);
+     62a:	60100593          	li	a1,1537
+     62e:	00005517          	auipc	a0,0x5
+     632:	7f250513          	addi	a0,a0,2034 # 5e20 <malloc+0x17c>
+     636:	00005097          	auipc	ra,0x5
+     63a:	24c080e7          	jalr	588(ra) # 5882 <open>
+     63e:	84aa                	mv	s1,a0
+  write(fd1, "abcd", 4);
+     640:	4611                	li	a2,4
+     642:	00005597          	auipc	a1,0x5
+     646:	7ee58593          	addi	a1,a1,2030 # 5e30 <malloc+0x18c>
+     64a:	00005097          	auipc	ra,0x5
+     64e:	218080e7          	jalr	536(ra) # 5862 <write>
+  close(fd1);
+     652:	8526                	mv	a0,s1
+     654:	00005097          	auipc	ra,0x5
+     658:	216080e7          	jalr	534(ra) # 586a <close>
+  int fd2 = open("truncfile", O_RDONLY);
+     65c:	4581                	li	a1,0
+     65e:	00005517          	auipc	a0,0x5
+     662:	7c250513          	addi	a0,a0,1986 # 5e20 <malloc+0x17c>
+     666:	00005097          	auipc	ra,0x5
+     66a:	21c080e7          	jalr	540(ra) # 5882 <open>
+     66e:	84aa                	mv	s1,a0
+  int n = read(fd2, buf, sizeof(buf));
+     670:	02000613          	li	a2,32
+     674:	fa040593          	addi	a1,s0,-96
+     678:	00005097          	auipc	ra,0x5
+     67c:	1e2080e7          	jalr	482(ra) # 585a <read>
+  if(n != 4){
+     680:	4791                	li	a5,4
+     682:	0cf51e63          	bne	a0,a5,75e <truncate1+0x158>
+  fd1 = open("truncfile", O_WRONLY|O_TRUNC);
+     686:	40100593          	li	a1,1025
+     68a:	00005517          	auipc	a0,0x5
+     68e:	79650513          	addi	a0,a0,1942 # 5e20 <malloc+0x17c>
+     692:	00005097          	auipc	ra,0x5
+     696:	1f0080e7          	jalr	496(ra) # 5882 <open>
+     69a:	89aa                	mv	s3,a0
+  int fd3 = open("truncfile", O_RDONLY);
+     69c:	4581                	li	a1,0
+     69e:	00005517          	auipc	a0,0x5
+     6a2:	78250513          	addi	a0,a0,1922 # 5e20 <malloc+0x17c>
+     6a6:	00005097          	auipc	ra,0x5
+     6aa:	1dc080e7          	jalr	476(ra) # 5882 <open>
+     6ae:	892a                	mv	s2,a0
+  n = read(fd3, buf, sizeof(buf));
+     6b0:	02000613          	li	a2,32
+     6b4:	fa040593          	addi	a1,s0,-96
+     6b8:	00005097          	auipc	ra,0x5
+     6bc:	1a2080e7          	jalr	418(ra) # 585a <read>
+     6c0:	8a2a                	mv	s4,a0
+  if(n != 0){
+     6c2:	ed4d                	bnez	a0,77c <truncate1+0x176>
+  n = read(fd2, buf, sizeof(buf));
+     6c4:	02000613          	li	a2,32
+     6c8:	fa040593          	addi	a1,s0,-96
+     6cc:	8526                	mv	a0,s1
+     6ce:	00005097          	auipc	ra,0x5
+     6d2:	18c080e7          	jalr	396(ra) # 585a <read>
+     6d6:	8a2a                	mv	s4,a0
+  if(n != 0){
+     6d8:	e971                	bnez	a0,7ac <truncate1+0x1a6>
+  write(fd1, "abcdef", 6);
+     6da:	4619                	li	a2,6
+     6dc:	00006597          	auipc	a1,0x6
+     6e0:	98c58593          	addi	a1,a1,-1652 # 6068 <malloc+0x3c4>
+     6e4:	854e                	mv	a0,s3
+     6e6:	00005097          	auipc	ra,0x5
+     6ea:	17c080e7          	jalr	380(ra) # 5862 <write>
+  n = read(fd3, buf, sizeof(buf));
+     6ee:	02000613          	li	a2,32
+     6f2:	fa040593          	addi	a1,s0,-96
+     6f6:	854a                	mv	a0,s2
+     6f8:	00005097          	auipc	ra,0x5
+     6fc:	162080e7          	jalr	354(ra) # 585a <read>
+  if(n != 6){
+     700:	4799                	li	a5,6
+     702:	0cf51d63          	bne	a0,a5,7dc <truncate1+0x1d6>
+  n = read(fd2, buf, sizeof(buf));
+     706:	02000613          	li	a2,32
+     70a:	fa040593          	addi	a1,s0,-96
+     70e:	8526                	mv	a0,s1
+     710:	00005097          	auipc	ra,0x5
+     714:	14a080e7          	jalr	330(ra) # 585a <read>
+  if(n != 2){
+     718:	4789                	li	a5,2
+     71a:	0ef51063          	bne	a0,a5,7fa <truncate1+0x1f4>
+  unlink("truncfile");
+     71e:	00005517          	auipc	a0,0x5
+     722:	70250513          	addi	a0,a0,1794 # 5e20 <malloc+0x17c>
+     726:	00005097          	auipc	ra,0x5
+     72a:	16c080e7          	jalr	364(ra) # 5892 <unlink>
+  close(fd1);
+     72e:	854e                	mv	a0,s3
+     730:	00005097          	auipc	ra,0x5
+     734:	13a080e7          	jalr	314(ra) # 586a <close>
+  close(fd2);
+     738:	8526                	mv	a0,s1
+     73a:	00005097          	auipc	ra,0x5
+     73e:	130080e7          	jalr	304(ra) # 586a <close>
+  close(fd3);
+     742:	854a                	mv	a0,s2
+     744:	00005097          	auipc	ra,0x5
+     748:	126080e7          	jalr	294(ra) # 586a <close>
+}
+     74c:	60e6                	ld	ra,88(sp)
+     74e:	6446                	ld	s0,80(sp)
+     750:	64a6                	ld	s1,72(sp)
+     752:	6906                	ld	s2,64(sp)
+     754:	79e2                	ld	s3,56(sp)
+     756:	7a42                	ld	s4,48(sp)
+     758:	7aa2                	ld	s5,40(sp)
+     75a:	6125                	addi	sp,sp,96
+     75c:	8082                	ret
+    printf("%s: read %d bytes, wanted 4\n", s, n);
+     75e:	862a                	mv	a2,a0
+     760:	85d6                	mv	a1,s5
+     762:	00006517          	auipc	a0,0x6
+     766:	8a650513          	addi	a0,a0,-1882 # 6008 <malloc+0x364>
+     76a:	00005097          	auipc	ra,0x5
+     76e:	482080e7          	jalr	1154(ra) # 5bec <printf>
+    exit(1);
+     772:	4505                	li	a0,1
+     774:	00005097          	auipc	ra,0x5
+     778:	0ce080e7          	jalr	206(ra) # 5842 <exit>
+    printf("aaa fd3=%d\n", fd3);
+     77c:	85ca                	mv	a1,s2
+     77e:	00006517          	auipc	a0,0x6
+     782:	8aa50513          	addi	a0,a0,-1878 # 6028 <malloc+0x384>
+     786:	00005097          	auipc	ra,0x5
+     78a:	466080e7          	jalr	1126(ra) # 5bec <printf>
+    printf("%s: read %d bytes, wanted 0\n", s, n);
+     78e:	8652                	mv	a2,s4
+     790:	85d6                	mv	a1,s5
+     792:	00006517          	auipc	a0,0x6
+     796:	8a650513          	addi	a0,a0,-1882 # 6038 <malloc+0x394>
+     79a:	00005097          	auipc	ra,0x5
+     79e:	452080e7          	jalr	1106(ra) # 5bec <printf>
+    exit(1);
+     7a2:	4505                	li	a0,1
+     7a4:	00005097          	auipc	ra,0x5
+     7a8:	09e080e7          	jalr	158(ra) # 5842 <exit>
+    printf("bbb fd2=%d\n", fd2);
+     7ac:	85a6                	mv	a1,s1
+     7ae:	00006517          	auipc	a0,0x6
+     7b2:	8aa50513          	addi	a0,a0,-1878 # 6058 <malloc+0x3b4>
+     7b6:	00005097          	auipc	ra,0x5
+     7ba:	436080e7          	jalr	1078(ra) # 5bec <printf>
+    printf("%s: read %d bytes, wanted 0\n", s, n);
+     7be:	8652                	mv	a2,s4
+     7c0:	85d6                	mv	a1,s5
+     7c2:	00006517          	auipc	a0,0x6
+     7c6:	87650513          	addi	a0,a0,-1930 # 6038 <malloc+0x394>
+     7ca:	00005097          	auipc	ra,0x5
+     7ce:	422080e7          	jalr	1058(ra) # 5bec <printf>
+    exit(1);
+     7d2:	4505                	li	a0,1
+     7d4:	00005097          	auipc	ra,0x5
+     7d8:	06e080e7          	jalr	110(ra) # 5842 <exit>
+    printf("%s: read %d bytes, wanted 6\n", s, n);
+     7dc:	862a                	mv	a2,a0
+     7de:	85d6                	mv	a1,s5
+     7e0:	00006517          	auipc	a0,0x6
+     7e4:	89050513          	addi	a0,a0,-1904 # 6070 <malloc+0x3cc>
+     7e8:	00005097          	auipc	ra,0x5
+     7ec:	404080e7          	jalr	1028(ra) # 5bec <printf>
+    exit(1);
+     7f0:	4505                	li	a0,1
+     7f2:	00005097          	auipc	ra,0x5
+     7f6:	050080e7          	jalr	80(ra) # 5842 <exit>
+    printf("%s: read %d bytes, wanted 2\n", s, n);
+     7fa:	862a                	mv	a2,a0
+     7fc:	85d6                	mv	a1,s5
+     7fe:	00006517          	auipc	a0,0x6
+     802:	89250513          	addi	a0,a0,-1902 # 6090 <malloc+0x3ec>
+     806:	00005097          	auipc	ra,0x5
+     80a:	3e6080e7          	jalr	998(ra) # 5bec <printf>
+    exit(1);
+     80e:	4505                	li	a0,1
+     810:	00005097          	auipc	ra,0x5
+     814:	032080e7          	jalr	50(ra) # 5842 <exit>
+
+0000000000000818 <writetest>:
+{
+     818:	7139                	addi	sp,sp,-64
+     81a:	fc06                	sd	ra,56(sp)
+     81c:	f822                	sd	s0,48(sp)
+     81e:	f426                	sd	s1,40(sp)
+     820:	f04a                	sd	s2,32(sp)
+     822:	ec4e                	sd	s3,24(sp)
+     824:	e852                	sd	s4,16(sp)
+     826:	e456                	sd	s5,8(sp)
+     828:	e05a                	sd	s6,0(sp)
+     82a:	0080                	addi	s0,sp,64
+     82c:	8b2a                	mv	s6,a0
+  fd = open("small", O_CREATE|O_RDWR);
+     82e:	20200593          	li	a1,514
+     832:	00006517          	auipc	a0,0x6
+     836:	87e50513          	addi	a0,a0,-1922 # 60b0 <malloc+0x40c>
+     83a:	00005097          	auipc	ra,0x5
+     83e:	048080e7          	jalr	72(ra) # 5882 <open>
+  if(fd < 0){
+     842:	0a054d63          	bltz	a0,8fc <writetest+0xe4>
+     846:	892a                	mv	s2,a0
+     848:	4481                	li	s1,0
+    if(write(fd, "aaaaaaaaaa", SZ) != SZ){
+     84a:	00006997          	auipc	s3,0x6
+     84e:	88e98993          	addi	s3,s3,-1906 # 60d8 <malloc+0x434>
+    if(write(fd, "bbbbbbbbbb", SZ) != SZ){
+     852:	00006a97          	auipc	s5,0x6
+     856:	8bea8a93          	addi	s5,s5,-1858 # 6110 <malloc+0x46c>
+  for(i = 0; i < N; i++){
+     85a:	06400a13          	li	s4,100
+    if(write(fd, "aaaaaaaaaa", SZ) != SZ){
+     85e:	4629                	li	a2,10
+     860:	85ce                	mv	a1,s3
+     862:	854a                	mv	a0,s2
+     864:	00005097          	auipc	ra,0x5
+     868:	ffe080e7          	jalr	-2(ra) # 5862 <write>
+     86c:	47a9                	li	a5,10
+     86e:	0af51563          	bne	a0,a5,918 <writetest+0x100>
+    if(write(fd, "bbbbbbbbbb", SZ) != SZ){
+     872:	4629                	li	a2,10
+     874:	85d6                	mv	a1,s5
+     876:	854a                	mv	a0,s2
+     878:	00005097          	auipc	ra,0x5
+     87c:	fea080e7          	jalr	-22(ra) # 5862 <write>
+     880:	47a9                	li	a5,10
+     882:	0af51a63          	bne	a0,a5,936 <writetest+0x11e>
+  for(i = 0; i < N; i++){
+     886:	2485                	addiw	s1,s1,1
+     888:	fd449be3          	bne	s1,s4,85e <writetest+0x46>
+  close(fd);
+     88c:	854a                	mv	a0,s2
+     88e:	00005097          	auipc	ra,0x5
+     892:	fdc080e7          	jalr	-36(ra) # 586a <close>
+  fd = open("small", O_RDONLY);
+     896:	4581                	li	a1,0
+     898:	00006517          	auipc	a0,0x6
+     89c:	81850513          	addi	a0,a0,-2024 # 60b0 <malloc+0x40c>
+     8a0:	00005097          	auipc	ra,0x5
+     8a4:	fe2080e7          	jalr	-30(ra) # 5882 <open>
+     8a8:	84aa                	mv	s1,a0
+  if(fd < 0){
+     8aa:	0a054563          	bltz	a0,954 <writetest+0x13c>
+  i = read(fd, buf, N*SZ*2);
+     8ae:	7d000613          	li	a2,2000
+     8b2:	0000b597          	auipc	a1,0xb
+     8b6:	55658593          	addi	a1,a1,1366 # be08 <buf>
+     8ba:	00005097          	auipc	ra,0x5
+     8be:	fa0080e7          	jalr	-96(ra) # 585a <read>
+  if(i != N*SZ*2){
+     8c2:	7d000793          	li	a5,2000
+     8c6:	0af51563          	bne	a0,a5,970 <writetest+0x158>
+  close(fd);
+     8ca:	8526                	mv	a0,s1
+     8cc:	00005097          	auipc	ra,0x5
+     8d0:	f9e080e7          	jalr	-98(ra) # 586a <close>
+  if(unlink("small") < 0){
+     8d4:	00005517          	auipc	a0,0x5
+     8d8:	7dc50513          	addi	a0,a0,2012 # 60b0 <malloc+0x40c>
+     8dc:	00005097          	auipc	ra,0x5
+     8e0:	fb6080e7          	jalr	-74(ra) # 5892 <unlink>
+     8e4:	0a054463          	bltz	a0,98c <writetest+0x174>
+}
+     8e8:	70e2                	ld	ra,56(sp)
+     8ea:	7442                	ld	s0,48(sp)
+     8ec:	74a2                	ld	s1,40(sp)
+     8ee:	7902                	ld	s2,32(sp)
+     8f0:	69e2                	ld	s3,24(sp)
+     8f2:	6a42                	ld	s4,16(sp)
+     8f4:	6aa2                	ld	s5,8(sp)
+     8f6:	6b02                	ld	s6,0(sp)
+     8f8:	6121                	addi	sp,sp,64
+     8fa:	8082                	ret
+    printf("%s: error: creat small failed!\n", s);
+     8fc:	85da                	mv	a1,s6
+     8fe:	00005517          	auipc	a0,0x5
+     902:	7ba50513          	addi	a0,a0,1978 # 60b8 <malloc+0x414>
+     906:	00005097          	auipc	ra,0x5
+     90a:	2e6080e7          	jalr	742(ra) # 5bec <printf>
+    exit(1);
+     90e:	4505                	li	a0,1
+     910:	00005097          	auipc	ra,0x5
+     914:	f32080e7          	jalr	-206(ra) # 5842 <exit>
+      printf("%s: error: write aa %d new file failed\n", s, i);
+     918:	8626                	mv	a2,s1
+     91a:	85da                	mv	a1,s6
+     91c:	00005517          	auipc	a0,0x5
+     920:	7cc50513          	addi	a0,a0,1996 # 60e8 <malloc+0x444>
+     924:	00005097          	auipc	ra,0x5
+     928:	2c8080e7          	jalr	712(ra) # 5bec <printf>
+      exit(1);
+     92c:	4505                	li	a0,1
+     92e:	00005097          	auipc	ra,0x5
+     932:	f14080e7          	jalr	-236(ra) # 5842 <exit>
+      printf("%s: error: write bb %d new file failed\n", s, i);
+     936:	8626                	mv	a2,s1
+     938:	85da                	mv	a1,s6
+     93a:	00005517          	auipc	a0,0x5
+     93e:	7e650513          	addi	a0,a0,2022 # 6120 <malloc+0x47c>
+     942:	00005097          	auipc	ra,0x5
+     946:	2aa080e7          	jalr	682(ra) # 5bec <printf>
+      exit(1);
+     94a:	4505                	li	a0,1
+     94c:	00005097          	auipc	ra,0x5
+     950:	ef6080e7          	jalr	-266(ra) # 5842 <exit>
+    printf("%s: error: open small failed!\n", s);
+     954:	85da                	mv	a1,s6
+     956:	00005517          	auipc	a0,0x5
+     95a:	7f250513          	addi	a0,a0,2034 # 6148 <malloc+0x4a4>
+     95e:	00005097          	auipc	ra,0x5
+     962:	28e080e7          	jalr	654(ra) # 5bec <printf>
+    exit(1);
+     966:	4505                	li	a0,1
+     968:	00005097          	auipc	ra,0x5
+     96c:	eda080e7          	jalr	-294(ra) # 5842 <exit>
+    printf("%s: read failed\n", s);
+     970:	85da                	mv	a1,s6
+     972:	00005517          	auipc	a0,0x5
+     976:	7f650513          	addi	a0,a0,2038 # 6168 <malloc+0x4c4>
+     97a:	00005097          	auipc	ra,0x5
+     97e:	272080e7          	jalr	626(ra) # 5bec <printf>
+    exit(1);
+     982:	4505                	li	a0,1
+     984:	00005097          	auipc	ra,0x5
+     988:	ebe080e7          	jalr	-322(ra) # 5842 <exit>
+    printf("%s: unlink small failed\n", s);
+     98c:	85da                	mv	a1,s6
+     98e:	00005517          	auipc	a0,0x5
+     992:	7f250513          	addi	a0,a0,2034 # 6180 <malloc+0x4dc>
+     996:	00005097          	auipc	ra,0x5
+     99a:	256080e7          	jalr	598(ra) # 5bec <printf>
+    exit(1);
+     99e:	4505                	li	a0,1
+     9a0:	00005097          	auipc	ra,0x5
+     9a4:	ea2080e7          	jalr	-350(ra) # 5842 <exit>
+
+00000000000009a8 <writebig>:
+{
+     9a8:	7139                	addi	sp,sp,-64
+     9aa:	fc06                	sd	ra,56(sp)
+     9ac:	f822                	sd	s0,48(sp)
+     9ae:	f426                	sd	s1,40(sp)
+     9b0:	f04a                	sd	s2,32(sp)
+     9b2:	ec4e                	sd	s3,24(sp)
+     9b4:	e852                	sd	s4,16(sp)
+     9b6:	e456                	sd	s5,8(sp)
+     9b8:	0080                	addi	s0,sp,64
+     9ba:	8aaa                	mv	s5,a0
+  fd = open("big", O_CREATE|O_RDWR);
+     9bc:	20200593          	li	a1,514
+     9c0:	00005517          	auipc	a0,0x5
+     9c4:	7e050513          	addi	a0,a0,2016 # 61a0 <malloc+0x4fc>
+     9c8:	00005097          	auipc	ra,0x5
+     9cc:	eba080e7          	jalr	-326(ra) # 5882 <open>
+     9d0:	89aa                	mv	s3,a0
+  for(i = 0; i < MAXFILE; i++){
+     9d2:	4481                	li	s1,0
+    ((int*)buf)[0] = i;
+     9d4:	0000b917          	auipc	s2,0xb
+     9d8:	43490913          	addi	s2,s2,1076 # be08 <buf>
+  for(i = 0; i < MAXFILE; i++){
+     9dc:	10c00a13          	li	s4,268
+  if(fd < 0){
+     9e0:	06054c63          	bltz	a0,a58 <writebig+0xb0>
+    ((int*)buf)[0] = i;
+     9e4:	00992023          	sw	s1,0(s2)
+    if(write(fd, buf, BSIZE) != BSIZE){
+     9e8:	40000613          	li	a2,1024
+     9ec:	85ca                	mv	a1,s2
+     9ee:	854e                	mv	a0,s3
+     9f0:	00005097          	auipc	ra,0x5
+     9f4:	e72080e7          	jalr	-398(ra) # 5862 <write>
+     9f8:	40000793          	li	a5,1024
+     9fc:	06f51c63          	bne	a0,a5,a74 <writebig+0xcc>
+  for(i = 0; i < MAXFILE; i++){
+     a00:	2485                	addiw	s1,s1,1
+     a02:	ff4491e3          	bne	s1,s4,9e4 <writebig+0x3c>
+  close(fd);
+     a06:	854e                	mv	a0,s3
+     a08:	00005097          	auipc	ra,0x5
+     a0c:	e62080e7          	jalr	-414(ra) # 586a <close>
+  fd = open("big", O_RDONLY);
+     a10:	4581                	li	a1,0
+     a12:	00005517          	auipc	a0,0x5
+     a16:	78e50513          	addi	a0,a0,1934 # 61a0 <malloc+0x4fc>
+     a1a:	00005097          	auipc	ra,0x5
+     a1e:	e68080e7          	jalr	-408(ra) # 5882 <open>
+     a22:	89aa                	mv	s3,a0
+  n = 0;
+     a24:	4481                	li	s1,0
+    i = read(fd, buf, BSIZE);
+     a26:	0000b917          	auipc	s2,0xb
+     a2a:	3e290913          	addi	s2,s2,994 # be08 <buf>
+  if(fd < 0){
+     a2e:	06054263          	bltz	a0,a92 <writebig+0xea>
+    i = read(fd, buf, BSIZE);
+     a32:	40000613          	li	a2,1024
+     a36:	85ca                	mv	a1,s2
+     a38:	854e                	mv	a0,s3
+     a3a:	00005097          	auipc	ra,0x5
+     a3e:	e20080e7          	jalr	-480(ra) # 585a <read>
+    if(i == 0){
+     a42:	c535                	beqz	a0,aae <writebig+0x106>
+    } else if(i != BSIZE){
+     a44:	40000793          	li	a5,1024
+     a48:	0af51f63          	bne	a0,a5,b06 <writebig+0x15e>
+    if(((int*)buf)[0] != n){
+     a4c:	00092683          	lw	a3,0(s2)
+     a50:	0c969a63          	bne	a3,s1,b24 <writebig+0x17c>
+    n++;
+     a54:	2485                	addiw	s1,s1,1
+    i = read(fd, buf, BSIZE);
+     a56:	bff1                	j	a32 <writebig+0x8a>
+    printf("%s: error: creat big failed!\n", s);
+     a58:	85d6                	mv	a1,s5
+     a5a:	00005517          	auipc	a0,0x5
+     a5e:	74e50513          	addi	a0,a0,1870 # 61a8 <malloc+0x504>
+     a62:	00005097          	auipc	ra,0x5
+     a66:	18a080e7          	jalr	394(ra) # 5bec <printf>
+    exit(1);
+     a6a:	4505                	li	a0,1
+     a6c:	00005097          	auipc	ra,0x5
+     a70:	dd6080e7          	jalr	-554(ra) # 5842 <exit>
+      printf("%s: error: write big file failed\n", s, i);
+     a74:	8626                	mv	a2,s1
+     a76:	85d6                	mv	a1,s5
+     a78:	00005517          	auipc	a0,0x5
+     a7c:	75050513          	addi	a0,a0,1872 # 61c8 <malloc+0x524>
+     a80:	00005097          	auipc	ra,0x5
+     a84:	16c080e7          	jalr	364(ra) # 5bec <printf>
+      exit(1);
+     a88:	4505                	li	a0,1
+     a8a:	00005097          	auipc	ra,0x5
+     a8e:	db8080e7          	jalr	-584(ra) # 5842 <exit>
+    printf("%s: error: open big failed!\n", s);
+     a92:	85d6                	mv	a1,s5
+     a94:	00005517          	auipc	a0,0x5
+     a98:	75c50513          	addi	a0,a0,1884 # 61f0 <malloc+0x54c>
+     a9c:	00005097          	auipc	ra,0x5
+     aa0:	150080e7          	jalr	336(ra) # 5bec <printf>
+    exit(1);
+     aa4:	4505                	li	a0,1
+     aa6:	00005097          	auipc	ra,0x5
+     aaa:	d9c080e7          	jalr	-612(ra) # 5842 <exit>
+      if(n == MAXFILE - 1){
+     aae:	10b00793          	li	a5,267
+     ab2:	02f48a63          	beq	s1,a5,ae6 <writebig+0x13e>
+  close(fd);
+     ab6:	854e                	mv	a0,s3
+     ab8:	00005097          	auipc	ra,0x5
+     abc:	db2080e7          	jalr	-590(ra) # 586a <close>
+  if(unlink("big") < 0){
+     ac0:	00005517          	auipc	a0,0x5
+     ac4:	6e050513          	addi	a0,a0,1760 # 61a0 <malloc+0x4fc>
+     ac8:	00005097          	auipc	ra,0x5
+     acc:	dca080e7          	jalr	-566(ra) # 5892 <unlink>
+     ad0:	06054963          	bltz	a0,b42 <writebig+0x19a>
+}
+     ad4:	70e2                	ld	ra,56(sp)
+     ad6:	7442                	ld	s0,48(sp)
+     ad8:	74a2                	ld	s1,40(sp)
+     ada:	7902                	ld	s2,32(sp)
+     adc:	69e2                	ld	s3,24(sp)
+     ade:	6a42                	ld	s4,16(sp)
+     ae0:	6aa2                	ld	s5,8(sp)
+     ae2:	6121                	addi	sp,sp,64
+     ae4:	8082                	ret
+        printf("%s: read only %d blocks from big", s, n);
+     ae6:	10b00613          	li	a2,267
+     aea:	85d6                	mv	a1,s5
+     aec:	00005517          	auipc	a0,0x5
+     af0:	72450513          	addi	a0,a0,1828 # 6210 <malloc+0x56c>
+     af4:	00005097          	auipc	ra,0x5
+     af8:	0f8080e7          	jalr	248(ra) # 5bec <printf>
+        exit(1);
+     afc:	4505                	li	a0,1
+     afe:	00005097          	auipc	ra,0x5
+     b02:	d44080e7          	jalr	-700(ra) # 5842 <exit>
+      printf("%s: read failed %d\n", s, i);
+     b06:	862a                	mv	a2,a0
+     b08:	85d6                	mv	a1,s5
+     b0a:	00005517          	auipc	a0,0x5
+     b0e:	72e50513          	addi	a0,a0,1838 # 6238 <malloc+0x594>
+     b12:	00005097          	auipc	ra,0x5
+     b16:	0da080e7          	jalr	218(ra) # 5bec <printf>
+      exit(1);
+     b1a:	4505                	li	a0,1
+     b1c:	00005097          	auipc	ra,0x5
+     b20:	d26080e7          	jalr	-730(ra) # 5842 <exit>
+      printf("%s: read content of block %d is %d\n", s,
+     b24:	8626                	mv	a2,s1
+     b26:	85d6                	mv	a1,s5
+     b28:	00005517          	auipc	a0,0x5
+     b2c:	72850513          	addi	a0,a0,1832 # 6250 <malloc+0x5ac>
+     b30:	00005097          	auipc	ra,0x5
+     b34:	0bc080e7          	jalr	188(ra) # 5bec <printf>
+      exit(1);
+     b38:	4505                	li	a0,1
+     b3a:	00005097          	auipc	ra,0x5
+     b3e:	d08080e7          	jalr	-760(ra) # 5842 <exit>
+    printf("%s: unlink big failed\n", s);
+     b42:	85d6                	mv	a1,s5
+     b44:	00005517          	auipc	a0,0x5
+     b48:	73450513          	addi	a0,a0,1844 # 6278 <malloc+0x5d4>
+     b4c:	00005097          	auipc	ra,0x5
+     b50:	0a0080e7          	jalr	160(ra) # 5bec <printf>
+    exit(1);
+     b54:	4505                	li	a0,1
+     b56:	00005097          	auipc	ra,0x5
+     b5a:	cec080e7          	jalr	-788(ra) # 5842 <exit>
+
+0000000000000b5e <unlinkread>:
+{
+     b5e:	7179                	addi	sp,sp,-48
+     b60:	f406                	sd	ra,40(sp)
+     b62:	f022                	sd	s0,32(sp)
+     b64:	ec26                	sd	s1,24(sp)
+     b66:	e84a                	sd	s2,16(sp)
+     b68:	e44e                	sd	s3,8(sp)
+     b6a:	1800                	addi	s0,sp,48
+     b6c:	89aa                	mv	s3,a0
+  fd = open("unlinkread", O_CREATE | O_RDWR);
+     b6e:	20200593          	li	a1,514
+     b72:	00005517          	auipc	a0,0x5
+     b76:	71e50513          	addi	a0,a0,1822 # 6290 <malloc+0x5ec>
+     b7a:	00005097          	auipc	ra,0x5
+     b7e:	d08080e7          	jalr	-760(ra) # 5882 <open>
+  if(fd < 0){
+     b82:	0e054563          	bltz	a0,c6c <unlinkread+0x10e>
+     b86:	84aa                	mv	s1,a0
+  write(fd, "hello", SZ);
+     b88:	4615                	li	a2,5
+     b8a:	00005597          	auipc	a1,0x5
+     b8e:	73658593          	addi	a1,a1,1846 # 62c0 <malloc+0x61c>
+     b92:	00005097          	auipc	ra,0x5
+     b96:	cd0080e7          	jalr	-816(ra) # 5862 <write>
+  close(fd);
+     b9a:	8526                	mv	a0,s1
+     b9c:	00005097          	auipc	ra,0x5
+     ba0:	cce080e7          	jalr	-818(ra) # 586a <close>
+  fd = open("unlinkread", O_RDWR);
+     ba4:	4589                	li	a1,2
+     ba6:	00005517          	auipc	a0,0x5
+     baa:	6ea50513          	addi	a0,a0,1770 # 6290 <malloc+0x5ec>
+     bae:	00005097          	auipc	ra,0x5
+     bb2:	cd4080e7          	jalr	-812(ra) # 5882 <open>
+     bb6:	84aa                	mv	s1,a0
+  if(fd < 0){
+     bb8:	0c054863          	bltz	a0,c88 <unlinkread+0x12a>
+  if(unlink("unlinkread") != 0){
+     bbc:	00005517          	auipc	a0,0x5
+     bc0:	6d450513          	addi	a0,a0,1748 # 6290 <malloc+0x5ec>
+     bc4:	00005097          	auipc	ra,0x5
+     bc8:	cce080e7          	jalr	-818(ra) # 5892 <unlink>
+     bcc:	ed61                	bnez	a0,ca4 <unlinkread+0x146>
+  fd1 = open("unlinkread", O_CREATE | O_RDWR);
+     bce:	20200593          	li	a1,514
+     bd2:	00005517          	auipc	a0,0x5
+     bd6:	6be50513          	addi	a0,a0,1726 # 6290 <malloc+0x5ec>
+     bda:	00005097          	auipc	ra,0x5
+     bde:	ca8080e7          	jalr	-856(ra) # 5882 <open>
+     be2:	892a                	mv	s2,a0
+  write(fd1, "yyy", 3);
+     be4:	460d                	li	a2,3
+     be6:	00005597          	auipc	a1,0x5
+     bea:	72258593          	addi	a1,a1,1826 # 6308 <malloc+0x664>
+     bee:	00005097          	auipc	ra,0x5
+     bf2:	c74080e7          	jalr	-908(ra) # 5862 <write>
+  close(fd1);
+     bf6:	854a                	mv	a0,s2
+     bf8:	00005097          	auipc	ra,0x5
+     bfc:	c72080e7          	jalr	-910(ra) # 586a <close>
+  if(read(fd, buf, sizeof(buf)) != SZ){
+     c00:	660d                	lui	a2,0x3
+     c02:	0000b597          	auipc	a1,0xb
+     c06:	20658593          	addi	a1,a1,518 # be08 <buf>
+     c0a:	8526                	mv	a0,s1
+     c0c:	00005097          	auipc	ra,0x5
+     c10:	c4e080e7          	jalr	-946(ra) # 585a <read>
+     c14:	4795                	li	a5,5
+     c16:	0af51563          	bne	a0,a5,cc0 <unlinkread+0x162>
+  if(buf[0] != 'h'){
+     c1a:	0000b717          	auipc	a4,0xb
+     c1e:	1ee74703          	lbu	a4,494(a4) # be08 <buf>
+     c22:	06800793          	li	a5,104
+     c26:	0af71b63          	bne	a4,a5,cdc <unlinkread+0x17e>
+  if(write(fd, buf, 10) != 10){
+     c2a:	4629                	li	a2,10
+     c2c:	0000b597          	auipc	a1,0xb
+     c30:	1dc58593          	addi	a1,a1,476 # be08 <buf>
+     c34:	8526                	mv	a0,s1
+     c36:	00005097          	auipc	ra,0x5
+     c3a:	c2c080e7          	jalr	-980(ra) # 5862 <write>
+     c3e:	47a9                	li	a5,10
+     c40:	0af51c63          	bne	a0,a5,cf8 <unlinkread+0x19a>
+  close(fd);
+     c44:	8526                	mv	a0,s1
+     c46:	00005097          	auipc	ra,0x5
+     c4a:	c24080e7          	jalr	-988(ra) # 586a <close>
+  unlink("unlinkread");
+     c4e:	00005517          	auipc	a0,0x5
+     c52:	64250513          	addi	a0,a0,1602 # 6290 <malloc+0x5ec>
+     c56:	00005097          	auipc	ra,0x5
+     c5a:	c3c080e7          	jalr	-964(ra) # 5892 <unlink>
+}
+     c5e:	70a2                	ld	ra,40(sp)
+     c60:	7402                	ld	s0,32(sp)
+     c62:	64e2                	ld	s1,24(sp)
+     c64:	6942                	ld	s2,16(sp)
+     c66:	69a2                	ld	s3,8(sp)
+     c68:	6145                	addi	sp,sp,48
+     c6a:	8082                	ret
+    printf("%s: create unlinkread failed\n", s);
+     c6c:	85ce                	mv	a1,s3
+     c6e:	00005517          	auipc	a0,0x5
+     c72:	63250513          	addi	a0,a0,1586 # 62a0 <malloc+0x5fc>
+     c76:	00005097          	auipc	ra,0x5
+     c7a:	f76080e7          	jalr	-138(ra) # 5bec <printf>
+    exit(1);
+     c7e:	4505                	li	a0,1
+     c80:	00005097          	auipc	ra,0x5
+     c84:	bc2080e7          	jalr	-1086(ra) # 5842 <exit>
+    printf("%s: open unlinkread failed\n", s);
+     c88:	85ce                	mv	a1,s3
+     c8a:	00005517          	auipc	a0,0x5
+     c8e:	63e50513          	addi	a0,a0,1598 # 62c8 <malloc+0x624>
+     c92:	00005097          	auipc	ra,0x5
+     c96:	f5a080e7          	jalr	-166(ra) # 5bec <printf>
+    exit(1);
+     c9a:	4505                	li	a0,1
+     c9c:	00005097          	auipc	ra,0x5
+     ca0:	ba6080e7          	jalr	-1114(ra) # 5842 <exit>
+    printf("%s: unlink unlinkread failed\n", s);
+     ca4:	85ce                	mv	a1,s3
+     ca6:	00005517          	auipc	a0,0x5
+     caa:	64250513          	addi	a0,a0,1602 # 62e8 <malloc+0x644>
+     cae:	00005097          	auipc	ra,0x5
+     cb2:	f3e080e7          	jalr	-194(ra) # 5bec <printf>
+    exit(1);
+     cb6:	4505                	li	a0,1
+     cb8:	00005097          	auipc	ra,0x5
+     cbc:	b8a080e7          	jalr	-1142(ra) # 5842 <exit>
+    printf("%s: unlinkread read failed", s);
+     cc0:	85ce                	mv	a1,s3
+     cc2:	00005517          	auipc	a0,0x5
+     cc6:	64e50513          	addi	a0,a0,1614 # 6310 <malloc+0x66c>
+     cca:	00005097          	auipc	ra,0x5
+     cce:	f22080e7          	jalr	-222(ra) # 5bec <printf>
+    exit(1);
+     cd2:	4505                	li	a0,1
+     cd4:	00005097          	auipc	ra,0x5
+     cd8:	b6e080e7          	jalr	-1170(ra) # 5842 <exit>
+    printf("%s: unlinkread wrong data\n", s);
+     cdc:	85ce                	mv	a1,s3
+     cde:	00005517          	auipc	a0,0x5
+     ce2:	65250513          	addi	a0,a0,1618 # 6330 <malloc+0x68c>
+     ce6:	00005097          	auipc	ra,0x5
+     cea:	f06080e7          	jalr	-250(ra) # 5bec <printf>
+    exit(1);
+     cee:	4505                	li	a0,1
+     cf0:	00005097          	auipc	ra,0x5
+     cf4:	b52080e7          	jalr	-1198(ra) # 5842 <exit>
+    printf("%s: unlinkread write failed\n", s);
+     cf8:	85ce                	mv	a1,s3
+     cfa:	00005517          	auipc	a0,0x5
+     cfe:	65650513          	addi	a0,a0,1622 # 6350 <malloc+0x6ac>
+     d02:	00005097          	auipc	ra,0x5
+     d06:	eea080e7          	jalr	-278(ra) # 5bec <printf>
+    exit(1);
+     d0a:	4505                	li	a0,1
+     d0c:	00005097          	auipc	ra,0x5
+     d10:	b36080e7          	jalr	-1226(ra) # 5842 <exit>
+
+0000000000000d14 <linktest>:
+{
+     d14:	1101                	addi	sp,sp,-32
+     d16:	ec06                	sd	ra,24(sp)
+     d18:	e822                	sd	s0,16(sp)
+     d1a:	e426                	sd	s1,8(sp)
+     d1c:	e04a                	sd	s2,0(sp)
+     d1e:	1000                	addi	s0,sp,32
+     d20:	892a                	mv	s2,a0
+  unlink("lf1");
+     d22:	00005517          	auipc	a0,0x5
+     d26:	64e50513          	addi	a0,a0,1614 # 6370 <malloc+0x6cc>
+     d2a:	00005097          	auipc	ra,0x5
+     d2e:	b68080e7          	jalr	-1176(ra) # 5892 <unlink>
+  unlink("lf2");
+     d32:	00005517          	auipc	a0,0x5
+     d36:	64650513          	addi	a0,a0,1606 # 6378 <malloc+0x6d4>
+     d3a:	00005097          	auipc	ra,0x5
+     d3e:	b58080e7          	jalr	-1192(ra) # 5892 <unlink>
+  fd = open("lf1", O_CREATE|O_RDWR);
+     d42:	20200593          	li	a1,514
+     d46:	00005517          	auipc	a0,0x5
+     d4a:	62a50513          	addi	a0,a0,1578 # 6370 <malloc+0x6cc>
+     d4e:	00005097          	auipc	ra,0x5
+     d52:	b34080e7          	jalr	-1228(ra) # 5882 <open>
+  if(fd < 0){
+     d56:	10054763          	bltz	a0,e64 <linktest+0x150>
+     d5a:	84aa                	mv	s1,a0
+  if(write(fd, "hello", SZ) != SZ){
+     d5c:	4615                	li	a2,5
+     d5e:	00005597          	auipc	a1,0x5
+     d62:	56258593          	addi	a1,a1,1378 # 62c0 <malloc+0x61c>
+     d66:	00005097          	auipc	ra,0x5
+     d6a:	afc080e7          	jalr	-1284(ra) # 5862 <write>
+     d6e:	4795                	li	a5,5
+     d70:	10f51863          	bne	a0,a5,e80 <linktest+0x16c>
+  close(fd);
+     d74:	8526                	mv	a0,s1
+     d76:	00005097          	auipc	ra,0x5
+     d7a:	af4080e7          	jalr	-1292(ra) # 586a <close>
+  if(link("lf1", "lf2") < 0){
+     d7e:	00005597          	auipc	a1,0x5
+     d82:	5fa58593          	addi	a1,a1,1530 # 6378 <malloc+0x6d4>
+     d86:	00005517          	auipc	a0,0x5
+     d8a:	5ea50513          	addi	a0,a0,1514 # 6370 <malloc+0x6cc>
+     d8e:	00005097          	auipc	ra,0x5
+     d92:	b14080e7          	jalr	-1260(ra) # 58a2 <link>
+     d96:	10054363          	bltz	a0,e9c <linktest+0x188>
+  unlink("lf1");
+     d9a:	00005517          	auipc	a0,0x5
+     d9e:	5d650513          	addi	a0,a0,1494 # 6370 <malloc+0x6cc>
+     da2:	00005097          	auipc	ra,0x5
+     da6:	af0080e7          	jalr	-1296(ra) # 5892 <unlink>
+  if(open("lf1", 0) >= 0){
+     daa:	4581                	li	a1,0
+     dac:	00005517          	auipc	a0,0x5
+     db0:	5c450513          	addi	a0,a0,1476 # 6370 <malloc+0x6cc>
+     db4:	00005097          	auipc	ra,0x5
+     db8:	ace080e7          	jalr	-1330(ra) # 5882 <open>
+     dbc:	0e055e63          	bgez	a0,eb8 <linktest+0x1a4>
+  fd = open("lf2", 0);
+     dc0:	4581                	li	a1,0
+     dc2:	00005517          	auipc	a0,0x5
+     dc6:	5b650513          	addi	a0,a0,1462 # 6378 <malloc+0x6d4>
+     dca:	00005097          	auipc	ra,0x5
+     dce:	ab8080e7          	jalr	-1352(ra) # 5882 <open>
+     dd2:	84aa                	mv	s1,a0
+  if(fd < 0){
+     dd4:	10054063          	bltz	a0,ed4 <linktest+0x1c0>
+  if(read(fd, buf, sizeof(buf)) != SZ){
+     dd8:	660d                	lui	a2,0x3
+     dda:	0000b597          	auipc	a1,0xb
+     dde:	02e58593          	addi	a1,a1,46 # be08 <buf>
+     de2:	00005097          	auipc	ra,0x5
+     de6:	a78080e7          	jalr	-1416(ra) # 585a <read>
+     dea:	4795                	li	a5,5
+     dec:	10f51263          	bne	a0,a5,ef0 <linktest+0x1dc>
+  close(fd);
+     df0:	8526                	mv	a0,s1
+     df2:	00005097          	auipc	ra,0x5
+     df6:	a78080e7          	jalr	-1416(ra) # 586a <close>
+  if(link("lf2", "lf2") >= 0){
+     dfa:	00005597          	auipc	a1,0x5
+     dfe:	57e58593          	addi	a1,a1,1406 # 6378 <malloc+0x6d4>
+     e02:	852e                	mv	a0,a1
+     e04:	00005097          	auipc	ra,0x5
+     e08:	a9e080e7          	jalr	-1378(ra) # 58a2 <link>
+     e0c:	10055063          	bgez	a0,f0c <linktest+0x1f8>
+  unlink("lf2");
+     e10:	00005517          	auipc	a0,0x5
+     e14:	56850513          	addi	a0,a0,1384 # 6378 <malloc+0x6d4>
+     e18:	00005097          	auipc	ra,0x5
+     e1c:	a7a080e7          	jalr	-1414(ra) # 5892 <unlink>
+  if(link("lf2", "lf1") >= 0){
+     e20:	00005597          	auipc	a1,0x5
+     e24:	55058593          	addi	a1,a1,1360 # 6370 <malloc+0x6cc>
+     e28:	00005517          	auipc	a0,0x5
+     e2c:	55050513          	addi	a0,a0,1360 # 6378 <malloc+0x6d4>
+     e30:	00005097          	auipc	ra,0x5
+     e34:	a72080e7          	jalr	-1422(ra) # 58a2 <link>
+     e38:	0e055863          	bgez	a0,f28 <linktest+0x214>
+  if(link(".", "lf1") >= 0){
+     e3c:	00005597          	auipc	a1,0x5
+     e40:	53458593          	addi	a1,a1,1332 # 6370 <malloc+0x6cc>
+     e44:	00005517          	auipc	a0,0x5
+     e48:	63c50513          	addi	a0,a0,1596 # 6480 <malloc+0x7dc>
+     e4c:	00005097          	auipc	ra,0x5
+     e50:	a56080e7          	jalr	-1450(ra) # 58a2 <link>
+     e54:	0e055863          	bgez	a0,f44 <linktest+0x230>
+}
+     e58:	60e2                	ld	ra,24(sp)
+     e5a:	6442                	ld	s0,16(sp)
+     e5c:	64a2                	ld	s1,8(sp)
+     e5e:	6902                	ld	s2,0(sp)
+     e60:	6105                	addi	sp,sp,32
+     e62:	8082                	ret
+    printf("%s: create lf1 failed\n", s);
+     e64:	85ca                	mv	a1,s2
+     e66:	00005517          	auipc	a0,0x5
+     e6a:	51a50513          	addi	a0,a0,1306 # 6380 <malloc+0x6dc>
+     e6e:	00005097          	auipc	ra,0x5
+     e72:	d7e080e7          	jalr	-642(ra) # 5bec <printf>
+    exit(1);
+     e76:	4505                	li	a0,1
+     e78:	00005097          	auipc	ra,0x5
+     e7c:	9ca080e7          	jalr	-1590(ra) # 5842 <exit>
+    printf("%s: write lf1 failed\n", s);
+     e80:	85ca                	mv	a1,s2
+     e82:	00005517          	auipc	a0,0x5
+     e86:	51650513          	addi	a0,a0,1302 # 6398 <malloc+0x6f4>
+     e8a:	00005097          	auipc	ra,0x5
+     e8e:	d62080e7          	jalr	-670(ra) # 5bec <printf>
+    exit(1);
+     e92:	4505                	li	a0,1
+     e94:	00005097          	auipc	ra,0x5
+     e98:	9ae080e7          	jalr	-1618(ra) # 5842 <exit>
+    printf("%s: link lf1 lf2 failed\n", s);
+     e9c:	85ca                	mv	a1,s2
+     e9e:	00005517          	auipc	a0,0x5
+     ea2:	51250513          	addi	a0,a0,1298 # 63b0 <malloc+0x70c>
+     ea6:	00005097          	auipc	ra,0x5
+     eaa:	d46080e7          	jalr	-698(ra) # 5bec <printf>
+    exit(1);
+     eae:	4505                	li	a0,1
+     eb0:	00005097          	auipc	ra,0x5
+     eb4:	992080e7          	jalr	-1646(ra) # 5842 <exit>
+    printf("%s: unlinked lf1 but it is still there!\n", s);
+     eb8:	85ca                	mv	a1,s2
+     eba:	00005517          	auipc	a0,0x5
+     ebe:	51650513          	addi	a0,a0,1302 # 63d0 <malloc+0x72c>
+     ec2:	00005097          	auipc	ra,0x5
+     ec6:	d2a080e7          	jalr	-726(ra) # 5bec <printf>
+    exit(1);
+     eca:	4505                	li	a0,1
+     ecc:	00005097          	auipc	ra,0x5
+     ed0:	976080e7          	jalr	-1674(ra) # 5842 <exit>
+    printf("%s: open lf2 failed\n", s);
+     ed4:	85ca                	mv	a1,s2
+     ed6:	00005517          	auipc	a0,0x5
+     eda:	52a50513          	addi	a0,a0,1322 # 6400 <malloc+0x75c>
+     ede:	00005097          	auipc	ra,0x5
+     ee2:	d0e080e7          	jalr	-754(ra) # 5bec <printf>
+    exit(1);
+     ee6:	4505                	li	a0,1
+     ee8:	00005097          	auipc	ra,0x5
+     eec:	95a080e7          	jalr	-1702(ra) # 5842 <exit>
+    printf("%s: read lf2 failed\n", s);
+     ef0:	85ca                	mv	a1,s2
+     ef2:	00005517          	auipc	a0,0x5
+     ef6:	52650513          	addi	a0,a0,1318 # 6418 <malloc+0x774>
+     efa:	00005097          	auipc	ra,0x5
+     efe:	cf2080e7          	jalr	-782(ra) # 5bec <printf>
+    exit(1);
+     f02:	4505                	li	a0,1
+     f04:	00005097          	auipc	ra,0x5
+     f08:	93e080e7          	jalr	-1730(ra) # 5842 <exit>
+    printf("%s: link lf2 lf2 succeeded! oops\n", s);
+     f0c:	85ca                	mv	a1,s2
+     f0e:	00005517          	auipc	a0,0x5
+     f12:	52250513          	addi	a0,a0,1314 # 6430 <malloc+0x78c>
+     f16:	00005097          	auipc	ra,0x5
+     f1a:	cd6080e7          	jalr	-810(ra) # 5bec <printf>
+    exit(1);
+     f1e:	4505                	li	a0,1
+     f20:	00005097          	auipc	ra,0x5
+     f24:	922080e7          	jalr	-1758(ra) # 5842 <exit>
+    printf("%s: link non-existent succeeded! oops\n", s);
+     f28:	85ca                	mv	a1,s2
+     f2a:	00005517          	auipc	a0,0x5
+     f2e:	52e50513          	addi	a0,a0,1326 # 6458 <malloc+0x7b4>
+     f32:	00005097          	auipc	ra,0x5
+     f36:	cba080e7          	jalr	-838(ra) # 5bec <printf>
+    exit(1);
+     f3a:	4505                	li	a0,1
+     f3c:	00005097          	auipc	ra,0x5
+     f40:	906080e7          	jalr	-1786(ra) # 5842 <exit>
+    printf("%s: link . lf1 succeeded! oops\n", s);
+     f44:	85ca                	mv	a1,s2
+     f46:	00005517          	auipc	a0,0x5
+     f4a:	54250513          	addi	a0,a0,1346 # 6488 <malloc+0x7e4>
+     f4e:	00005097          	auipc	ra,0x5
+     f52:	c9e080e7          	jalr	-866(ra) # 5bec <printf>
+    exit(1);
+     f56:	4505                	li	a0,1
+     f58:	00005097          	auipc	ra,0x5
+     f5c:	8ea080e7          	jalr	-1814(ra) # 5842 <exit>
+
+0000000000000f60 <bigdir>:
+{
+     f60:	715d                	addi	sp,sp,-80
+     f62:	e486                	sd	ra,72(sp)
+     f64:	e0a2                	sd	s0,64(sp)
+     f66:	fc26                	sd	s1,56(sp)
+     f68:	f84a                	sd	s2,48(sp)
+     f6a:	f44e                	sd	s3,40(sp)
+     f6c:	f052                	sd	s4,32(sp)
+     f6e:	ec56                	sd	s5,24(sp)
+     f70:	e85a                	sd	s6,16(sp)
+     f72:	0880                	addi	s0,sp,80
+     f74:	89aa                	mv	s3,a0
+  unlink("bd");
+     f76:	00005517          	auipc	a0,0x5
+     f7a:	53250513          	addi	a0,a0,1330 # 64a8 <malloc+0x804>
+     f7e:	00005097          	auipc	ra,0x5
+     f82:	914080e7          	jalr	-1772(ra) # 5892 <unlink>
+  fd = open("bd", O_CREATE);
+     f86:	20000593          	li	a1,512
+     f8a:	00005517          	auipc	a0,0x5
+     f8e:	51e50513          	addi	a0,a0,1310 # 64a8 <malloc+0x804>
+     f92:	00005097          	auipc	ra,0x5
+     f96:	8f0080e7          	jalr	-1808(ra) # 5882 <open>
+  if(fd < 0){
+     f9a:	0c054963          	bltz	a0,106c <bigdir+0x10c>
+  close(fd);
+     f9e:	00005097          	auipc	ra,0x5
+     fa2:	8cc080e7          	jalr	-1844(ra) # 586a <close>
+  for(i = 0; i < N; i++){
+     fa6:	4901                	li	s2,0
+    name[0] = 'x';
+     fa8:	07800a93          	li	s5,120
+    if(link("bd", name) != 0){
+     fac:	00005a17          	auipc	s4,0x5
+     fb0:	4fca0a13          	addi	s4,s4,1276 # 64a8 <malloc+0x804>
+  for(i = 0; i < N; i++){
+     fb4:	1f400b13          	li	s6,500
+    name[0] = 'x';
+     fb8:	fb540823          	sb	s5,-80(s0)
+    name[1] = '0' + (i / 64);
+     fbc:	41f9571b          	sraiw	a4,s2,0x1f
+     fc0:	01a7571b          	srliw	a4,a4,0x1a
+     fc4:	012707bb          	addw	a5,a4,s2
+     fc8:	4067d69b          	sraiw	a3,a5,0x6
+     fcc:	0306869b          	addiw	a3,a3,48
+     fd0:	fad408a3          	sb	a3,-79(s0)
+    name[2] = '0' + (i % 64);
+     fd4:	03f7f793          	andi	a5,a5,63
+     fd8:	9f99                	subw	a5,a5,a4
+     fda:	0307879b          	addiw	a5,a5,48
+     fde:	faf40923          	sb	a5,-78(s0)
+    name[3] = '\0';
+     fe2:	fa0409a3          	sb	zero,-77(s0)
+    if(link("bd", name) != 0){
+     fe6:	fb040593          	addi	a1,s0,-80
+     fea:	8552                	mv	a0,s4
+     fec:	00005097          	auipc	ra,0x5
+     ff0:	8b6080e7          	jalr	-1866(ra) # 58a2 <link>
+     ff4:	84aa                	mv	s1,a0
+     ff6:	e949                	bnez	a0,1088 <bigdir+0x128>
+  for(i = 0; i < N; i++){
+     ff8:	2905                	addiw	s2,s2,1
+     ffa:	fb691fe3          	bne	s2,s6,fb8 <bigdir+0x58>
+  unlink("bd");
+     ffe:	00005517          	auipc	a0,0x5
+    1002:	4aa50513          	addi	a0,a0,1194 # 64a8 <malloc+0x804>
+    1006:	00005097          	auipc	ra,0x5
+    100a:	88c080e7          	jalr	-1908(ra) # 5892 <unlink>
+    name[0] = 'x';
+    100e:	07800913          	li	s2,120
+  for(i = 0; i < N; i++){
+    1012:	1f400a13          	li	s4,500
+    name[0] = 'x';
+    1016:	fb240823          	sb	s2,-80(s0)
+    name[1] = '0' + (i / 64);
+    101a:	41f4d71b          	sraiw	a4,s1,0x1f
+    101e:	01a7571b          	srliw	a4,a4,0x1a
+    1022:	009707bb          	addw	a5,a4,s1
+    1026:	4067d69b          	sraiw	a3,a5,0x6
+    102a:	0306869b          	addiw	a3,a3,48
+    102e:	fad408a3          	sb	a3,-79(s0)
+    name[2] = '0' + (i % 64);
+    1032:	03f7f793          	andi	a5,a5,63
+    1036:	9f99                	subw	a5,a5,a4
+    1038:	0307879b          	addiw	a5,a5,48
+    103c:	faf40923          	sb	a5,-78(s0)
+    name[3] = '\0';
+    1040:	fa0409a3          	sb	zero,-77(s0)
+    if(unlink(name) != 0){
+    1044:	fb040513          	addi	a0,s0,-80
+    1048:	00005097          	auipc	ra,0x5
+    104c:	84a080e7          	jalr	-1974(ra) # 5892 <unlink>
+    1050:	ed21                	bnez	a0,10a8 <bigdir+0x148>
+  for(i = 0; i < N; i++){
+    1052:	2485                	addiw	s1,s1,1
+    1054:	fd4491e3          	bne	s1,s4,1016 <bigdir+0xb6>
+}
+    1058:	60a6                	ld	ra,72(sp)
+    105a:	6406                	ld	s0,64(sp)
+    105c:	74e2                	ld	s1,56(sp)
+    105e:	7942                	ld	s2,48(sp)
+    1060:	79a2                	ld	s3,40(sp)
+    1062:	7a02                	ld	s4,32(sp)
+    1064:	6ae2                	ld	s5,24(sp)
+    1066:	6b42                	ld	s6,16(sp)
+    1068:	6161                	addi	sp,sp,80
+    106a:	8082                	ret
+    printf("%s: bigdir create failed\n", s);
+    106c:	85ce                	mv	a1,s3
+    106e:	00005517          	auipc	a0,0x5
+    1072:	44250513          	addi	a0,a0,1090 # 64b0 <malloc+0x80c>
+    1076:	00005097          	auipc	ra,0x5
+    107a:	b76080e7          	jalr	-1162(ra) # 5bec <printf>
+    exit(1);
+    107e:	4505                	li	a0,1
+    1080:	00004097          	auipc	ra,0x4
+    1084:	7c2080e7          	jalr	1986(ra) # 5842 <exit>
+      printf("%s: bigdir link(bd, %s) failed\n", s, name);
+    1088:	fb040613          	addi	a2,s0,-80
+    108c:	85ce                	mv	a1,s3
+    108e:	00005517          	auipc	a0,0x5
+    1092:	44250513          	addi	a0,a0,1090 # 64d0 <malloc+0x82c>
+    1096:	00005097          	auipc	ra,0x5
+    109a:	b56080e7          	jalr	-1194(ra) # 5bec <printf>
+      exit(1);
+    109e:	4505                	li	a0,1
+    10a0:	00004097          	auipc	ra,0x4
+    10a4:	7a2080e7          	jalr	1954(ra) # 5842 <exit>
+      printf("%s: bigdir unlink failed", s);
+    10a8:	85ce                	mv	a1,s3
+    10aa:	00005517          	auipc	a0,0x5
+    10ae:	44650513          	addi	a0,a0,1094 # 64f0 <malloc+0x84c>
+    10b2:	00005097          	auipc	ra,0x5
+    10b6:	b3a080e7          	jalr	-1222(ra) # 5bec <printf>
+      exit(1);
+    10ba:	4505                	li	a0,1
+    10bc:	00004097          	auipc	ra,0x4
+    10c0:	786080e7          	jalr	1926(ra) # 5842 <exit>
+
+00000000000010c4 <validatetest>:
+{
+    10c4:	7139                	addi	sp,sp,-64
+    10c6:	fc06                	sd	ra,56(sp)
+    10c8:	f822                	sd	s0,48(sp)
+    10ca:	f426                	sd	s1,40(sp)
+    10cc:	f04a                	sd	s2,32(sp)
+    10ce:	ec4e                	sd	s3,24(sp)
+    10d0:	e852                	sd	s4,16(sp)
+    10d2:	e456                	sd	s5,8(sp)
+    10d4:	e05a                	sd	s6,0(sp)
+    10d6:	0080                	addi	s0,sp,64
+    10d8:	8b2a                	mv	s6,a0
+  for(p = 0; p <= (uint)hi; p += PGSIZE){
+    10da:	4481                	li	s1,0
+    if(link("nosuchfile", (char*)p) != -1){
+    10dc:	00005997          	auipc	s3,0x5
+    10e0:	43498993          	addi	s3,s3,1076 # 6510 <malloc+0x86c>
+    10e4:	597d                	li	s2,-1
+  for(p = 0; p <= (uint)hi; p += PGSIZE){
+    10e6:	6a85                	lui	s5,0x1
+    10e8:	00114a37          	lui	s4,0x114
+    if(link("nosuchfile", (char*)p) != -1){
+    10ec:	85a6                	mv	a1,s1
+    10ee:	854e                	mv	a0,s3
+    10f0:	00004097          	auipc	ra,0x4
+    10f4:	7b2080e7          	jalr	1970(ra) # 58a2 <link>
+    10f8:	01251f63          	bne	a0,s2,1116 <validatetest+0x52>
+  for(p = 0; p <= (uint)hi; p += PGSIZE){
+    10fc:	94d6                	add	s1,s1,s5
+    10fe:	ff4497e3          	bne	s1,s4,10ec <validatetest+0x28>
+}
+    1102:	70e2                	ld	ra,56(sp)
+    1104:	7442                	ld	s0,48(sp)
+    1106:	74a2                	ld	s1,40(sp)
+    1108:	7902                	ld	s2,32(sp)
+    110a:	69e2                	ld	s3,24(sp)
+    110c:	6a42                	ld	s4,16(sp)
+    110e:	6aa2                	ld	s5,8(sp)
+    1110:	6b02                	ld	s6,0(sp)
+    1112:	6121                	addi	sp,sp,64
+    1114:	8082                	ret
+      printf("%s: link should not succeed\n", s);
+    1116:	85da                	mv	a1,s6
+    1118:	00005517          	auipc	a0,0x5
+    111c:	40850513          	addi	a0,a0,1032 # 6520 <malloc+0x87c>
+    1120:	00005097          	auipc	ra,0x5
+    1124:	acc080e7          	jalr	-1332(ra) # 5bec <printf>
+      exit(1);
+    1128:	4505                	li	a0,1
+    112a:	00004097          	auipc	ra,0x4
+    112e:	718080e7          	jalr	1816(ra) # 5842 <exit>
+
+0000000000001132 <pgbug>:
+// regression test. copyin(), copyout(), and copyinstr() used to cast
+// the virtual page address to uint, which (with certain wild system
+// call arguments) resulted in a kernel page faults.
+void
+pgbug(char *s)
+{
+    1132:	7179                	addi	sp,sp,-48
+    1134:	f406                	sd	ra,40(sp)
+    1136:	f022                	sd	s0,32(sp)
+    1138:	ec26                	sd	s1,24(sp)
+    113a:	1800                	addi	s0,sp,48
+  char *argv[1];
+  argv[0] = 0;
+    113c:	fc043c23          	sd	zero,-40(s0)
+  exec((char*)0xeaeb0b5b00002f5e, argv);
+    1140:	00007497          	auipc	s1,0x7
+    1144:	4a04b483          	ld	s1,1184(s1) # 85e0 <__SDATA_BEGIN__>
+    1148:	fd840593          	addi	a1,s0,-40
+    114c:	8526                	mv	a0,s1
+    114e:	00004097          	auipc	ra,0x4
+    1152:	72c080e7          	jalr	1836(ra) # 587a <exec>
+
+  pipe((int*)0xeaeb0b5b00002f5e);
+    1156:	8526                	mv	a0,s1
+    1158:	00004097          	auipc	ra,0x4
+    115c:	6fa080e7          	jalr	1786(ra) # 5852 <pipe>
+
+  exit(0);
+    1160:	4501                	li	a0,0
+    1162:	00004097          	auipc	ra,0x4
+    1166:	6e0080e7          	jalr	1760(ra) # 5842 <exit>
+
+000000000000116a <badarg>:
+
+// regression test. test whether exec() leaks memory if one of the
+// arguments is invalid. the test passes if the kernel doesn't panic.
+void
+badarg(char *s)
+{
+    116a:	7139                	addi	sp,sp,-64
+    116c:	fc06                	sd	ra,56(sp)
+    116e:	f822                	sd	s0,48(sp)
+    1170:	f426                	sd	s1,40(sp)
+    1172:	f04a                	sd	s2,32(sp)
+    1174:	ec4e                	sd	s3,24(sp)
+    1176:	0080                	addi	s0,sp,64
+    1178:	64b1                	lui	s1,0xc
+    117a:	35048493          	addi	s1,s1,848 # c350 <buf+0x548>
+  for(int i = 0; i < 50000; i++){
+    char *argv[2];
+    argv[0] = (char*)0xffffffff;
+    117e:	597d                	li	s2,-1
+    1180:	02095913          	srli	s2,s2,0x20
+    argv[1] = 0;
+    exec("echo", argv);
+    1184:	00005997          	auipc	s3,0x5
+    1188:	c4498993          	addi	s3,s3,-956 # 5dc8 <malloc+0x124>
+    argv[0] = (char*)0xffffffff;
+    118c:	fd243023          	sd	s2,-64(s0)
+    argv[1] = 0;
+    1190:	fc043423          	sd	zero,-56(s0)
+    exec("echo", argv);
+    1194:	fc040593          	addi	a1,s0,-64
+    1198:	854e                	mv	a0,s3
+    119a:	00004097          	auipc	ra,0x4
+    119e:	6e0080e7          	jalr	1760(ra) # 587a <exec>
+  for(int i = 0; i < 50000; i++){
+    11a2:	34fd                	addiw	s1,s1,-1
+    11a4:	f4e5                	bnez	s1,118c <badarg+0x22>
+  }
+  
+  exit(0);
+    11a6:	4501                	li	a0,0
+    11a8:	00004097          	auipc	ra,0x4
+    11ac:	69a080e7          	jalr	1690(ra) # 5842 <exit>
+
+00000000000011b0 <copyinstr2>:
+{
+    11b0:	7155                	addi	sp,sp,-208
+    11b2:	e586                	sd	ra,200(sp)
+    11b4:	e1a2                	sd	s0,192(sp)
+    11b6:	0980                	addi	s0,sp,208
+  for(int i = 0; i < MAXPATH; i++)
+    11b8:	f6840793          	addi	a5,s0,-152
+    11bc:	fe840693          	addi	a3,s0,-24
+    b[i] = 'x';
+    11c0:	07800713          	li	a4,120
+    11c4:	00e78023          	sb	a4,0(a5)
+  for(int i = 0; i < MAXPATH; i++)
+    11c8:	0785                	addi	a5,a5,1
+    11ca:	fed79de3          	bne	a5,a3,11c4 <copyinstr2+0x14>
+  b[MAXPATH] = '\0';
+    11ce:	fe040423          	sb	zero,-24(s0)
+  int ret = unlink(b);
+    11d2:	f6840513          	addi	a0,s0,-152
+    11d6:	00004097          	auipc	ra,0x4
+    11da:	6bc080e7          	jalr	1724(ra) # 5892 <unlink>
+  if(ret != -1){
+    11de:	57fd                	li	a5,-1
+    11e0:	0ef51063          	bne	a0,a5,12c0 <copyinstr2+0x110>
+  int fd = open(b, O_CREATE | O_WRONLY);
+    11e4:	20100593          	li	a1,513
+    11e8:	f6840513          	addi	a0,s0,-152
+    11ec:	00004097          	auipc	ra,0x4
+    11f0:	696080e7          	jalr	1686(ra) # 5882 <open>
+  if(fd != -1){
+    11f4:	57fd                	li	a5,-1
+    11f6:	0ef51563          	bne	a0,a5,12e0 <copyinstr2+0x130>
+  ret = link(b, b);
+    11fa:	f6840593          	addi	a1,s0,-152
+    11fe:	852e                	mv	a0,a1
+    1200:	00004097          	auipc	ra,0x4
+    1204:	6a2080e7          	jalr	1698(ra) # 58a2 <link>
+  if(ret != -1){
+    1208:	57fd                	li	a5,-1
+    120a:	0ef51b63          	bne	a0,a5,1300 <copyinstr2+0x150>
+  char *args[] = { "xx", 0 };
+    120e:	00006797          	auipc	a5,0x6
+    1212:	50a78793          	addi	a5,a5,1290 # 7718 <malloc+0x1a74>
+    1216:	f4f43c23          	sd	a5,-168(s0)
+    121a:	f6043023          	sd	zero,-160(s0)
+  ret = exec(b, args);
+    121e:	f5840593          	addi	a1,s0,-168
+    1222:	f6840513          	addi	a0,s0,-152
+    1226:	00004097          	auipc	ra,0x4
+    122a:	654080e7          	jalr	1620(ra) # 587a <exec>
+  if(ret != -1){
+    122e:	57fd                	li	a5,-1
+    1230:	0ef51963          	bne	a0,a5,1322 <copyinstr2+0x172>
+  int pid = fork();
+    1234:	00004097          	auipc	ra,0x4
+    1238:	606080e7          	jalr	1542(ra) # 583a <fork>
+  if(pid < 0){
+    123c:	10054363          	bltz	a0,1342 <copyinstr2+0x192>
+  if(pid == 0){
+    1240:	12051463          	bnez	a0,1368 <copyinstr2+0x1b8>
+    1244:	00007797          	auipc	a5,0x7
+    1248:	4ac78793          	addi	a5,a5,1196 # 86f0 <big.0>
+    124c:	00008697          	auipc	a3,0x8
+    1250:	4a468693          	addi	a3,a3,1188 # 96f0 <__global_pointer$+0x910>
+      big[i] = 'x';
+    1254:	07800713          	li	a4,120
+    1258:	00e78023          	sb	a4,0(a5)
+    for(int i = 0; i < PGSIZE; i++)
+    125c:	0785                	addi	a5,a5,1
+    125e:	fed79de3          	bne	a5,a3,1258 <copyinstr2+0xa8>
+    big[PGSIZE] = '\0';
+    1262:	00008797          	auipc	a5,0x8
+    1266:	48078723          	sb	zero,1166(a5) # 96f0 <__global_pointer$+0x910>
+    char *args2[] = { big, big, big, 0 };
+    126a:	00007797          	auipc	a5,0x7
+    126e:	eee78793          	addi	a5,a5,-274 # 8158 <malloc+0x24b4>
+    1272:	6390                	ld	a2,0(a5)
+    1274:	6794                	ld	a3,8(a5)
+    1276:	6b98                	ld	a4,16(a5)
+    1278:	6f9c                	ld	a5,24(a5)
+    127a:	f2c43823          	sd	a2,-208(s0)
+    127e:	f2d43c23          	sd	a3,-200(s0)
+    1282:	f4e43023          	sd	a4,-192(s0)
+    1286:	f4f43423          	sd	a5,-184(s0)
+    ret = exec("echo", args2);
+    128a:	f3040593          	addi	a1,s0,-208
+    128e:	00005517          	auipc	a0,0x5
+    1292:	b3a50513          	addi	a0,a0,-1222 # 5dc8 <malloc+0x124>
+    1296:	00004097          	auipc	ra,0x4
+    129a:	5e4080e7          	jalr	1508(ra) # 587a <exec>
+    if(ret != -1){
+    129e:	57fd                	li	a5,-1
+    12a0:	0af50e63          	beq	a0,a5,135c <copyinstr2+0x1ac>
+      printf("exec(echo, BIG) returned %d, not -1\n", fd);
+    12a4:	55fd                	li	a1,-1
+    12a6:	00005517          	auipc	a0,0x5
+    12aa:	32250513          	addi	a0,a0,802 # 65c8 <malloc+0x924>
+    12ae:	00005097          	auipc	ra,0x5
+    12b2:	93e080e7          	jalr	-1730(ra) # 5bec <printf>
+      exit(1);
+    12b6:	4505                	li	a0,1
+    12b8:	00004097          	auipc	ra,0x4
+    12bc:	58a080e7          	jalr	1418(ra) # 5842 <exit>
+    printf("unlink(%s) returned %d, not -1\n", b, ret);
+    12c0:	862a                	mv	a2,a0
+    12c2:	f6840593          	addi	a1,s0,-152
+    12c6:	00005517          	auipc	a0,0x5
+    12ca:	27a50513          	addi	a0,a0,634 # 6540 <malloc+0x89c>
+    12ce:	00005097          	auipc	ra,0x5
+    12d2:	91e080e7          	jalr	-1762(ra) # 5bec <printf>
+    exit(1);
+    12d6:	4505                	li	a0,1
+    12d8:	00004097          	auipc	ra,0x4
+    12dc:	56a080e7          	jalr	1386(ra) # 5842 <exit>
+    printf("open(%s) returned %d, not -1\n", b, fd);
+    12e0:	862a                	mv	a2,a0
+    12e2:	f6840593          	addi	a1,s0,-152
+    12e6:	00005517          	auipc	a0,0x5
+    12ea:	27a50513          	addi	a0,a0,634 # 6560 <malloc+0x8bc>
+    12ee:	00005097          	auipc	ra,0x5
+    12f2:	8fe080e7          	jalr	-1794(ra) # 5bec <printf>
+    exit(1);
+    12f6:	4505                	li	a0,1
+    12f8:	00004097          	auipc	ra,0x4
+    12fc:	54a080e7          	jalr	1354(ra) # 5842 <exit>
+    printf("link(%s, %s) returned %d, not -1\n", b, b, ret);
+    1300:	86aa                	mv	a3,a0
+    1302:	f6840613          	addi	a2,s0,-152
+    1306:	85b2                	mv	a1,a2
+    1308:	00005517          	auipc	a0,0x5
+    130c:	27850513          	addi	a0,a0,632 # 6580 <malloc+0x8dc>
+    1310:	00005097          	auipc	ra,0x5
+    1314:	8dc080e7          	jalr	-1828(ra) # 5bec <printf>
+    exit(1);
+    1318:	4505                	li	a0,1
+    131a:	00004097          	auipc	ra,0x4
+    131e:	528080e7          	jalr	1320(ra) # 5842 <exit>
+    printf("exec(%s) returned %d, not -1\n", b, fd);
+    1322:	567d                	li	a2,-1
+    1324:	f6840593          	addi	a1,s0,-152
+    1328:	00005517          	auipc	a0,0x5
+    132c:	28050513          	addi	a0,a0,640 # 65a8 <malloc+0x904>
+    1330:	00005097          	auipc	ra,0x5
+    1334:	8bc080e7          	jalr	-1860(ra) # 5bec <printf>
+    exit(1);
+    1338:	4505                	li	a0,1
+    133a:	00004097          	auipc	ra,0x4
+    133e:	508080e7          	jalr	1288(ra) # 5842 <exit>
+    printf("fork failed\n");
+    1342:	00005517          	auipc	a0,0x5
+    1346:	6fe50513          	addi	a0,a0,1790 # 6a40 <malloc+0xd9c>
+    134a:	00005097          	auipc	ra,0x5
+    134e:	8a2080e7          	jalr	-1886(ra) # 5bec <printf>
+    exit(1);
+    1352:	4505                	li	a0,1
+    1354:	00004097          	auipc	ra,0x4
+    1358:	4ee080e7          	jalr	1262(ra) # 5842 <exit>
+    exit(747); // OK
+    135c:	2eb00513          	li	a0,747
+    1360:	00004097          	auipc	ra,0x4
+    1364:	4e2080e7          	jalr	1250(ra) # 5842 <exit>
+  int st = 0;
+    1368:	f4042a23          	sw	zero,-172(s0)
+  wait(&st);
+    136c:	f5440513          	addi	a0,s0,-172
+    1370:	00004097          	auipc	ra,0x4
+    1374:	4da080e7          	jalr	1242(ra) # 584a <wait>
+  if(st != 747){
+    1378:	f5442703          	lw	a4,-172(s0)
+    137c:	2eb00793          	li	a5,747
+    1380:	00f71663          	bne	a4,a5,138c <copyinstr2+0x1dc>
+}
+    1384:	60ae                	ld	ra,200(sp)
+    1386:	640e                	ld	s0,192(sp)
+    1388:	6169                	addi	sp,sp,208
+    138a:	8082                	ret
+    printf("exec(echo, BIG) succeeded, should have failed\n");
+    138c:	00005517          	auipc	a0,0x5
+    1390:	26450513          	addi	a0,a0,612 # 65f0 <malloc+0x94c>
+    1394:	00005097          	auipc	ra,0x5
+    1398:	858080e7          	jalr	-1960(ra) # 5bec <printf>
+    exit(1);
+    139c:	4505                	li	a0,1
+    139e:	00004097          	auipc	ra,0x4
+    13a2:	4a4080e7          	jalr	1188(ra) # 5842 <exit>
+
+00000000000013a6 <truncate3>:
+{
+    13a6:	7159                	addi	sp,sp,-112
+    13a8:	f486                	sd	ra,104(sp)
+    13aa:	f0a2                	sd	s0,96(sp)
+    13ac:	eca6                	sd	s1,88(sp)
+    13ae:	e8ca                	sd	s2,80(sp)
+    13b0:	e4ce                	sd	s3,72(sp)
+    13b2:	e0d2                	sd	s4,64(sp)
+    13b4:	fc56                	sd	s5,56(sp)
+    13b6:	1880                	addi	s0,sp,112
+    13b8:	892a                	mv	s2,a0
+  close(open("truncfile", O_CREATE|O_TRUNC|O_WRONLY));
+    13ba:	60100593          	li	a1,1537
+    13be:	00005517          	auipc	a0,0x5
+    13c2:	a6250513          	addi	a0,a0,-1438 # 5e20 <malloc+0x17c>
+    13c6:	00004097          	auipc	ra,0x4
+    13ca:	4bc080e7          	jalr	1212(ra) # 5882 <open>
+    13ce:	00004097          	auipc	ra,0x4
+    13d2:	49c080e7          	jalr	1180(ra) # 586a <close>
+  pid = fork();
+    13d6:	00004097          	auipc	ra,0x4
+    13da:	464080e7          	jalr	1124(ra) # 583a <fork>
+  if(pid < 0){
+    13de:	08054063          	bltz	a0,145e <truncate3+0xb8>
+  if(pid == 0){
+    13e2:	e969                	bnez	a0,14b4 <truncate3+0x10e>
+    13e4:	06400993          	li	s3,100
+      int fd = open("truncfile", O_WRONLY);
+    13e8:	00005a17          	auipc	s4,0x5
+    13ec:	a38a0a13          	addi	s4,s4,-1480 # 5e20 <malloc+0x17c>
+      int n = write(fd, "1234567890", 10);
+    13f0:	00005a97          	auipc	s5,0x5
+    13f4:	260a8a93          	addi	s5,s5,608 # 6650 <malloc+0x9ac>
+      int fd = open("truncfile", O_WRONLY);
+    13f8:	4585                	li	a1,1
+    13fa:	8552                	mv	a0,s4
+    13fc:	00004097          	auipc	ra,0x4
+    1400:	486080e7          	jalr	1158(ra) # 5882 <open>
+    1404:	84aa                	mv	s1,a0
+      if(fd < 0){
+    1406:	06054a63          	bltz	a0,147a <truncate3+0xd4>
+      int n = write(fd, "1234567890", 10);
+    140a:	4629                	li	a2,10
+    140c:	85d6                	mv	a1,s5
+    140e:	00004097          	auipc	ra,0x4
+    1412:	454080e7          	jalr	1108(ra) # 5862 <write>
+      if(n != 10){
+    1416:	47a9                	li	a5,10
+    1418:	06f51f63          	bne	a0,a5,1496 <truncate3+0xf0>
+      close(fd);
+    141c:	8526                	mv	a0,s1
+    141e:	00004097          	auipc	ra,0x4
+    1422:	44c080e7          	jalr	1100(ra) # 586a <close>
+      fd = open("truncfile", O_RDONLY);
+    1426:	4581                	li	a1,0
+    1428:	8552                	mv	a0,s4
+    142a:	00004097          	auipc	ra,0x4
+    142e:	458080e7          	jalr	1112(ra) # 5882 <open>
+    1432:	84aa                	mv	s1,a0
+      read(fd, buf, sizeof(buf));
+    1434:	02000613          	li	a2,32
+    1438:	f9840593          	addi	a1,s0,-104
+    143c:	00004097          	auipc	ra,0x4
+    1440:	41e080e7          	jalr	1054(ra) # 585a <read>
+      close(fd);
+    1444:	8526                	mv	a0,s1
+    1446:	00004097          	auipc	ra,0x4
+    144a:	424080e7          	jalr	1060(ra) # 586a <close>
+    for(int i = 0; i < 100; i++){
+    144e:	39fd                	addiw	s3,s3,-1
+    1450:	fa0994e3          	bnez	s3,13f8 <truncate3+0x52>
+    exit(0);
+    1454:	4501                	li	a0,0
+    1456:	00004097          	auipc	ra,0x4
+    145a:	3ec080e7          	jalr	1004(ra) # 5842 <exit>
+    printf("%s: fork failed\n", s);
+    145e:	85ca                	mv	a1,s2
+    1460:	00005517          	auipc	a0,0x5
+    1464:	1c050513          	addi	a0,a0,448 # 6620 <malloc+0x97c>
+    1468:	00004097          	auipc	ra,0x4
+    146c:	784080e7          	jalr	1924(ra) # 5bec <printf>
+    exit(1);
+    1470:	4505                	li	a0,1
+    1472:	00004097          	auipc	ra,0x4
+    1476:	3d0080e7          	jalr	976(ra) # 5842 <exit>
+        printf("%s: open failed\n", s);
+    147a:	85ca                	mv	a1,s2
+    147c:	00005517          	auipc	a0,0x5
+    1480:	1bc50513          	addi	a0,a0,444 # 6638 <malloc+0x994>
+    1484:	00004097          	auipc	ra,0x4
+    1488:	768080e7          	jalr	1896(ra) # 5bec <printf>
+        exit(1);
+    148c:	4505                	li	a0,1
+    148e:	00004097          	auipc	ra,0x4
+    1492:	3b4080e7          	jalr	948(ra) # 5842 <exit>
+        printf("%s: write got %d, expected 10\n", s, n);
+    1496:	862a                	mv	a2,a0
+    1498:	85ca                	mv	a1,s2
+    149a:	00005517          	auipc	a0,0x5
+    149e:	1c650513          	addi	a0,a0,454 # 6660 <malloc+0x9bc>
+    14a2:	00004097          	auipc	ra,0x4
+    14a6:	74a080e7          	jalr	1866(ra) # 5bec <printf>
+        exit(1);
+    14aa:	4505                	li	a0,1
+    14ac:	00004097          	auipc	ra,0x4
+    14b0:	396080e7          	jalr	918(ra) # 5842 <exit>
+    14b4:	09600993          	li	s3,150
+    int fd = open("truncfile", O_CREATE|O_WRONLY|O_TRUNC);
+    14b8:	00005a17          	auipc	s4,0x5
+    14bc:	968a0a13          	addi	s4,s4,-1688 # 5e20 <malloc+0x17c>
+    int n = write(fd, "xxx", 3);
+    14c0:	00005a97          	auipc	s5,0x5
+    14c4:	1c0a8a93          	addi	s5,s5,448 # 6680 <malloc+0x9dc>
+    int fd = open("truncfile", O_CREATE|O_WRONLY|O_TRUNC);
+    14c8:	60100593          	li	a1,1537
+    14cc:	8552                	mv	a0,s4
+    14ce:	00004097          	auipc	ra,0x4
+    14d2:	3b4080e7          	jalr	948(ra) # 5882 <open>
+    14d6:	84aa                	mv	s1,a0
+    if(fd < 0){
+    14d8:	04054763          	bltz	a0,1526 <truncate3+0x180>
+    int n = write(fd, "xxx", 3);
+    14dc:	460d                	li	a2,3
+    14de:	85d6                	mv	a1,s5
+    14e0:	00004097          	auipc	ra,0x4
+    14e4:	382080e7          	jalr	898(ra) # 5862 <write>
+    if(n != 3){
+    14e8:	478d                	li	a5,3
+    14ea:	04f51c63          	bne	a0,a5,1542 <truncate3+0x19c>
+    close(fd);
+    14ee:	8526                	mv	a0,s1
+    14f0:	00004097          	auipc	ra,0x4
+    14f4:	37a080e7          	jalr	890(ra) # 586a <close>
+  for(int i = 0; i < 150; i++){
+    14f8:	39fd                	addiw	s3,s3,-1
+    14fa:	fc0997e3          	bnez	s3,14c8 <truncate3+0x122>
+  wait(&xstatus);
+    14fe:	fbc40513          	addi	a0,s0,-68
+    1502:	00004097          	auipc	ra,0x4
+    1506:	348080e7          	jalr	840(ra) # 584a <wait>
+  unlink("truncfile");
+    150a:	00005517          	auipc	a0,0x5
+    150e:	91650513          	addi	a0,a0,-1770 # 5e20 <malloc+0x17c>
+    1512:	00004097          	auipc	ra,0x4
+    1516:	380080e7          	jalr	896(ra) # 5892 <unlink>
+  exit(xstatus);
+    151a:	fbc42503          	lw	a0,-68(s0)
+    151e:	00004097          	auipc	ra,0x4
+    1522:	324080e7          	jalr	804(ra) # 5842 <exit>
+      printf("%s: open failed\n", s);
+    1526:	85ca                	mv	a1,s2
+    1528:	00005517          	auipc	a0,0x5
+    152c:	11050513          	addi	a0,a0,272 # 6638 <malloc+0x994>
+    1530:	00004097          	auipc	ra,0x4
+    1534:	6bc080e7          	jalr	1724(ra) # 5bec <printf>
+      exit(1);
+    1538:	4505                	li	a0,1
+    153a:	00004097          	auipc	ra,0x4
+    153e:	308080e7          	jalr	776(ra) # 5842 <exit>
+      printf("%s: write got %d, expected 3\n", s, n);
+    1542:	862a                	mv	a2,a0
+    1544:	85ca                	mv	a1,s2
+    1546:	00005517          	auipc	a0,0x5
+    154a:	14250513          	addi	a0,a0,322 # 6688 <malloc+0x9e4>
+    154e:	00004097          	auipc	ra,0x4
+    1552:	69e080e7          	jalr	1694(ra) # 5bec <printf>
+      exit(1);
+    1556:	4505                	li	a0,1
+    1558:	00004097          	auipc	ra,0x4
+    155c:	2ea080e7          	jalr	746(ra) # 5842 <exit>
+
+0000000000001560 <exectest>:
+{
+    1560:	715d                	addi	sp,sp,-80
+    1562:	e486                	sd	ra,72(sp)
+    1564:	e0a2                	sd	s0,64(sp)
+    1566:	fc26                	sd	s1,56(sp)
+    1568:	f84a                	sd	s2,48(sp)
+    156a:	0880                	addi	s0,sp,80
+    156c:	892a                	mv	s2,a0
+  char *echoargv[] = { "echo", "OK", 0 };
+    156e:	00005797          	auipc	a5,0x5
+    1572:	85a78793          	addi	a5,a5,-1958 # 5dc8 <malloc+0x124>
+    1576:	fcf43023          	sd	a5,-64(s0)
+    157a:	00005797          	auipc	a5,0x5
+    157e:	12e78793          	addi	a5,a5,302 # 66a8 <malloc+0xa04>
+    1582:	fcf43423          	sd	a5,-56(s0)
+    1586:	fc043823          	sd	zero,-48(s0)
+  unlink("echo-ok");
+    158a:	00005517          	auipc	a0,0x5
+    158e:	12650513          	addi	a0,a0,294 # 66b0 <malloc+0xa0c>
+    1592:	00004097          	auipc	ra,0x4
+    1596:	300080e7          	jalr	768(ra) # 5892 <unlink>
+  pid = fork();
+    159a:	00004097          	auipc	ra,0x4
+    159e:	2a0080e7          	jalr	672(ra) # 583a <fork>
+  if(pid < 0) {
+    15a2:	04054663          	bltz	a0,15ee <exectest+0x8e>
+    15a6:	84aa                	mv	s1,a0
+  if(pid == 0) {
+    15a8:	e959                	bnez	a0,163e <exectest+0xde>
+    close(1);
+    15aa:	4505                	li	a0,1
+    15ac:	00004097          	auipc	ra,0x4
+    15b0:	2be080e7          	jalr	702(ra) # 586a <close>
+    fd = open("echo-ok", O_CREATE|O_WRONLY);
+    15b4:	20100593          	li	a1,513
+    15b8:	00005517          	auipc	a0,0x5
+    15bc:	0f850513          	addi	a0,a0,248 # 66b0 <malloc+0xa0c>
+    15c0:	00004097          	auipc	ra,0x4
+    15c4:	2c2080e7          	jalr	706(ra) # 5882 <open>
+    if(fd < 0) {
+    15c8:	04054163          	bltz	a0,160a <exectest+0xaa>
+    if(fd != 1) {
+    15cc:	4785                	li	a5,1
+    15ce:	04f50c63          	beq	a0,a5,1626 <exectest+0xc6>
+      printf("%s: wrong fd\n", s);
+    15d2:	85ca                	mv	a1,s2
+    15d4:	00005517          	auipc	a0,0x5
+    15d8:	0fc50513          	addi	a0,a0,252 # 66d0 <malloc+0xa2c>
+    15dc:	00004097          	auipc	ra,0x4
+    15e0:	610080e7          	jalr	1552(ra) # 5bec <printf>
+      exit(1);
+    15e4:	4505                	li	a0,1
+    15e6:	00004097          	auipc	ra,0x4
+    15ea:	25c080e7          	jalr	604(ra) # 5842 <exit>
+     printf("%s: fork failed\n", s);
+    15ee:	85ca                	mv	a1,s2
+    15f0:	00005517          	auipc	a0,0x5
+    15f4:	03050513          	addi	a0,a0,48 # 6620 <malloc+0x97c>
+    15f8:	00004097          	auipc	ra,0x4
+    15fc:	5f4080e7          	jalr	1524(ra) # 5bec <printf>
+     exit(1);
+    1600:	4505                	li	a0,1
+    1602:	00004097          	auipc	ra,0x4
+    1606:	240080e7          	jalr	576(ra) # 5842 <exit>
+      printf("%s: create failed\n", s);
+    160a:	85ca                	mv	a1,s2
+    160c:	00005517          	auipc	a0,0x5
+    1610:	0ac50513          	addi	a0,a0,172 # 66b8 <malloc+0xa14>
+    1614:	00004097          	auipc	ra,0x4
+    1618:	5d8080e7          	jalr	1496(ra) # 5bec <printf>
+      exit(1);
+    161c:	4505                	li	a0,1
+    161e:	00004097          	auipc	ra,0x4
+    1622:	224080e7          	jalr	548(ra) # 5842 <exit>
+    if(exec("echo", echoargv) < 0){
+    1626:	fc040593          	addi	a1,s0,-64
+    162a:	00004517          	auipc	a0,0x4
+    162e:	79e50513          	addi	a0,a0,1950 # 5dc8 <malloc+0x124>
+    1632:	00004097          	auipc	ra,0x4
+    1636:	248080e7          	jalr	584(ra) # 587a <exec>
+    163a:	02054163          	bltz	a0,165c <exectest+0xfc>
+  if (wait(&xstatus) != pid) {
+    163e:	fdc40513          	addi	a0,s0,-36
+    1642:	00004097          	auipc	ra,0x4
+    1646:	208080e7          	jalr	520(ra) # 584a <wait>
+    164a:	02951763          	bne	a0,s1,1678 <exectest+0x118>
+  if(xstatus != 0)
+    164e:	fdc42503          	lw	a0,-36(s0)
+    1652:	cd0d                	beqz	a0,168c <exectest+0x12c>
+    exit(xstatus);
+    1654:	00004097          	auipc	ra,0x4
+    1658:	1ee080e7          	jalr	494(ra) # 5842 <exit>
+      printf("%s: exec echo failed\n", s);
+    165c:	85ca                	mv	a1,s2
+    165e:	00005517          	auipc	a0,0x5
+    1662:	08250513          	addi	a0,a0,130 # 66e0 <malloc+0xa3c>
+    1666:	00004097          	auipc	ra,0x4
+    166a:	586080e7          	jalr	1414(ra) # 5bec <printf>
+      exit(1);
+    166e:	4505                	li	a0,1
+    1670:	00004097          	auipc	ra,0x4
+    1674:	1d2080e7          	jalr	466(ra) # 5842 <exit>
+    printf("%s: wait failed!\n", s);
+    1678:	85ca                	mv	a1,s2
+    167a:	00005517          	auipc	a0,0x5
+    167e:	07e50513          	addi	a0,a0,126 # 66f8 <malloc+0xa54>
+    1682:	00004097          	auipc	ra,0x4
+    1686:	56a080e7          	jalr	1386(ra) # 5bec <printf>
+    168a:	b7d1                	j	164e <exectest+0xee>
+  fd = open("echo-ok", O_RDONLY);
+    168c:	4581                	li	a1,0
+    168e:	00005517          	auipc	a0,0x5
+    1692:	02250513          	addi	a0,a0,34 # 66b0 <malloc+0xa0c>
+    1696:	00004097          	auipc	ra,0x4
+    169a:	1ec080e7          	jalr	492(ra) # 5882 <open>
+  if(fd < 0) {
+    169e:	02054a63          	bltz	a0,16d2 <exectest+0x172>
+  if (read(fd, buf, 2) != 2) {
+    16a2:	4609                	li	a2,2
+    16a4:	fb840593          	addi	a1,s0,-72
+    16a8:	00004097          	auipc	ra,0x4
+    16ac:	1b2080e7          	jalr	434(ra) # 585a <read>
+    16b0:	4789                	li	a5,2
+    16b2:	02f50e63          	beq	a0,a5,16ee <exectest+0x18e>
+    printf("%s: read failed\n", s);
+    16b6:	85ca                	mv	a1,s2
+    16b8:	00005517          	auipc	a0,0x5
+    16bc:	ab050513          	addi	a0,a0,-1360 # 6168 <malloc+0x4c4>
+    16c0:	00004097          	auipc	ra,0x4
+    16c4:	52c080e7          	jalr	1324(ra) # 5bec <printf>
+    exit(1);
+    16c8:	4505                	li	a0,1
+    16ca:	00004097          	auipc	ra,0x4
+    16ce:	178080e7          	jalr	376(ra) # 5842 <exit>
+    printf("%s: open failed\n", s);
+    16d2:	85ca                	mv	a1,s2
+    16d4:	00005517          	auipc	a0,0x5
+    16d8:	f6450513          	addi	a0,a0,-156 # 6638 <malloc+0x994>
+    16dc:	00004097          	auipc	ra,0x4
+    16e0:	510080e7          	jalr	1296(ra) # 5bec <printf>
+    exit(1);
+    16e4:	4505                	li	a0,1
+    16e6:	00004097          	auipc	ra,0x4
+    16ea:	15c080e7          	jalr	348(ra) # 5842 <exit>
+  unlink("echo-ok");
+    16ee:	00005517          	auipc	a0,0x5
+    16f2:	fc250513          	addi	a0,a0,-62 # 66b0 <malloc+0xa0c>
+    16f6:	00004097          	auipc	ra,0x4
+    16fa:	19c080e7          	jalr	412(ra) # 5892 <unlink>
+  if(buf[0] == 'O' && buf[1] == 'K')
+    16fe:	fb844703          	lbu	a4,-72(s0)
+    1702:	04f00793          	li	a5,79
+    1706:	00f71863          	bne	a4,a5,1716 <exectest+0x1b6>
+    170a:	fb944703          	lbu	a4,-71(s0)
+    170e:	04b00793          	li	a5,75
+    1712:	02f70063          	beq	a4,a5,1732 <exectest+0x1d2>
+    printf("%s: wrong output\n", s);
+    1716:	85ca                	mv	a1,s2
+    1718:	00005517          	auipc	a0,0x5
+    171c:	ff850513          	addi	a0,a0,-8 # 6710 <malloc+0xa6c>
+    1720:	00004097          	auipc	ra,0x4
+    1724:	4cc080e7          	jalr	1228(ra) # 5bec <printf>
+    exit(1);
+    1728:	4505                	li	a0,1
+    172a:	00004097          	auipc	ra,0x4
+    172e:	118080e7          	jalr	280(ra) # 5842 <exit>
+    exit(0);
+    1732:	4501                	li	a0,0
+    1734:	00004097          	auipc	ra,0x4
+    1738:	10e080e7          	jalr	270(ra) # 5842 <exit>
+
+000000000000173c <pipe1>:
+{
+    173c:	711d                	addi	sp,sp,-96
+    173e:	ec86                	sd	ra,88(sp)
+    1740:	e8a2                	sd	s0,80(sp)
+    1742:	e4a6                	sd	s1,72(sp)
+    1744:	e0ca                	sd	s2,64(sp)
+    1746:	fc4e                	sd	s3,56(sp)
+    1748:	f852                	sd	s4,48(sp)
+    174a:	f456                	sd	s5,40(sp)
+    174c:	f05a                	sd	s6,32(sp)
+    174e:	ec5e                	sd	s7,24(sp)
+    1750:	1080                	addi	s0,sp,96
+    1752:	892a                	mv	s2,a0
+  if(pipe(fds) != 0){
+    1754:	fa840513          	addi	a0,s0,-88
+    1758:	00004097          	auipc	ra,0x4
+    175c:	0fa080e7          	jalr	250(ra) # 5852 <pipe>
+    1760:	e93d                	bnez	a0,17d6 <pipe1+0x9a>
+    1762:	84aa                	mv	s1,a0
+  pid = fork();
+    1764:	00004097          	auipc	ra,0x4
+    1768:	0d6080e7          	jalr	214(ra) # 583a <fork>
+    176c:	8a2a                	mv	s4,a0
+  if(pid == 0){
+    176e:	c151                	beqz	a0,17f2 <pipe1+0xb6>
+  } else if(pid > 0){
+    1770:	16a05d63          	blez	a0,18ea <pipe1+0x1ae>
+    close(fds[1]);
+    1774:	fac42503          	lw	a0,-84(s0)
+    1778:	00004097          	auipc	ra,0x4
+    177c:	0f2080e7          	jalr	242(ra) # 586a <close>
+    total = 0;
+    1780:	8a26                	mv	s4,s1
+    cc = 1;
+    1782:	4985                	li	s3,1
+    while((n = read(fds[0], buf, cc)) > 0){
+    1784:	0000aa97          	auipc	s5,0xa
+    1788:	684a8a93          	addi	s5,s5,1668 # be08 <buf>
+      if(cc > sizeof(buf))
+    178c:	6b0d                	lui	s6,0x3
+    while((n = read(fds[0], buf, cc)) > 0){
+    178e:	864e                	mv	a2,s3
+    1790:	85d6                	mv	a1,s5
+    1792:	fa842503          	lw	a0,-88(s0)
+    1796:	00004097          	auipc	ra,0x4
+    179a:	0c4080e7          	jalr	196(ra) # 585a <read>
+    179e:	10a05163          	blez	a0,18a0 <pipe1+0x164>
+      for(i = 0; i < n; i++){
+    17a2:	0000a717          	auipc	a4,0xa
+    17a6:	66670713          	addi	a4,a4,1638 # be08 <buf>
+    17aa:	00a4863b          	addw	a2,s1,a0
+        if((buf[i] & 0xff) != (seq++ & 0xff)){
+    17ae:	00074683          	lbu	a3,0(a4)
+    17b2:	0ff4f793          	zext.b	a5,s1
+    17b6:	2485                	addiw	s1,s1,1
+    17b8:	0cf69063          	bne	a3,a5,1878 <pipe1+0x13c>
+      for(i = 0; i < n; i++){
+    17bc:	0705                	addi	a4,a4,1
+    17be:	fec498e3          	bne	s1,a2,17ae <pipe1+0x72>
+      total += n;
+    17c2:	00aa0a3b          	addw	s4,s4,a0
+      cc = cc * 2;
+    17c6:	0019979b          	slliw	a5,s3,0x1
+    17ca:	0007899b          	sext.w	s3,a5
+      if(cc > sizeof(buf))
+    17ce:	fd3b70e3          	bgeu	s6,s3,178e <pipe1+0x52>
+        cc = sizeof(buf);
+    17d2:	89da                	mv	s3,s6
+    17d4:	bf6d                	j	178e <pipe1+0x52>
+    printf("%s: pipe() failed\n", s);
+    17d6:	85ca                	mv	a1,s2
+    17d8:	00005517          	auipc	a0,0x5
+    17dc:	f5050513          	addi	a0,a0,-176 # 6728 <malloc+0xa84>
+    17e0:	00004097          	auipc	ra,0x4
+    17e4:	40c080e7          	jalr	1036(ra) # 5bec <printf>
+    exit(1);
+    17e8:	4505                	li	a0,1
+    17ea:	00004097          	auipc	ra,0x4
+    17ee:	058080e7          	jalr	88(ra) # 5842 <exit>
+    close(fds[0]);
+    17f2:	fa842503          	lw	a0,-88(s0)
+    17f6:	00004097          	auipc	ra,0x4
+    17fa:	074080e7          	jalr	116(ra) # 586a <close>
+    for(n = 0; n < N; n++){
+    17fe:	0000ab17          	auipc	s6,0xa
+    1802:	60ab0b13          	addi	s6,s6,1546 # be08 <buf>
+    1806:	416004bb          	negw	s1,s6
+    180a:	0ff4f493          	zext.b	s1,s1
+    180e:	409b0993          	addi	s3,s6,1033
+      if(write(fds[1], buf, SZ) != SZ){
+    1812:	8bda                	mv	s7,s6
+    for(n = 0; n < N; n++){
+    1814:	6a85                	lui	s5,0x1
+    1816:	42da8a93          	addi	s5,s5,1069 # 142d <truncate3+0x87>
+{
+    181a:	87da                	mv	a5,s6
+        buf[i] = seq++;
+    181c:	0097873b          	addw	a4,a5,s1
+    1820:	00e78023          	sb	a4,0(a5)
+      for(i = 0; i < SZ; i++)
+    1824:	0785                	addi	a5,a5,1
+    1826:	fef99be3          	bne	s3,a5,181c <pipe1+0xe0>
+        buf[i] = seq++;
+    182a:	409a0a1b          	addiw	s4,s4,1033
+      if(write(fds[1], buf, SZ) != SZ){
+    182e:	40900613          	li	a2,1033
+    1832:	85de                	mv	a1,s7
+    1834:	fac42503          	lw	a0,-84(s0)
+    1838:	00004097          	auipc	ra,0x4
+    183c:	02a080e7          	jalr	42(ra) # 5862 <write>
+    1840:	40900793          	li	a5,1033
+    1844:	00f51c63          	bne	a0,a5,185c <pipe1+0x120>
+    for(n = 0; n < N; n++){
+    1848:	24a5                	addiw	s1,s1,9
+    184a:	0ff4f493          	zext.b	s1,s1
+    184e:	fd5a16e3          	bne	s4,s5,181a <pipe1+0xde>
+    exit(0);
+    1852:	4501                	li	a0,0
+    1854:	00004097          	auipc	ra,0x4
+    1858:	fee080e7          	jalr	-18(ra) # 5842 <exit>
+        printf("%s: pipe1 oops 1\n", s);
+    185c:	85ca                	mv	a1,s2
+    185e:	00005517          	auipc	a0,0x5
+    1862:	ee250513          	addi	a0,a0,-286 # 6740 <malloc+0xa9c>
+    1866:	00004097          	auipc	ra,0x4
+    186a:	386080e7          	jalr	902(ra) # 5bec <printf>
+        exit(1);
+    186e:	4505                	li	a0,1
+    1870:	00004097          	auipc	ra,0x4
+    1874:	fd2080e7          	jalr	-46(ra) # 5842 <exit>
+          printf("%s: pipe1 oops 2\n", s);
+    1878:	85ca                	mv	a1,s2
+    187a:	00005517          	auipc	a0,0x5
+    187e:	ede50513          	addi	a0,a0,-290 # 6758 <malloc+0xab4>
+    1882:	00004097          	auipc	ra,0x4
+    1886:	36a080e7          	jalr	874(ra) # 5bec <printf>
+}
+    188a:	60e6                	ld	ra,88(sp)
+    188c:	6446                	ld	s0,80(sp)
+    188e:	64a6                	ld	s1,72(sp)
+    1890:	6906                	ld	s2,64(sp)
+    1892:	79e2                	ld	s3,56(sp)
+    1894:	7a42                	ld	s4,48(sp)
+    1896:	7aa2                	ld	s5,40(sp)
+    1898:	7b02                	ld	s6,32(sp)
+    189a:	6be2                	ld	s7,24(sp)
+    189c:	6125                	addi	sp,sp,96
+    189e:	8082                	ret
+    if(total != N * SZ){
+    18a0:	6785                	lui	a5,0x1
+    18a2:	42d78793          	addi	a5,a5,1069 # 142d <truncate3+0x87>
+    18a6:	02fa0063          	beq	s4,a5,18c6 <pipe1+0x18a>
+      printf("%s: pipe1 oops 3 total %d\n", total);
+    18aa:	85d2                	mv	a1,s4
+    18ac:	00005517          	auipc	a0,0x5
+    18b0:	ec450513          	addi	a0,a0,-316 # 6770 <malloc+0xacc>
+    18b4:	00004097          	auipc	ra,0x4
+    18b8:	338080e7          	jalr	824(ra) # 5bec <printf>
+      exit(1);
+    18bc:	4505                	li	a0,1
+    18be:	00004097          	auipc	ra,0x4
+    18c2:	f84080e7          	jalr	-124(ra) # 5842 <exit>
+    close(fds[0]);
+    18c6:	fa842503          	lw	a0,-88(s0)
+    18ca:	00004097          	auipc	ra,0x4
+    18ce:	fa0080e7          	jalr	-96(ra) # 586a <close>
+    wait(&xstatus);
+    18d2:	fa440513          	addi	a0,s0,-92
+    18d6:	00004097          	auipc	ra,0x4
+    18da:	f74080e7          	jalr	-140(ra) # 584a <wait>
+    exit(xstatus);
+    18de:	fa442503          	lw	a0,-92(s0)
+    18e2:	00004097          	auipc	ra,0x4
+    18e6:	f60080e7          	jalr	-160(ra) # 5842 <exit>
+    printf("%s: fork() failed\n", s);
+    18ea:	85ca                	mv	a1,s2
+    18ec:	00005517          	auipc	a0,0x5
+    18f0:	ea450513          	addi	a0,a0,-348 # 6790 <malloc+0xaec>
+    18f4:	00004097          	auipc	ra,0x4
+    18f8:	2f8080e7          	jalr	760(ra) # 5bec <printf>
+    exit(1);
+    18fc:	4505                	li	a0,1
+    18fe:	00004097          	auipc	ra,0x4
+    1902:	f44080e7          	jalr	-188(ra) # 5842 <exit>
+
+0000000000001906 <exitwait>:
+{
+    1906:	7139                	addi	sp,sp,-64
+    1908:	fc06                	sd	ra,56(sp)
+    190a:	f822                	sd	s0,48(sp)
+    190c:	f426                	sd	s1,40(sp)
+    190e:	f04a                	sd	s2,32(sp)
+    1910:	ec4e                	sd	s3,24(sp)
+    1912:	e852                	sd	s4,16(sp)
+    1914:	0080                	addi	s0,sp,64
+    1916:	8a2a                	mv	s4,a0
+  for(i = 0; i < 100; i++){
+    1918:	4901                	li	s2,0
+    191a:	06400993          	li	s3,100
+    pid = fork();
+    191e:	00004097          	auipc	ra,0x4
+    1922:	f1c080e7          	jalr	-228(ra) # 583a <fork>
+    1926:	84aa                	mv	s1,a0
+    if(pid < 0){
+    1928:	02054a63          	bltz	a0,195c <exitwait+0x56>
+    if(pid){
+    192c:	c151                	beqz	a0,19b0 <exitwait+0xaa>
+      if(wait(&xstate) != pid){
+    192e:	fcc40513          	addi	a0,s0,-52
+    1932:	00004097          	auipc	ra,0x4
+    1936:	f18080e7          	jalr	-232(ra) # 584a <wait>
+    193a:	02951f63          	bne	a0,s1,1978 <exitwait+0x72>
+      if(i != xstate) {
+    193e:	fcc42783          	lw	a5,-52(s0)
+    1942:	05279963          	bne	a5,s2,1994 <exitwait+0x8e>
+  for(i = 0; i < 100; i++){
+    1946:	2905                	addiw	s2,s2,1
+    1948:	fd391be3          	bne	s2,s3,191e <exitwait+0x18>
+}
+    194c:	70e2                	ld	ra,56(sp)
+    194e:	7442                	ld	s0,48(sp)
+    1950:	74a2                	ld	s1,40(sp)
+    1952:	7902                	ld	s2,32(sp)
+    1954:	69e2                	ld	s3,24(sp)
+    1956:	6a42                	ld	s4,16(sp)
+    1958:	6121                	addi	sp,sp,64
+    195a:	8082                	ret
+      printf("%s: fork failed\n", s);
+    195c:	85d2                	mv	a1,s4
+    195e:	00005517          	auipc	a0,0x5
+    1962:	cc250513          	addi	a0,a0,-830 # 6620 <malloc+0x97c>
+    1966:	00004097          	auipc	ra,0x4
+    196a:	286080e7          	jalr	646(ra) # 5bec <printf>
+      exit(1);
+    196e:	4505                	li	a0,1
+    1970:	00004097          	auipc	ra,0x4
+    1974:	ed2080e7          	jalr	-302(ra) # 5842 <exit>
+        printf("%s: wait wrong pid\n", s);
+    1978:	85d2                	mv	a1,s4
+    197a:	00005517          	auipc	a0,0x5
+    197e:	e2e50513          	addi	a0,a0,-466 # 67a8 <malloc+0xb04>
+    1982:	00004097          	auipc	ra,0x4
+    1986:	26a080e7          	jalr	618(ra) # 5bec <printf>
+        exit(1);
+    198a:	4505                	li	a0,1
+    198c:	00004097          	auipc	ra,0x4
+    1990:	eb6080e7          	jalr	-330(ra) # 5842 <exit>
+        printf("%s: wait wrong exit status\n", s);
+    1994:	85d2                	mv	a1,s4
+    1996:	00005517          	auipc	a0,0x5
+    199a:	e2a50513          	addi	a0,a0,-470 # 67c0 <malloc+0xb1c>
+    199e:	00004097          	auipc	ra,0x4
+    19a2:	24e080e7          	jalr	590(ra) # 5bec <printf>
+        exit(1);
+    19a6:	4505                	li	a0,1
+    19a8:	00004097          	auipc	ra,0x4
+    19ac:	e9a080e7          	jalr	-358(ra) # 5842 <exit>
+      exit(i);
+    19b0:	854a                	mv	a0,s2
+    19b2:	00004097          	auipc	ra,0x4
+    19b6:	e90080e7          	jalr	-368(ra) # 5842 <exit>
+
+00000000000019ba <twochildren>:
+{
+    19ba:	1101                	addi	sp,sp,-32
+    19bc:	ec06                	sd	ra,24(sp)
+    19be:	e822                	sd	s0,16(sp)
+    19c0:	e426                	sd	s1,8(sp)
+    19c2:	e04a                	sd	s2,0(sp)
+    19c4:	1000                	addi	s0,sp,32
+    19c6:	892a                	mv	s2,a0
+    19c8:	3e800493          	li	s1,1000
+    int pid1 = fork();
+    19cc:	00004097          	auipc	ra,0x4
+    19d0:	e6e080e7          	jalr	-402(ra) # 583a <fork>
+    if(pid1 < 0){
+    19d4:	02054c63          	bltz	a0,1a0c <twochildren+0x52>
+    if(pid1 == 0){
+    19d8:	c921                	beqz	a0,1a28 <twochildren+0x6e>
+      int pid2 = fork();
+    19da:	00004097          	auipc	ra,0x4
+    19de:	e60080e7          	jalr	-416(ra) # 583a <fork>
+      if(pid2 < 0){
+    19e2:	04054763          	bltz	a0,1a30 <twochildren+0x76>
+      if(pid2 == 0){
+    19e6:	c13d                	beqz	a0,1a4c <twochildren+0x92>
+        wait(0);
+    19e8:	4501                	li	a0,0
+    19ea:	00004097          	auipc	ra,0x4
+    19ee:	e60080e7          	jalr	-416(ra) # 584a <wait>
+        wait(0);
+    19f2:	4501                	li	a0,0
+    19f4:	00004097          	auipc	ra,0x4
+    19f8:	e56080e7          	jalr	-426(ra) # 584a <wait>
+  for(int i = 0; i < 1000; i++){
+    19fc:	34fd                	addiw	s1,s1,-1
+    19fe:	f4f9                	bnez	s1,19cc <twochildren+0x12>
+}
+    1a00:	60e2                	ld	ra,24(sp)
+    1a02:	6442                	ld	s0,16(sp)
+    1a04:	64a2                	ld	s1,8(sp)
+    1a06:	6902                	ld	s2,0(sp)
+    1a08:	6105                	addi	sp,sp,32
+    1a0a:	8082                	ret
+      printf("%s: fork failed\n", s);
+    1a0c:	85ca                	mv	a1,s2
+    1a0e:	00005517          	auipc	a0,0x5
+    1a12:	c1250513          	addi	a0,a0,-1006 # 6620 <malloc+0x97c>
+    1a16:	00004097          	auipc	ra,0x4
+    1a1a:	1d6080e7          	jalr	470(ra) # 5bec <printf>
+      exit(1);
+    1a1e:	4505                	li	a0,1
+    1a20:	00004097          	auipc	ra,0x4
+    1a24:	e22080e7          	jalr	-478(ra) # 5842 <exit>
+      exit(0);
+    1a28:	00004097          	auipc	ra,0x4
+    1a2c:	e1a080e7          	jalr	-486(ra) # 5842 <exit>
+        printf("%s: fork failed\n", s);
+    1a30:	85ca                	mv	a1,s2
+    1a32:	00005517          	auipc	a0,0x5
+    1a36:	bee50513          	addi	a0,a0,-1042 # 6620 <malloc+0x97c>
+    1a3a:	00004097          	auipc	ra,0x4
+    1a3e:	1b2080e7          	jalr	434(ra) # 5bec <printf>
+        exit(1);
+    1a42:	4505                	li	a0,1
+    1a44:	00004097          	auipc	ra,0x4
+    1a48:	dfe080e7          	jalr	-514(ra) # 5842 <exit>
+        exit(0);
+    1a4c:	00004097          	auipc	ra,0x4
+    1a50:	df6080e7          	jalr	-522(ra) # 5842 <exit>
+
+0000000000001a54 <forkfork>:
+{
+    1a54:	7179                	addi	sp,sp,-48
+    1a56:	f406                	sd	ra,40(sp)
+    1a58:	f022                	sd	s0,32(sp)
+    1a5a:	ec26                	sd	s1,24(sp)
+    1a5c:	1800                	addi	s0,sp,48
+    1a5e:	84aa                	mv	s1,a0
+    int pid = fork();
+    1a60:	00004097          	auipc	ra,0x4
+    1a64:	dda080e7          	jalr	-550(ra) # 583a <fork>
+    if(pid < 0){
+    1a68:	04054163          	bltz	a0,1aaa <forkfork+0x56>
+    if(pid == 0){
+    1a6c:	cd29                	beqz	a0,1ac6 <forkfork+0x72>
+    int pid = fork();
+    1a6e:	00004097          	auipc	ra,0x4
+    1a72:	dcc080e7          	jalr	-564(ra) # 583a <fork>
+    if(pid < 0){
+    1a76:	02054a63          	bltz	a0,1aaa <forkfork+0x56>
+    if(pid == 0){
+    1a7a:	c531                	beqz	a0,1ac6 <forkfork+0x72>
+    wait(&xstatus);
+    1a7c:	fdc40513          	addi	a0,s0,-36
+    1a80:	00004097          	auipc	ra,0x4
+    1a84:	dca080e7          	jalr	-566(ra) # 584a <wait>
+    if(xstatus != 0) {
+    1a88:	fdc42783          	lw	a5,-36(s0)
+    1a8c:	ebbd                	bnez	a5,1b02 <forkfork+0xae>
+    wait(&xstatus);
+    1a8e:	fdc40513          	addi	a0,s0,-36
+    1a92:	00004097          	auipc	ra,0x4
+    1a96:	db8080e7          	jalr	-584(ra) # 584a <wait>
+    if(xstatus != 0) {
+    1a9a:	fdc42783          	lw	a5,-36(s0)
+    1a9e:	e3b5                	bnez	a5,1b02 <forkfork+0xae>
+}
+    1aa0:	70a2                	ld	ra,40(sp)
+    1aa2:	7402                	ld	s0,32(sp)
+    1aa4:	64e2                	ld	s1,24(sp)
+    1aa6:	6145                	addi	sp,sp,48
+    1aa8:	8082                	ret
+      printf("%s: fork failed", s);
+    1aaa:	85a6                	mv	a1,s1
+    1aac:	00005517          	auipc	a0,0x5
+    1ab0:	d3450513          	addi	a0,a0,-716 # 67e0 <malloc+0xb3c>
+    1ab4:	00004097          	auipc	ra,0x4
+    1ab8:	138080e7          	jalr	312(ra) # 5bec <printf>
+      exit(1);
+    1abc:	4505                	li	a0,1
+    1abe:	00004097          	auipc	ra,0x4
+    1ac2:	d84080e7          	jalr	-636(ra) # 5842 <exit>
+{
+    1ac6:	0c800493          	li	s1,200
+        int pid1 = fork();
+    1aca:	00004097          	auipc	ra,0x4
+    1ace:	d70080e7          	jalr	-656(ra) # 583a <fork>
+        if(pid1 < 0){
+    1ad2:	00054f63          	bltz	a0,1af0 <forkfork+0x9c>
+        if(pid1 == 0){
+    1ad6:	c115                	beqz	a0,1afa <forkfork+0xa6>
+        wait(0);
+    1ad8:	4501                	li	a0,0
+    1ada:	00004097          	auipc	ra,0x4
+    1ade:	d70080e7          	jalr	-656(ra) # 584a <wait>
+      for(int j = 0; j < 200; j++){
+    1ae2:	34fd                	addiw	s1,s1,-1
+    1ae4:	f0fd                	bnez	s1,1aca <forkfork+0x76>
+      exit(0);
+    1ae6:	4501                	li	a0,0
+    1ae8:	00004097          	auipc	ra,0x4
+    1aec:	d5a080e7          	jalr	-678(ra) # 5842 <exit>
+          exit(1);
+    1af0:	4505                	li	a0,1
+    1af2:	00004097          	auipc	ra,0x4
+    1af6:	d50080e7          	jalr	-688(ra) # 5842 <exit>
+          exit(0);
+    1afa:	00004097          	auipc	ra,0x4
+    1afe:	d48080e7          	jalr	-696(ra) # 5842 <exit>
+      printf("%s: fork in child failed", s);
+    1b02:	85a6                	mv	a1,s1
+    1b04:	00005517          	auipc	a0,0x5
+    1b08:	cec50513          	addi	a0,a0,-788 # 67f0 <malloc+0xb4c>
+    1b0c:	00004097          	auipc	ra,0x4
+    1b10:	0e0080e7          	jalr	224(ra) # 5bec <printf>
+      exit(1);
+    1b14:	4505                	li	a0,1
+    1b16:	00004097          	auipc	ra,0x4
+    1b1a:	d2c080e7          	jalr	-724(ra) # 5842 <exit>
+
+0000000000001b1e <reparent2>:
+{
+    1b1e:	1101                	addi	sp,sp,-32
+    1b20:	ec06                	sd	ra,24(sp)
+    1b22:	e822                	sd	s0,16(sp)
+    1b24:	e426                	sd	s1,8(sp)
+    1b26:	1000                	addi	s0,sp,32
+    1b28:	32000493          	li	s1,800
+    int pid1 = fork();
+    1b2c:	00004097          	auipc	ra,0x4
+    1b30:	d0e080e7          	jalr	-754(ra) # 583a <fork>
+    if(pid1 < 0){
+    1b34:	00054f63          	bltz	a0,1b52 <reparent2+0x34>
+    if(pid1 == 0){
+    1b38:	c915                	beqz	a0,1b6c <reparent2+0x4e>
+    wait(0);
+    1b3a:	4501                	li	a0,0
+    1b3c:	00004097          	auipc	ra,0x4
+    1b40:	d0e080e7          	jalr	-754(ra) # 584a <wait>
+  for(int i = 0; i < 800; i++){
+    1b44:	34fd                	addiw	s1,s1,-1
+    1b46:	f0fd                	bnez	s1,1b2c <reparent2+0xe>
+  exit(0);
+    1b48:	4501                	li	a0,0
+    1b4a:	00004097          	auipc	ra,0x4
+    1b4e:	cf8080e7          	jalr	-776(ra) # 5842 <exit>
+      printf("fork failed\n");
+    1b52:	00005517          	auipc	a0,0x5
+    1b56:	eee50513          	addi	a0,a0,-274 # 6a40 <malloc+0xd9c>
+    1b5a:	00004097          	auipc	ra,0x4
+    1b5e:	092080e7          	jalr	146(ra) # 5bec <printf>
+      exit(1);
+    1b62:	4505                	li	a0,1
+    1b64:	00004097          	auipc	ra,0x4
+    1b68:	cde080e7          	jalr	-802(ra) # 5842 <exit>
+      fork();
+    1b6c:	00004097          	auipc	ra,0x4
+    1b70:	cce080e7          	jalr	-818(ra) # 583a <fork>
+      fork();
+    1b74:	00004097          	auipc	ra,0x4
+    1b78:	cc6080e7          	jalr	-826(ra) # 583a <fork>
+      exit(0);
+    1b7c:	4501                	li	a0,0
+    1b7e:	00004097          	auipc	ra,0x4
+    1b82:	cc4080e7          	jalr	-828(ra) # 5842 <exit>
+
+0000000000001b86 <createdelete>:
+{
+    1b86:	7175                	addi	sp,sp,-144
+    1b88:	e506                	sd	ra,136(sp)
+    1b8a:	e122                	sd	s0,128(sp)
+    1b8c:	fca6                	sd	s1,120(sp)
+    1b8e:	f8ca                	sd	s2,112(sp)
+    1b90:	f4ce                	sd	s3,104(sp)
+    1b92:	f0d2                	sd	s4,96(sp)
+    1b94:	ecd6                	sd	s5,88(sp)
+    1b96:	e8da                	sd	s6,80(sp)
+    1b98:	e4de                	sd	s7,72(sp)
+    1b9a:	e0e2                	sd	s8,64(sp)
+    1b9c:	fc66                	sd	s9,56(sp)
+    1b9e:	0900                	addi	s0,sp,144
+    1ba0:	8caa                	mv	s9,a0
+  for(pi = 0; pi < NCHILD; pi++){
+    1ba2:	4901                	li	s2,0
+    1ba4:	4991                	li	s3,4
+    pid = fork();
+    1ba6:	00004097          	auipc	ra,0x4
+    1baa:	c94080e7          	jalr	-876(ra) # 583a <fork>
+    1bae:	84aa                	mv	s1,a0
+    if(pid < 0){
+    1bb0:	02054f63          	bltz	a0,1bee <createdelete+0x68>
+    if(pid == 0){
+    1bb4:	c939                	beqz	a0,1c0a <createdelete+0x84>
+  for(pi = 0; pi < NCHILD; pi++){
+    1bb6:	2905                	addiw	s2,s2,1
+    1bb8:	ff3917e3          	bne	s2,s3,1ba6 <createdelete+0x20>
+    1bbc:	4491                	li	s1,4
+    wait(&xstatus);
+    1bbe:	f7c40513          	addi	a0,s0,-132
+    1bc2:	00004097          	auipc	ra,0x4
+    1bc6:	c88080e7          	jalr	-888(ra) # 584a <wait>
+    if(xstatus != 0)
+    1bca:	f7c42903          	lw	s2,-132(s0)
+    1bce:	0e091263          	bnez	s2,1cb2 <createdelete+0x12c>
+  for(pi = 0; pi < NCHILD; pi++){
+    1bd2:	34fd                	addiw	s1,s1,-1
+    1bd4:	f4ed                	bnez	s1,1bbe <createdelete+0x38>
+  name[0] = name[1] = name[2] = 0;
+    1bd6:	f8040123          	sb	zero,-126(s0)
+    1bda:	03000993          	li	s3,48
+    1bde:	5a7d                	li	s4,-1
+    1be0:	07000c13          	li	s8,112
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    1be4:	4b21                	li	s6,8
+      if((i == 0 || i >= N/2) && fd < 0){
+    1be6:	4ba5                	li	s7,9
+    for(pi = 0; pi < NCHILD; pi++){
+    1be8:	07400a93          	li	s5,116
+    1bec:	a29d                	j	1d52 <createdelete+0x1cc>
+      printf("fork failed\n", s);
+    1bee:	85e6                	mv	a1,s9
+    1bf0:	00005517          	auipc	a0,0x5
+    1bf4:	e5050513          	addi	a0,a0,-432 # 6a40 <malloc+0xd9c>
+    1bf8:	00004097          	auipc	ra,0x4
+    1bfc:	ff4080e7          	jalr	-12(ra) # 5bec <printf>
+      exit(1);
+    1c00:	4505                	li	a0,1
+    1c02:	00004097          	auipc	ra,0x4
+    1c06:	c40080e7          	jalr	-960(ra) # 5842 <exit>
+      name[0] = 'p' + pi;
+    1c0a:	0709091b          	addiw	s2,s2,112
+    1c0e:	f9240023          	sb	s2,-128(s0)
+      name[2] = '\0';
+    1c12:	f8040123          	sb	zero,-126(s0)
+      for(i = 0; i < N; i++){
+    1c16:	4951                	li	s2,20
+    1c18:	a015                	j	1c3c <createdelete+0xb6>
+          printf("%s: create failed\n", s);
+    1c1a:	85e6                	mv	a1,s9
+    1c1c:	00005517          	auipc	a0,0x5
+    1c20:	a9c50513          	addi	a0,a0,-1380 # 66b8 <malloc+0xa14>
+    1c24:	00004097          	auipc	ra,0x4
+    1c28:	fc8080e7          	jalr	-56(ra) # 5bec <printf>
+          exit(1);
+    1c2c:	4505                	li	a0,1
+    1c2e:	00004097          	auipc	ra,0x4
+    1c32:	c14080e7          	jalr	-1004(ra) # 5842 <exit>
+      for(i = 0; i < N; i++){
+    1c36:	2485                	addiw	s1,s1,1
+    1c38:	07248863          	beq	s1,s2,1ca8 <createdelete+0x122>
+        name[1] = '0' + i;
+    1c3c:	0304879b          	addiw	a5,s1,48
+    1c40:	f8f400a3          	sb	a5,-127(s0)
+        fd = open(name, O_CREATE | O_RDWR);
+    1c44:	20200593          	li	a1,514
+    1c48:	f8040513          	addi	a0,s0,-128
+    1c4c:	00004097          	auipc	ra,0x4
+    1c50:	c36080e7          	jalr	-970(ra) # 5882 <open>
+        if(fd < 0){
+    1c54:	fc0543e3          	bltz	a0,1c1a <createdelete+0x94>
+        close(fd);
+    1c58:	00004097          	auipc	ra,0x4
+    1c5c:	c12080e7          	jalr	-1006(ra) # 586a <close>
+        if(i > 0 && (i % 2 ) == 0){
+    1c60:	fc905be3          	blez	s1,1c36 <createdelete+0xb0>
+    1c64:	0014f793          	andi	a5,s1,1
+    1c68:	f7f9                	bnez	a5,1c36 <createdelete+0xb0>
+          name[1] = '0' + (i / 2);
+    1c6a:	01f4d79b          	srliw	a5,s1,0x1f
+    1c6e:	9fa5                	addw	a5,a5,s1
+    1c70:	4017d79b          	sraiw	a5,a5,0x1
+    1c74:	0307879b          	addiw	a5,a5,48
+    1c78:	f8f400a3          	sb	a5,-127(s0)
+          if(unlink(name) < 0){
+    1c7c:	f8040513          	addi	a0,s0,-128
+    1c80:	00004097          	auipc	ra,0x4
+    1c84:	c12080e7          	jalr	-1006(ra) # 5892 <unlink>
+    1c88:	fa0557e3          	bgez	a0,1c36 <createdelete+0xb0>
+            printf("%s: unlink failed\n", s);
+    1c8c:	85e6                	mv	a1,s9
+    1c8e:	00005517          	auipc	a0,0x5
+    1c92:	b8250513          	addi	a0,a0,-1150 # 6810 <malloc+0xb6c>
+    1c96:	00004097          	auipc	ra,0x4
+    1c9a:	f56080e7          	jalr	-170(ra) # 5bec <printf>
+            exit(1);
+    1c9e:	4505                	li	a0,1
+    1ca0:	00004097          	auipc	ra,0x4
+    1ca4:	ba2080e7          	jalr	-1118(ra) # 5842 <exit>
+      exit(0);
+    1ca8:	4501                	li	a0,0
+    1caa:	00004097          	auipc	ra,0x4
+    1cae:	b98080e7          	jalr	-1128(ra) # 5842 <exit>
+      exit(1);
+    1cb2:	4505                	li	a0,1
+    1cb4:	00004097          	auipc	ra,0x4
+    1cb8:	b8e080e7          	jalr	-1138(ra) # 5842 <exit>
+        printf("%s: oops createdelete %s didn't exist\n", s, name);
+    1cbc:	f8040613          	addi	a2,s0,-128
+    1cc0:	85e6                	mv	a1,s9
+    1cc2:	00005517          	auipc	a0,0x5
+    1cc6:	b6650513          	addi	a0,a0,-1178 # 6828 <malloc+0xb84>
+    1cca:	00004097          	auipc	ra,0x4
+    1cce:	f22080e7          	jalr	-222(ra) # 5bec <printf>
+        exit(1);
+    1cd2:	4505                	li	a0,1
+    1cd4:	00004097          	auipc	ra,0x4
+    1cd8:	b6e080e7          	jalr	-1170(ra) # 5842 <exit>
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    1cdc:	054b7163          	bgeu	s6,s4,1d1e <createdelete+0x198>
+      if(fd >= 0)
+    1ce0:	02055a63          	bgez	a0,1d14 <createdelete+0x18e>
+    for(pi = 0; pi < NCHILD; pi++){
+    1ce4:	2485                	addiw	s1,s1,1
+    1ce6:	0ff4f493          	zext.b	s1,s1
+    1cea:	05548c63          	beq	s1,s5,1d42 <createdelete+0x1bc>
+      name[0] = 'p' + pi;
+    1cee:	f8940023          	sb	s1,-128(s0)
+      name[1] = '0' + i;
+    1cf2:	f93400a3          	sb	s3,-127(s0)
+      fd = open(name, 0);
+    1cf6:	4581                	li	a1,0
+    1cf8:	f8040513          	addi	a0,s0,-128
+    1cfc:	00004097          	auipc	ra,0x4
+    1d00:	b86080e7          	jalr	-1146(ra) # 5882 <open>
+      if((i == 0 || i >= N/2) && fd < 0){
+    1d04:	00090463          	beqz	s2,1d0c <createdelete+0x186>
+    1d08:	fd2bdae3          	bge	s7,s2,1cdc <createdelete+0x156>
+    1d0c:	fa0548e3          	bltz	a0,1cbc <createdelete+0x136>
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    1d10:	014b7963          	bgeu	s6,s4,1d22 <createdelete+0x19c>
+        close(fd);
+    1d14:	00004097          	auipc	ra,0x4
+    1d18:	b56080e7          	jalr	-1194(ra) # 586a <close>
+    1d1c:	b7e1                	j	1ce4 <createdelete+0x15e>
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    1d1e:	fc0543e3          	bltz	a0,1ce4 <createdelete+0x15e>
+        printf("%s: oops createdelete %s did exist\n", s, name);
+    1d22:	f8040613          	addi	a2,s0,-128
+    1d26:	85e6                	mv	a1,s9
+    1d28:	00005517          	auipc	a0,0x5
+    1d2c:	b2850513          	addi	a0,a0,-1240 # 6850 <malloc+0xbac>
+    1d30:	00004097          	auipc	ra,0x4
+    1d34:	ebc080e7          	jalr	-324(ra) # 5bec <printf>
+        exit(1);
+    1d38:	4505                	li	a0,1
+    1d3a:	00004097          	auipc	ra,0x4
+    1d3e:	b08080e7          	jalr	-1272(ra) # 5842 <exit>
+  for(i = 0; i < N; i++){
+    1d42:	2905                	addiw	s2,s2,1
+    1d44:	2a05                	addiw	s4,s4,1
+    1d46:	2985                	addiw	s3,s3,1
+    1d48:	0ff9f993          	zext.b	s3,s3
+    1d4c:	47d1                	li	a5,20
+    1d4e:	02f90a63          	beq	s2,a5,1d82 <createdelete+0x1fc>
+    for(pi = 0; pi < NCHILD; pi++){
+    1d52:	84e2                	mv	s1,s8
+    1d54:	bf69                	j	1cee <createdelete+0x168>
+  for(i = 0; i < N; i++){
+    1d56:	2905                	addiw	s2,s2,1
+    1d58:	0ff97913          	zext.b	s2,s2
+    1d5c:	2985                	addiw	s3,s3,1
+    1d5e:	0ff9f993          	zext.b	s3,s3
+    1d62:	03490863          	beq	s2,s4,1d92 <createdelete+0x20c>
+  name[0] = name[1] = name[2] = 0;
+    1d66:	84d6                	mv	s1,s5
+      name[0] = 'p' + i;
+    1d68:	f9240023          	sb	s2,-128(s0)
+      name[1] = '0' + i;
+    1d6c:	f93400a3          	sb	s3,-127(s0)
+      unlink(name);
+    1d70:	f8040513          	addi	a0,s0,-128
+    1d74:	00004097          	auipc	ra,0x4
+    1d78:	b1e080e7          	jalr	-1250(ra) # 5892 <unlink>
+    for(pi = 0; pi < NCHILD; pi++){
+    1d7c:	34fd                	addiw	s1,s1,-1
+    1d7e:	f4ed                	bnez	s1,1d68 <createdelete+0x1e2>
+    1d80:	bfd9                	j	1d56 <createdelete+0x1d0>
+    1d82:	03000993          	li	s3,48
+    1d86:	07000913          	li	s2,112
+  name[0] = name[1] = name[2] = 0;
+    1d8a:	4a91                	li	s5,4
+  for(i = 0; i < N; i++){
+    1d8c:	08400a13          	li	s4,132
+    1d90:	bfd9                	j	1d66 <createdelete+0x1e0>
+}
+    1d92:	60aa                	ld	ra,136(sp)
+    1d94:	640a                	ld	s0,128(sp)
+    1d96:	74e6                	ld	s1,120(sp)
+    1d98:	7946                	ld	s2,112(sp)
+    1d9a:	79a6                	ld	s3,104(sp)
+    1d9c:	7a06                	ld	s4,96(sp)
+    1d9e:	6ae6                	ld	s5,88(sp)
+    1da0:	6b46                	ld	s6,80(sp)
+    1da2:	6ba6                	ld	s7,72(sp)
+    1da4:	6c06                	ld	s8,64(sp)
+    1da6:	7ce2                	ld	s9,56(sp)
+    1da8:	6149                	addi	sp,sp,144
+    1daa:	8082                	ret
+
+0000000000001dac <linkunlink>:
+{
+    1dac:	711d                	addi	sp,sp,-96
+    1dae:	ec86                	sd	ra,88(sp)
+    1db0:	e8a2                	sd	s0,80(sp)
+    1db2:	e4a6                	sd	s1,72(sp)
+    1db4:	e0ca                	sd	s2,64(sp)
+    1db6:	fc4e                	sd	s3,56(sp)
+    1db8:	f852                	sd	s4,48(sp)
+    1dba:	f456                	sd	s5,40(sp)
+    1dbc:	f05a                	sd	s6,32(sp)
+    1dbe:	ec5e                	sd	s7,24(sp)
+    1dc0:	e862                	sd	s8,16(sp)
+    1dc2:	e466                	sd	s9,8(sp)
+    1dc4:	1080                	addi	s0,sp,96
+    1dc6:	84aa                	mv	s1,a0
+  unlink("x");
+    1dc8:	00004517          	auipc	a0,0x4
+    1dcc:	07050513          	addi	a0,a0,112 # 5e38 <malloc+0x194>
+    1dd0:	00004097          	auipc	ra,0x4
+    1dd4:	ac2080e7          	jalr	-1342(ra) # 5892 <unlink>
+  pid = fork();
+    1dd8:	00004097          	auipc	ra,0x4
+    1ddc:	a62080e7          	jalr	-1438(ra) # 583a <fork>
+  if(pid < 0){
+    1de0:	02054b63          	bltz	a0,1e16 <linkunlink+0x6a>
+    1de4:	8c2a                	mv	s8,a0
+  unsigned int x = (pid ? 1 : 97);
+    1de6:	4c85                	li	s9,1
+    1de8:	e119                	bnez	a0,1dee <linkunlink+0x42>
+    1dea:	06100c93          	li	s9,97
+    1dee:	06400493          	li	s1,100
+    x = x * 1103515245 + 12345;
+    1df2:	41c659b7          	lui	s3,0x41c65
+    1df6:	e6d9899b          	addiw	s3,s3,-403 # 41c64e6d <__BSS_END__+0x41c56055>
+    1dfa:	690d                	lui	s2,0x3
+    1dfc:	0399091b          	addiw	s2,s2,57 # 3039 <iputtest+0xc5>
+    if((x % 3) == 0){
+    1e00:	4a0d                	li	s4,3
+    } else if((x % 3) == 1){
+    1e02:	4b05                	li	s6,1
+      unlink("x");
+    1e04:	00004a97          	auipc	s5,0x4
+    1e08:	034a8a93          	addi	s5,s5,52 # 5e38 <malloc+0x194>
+      link("cat", "x");
+    1e0c:	00005b97          	auipc	s7,0x5
+    1e10:	a6cb8b93          	addi	s7,s7,-1428 # 6878 <malloc+0xbd4>
+    1e14:	a825                	j	1e4c <linkunlink+0xa0>
+    printf("%s: fork failed\n", s);
+    1e16:	85a6                	mv	a1,s1
+    1e18:	00005517          	auipc	a0,0x5
+    1e1c:	80850513          	addi	a0,a0,-2040 # 6620 <malloc+0x97c>
+    1e20:	00004097          	auipc	ra,0x4
+    1e24:	dcc080e7          	jalr	-564(ra) # 5bec <printf>
+    exit(1);
+    1e28:	4505                	li	a0,1
+    1e2a:	00004097          	auipc	ra,0x4
+    1e2e:	a18080e7          	jalr	-1512(ra) # 5842 <exit>
+      close(open("x", O_RDWR | O_CREATE));
+    1e32:	20200593          	li	a1,514
+    1e36:	8556                	mv	a0,s5
+    1e38:	00004097          	auipc	ra,0x4
+    1e3c:	a4a080e7          	jalr	-1462(ra) # 5882 <open>
+    1e40:	00004097          	auipc	ra,0x4
+    1e44:	a2a080e7          	jalr	-1494(ra) # 586a <close>
+  for(i = 0; i < 100; i++){
+    1e48:	34fd                	addiw	s1,s1,-1
+    1e4a:	c88d                	beqz	s1,1e7c <linkunlink+0xd0>
+    x = x * 1103515245 + 12345;
+    1e4c:	033c87bb          	mulw	a5,s9,s3
+    1e50:	012787bb          	addw	a5,a5,s2
+    1e54:	00078c9b          	sext.w	s9,a5
+    if((x % 3) == 0){
+    1e58:	0347f7bb          	remuw	a5,a5,s4
+    1e5c:	dbf9                	beqz	a5,1e32 <linkunlink+0x86>
+    } else if((x % 3) == 1){
+    1e5e:	01678863          	beq	a5,s6,1e6e <linkunlink+0xc2>
+      unlink("x");
+    1e62:	8556                	mv	a0,s5
+    1e64:	00004097          	auipc	ra,0x4
+    1e68:	a2e080e7          	jalr	-1490(ra) # 5892 <unlink>
+    1e6c:	bff1                	j	1e48 <linkunlink+0x9c>
+      link("cat", "x");
+    1e6e:	85d6                	mv	a1,s5
+    1e70:	855e                	mv	a0,s7
+    1e72:	00004097          	auipc	ra,0x4
+    1e76:	a30080e7          	jalr	-1488(ra) # 58a2 <link>
+    1e7a:	b7f9                	j	1e48 <linkunlink+0x9c>
+  if(pid)
+    1e7c:	020c0463          	beqz	s8,1ea4 <linkunlink+0xf8>
+    wait(0);
+    1e80:	4501                	li	a0,0
+    1e82:	00004097          	auipc	ra,0x4
+    1e86:	9c8080e7          	jalr	-1592(ra) # 584a <wait>
+}
+    1e8a:	60e6                	ld	ra,88(sp)
+    1e8c:	6446                	ld	s0,80(sp)
+    1e8e:	64a6                	ld	s1,72(sp)
+    1e90:	6906                	ld	s2,64(sp)
+    1e92:	79e2                	ld	s3,56(sp)
+    1e94:	7a42                	ld	s4,48(sp)
+    1e96:	7aa2                	ld	s5,40(sp)
+    1e98:	7b02                	ld	s6,32(sp)
+    1e9a:	6be2                	ld	s7,24(sp)
+    1e9c:	6c42                	ld	s8,16(sp)
+    1e9e:	6ca2                	ld	s9,8(sp)
+    1ea0:	6125                	addi	sp,sp,96
+    1ea2:	8082                	ret
+    exit(0);
+    1ea4:	4501                	li	a0,0
+    1ea6:	00004097          	auipc	ra,0x4
+    1eaa:	99c080e7          	jalr	-1636(ra) # 5842 <exit>
+
+0000000000001eae <manywrites>:
+{
+    1eae:	711d                	addi	sp,sp,-96
+    1eb0:	ec86                	sd	ra,88(sp)
+    1eb2:	e8a2                	sd	s0,80(sp)
+    1eb4:	e4a6                	sd	s1,72(sp)
+    1eb6:	e0ca                	sd	s2,64(sp)
+    1eb8:	fc4e                	sd	s3,56(sp)
+    1eba:	f852                	sd	s4,48(sp)
+    1ebc:	f456                	sd	s5,40(sp)
+    1ebe:	f05a                	sd	s6,32(sp)
+    1ec0:	ec5e                	sd	s7,24(sp)
+    1ec2:	1080                	addi	s0,sp,96
+    1ec4:	8aaa                	mv	s5,a0
+  for(int ci = 0; ci < nchildren; ci++){
+    1ec6:	4981                	li	s3,0
+    1ec8:	4911                	li	s2,4
+    int pid = fork();
+    1eca:	00004097          	auipc	ra,0x4
+    1ece:	970080e7          	jalr	-1680(ra) # 583a <fork>
+    1ed2:	84aa                	mv	s1,a0
+    if(pid < 0){
+    1ed4:	02054963          	bltz	a0,1f06 <manywrites+0x58>
+    if(pid == 0){
+    1ed8:	c521                	beqz	a0,1f20 <manywrites+0x72>
+  for(int ci = 0; ci < nchildren; ci++){
+    1eda:	2985                	addiw	s3,s3,1
+    1edc:	ff2997e3          	bne	s3,s2,1eca <manywrites+0x1c>
+    1ee0:	4491                	li	s1,4
+    int st = 0;
+    1ee2:	fa042423          	sw	zero,-88(s0)
+    wait(&st);
+    1ee6:	fa840513          	addi	a0,s0,-88
+    1eea:	00004097          	auipc	ra,0x4
+    1eee:	960080e7          	jalr	-1696(ra) # 584a <wait>
+    if(st != 0)
+    1ef2:	fa842503          	lw	a0,-88(s0)
+    1ef6:	ed6d                	bnez	a0,1ff0 <manywrites+0x142>
+  for(int ci = 0; ci < nchildren; ci++){
+    1ef8:	34fd                	addiw	s1,s1,-1
+    1efa:	f4e5                	bnez	s1,1ee2 <manywrites+0x34>
+  exit(0);
+    1efc:	4501                	li	a0,0
+    1efe:	00004097          	auipc	ra,0x4
+    1f02:	944080e7          	jalr	-1724(ra) # 5842 <exit>
+      printf("fork failed\n");
+    1f06:	00005517          	auipc	a0,0x5
+    1f0a:	b3a50513          	addi	a0,a0,-1222 # 6a40 <malloc+0xd9c>
+    1f0e:	00004097          	auipc	ra,0x4
+    1f12:	cde080e7          	jalr	-802(ra) # 5bec <printf>
+      exit(1);
+    1f16:	4505                	li	a0,1
+    1f18:	00004097          	auipc	ra,0x4
+    1f1c:	92a080e7          	jalr	-1750(ra) # 5842 <exit>
+      name[0] = 'b';
+    1f20:	06200793          	li	a5,98
+    1f24:	faf40423          	sb	a5,-88(s0)
+      name[1] = 'a' + ci;
+    1f28:	0619879b          	addiw	a5,s3,97
+    1f2c:	faf404a3          	sb	a5,-87(s0)
+      name[2] = '\0';
+    1f30:	fa040523          	sb	zero,-86(s0)
+      unlink(name);
+    1f34:	fa840513          	addi	a0,s0,-88
+    1f38:	00004097          	auipc	ra,0x4
+    1f3c:	95a080e7          	jalr	-1702(ra) # 5892 <unlink>
+    1f40:	4bf9                	li	s7,30
+          int cc = write(fd, buf, sz);
+    1f42:	0000ab17          	auipc	s6,0xa
+    1f46:	ec6b0b13          	addi	s6,s6,-314 # be08 <buf>
+        for(int i = 0; i < ci+1; i++){
+    1f4a:	8a26                	mv	s4,s1
+    1f4c:	0209ce63          	bltz	s3,1f88 <manywrites+0xda>
+          int fd = open(name, O_CREATE | O_RDWR);
+    1f50:	20200593          	li	a1,514
+    1f54:	fa840513          	addi	a0,s0,-88
+    1f58:	00004097          	auipc	ra,0x4
+    1f5c:	92a080e7          	jalr	-1750(ra) # 5882 <open>
+    1f60:	892a                	mv	s2,a0
+          if(fd < 0){
+    1f62:	04054763          	bltz	a0,1fb0 <manywrites+0x102>
+          int cc = write(fd, buf, sz);
+    1f66:	660d                	lui	a2,0x3
+    1f68:	85da                	mv	a1,s6
+    1f6a:	00004097          	auipc	ra,0x4
+    1f6e:	8f8080e7          	jalr	-1800(ra) # 5862 <write>
+          if(cc != sz){
+    1f72:	678d                	lui	a5,0x3
+    1f74:	04f51e63          	bne	a0,a5,1fd0 <manywrites+0x122>
+          close(fd);
+    1f78:	854a                	mv	a0,s2
+    1f7a:	00004097          	auipc	ra,0x4
+    1f7e:	8f0080e7          	jalr	-1808(ra) # 586a <close>
+        for(int i = 0; i < ci+1; i++){
+    1f82:	2a05                	addiw	s4,s4,1
+    1f84:	fd49d6e3          	bge	s3,s4,1f50 <manywrites+0xa2>
+        unlink(name);
+    1f88:	fa840513          	addi	a0,s0,-88
+    1f8c:	00004097          	auipc	ra,0x4
+    1f90:	906080e7          	jalr	-1786(ra) # 5892 <unlink>
+      for(int iters = 0; iters < howmany; iters++){
+    1f94:	3bfd                	addiw	s7,s7,-1
+    1f96:	fa0b9ae3          	bnez	s7,1f4a <manywrites+0x9c>
+      unlink(name);
+    1f9a:	fa840513          	addi	a0,s0,-88
+    1f9e:	00004097          	auipc	ra,0x4
+    1fa2:	8f4080e7          	jalr	-1804(ra) # 5892 <unlink>
+      exit(0);
+    1fa6:	4501                	li	a0,0
+    1fa8:	00004097          	auipc	ra,0x4
+    1fac:	89a080e7          	jalr	-1894(ra) # 5842 <exit>
+            printf("%s: cannot create %s\n", s, name);
+    1fb0:	fa840613          	addi	a2,s0,-88
+    1fb4:	85d6                	mv	a1,s5
+    1fb6:	00005517          	auipc	a0,0x5
+    1fba:	8ca50513          	addi	a0,a0,-1846 # 6880 <malloc+0xbdc>
+    1fbe:	00004097          	auipc	ra,0x4
+    1fc2:	c2e080e7          	jalr	-978(ra) # 5bec <printf>
+            exit(1);
+    1fc6:	4505                	li	a0,1
+    1fc8:	00004097          	auipc	ra,0x4
+    1fcc:	87a080e7          	jalr	-1926(ra) # 5842 <exit>
+            printf("%s: write(%d) ret %d\n", s, sz, cc);
+    1fd0:	86aa                	mv	a3,a0
+    1fd2:	660d                	lui	a2,0x3
+    1fd4:	85d6                	mv	a1,s5
+    1fd6:	00004517          	auipc	a0,0x4
+    1fda:	ec250513          	addi	a0,a0,-318 # 5e98 <malloc+0x1f4>
+    1fde:	00004097          	auipc	ra,0x4
+    1fe2:	c0e080e7          	jalr	-1010(ra) # 5bec <printf>
+            exit(1);
+    1fe6:	4505                	li	a0,1
+    1fe8:	00004097          	auipc	ra,0x4
+    1fec:	85a080e7          	jalr	-1958(ra) # 5842 <exit>
+      exit(st);
+    1ff0:	00004097          	auipc	ra,0x4
+    1ff4:	852080e7          	jalr	-1966(ra) # 5842 <exit>
+
+0000000000001ff8 <forktest>:
+{
+    1ff8:	7179                	addi	sp,sp,-48
+    1ffa:	f406                	sd	ra,40(sp)
+    1ffc:	f022                	sd	s0,32(sp)
+    1ffe:	ec26                	sd	s1,24(sp)
+    2000:	e84a                	sd	s2,16(sp)
+    2002:	e44e                	sd	s3,8(sp)
+    2004:	1800                	addi	s0,sp,48
+    2006:	89aa                	mv	s3,a0
+  for(n=0; n<N; n++){
+    2008:	4481                	li	s1,0
+    200a:	3e800913          	li	s2,1000
+    pid = fork();
+    200e:	00004097          	auipc	ra,0x4
+    2012:	82c080e7          	jalr	-2004(ra) # 583a <fork>
+    if(pid < 0)
+    2016:	02054863          	bltz	a0,2046 <forktest+0x4e>
+    if(pid == 0)
+    201a:	c115                	beqz	a0,203e <forktest+0x46>
+  for(n=0; n<N; n++){
+    201c:	2485                	addiw	s1,s1,1
+    201e:	ff2498e3          	bne	s1,s2,200e <forktest+0x16>
+    printf("%s: fork claimed to work 1000 times!\n", s);
+    2022:	85ce                	mv	a1,s3
+    2024:	00005517          	auipc	a0,0x5
+    2028:	88c50513          	addi	a0,a0,-1908 # 68b0 <malloc+0xc0c>
+    202c:	00004097          	auipc	ra,0x4
+    2030:	bc0080e7          	jalr	-1088(ra) # 5bec <printf>
+    exit(1);
+    2034:	4505                	li	a0,1
+    2036:	00004097          	auipc	ra,0x4
+    203a:	80c080e7          	jalr	-2036(ra) # 5842 <exit>
+      exit(0);
+    203e:	00004097          	auipc	ra,0x4
+    2042:	804080e7          	jalr	-2044(ra) # 5842 <exit>
+  if (n == 0) {
+    2046:	cc9d                	beqz	s1,2084 <forktest+0x8c>
+  if(n == N){
+    2048:	3e800793          	li	a5,1000
+    204c:	fcf48be3          	beq	s1,a5,2022 <forktest+0x2a>
+  for(; n > 0; n--){
+    2050:	00905b63          	blez	s1,2066 <forktest+0x6e>
+    if(wait(0) < 0){
+    2054:	4501                	li	a0,0
+    2056:	00003097          	auipc	ra,0x3
+    205a:	7f4080e7          	jalr	2036(ra) # 584a <wait>
+    205e:	04054163          	bltz	a0,20a0 <forktest+0xa8>
+  for(; n > 0; n--){
+    2062:	34fd                	addiw	s1,s1,-1
+    2064:	f8e5                	bnez	s1,2054 <forktest+0x5c>
+  if(wait(0) != -1){
+    2066:	4501                	li	a0,0
+    2068:	00003097          	auipc	ra,0x3
+    206c:	7e2080e7          	jalr	2018(ra) # 584a <wait>
+    2070:	57fd                	li	a5,-1
+    2072:	04f51563          	bne	a0,a5,20bc <forktest+0xc4>
+}
+    2076:	70a2                	ld	ra,40(sp)
+    2078:	7402                	ld	s0,32(sp)
+    207a:	64e2                	ld	s1,24(sp)
+    207c:	6942                	ld	s2,16(sp)
+    207e:	69a2                	ld	s3,8(sp)
+    2080:	6145                	addi	sp,sp,48
+    2082:	8082                	ret
+    printf("%s: no fork at all!\n", s);
+    2084:	85ce                	mv	a1,s3
+    2086:	00005517          	auipc	a0,0x5
+    208a:	81250513          	addi	a0,a0,-2030 # 6898 <malloc+0xbf4>
+    208e:	00004097          	auipc	ra,0x4
+    2092:	b5e080e7          	jalr	-1186(ra) # 5bec <printf>
+    exit(1);
+    2096:	4505                	li	a0,1
+    2098:	00003097          	auipc	ra,0x3
+    209c:	7aa080e7          	jalr	1962(ra) # 5842 <exit>
+      printf("%s: wait stopped early\n", s);
+    20a0:	85ce                	mv	a1,s3
+    20a2:	00005517          	auipc	a0,0x5
+    20a6:	83650513          	addi	a0,a0,-1994 # 68d8 <malloc+0xc34>
+    20aa:	00004097          	auipc	ra,0x4
+    20ae:	b42080e7          	jalr	-1214(ra) # 5bec <printf>
+      exit(1);
+    20b2:	4505                	li	a0,1
+    20b4:	00003097          	auipc	ra,0x3
+    20b8:	78e080e7          	jalr	1934(ra) # 5842 <exit>
+    printf("%s: wait got too many\n", s);
+    20bc:	85ce                	mv	a1,s3
+    20be:	00005517          	auipc	a0,0x5
+    20c2:	83250513          	addi	a0,a0,-1998 # 68f0 <malloc+0xc4c>
+    20c6:	00004097          	auipc	ra,0x4
+    20ca:	b26080e7          	jalr	-1242(ra) # 5bec <printf>
+    exit(1);
+    20ce:	4505                	li	a0,1
+    20d0:	00003097          	auipc	ra,0x3
+    20d4:	772080e7          	jalr	1906(ra) # 5842 <exit>
+
+00000000000020d8 <kernmem>:
+{
+    20d8:	715d                	addi	sp,sp,-80
+    20da:	e486                	sd	ra,72(sp)
+    20dc:	e0a2                	sd	s0,64(sp)
+    20de:	fc26                	sd	s1,56(sp)
+    20e0:	f84a                	sd	s2,48(sp)
+    20e2:	f44e                	sd	s3,40(sp)
+    20e4:	f052                	sd	s4,32(sp)
+    20e6:	ec56                	sd	s5,24(sp)
+    20e8:	0880                	addi	s0,sp,80
+    20ea:	8a2a                	mv	s4,a0
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    20ec:	4485                	li	s1,1
+    20ee:	04fe                	slli	s1,s1,0x1f
+    if(xstatus != -1)  // did kernel kill child?
+    20f0:	5afd                	li	s5,-1
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    20f2:	69b1                	lui	s3,0xc
+    20f4:	35098993          	addi	s3,s3,848 # c350 <buf+0x548>
+    20f8:	1003d937          	lui	s2,0x1003d
+    20fc:	090e                	slli	s2,s2,0x3
+    20fe:	48090913          	addi	s2,s2,1152 # 1003d480 <__BSS_END__+0x1002e668>
+    pid = fork();
+    2102:	00003097          	auipc	ra,0x3
+    2106:	738080e7          	jalr	1848(ra) # 583a <fork>
+    if(pid < 0){
+    210a:	02054963          	bltz	a0,213c <kernmem+0x64>
+    if(pid == 0){
+    210e:	c529                	beqz	a0,2158 <kernmem+0x80>
+    wait(&xstatus);
+    2110:	fbc40513          	addi	a0,s0,-68
+    2114:	00003097          	auipc	ra,0x3
+    2118:	736080e7          	jalr	1846(ra) # 584a <wait>
+    if(xstatus != -1)  // did kernel kill child?
+    211c:	fbc42783          	lw	a5,-68(s0)
+    2120:	05579d63          	bne	a5,s5,217a <kernmem+0xa2>
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    2124:	94ce                	add	s1,s1,s3
+    2126:	fd249ee3          	bne	s1,s2,2102 <kernmem+0x2a>
+}
+    212a:	60a6                	ld	ra,72(sp)
+    212c:	6406                	ld	s0,64(sp)
+    212e:	74e2                	ld	s1,56(sp)
+    2130:	7942                	ld	s2,48(sp)
+    2132:	79a2                	ld	s3,40(sp)
+    2134:	7a02                	ld	s4,32(sp)
+    2136:	6ae2                	ld	s5,24(sp)
+    2138:	6161                	addi	sp,sp,80
+    213a:	8082                	ret
+      printf("%s: fork failed\n", s);
+    213c:	85d2                	mv	a1,s4
+    213e:	00004517          	auipc	a0,0x4
+    2142:	4e250513          	addi	a0,a0,1250 # 6620 <malloc+0x97c>
+    2146:	00004097          	auipc	ra,0x4
+    214a:	aa6080e7          	jalr	-1370(ra) # 5bec <printf>
+      exit(1);
+    214e:	4505                	li	a0,1
+    2150:	00003097          	auipc	ra,0x3
+    2154:	6f2080e7          	jalr	1778(ra) # 5842 <exit>
+      printf("%s: oops could read %x = %x\n", s, a, *a);
+    2158:	0004c683          	lbu	a3,0(s1)
+    215c:	8626                	mv	a2,s1
+    215e:	85d2                	mv	a1,s4
+    2160:	00004517          	auipc	a0,0x4
+    2164:	7a850513          	addi	a0,a0,1960 # 6908 <malloc+0xc64>
+    2168:	00004097          	auipc	ra,0x4
+    216c:	a84080e7          	jalr	-1404(ra) # 5bec <printf>
+      exit(1);
+    2170:	4505                	li	a0,1
+    2172:	00003097          	auipc	ra,0x3
+    2176:	6d0080e7          	jalr	1744(ra) # 5842 <exit>
+      exit(1);
+    217a:	4505                	li	a0,1
+    217c:	00003097          	auipc	ra,0x3
+    2180:	6c6080e7          	jalr	1734(ra) # 5842 <exit>
+
+0000000000002184 <MAXVAplus>:
+{
+    2184:	7179                	addi	sp,sp,-48
+    2186:	f406                	sd	ra,40(sp)
+    2188:	f022                	sd	s0,32(sp)
+    218a:	ec26                	sd	s1,24(sp)
+    218c:	e84a                	sd	s2,16(sp)
+    218e:	1800                	addi	s0,sp,48
+  volatile uint64 a = MAXVA;
+    2190:	4785                	li	a5,1
+    2192:	179a                	slli	a5,a5,0x26
+    2194:	fcf43c23          	sd	a5,-40(s0)
+  for( ; a != 0; a <<= 1){
+    2198:	fd843783          	ld	a5,-40(s0)
+    219c:	cf85                	beqz	a5,21d4 <MAXVAplus+0x50>
+    219e:	892a                	mv	s2,a0
+    if(xstatus != -1)  // did kernel kill child?
+    21a0:	54fd                	li	s1,-1
+    pid = fork();
+    21a2:	00003097          	auipc	ra,0x3
+    21a6:	698080e7          	jalr	1688(ra) # 583a <fork>
+    if(pid < 0){
+    21aa:	02054b63          	bltz	a0,21e0 <MAXVAplus+0x5c>
+    if(pid == 0){
+    21ae:	c539                	beqz	a0,21fc <MAXVAplus+0x78>
+    wait(&xstatus);
+    21b0:	fd440513          	addi	a0,s0,-44
+    21b4:	00003097          	auipc	ra,0x3
+    21b8:	696080e7          	jalr	1686(ra) # 584a <wait>
+    if(xstatus != -1)  // did kernel kill child?
+    21bc:	fd442783          	lw	a5,-44(s0)
+    21c0:	06979463          	bne	a5,s1,2228 <MAXVAplus+0xa4>
+  for( ; a != 0; a <<= 1){
+    21c4:	fd843783          	ld	a5,-40(s0)
+    21c8:	0786                	slli	a5,a5,0x1
+    21ca:	fcf43c23          	sd	a5,-40(s0)
+    21ce:	fd843783          	ld	a5,-40(s0)
+    21d2:	fbe1                	bnez	a5,21a2 <MAXVAplus+0x1e>
+}
+    21d4:	70a2                	ld	ra,40(sp)
+    21d6:	7402                	ld	s0,32(sp)
+    21d8:	64e2                	ld	s1,24(sp)
+    21da:	6942                	ld	s2,16(sp)
+    21dc:	6145                	addi	sp,sp,48
+    21de:	8082                	ret
+      printf("%s: fork failed\n", s);
+    21e0:	85ca                	mv	a1,s2
+    21e2:	00004517          	auipc	a0,0x4
+    21e6:	43e50513          	addi	a0,a0,1086 # 6620 <malloc+0x97c>
+    21ea:	00004097          	auipc	ra,0x4
+    21ee:	a02080e7          	jalr	-1534(ra) # 5bec <printf>
+      exit(1);
+    21f2:	4505                	li	a0,1
+    21f4:	00003097          	auipc	ra,0x3
+    21f8:	64e080e7          	jalr	1614(ra) # 5842 <exit>
+      *(char*)a = 99;
+    21fc:	fd843783          	ld	a5,-40(s0)
+    2200:	06300713          	li	a4,99
+    2204:	00e78023          	sb	a4,0(a5) # 3000 <iputtest+0x8c>
+      printf("%s: oops wrote %x\n", s, a);
+    2208:	fd843603          	ld	a2,-40(s0)
+    220c:	85ca                	mv	a1,s2
+    220e:	00004517          	auipc	a0,0x4
+    2212:	71a50513          	addi	a0,a0,1818 # 6928 <malloc+0xc84>
+    2216:	00004097          	auipc	ra,0x4
+    221a:	9d6080e7          	jalr	-1578(ra) # 5bec <printf>
+      exit(1);
+    221e:	4505                	li	a0,1
+    2220:	00003097          	auipc	ra,0x3
+    2224:	622080e7          	jalr	1570(ra) # 5842 <exit>
+      exit(1);
+    2228:	4505                	li	a0,1
+    222a:	00003097          	auipc	ra,0x3
+    222e:	618080e7          	jalr	1560(ra) # 5842 <exit>
+
+0000000000002232 <bigargtest>:
+{
+    2232:	7179                	addi	sp,sp,-48
+    2234:	f406                	sd	ra,40(sp)
+    2236:	f022                	sd	s0,32(sp)
+    2238:	ec26                	sd	s1,24(sp)
+    223a:	1800                	addi	s0,sp,48
+    223c:	84aa                	mv	s1,a0
+  unlink("bigarg-ok");
+    223e:	00004517          	auipc	a0,0x4
+    2242:	70250513          	addi	a0,a0,1794 # 6940 <malloc+0xc9c>
+    2246:	00003097          	auipc	ra,0x3
+    224a:	64c080e7          	jalr	1612(ra) # 5892 <unlink>
+  pid = fork();
+    224e:	00003097          	auipc	ra,0x3
+    2252:	5ec080e7          	jalr	1516(ra) # 583a <fork>
+  if(pid == 0){
+    2256:	c121                	beqz	a0,2296 <bigargtest+0x64>
+  } else if(pid < 0){
+    2258:	0a054063          	bltz	a0,22f8 <bigargtest+0xc6>
+  wait(&xstatus);
+    225c:	fdc40513          	addi	a0,s0,-36
+    2260:	00003097          	auipc	ra,0x3
+    2264:	5ea080e7          	jalr	1514(ra) # 584a <wait>
+  if(xstatus != 0)
+    2268:	fdc42503          	lw	a0,-36(s0)
+    226c:	e545                	bnez	a0,2314 <bigargtest+0xe2>
+  fd = open("bigarg-ok", 0);
+    226e:	4581                	li	a1,0
+    2270:	00004517          	auipc	a0,0x4
+    2274:	6d050513          	addi	a0,a0,1744 # 6940 <malloc+0xc9c>
+    2278:	00003097          	auipc	ra,0x3
+    227c:	60a080e7          	jalr	1546(ra) # 5882 <open>
+  if(fd < 0){
+    2280:	08054e63          	bltz	a0,231c <bigargtest+0xea>
+  close(fd);
+    2284:	00003097          	auipc	ra,0x3
+    2288:	5e6080e7          	jalr	1510(ra) # 586a <close>
+}
+    228c:	70a2                	ld	ra,40(sp)
+    228e:	7402                	ld	s0,32(sp)
+    2290:	64e2                	ld	s1,24(sp)
+    2292:	6145                	addi	sp,sp,48
+    2294:	8082                	ret
+    2296:	00006797          	auipc	a5,0x6
+    229a:	35a78793          	addi	a5,a5,858 # 85f0 <args.1>
+    229e:	00006697          	auipc	a3,0x6
+    22a2:	44a68693          	addi	a3,a3,1098 # 86e8 <args.1+0xf8>
+      args[i] = "bigargs test: failed\n                                                                                                                                                                                                       ";
+    22a6:	00004717          	auipc	a4,0x4
+    22aa:	6aa70713          	addi	a4,a4,1706 # 6950 <malloc+0xcac>
+    22ae:	e398                	sd	a4,0(a5)
+    for(i = 0; i < MAXARG-1; i++)
+    22b0:	07a1                	addi	a5,a5,8
+    22b2:	fed79ee3          	bne	a5,a3,22ae <bigargtest+0x7c>
+    args[MAXARG-1] = 0;
+    22b6:	00006597          	auipc	a1,0x6
+    22ba:	33a58593          	addi	a1,a1,826 # 85f0 <args.1>
+    22be:	0e05bc23          	sd	zero,248(a1)
+    exec("echo", args);
+    22c2:	00004517          	auipc	a0,0x4
+    22c6:	b0650513          	addi	a0,a0,-1274 # 5dc8 <malloc+0x124>
+    22ca:	00003097          	auipc	ra,0x3
+    22ce:	5b0080e7          	jalr	1456(ra) # 587a <exec>
+    fd = open("bigarg-ok", O_CREATE);
+    22d2:	20000593          	li	a1,512
+    22d6:	00004517          	auipc	a0,0x4
+    22da:	66a50513          	addi	a0,a0,1642 # 6940 <malloc+0xc9c>
+    22de:	00003097          	auipc	ra,0x3
+    22e2:	5a4080e7          	jalr	1444(ra) # 5882 <open>
+    close(fd);
+    22e6:	00003097          	auipc	ra,0x3
+    22ea:	584080e7          	jalr	1412(ra) # 586a <close>
+    exit(0);
+    22ee:	4501                	li	a0,0
+    22f0:	00003097          	auipc	ra,0x3
+    22f4:	552080e7          	jalr	1362(ra) # 5842 <exit>
+    printf("%s: bigargtest: fork failed\n", s);
+    22f8:	85a6                	mv	a1,s1
+    22fa:	00004517          	auipc	a0,0x4
+    22fe:	73650513          	addi	a0,a0,1846 # 6a30 <malloc+0xd8c>
+    2302:	00004097          	auipc	ra,0x4
+    2306:	8ea080e7          	jalr	-1814(ra) # 5bec <printf>
+    exit(1);
+    230a:	4505                	li	a0,1
+    230c:	00003097          	auipc	ra,0x3
+    2310:	536080e7          	jalr	1334(ra) # 5842 <exit>
+    exit(xstatus);
+    2314:	00003097          	auipc	ra,0x3
+    2318:	52e080e7          	jalr	1326(ra) # 5842 <exit>
+    printf("%s: bigarg test failed!\n", s);
+    231c:	85a6                	mv	a1,s1
+    231e:	00004517          	auipc	a0,0x4
+    2322:	73250513          	addi	a0,a0,1842 # 6a50 <malloc+0xdac>
+    2326:	00004097          	auipc	ra,0x4
+    232a:	8c6080e7          	jalr	-1850(ra) # 5bec <printf>
+    exit(1);
+    232e:	4505                	li	a0,1
+    2330:	00003097          	auipc	ra,0x3
+    2334:	512080e7          	jalr	1298(ra) # 5842 <exit>
+
+0000000000002338 <stacktest>:
+{
+    2338:	7179                	addi	sp,sp,-48
+    233a:	f406                	sd	ra,40(sp)
+    233c:	f022                	sd	s0,32(sp)
+    233e:	ec26                	sd	s1,24(sp)
+    2340:	1800                	addi	s0,sp,48
+    2342:	84aa                	mv	s1,a0
+  pid = fork();
+    2344:	00003097          	auipc	ra,0x3
+    2348:	4f6080e7          	jalr	1270(ra) # 583a <fork>
+  if(pid == 0) {
+    234c:	c115                	beqz	a0,2370 <stacktest+0x38>
+  } else if(pid < 0){
+    234e:	04054463          	bltz	a0,2396 <stacktest+0x5e>
+  wait(&xstatus);
+    2352:	fdc40513          	addi	a0,s0,-36
+    2356:	00003097          	auipc	ra,0x3
+    235a:	4f4080e7          	jalr	1268(ra) # 584a <wait>
+  if(xstatus == -1)  // kernel killed child?
+    235e:	fdc42503          	lw	a0,-36(s0)
+    2362:	57fd                	li	a5,-1
+    2364:	04f50763          	beq	a0,a5,23b2 <stacktest+0x7a>
+    exit(xstatus);
+    2368:	00003097          	auipc	ra,0x3
+    236c:	4da080e7          	jalr	1242(ra) # 5842 <exit>
+
+static inline uint64
+r_sp()
+{
+  uint64 x;
+  asm volatile("mv %0, sp" : "=r" (x) );
+    2370:	870a                	mv	a4,sp
+    printf("%s: stacktest: read below stack %p\n", s, *sp);
+    2372:	77fd                	lui	a5,0xfffff
+    2374:	97ba                	add	a5,a5,a4
+    2376:	0007c603          	lbu	a2,0(a5) # fffffffffffff000 <__BSS_END__+0xffffffffffff01e8>
+    237a:	85a6                	mv	a1,s1
+    237c:	00004517          	auipc	a0,0x4
+    2380:	6f450513          	addi	a0,a0,1780 # 6a70 <malloc+0xdcc>
+    2384:	00004097          	auipc	ra,0x4
+    2388:	868080e7          	jalr	-1944(ra) # 5bec <printf>
+    exit(1);
+    238c:	4505                	li	a0,1
+    238e:	00003097          	auipc	ra,0x3
+    2392:	4b4080e7          	jalr	1204(ra) # 5842 <exit>
+    printf("%s: fork failed\n", s);
+    2396:	85a6                	mv	a1,s1
+    2398:	00004517          	auipc	a0,0x4
+    239c:	28850513          	addi	a0,a0,648 # 6620 <malloc+0x97c>
+    23a0:	00004097          	auipc	ra,0x4
+    23a4:	84c080e7          	jalr	-1972(ra) # 5bec <printf>
+    exit(1);
+    23a8:	4505                	li	a0,1
+    23aa:	00003097          	auipc	ra,0x3
+    23ae:	498080e7          	jalr	1176(ra) # 5842 <exit>
+    exit(0);
+    23b2:	4501                	li	a0,0
+    23b4:	00003097          	auipc	ra,0x3
+    23b8:	48e080e7          	jalr	1166(ra) # 5842 <exit>
+
+00000000000023bc <copyinstr3>:
+{
+    23bc:	7179                	addi	sp,sp,-48
+    23be:	f406                	sd	ra,40(sp)
+    23c0:	f022                	sd	s0,32(sp)
+    23c2:	ec26                	sd	s1,24(sp)
+    23c4:	1800                	addi	s0,sp,48
+  sbrk(8192);
+    23c6:	6509                	lui	a0,0x2
+    23c8:	00003097          	auipc	ra,0x3
+    23cc:	502080e7          	jalr	1282(ra) # 58ca <sbrk>
+  uint64 top = (uint64) sbrk(0);
+    23d0:	4501                	li	a0,0
+    23d2:	00003097          	auipc	ra,0x3
+    23d6:	4f8080e7          	jalr	1272(ra) # 58ca <sbrk>
+  if((top % PGSIZE) != 0){
+    23da:	03451793          	slli	a5,a0,0x34
+    23de:	e3c9                	bnez	a5,2460 <copyinstr3+0xa4>
+  top = (uint64) sbrk(0);
+    23e0:	4501                	li	a0,0
+    23e2:	00003097          	auipc	ra,0x3
+    23e6:	4e8080e7          	jalr	1256(ra) # 58ca <sbrk>
+  if(top % PGSIZE){
+    23ea:	03451793          	slli	a5,a0,0x34
+    23ee:	e3d9                	bnez	a5,2474 <copyinstr3+0xb8>
+  char *b = (char *) (top - 1);
+    23f0:	fff50493          	addi	s1,a0,-1 # 1fff <forktest+0x7>
+  *b = 'x';
+    23f4:	07800793          	li	a5,120
+    23f8:	fef50fa3          	sb	a5,-1(a0)
+  int ret = unlink(b);
+    23fc:	8526                	mv	a0,s1
+    23fe:	00003097          	auipc	ra,0x3
+    2402:	494080e7          	jalr	1172(ra) # 5892 <unlink>
+  if(ret != -1){
+    2406:	57fd                	li	a5,-1
+    2408:	08f51363          	bne	a0,a5,248e <copyinstr3+0xd2>
+  int fd = open(b, O_CREATE | O_WRONLY);
+    240c:	20100593          	li	a1,513
+    2410:	8526                	mv	a0,s1
+    2412:	00003097          	auipc	ra,0x3
+    2416:	470080e7          	jalr	1136(ra) # 5882 <open>
+  if(fd != -1){
+    241a:	57fd                	li	a5,-1
+    241c:	08f51863          	bne	a0,a5,24ac <copyinstr3+0xf0>
+  ret = link(b, b);
+    2420:	85a6                	mv	a1,s1
+    2422:	8526                	mv	a0,s1
+    2424:	00003097          	auipc	ra,0x3
+    2428:	47e080e7          	jalr	1150(ra) # 58a2 <link>
+  if(ret != -1){
+    242c:	57fd                	li	a5,-1
+    242e:	08f51e63          	bne	a0,a5,24ca <copyinstr3+0x10e>
+  char *args[] = { "xx", 0 };
+    2432:	00005797          	auipc	a5,0x5
+    2436:	2e678793          	addi	a5,a5,742 # 7718 <malloc+0x1a74>
+    243a:	fcf43823          	sd	a5,-48(s0)
+    243e:	fc043c23          	sd	zero,-40(s0)
+  ret = exec(b, args);
+    2442:	fd040593          	addi	a1,s0,-48
+    2446:	8526                	mv	a0,s1
+    2448:	00003097          	auipc	ra,0x3
+    244c:	432080e7          	jalr	1074(ra) # 587a <exec>
+  if(ret != -1){
+    2450:	57fd                	li	a5,-1
+    2452:	08f51c63          	bne	a0,a5,24ea <copyinstr3+0x12e>
+}
+    2456:	70a2                	ld	ra,40(sp)
+    2458:	7402                	ld	s0,32(sp)
+    245a:	64e2                	ld	s1,24(sp)
+    245c:	6145                	addi	sp,sp,48
+    245e:	8082                	ret
+    sbrk(PGSIZE - (top % PGSIZE));
+    2460:	0347d513          	srli	a0,a5,0x34
+    2464:	6785                	lui	a5,0x1
+    2466:	40a7853b          	subw	a0,a5,a0
+    246a:	00003097          	auipc	ra,0x3
+    246e:	460080e7          	jalr	1120(ra) # 58ca <sbrk>
+    2472:	b7bd                	j	23e0 <copyinstr3+0x24>
+    printf("oops\n");
+    2474:	00004517          	auipc	a0,0x4
+    2478:	62450513          	addi	a0,a0,1572 # 6a98 <malloc+0xdf4>
+    247c:	00003097          	auipc	ra,0x3
+    2480:	770080e7          	jalr	1904(ra) # 5bec <printf>
+    exit(1);
+    2484:	4505                	li	a0,1
+    2486:	00003097          	auipc	ra,0x3
+    248a:	3bc080e7          	jalr	956(ra) # 5842 <exit>
+    printf("unlink(%s) returned %d, not -1\n", b, ret);
+    248e:	862a                	mv	a2,a0
+    2490:	85a6                	mv	a1,s1
+    2492:	00004517          	auipc	a0,0x4
+    2496:	0ae50513          	addi	a0,a0,174 # 6540 <malloc+0x89c>
+    249a:	00003097          	auipc	ra,0x3
+    249e:	752080e7          	jalr	1874(ra) # 5bec <printf>
+    exit(1);
+    24a2:	4505                	li	a0,1
+    24a4:	00003097          	auipc	ra,0x3
+    24a8:	39e080e7          	jalr	926(ra) # 5842 <exit>
+    printf("open(%s) returned %d, not -1\n", b, fd);
+    24ac:	862a                	mv	a2,a0
+    24ae:	85a6                	mv	a1,s1
+    24b0:	00004517          	auipc	a0,0x4
+    24b4:	0b050513          	addi	a0,a0,176 # 6560 <malloc+0x8bc>
+    24b8:	00003097          	auipc	ra,0x3
+    24bc:	734080e7          	jalr	1844(ra) # 5bec <printf>
+    exit(1);
+    24c0:	4505                	li	a0,1
+    24c2:	00003097          	auipc	ra,0x3
+    24c6:	380080e7          	jalr	896(ra) # 5842 <exit>
+    printf("link(%s, %s) returned %d, not -1\n", b, b, ret);
+    24ca:	86aa                	mv	a3,a0
+    24cc:	8626                	mv	a2,s1
+    24ce:	85a6                	mv	a1,s1
+    24d0:	00004517          	auipc	a0,0x4
+    24d4:	0b050513          	addi	a0,a0,176 # 6580 <malloc+0x8dc>
+    24d8:	00003097          	auipc	ra,0x3
+    24dc:	714080e7          	jalr	1812(ra) # 5bec <printf>
+    exit(1);
+    24e0:	4505                	li	a0,1
+    24e2:	00003097          	auipc	ra,0x3
+    24e6:	360080e7          	jalr	864(ra) # 5842 <exit>
+    printf("exec(%s) returned %d, not -1\n", b, fd);
+    24ea:	567d                	li	a2,-1
+    24ec:	85a6                	mv	a1,s1
+    24ee:	00004517          	auipc	a0,0x4
+    24f2:	0ba50513          	addi	a0,a0,186 # 65a8 <malloc+0x904>
+    24f6:	00003097          	auipc	ra,0x3
+    24fa:	6f6080e7          	jalr	1782(ra) # 5bec <printf>
+    exit(1);
+    24fe:	4505                	li	a0,1
+    2500:	00003097          	auipc	ra,0x3
+    2504:	342080e7          	jalr	834(ra) # 5842 <exit>
+
+0000000000002508 <rwsbrk>:
+{
+    2508:	1101                	addi	sp,sp,-32
+    250a:	ec06                	sd	ra,24(sp)
+    250c:	e822                	sd	s0,16(sp)
+    250e:	e426                	sd	s1,8(sp)
+    2510:	e04a                	sd	s2,0(sp)
+    2512:	1000                	addi	s0,sp,32
+  uint64 a = (uint64) sbrk(8192);
+    2514:	6509                	lui	a0,0x2
+    2516:	00003097          	auipc	ra,0x3
+    251a:	3b4080e7          	jalr	948(ra) # 58ca <sbrk>
+  if(a == 0xffffffffffffffffLL) {
+    251e:	57fd                	li	a5,-1
+    2520:	06f50263          	beq	a0,a5,2584 <rwsbrk+0x7c>
+    2524:	84aa                	mv	s1,a0
+  if ((uint64) sbrk(-8192) ==  0xffffffffffffffffLL) {
+    2526:	7579                	lui	a0,0xffffe
+    2528:	00003097          	auipc	ra,0x3
+    252c:	3a2080e7          	jalr	930(ra) # 58ca <sbrk>
+    2530:	57fd                	li	a5,-1
+    2532:	06f50663          	beq	a0,a5,259e <rwsbrk+0x96>
+  fd = open("rwsbrk", O_CREATE|O_WRONLY);
+    2536:	20100593          	li	a1,513
+    253a:	00004517          	auipc	a0,0x4
+    253e:	59e50513          	addi	a0,a0,1438 # 6ad8 <malloc+0xe34>
+    2542:	00003097          	auipc	ra,0x3
+    2546:	340080e7          	jalr	832(ra) # 5882 <open>
+    254a:	892a                	mv	s2,a0
+  if(fd < 0){
+    254c:	06054663          	bltz	a0,25b8 <rwsbrk+0xb0>
+  n = write(fd, (void*)(a+4096), 1024);
+    2550:	6785                	lui	a5,0x1
+    2552:	94be                	add	s1,s1,a5
+    2554:	40000613          	li	a2,1024
+    2558:	85a6                	mv	a1,s1
+    255a:	00003097          	auipc	ra,0x3
+    255e:	308080e7          	jalr	776(ra) # 5862 <write>
+    2562:	862a                	mv	a2,a0
+  if(n >= 0){
+    2564:	06054763          	bltz	a0,25d2 <rwsbrk+0xca>
+    printf("write(fd, %p, 1024) returned %d, not -1\n", a+4096, n);
+    2568:	85a6                	mv	a1,s1
+    256a:	00004517          	auipc	a0,0x4
+    256e:	58e50513          	addi	a0,a0,1422 # 6af8 <malloc+0xe54>
+    2572:	00003097          	auipc	ra,0x3
+    2576:	67a080e7          	jalr	1658(ra) # 5bec <printf>
+    exit(1);
+    257a:	4505                	li	a0,1
+    257c:	00003097          	auipc	ra,0x3
+    2580:	2c6080e7          	jalr	710(ra) # 5842 <exit>
+    printf("sbrk(rwsbrk) failed\n");
+    2584:	00004517          	auipc	a0,0x4
+    2588:	51c50513          	addi	a0,a0,1308 # 6aa0 <malloc+0xdfc>
+    258c:	00003097          	auipc	ra,0x3
+    2590:	660080e7          	jalr	1632(ra) # 5bec <printf>
+    exit(1);
+    2594:	4505                	li	a0,1
+    2596:	00003097          	auipc	ra,0x3
+    259a:	2ac080e7          	jalr	684(ra) # 5842 <exit>
+    printf("sbrk(rwsbrk) shrink failed\n");
+    259e:	00004517          	auipc	a0,0x4
+    25a2:	51a50513          	addi	a0,a0,1306 # 6ab8 <malloc+0xe14>
+    25a6:	00003097          	auipc	ra,0x3
+    25aa:	646080e7          	jalr	1606(ra) # 5bec <printf>
+    exit(1);
+    25ae:	4505                	li	a0,1
+    25b0:	00003097          	auipc	ra,0x3
+    25b4:	292080e7          	jalr	658(ra) # 5842 <exit>
+    printf("open(rwsbrk) failed\n");
+    25b8:	00004517          	auipc	a0,0x4
+    25bc:	52850513          	addi	a0,a0,1320 # 6ae0 <malloc+0xe3c>
+    25c0:	00003097          	auipc	ra,0x3
+    25c4:	62c080e7          	jalr	1580(ra) # 5bec <printf>
+    exit(1);
+    25c8:	4505                	li	a0,1
+    25ca:	00003097          	auipc	ra,0x3
+    25ce:	278080e7          	jalr	632(ra) # 5842 <exit>
+  close(fd);
+    25d2:	854a                	mv	a0,s2
+    25d4:	00003097          	auipc	ra,0x3
+    25d8:	296080e7          	jalr	662(ra) # 586a <close>
+  unlink("rwsbrk");
+    25dc:	00004517          	auipc	a0,0x4
+    25e0:	4fc50513          	addi	a0,a0,1276 # 6ad8 <malloc+0xe34>
+    25e4:	00003097          	auipc	ra,0x3
+    25e8:	2ae080e7          	jalr	686(ra) # 5892 <unlink>
+  fd = open("README", O_RDONLY);
+    25ec:	4581                	li	a1,0
+    25ee:	00004517          	auipc	a0,0x4
+    25f2:	98250513          	addi	a0,a0,-1662 # 5f70 <malloc+0x2cc>
+    25f6:	00003097          	auipc	ra,0x3
+    25fa:	28c080e7          	jalr	652(ra) # 5882 <open>
+    25fe:	892a                	mv	s2,a0
+  if(fd < 0){
+    2600:	02054963          	bltz	a0,2632 <rwsbrk+0x12a>
+  n = read(fd, (void*)(a+4096), 10);
+    2604:	4629                	li	a2,10
+    2606:	85a6                	mv	a1,s1
+    2608:	00003097          	auipc	ra,0x3
+    260c:	252080e7          	jalr	594(ra) # 585a <read>
+    2610:	862a                	mv	a2,a0
+  if(n >= 0){
+    2612:	02054d63          	bltz	a0,264c <rwsbrk+0x144>
+    printf("read(fd, %p, 10) returned %d, not -1\n", a+4096, n);
+    2616:	85a6                	mv	a1,s1
+    2618:	00004517          	auipc	a0,0x4
+    261c:	51050513          	addi	a0,a0,1296 # 6b28 <malloc+0xe84>
+    2620:	00003097          	auipc	ra,0x3
+    2624:	5cc080e7          	jalr	1484(ra) # 5bec <printf>
+    exit(1);
+    2628:	4505                	li	a0,1
+    262a:	00003097          	auipc	ra,0x3
+    262e:	218080e7          	jalr	536(ra) # 5842 <exit>
+    printf("open(rwsbrk) failed\n");
+    2632:	00004517          	auipc	a0,0x4
+    2636:	4ae50513          	addi	a0,a0,1198 # 6ae0 <malloc+0xe3c>
+    263a:	00003097          	auipc	ra,0x3
+    263e:	5b2080e7          	jalr	1458(ra) # 5bec <printf>
+    exit(1);
+    2642:	4505                	li	a0,1
+    2644:	00003097          	auipc	ra,0x3
+    2648:	1fe080e7          	jalr	510(ra) # 5842 <exit>
+  close(fd);
+    264c:	854a                	mv	a0,s2
+    264e:	00003097          	auipc	ra,0x3
+    2652:	21c080e7          	jalr	540(ra) # 586a <close>
+  exit(0);
+    2656:	4501                	li	a0,0
+    2658:	00003097          	auipc	ra,0x3
+    265c:	1ea080e7          	jalr	490(ra) # 5842 <exit>
+
+0000000000002660 <sbrkbasic>:
+{
+    2660:	7139                	addi	sp,sp,-64
+    2662:	fc06                	sd	ra,56(sp)
+    2664:	f822                	sd	s0,48(sp)
+    2666:	f426                	sd	s1,40(sp)
+    2668:	f04a                	sd	s2,32(sp)
+    266a:	ec4e                	sd	s3,24(sp)
+    266c:	e852                	sd	s4,16(sp)
+    266e:	0080                	addi	s0,sp,64
+    2670:	8a2a                	mv	s4,a0
+  pid = fork();
+    2672:	00003097          	auipc	ra,0x3
+    2676:	1c8080e7          	jalr	456(ra) # 583a <fork>
+  if(pid < 0){
+    267a:	02054c63          	bltz	a0,26b2 <sbrkbasic+0x52>
+  if(pid == 0){
+    267e:	ed21                	bnez	a0,26d6 <sbrkbasic+0x76>
+    a = sbrk(TOOMUCH);
+    2680:	40000537          	lui	a0,0x40000
+    2684:	00003097          	auipc	ra,0x3
+    2688:	246080e7          	jalr	582(ra) # 58ca <sbrk>
+    if(a == (char*)0xffffffffffffffffL){
+    268c:	57fd                	li	a5,-1
+    268e:	02f50f63          	beq	a0,a5,26cc <sbrkbasic+0x6c>
+    for(b = a; b < a+TOOMUCH; b += 4096){
+    2692:	400007b7          	lui	a5,0x40000
+    2696:	97aa                	add	a5,a5,a0
+      *b = 99;
+    2698:	06300693          	li	a3,99
+    for(b = a; b < a+TOOMUCH; b += 4096){
+    269c:	6705                	lui	a4,0x1
+      *b = 99;
+    269e:	00d50023          	sb	a3,0(a0) # 40000000 <__BSS_END__+0x3fff11e8>
+    for(b = a; b < a+TOOMUCH; b += 4096){
+    26a2:	953a                	add	a0,a0,a4
+    26a4:	fef51de3          	bne	a0,a5,269e <sbrkbasic+0x3e>
+    exit(1);
+    26a8:	4505                	li	a0,1
+    26aa:	00003097          	auipc	ra,0x3
+    26ae:	198080e7          	jalr	408(ra) # 5842 <exit>
+    printf("fork failed in sbrkbasic\n");
+    26b2:	00004517          	auipc	a0,0x4
+    26b6:	49e50513          	addi	a0,a0,1182 # 6b50 <malloc+0xeac>
+    26ba:	00003097          	auipc	ra,0x3
+    26be:	532080e7          	jalr	1330(ra) # 5bec <printf>
+    exit(1);
+    26c2:	4505                	li	a0,1
+    26c4:	00003097          	auipc	ra,0x3
+    26c8:	17e080e7          	jalr	382(ra) # 5842 <exit>
+      exit(0);
+    26cc:	4501                	li	a0,0
+    26ce:	00003097          	auipc	ra,0x3
+    26d2:	174080e7          	jalr	372(ra) # 5842 <exit>
+  wait(&xstatus);
+    26d6:	fcc40513          	addi	a0,s0,-52
+    26da:	00003097          	auipc	ra,0x3
+    26de:	170080e7          	jalr	368(ra) # 584a <wait>
+  if(xstatus == 1){
+    26e2:	fcc42703          	lw	a4,-52(s0)
+    26e6:	4785                	li	a5,1
+    26e8:	00f70d63          	beq	a4,a5,2702 <sbrkbasic+0xa2>
+  a = sbrk(0);
+    26ec:	4501                	li	a0,0
+    26ee:	00003097          	auipc	ra,0x3
+    26f2:	1dc080e7          	jalr	476(ra) # 58ca <sbrk>
+    26f6:	84aa                	mv	s1,a0
+  for(i = 0; i < 5000; i++){
+    26f8:	4901                	li	s2,0
+    26fa:	6985                	lui	s3,0x1
+    26fc:	38898993          	addi	s3,s3,904 # 1388 <copyinstr2+0x1d8>
+    2700:	a005                	j	2720 <sbrkbasic+0xc0>
+    printf("%s: too much memory allocated!\n", s);
+    2702:	85d2                	mv	a1,s4
+    2704:	00004517          	auipc	a0,0x4
+    2708:	46c50513          	addi	a0,a0,1132 # 6b70 <malloc+0xecc>
+    270c:	00003097          	auipc	ra,0x3
+    2710:	4e0080e7          	jalr	1248(ra) # 5bec <printf>
+    exit(1);
+    2714:	4505                	li	a0,1
+    2716:	00003097          	auipc	ra,0x3
+    271a:	12c080e7          	jalr	300(ra) # 5842 <exit>
+    a = b + 1;
+    271e:	84be                	mv	s1,a5
+    b = sbrk(1);
+    2720:	4505                	li	a0,1
+    2722:	00003097          	auipc	ra,0x3
+    2726:	1a8080e7          	jalr	424(ra) # 58ca <sbrk>
+    if(b != a){
+    272a:	04951c63          	bne	a0,s1,2782 <sbrkbasic+0x122>
+    *b = 1;
+    272e:	4785                	li	a5,1
+    2730:	00f48023          	sb	a5,0(s1)
+    a = b + 1;
+    2734:	00148793          	addi	a5,s1,1
+  for(i = 0; i < 5000; i++){
+    2738:	2905                	addiw	s2,s2,1
+    273a:	ff3912e3          	bne	s2,s3,271e <sbrkbasic+0xbe>
+  pid = fork();
+    273e:	00003097          	auipc	ra,0x3
+    2742:	0fc080e7          	jalr	252(ra) # 583a <fork>
+    2746:	892a                	mv	s2,a0
+  if(pid < 0){
+    2748:	04054e63          	bltz	a0,27a4 <sbrkbasic+0x144>
+  c = sbrk(1);
+    274c:	4505                	li	a0,1
+    274e:	00003097          	auipc	ra,0x3
+    2752:	17c080e7          	jalr	380(ra) # 58ca <sbrk>
+  c = sbrk(1);
+    2756:	4505                	li	a0,1
+    2758:	00003097          	auipc	ra,0x3
+    275c:	172080e7          	jalr	370(ra) # 58ca <sbrk>
+  if(c != a + 1){
+    2760:	0489                	addi	s1,s1,2
+    2762:	04a48f63          	beq	s1,a0,27c0 <sbrkbasic+0x160>
+    printf("%s: sbrk test failed post-fork\n", s);
+    2766:	85d2                	mv	a1,s4
+    2768:	00004517          	auipc	a0,0x4
+    276c:	46850513          	addi	a0,a0,1128 # 6bd0 <malloc+0xf2c>
+    2770:	00003097          	auipc	ra,0x3
+    2774:	47c080e7          	jalr	1148(ra) # 5bec <printf>
+    exit(1);
+    2778:	4505                	li	a0,1
+    277a:	00003097          	auipc	ra,0x3
+    277e:	0c8080e7          	jalr	200(ra) # 5842 <exit>
+      printf("%s: sbrk test failed %d %x %x\n", s, i, a, b);
+    2782:	872a                	mv	a4,a0
+    2784:	86a6                	mv	a3,s1
+    2786:	864a                	mv	a2,s2
+    2788:	85d2                	mv	a1,s4
+    278a:	00004517          	auipc	a0,0x4
+    278e:	40650513          	addi	a0,a0,1030 # 6b90 <malloc+0xeec>
+    2792:	00003097          	auipc	ra,0x3
+    2796:	45a080e7          	jalr	1114(ra) # 5bec <printf>
+      exit(1);
+    279a:	4505                	li	a0,1
+    279c:	00003097          	auipc	ra,0x3
+    27a0:	0a6080e7          	jalr	166(ra) # 5842 <exit>
+    printf("%s: sbrk test fork failed\n", s);
+    27a4:	85d2                	mv	a1,s4
+    27a6:	00004517          	auipc	a0,0x4
+    27aa:	40a50513          	addi	a0,a0,1034 # 6bb0 <malloc+0xf0c>
+    27ae:	00003097          	auipc	ra,0x3
+    27b2:	43e080e7          	jalr	1086(ra) # 5bec <printf>
+    exit(1);
+    27b6:	4505                	li	a0,1
+    27b8:	00003097          	auipc	ra,0x3
+    27bc:	08a080e7          	jalr	138(ra) # 5842 <exit>
+  if(pid == 0)
+    27c0:	00091763          	bnez	s2,27ce <sbrkbasic+0x16e>
+    exit(0);
+    27c4:	4501                	li	a0,0
+    27c6:	00003097          	auipc	ra,0x3
+    27ca:	07c080e7          	jalr	124(ra) # 5842 <exit>
+  wait(&xstatus);
+    27ce:	fcc40513          	addi	a0,s0,-52
+    27d2:	00003097          	auipc	ra,0x3
+    27d6:	078080e7          	jalr	120(ra) # 584a <wait>
+  exit(xstatus);
+    27da:	fcc42503          	lw	a0,-52(s0)
+    27de:	00003097          	auipc	ra,0x3
+    27e2:	064080e7          	jalr	100(ra) # 5842 <exit>
+
+00000000000027e6 <sbrkmuch>:
+{
+    27e6:	7179                	addi	sp,sp,-48
+    27e8:	f406                	sd	ra,40(sp)
+    27ea:	f022                	sd	s0,32(sp)
+    27ec:	ec26                	sd	s1,24(sp)
+    27ee:	e84a                	sd	s2,16(sp)
+    27f0:	e44e                	sd	s3,8(sp)
+    27f2:	e052                	sd	s4,0(sp)
+    27f4:	1800                	addi	s0,sp,48
+    27f6:	89aa                	mv	s3,a0
+  oldbrk = sbrk(0);
+    27f8:	4501                	li	a0,0
+    27fa:	00003097          	auipc	ra,0x3
+    27fe:	0d0080e7          	jalr	208(ra) # 58ca <sbrk>
+    2802:	892a                	mv	s2,a0
+  a = sbrk(0);
+    2804:	4501                	li	a0,0
+    2806:	00003097          	auipc	ra,0x3
+    280a:	0c4080e7          	jalr	196(ra) # 58ca <sbrk>
+    280e:	84aa                	mv	s1,a0
+  p = sbrk(amt);
+    2810:	06400537          	lui	a0,0x6400
+    2814:	9d05                	subw	a0,a0,s1
+    2816:	00003097          	auipc	ra,0x3
+    281a:	0b4080e7          	jalr	180(ra) # 58ca <sbrk>
+  if (p != a) {
+    281e:	0ca49863          	bne	s1,a0,28ee <sbrkmuch+0x108>
+  char *eee = sbrk(0);
+    2822:	4501                	li	a0,0
+    2824:	00003097          	auipc	ra,0x3
+    2828:	0a6080e7          	jalr	166(ra) # 58ca <sbrk>
+    282c:	87aa                	mv	a5,a0
+  for(char *pp = a; pp < eee; pp += 4096)
+    282e:	00a4f963          	bgeu	s1,a0,2840 <sbrkmuch+0x5a>
+    *pp = 1;
+    2832:	4685                	li	a3,1
+  for(char *pp = a; pp < eee; pp += 4096)
+    2834:	6705                	lui	a4,0x1
+    *pp = 1;
+    2836:	00d48023          	sb	a3,0(s1)
+  for(char *pp = a; pp < eee; pp += 4096)
+    283a:	94ba                	add	s1,s1,a4
+    283c:	fef4ede3          	bltu	s1,a5,2836 <sbrkmuch+0x50>
+  *lastaddr = 99;
+    2840:	064007b7          	lui	a5,0x6400
+    2844:	06300713          	li	a4,99
+    2848:	fee78fa3          	sb	a4,-1(a5) # 63fffff <__BSS_END__+0x63f11e7>
+  a = sbrk(0);
+    284c:	4501                	li	a0,0
+    284e:	00003097          	auipc	ra,0x3
+    2852:	07c080e7          	jalr	124(ra) # 58ca <sbrk>
+    2856:	84aa                	mv	s1,a0
+  c = sbrk(-PGSIZE);
+    2858:	757d                	lui	a0,0xfffff
+    285a:	00003097          	auipc	ra,0x3
+    285e:	070080e7          	jalr	112(ra) # 58ca <sbrk>
+  if(c == (char*)0xffffffffffffffffL){
+    2862:	57fd                	li	a5,-1
+    2864:	0af50363          	beq	a0,a5,290a <sbrkmuch+0x124>
+  c = sbrk(0);
+    2868:	4501                	li	a0,0
+    286a:	00003097          	auipc	ra,0x3
+    286e:	060080e7          	jalr	96(ra) # 58ca <sbrk>
+  if(c != a - PGSIZE){
+    2872:	77fd                	lui	a5,0xfffff
+    2874:	97a6                	add	a5,a5,s1
+    2876:	0af51863          	bne	a0,a5,2926 <sbrkmuch+0x140>
+  a = sbrk(0);
+    287a:	4501                	li	a0,0
+    287c:	00003097          	auipc	ra,0x3
+    2880:	04e080e7          	jalr	78(ra) # 58ca <sbrk>
+    2884:	84aa                	mv	s1,a0
+  c = sbrk(PGSIZE);
+    2886:	6505                	lui	a0,0x1
+    2888:	00003097          	auipc	ra,0x3
+    288c:	042080e7          	jalr	66(ra) # 58ca <sbrk>
+    2890:	8a2a                	mv	s4,a0
+  if(c != a || sbrk(0) != a + PGSIZE){
+    2892:	0aa49a63          	bne	s1,a0,2946 <sbrkmuch+0x160>
+    2896:	4501                	li	a0,0
+    2898:	00003097          	auipc	ra,0x3
+    289c:	032080e7          	jalr	50(ra) # 58ca <sbrk>
+    28a0:	6785                	lui	a5,0x1
+    28a2:	97a6                	add	a5,a5,s1
+    28a4:	0af51163          	bne	a0,a5,2946 <sbrkmuch+0x160>
+  if(*lastaddr == 99){
+    28a8:	064007b7          	lui	a5,0x6400
+    28ac:	fff7c703          	lbu	a4,-1(a5) # 63fffff <__BSS_END__+0x63f11e7>
+    28b0:	06300793          	li	a5,99
+    28b4:	0af70963          	beq	a4,a5,2966 <sbrkmuch+0x180>
+  a = sbrk(0);
+    28b8:	4501                	li	a0,0
+    28ba:	00003097          	auipc	ra,0x3
+    28be:	010080e7          	jalr	16(ra) # 58ca <sbrk>
+    28c2:	84aa                	mv	s1,a0
+  c = sbrk(-(sbrk(0) - oldbrk));
+    28c4:	4501                	li	a0,0
+    28c6:	00003097          	auipc	ra,0x3
+    28ca:	004080e7          	jalr	4(ra) # 58ca <sbrk>
+    28ce:	40a9053b          	subw	a0,s2,a0
+    28d2:	00003097          	auipc	ra,0x3
+    28d6:	ff8080e7          	jalr	-8(ra) # 58ca <sbrk>
+  if(c != a){
+    28da:	0aa49463          	bne	s1,a0,2982 <sbrkmuch+0x19c>
+}
+    28de:	70a2                	ld	ra,40(sp)
+    28e0:	7402                	ld	s0,32(sp)
+    28e2:	64e2                	ld	s1,24(sp)
+    28e4:	6942                	ld	s2,16(sp)
+    28e6:	69a2                	ld	s3,8(sp)
+    28e8:	6a02                	ld	s4,0(sp)
+    28ea:	6145                	addi	sp,sp,48
+    28ec:	8082                	ret
+    printf("%s: sbrk test failed to grow big address space; enough phys mem?\n", s);
+    28ee:	85ce                	mv	a1,s3
+    28f0:	00004517          	auipc	a0,0x4
+    28f4:	30050513          	addi	a0,a0,768 # 6bf0 <malloc+0xf4c>
+    28f8:	00003097          	auipc	ra,0x3
+    28fc:	2f4080e7          	jalr	756(ra) # 5bec <printf>
+    exit(1);
+    2900:	4505                	li	a0,1
+    2902:	00003097          	auipc	ra,0x3
+    2906:	f40080e7          	jalr	-192(ra) # 5842 <exit>
+    printf("%s: sbrk could not deallocate\n", s);
+    290a:	85ce                	mv	a1,s3
+    290c:	00004517          	auipc	a0,0x4
+    2910:	32c50513          	addi	a0,a0,812 # 6c38 <malloc+0xf94>
+    2914:	00003097          	auipc	ra,0x3
+    2918:	2d8080e7          	jalr	728(ra) # 5bec <printf>
+    exit(1);
+    291c:	4505                	li	a0,1
+    291e:	00003097          	auipc	ra,0x3
+    2922:	f24080e7          	jalr	-220(ra) # 5842 <exit>
+    printf("%s: sbrk deallocation produced wrong address, a %x c %x\n", s, a, c);
+    2926:	86aa                	mv	a3,a0
+    2928:	8626                	mv	a2,s1
+    292a:	85ce                	mv	a1,s3
+    292c:	00004517          	auipc	a0,0x4
+    2930:	32c50513          	addi	a0,a0,812 # 6c58 <malloc+0xfb4>
+    2934:	00003097          	auipc	ra,0x3
+    2938:	2b8080e7          	jalr	696(ra) # 5bec <printf>
+    exit(1);
+    293c:	4505                	li	a0,1
+    293e:	00003097          	auipc	ra,0x3
+    2942:	f04080e7          	jalr	-252(ra) # 5842 <exit>
+    printf("%s: sbrk re-allocation failed, a %x c %x\n", s, a, c);
+    2946:	86d2                	mv	a3,s4
+    2948:	8626                	mv	a2,s1
+    294a:	85ce                	mv	a1,s3
+    294c:	00004517          	auipc	a0,0x4
+    2950:	34c50513          	addi	a0,a0,844 # 6c98 <malloc+0xff4>
+    2954:	00003097          	auipc	ra,0x3
+    2958:	298080e7          	jalr	664(ra) # 5bec <printf>
+    exit(1);
+    295c:	4505                	li	a0,1
+    295e:	00003097          	auipc	ra,0x3
+    2962:	ee4080e7          	jalr	-284(ra) # 5842 <exit>
+    printf("%s: sbrk de-allocation didn't really deallocate\n", s);
+    2966:	85ce                	mv	a1,s3
+    2968:	00004517          	auipc	a0,0x4
+    296c:	36050513          	addi	a0,a0,864 # 6cc8 <malloc+0x1024>
+    2970:	00003097          	auipc	ra,0x3
+    2974:	27c080e7          	jalr	636(ra) # 5bec <printf>
+    exit(1);
+    2978:	4505                	li	a0,1
+    297a:	00003097          	auipc	ra,0x3
+    297e:	ec8080e7          	jalr	-312(ra) # 5842 <exit>
+    printf("%s: sbrk downsize failed, a %x c %x\n", s, a, c);
+    2982:	86aa                	mv	a3,a0
+    2984:	8626                	mv	a2,s1
+    2986:	85ce                	mv	a1,s3
+    2988:	00004517          	auipc	a0,0x4
+    298c:	37850513          	addi	a0,a0,888 # 6d00 <malloc+0x105c>
+    2990:	00003097          	auipc	ra,0x3
+    2994:	25c080e7          	jalr	604(ra) # 5bec <printf>
+    exit(1);
+    2998:	4505                	li	a0,1
+    299a:	00003097          	auipc	ra,0x3
+    299e:	ea8080e7          	jalr	-344(ra) # 5842 <exit>
+
+00000000000029a2 <sbrkarg>:
+{
+    29a2:	7179                	addi	sp,sp,-48
+    29a4:	f406                	sd	ra,40(sp)
+    29a6:	f022                	sd	s0,32(sp)
+    29a8:	ec26                	sd	s1,24(sp)
+    29aa:	e84a                	sd	s2,16(sp)
+    29ac:	e44e                	sd	s3,8(sp)
+    29ae:	1800                	addi	s0,sp,48
+    29b0:	89aa                	mv	s3,a0
+  a = sbrk(PGSIZE);
+    29b2:	6505                	lui	a0,0x1
+    29b4:	00003097          	auipc	ra,0x3
+    29b8:	f16080e7          	jalr	-234(ra) # 58ca <sbrk>
+    29bc:	892a                	mv	s2,a0
+  fd = open("sbrk", O_CREATE|O_WRONLY);
+    29be:	20100593          	li	a1,513
+    29c2:	00004517          	auipc	a0,0x4
+    29c6:	36650513          	addi	a0,a0,870 # 6d28 <malloc+0x1084>
+    29ca:	00003097          	auipc	ra,0x3
+    29ce:	eb8080e7          	jalr	-328(ra) # 5882 <open>
+    29d2:	84aa                	mv	s1,a0
+  unlink("sbrk");
+    29d4:	00004517          	auipc	a0,0x4
+    29d8:	35450513          	addi	a0,a0,852 # 6d28 <malloc+0x1084>
+    29dc:	00003097          	auipc	ra,0x3
+    29e0:	eb6080e7          	jalr	-330(ra) # 5892 <unlink>
+  if(fd < 0)  {
+    29e4:	0404c163          	bltz	s1,2a26 <sbrkarg+0x84>
+  if ((n = write(fd, a, PGSIZE)) < 0) {
+    29e8:	6605                	lui	a2,0x1
+    29ea:	85ca                	mv	a1,s2
+    29ec:	8526                	mv	a0,s1
+    29ee:	00003097          	auipc	ra,0x3
+    29f2:	e74080e7          	jalr	-396(ra) # 5862 <write>
+    29f6:	04054663          	bltz	a0,2a42 <sbrkarg+0xa0>
+  close(fd);
+    29fa:	8526                	mv	a0,s1
+    29fc:	00003097          	auipc	ra,0x3
+    2a00:	e6e080e7          	jalr	-402(ra) # 586a <close>
+  a = sbrk(PGSIZE);
+    2a04:	6505                	lui	a0,0x1
+    2a06:	00003097          	auipc	ra,0x3
+    2a0a:	ec4080e7          	jalr	-316(ra) # 58ca <sbrk>
+  if(pipe((int *) a) != 0){
+    2a0e:	00003097          	auipc	ra,0x3
+    2a12:	e44080e7          	jalr	-444(ra) # 5852 <pipe>
+    2a16:	e521                	bnez	a0,2a5e <sbrkarg+0xbc>
+}
+    2a18:	70a2                	ld	ra,40(sp)
+    2a1a:	7402                	ld	s0,32(sp)
+    2a1c:	64e2                	ld	s1,24(sp)
+    2a1e:	6942                	ld	s2,16(sp)
+    2a20:	69a2                	ld	s3,8(sp)
+    2a22:	6145                	addi	sp,sp,48
+    2a24:	8082                	ret
+    printf("%s: open sbrk failed\n", s);
+    2a26:	85ce                	mv	a1,s3
+    2a28:	00004517          	auipc	a0,0x4
+    2a2c:	30850513          	addi	a0,a0,776 # 6d30 <malloc+0x108c>
+    2a30:	00003097          	auipc	ra,0x3
+    2a34:	1bc080e7          	jalr	444(ra) # 5bec <printf>
+    exit(1);
+    2a38:	4505                	li	a0,1
+    2a3a:	00003097          	auipc	ra,0x3
+    2a3e:	e08080e7          	jalr	-504(ra) # 5842 <exit>
+    printf("%s: write sbrk failed\n", s);
+    2a42:	85ce                	mv	a1,s3
+    2a44:	00004517          	auipc	a0,0x4
+    2a48:	30450513          	addi	a0,a0,772 # 6d48 <malloc+0x10a4>
+    2a4c:	00003097          	auipc	ra,0x3
+    2a50:	1a0080e7          	jalr	416(ra) # 5bec <printf>
+    exit(1);
+    2a54:	4505                	li	a0,1
+    2a56:	00003097          	auipc	ra,0x3
+    2a5a:	dec080e7          	jalr	-532(ra) # 5842 <exit>
+    printf("%s: pipe() failed\n", s);
+    2a5e:	85ce                	mv	a1,s3
+    2a60:	00004517          	auipc	a0,0x4
+    2a64:	cc850513          	addi	a0,a0,-824 # 6728 <malloc+0xa84>
+    2a68:	00003097          	auipc	ra,0x3
+    2a6c:	184080e7          	jalr	388(ra) # 5bec <printf>
+    exit(1);
+    2a70:	4505                	li	a0,1
+    2a72:	00003097          	auipc	ra,0x3
+    2a76:	dd0080e7          	jalr	-560(ra) # 5842 <exit>
+
+0000000000002a7a <argptest>:
+{
+    2a7a:	1101                	addi	sp,sp,-32
+    2a7c:	ec06                	sd	ra,24(sp)
+    2a7e:	e822                	sd	s0,16(sp)
+    2a80:	e426                	sd	s1,8(sp)
+    2a82:	e04a                	sd	s2,0(sp)
+    2a84:	1000                	addi	s0,sp,32
+    2a86:	892a                	mv	s2,a0
+  fd = open("init", O_RDONLY);
+    2a88:	4581                	li	a1,0
+    2a8a:	00004517          	auipc	a0,0x4
+    2a8e:	2d650513          	addi	a0,a0,726 # 6d60 <malloc+0x10bc>
+    2a92:	00003097          	auipc	ra,0x3
+    2a96:	df0080e7          	jalr	-528(ra) # 5882 <open>
+  if (fd < 0) {
+    2a9a:	02054b63          	bltz	a0,2ad0 <argptest+0x56>
+    2a9e:	84aa                	mv	s1,a0
+  read(fd, sbrk(0) - 1, -1);
+    2aa0:	4501                	li	a0,0
+    2aa2:	00003097          	auipc	ra,0x3
+    2aa6:	e28080e7          	jalr	-472(ra) # 58ca <sbrk>
+    2aaa:	567d                	li	a2,-1
+    2aac:	fff50593          	addi	a1,a0,-1
+    2ab0:	8526                	mv	a0,s1
+    2ab2:	00003097          	auipc	ra,0x3
+    2ab6:	da8080e7          	jalr	-600(ra) # 585a <read>
+  close(fd);
+    2aba:	8526                	mv	a0,s1
+    2abc:	00003097          	auipc	ra,0x3
+    2ac0:	dae080e7          	jalr	-594(ra) # 586a <close>
+}
+    2ac4:	60e2                	ld	ra,24(sp)
+    2ac6:	6442                	ld	s0,16(sp)
+    2ac8:	64a2                	ld	s1,8(sp)
+    2aca:	6902                	ld	s2,0(sp)
+    2acc:	6105                	addi	sp,sp,32
+    2ace:	8082                	ret
+    printf("%s: open failed\n", s);
+    2ad0:	85ca                	mv	a1,s2
+    2ad2:	00004517          	auipc	a0,0x4
+    2ad6:	b6650513          	addi	a0,a0,-1178 # 6638 <malloc+0x994>
+    2ada:	00003097          	auipc	ra,0x3
+    2ade:	112080e7          	jalr	274(ra) # 5bec <printf>
+    exit(1);
+    2ae2:	4505                	li	a0,1
+    2ae4:	00003097          	auipc	ra,0x3
+    2ae8:	d5e080e7          	jalr	-674(ra) # 5842 <exit>
+
+0000000000002aec <sbrkbugs>:
+{
+    2aec:	1141                	addi	sp,sp,-16
+    2aee:	e406                	sd	ra,8(sp)
+    2af0:	e022                	sd	s0,0(sp)
+    2af2:	0800                	addi	s0,sp,16
+  int pid = fork();
+    2af4:	00003097          	auipc	ra,0x3
+    2af8:	d46080e7          	jalr	-698(ra) # 583a <fork>
+  if(pid < 0){
+    2afc:	02054263          	bltz	a0,2b20 <sbrkbugs+0x34>
+  if(pid == 0){
+    2b00:	ed0d                	bnez	a0,2b3a <sbrkbugs+0x4e>
+    int sz = (uint64) sbrk(0);
+    2b02:	00003097          	auipc	ra,0x3
+    2b06:	dc8080e7          	jalr	-568(ra) # 58ca <sbrk>
+    sbrk(-sz);
+    2b0a:	40a0053b          	negw	a0,a0
+    2b0e:	00003097          	auipc	ra,0x3
+    2b12:	dbc080e7          	jalr	-580(ra) # 58ca <sbrk>
+    exit(0);
+    2b16:	4501                	li	a0,0
+    2b18:	00003097          	auipc	ra,0x3
+    2b1c:	d2a080e7          	jalr	-726(ra) # 5842 <exit>
+    printf("fork failed\n");
+    2b20:	00004517          	auipc	a0,0x4
+    2b24:	f2050513          	addi	a0,a0,-224 # 6a40 <malloc+0xd9c>
+    2b28:	00003097          	auipc	ra,0x3
+    2b2c:	0c4080e7          	jalr	196(ra) # 5bec <printf>
+    exit(1);
+    2b30:	4505                	li	a0,1
+    2b32:	00003097          	auipc	ra,0x3
+    2b36:	d10080e7          	jalr	-752(ra) # 5842 <exit>
+  wait(0);
+    2b3a:	4501                	li	a0,0
+    2b3c:	00003097          	auipc	ra,0x3
+    2b40:	d0e080e7          	jalr	-754(ra) # 584a <wait>
+  pid = fork();
+    2b44:	00003097          	auipc	ra,0x3
+    2b48:	cf6080e7          	jalr	-778(ra) # 583a <fork>
+  if(pid < 0){
+    2b4c:	02054563          	bltz	a0,2b76 <sbrkbugs+0x8a>
+  if(pid == 0){
+    2b50:	e121                	bnez	a0,2b90 <sbrkbugs+0xa4>
+    int sz = (uint64) sbrk(0);
+    2b52:	00003097          	auipc	ra,0x3
+    2b56:	d78080e7          	jalr	-648(ra) # 58ca <sbrk>
+    sbrk(-(sz - 3500));
+    2b5a:	6785                	lui	a5,0x1
+    2b5c:	dac7879b          	addiw	a5,a5,-596 # dac <linktest+0x98>
+    2b60:	40a7853b          	subw	a0,a5,a0
+    2b64:	00003097          	auipc	ra,0x3
+    2b68:	d66080e7          	jalr	-666(ra) # 58ca <sbrk>
+    exit(0);
+    2b6c:	4501                	li	a0,0
+    2b6e:	00003097          	auipc	ra,0x3
+    2b72:	cd4080e7          	jalr	-812(ra) # 5842 <exit>
+    printf("fork failed\n");
+    2b76:	00004517          	auipc	a0,0x4
+    2b7a:	eca50513          	addi	a0,a0,-310 # 6a40 <malloc+0xd9c>
+    2b7e:	00003097          	auipc	ra,0x3
+    2b82:	06e080e7          	jalr	110(ra) # 5bec <printf>
+    exit(1);
+    2b86:	4505                	li	a0,1
+    2b88:	00003097          	auipc	ra,0x3
+    2b8c:	cba080e7          	jalr	-838(ra) # 5842 <exit>
+  wait(0);
+    2b90:	4501                	li	a0,0
+    2b92:	00003097          	auipc	ra,0x3
+    2b96:	cb8080e7          	jalr	-840(ra) # 584a <wait>
+  pid = fork();
+    2b9a:	00003097          	auipc	ra,0x3
+    2b9e:	ca0080e7          	jalr	-864(ra) # 583a <fork>
+  if(pid < 0){
+    2ba2:	02054a63          	bltz	a0,2bd6 <sbrkbugs+0xea>
+  if(pid == 0){
+    2ba6:	e529                	bnez	a0,2bf0 <sbrkbugs+0x104>
+    sbrk((10*4096 + 2048) - (uint64)sbrk(0));
+    2ba8:	00003097          	auipc	ra,0x3
+    2bac:	d22080e7          	jalr	-734(ra) # 58ca <sbrk>
+    2bb0:	67ad                	lui	a5,0xb
+    2bb2:	8007879b          	addiw	a5,a5,-2048 # a800 <uninit+0x1108>
+    2bb6:	40a7853b          	subw	a0,a5,a0
+    2bba:	00003097          	auipc	ra,0x3
+    2bbe:	d10080e7          	jalr	-752(ra) # 58ca <sbrk>
+    sbrk(-10);
+    2bc2:	5559                	li	a0,-10
+    2bc4:	00003097          	auipc	ra,0x3
+    2bc8:	d06080e7          	jalr	-762(ra) # 58ca <sbrk>
+    exit(0);
+    2bcc:	4501                	li	a0,0
+    2bce:	00003097          	auipc	ra,0x3
+    2bd2:	c74080e7          	jalr	-908(ra) # 5842 <exit>
+    printf("fork failed\n");
+    2bd6:	00004517          	auipc	a0,0x4
+    2bda:	e6a50513          	addi	a0,a0,-406 # 6a40 <malloc+0xd9c>
+    2bde:	00003097          	auipc	ra,0x3
+    2be2:	00e080e7          	jalr	14(ra) # 5bec <printf>
+    exit(1);
+    2be6:	4505                	li	a0,1
+    2be8:	00003097          	auipc	ra,0x3
+    2bec:	c5a080e7          	jalr	-934(ra) # 5842 <exit>
+  wait(0);
+    2bf0:	4501                	li	a0,0
+    2bf2:	00003097          	auipc	ra,0x3
+    2bf6:	c58080e7          	jalr	-936(ra) # 584a <wait>
+  exit(0);
+    2bfa:	4501                	li	a0,0
+    2bfc:	00003097          	auipc	ra,0x3
+    2c00:	c46080e7          	jalr	-954(ra) # 5842 <exit>
+
+0000000000002c04 <sbrklast>:
+{
+    2c04:	7179                	addi	sp,sp,-48
+    2c06:	f406                	sd	ra,40(sp)
+    2c08:	f022                	sd	s0,32(sp)
+    2c0a:	ec26                	sd	s1,24(sp)
+    2c0c:	e84a                	sd	s2,16(sp)
+    2c0e:	e44e                	sd	s3,8(sp)
+    2c10:	e052                	sd	s4,0(sp)
+    2c12:	1800                	addi	s0,sp,48
+  uint64 top = (uint64) sbrk(0);
+    2c14:	4501                	li	a0,0
+    2c16:	00003097          	auipc	ra,0x3
+    2c1a:	cb4080e7          	jalr	-844(ra) # 58ca <sbrk>
+  if((top % 4096) != 0)
+    2c1e:	03451793          	slli	a5,a0,0x34
+    2c22:	ebd9                	bnez	a5,2cb8 <sbrklast+0xb4>
+  sbrk(4096);
+    2c24:	6505                	lui	a0,0x1
+    2c26:	00003097          	auipc	ra,0x3
+    2c2a:	ca4080e7          	jalr	-860(ra) # 58ca <sbrk>
+  sbrk(10);
+    2c2e:	4529                	li	a0,10
+    2c30:	00003097          	auipc	ra,0x3
+    2c34:	c9a080e7          	jalr	-870(ra) # 58ca <sbrk>
+  sbrk(-20);
+    2c38:	5531                	li	a0,-20
+    2c3a:	00003097          	auipc	ra,0x3
+    2c3e:	c90080e7          	jalr	-880(ra) # 58ca <sbrk>
+  top = (uint64) sbrk(0);
+    2c42:	4501                	li	a0,0
+    2c44:	00003097          	auipc	ra,0x3
+    2c48:	c86080e7          	jalr	-890(ra) # 58ca <sbrk>
+    2c4c:	84aa                	mv	s1,a0
+  char *p = (char *) (top - 64);
+    2c4e:	fc050913          	addi	s2,a0,-64 # fc0 <bigdir+0x60>
+  p[0] = 'x';
+    2c52:	07800a13          	li	s4,120
+    2c56:	fd450023          	sb	s4,-64(a0)
+  p[1] = '\0';
+    2c5a:	fc0500a3          	sb	zero,-63(a0)
+  int fd = open(p, O_RDWR|O_CREATE);
+    2c5e:	20200593          	li	a1,514
+    2c62:	854a                	mv	a0,s2
+    2c64:	00003097          	auipc	ra,0x3
+    2c68:	c1e080e7          	jalr	-994(ra) # 5882 <open>
+    2c6c:	89aa                	mv	s3,a0
+  write(fd, p, 1);
+    2c6e:	4605                	li	a2,1
+    2c70:	85ca                	mv	a1,s2
+    2c72:	00003097          	auipc	ra,0x3
+    2c76:	bf0080e7          	jalr	-1040(ra) # 5862 <write>
+  close(fd);
+    2c7a:	854e                	mv	a0,s3
+    2c7c:	00003097          	auipc	ra,0x3
+    2c80:	bee080e7          	jalr	-1042(ra) # 586a <close>
+  fd = open(p, O_RDWR);
+    2c84:	4589                	li	a1,2
+    2c86:	854a                	mv	a0,s2
+    2c88:	00003097          	auipc	ra,0x3
+    2c8c:	bfa080e7          	jalr	-1030(ra) # 5882 <open>
+  p[0] = '\0';
+    2c90:	fc048023          	sb	zero,-64(s1)
+  read(fd, p, 1);
+    2c94:	4605                	li	a2,1
+    2c96:	85ca                	mv	a1,s2
+    2c98:	00003097          	auipc	ra,0x3
+    2c9c:	bc2080e7          	jalr	-1086(ra) # 585a <read>
+  if(p[0] != 'x')
+    2ca0:	fc04c783          	lbu	a5,-64(s1)
+    2ca4:	03479463          	bne	a5,s4,2ccc <sbrklast+0xc8>
+}
+    2ca8:	70a2                	ld	ra,40(sp)
+    2caa:	7402                	ld	s0,32(sp)
+    2cac:	64e2                	ld	s1,24(sp)
+    2cae:	6942                	ld	s2,16(sp)
+    2cb0:	69a2                	ld	s3,8(sp)
+    2cb2:	6a02                	ld	s4,0(sp)
+    2cb4:	6145                	addi	sp,sp,48
+    2cb6:	8082                	ret
+    sbrk(4096 - (top % 4096));
+    2cb8:	0347d513          	srli	a0,a5,0x34
+    2cbc:	6785                	lui	a5,0x1
+    2cbe:	40a7853b          	subw	a0,a5,a0
+    2cc2:	00003097          	auipc	ra,0x3
+    2cc6:	c08080e7          	jalr	-1016(ra) # 58ca <sbrk>
+    2cca:	bfa9                	j	2c24 <sbrklast+0x20>
+    exit(1);
+    2ccc:	4505                	li	a0,1
+    2cce:	00003097          	auipc	ra,0x3
+    2cd2:	b74080e7          	jalr	-1164(ra) # 5842 <exit>
+
+0000000000002cd6 <sbrk8000>:
+{
+    2cd6:	1141                	addi	sp,sp,-16
+    2cd8:	e406                	sd	ra,8(sp)
+    2cda:	e022                	sd	s0,0(sp)
+    2cdc:	0800                	addi	s0,sp,16
+  sbrk(0x80000004);
+    2cde:	80000537          	lui	a0,0x80000
+    2ce2:	0511                	addi	a0,a0,4 # ffffffff80000004 <__BSS_END__+0xffffffff7fff11ec>
+    2ce4:	00003097          	auipc	ra,0x3
+    2ce8:	be6080e7          	jalr	-1050(ra) # 58ca <sbrk>
+  volatile char *top = sbrk(0);
+    2cec:	4501                	li	a0,0
+    2cee:	00003097          	auipc	ra,0x3
+    2cf2:	bdc080e7          	jalr	-1060(ra) # 58ca <sbrk>
+  *(top-1) = *(top-1) + 1;
+    2cf6:	fff54783          	lbu	a5,-1(a0)
+    2cfa:	2785                	addiw	a5,a5,1 # 1001 <bigdir+0xa1>
+    2cfc:	0ff7f793          	zext.b	a5,a5
+    2d00:	fef50fa3          	sb	a5,-1(a0)
+}
+    2d04:	60a2                	ld	ra,8(sp)
+    2d06:	6402                	ld	s0,0(sp)
+    2d08:	0141                	addi	sp,sp,16
+    2d0a:	8082                	ret
+
+0000000000002d0c <execout>:
+// test the exec() code that cleans up if it runs out
+// of memory. it's really a test that such a condition
+// doesn't cause a panic.
+void
+execout(char *s)
+{
+    2d0c:	715d                	addi	sp,sp,-80
+    2d0e:	e486                	sd	ra,72(sp)
+    2d10:	e0a2                	sd	s0,64(sp)
+    2d12:	fc26                	sd	s1,56(sp)
+    2d14:	f84a                	sd	s2,48(sp)
+    2d16:	f44e                	sd	s3,40(sp)
+    2d18:	f052                	sd	s4,32(sp)
+    2d1a:	0880                	addi	s0,sp,80
+  for(int avail = 0; avail < 15; avail++){
+    2d1c:	4901                	li	s2,0
+    2d1e:	49bd                	li	s3,15
+    int pid = fork();
+    2d20:	00003097          	auipc	ra,0x3
+    2d24:	b1a080e7          	jalr	-1254(ra) # 583a <fork>
+    2d28:	84aa                	mv	s1,a0
+    if(pid < 0){
+    2d2a:	02054063          	bltz	a0,2d4a <execout+0x3e>
+      printf("fork failed\n");
+      exit(1);
+    } else if(pid == 0){
+    2d2e:	c91d                	beqz	a0,2d64 <execout+0x58>
+      close(1);
+      char *args[] = { "echo", "x", 0 };
+      exec("echo", args);
+      exit(0);
+    } else {
+      wait((int*)0);
+    2d30:	4501                	li	a0,0
+    2d32:	00003097          	auipc	ra,0x3
+    2d36:	b18080e7          	jalr	-1256(ra) # 584a <wait>
+  for(int avail = 0; avail < 15; avail++){
+    2d3a:	2905                	addiw	s2,s2,1
+    2d3c:	ff3912e3          	bne	s2,s3,2d20 <execout+0x14>
+    }
+  }
+
+  exit(0);
+    2d40:	4501                	li	a0,0
+    2d42:	00003097          	auipc	ra,0x3
+    2d46:	b00080e7          	jalr	-1280(ra) # 5842 <exit>
+      printf("fork failed\n");
+    2d4a:	00004517          	auipc	a0,0x4
+    2d4e:	cf650513          	addi	a0,a0,-778 # 6a40 <malloc+0xd9c>
+    2d52:	00003097          	auipc	ra,0x3
+    2d56:	e9a080e7          	jalr	-358(ra) # 5bec <printf>
+      exit(1);
+    2d5a:	4505                	li	a0,1
+    2d5c:	00003097          	auipc	ra,0x3
+    2d60:	ae6080e7          	jalr	-1306(ra) # 5842 <exit>
+        if(a == 0xffffffffffffffffLL)
+    2d64:	59fd                	li	s3,-1
+        *(char*)(a + 4096 - 1) = 1;
+    2d66:	4a05                	li	s4,1
+        uint64 a = (uint64) sbrk(4096);
+    2d68:	6505                	lui	a0,0x1
+    2d6a:	00003097          	auipc	ra,0x3
+    2d6e:	b60080e7          	jalr	-1184(ra) # 58ca <sbrk>
+        if(a == 0xffffffffffffffffLL)
+    2d72:	01350763          	beq	a0,s3,2d80 <execout+0x74>
+        *(char*)(a + 4096 - 1) = 1;
+    2d76:	6785                	lui	a5,0x1
+    2d78:	97aa                	add	a5,a5,a0
+    2d7a:	ff478fa3          	sb	s4,-1(a5) # fff <bigdir+0x9f>
+      while(1){
+    2d7e:	b7ed                	j	2d68 <execout+0x5c>
+      for(int i = 0; i < avail; i++)
+    2d80:	01205a63          	blez	s2,2d94 <execout+0x88>
+        sbrk(-4096);
+    2d84:	757d                	lui	a0,0xfffff
+    2d86:	00003097          	auipc	ra,0x3
+    2d8a:	b44080e7          	jalr	-1212(ra) # 58ca <sbrk>
+      for(int i = 0; i < avail; i++)
+    2d8e:	2485                	addiw	s1,s1,1
+    2d90:	ff249ae3          	bne	s1,s2,2d84 <execout+0x78>
+      close(1);
+    2d94:	4505                	li	a0,1
+    2d96:	00003097          	auipc	ra,0x3
+    2d9a:	ad4080e7          	jalr	-1324(ra) # 586a <close>
+      char *args[] = { "echo", "x", 0 };
+    2d9e:	00003517          	auipc	a0,0x3
+    2da2:	02a50513          	addi	a0,a0,42 # 5dc8 <malloc+0x124>
+    2da6:	faa43c23          	sd	a0,-72(s0)
+    2daa:	00003797          	auipc	a5,0x3
+    2dae:	08e78793          	addi	a5,a5,142 # 5e38 <malloc+0x194>
+    2db2:	fcf43023          	sd	a5,-64(s0)
+    2db6:	fc043423          	sd	zero,-56(s0)
+      exec("echo", args);
+    2dba:	fb840593          	addi	a1,s0,-72
+    2dbe:	00003097          	auipc	ra,0x3
+    2dc2:	abc080e7          	jalr	-1348(ra) # 587a <exec>
+      exit(0);
+    2dc6:	4501                	li	a0,0
+    2dc8:	00003097          	auipc	ra,0x3
+    2dcc:	a7a080e7          	jalr	-1414(ra) # 5842 <exit>
+
+0000000000002dd0 <fourteen>:
+{
+    2dd0:	1101                	addi	sp,sp,-32
+    2dd2:	ec06                	sd	ra,24(sp)
+    2dd4:	e822                	sd	s0,16(sp)
+    2dd6:	e426                	sd	s1,8(sp)
+    2dd8:	1000                	addi	s0,sp,32
+    2dda:	84aa                	mv	s1,a0
+  if(mkdir("12345678901234") != 0){
+    2ddc:	00004517          	auipc	a0,0x4
+    2de0:	15c50513          	addi	a0,a0,348 # 6f38 <malloc+0x1294>
+    2de4:	00003097          	auipc	ra,0x3
+    2de8:	ac6080e7          	jalr	-1338(ra) # 58aa <mkdir>
+    2dec:	e165                	bnez	a0,2ecc <fourteen+0xfc>
+  if(mkdir("12345678901234/123456789012345") != 0){
+    2dee:	00004517          	auipc	a0,0x4
+    2df2:	fa250513          	addi	a0,a0,-94 # 6d90 <malloc+0x10ec>
+    2df6:	00003097          	auipc	ra,0x3
+    2dfa:	ab4080e7          	jalr	-1356(ra) # 58aa <mkdir>
+    2dfe:	e56d                	bnez	a0,2ee8 <fourteen+0x118>
+  fd = open("123456789012345/123456789012345/123456789012345", O_CREATE);
+    2e00:	20000593          	li	a1,512
+    2e04:	00004517          	auipc	a0,0x4
+    2e08:	fe450513          	addi	a0,a0,-28 # 6de8 <malloc+0x1144>
+    2e0c:	00003097          	auipc	ra,0x3
+    2e10:	a76080e7          	jalr	-1418(ra) # 5882 <open>
+  if(fd < 0){
+    2e14:	0e054863          	bltz	a0,2f04 <fourteen+0x134>
+  close(fd);
+    2e18:	00003097          	auipc	ra,0x3
+    2e1c:	a52080e7          	jalr	-1454(ra) # 586a <close>
+  fd = open("12345678901234/12345678901234/12345678901234", 0);
+    2e20:	4581                	li	a1,0
+    2e22:	00004517          	auipc	a0,0x4
+    2e26:	03e50513          	addi	a0,a0,62 # 6e60 <malloc+0x11bc>
+    2e2a:	00003097          	auipc	ra,0x3
+    2e2e:	a58080e7          	jalr	-1448(ra) # 5882 <open>
+  if(fd < 0){
+    2e32:	0e054763          	bltz	a0,2f20 <fourteen+0x150>
+  close(fd);
+    2e36:	00003097          	auipc	ra,0x3
+    2e3a:	a34080e7          	jalr	-1484(ra) # 586a <close>
+  if(mkdir("12345678901234/12345678901234") == 0){
+    2e3e:	00004517          	auipc	a0,0x4
+    2e42:	09250513          	addi	a0,a0,146 # 6ed0 <malloc+0x122c>
+    2e46:	00003097          	auipc	ra,0x3
+    2e4a:	a64080e7          	jalr	-1436(ra) # 58aa <mkdir>
+    2e4e:	c57d                	beqz	a0,2f3c <fourteen+0x16c>
+  if(mkdir("123456789012345/12345678901234") == 0){
+    2e50:	00004517          	auipc	a0,0x4
+    2e54:	0d850513          	addi	a0,a0,216 # 6f28 <malloc+0x1284>
+    2e58:	00003097          	auipc	ra,0x3
+    2e5c:	a52080e7          	jalr	-1454(ra) # 58aa <mkdir>
+    2e60:	cd65                	beqz	a0,2f58 <fourteen+0x188>
+  unlink("123456789012345/12345678901234");
+    2e62:	00004517          	auipc	a0,0x4
+    2e66:	0c650513          	addi	a0,a0,198 # 6f28 <malloc+0x1284>
+    2e6a:	00003097          	auipc	ra,0x3
+    2e6e:	a28080e7          	jalr	-1496(ra) # 5892 <unlink>
+  unlink("12345678901234/12345678901234");
+    2e72:	00004517          	auipc	a0,0x4
+    2e76:	05e50513          	addi	a0,a0,94 # 6ed0 <malloc+0x122c>
+    2e7a:	00003097          	auipc	ra,0x3
+    2e7e:	a18080e7          	jalr	-1512(ra) # 5892 <unlink>
+  unlink("12345678901234/12345678901234/12345678901234");
+    2e82:	00004517          	auipc	a0,0x4
+    2e86:	fde50513          	addi	a0,a0,-34 # 6e60 <malloc+0x11bc>
+    2e8a:	00003097          	auipc	ra,0x3
+    2e8e:	a08080e7          	jalr	-1528(ra) # 5892 <unlink>
+  unlink("123456789012345/123456789012345/123456789012345");
+    2e92:	00004517          	auipc	a0,0x4
+    2e96:	f5650513          	addi	a0,a0,-170 # 6de8 <malloc+0x1144>
+    2e9a:	00003097          	auipc	ra,0x3
+    2e9e:	9f8080e7          	jalr	-1544(ra) # 5892 <unlink>
+  unlink("12345678901234/123456789012345");
+    2ea2:	00004517          	auipc	a0,0x4
+    2ea6:	eee50513          	addi	a0,a0,-274 # 6d90 <malloc+0x10ec>
+    2eaa:	00003097          	auipc	ra,0x3
+    2eae:	9e8080e7          	jalr	-1560(ra) # 5892 <unlink>
+  unlink("12345678901234");
+    2eb2:	00004517          	auipc	a0,0x4
+    2eb6:	08650513          	addi	a0,a0,134 # 6f38 <malloc+0x1294>
+    2eba:	00003097          	auipc	ra,0x3
+    2ebe:	9d8080e7          	jalr	-1576(ra) # 5892 <unlink>
+}
+    2ec2:	60e2                	ld	ra,24(sp)
+    2ec4:	6442                	ld	s0,16(sp)
+    2ec6:	64a2                	ld	s1,8(sp)
+    2ec8:	6105                	addi	sp,sp,32
+    2eca:	8082                	ret
+    printf("%s: mkdir 12345678901234 failed\n", s);
+    2ecc:	85a6                	mv	a1,s1
+    2ece:	00004517          	auipc	a0,0x4
+    2ed2:	e9a50513          	addi	a0,a0,-358 # 6d68 <malloc+0x10c4>
+    2ed6:	00003097          	auipc	ra,0x3
+    2eda:	d16080e7          	jalr	-746(ra) # 5bec <printf>
+    exit(1);
+    2ede:	4505                	li	a0,1
+    2ee0:	00003097          	auipc	ra,0x3
+    2ee4:	962080e7          	jalr	-1694(ra) # 5842 <exit>
+    printf("%s: mkdir 12345678901234/123456789012345 failed\n", s);
+    2ee8:	85a6                	mv	a1,s1
+    2eea:	00004517          	auipc	a0,0x4
+    2eee:	ec650513          	addi	a0,a0,-314 # 6db0 <malloc+0x110c>
+    2ef2:	00003097          	auipc	ra,0x3
+    2ef6:	cfa080e7          	jalr	-774(ra) # 5bec <printf>
+    exit(1);
+    2efa:	4505                	li	a0,1
+    2efc:	00003097          	auipc	ra,0x3
+    2f00:	946080e7          	jalr	-1722(ra) # 5842 <exit>
+    printf("%s: create 123456789012345/123456789012345/123456789012345 failed\n", s);
+    2f04:	85a6                	mv	a1,s1
+    2f06:	00004517          	auipc	a0,0x4
+    2f0a:	f1250513          	addi	a0,a0,-238 # 6e18 <malloc+0x1174>
+    2f0e:	00003097          	auipc	ra,0x3
+    2f12:	cde080e7          	jalr	-802(ra) # 5bec <printf>
+    exit(1);
+    2f16:	4505                	li	a0,1
+    2f18:	00003097          	auipc	ra,0x3
+    2f1c:	92a080e7          	jalr	-1750(ra) # 5842 <exit>
+    printf("%s: open 12345678901234/12345678901234/12345678901234 failed\n", s);
+    2f20:	85a6                	mv	a1,s1
+    2f22:	00004517          	auipc	a0,0x4
+    2f26:	f6e50513          	addi	a0,a0,-146 # 6e90 <malloc+0x11ec>
+    2f2a:	00003097          	auipc	ra,0x3
+    2f2e:	cc2080e7          	jalr	-830(ra) # 5bec <printf>
+    exit(1);
+    2f32:	4505                	li	a0,1
+    2f34:	00003097          	auipc	ra,0x3
+    2f38:	90e080e7          	jalr	-1778(ra) # 5842 <exit>
+    printf("%s: mkdir 12345678901234/12345678901234 succeeded!\n", s);
+    2f3c:	85a6                	mv	a1,s1
+    2f3e:	00004517          	auipc	a0,0x4
+    2f42:	fb250513          	addi	a0,a0,-78 # 6ef0 <malloc+0x124c>
+    2f46:	00003097          	auipc	ra,0x3
+    2f4a:	ca6080e7          	jalr	-858(ra) # 5bec <printf>
+    exit(1);
+    2f4e:	4505                	li	a0,1
+    2f50:	00003097          	auipc	ra,0x3
+    2f54:	8f2080e7          	jalr	-1806(ra) # 5842 <exit>
+    printf("%s: mkdir 12345678901234/123456789012345 succeeded!\n", s);
+    2f58:	85a6                	mv	a1,s1
+    2f5a:	00004517          	auipc	a0,0x4
+    2f5e:	fee50513          	addi	a0,a0,-18 # 6f48 <malloc+0x12a4>
+    2f62:	00003097          	auipc	ra,0x3
+    2f66:	c8a080e7          	jalr	-886(ra) # 5bec <printf>
+    exit(1);
+    2f6a:	4505                	li	a0,1
+    2f6c:	00003097          	auipc	ra,0x3
+    2f70:	8d6080e7          	jalr	-1834(ra) # 5842 <exit>
+
+0000000000002f74 <iputtest>:
+{
+    2f74:	1101                	addi	sp,sp,-32
+    2f76:	ec06                	sd	ra,24(sp)
+    2f78:	e822                	sd	s0,16(sp)
+    2f7a:	e426                	sd	s1,8(sp)
+    2f7c:	1000                	addi	s0,sp,32
+    2f7e:	84aa                	mv	s1,a0
+  if(mkdir("iputdir") < 0){
+    2f80:	00004517          	auipc	a0,0x4
+    2f84:	00050513          	mv	a0,a0
+    2f88:	00003097          	auipc	ra,0x3
+    2f8c:	922080e7          	jalr	-1758(ra) # 58aa <mkdir>
+    2f90:	04054563          	bltz	a0,2fda <iputtest+0x66>
+  if(chdir("iputdir") < 0){
+    2f94:	00004517          	auipc	a0,0x4
+    2f98:	fec50513          	addi	a0,a0,-20 # 6f80 <malloc+0x12dc>
+    2f9c:	00003097          	auipc	ra,0x3
+    2fa0:	916080e7          	jalr	-1770(ra) # 58b2 <chdir>
+    2fa4:	04054963          	bltz	a0,2ff6 <iputtest+0x82>
+  if(unlink("../iputdir") < 0){
+    2fa8:	00004517          	auipc	a0,0x4
+    2fac:	01850513          	addi	a0,a0,24 # 6fc0 <malloc+0x131c>
+    2fb0:	00003097          	auipc	ra,0x3
+    2fb4:	8e2080e7          	jalr	-1822(ra) # 5892 <unlink>
+    2fb8:	04054d63          	bltz	a0,3012 <iputtest+0x9e>
+  if(chdir("/") < 0){
+    2fbc:	00004517          	auipc	a0,0x4
+    2fc0:	03450513          	addi	a0,a0,52 # 6ff0 <malloc+0x134c>
+    2fc4:	00003097          	auipc	ra,0x3
+    2fc8:	8ee080e7          	jalr	-1810(ra) # 58b2 <chdir>
+    2fcc:	06054163          	bltz	a0,302e <iputtest+0xba>
+}
+    2fd0:	60e2                	ld	ra,24(sp)
+    2fd2:	6442                	ld	s0,16(sp)
+    2fd4:	64a2                	ld	s1,8(sp)
+    2fd6:	6105                	addi	sp,sp,32
+    2fd8:	8082                	ret
+    printf("%s: mkdir failed\n", s);
+    2fda:	85a6                	mv	a1,s1
+    2fdc:	00004517          	auipc	a0,0x4
+    2fe0:	fac50513          	addi	a0,a0,-84 # 6f88 <malloc+0x12e4>
+    2fe4:	00003097          	auipc	ra,0x3
+    2fe8:	c08080e7          	jalr	-1016(ra) # 5bec <printf>
+    exit(1);
+    2fec:	4505                	li	a0,1
+    2fee:	00003097          	auipc	ra,0x3
+    2ff2:	854080e7          	jalr	-1964(ra) # 5842 <exit>
+    printf("%s: chdir iputdir failed\n", s);
+    2ff6:	85a6                	mv	a1,s1
+    2ff8:	00004517          	auipc	a0,0x4
+    2ffc:	fa850513          	addi	a0,a0,-88 # 6fa0 <malloc+0x12fc>
+    3000:	00003097          	auipc	ra,0x3
+    3004:	bec080e7          	jalr	-1044(ra) # 5bec <printf>
+    exit(1);
+    3008:	4505                	li	a0,1
+    300a:	00003097          	auipc	ra,0x3
+    300e:	838080e7          	jalr	-1992(ra) # 5842 <exit>
+    printf("%s: unlink ../iputdir failed\n", s);
+    3012:	85a6                	mv	a1,s1
+    3014:	00004517          	auipc	a0,0x4
+    3018:	fbc50513          	addi	a0,a0,-68 # 6fd0 <malloc+0x132c>
+    301c:	00003097          	auipc	ra,0x3
+    3020:	bd0080e7          	jalr	-1072(ra) # 5bec <printf>
+    exit(1);
+    3024:	4505                	li	a0,1
+    3026:	00003097          	auipc	ra,0x3
+    302a:	81c080e7          	jalr	-2020(ra) # 5842 <exit>
+    printf("%s: chdir / failed\n", s);
+    302e:	85a6                	mv	a1,s1
+    3030:	00004517          	auipc	a0,0x4
+    3034:	fc850513          	addi	a0,a0,-56 # 6ff8 <malloc+0x1354>
+    3038:	00003097          	auipc	ra,0x3
+    303c:	bb4080e7          	jalr	-1100(ra) # 5bec <printf>
+    exit(1);
+    3040:	4505                	li	a0,1
+    3042:	00003097          	auipc	ra,0x3
+    3046:	800080e7          	jalr	-2048(ra) # 5842 <exit>
+
+000000000000304a <exitiputtest>:
+{
+    304a:	7179                	addi	sp,sp,-48
+    304c:	f406                	sd	ra,40(sp)
+    304e:	f022                	sd	s0,32(sp)
+    3050:	ec26                	sd	s1,24(sp)
+    3052:	1800                	addi	s0,sp,48
+    3054:	84aa                	mv	s1,a0
+  pid = fork();
+    3056:	00002097          	auipc	ra,0x2
+    305a:	7e4080e7          	jalr	2020(ra) # 583a <fork>
+  if(pid < 0){
+    305e:	04054663          	bltz	a0,30aa <exitiputtest+0x60>
+  if(pid == 0){
+    3062:	ed45                	bnez	a0,311a <exitiputtest+0xd0>
+    if(mkdir("iputdir") < 0){
+    3064:	00004517          	auipc	a0,0x4
+    3068:	f1c50513          	addi	a0,a0,-228 # 6f80 <malloc+0x12dc>
+    306c:	00003097          	auipc	ra,0x3
+    3070:	83e080e7          	jalr	-1986(ra) # 58aa <mkdir>
+    3074:	04054963          	bltz	a0,30c6 <exitiputtest+0x7c>
+    if(chdir("iputdir") < 0){
+    3078:	00004517          	auipc	a0,0x4
+    307c:	f0850513          	addi	a0,a0,-248 # 6f80 <malloc+0x12dc>
+    3080:	00003097          	auipc	ra,0x3
+    3084:	832080e7          	jalr	-1998(ra) # 58b2 <chdir>
+    3088:	04054d63          	bltz	a0,30e2 <exitiputtest+0x98>
+    if(unlink("../iputdir") < 0){
+    308c:	00004517          	auipc	a0,0x4
+    3090:	f3450513          	addi	a0,a0,-204 # 6fc0 <malloc+0x131c>
+    3094:	00002097          	auipc	ra,0x2
+    3098:	7fe080e7          	jalr	2046(ra) # 5892 <unlink>
+    309c:	06054163          	bltz	a0,30fe <exitiputtest+0xb4>
+    exit(0);
+    30a0:	4501                	li	a0,0
+    30a2:	00002097          	auipc	ra,0x2
+    30a6:	7a0080e7          	jalr	1952(ra) # 5842 <exit>
+    printf("%s: fork failed\n", s);
+    30aa:	85a6                	mv	a1,s1
+    30ac:	00003517          	auipc	a0,0x3
+    30b0:	57450513          	addi	a0,a0,1396 # 6620 <malloc+0x97c>
+    30b4:	00003097          	auipc	ra,0x3
+    30b8:	b38080e7          	jalr	-1224(ra) # 5bec <printf>
+    exit(1);
+    30bc:	4505                	li	a0,1
+    30be:	00002097          	auipc	ra,0x2
+    30c2:	784080e7          	jalr	1924(ra) # 5842 <exit>
+      printf("%s: mkdir failed\n", s);
+    30c6:	85a6                	mv	a1,s1
+    30c8:	00004517          	auipc	a0,0x4
+    30cc:	ec050513          	addi	a0,a0,-320 # 6f88 <malloc+0x12e4>
+    30d0:	00003097          	auipc	ra,0x3
+    30d4:	b1c080e7          	jalr	-1252(ra) # 5bec <printf>
+      exit(1);
+    30d8:	4505                	li	a0,1
+    30da:	00002097          	auipc	ra,0x2
+    30de:	768080e7          	jalr	1896(ra) # 5842 <exit>
+      printf("%s: child chdir failed\n", s);
+    30e2:	85a6                	mv	a1,s1
+    30e4:	00004517          	auipc	a0,0x4
+    30e8:	f2c50513          	addi	a0,a0,-212 # 7010 <malloc+0x136c>
+    30ec:	00003097          	auipc	ra,0x3
+    30f0:	b00080e7          	jalr	-1280(ra) # 5bec <printf>
+      exit(1);
+    30f4:	4505                	li	a0,1
+    30f6:	00002097          	auipc	ra,0x2
+    30fa:	74c080e7          	jalr	1868(ra) # 5842 <exit>
+      printf("%s: unlink ../iputdir failed\n", s);
+    30fe:	85a6                	mv	a1,s1
+    3100:	00004517          	auipc	a0,0x4
+    3104:	ed050513          	addi	a0,a0,-304 # 6fd0 <malloc+0x132c>
+    3108:	00003097          	auipc	ra,0x3
+    310c:	ae4080e7          	jalr	-1308(ra) # 5bec <printf>
+      exit(1);
+    3110:	4505                	li	a0,1
+    3112:	00002097          	auipc	ra,0x2
+    3116:	730080e7          	jalr	1840(ra) # 5842 <exit>
+  wait(&xstatus);
+    311a:	fdc40513          	addi	a0,s0,-36
+    311e:	00002097          	auipc	ra,0x2
+    3122:	72c080e7          	jalr	1836(ra) # 584a <wait>
+  exit(xstatus);
+    3126:	fdc42503          	lw	a0,-36(s0)
+    312a:	00002097          	auipc	ra,0x2
+    312e:	718080e7          	jalr	1816(ra) # 5842 <exit>
+
+0000000000003132 <dirtest>:
+{
+    3132:	1101                	addi	sp,sp,-32
+    3134:	ec06                	sd	ra,24(sp)
+    3136:	e822                	sd	s0,16(sp)
+    3138:	e426                	sd	s1,8(sp)
+    313a:	1000                	addi	s0,sp,32
+    313c:	84aa                	mv	s1,a0
+  if(mkdir("dir0") < 0){
+    313e:	00004517          	auipc	a0,0x4
+    3142:	eea50513          	addi	a0,a0,-278 # 7028 <malloc+0x1384>
+    3146:	00002097          	auipc	ra,0x2
+    314a:	764080e7          	jalr	1892(ra) # 58aa <mkdir>
+    314e:	04054563          	bltz	a0,3198 <dirtest+0x66>
+  if(chdir("dir0") < 0){
+    3152:	00004517          	auipc	a0,0x4
+    3156:	ed650513          	addi	a0,a0,-298 # 7028 <malloc+0x1384>
+    315a:	00002097          	auipc	ra,0x2
+    315e:	758080e7          	jalr	1880(ra) # 58b2 <chdir>
+    3162:	04054963          	bltz	a0,31b4 <dirtest+0x82>
+  if(chdir("..") < 0){
+    3166:	00004517          	auipc	a0,0x4
+    316a:	ee250513          	addi	a0,a0,-286 # 7048 <malloc+0x13a4>
+    316e:	00002097          	auipc	ra,0x2
+    3172:	744080e7          	jalr	1860(ra) # 58b2 <chdir>
+    3176:	04054d63          	bltz	a0,31d0 <dirtest+0x9e>
+  if(unlink("dir0") < 0){
+    317a:	00004517          	auipc	a0,0x4
+    317e:	eae50513          	addi	a0,a0,-338 # 7028 <malloc+0x1384>
+    3182:	00002097          	auipc	ra,0x2
+    3186:	710080e7          	jalr	1808(ra) # 5892 <unlink>
+    318a:	06054163          	bltz	a0,31ec <dirtest+0xba>
+}
+    318e:	60e2                	ld	ra,24(sp)
+    3190:	6442                	ld	s0,16(sp)
+    3192:	64a2                	ld	s1,8(sp)
+    3194:	6105                	addi	sp,sp,32
+    3196:	8082                	ret
+    printf("%s: mkdir failed\n", s);
+    3198:	85a6                	mv	a1,s1
+    319a:	00004517          	auipc	a0,0x4
+    319e:	dee50513          	addi	a0,a0,-530 # 6f88 <malloc+0x12e4>
+    31a2:	00003097          	auipc	ra,0x3
+    31a6:	a4a080e7          	jalr	-1462(ra) # 5bec <printf>
+    exit(1);
+    31aa:	4505                	li	a0,1
+    31ac:	00002097          	auipc	ra,0x2
+    31b0:	696080e7          	jalr	1686(ra) # 5842 <exit>
+    printf("%s: chdir dir0 failed\n", s);
+    31b4:	85a6                	mv	a1,s1
+    31b6:	00004517          	auipc	a0,0x4
+    31ba:	e7a50513          	addi	a0,a0,-390 # 7030 <malloc+0x138c>
+    31be:	00003097          	auipc	ra,0x3
+    31c2:	a2e080e7          	jalr	-1490(ra) # 5bec <printf>
+    exit(1);
+    31c6:	4505                	li	a0,1
+    31c8:	00002097          	auipc	ra,0x2
+    31cc:	67a080e7          	jalr	1658(ra) # 5842 <exit>
+    printf("%s: chdir .. failed\n", s);
+    31d0:	85a6                	mv	a1,s1
+    31d2:	00004517          	auipc	a0,0x4
+    31d6:	e7e50513          	addi	a0,a0,-386 # 7050 <malloc+0x13ac>
+    31da:	00003097          	auipc	ra,0x3
+    31de:	a12080e7          	jalr	-1518(ra) # 5bec <printf>
+    exit(1);
+    31e2:	4505                	li	a0,1
+    31e4:	00002097          	auipc	ra,0x2
+    31e8:	65e080e7          	jalr	1630(ra) # 5842 <exit>
+    printf("%s: unlink dir0 failed\n", s);
+    31ec:	85a6                	mv	a1,s1
+    31ee:	00004517          	auipc	a0,0x4
+    31f2:	e7a50513          	addi	a0,a0,-390 # 7068 <malloc+0x13c4>
+    31f6:	00003097          	auipc	ra,0x3
+    31fa:	9f6080e7          	jalr	-1546(ra) # 5bec <printf>
+    exit(1);
+    31fe:	4505                	li	a0,1
+    3200:	00002097          	auipc	ra,0x2
+    3204:	642080e7          	jalr	1602(ra) # 5842 <exit>
+
+0000000000003208 <subdir>:
+{
+    3208:	1101                	addi	sp,sp,-32
+    320a:	ec06                	sd	ra,24(sp)
+    320c:	e822                	sd	s0,16(sp)
+    320e:	e426                	sd	s1,8(sp)
+    3210:	e04a                	sd	s2,0(sp)
+    3212:	1000                	addi	s0,sp,32
+    3214:	892a                	mv	s2,a0
+  unlink("ff");
+    3216:	00004517          	auipc	a0,0x4
+    321a:	f9a50513          	addi	a0,a0,-102 # 71b0 <malloc+0x150c>
+    321e:	00002097          	auipc	ra,0x2
+    3222:	674080e7          	jalr	1652(ra) # 5892 <unlink>
+  if(mkdir("dd") != 0){
+    3226:	00004517          	auipc	a0,0x4
+    322a:	e5a50513          	addi	a0,a0,-422 # 7080 <malloc+0x13dc>
+    322e:	00002097          	auipc	ra,0x2
+    3232:	67c080e7          	jalr	1660(ra) # 58aa <mkdir>
+    3236:	38051663          	bnez	a0,35c2 <subdir+0x3ba>
+  fd = open("dd/ff", O_CREATE | O_RDWR);
+    323a:	20200593          	li	a1,514
+    323e:	00004517          	auipc	a0,0x4
+    3242:	e6250513          	addi	a0,a0,-414 # 70a0 <malloc+0x13fc>
+    3246:	00002097          	auipc	ra,0x2
+    324a:	63c080e7          	jalr	1596(ra) # 5882 <open>
+    324e:	84aa                	mv	s1,a0
+  if(fd < 0){
+    3250:	38054763          	bltz	a0,35de <subdir+0x3d6>
+  write(fd, "ff", 2);
+    3254:	4609                	li	a2,2
+    3256:	00004597          	auipc	a1,0x4
+    325a:	f5a58593          	addi	a1,a1,-166 # 71b0 <malloc+0x150c>
+    325e:	00002097          	auipc	ra,0x2
+    3262:	604080e7          	jalr	1540(ra) # 5862 <write>
+  close(fd);
+    3266:	8526                	mv	a0,s1
+    3268:	00002097          	auipc	ra,0x2
+    326c:	602080e7          	jalr	1538(ra) # 586a <close>
+  if(unlink("dd") >= 0){
+    3270:	00004517          	auipc	a0,0x4
+    3274:	e1050513          	addi	a0,a0,-496 # 7080 <malloc+0x13dc>
+    3278:	00002097          	auipc	ra,0x2
+    327c:	61a080e7          	jalr	1562(ra) # 5892 <unlink>
+    3280:	36055d63          	bgez	a0,35fa <subdir+0x3f2>
+  if(mkdir("/dd/dd") != 0){
+    3284:	00004517          	auipc	a0,0x4
+    3288:	e7450513          	addi	a0,a0,-396 # 70f8 <malloc+0x1454>
+    328c:	00002097          	auipc	ra,0x2
+    3290:	61e080e7          	jalr	1566(ra) # 58aa <mkdir>
+    3294:	38051163          	bnez	a0,3616 <subdir+0x40e>
+  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
+    3298:	20200593          	li	a1,514
+    329c:	00004517          	auipc	a0,0x4
+    32a0:	e8450513          	addi	a0,a0,-380 # 7120 <malloc+0x147c>
+    32a4:	00002097          	auipc	ra,0x2
+    32a8:	5de080e7          	jalr	1502(ra) # 5882 <open>
+    32ac:	84aa                	mv	s1,a0
+  if(fd < 0){
+    32ae:	38054263          	bltz	a0,3632 <subdir+0x42a>
+  write(fd, "FF", 2);
+    32b2:	4609                	li	a2,2
+    32b4:	00004597          	auipc	a1,0x4
+    32b8:	e9c58593          	addi	a1,a1,-356 # 7150 <malloc+0x14ac>
+    32bc:	00002097          	auipc	ra,0x2
+    32c0:	5a6080e7          	jalr	1446(ra) # 5862 <write>
+  close(fd);
+    32c4:	8526                	mv	a0,s1
+    32c6:	00002097          	auipc	ra,0x2
+    32ca:	5a4080e7          	jalr	1444(ra) # 586a <close>
+  fd = open("dd/dd/../ff", 0);
+    32ce:	4581                	li	a1,0
+    32d0:	00004517          	auipc	a0,0x4
+    32d4:	e8850513          	addi	a0,a0,-376 # 7158 <malloc+0x14b4>
+    32d8:	00002097          	auipc	ra,0x2
+    32dc:	5aa080e7          	jalr	1450(ra) # 5882 <open>
+    32e0:	84aa                	mv	s1,a0
+  if(fd < 0){
+    32e2:	36054663          	bltz	a0,364e <subdir+0x446>
+  cc = read(fd, buf, sizeof(buf));
+    32e6:	660d                	lui	a2,0x3
+    32e8:	00009597          	auipc	a1,0x9
+    32ec:	b2058593          	addi	a1,a1,-1248 # be08 <buf>
+    32f0:	00002097          	auipc	ra,0x2
+    32f4:	56a080e7          	jalr	1386(ra) # 585a <read>
+  if(cc != 2 || buf[0] != 'f'){
+    32f8:	4789                	li	a5,2
+    32fa:	36f51863          	bne	a0,a5,366a <subdir+0x462>
+    32fe:	00009717          	auipc	a4,0x9
+    3302:	b0a74703          	lbu	a4,-1270(a4) # be08 <buf>
+    3306:	06600793          	li	a5,102
+    330a:	36f71063          	bne	a4,a5,366a <subdir+0x462>
+  close(fd);
+    330e:	8526                	mv	a0,s1
+    3310:	00002097          	auipc	ra,0x2
+    3314:	55a080e7          	jalr	1370(ra) # 586a <close>
+  if(link("dd/dd/ff", "dd/dd/ffff") != 0){
+    3318:	00004597          	auipc	a1,0x4
+    331c:	e9058593          	addi	a1,a1,-368 # 71a8 <malloc+0x1504>
+    3320:	00004517          	auipc	a0,0x4
+    3324:	e0050513          	addi	a0,a0,-512 # 7120 <malloc+0x147c>
+    3328:	00002097          	auipc	ra,0x2
+    332c:	57a080e7          	jalr	1402(ra) # 58a2 <link>
+    3330:	34051b63          	bnez	a0,3686 <subdir+0x47e>
+  if(unlink("dd/dd/ff") != 0){
+    3334:	00004517          	auipc	a0,0x4
+    3338:	dec50513          	addi	a0,a0,-532 # 7120 <malloc+0x147c>
+    333c:	00002097          	auipc	ra,0x2
+    3340:	556080e7          	jalr	1366(ra) # 5892 <unlink>
+    3344:	34051f63          	bnez	a0,36a2 <subdir+0x49a>
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    3348:	4581                	li	a1,0
+    334a:	00004517          	auipc	a0,0x4
+    334e:	dd650513          	addi	a0,a0,-554 # 7120 <malloc+0x147c>
+    3352:	00002097          	auipc	ra,0x2
+    3356:	530080e7          	jalr	1328(ra) # 5882 <open>
+    335a:	36055263          	bgez	a0,36be <subdir+0x4b6>
+  if(chdir("dd") != 0){
+    335e:	00004517          	auipc	a0,0x4
+    3362:	d2250513          	addi	a0,a0,-734 # 7080 <malloc+0x13dc>
+    3366:	00002097          	auipc	ra,0x2
+    336a:	54c080e7          	jalr	1356(ra) # 58b2 <chdir>
+    336e:	36051663          	bnez	a0,36da <subdir+0x4d2>
+  if(chdir("dd/../../dd") != 0){
+    3372:	00004517          	auipc	a0,0x4
+    3376:	ece50513          	addi	a0,a0,-306 # 7240 <malloc+0x159c>
+    337a:	00002097          	auipc	ra,0x2
+    337e:	538080e7          	jalr	1336(ra) # 58b2 <chdir>
+    3382:	36051a63          	bnez	a0,36f6 <subdir+0x4ee>
+  if(chdir("dd/../../../dd") != 0){
+    3386:	00004517          	auipc	a0,0x4
+    338a:	eea50513          	addi	a0,a0,-278 # 7270 <malloc+0x15cc>
+    338e:	00002097          	auipc	ra,0x2
+    3392:	524080e7          	jalr	1316(ra) # 58b2 <chdir>
+    3396:	36051e63          	bnez	a0,3712 <subdir+0x50a>
+  if(chdir("./..") != 0){
+    339a:	00004517          	auipc	a0,0x4
+    339e:	f0650513          	addi	a0,a0,-250 # 72a0 <malloc+0x15fc>
+    33a2:	00002097          	auipc	ra,0x2
+    33a6:	510080e7          	jalr	1296(ra) # 58b2 <chdir>
+    33aa:	38051263          	bnez	a0,372e <subdir+0x526>
+  fd = open("dd/dd/ffff", 0);
+    33ae:	4581                	li	a1,0
+    33b0:	00004517          	auipc	a0,0x4
+    33b4:	df850513          	addi	a0,a0,-520 # 71a8 <malloc+0x1504>
+    33b8:	00002097          	auipc	ra,0x2
+    33bc:	4ca080e7          	jalr	1226(ra) # 5882 <open>
+    33c0:	84aa                	mv	s1,a0
+  if(fd < 0){
+    33c2:	38054463          	bltz	a0,374a <subdir+0x542>
+  if(read(fd, buf, sizeof(buf)) != 2){
+    33c6:	660d                	lui	a2,0x3
+    33c8:	00009597          	auipc	a1,0x9
+    33cc:	a4058593          	addi	a1,a1,-1472 # be08 <buf>
+    33d0:	00002097          	auipc	ra,0x2
+    33d4:	48a080e7          	jalr	1162(ra) # 585a <read>
+    33d8:	4789                	li	a5,2
+    33da:	38f51663          	bne	a0,a5,3766 <subdir+0x55e>
+  close(fd);
+    33de:	8526                	mv	a0,s1
+    33e0:	00002097          	auipc	ra,0x2
+    33e4:	48a080e7          	jalr	1162(ra) # 586a <close>
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    33e8:	4581                	li	a1,0
+    33ea:	00004517          	auipc	a0,0x4
+    33ee:	d3650513          	addi	a0,a0,-714 # 7120 <malloc+0x147c>
+    33f2:	00002097          	auipc	ra,0x2
+    33f6:	490080e7          	jalr	1168(ra) # 5882 <open>
+    33fa:	38055463          	bgez	a0,3782 <subdir+0x57a>
+  if(open("dd/ff/ff", O_CREATE|O_RDWR) >= 0){
+    33fe:	20200593          	li	a1,514
+    3402:	00004517          	auipc	a0,0x4
+    3406:	f2e50513          	addi	a0,a0,-210 # 7330 <malloc+0x168c>
+    340a:	00002097          	auipc	ra,0x2
+    340e:	478080e7          	jalr	1144(ra) # 5882 <open>
+    3412:	38055663          	bgez	a0,379e <subdir+0x596>
+  if(open("dd/xx/ff", O_CREATE|O_RDWR) >= 0){
+    3416:	20200593          	li	a1,514
+    341a:	00004517          	auipc	a0,0x4
+    341e:	f4650513          	addi	a0,a0,-186 # 7360 <malloc+0x16bc>
+    3422:	00002097          	auipc	ra,0x2
+    3426:	460080e7          	jalr	1120(ra) # 5882 <open>
+    342a:	38055863          	bgez	a0,37ba <subdir+0x5b2>
+  if(open("dd", O_CREATE) >= 0){
+    342e:	20000593          	li	a1,512
+    3432:	00004517          	auipc	a0,0x4
+    3436:	c4e50513          	addi	a0,a0,-946 # 7080 <malloc+0x13dc>
+    343a:	00002097          	auipc	ra,0x2
+    343e:	448080e7          	jalr	1096(ra) # 5882 <open>
+    3442:	38055a63          	bgez	a0,37d6 <subdir+0x5ce>
+  if(open("dd", O_RDWR) >= 0){
+    3446:	4589                	li	a1,2
+    3448:	00004517          	auipc	a0,0x4
+    344c:	c3850513          	addi	a0,a0,-968 # 7080 <malloc+0x13dc>
+    3450:	00002097          	auipc	ra,0x2
+    3454:	432080e7          	jalr	1074(ra) # 5882 <open>
+    3458:	38055d63          	bgez	a0,37f2 <subdir+0x5ea>
+  if(open("dd", O_WRONLY) >= 0){
+    345c:	4585                	li	a1,1
+    345e:	00004517          	auipc	a0,0x4
+    3462:	c2250513          	addi	a0,a0,-990 # 7080 <malloc+0x13dc>
+    3466:	00002097          	auipc	ra,0x2
+    346a:	41c080e7          	jalr	1052(ra) # 5882 <open>
+    346e:	3a055063          	bgez	a0,380e <subdir+0x606>
+  if(link("dd/ff/ff", "dd/dd/xx") == 0){
+    3472:	00004597          	auipc	a1,0x4
+    3476:	f7e58593          	addi	a1,a1,-130 # 73f0 <malloc+0x174c>
+    347a:	00004517          	auipc	a0,0x4
+    347e:	eb650513          	addi	a0,a0,-330 # 7330 <malloc+0x168c>
+    3482:	00002097          	auipc	ra,0x2
+    3486:	420080e7          	jalr	1056(ra) # 58a2 <link>
+    348a:	3a050063          	beqz	a0,382a <subdir+0x622>
+  if(link("dd/xx/ff", "dd/dd/xx") == 0){
+    348e:	00004597          	auipc	a1,0x4
+    3492:	f6258593          	addi	a1,a1,-158 # 73f0 <malloc+0x174c>
+    3496:	00004517          	auipc	a0,0x4
+    349a:	eca50513          	addi	a0,a0,-310 # 7360 <malloc+0x16bc>
+    349e:	00002097          	auipc	ra,0x2
+    34a2:	404080e7          	jalr	1028(ra) # 58a2 <link>
+    34a6:	3a050063          	beqz	a0,3846 <subdir+0x63e>
+  if(link("dd/ff", "dd/dd/ffff") == 0){
+    34aa:	00004597          	auipc	a1,0x4
+    34ae:	cfe58593          	addi	a1,a1,-770 # 71a8 <malloc+0x1504>
+    34b2:	00004517          	auipc	a0,0x4
+    34b6:	bee50513          	addi	a0,a0,-1042 # 70a0 <malloc+0x13fc>
+    34ba:	00002097          	auipc	ra,0x2
+    34be:	3e8080e7          	jalr	1000(ra) # 58a2 <link>
+    34c2:	3a050063          	beqz	a0,3862 <subdir+0x65a>
+  if(mkdir("dd/ff/ff") == 0){
+    34c6:	00004517          	auipc	a0,0x4
+    34ca:	e6a50513          	addi	a0,a0,-406 # 7330 <malloc+0x168c>
+    34ce:	00002097          	auipc	ra,0x2
+    34d2:	3dc080e7          	jalr	988(ra) # 58aa <mkdir>
+    34d6:	3a050463          	beqz	a0,387e <subdir+0x676>
+  if(mkdir("dd/xx/ff") == 0){
+    34da:	00004517          	auipc	a0,0x4
+    34de:	e8650513          	addi	a0,a0,-378 # 7360 <malloc+0x16bc>
+    34e2:	00002097          	auipc	ra,0x2
+    34e6:	3c8080e7          	jalr	968(ra) # 58aa <mkdir>
+    34ea:	3a050863          	beqz	a0,389a <subdir+0x692>
+  if(mkdir("dd/dd/ffff") == 0){
+    34ee:	00004517          	auipc	a0,0x4
+    34f2:	cba50513          	addi	a0,a0,-838 # 71a8 <malloc+0x1504>
+    34f6:	00002097          	auipc	ra,0x2
+    34fa:	3b4080e7          	jalr	948(ra) # 58aa <mkdir>
+    34fe:	3a050c63          	beqz	a0,38b6 <subdir+0x6ae>
+  if(unlink("dd/xx/ff") == 0){
+    3502:	00004517          	auipc	a0,0x4
+    3506:	e5e50513          	addi	a0,a0,-418 # 7360 <malloc+0x16bc>
+    350a:	00002097          	auipc	ra,0x2
+    350e:	388080e7          	jalr	904(ra) # 5892 <unlink>
+    3512:	3c050063          	beqz	a0,38d2 <subdir+0x6ca>
+  if(unlink("dd/ff/ff") == 0){
+    3516:	00004517          	auipc	a0,0x4
+    351a:	e1a50513          	addi	a0,a0,-486 # 7330 <malloc+0x168c>
+    351e:	00002097          	auipc	ra,0x2
+    3522:	374080e7          	jalr	884(ra) # 5892 <unlink>
+    3526:	3c050463          	beqz	a0,38ee <subdir+0x6e6>
+  if(chdir("dd/ff") == 0){
+    352a:	00004517          	auipc	a0,0x4
+    352e:	b7650513          	addi	a0,a0,-1162 # 70a0 <malloc+0x13fc>
+    3532:	00002097          	auipc	ra,0x2
+    3536:	380080e7          	jalr	896(ra) # 58b2 <chdir>
+    353a:	3c050863          	beqz	a0,390a <subdir+0x702>
+  if(chdir("dd/xx") == 0){
+    353e:	00004517          	auipc	a0,0x4
+    3542:	00250513          	addi	a0,a0,2 # 7540 <malloc+0x189c>
+    3546:	00002097          	auipc	ra,0x2
+    354a:	36c080e7          	jalr	876(ra) # 58b2 <chdir>
+    354e:	3c050c63          	beqz	a0,3926 <subdir+0x71e>
+  if(unlink("dd/dd/ffff") != 0){
+    3552:	00004517          	auipc	a0,0x4
+    3556:	c5650513          	addi	a0,a0,-938 # 71a8 <malloc+0x1504>
+    355a:	00002097          	auipc	ra,0x2
+    355e:	338080e7          	jalr	824(ra) # 5892 <unlink>
+    3562:	3e051063          	bnez	a0,3942 <subdir+0x73a>
+  if(unlink("dd/ff") != 0){
+    3566:	00004517          	auipc	a0,0x4
+    356a:	b3a50513          	addi	a0,a0,-1222 # 70a0 <malloc+0x13fc>
+    356e:	00002097          	auipc	ra,0x2
+    3572:	324080e7          	jalr	804(ra) # 5892 <unlink>
+    3576:	3e051463          	bnez	a0,395e <subdir+0x756>
+  if(unlink("dd") == 0){
+    357a:	00004517          	auipc	a0,0x4
+    357e:	b0650513          	addi	a0,a0,-1274 # 7080 <malloc+0x13dc>
+    3582:	00002097          	auipc	ra,0x2
+    3586:	310080e7          	jalr	784(ra) # 5892 <unlink>
+    358a:	3e050863          	beqz	a0,397a <subdir+0x772>
+  if(unlink("dd/dd") < 0){
+    358e:	00004517          	auipc	a0,0x4
+    3592:	02250513          	addi	a0,a0,34 # 75b0 <malloc+0x190c>
+    3596:	00002097          	auipc	ra,0x2
+    359a:	2fc080e7          	jalr	764(ra) # 5892 <unlink>
+    359e:	3e054c63          	bltz	a0,3996 <subdir+0x78e>
+  if(unlink("dd") < 0){
+    35a2:	00004517          	auipc	a0,0x4
+    35a6:	ade50513          	addi	a0,a0,-1314 # 7080 <malloc+0x13dc>
+    35aa:	00002097          	auipc	ra,0x2
+    35ae:	2e8080e7          	jalr	744(ra) # 5892 <unlink>
+    35b2:	40054063          	bltz	a0,39b2 <subdir+0x7aa>
+}
+    35b6:	60e2                	ld	ra,24(sp)
+    35b8:	6442                	ld	s0,16(sp)
+    35ba:	64a2                	ld	s1,8(sp)
+    35bc:	6902                	ld	s2,0(sp)
+    35be:	6105                	addi	sp,sp,32
+    35c0:	8082                	ret
+    printf("%s: mkdir dd failed\n", s);
+    35c2:	85ca                	mv	a1,s2
+    35c4:	00004517          	auipc	a0,0x4
+    35c8:	ac450513          	addi	a0,a0,-1340 # 7088 <malloc+0x13e4>
+    35cc:	00002097          	auipc	ra,0x2
+    35d0:	620080e7          	jalr	1568(ra) # 5bec <printf>
+    exit(1);
+    35d4:	4505                	li	a0,1
+    35d6:	00002097          	auipc	ra,0x2
+    35da:	26c080e7          	jalr	620(ra) # 5842 <exit>
+    printf("%s: create dd/ff failed\n", s);
+    35de:	85ca                	mv	a1,s2
+    35e0:	00004517          	auipc	a0,0x4
+    35e4:	ac850513          	addi	a0,a0,-1336 # 70a8 <malloc+0x1404>
+    35e8:	00002097          	auipc	ra,0x2
+    35ec:	604080e7          	jalr	1540(ra) # 5bec <printf>
+    exit(1);
+    35f0:	4505                	li	a0,1
+    35f2:	00002097          	auipc	ra,0x2
+    35f6:	250080e7          	jalr	592(ra) # 5842 <exit>
+    printf("%s: unlink dd (non-empty dir) succeeded!\n", s);
+    35fa:	85ca                	mv	a1,s2
+    35fc:	00004517          	auipc	a0,0x4
+    3600:	acc50513          	addi	a0,a0,-1332 # 70c8 <malloc+0x1424>
+    3604:	00002097          	auipc	ra,0x2
+    3608:	5e8080e7          	jalr	1512(ra) # 5bec <printf>
+    exit(1);
+    360c:	4505                	li	a0,1
+    360e:	00002097          	auipc	ra,0x2
+    3612:	234080e7          	jalr	564(ra) # 5842 <exit>
+    printf("subdir mkdir dd/dd failed\n", s);
+    3616:	85ca                	mv	a1,s2
+    3618:	00004517          	auipc	a0,0x4
+    361c:	ae850513          	addi	a0,a0,-1304 # 7100 <malloc+0x145c>
+    3620:	00002097          	auipc	ra,0x2
+    3624:	5cc080e7          	jalr	1484(ra) # 5bec <printf>
+    exit(1);
+    3628:	4505                	li	a0,1
+    362a:	00002097          	auipc	ra,0x2
+    362e:	218080e7          	jalr	536(ra) # 5842 <exit>
+    printf("%s: create dd/dd/ff failed\n", s);
+    3632:	85ca                	mv	a1,s2
+    3634:	00004517          	auipc	a0,0x4
+    3638:	afc50513          	addi	a0,a0,-1284 # 7130 <malloc+0x148c>
+    363c:	00002097          	auipc	ra,0x2
+    3640:	5b0080e7          	jalr	1456(ra) # 5bec <printf>
+    exit(1);
+    3644:	4505                	li	a0,1
+    3646:	00002097          	auipc	ra,0x2
+    364a:	1fc080e7          	jalr	508(ra) # 5842 <exit>
+    printf("%s: open dd/dd/../ff failed\n", s);
+    364e:	85ca                	mv	a1,s2
+    3650:	00004517          	auipc	a0,0x4
+    3654:	b1850513          	addi	a0,a0,-1256 # 7168 <malloc+0x14c4>
+    3658:	00002097          	auipc	ra,0x2
+    365c:	594080e7          	jalr	1428(ra) # 5bec <printf>
+    exit(1);
+    3660:	4505                	li	a0,1
+    3662:	00002097          	auipc	ra,0x2
+    3666:	1e0080e7          	jalr	480(ra) # 5842 <exit>
+    printf("%s: dd/dd/../ff wrong content\n", s);
+    366a:	85ca                	mv	a1,s2
+    366c:	00004517          	auipc	a0,0x4
+    3670:	b1c50513          	addi	a0,a0,-1252 # 7188 <malloc+0x14e4>
+    3674:	00002097          	auipc	ra,0x2
+    3678:	578080e7          	jalr	1400(ra) # 5bec <printf>
+    exit(1);
+    367c:	4505                	li	a0,1
+    367e:	00002097          	auipc	ra,0x2
+    3682:	1c4080e7          	jalr	452(ra) # 5842 <exit>
+    printf("link dd/dd/ff dd/dd/ffff failed\n", s);
+    3686:	85ca                	mv	a1,s2
+    3688:	00004517          	auipc	a0,0x4
+    368c:	b3050513          	addi	a0,a0,-1232 # 71b8 <malloc+0x1514>
+    3690:	00002097          	auipc	ra,0x2
+    3694:	55c080e7          	jalr	1372(ra) # 5bec <printf>
+    exit(1);
+    3698:	4505                	li	a0,1
+    369a:	00002097          	auipc	ra,0x2
+    369e:	1a8080e7          	jalr	424(ra) # 5842 <exit>
+    printf("%s: unlink dd/dd/ff failed\n", s);
+    36a2:	85ca                	mv	a1,s2
+    36a4:	00004517          	auipc	a0,0x4
+    36a8:	b3c50513          	addi	a0,a0,-1220 # 71e0 <malloc+0x153c>
+    36ac:	00002097          	auipc	ra,0x2
+    36b0:	540080e7          	jalr	1344(ra) # 5bec <printf>
+    exit(1);
+    36b4:	4505                	li	a0,1
+    36b6:	00002097          	auipc	ra,0x2
+    36ba:	18c080e7          	jalr	396(ra) # 5842 <exit>
+    printf("%s: open (unlinked) dd/dd/ff succeeded\n", s);
+    36be:	85ca                	mv	a1,s2
+    36c0:	00004517          	auipc	a0,0x4
+    36c4:	b4050513          	addi	a0,a0,-1216 # 7200 <malloc+0x155c>
+    36c8:	00002097          	auipc	ra,0x2
+    36cc:	524080e7          	jalr	1316(ra) # 5bec <printf>
+    exit(1);
+    36d0:	4505                	li	a0,1
+    36d2:	00002097          	auipc	ra,0x2
+    36d6:	170080e7          	jalr	368(ra) # 5842 <exit>
+    printf("%s: chdir dd failed\n", s);
+    36da:	85ca                	mv	a1,s2
+    36dc:	00004517          	auipc	a0,0x4
+    36e0:	b4c50513          	addi	a0,a0,-1204 # 7228 <malloc+0x1584>
+    36e4:	00002097          	auipc	ra,0x2
+    36e8:	508080e7          	jalr	1288(ra) # 5bec <printf>
+    exit(1);
+    36ec:	4505                	li	a0,1
+    36ee:	00002097          	auipc	ra,0x2
+    36f2:	154080e7          	jalr	340(ra) # 5842 <exit>
+    printf("%s: chdir dd/../../dd failed\n", s);
+    36f6:	85ca                	mv	a1,s2
+    36f8:	00004517          	auipc	a0,0x4
+    36fc:	b5850513          	addi	a0,a0,-1192 # 7250 <malloc+0x15ac>
+    3700:	00002097          	auipc	ra,0x2
+    3704:	4ec080e7          	jalr	1260(ra) # 5bec <printf>
+    exit(1);
+    3708:	4505                	li	a0,1
+    370a:	00002097          	auipc	ra,0x2
+    370e:	138080e7          	jalr	312(ra) # 5842 <exit>
+    printf("chdir dd/../../dd failed\n", s);
+    3712:	85ca                	mv	a1,s2
+    3714:	00004517          	auipc	a0,0x4
+    3718:	b6c50513          	addi	a0,a0,-1172 # 7280 <malloc+0x15dc>
+    371c:	00002097          	auipc	ra,0x2
+    3720:	4d0080e7          	jalr	1232(ra) # 5bec <printf>
+    exit(1);
+    3724:	4505                	li	a0,1
+    3726:	00002097          	auipc	ra,0x2
+    372a:	11c080e7          	jalr	284(ra) # 5842 <exit>
+    printf("%s: chdir ./.. failed\n", s);
+    372e:	85ca                	mv	a1,s2
+    3730:	00004517          	auipc	a0,0x4
+    3734:	b7850513          	addi	a0,a0,-1160 # 72a8 <malloc+0x1604>
+    3738:	00002097          	auipc	ra,0x2
+    373c:	4b4080e7          	jalr	1204(ra) # 5bec <printf>
+    exit(1);
+    3740:	4505                	li	a0,1
+    3742:	00002097          	auipc	ra,0x2
+    3746:	100080e7          	jalr	256(ra) # 5842 <exit>
+    printf("%s: open dd/dd/ffff failed\n", s);
+    374a:	85ca                	mv	a1,s2
+    374c:	00004517          	auipc	a0,0x4
+    3750:	b7450513          	addi	a0,a0,-1164 # 72c0 <malloc+0x161c>
+    3754:	00002097          	auipc	ra,0x2
+    3758:	498080e7          	jalr	1176(ra) # 5bec <printf>
+    exit(1);
+    375c:	4505                	li	a0,1
+    375e:	00002097          	auipc	ra,0x2
+    3762:	0e4080e7          	jalr	228(ra) # 5842 <exit>
+    printf("%s: read dd/dd/ffff wrong len\n", s);
+    3766:	85ca                	mv	a1,s2
+    3768:	00004517          	auipc	a0,0x4
+    376c:	b7850513          	addi	a0,a0,-1160 # 72e0 <malloc+0x163c>
+    3770:	00002097          	auipc	ra,0x2
+    3774:	47c080e7          	jalr	1148(ra) # 5bec <printf>
+    exit(1);
+    3778:	4505                	li	a0,1
+    377a:	00002097          	auipc	ra,0x2
+    377e:	0c8080e7          	jalr	200(ra) # 5842 <exit>
+    printf("%s: open (unlinked) dd/dd/ff succeeded!\n", s);
+    3782:	85ca                	mv	a1,s2
+    3784:	00004517          	auipc	a0,0x4
+    3788:	b7c50513          	addi	a0,a0,-1156 # 7300 <malloc+0x165c>
+    378c:	00002097          	auipc	ra,0x2
+    3790:	460080e7          	jalr	1120(ra) # 5bec <printf>
+    exit(1);
+    3794:	4505                	li	a0,1
+    3796:	00002097          	auipc	ra,0x2
+    379a:	0ac080e7          	jalr	172(ra) # 5842 <exit>
+    printf("%s: create dd/ff/ff succeeded!\n", s);
+    379e:	85ca                	mv	a1,s2
+    37a0:	00004517          	auipc	a0,0x4
+    37a4:	ba050513          	addi	a0,a0,-1120 # 7340 <malloc+0x169c>
+    37a8:	00002097          	auipc	ra,0x2
+    37ac:	444080e7          	jalr	1092(ra) # 5bec <printf>
+    exit(1);
+    37b0:	4505                	li	a0,1
+    37b2:	00002097          	auipc	ra,0x2
+    37b6:	090080e7          	jalr	144(ra) # 5842 <exit>
+    printf("%s: create dd/xx/ff succeeded!\n", s);
+    37ba:	85ca                	mv	a1,s2
+    37bc:	00004517          	auipc	a0,0x4
+    37c0:	bb450513          	addi	a0,a0,-1100 # 7370 <malloc+0x16cc>
+    37c4:	00002097          	auipc	ra,0x2
+    37c8:	428080e7          	jalr	1064(ra) # 5bec <printf>
+    exit(1);
+    37cc:	4505                	li	a0,1
+    37ce:	00002097          	auipc	ra,0x2
+    37d2:	074080e7          	jalr	116(ra) # 5842 <exit>
+    printf("%s: create dd succeeded!\n", s);
+    37d6:	85ca                	mv	a1,s2
+    37d8:	00004517          	auipc	a0,0x4
+    37dc:	bb850513          	addi	a0,a0,-1096 # 7390 <malloc+0x16ec>
+    37e0:	00002097          	auipc	ra,0x2
+    37e4:	40c080e7          	jalr	1036(ra) # 5bec <printf>
+    exit(1);
+    37e8:	4505                	li	a0,1
+    37ea:	00002097          	auipc	ra,0x2
+    37ee:	058080e7          	jalr	88(ra) # 5842 <exit>
+    printf("%s: open dd rdwr succeeded!\n", s);
+    37f2:	85ca                	mv	a1,s2
+    37f4:	00004517          	auipc	a0,0x4
+    37f8:	bbc50513          	addi	a0,a0,-1092 # 73b0 <malloc+0x170c>
+    37fc:	00002097          	auipc	ra,0x2
+    3800:	3f0080e7          	jalr	1008(ra) # 5bec <printf>
+    exit(1);
+    3804:	4505                	li	a0,1
+    3806:	00002097          	auipc	ra,0x2
+    380a:	03c080e7          	jalr	60(ra) # 5842 <exit>
+    printf("%s: open dd wronly succeeded!\n", s);
+    380e:	85ca                	mv	a1,s2
+    3810:	00004517          	auipc	a0,0x4
+    3814:	bc050513          	addi	a0,a0,-1088 # 73d0 <malloc+0x172c>
+    3818:	00002097          	auipc	ra,0x2
+    381c:	3d4080e7          	jalr	980(ra) # 5bec <printf>
+    exit(1);
+    3820:	4505                	li	a0,1
+    3822:	00002097          	auipc	ra,0x2
+    3826:	020080e7          	jalr	32(ra) # 5842 <exit>
+    printf("%s: link dd/ff/ff dd/dd/xx succeeded!\n", s);
+    382a:	85ca                	mv	a1,s2
+    382c:	00004517          	auipc	a0,0x4
+    3830:	bd450513          	addi	a0,a0,-1068 # 7400 <malloc+0x175c>
+    3834:	00002097          	auipc	ra,0x2
+    3838:	3b8080e7          	jalr	952(ra) # 5bec <printf>
+    exit(1);
+    383c:	4505                	li	a0,1
+    383e:	00002097          	auipc	ra,0x2
+    3842:	004080e7          	jalr	4(ra) # 5842 <exit>
+    printf("%s: link dd/xx/ff dd/dd/xx succeeded!\n", s);
+    3846:	85ca                	mv	a1,s2
+    3848:	00004517          	auipc	a0,0x4
+    384c:	be050513          	addi	a0,a0,-1056 # 7428 <malloc+0x1784>
+    3850:	00002097          	auipc	ra,0x2
+    3854:	39c080e7          	jalr	924(ra) # 5bec <printf>
+    exit(1);
+    3858:	4505                	li	a0,1
+    385a:	00002097          	auipc	ra,0x2
+    385e:	fe8080e7          	jalr	-24(ra) # 5842 <exit>
+    printf("%s: link dd/ff dd/dd/ffff succeeded!\n", s);
+    3862:	85ca                	mv	a1,s2
+    3864:	00004517          	auipc	a0,0x4
+    3868:	bec50513          	addi	a0,a0,-1044 # 7450 <malloc+0x17ac>
+    386c:	00002097          	auipc	ra,0x2
+    3870:	380080e7          	jalr	896(ra) # 5bec <printf>
+    exit(1);
+    3874:	4505                	li	a0,1
+    3876:	00002097          	auipc	ra,0x2
+    387a:	fcc080e7          	jalr	-52(ra) # 5842 <exit>
+    printf("%s: mkdir dd/ff/ff succeeded!\n", s);
+    387e:	85ca                	mv	a1,s2
+    3880:	00004517          	auipc	a0,0x4
+    3884:	bf850513          	addi	a0,a0,-1032 # 7478 <malloc+0x17d4>
+    3888:	00002097          	auipc	ra,0x2
+    388c:	364080e7          	jalr	868(ra) # 5bec <printf>
+    exit(1);
+    3890:	4505                	li	a0,1
+    3892:	00002097          	auipc	ra,0x2
+    3896:	fb0080e7          	jalr	-80(ra) # 5842 <exit>
+    printf("%s: mkdir dd/xx/ff succeeded!\n", s);
+    389a:	85ca                	mv	a1,s2
+    389c:	00004517          	auipc	a0,0x4
+    38a0:	bfc50513          	addi	a0,a0,-1028 # 7498 <malloc+0x17f4>
+    38a4:	00002097          	auipc	ra,0x2
+    38a8:	348080e7          	jalr	840(ra) # 5bec <printf>
+    exit(1);
+    38ac:	4505                	li	a0,1
+    38ae:	00002097          	auipc	ra,0x2
+    38b2:	f94080e7          	jalr	-108(ra) # 5842 <exit>
+    printf("%s: mkdir dd/dd/ffff succeeded!\n", s);
+    38b6:	85ca                	mv	a1,s2
+    38b8:	00004517          	auipc	a0,0x4
+    38bc:	c0050513          	addi	a0,a0,-1024 # 74b8 <malloc+0x1814>
+    38c0:	00002097          	auipc	ra,0x2
+    38c4:	32c080e7          	jalr	812(ra) # 5bec <printf>
+    exit(1);
+    38c8:	4505                	li	a0,1
+    38ca:	00002097          	auipc	ra,0x2
+    38ce:	f78080e7          	jalr	-136(ra) # 5842 <exit>
+    printf("%s: unlink dd/xx/ff succeeded!\n", s);
+    38d2:	85ca                	mv	a1,s2
+    38d4:	00004517          	auipc	a0,0x4
+    38d8:	c0c50513          	addi	a0,a0,-1012 # 74e0 <malloc+0x183c>
+    38dc:	00002097          	auipc	ra,0x2
+    38e0:	310080e7          	jalr	784(ra) # 5bec <printf>
+    exit(1);
+    38e4:	4505                	li	a0,1
+    38e6:	00002097          	auipc	ra,0x2
+    38ea:	f5c080e7          	jalr	-164(ra) # 5842 <exit>
+    printf("%s: unlink dd/ff/ff succeeded!\n", s);
+    38ee:	85ca                	mv	a1,s2
+    38f0:	00004517          	auipc	a0,0x4
+    38f4:	c1050513          	addi	a0,a0,-1008 # 7500 <malloc+0x185c>
+    38f8:	00002097          	auipc	ra,0x2
+    38fc:	2f4080e7          	jalr	756(ra) # 5bec <printf>
+    exit(1);
+    3900:	4505                	li	a0,1
+    3902:	00002097          	auipc	ra,0x2
+    3906:	f40080e7          	jalr	-192(ra) # 5842 <exit>
+    printf("%s: chdir dd/ff succeeded!\n", s);
+    390a:	85ca                	mv	a1,s2
+    390c:	00004517          	auipc	a0,0x4
+    3910:	c1450513          	addi	a0,a0,-1004 # 7520 <malloc+0x187c>
+    3914:	00002097          	auipc	ra,0x2
+    3918:	2d8080e7          	jalr	728(ra) # 5bec <printf>
+    exit(1);
+    391c:	4505                	li	a0,1
+    391e:	00002097          	auipc	ra,0x2
+    3922:	f24080e7          	jalr	-220(ra) # 5842 <exit>
+    printf("%s: chdir dd/xx succeeded!\n", s);
+    3926:	85ca                	mv	a1,s2
+    3928:	00004517          	auipc	a0,0x4
+    392c:	c2050513          	addi	a0,a0,-992 # 7548 <malloc+0x18a4>
+    3930:	00002097          	auipc	ra,0x2
+    3934:	2bc080e7          	jalr	700(ra) # 5bec <printf>
+    exit(1);
+    3938:	4505                	li	a0,1
+    393a:	00002097          	auipc	ra,0x2
+    393e:	f08080e7          	jalr	-248(ra) # 5842 <exit>
+    printf("%s: unlink dd/dd/ff failed\n", s);
+    3942:	85ca                	mv	a1,s2
+    3944:	00004517          	auipc	a0,0x4
+    3948:	89c50513          	addi	a0,a0,-1892 # 71e0 <malloc+0x153c>
+    394c:	00002097          	auipc	ra,0x2
+    3950:	2a0080e7          	jalr	672(ra) # 5bec <printf>
+    exit(1);
+    3954:	4505                	li	a0,1
+    3956:	00002097          	auipc	ra,0x2
+    395a:	eec080e7          	jalr	-276(ra) # 5842 <exit>
+    printf("%s: unlink dd/ff failed\n", s);
+    395e:	85ca                	mv	a1,s2
+    3960:	00004517          	auipc	a0,0x4
+    3964:	c0850513          	addi	a0,a0,-1016 # 7568 <malloc+0x18c4>
+    3968:	00002097          	auipc	ra,0x2
+    396c:	284080e7          	jalr	644(ra) # 5bec <printf>
+    exit(1);
+    3970:	4505                	li	a0,1
+    3972:	00002097          	auipc	ra,0x2
+    3976:	ed0080e7          	jalr	-304(ra) # 5842 <exit>
+    printf("%s: unlink non-empty dd succeeded!\n", s);
+    397a:	85ca                	mv	a1,s2
+    397c:	00004517          	auipc	a0,0x4
+    3980:	c0c50513          	addi	a0,a0,-1012 # 7588 <malloc+0x18e4>
+    3984:	00002097          	auipc	ra,0x2
+    3988:	268080e7          	jalr	616(ra) # 5bec <printf>
+    exit(1);
+    398c:	4505                	li	a0,1
+    398e:	00002097          	auipc	ra,0x2
+    3992:	eb4080e7          	jalr	-332(ra) # 5842 <exit>
+    printf("%s: unlink dd/dd failed\n", s);
+    3996:	85ca                	mv	a1,s2
+    3998:	00004517          	auipc	a0,0x4
+    399c:	c2050513          	addi	a0,a0,-992 # 75b8 <malloc+0x1914>
+    39a0:	00002097          	auipc	ra,0x2
+    39a4:	24c080e7          	jalr	588(ra) # 5bec <printf>
+    exit(1);
+    39a8:	4505                	li	a0,1
+    39aa:	00002097          	auipc	ra,0x2
+    39ae:	e98080e7          	jalr	-360(ra) # 5842 <exit>
+    printf("%s: unlink dd failed\n", s);
+    39b2:	85ca                	mv	a1,s2
+    39b4:	00004517          	auipc	a0,0x4
+    39b8:	c2450513          	addi	a0,a0,-988 # 75d8 <malloc+0x1934>
+    39bc:	00002097          	auipc	ra,0x2
+    39c0:	230080e7          	jalr	560(ra) # 5bec <printf>
+    exit(1);
+    39c4:	4505                	li	a0,1
+    39c6:	00002097          	auipc	ra,0x2
+    39ca:	e7c080e7          	jalr	-388(ra) # 5842 <exit>
+
+00000000000039ce <rmdot>:
+{
+    39ce:	1101                	addi	sp,sp,-32
+    39d0:	ec06                	sd	ra,24(sp)
+    39d2:	e822                	sd	s0,16(sp)
+    39d4:	e426                	sd	s1,8(sp)
+    39d6:	1000                	addi	s0,sp,32
+    39d8:	84aa                	mv	s1,a0
+  if(mkdir("dots") != 0){
+    39da:	00004517          	auipc	a0,0x4
+    39de:	c1650513          	addi	a0,a0,-1002 # 75f0 <malloc+0x194c>
+    39e2:	00002097          	auipc	ra,0x2
+    39e6:	ec8080e7          	jalr	-312(ra) # 58aa <mkdir>
+    39ea:	e549                	bnez	a0,3a74 <rmdot+0xa6>
+  if(chdir("dots") != 0){
+    39ec:	00004517          	auipc	a0,0x4
+    39f0:	c0450513          	addi	a0,a0,-1020 # 75f0 <malloc+0x194c>
+    39f4:	00002097          	auipc	ra,0x2
+    39f8:	ebe080e7          	jalr	-322(ra) # 58b2 <chdir>
+    39fc:	e951                	bnez	a0,3a90 <rmdot+0xc2>
+  if(unlink(".") == 0){
+    39fe:	00003517          	auipc	a0,0x3
+    3a02:	a8250513          	addi	a0,a0,-1406 # 6480 <malloc+0x7dc>
+    3a06:	00002097          	auipc	ra,0x2
+    3a0a:	e8c080e7          	jalr	-372(ra) # 5892 <unlink>
+    3a0e:	cd59                	beqz	a0,3aac <rmdot+0xde>
+  if(unlink("..") == 0){
+    3a10:	00003517          	auipc	a0,0x3
+    3a14:	63850513          	addi	a0,a0,1592 # 7048 <malloc+0x13a4>
+    3a18:	00002097          	auipc	ra,0x2
+    3a1c:	e7a080e7          	jalr	-390(ra) # 5892 <unlink>
+    3a20:	c545                	beqz	a0,3ac8 <rmdot+0xfa>
+  if(chdir("/") != 0){
+    3a22:	00003517          	auipc	a0,0x3
+    3a26:	5ce50513          	addi	a0,a0,1486 # 6ff0 <malloc+0x134c>
+    3a2a:	00002097          	auipc	ra,0x2
+    3a2e:	e88080e7          	jalr	-376(ra) # 58b2 <chdir>
+    3a32:	e94d                	bnez	a0,3ae4 <rmdot+0x116>
+  if(unlink("dots/.") == 0){
+    3a34:	00004517          	auipc	a0,0x4
+    3a38:	c2450513          	addi	a0,a0,-988 # 7658 <malloc+0x19b4>
+    3a3c:	00002097          	auipc	ra,0x2
+    3a40:	e56080e7          	jalr	-426(ra) # 5892 <unlink>
+    3a44:	cd55                	beqz	a0,3b00 <rmdot+0x132>
+  if(unlink("dots/..") == 0){
+    3a46:	00004517          	auipc	a0,0x4
+    3a4a:	c3a50513          	addi	a0,a0,-966 # 7680 <malloc+0x19dc>
+    3a4e:	00002097          	auipc	ra,0x2
+    3a52:	e44080e7          	jalr	-444(ra) # 5892 <unlink>
+    3a56:	c179                	beqz	a0,3b1c <rmdot+0x14e>
+  if(unlink("dots") != 0){
+    3a58:	00004517          	auipc	a0,0x4
+    3a5c:	b9850513          	addi	a0,a0,-1128 # 75f0 <malloc+0x194c>
+    3a60:	00002097          	auipc	ra,0x2
+    3a64:	e32080e7          	jalr	-462(ra) # 5892 <unlink>
+    3a68:	e961                	bnez	a0,3b38 <rmdot+0x16a>
+}
+    3a6a:	60e2                	ld	ra,24(sp)
+    3a6c:	6442                	ld	s0,16(sp)
+    3a6e:	64a2                	ld	s1,8(sp)
+    3a70:	6105                	addi	sp,sp,32
+    3a72:	8082                	ret
+    printf("%s: mkdir dots failed\n", s);
+    3a74:	85a6                	mv	a1,s1
+    3a76:	00004517          	auipc	a0,0x4
+    3a7a:	b8250513          	addi	a0,a0,-1150 # 75f8 <malloc+0x1954>
+    3a7e:	00002097          	auipc	ra,0x2
+    3a82:	16e080e7          	jalr	366(ra) # 5bec <printf>
+    exit(1);
+    3a86:	4505                	li	a0,1
+    3a88:	00002097          	auipc	ra,0x2
+    3a8c:	dba080e7          	jalr	-582(ra) # 5842 <exit>
+    printf("%s: chdir dots failed\n", s);
+    3a90:	85a6                	mv	a1,s1
+    3a92:	00004517          	auipc	a0,0x4
+    3a96:	b7e50513          	addi	a0,a0,-1154 # 7610 <malloc+0x196c>
+    3a9a:	00002097          	auipc	ra,0x2
+    3a9e:	152080e7          	jalr	338(ra) # 5bec <printf>
+    exit(1);
+    3aa2:	4505                	li	a0,1
+    3aa4:	00002097          	auipc	ra,0x2
+    3aa8:	d9e080e7          	jalr	-610(ra) # 5842 <exit>
+    printf("%s: rm . worked!\n", s);
+    3aac:	85a6                	mv	a1,s1
+    3aae:	00004517          	auipc	a0,0x4
+    3ab2:	b7a50513          	addi	a0,a0,-1158 # 7628 <malloc+0x1984>
+    3ab6:	00002097          	auipc	ra,0x2
+    3aba:	136080e7          	jalr	310(ra) # 5bec <printf>
+    exit(1);
+    3abe:	4505                	li	a0,1
+    3ac0:	00002097          	auipc	ra,0x2
+    3ac4:	d82080e7          	jalr	-638(ra) # 5842 <exit>
+    printf("%s: rm .. worked!\n", s);
+    3ac8:	85a6                	mv	a1,s1
+    3aca:	00004517          	auipc	a0,0x4
+    3ace:	b7650513          	addi	a0,a0,-1162 # 7640 <malloc+0x199c>
+    3ad2:	00002097          	auipc	ra,0x2
+    3ad6:	11a080e7          	jalr	282(ra) # 5bec <printf>
+    exit(1);
+    3ada:	4505                	li	a0,1
+    3adc:	00002097          	auipc	ra,0x2
+    3ae0:	d66080e7          	jalr	-666(ra) # 5842 <exit>
+    printf("%s: chdir / failed\n", s);
+    3ae4:	85a6                	mv	a1,s1
+    3ae6:	00003517          	auipc	a0,0x3
+    3aea:	51250513          	addi	a0,a0,1298 # 6ff8 <malloc+0x1354>
+    3aee:	00002097          	auipc	ra,0x2
+    3af2:	0fe080e7          	jalr	254(ra) # 5bec <printf>
+    exit(1);
+    3af6:	4505                	li	a0,1
+    3af8:	00002097          	auipc	ra,0x2
+    3afc:	d4a080e7          	jalr	-694(ra) # 5842 <exit>
+    printf("%s: unlink dots/. worked!\n", s);
+    3b00:	85a6                	mv	a1,s1
+    3b02:	00004517          	auipc	a0,0x4
+    3b06:	b5e50513          	addi	a0,a0,-1186 # 7660 <malloc+0x19bc>
+    3b0a:	00002097          	auipc	ra,0x2
+    3b0e:	0e2080e7          	jalr	226(ra) # 5bec <printf>
+    exit(1);
+    3b12:	4505                	li	a0,1
+    3b14:	00002097          	auipc	ra,0x2
+    3b18:	d2e080e7          	jalr	-722(ra) # 5842 <exit>
+    printf("%s: unlink dots/.. worked!\n", s);
+    3b1c:	85a6                	mv	a1,s1
+    3b1e:	00004517          	auipc	a0,0x4
+    3b22:	b6a50513          	addi	a0,a0,-1174 # 7688 <malloc+0x19e4>
+    3b26:	00002097          	auipc	ra,0x2
+    3b2a:	0c6080e7          	jalr	198(ra) # 5bec <printf>
+    exit(1);
+    3b2e:	4505                	li	a0,1
+    3b30:	00002097          	auipc	ra,0x2
+    3b34:	d12080e7          	jalr	-750(ra) # 5842 <exit>
+    printf("%s: unlink dots failed!\n", s);
+    3b38:	85a6                	mv	a1,s1
+    3b3a:	00004517          	auipc	a0,0x4
+    3b3e:	b6e50513          	addi	a0,a0,-1170 # 76a8 <malloc+0x1a04>
+    3b42:	00002097          	auipc	ra,0x2
+    3b46:	0aa080e7          	jalr	170(ra) # 5bec <printf>
+    exit(1);
+    3b4a:	4505                	li	a0,1
+    3b4c:	00002097          	auipc	ra,0x2
+    3b50:	cf6080e7          	jalr	-778(ra) # 5842 <exit>
+
+0000000000003b54 <dirfile>:
+{
+    3b54:	1101                	addi	sp,sp,-32
+    3b56:	ec06                	sd	ra,24(sp)
+    3b58:	e822                	sd	s0,16(sp)
+    3b5a:	e426                	sd	s1,8(sp)
+    3b5c:	e04a                	sd	s2,0(sp)
+    3b5e:	1000                	addi	s0,sp,32
+    3b60:	892a                	mv	s2,a0
+  fd = open("dirfile", O_CREATE);
+    3b62:	20000593          	li	a1,512
+    3b66:	00004517          	auipc	a0,0x4
+    3b6a:	b6250513          	addi	a0,a0,-1182 # 76c8 <malloc+0x1a24>
+    3b6e:	00002097          	auipc	ra,0x2
+    3b72:	d14080e7          	jalr	-748(ra) # 5882 <open>
+  if(fd < 0){
+    3b76:	0e054d63          	bltz	a0,3c70 <dirfile+0x11c>
+  close(fd);
+    3b7a:	00002097          	auipc	ra,0x2
+    3b7e:	cf0080e7          	jalr	-784(ra) # 586a <close>
+  if(chdir("dirfile") == 0){
+    3b82:	00004517          	auipc	a0,0x4
+    3b86:	b4650513          	addi	a0,a0,-1210 # 76c8 <malloc+0x1a24>
+    3b8a:	00002097          	auipc	ra,0x2
+    3b8e:	d28080e7          	jalr	-728(ra) # 58b2 <chdir>
+    3b92:	cd6d                	beqz	a0,3c8c <dirfile+0x138>
+  fd = open("dirfile/xx", 0);
+    3b94:	4581                	li	a1,0
+    3b96:	00004517          	auipc	a0,0x4
+    3b9a:	b7a50513          	addi	a0,a0,-1158 # 7710 <malloc+0x1a6c>
+    3b9e:	00002097          	auipc	ra,0x2
+    3ba2:	ce4080e7          	jalr	-796(ra) # 5882 <open>
+  if(fd >= 0){
+    3ba6:	10055163          	bgez	a0,3ca8 <dirfile+0x154>
+  fd = open("dirfile/xx", O_CREATE);
+    3baa:	20000593          	li	a1,512
+    3bae:	00004517          	auipc	a0,0x4
+    3bb2:	b6250513          	addi	a0,a0,-1182 # 7710 <malloc+0x1a6c>
+    3bb6:	00002097          	auipc	ra,0x2
+    3bba:	ccc080e7          	jalr	-820(ra) # 5882 <open>
+  if(fd >= 0){
+    3bbe:	10055363          	bgez	a0,3cc4 <dirfile+0x170>
+  if(mkdir("dirfile/xx") == 0){
+    3bc2:	00004517          	auipc	a0,0x4
+    3bc6:	b4e50513          	addi	a0,a0,-1202 # 7710 <malloc+0x1a6c>
+    3bca:	00002097          	auipc	ra,0x2
+    3bce:	ce0080e7          	jalr	-800(ra) # 58aa <mkdir>
+    3bd2:	10050763          	beqz	a0,3ce0 <dirfile+0x18c>
+  if(unlink("dirfile/xx") == 0){
+    3bd6:	00004517          	auipc	a0,0x4
+    3bda:	b3a50513          	addi	a0,a0,-1222 # 7710 <malloc+0x1a6c>
+    3bde:	00002097          	auipc	ra,0x2
+    3be2:	cb4080e7          	jalr	-844(ra) # 5892 <unlink>
+    3be6:	10050b63          	beqz	a0,3cfc <dirfile+0x1a8>
+  if(link("README", "dirfile/xx") == 0){
+    3bea:	00004597          	auipc	a1,0x4
+    3bee:	b2658593          	addi	a1,a1,-1242 # 7710 <malloc+0x1a6c>
+    3bf2:	00002517          	auipc	a0,0x2
+    3bf6:	37e50513          	addi	a0,a0,894 # 5f70 <malloc+0x2cc>
+    3bfa:	00002097          	auipc	ra,0x2
+    3bfe:	ca8080e7          	jalr	-856(ra) # 58a2 <link>
+    3c02:	10050b63          	beqz	a0,3d18 <dirfile+0x1c4>
+  if(unlink("dirfile") != 0){
+    3c06:	00004517          	auipc	a0,0x4
+    3c0a:	ac250513          	addi	a0,a0,-1342 # 76c8 <malloc+0x1a24>
+    3c0e:	00002097          	auipc	ra,0x2
+    3c12:	c84080e7          	jalr	-892(ra) # 5892 <unlink>
+    3c16:	10051f63          	bnez	a0,3d34 <dirfile+0x1e0>
+  fd = open(".", O_RDWR);
+    3c1a:	4589                	li	a1,2
+    3c1c:	00003517          	auipc	a0,0x3
+    3c20:	86450513          	addi	a0,a0,-1948 # 6480 <malloc+0x7dc>
+    3c24:	00002097          	auipc	ra,0x2
+    3c28:	c5e080e7          	jalr	-930(ra) # 5882 <open>
+  if(fd >= 0){
+    3c2c:	12055263          	bgez	a0,3d50 <dirfile+0x1fc>
+  fd = open(".", 0);
+    3c30:	4581                	li	a1,0
+    3c32:	00003517          	auipc	a0,0x3
+    3c36:	84e50513          	addi	a0,a0,-1970 # 6480 <malloc+0x7dc>
+    3c3a:	00002097          	auipc	ra,0x2
+    3c3e:	c48080e7          	jalr	-952(ra) # 5882 <open>
+    3c42:	84aa                	mv	s1,a0
+  if(write(fd, "x", 1) > 0){
+    3c44:	4605                	li	a2,1
+    3c46:	00002597          	auipc	a1,0x2
+    3c4a:	1f258593          	addi	a1,a1,498 # 5e38 <malloc+0x194>
+    3c4e:	00002097          	auipc	ra,0x2
+    3c52:	c14080e7          	jalr	-1004(ra) # 5862 <write>
+    3c56:	10a04b63          	bgtz	a0,3d6c <dirfile+0x218>
+  close(fd);
+    3c5a:	8526                	mv	a0,s1
+    3c5c:	00002097          	auipc	ra,0x2
+    3c60:	c0e080e7          	jalr	-1010(ra) # 586a <close>
+}
+    3c64:	60e2                	ld	ra,24(sp)
+    3c66:	6442                	ld	s0,16(sp)
+    3c68:	64a2                	ld	s1,8(sp)
+    3c6a:	6902                	ld	s2,0(sp)
+    3c6c:	6105                	addi	sp,sp,32
+    3c6e:	8082                	ret
+    printf("%s: create dirfile failed\n", s);
+    3c70:	85ca                	mv	a1,s2
+    3c72:	00004517          	auipc	a0,0x4
+    3c76:	a5e50513          	addi	a0,a0,-1442 # 76d0 <malloc+0x1a2c>
+    3c7a:	00002097          	auipc	ra,0x2
+    3c7e:	f72080e7          	jalr	-142(ra) # 5bec <printf>
+    exit(1);
+    3c82:	4505                	li	a0,1
+    3c84:	00002097          	auipc	ra,0x2
+    3c88:	bbe080e7          	jalr	-1090(ra) # 5842 <exit>
+    printf("%s: chdir dirfile succeeded!\n", s);
+    3c8c:	85ca                	mv	a1,s2
+    3c8e:	00004517          	auipc	a0,0x4
+    3c92:	a6250513          	addi	a0,a0,-1438 # 76f0 <malloc+0x1a4c>
+    3c96:	00002097          	auipc	ra,0x2
+    3c9a:	f56080e7          	jalr	-170(ra) # 5bec <printf>
+    exit(1);
+    3c9e:	4505                	li	a0,1
+    3ca0:	00002097          	auipc	ra,0x2
+    3ca4:	ba2080e7          	jalr	-1118(ra) # 5842 <exit>
+    printf("%s: create dirfile/xx succeeded!\n", s);
+    3ca8:	85ca                	mv	a1,s2
+    3caa:	00004517          	auipc	a0,0x4
+    3cae:	a7650513          	addi	a0,a0,-1418 # 7720 <malloc+0x1a7c>
+    3cb2:	00002097          	auipc	ra,0x2
+    3cb6:	f3a080e7          	jalr	-198(ra) # 5bec <printf>
+    exit(1);
+    3cba:	4505                	li	a0,1
+    3cbc:	00002097          	auipc	ra,0x2
+    3cc0:	b86080e7          	jalr	-1146(ra) # 5842 <exit>
+    printf("%s: create dirfile/xx succeeded!\n", s);
+    3cc4:	85ca                	mv	a1,s2
+    3cc6:	00004517          	auipc	a0,0x4
+    3cca:	a5a50513          	addi	a0,a0,-1446 # 7720 <malloc+0x1a7c>
+    3cce:	00002097          	auipc	ra,0x2
+    3cd2:	f1e080e7          	jalr	-226(ra) # 5bec <printf>
+    exit(1);
+    3cd6:	4505                	li	a0,1
+    3cd8:	00002097          	auipc	ra,0x2
+    3cdc:	b6a080e7          	jalr	-1174(ra) # 5842 <exit>
+    printf("%s: mkdir dirfile/xx succeeded!\n", s);
+    3ce0:	85ca                	mv	a1,s2
+    3ce2:	00004517          	auipc	a0,0x4
+    3ce6:	a6650513          	addi	a0,a0,-1434 # 7748 <malloc+0x1aa4>
+    3cea:	00002097          	auipc	ra,0x2
+    3cee:	f02080e7          	jalr	-254(ra) # 5bec <printf>
+    exit(1);
+    3cf2:	4505                	li	a0,1
+    3cf4:	00002097          	auipc	ra,0x2
+    3cf8:	b4e080e7          	jalr	-1202(ra) # 5842 <exit>
+    printf("%s: unlink dirfile/xx succeeded!\n", s);
+    3cfc:	85ca                	mv	a1,s2
+    3cfe:	00004517          	auipc	a0,0x4
+    3d02:	a7250513          	addi	a0,a0,-1422 # 7770 <malloc+0x1acc>
+    3d06:	00002097          	auipc	ra,0x2
+    3d0a:	ee6080e7          	jalr	-282(ra) # 5bec <printf>
+    exit(1);
+    3d0e:	4505                	li	a0,1
+    3d10:	00002097          	auipc	ra,0x2
+    3d14:	b32080e7          	jalr	-1230(ra) # 5842 <exit>
+    printf("%s: link to dirfile/xx succeeded!\n", s);
+    3d18:	85ca                	mv	a1,s2
+    3d1a:	00004517          	auipc	a0,0x4
+    3d1e:	a7e50513          	addi	a0,a0,-1410 # 7798 <malloc+0x1af4>
+    3d22:	00002097          	auipc	ra,0x2
+    3d26:	eca080e7          	jalr	-310(ra) # 5bec <printf>
+    exit(1);
+    3d2a:	4505                	li	a0,1
+    3d2c:	00002097          	auipc	ra,0x2
+    3d30:	b16080e7          	jalr	-1258(ra) # 5842 <exit>
+    printf("%s: unlink dirfile failed!\n", s);
+    3d34:	85ca                	mv	a1,s2
+    3d36:	00004517          	auipc	a0,0x4
+    3d3a:	a8a50513          	addi	a0,a0,-1398 # 77c0 <malloc+0x1b1c>
+    3d3e:	00002097          	auipc	ra,0x2
+    3d42:	eae080e7          	jalr	-338(ra) # 5bec <printf>
+    exit(1);
+    3d46:	4505                	li	a0,1
+    3d48:	00002097          	auipc	ra,0x2
+    3d4c:	afa080e7          	jalr	-1286(ra) # 5842 <exit>
+    printf("%s: open . for writing succeeded!\n", s);
+    3d50:	85ca                	mv	a1,s2
+    3d52:	00004517          	auipc	a0,0x4
+    3d56:	a8e50513          	addi	a0,a0,-1394 # 77e0 <malloc+0x1b3c>
+    3d5a:	00002097          	auipc	ra,0x2
+    3d5e:	e92080e7          	jalr	-366(ra) # 5bec <printf>
+    exit(1);
+    3d62:	4505                	li	a0,1
+    3d64:	00002097          	auipc	ra,0x2
+    3d68:	ade080e7          	jalr	-1314(ra) # 5842 <exit>
+    printf("%s: write . succeeded!\n", s);
+    3d6c:	85ca                	mv	a1,s2
+    3d6e:	00004517          	auipc	a0,0x4
+    3d72:	a9a50513          	addi	a0,a0,-1382 # 7808 <malloc+0x1b64>
+    3d76:	00002097          	auipc	ra,0x2
+    3d7a:	e76080e7          	jalr	-394(ra) # 5bec <printf>
+    exit(1);
+    3d7e:	4505                	li	a0,1
+    3d80:	00002097          	auipc	ra,0x2
+    3d84:	ac2080e7          	jalr	-1342(ra) # 5842 <exit>
+
+0000000000003d88 <iref>:
+{
+    3d88:	7139                	addi	sp,sp,-64
+    3d8a:	fc06                	sd	ra,56(sp)
+    3d8c:	f822                	sd	s0,48(sp)
+    3d8e:	f426                	sd	s1,40(sp)
+    3d90:	f04a                	sd	s2,32(sp)
+    3d92:	ec4e                	sd	s3,24(sp)
+    3d94:	e852                	sd	s4,16(sp)
+    3d96:	e456                	sd	s5,8(sp)
+    3d98:	e05a                	sd	s6,0(sp)
+    3d9a:	0080                	addi	s0,sp,64
+    3d9c:	8b2a                	mv	s6,a0
+    3d9e:	03300913          	li	s2,51
+    if(mkdir("irefd") != 0){
+    3da2:	00004a17          	auipc	s4,0x4
+    3da6:	a7ea0a13          	addi	s4,s4,-1410 # 7820 <malloc+0x1b7c>
+    mkdir("");
+    3daa:	00003497          	auipc	s1,0x3
+    3dae:	57e48493          	addi	s1,s1,1406 # 7328 <malloc+0x1684>
+    link("README", "");
+    3db2:	00002a97          	auipc	s5,0x2
+    3db6:	1bea8a93          	addi	s5,s5,446 # 5f70 <malloc+0x2cc>
+    fd = open("xx", O_CREATE);
+    3dba:	00004997          	auipc	s3,0x4
+    3dbe:	95e98993          	addi	s3,s3,-1698 # 7718 <malloc+0x1a74>
+    3dc2:	a891                	j	3e16 <iref+0x8e>
+      printf("%s: mkdir irefd failed\n", s);
+    3dc4:	85da                	mv	a1,s6
+    3dc6:	00004517          	auipc	a0,0x4
+    3dca:	a6250513          	addi	a0,a0,-1438 # 7828 <malloc+0x1b84>
+    3dce:	00002097          	auipc	ra,0x2
+    3dd2:	e1e080e7          	jalr	-482(ra) # 5bec <printf>
+      exit(1);
+    3dd6:	4505                	li	a0,1
+    3dd8:	00002097          	auipc	ra,0x2
+    3ddc:	a6a080e7          	jalr	-1430(ra) # 5842 <exit>
+      printf("%s: chdir irefd failed\n", s);
+    3de0:	85da                	mv	a1,s6
+    3de2:	00004517          	auipc	a0,0x4
+    3de6:	a5e50513          	addi	a0,a0,-1442 # 7840 <malloc+0x1b9c>
+    3dea:	00002097          	auipc	ra,0x2
+    3dee:	e02080e7          	jalr	-510(ra) # 5bec <printf>
+      exit(1);
+    3df2:	4505                	li	a0,1
+    3df4:	00002097          	auipc	ra,0x2
+    3df8:	a4e080e7          	jalr	-1458(ra) # 5842 <exit>
+      close(fd);
+    3dfc:	00002097          	auipc	ra,0x2
+    3e00:	a6e080e7          	jalr	-1426(ra) # 586a <close>
+    3e04:	a889                	j	3e56 <iref+0xce>
+    unlink("xx");
+    3e06:	854e                	mv	a0,s3
+    3e08:	00002097          	auipc	ra,0x2
+    3e0c:	a8a080e7          	jalr	-1398(ra) # 5892 <unlink>
+  for(i = 0; i < NINODE + 1; i++){
+    3e10:	397d                	addiw	s2,s2,-1
+    3e12:	06090063          	beqz	s2,3e72 <iref+0xea>
+    if(mkdir("irefd") != 0){
+    3e16:	8552                	mv	a0,s4
+    3e18:	00002097          	auipc	ra,0x2
+    3e1c:	a92080e7          	jalr	-1390(ra) # 58aa <mkdir>
+    3e20:	f155                	bnez	a0,3dc4 <iref+0x3c>
+    if(chdir("irefd") != 0){
+    3e22:	8552                	mv	a0,s4
+    3e24:	00002097          	auipc	ra,0x2
+    3e28:	a8e080e7          	jalr	-1394(ra) # 58b2 <chdir>
+    3e2c:	f955                	bnez	a0,3de0 <iref+0x58>
+    mkdir("");
+    3e2e:	8526                	mv	a0,s1
+    3e30:	00002097          	auipc	ra,0x2
+    3e34:	a7a080e7          	jalr	-1414(ra) # 58aa <mkdir>
+    link("README", "");
+    3e38:	85a6                	mv	a1,s1
+    3e3a:	8556                	mv	a0,s5
+    3e3c:	00002097          	auipc	ra,0x2
+    3e40:	a66080e7          	jalr	-1434(ra) # 58a2 <link>
+    fd = open("", O_CREATE);
+    3e44:	20000593          	li	a1,512
+    3e48:	8526                	mv	a0,s1
+    3e4a:	00002097          	auipc	ra,0x2
+    3e4e:	a38080e7          	jalr	-1480(ra) # 5882 <open>
+    if(fd >= 0)
+    3e52:	fa0555e3          	bgez	a0,3dfc <iref+0x74>
+    fd = open("xx", O_CREATE);
+    3e56:	20000593          	li	a1,512
+    3e5a:	854e                	mv	a0,s3
+    3e5c:	00002097          	auipc	ra,0x2
+    3e60:	a26080e7          	jalr	-1498(ra) # 5882 <open>
+    if(fd >= 0)
+    3e64:	fa0541e3          	bltz	a0,3e06 <iref+0x7e>
+      close(fd);
+    3e68:	00002097          	auipc	ra,0x2
+    3e6c:	a02080e7          	jalr	-1534(ra) # 586a <close>
+    3e70:	bf59                	j	3e06 <iref+0x7e>
+    3e72:	03300493          	li	s1,51
+    chdir("..");
+    3e76:	00003997          	auipc	s3,0x3
+    3e7a:	1d298993          	addi	s3,s3,466 # 7048 <malloc+0x13a4>
+    unlink("irefd");
+    3e7e:	00004917          	auipc	s2,0x4
+    3e82:	9a290913          	addi	s2,s2,-1630 # 7820 <malloc+0x1b7c>
+    chdir("..");
+    3e86:	854e                	mv	a0,s3
+    3e88:	00002097          	auipc	ra,0x2
+    3e8c:	a2a080e7          	jalr	-1494(ra) # 58b2 <chdir>
+    unlink("irefd");
+    3e90:	854a                	mv	a0,s2
+    3e92:	00002097          	auipc	ra,0x2
+    3e96:	a00080e7          	jalr	-1536(ra) # 5892 <unlink>
+  for(i = 0; i < NINODE + 1; i++){
+    3e9a:	34fd                	addiw	s1,s1,-1
+    3e9c:	f4ed                	bnez	s1,3e86 <iref+0xfe>
+  chdir("/");
+    3e9e:	00003517          	auipc	a0,0x3
+    3ea2:	15250513          	addi	a0,a0,338 # 6ff0 <malloc+0x134c>
+    3ea6:	00002097          	auipc	ra,0x2
+    3eaa:	a0c080e7          	jalr	-1524(ra) # 58b2 <chdir>
+}
+    3eae:	70e2                	ld	ra,56(sp)
+    3eb0:	7442                	ld	s0,48(sp)
+    3eb2:	74a2                	ld	s1,40(sp)
+    3eb4:	7902                	ld	s2,32(sp)
+    3eb6:	69e2                	ld	s3,24(sp)
+    3eb8:	6a42                	ld	s4,16(sp)
+    3eba:	6aa2                	ld	s5,8(sp)
+    3ebc:	6b02                	ld	s6,0(sp)
+    3ebe:	6121                	addi	sp,sp,64
+    3ec0:	8082                	ret
+
+0000000000003ec2 <openiputtest>:
+{
+    3ec2:	7179                	addi	sp,sp,-48
+    3ec4:	f406                	sd	ra,40(sp)
+    3ec6:	f022                	sd	s0,32(sp)
+    3ec8:	ec26                	sd	s1,24(sp)
+    3eca:	1800                	addi	s0,sp,48
+    3ecc:	84aa                	mv	s1,a0
+  if(mkdir("oidir") < 0){
+    3ece:	00004517          	auipc	a0,0x4
+    3ed2:	98a50513          	addi	a0,a0,-1654 # 7858 <malloc+0x1bb4>
+    3ed6:	00002097          	auipc	ra,0x2
+    3eda:	9d4080e7          	jalr	-1580(ra) # 58aa <mkdir>
+    3ede:	04054263          	bltz	a0,3f22 <openiputtest+0x60>
+  pid = fork();
+    3ee2:	00002097          	auipc	ra,0x2
+    3ee6:	958080e7          	jalr	-1704(ra) # 583a <fork>
+  if(pid < 0){
+    3eea:	04054a63          	bltz	a0,3f3e <openiputtest+0x7c>
+  if(pid == 0){
+    3eee:	e93d                	bnez	a0,3f64 <openiputtest+0xa2>
+    int fd = open("oidir", O_RDWR);
+    3ef0:	4589                	li	a1,2
+    3ef2:	00004517          	auipc	a0,0x4
+    3ef6:	96650513          	addi	a0,a0,-1690 # 7858 <malloc+0x1bb4>
+    3efa:	00002097          	auipc	ra,0x2
+    3efe:	988080e7          	jalr	-1656(ra) # 5882 <open>
+    if(fd >= 0){
+    3f02:	04054c63          	bltz	a0,3f5a <openiputtest+0x98>
+      printf("%s: open directory for write succeeded\n", s);
+    3f06:	85a6                	mv	a1,s1
+    3f08:	00004517          	auipc	a0,0x4
+    3f0c:	97050513          	addi	a0,a0,-1680 # 7878 <malloc+0x1bd4>
+    3f10:	00002097          	auipc	ra,0x2
+    3f14:	cdc080e7          	jalr	-804(ra) # 5bec <printf>
+      exit(1);
+    3f18:	4505                	li	a0,1
+    3f1a:	00002097          	auipc	ra,0x2
+    3f1e:	928080e7          	jalr	-1752(ra) # 5842 <exit>
+    printf("%s: mkdir oidir failed\n", s);
+    3f22:	85a6                	mv	a1,s1
+    3f24:	00004517          	auipc	a0,0x4
+    3f28:	93c50513          	addi	a0,a0,-1732 # 7860 <malloc+0x1bbc>
+    3f2c:	00002097          	auipc	ra,0x2
+    3f30:	cc0080e7          	jalr	-832(ra) # 5bec <printf>
+    exit(1);
+    3f34:	4505                	li	a0,1
+    3f36:	00002097          	auipc	ra,0x2
+    3f3a:	90c080e7          	jalr	-1780(ra) # 5842 <exit>
+    printf("%s: fork failed\n", s);
+    3f3e:	85a6                	mv	a1,s1
+    3f40:	00002517          	auipc	a0,0x2
+    3f44:	6e050513          	addi	a0,a0,1760 # 6620 <malloc+0x97c>
+    3f48:	00002097          	auipc	ra,0x2
+    3f4c:	ca4080e7          	jalr	-860(ra) # 5bec <printf>
+    exit(1);
+    3f50:	4505                	li	a0,1
+    3f52:	00002097          	auipc	ra,0x2
+    3f56:	8f0080e7          	jalr	-1808(ra) # 5842 <exit>
+    exit(0);
+    3f5a:	4501                	li	a0,0
+    3f5c:	00002097          	auipc	ra,0x2
+    3f60:	8e6080e7          	jalr	-1818(ra) # 5842 <exit>
+  sleep(1);
+    3f64:	4505                	li	a0,1
+    3f66:	00002097          	auipc	ra,0x2
+    3f6a:	96c080e7          	jalr	-1684(ra) # 58d2 <sleep>
+  if(unlink("oidir") != 0){
+    3f6e:	00004517          	auipc	a0,0x4
+    3f72:	8ea50513          	addi	a0,a0,-1814 # 7858 <malloc+0x1bb4>
+    3f76:	00002097          	auipc	ra,0x2
+    3f7a:	91c080e7          	jalr	-1764(ra) # 5892 <unlink>
+    3f7e:	cd19                	beqz	a0,3f9c <openiputtest+0xda>
+    printf("%s: unlink failed\n", s);
+    3f80:	85a6                	mv	a1,s1
+    3f82:	00003517          	auipc	a0,0x3
+    3f86:	88e50513          	addi	a0,a0,-1906 # 6810 <malloc+0xb6c>
+    3f8a:	00002097          	auipc	ra,0x2
+    3f8e:	c62080e7          	jalr	-926(ra) # 5bec <printf>
+    exit(1);
+    3f92:	4505                	li	a0,1
+    3f94:	00002097          	auipc	ra,0x2
+    3f98:	8ae080e7          	jalr	-1874(ra) # 5842 <exit>
+  wait(&xstatus);
+    3f9c:	fdc40513          	addi	a0,s0,-36
+    3fa0:	00002097          	auipc	ra,0x2
+    3fa4:	8aa080e7          	jalr	-1878(ra) # 584a <wait>
+  exit(xstatus);
+    3fa8:	fdc42503          	lw	a0,-36(s0)
+    3fac:	00002097          	auipc	ra,0x2
+    3fb0:	896080e7          	jalr	-1898(ra) # 5842 <exit>
+
+0000000000003fb4 <forkforkfork>:
+{
+    3fb4:	1101                	addi	sp,sp,-32
+    3fb6:	ec06                	sd	ra,24(sp)
+    3fb8:	e822                	sd	s0,16(sp)
+    3fba:	e426                	sd	s1,8(sp)
+    3fbc:	1000                	addi	s0,sp,32
+    3fbe:	84aa                	mv	s1,a0
+  unlink("stopforking");
+    3fc0:	00004517          	auipc	a0,0x4
+    3fc4:	8e050513          	addi	a0,a0,-1824 # 78a0 <malloc+0x1bfc>
+    3fc8:	00002097          	auipc	ra,0x2
+    3fcc:	8ca080e7          	jalr	-1846(ra) # 5892 <unlink>
+  int pid = fork();
+    3fd0:	00002097          	auipc	ra,0x2
+    3fd4:	86a080e7          	jalr	-1942(ra) # 583a <fork>
+  if(pid < 0){
+    3fd8:	04054563          	bltz	a0,4022 <forkforkfork+0x6e>
+  if(pid == 0){
+    3fdc:	c12d                	beqz	a0,403e <forkforkfork+0x8a>
+  sleep(20); // two seconds
+    3fde:	4551                	li	a0,20
+    3fe0:	00002097          	auipc	ra,0x2
+    3fe4:	8f2080e7          	jalr	-1806(ra) # 58d2 <sleep>
+  close(open("stopforking", O_CREATE|O_RDWR));
+    3fe8:	20200593          	li	a1,514
+    3fec:	00004517          	auipc	a0,0x4
+    3ff0:	8b450513          	addi	a0,a0,-1868 # 78a0 <malloc+0x1bfc>
+    3ff4:	00002097          	auipc	ra,0x2
+    3ff8:	88e080e7          	jalr	-1906(ra) # 5882 <open>
+    3ffc:	00002097          	auipc	ra,0x2
+    4000:	86e080e7          	jalr	-1938(ra) # 586a <close>
+  wait(0);
+    4004:	4501                	li	a0,0
+    4006:	00002097          	auipc	ra,0x2
+    400a:	844080e7          	jalr	-1980(ra) # 584a <wait>
+  sleep(10); // one second
+    400e:	4529                	li	a0,10
+    4010:	00002097          	auipc	ra,0x2
+    4014:	8c2080e7          	jalr	-1854(ra) # 58d2 <sleep>
+}
+    4018:	60e2                	ld	ra,24(sp)
+    401a:	6442                	ld	s0,16(sp)
+    401c:	64a2                	ld	s1,8(sp)
+    401e:	6105                	addi	sp,sp,32
+    4020:	8082                	ret
+    printf("%s: fork failed", s);
+    4022:	85a6                	mv	a1,s1
+    4024:	00002517          	auipc	a0,0x2
+    4028:	7bc50513          	addi	a0,a0,1980 # 67e0 <malloc+0xb3c>
+    402c:	00002097          	auipc	ra,0x2
+    4030:	bc0080e7          	jalr	-1088(ra) # 5bec <printf>
+    exit(1);
+    4034:	4505                	li	a0,1
+    4036:	00002097          	auipc	ra,0x2
+    403a:	80c080e7          	jalr	-2036(ra) # 5842 <exit>
+      int fd = open("stopforking", 0);
+    403e:	00004497          	auipc	s1,0x4
+    4042:	86248493          	addi	s1,s1,-1950 # 78a0 <malloc+0x1bfc>
+    4046:	4581                	li	a1,0
+    4048:	8526                	mv	a0,s1
+    404a:	00002097          	auipc	ra,0x2
+    404e:	838080e7          	jalr	-1992(ra) # 5882 <open>
+      if(fd >= 0){
+    4052:	02055463          	bgez	a0,407a <forkforkfork+0xc6>
+      if(fork() < 0){
+    4056:	00001097          	auipc	ra,0x1
+    405a:	7e4080e7          	jalr	2020(ra) # 583a <fork>
+    405e:	fe0554e3          	bgez	a0,4046 <forkforkfork+0x92>
+        close(open("stopforking", O_CREATE|O_RDWR));
+    4062:	20200593          	li	a1,514
+    4066:	8526                	mv	a0,s1
+    4068:	00002097          	auipc	ra,0x2
+    406c:	81a080e7          	jalr	-2022(ra) # 5882 <open>
+    4070:	00001097          	auipc	ra,0x1
+    4074:	7fa080e7          	jalr	2042(ra) # 586a <close>
+    4078:	b7f9                	j	4046 <forkforkfork+0x92>
+        exit(0);
+    407a:	4501                	li	a0,0
+    407c:	00001097          	auipc	ra,0x1
+    4080:	7c6080e7          	jalr	1990(ra) # 5842 <exit>
+
+0000000000004084 <killstatus>:
+{
+    4084:	7139                	addi	sp,sp,-64
+    4086:	fc06                	sd	ra,56(sp)
+    4088:	f822                	sd	s0,48(sp)
+    408a:	f426                	sd	s1,40(sp)
+    408c:	f04a                	sd	s2,32(sp)
+    408e:	ec4e                	sd	s3,24(sp)
+    4090:	e852                	sd	s4,16(sp)
+    4092:	0080                	addi	s0,sp,64
+    4094:	8a2a                	mv	s4,a0
+    4096:	06400913          	li	s2,100
+    if(xst != -1) {
+    409a:	59fd                	li	s3,-1
+    int pid1 = fork();
+    409c:	00001097          	auipc	ra,0x1
+    40a0:	79e080e7          	jalr	1950(ra) # 583a <fork>
+    40a4:	84aa                	mv	s1,a0
+    if(pid1 < 0){
+    40a6:	02054f63          	bltz	a0,40e4 <killstatus+0x60>
+    if(pid1 == 0){
+    40aa:	c939                	beqz	a0,4100 <killstatus+0x7c>
+    sleep(1);
+    40ac:	4505                	li	a0,1
+    40ae:	00002097          	auipc	ra,0x2
+    40b2:	824080e7          	jalr	-2012(ra) # 58d2 <sleep>
+    kill(pid1);
+    40b6:	8526                	mv	a0,s1
+    40b8:	00001097          	auipc	ra,0x1
+    40bc:	7ba080e7          	jalr	1978(ra) # 5872 <kill>
+    wait(&xst);
+    40c0:	fcc40513          	addi	a0,s0,-52
+    40c4:	00001097          	auipc	ra,0x1
+    40c8:	786080e7          	jalr	1926(ra) # 584a <wait>
+    if(xst != -1) {
+    40cc:	fcc42783          	lw	a5,-52(s0)
+    40d0:	03379d63          	bne	a5,s3,410a <killstatus+0x86>
+  for(int i = 0; i < 100; i++){
+    40d4:	397d                	addiw	s2,s2,-1
+    40d6:	fc0913e3          	bnez	s2,409c <killstatus+0x18>
+  exit(0);
+    40da:	4501                	li	a0,0
+    40dc:	00001097          	auipc	ra,0x1
+    40e0:	766080e7          	jalr	1894(ra) # 5842 <exit>
+      printf("%s: fork failed\n", s);
+    40e4:	85d2                	mv	a1,s4
+    40e6:	00002517          	auipc	a0,0x2
+    40ea:	53a50513          	addi	a0,a0,1338 # 6620 <malloc+0x97c>
+    40ee:	00002097          	auipc	ra,0x2
+    40f2:	afe080e7          	jalr	-1282(ra) # 5bec <printf>
+      exit(1);
+    40f6:	4505                	li	a0,1
+    40f8:	00001097          	auipc	ra,0x1
+    40fc:	74a080e7          	jalr	1866(ra) # 5842 <exit>
+        getpid();
+    4100:	00001097          	auipc	ra,0x1
+    4104:	7c2080e7          	jalr	1986(ra) # 58c2 <getpid>
+      while(1) {
+    4108:	bfe5                	j	4100 <killstatus+0x7c>
+       printf("%s: status should be -1\n", s);
+    410a:	85d2                	mv	a1,s4
+    410c:	00003517          	auipc	a0,0x3
+    4110:	7a450513          	addi	a0,a0,1956 # 78b0 <malloc+0x1c0c>
+    4114:	00002097          	auipc	ra,0x2
+    4118:	ad8080e7          	jalr	-1320(ra) # 5bec <printf>
+       exit(1);
+    411c:	4505                	li	a0,1
+    411e:	00001097          	auipc	ra,0x1
+    4122:	724080e7          	jalr	1828(ra) # 5842 <exit>
+
+0000000000004126 <preempt>:
+{
+    4126:	7139                	addi	sp,sp,-64
+    4128:	fc06                	sd	ra,56(sp)
+    412a:	f822                	sd	s0,48(sp)
+    412c:	f426                	sd	s1,40(sp)
+    412e:	f04a                	sd	s2,32(sp)
+    4130:	ec4e                	sd	s3,24(sp)
+    4132:	e852                	sd	s4,16(sp)
+    4134:	0080                	addi	s0,sp,64
+    4136:	892a                	mv	s2,a0
+  pid1 = fork();
+    4138:	00001097          	auipc	ra,0x1
+    413c:	702080e7          	jalr	1794(ra) # 583a <fork>
+  if(pid1 < 0) {
+    4140:	00054563          	bltz	a0,414a <preempt+0x24>
+    4144:	84aa                	mv	s1,a0
+  if(pid1 == 0)
+    4146:	e105                	bnez	a0,4166 <preempt+0x40>
+    for(;;)
+    4148:	a001                	j	4148 <preempt+0x22>
+    printf("%s: fork failed", s);
+    414a:	85ca                	mv	a1,s2
+    414c:	00002517          	auipc	a0,0x2
+    4150:	69450513          	addi	a0,a0,1684 # 67e0 <malloc+0xb3c>
+    4154:	00002097          	auipc	ra,0x2
+    4158:	a98080e7          	jalr	-1384(ra) # 5bec <printf>
+    exit(1);
+    415c:	4505                	li	a0,1
+    415e:	00001097          	auipc	ra,0x1
+    4162:	6e4080e7          	jalr	1764(ra) # 5842 <exit>
+  pid2 = fork();
+    4166:	00001097          	auipc	ra,0x1
+    416a:	6d4080e7          	jalr	1748(ra) # 583a <fork>
+    416e:	89aa                	mv	s3,a0
+  if(pid2 < 0) {
+    4170:	00054463          	bltz	a0,4178 <preempt+0x52>
+  if(pid2 == 0)
+    4174:	e105                	bnez	a0,4194 <preempt+0x6e>
+    for(;;)
+    4176:	a001                	j	4176 <preempt+0x50>
+    printf("%s: fork failed\n", s);
+    4178:	85ca                	mv	a1,s2
+    417a:	00002517          	auipc	a0,0x2
+    417e:	4a650513          	addi	a0,a0,1190 # 6620 <malloc+0x97c>
+    4182:	00002097          	auipc	ra,0x2
+    4186:	a6a080e7          	jalr	-1430(ra) # 5bec <printf>
+    exit(1);
+    418a:	4505                	li	a0,1
+    418c:	00001097          	auipc	ra,0x1
+    4190:	6b6080e7          	jalr	1718(ra) # 5842 <exit>
+  pipe(pfds);
+    4194:	fc840513          	addi	a0,s0,-56
+    4198:	00001097          	auipc	ra,0x1
+    419c:	6ba080e7          	jalr	1722(ra) # 5852 <pipe>
+  pid3 = fork();
+    41a0:	00001097          	auipc	ra,0x1
+    41a4:	69a080e7          	jalr	1690(ra) # 583a <fork>
+    41a8:	8a2a                	mv	s4,a0
+  if(pid3 < 0) {
+    41aa:	02054e63          	bltz	a0,41e6 <preempt+0xc0>
+  if(pid3 == 0){
+    41ae:	e525                	bnez	a0,4216 <preempt+0xf0>
+    close(pfds[0]);
+    41b0:	fc842503          	lw	a0,-56(s0)
+    41b4:	00001097          	auipc	ra,0x1
+    41b8:	6b6080e7          	jalr	1718(ra) # 586a <close>
+    if(write(pfds[1], "x", 1) != 1)
+    41bc:	4605                	li	a2,1
+    41be:	00002597          	auipc	a1,0x2
+    41c2:	c7a58593          	addi	a1,a1,-902 # 5e38 <malloc+0x194>
+    41c6:	fcc42503          	lw	a0,-52(s0)
+    41ca:	00001097          	auipc	ra,0x1
+    41ce:	698080e7          	jalr	1688(ra) # 5862 <write>
+    41d2:	4785                	li	a5,1
+    41d4:	02f51763          	bne	a0,a5,4202 <preempt+0xdc>
+    close(pfds[1]);
+    41d8:	fcc42503          	lw	a0,-52(s0)
+    41dc:	00001097          	auipc	ra,0x1
+    41e0:	68e080e7          	jalr	1678(ra) # 586a <close>
+    for(;;)
+    41e4:	a001                	j	41e4 <preempt+0xbe>
+     printf("%s: fork failed\n", s);
+    41e6:	85ca                	mv	a1,s2
+    41e8:	00002517          	auipc	a0,0x2
+    41ec:	43850513          	addi	a0,a0,1080 # 6620 <malloc+0x97c>
+    41f0:	00002097          	auipc	ra,0x2
+    41f4:	9fc080e7          	jalr	-1540(ra) # 5bec <printf>
+     exit(1);
+    41f8:	4505                	li	a0,1
+    41fa:	00001097          	auipc	ra,0x1
+    41fe:	648080e7          	jalr	1608(ra) # 5842 <exit>
+      printf("%s: preempt write error", s);
+    4202:	85ca                	mv	a1,s2
+    4204:	00003517          	auipc	a0,0x3
+    4208:	6cc50513          	addi	a0,a0,1740 # 78d0 <malloc+0x1c2c>
+    420c:	00002097          	auipc	ra,0x2
+    4210:	9e0080e7          	jalr	-1568(ra) # 5bec <printf>
+    4214:	b7d1                	j	41d8 <preempt+0xb2>
+  close(pfds[1]);
+    4216:	fcc42503          	lw	a0,-52(s0)
+    421a:	00001097          	auipc	ra,0x1
+    421e:	650080e7          	jalr	1616(ra) # 586a <close>
+  if(read(pfds[0], buf, sizeof(buf)) != 1){
+    4222:	660d                	lui	a2,0x3
+    4224:	00008597          	auipc	a1,0x8
+    4228:	be458593          	addi	a1,a1,-1052 # be08 <buf>
+    422c:	fc842503          	lw	a0,-56(s0)
+    4230:	00001097          	auipc	ra,0x1
+    4234:	62a080e7          	jalr	1578(ra) # 585a <read>
+    4238:	4785                	li	a5,1
+    423a:	02f50363          	beq	a0,a5,4260 <preempt+0x13a>
+    printf("%s: preempt read error", s);
+    423e:	85ca                	mv	a1,s2
+    4240:	00003517          	auipc	a0,0x3
+    4244:	6a850513          	addi	a0,a0,1704 # 78e8 <malloc+0x1c44>
+    4248:	00002097          	auipc	ra,0x2
+    424c:	9a4080e7          	jalr	-1628(ra) # 5bec <printf>
+}
+    4250:	70e2                	ld	ra,56(sp)
+    4252:	7442                	ld	s0,48(sp)
+    4254:	74a2                	ld	s1,40(sp)
+    4256:	7902                	ld	s2,32(sp)
+    4258:	69e2                	ld	s3,24(sp)
+    425a:	6a42                	ld	s4,16(sp)
+    425c:	6121                	addi	sp,sp,64
+    425e:	8082                	ret
+  close(pfds[0]);
+    4260:	fc842503          	lw	a0,-56(s0)
+    4264:	00001097          	auipc	ra,0x1
+    4268:	606080e7          	jalr	1542(ra) # 586a <close>
+  printf("kill... ");
+    426c:	00003517          	auipc	a0,0x3
+    4270:	69450513          	addi	a0,a0,1684 # 7900 <malloc+0x1c5c>
+    4274:	00002097          	auipc	ra,0x2
+    4278:	978080e7          	jalr	-1672(ra) # 5bec <printf>
+  kill(pid1);
+    427c:	8526                	mv	a0,s1
+    427e:	00001097          	auipc	ra,0x1
+    4282:	5f4080e7          	jalr	1524(ra) # 5872 <kill>
+  kill(pid2);
+    4286:	854e                	mv	a0,s3
+    4288:	00001097          	auipc	ra,0x1
+    428c:	5ea080e7          	jalr	1514(ra) # 5872 <kill>
+  kill(pid3);
+    4290:	8552                	mv	a0,s4
+    4292:	00001097          	auipc	ra,0x1
+    4296:	5e0080e7          	jalr	1504(ra) # 5872 <kill>
+  printf("wait... ");
+    429a:	00003517          	auipc	a0,0x3
+    429e:	67650513          	addi	a0,a0,1654 # 7910 <malloc+0x1c6c>
+    42a2:	00002097          	auipc	ra,0x2
+    42a6:	94a080e7          	jalr	-1718(ra) # 5bec <printf>
+  wait(0);
+    42aa:	4501                	li	a0,0
+    42ac:	00001097          	auipc	ra,0x1
+    42b0:	59e080e7          	jalr	1438(ra) # 584a <wait>
+  wait(0);
+    42b4:	4501                	li	a0,0
+    42b6:	00001097          	auipc	ra,0x1
+    42ba:	594080e7          	jalr	1428(ra) # 584a <wait>
+  wait(0);
+    42be:	4501                	li	a0,0
+    42c0:	00001097          	auipc	ra,0x1
+    42c4:	58a080e7          	jalr	1418(ra) # 584a <wait>
+    42c8:	b761                	j	4250 <preempt+0x12a>
+
+00000000000042ca <reparent>:
+{
+    42ca:	7179                	addi	sp,sp,-48
+    42cc:	f406                	sd	ra,40(sp)
+    42ce:	f022                	sd	s0,32(sp)
+    42d0:	ec26                	sd	s1,24(sp)
+    42d2:	e84a                	sd	s2,16(sp)
+    42d4:	e44e                	sd	s3,8(sp)
+    42d6:	e052                	sd	s4,0(sp)
+    42d8:	1800                	addi	s0,sp,48
+    42da:	89aa                	mv	s3,a0
+  int master_pid = getpid();
+    42dc:	00001097          	auipc	ra,0x1
+    42e0:	5e6080e7          	jalr	1510(ra) # 58c2 <getpid>
+    42e4:	8a2a                	mv	s4,a0
+    42e6:	0c800913          	li	s2,200
+    int pid = fork();
+    42ea:	00001097          	auipc	ra,0x1
+    42ee:	550080e7          	jalr	1360(ra) # 583a <fork>
+    42f2:	84aa                	mv	s1,a0
+    if(pid < 0){
+    42f4:	02054263          	bltz	a0,4318 <reparent+0x4e>
+    if(pid){
+    42f8:	cd21                	beqz	a0,4350 <reparent+0x86>
+      if(wait(0) != pid){
+    42fa:	4501                	li	a0,0
+    42fc:	00001097          	auipc	ra,0x1
+    4300:	54e080e7          	jalr	1358(ra) # 584a <wait>
+    4304:	02951863          	bne	a0,s1,4334 <reparent+0x6a>
+  for(int i = 0; i < 200; i++){
+    4308:	397d                	addiw	s2,s2,-1
+    430a:	fe0910e3          	bnez	s2,42ea <reparent+0x20>
+  exit(0);
+    430e:	4501                	li	a0,0
+    4310:	00001097          	auipc	ra,0x1
+    4314:	532080e7          	jalr	1330(ra) # 5842 <exit>
+      printf("%s: fork failed\n", s);
+    4318:	85ce                	mv	a1,s3
+    431a:	00002517          	auipc	a0,0x2
+    431e:	30650513          	addi	a0,a0,774 # 6620 <malloc+0x97c>
+    4322:	00002097          	auipc	ra,0x2
+    4326:	8ca080e7          	jalr	-1846(ra) # 5bec <printf>
+      exit(1);
+    432a:	4505                	li	a0,1
+    432c:	00001097          	auipc	ra,0x1
+    4330:	516080e7          	jalr	1302(ra) # 5842 <exit>
+        printf("%s: wait wrong pid\n", s);
+    4334:	85ce                	mv	a1,s3
+    4336:	00002517          	auipc	a0,0x2
+    433a:	47250513          	addi	a0,a0,1138 # 67a8 <malloc+0xb04>
+    433e:	00002097          	auipc	ra,0x2
+    4342:	8ae080e7          	jalr	-1874(ra) # 5bec <printf>
+        exit(1);
+    4346:	4505                	li	a0,1
+    4348:	00001097          	auipc	ra,0x1
+    434c:	4fa080e7          	jalr	1274(ra) # 5842 <exit>
+      int pid2 = fork();
+    4350:	00001097          	auipc	ra,0x1
+    4354:	4ea080e7          	jalr	1258(ra) # 583a <fork>
+      if(pid2 < 0){
+    4358:	00054763          	bltz	a0,4366 <reparent+0x9c>
+      exit(0);
+    435c:	4501                	li	a0,0
+    435e:	00001097          	auipc	ra,0x1
+    4362:	4e4080e7          	jalr	1252(ra) # 5842 <exit>
+        kill(master_pid);
+    4366:	8552                	mv	a0,s4
+    4368:	00001097          	auipc	ra,0x1
+    436c:	50a080e7          	jalr	1290(ra) # 5872 <kill>
+        exit(1);
+    4370:	4505                	li	a0,1
+    4372:	00001097          	auipc	ra,0x1
+    4376:	4d0080e7          	jalr	1232(ra) # 5842 <exit>
+
+000000000000437a <sbrkfail>:
+{
+    437a:	7119                	addi	sp,sp,-128
+    437c:	fc86                	sd	ra,120(sp)
+    437e:	f8a2                	sd	s0,112(sp)
+    4380:	f4a6                	sd	s1,104(sp)
+    4382:	f0ca                	sd	s2,96(sp)
+    4384:	ecce                	sd	s3,88(sp)
+    4386:	e8d2                	sd	s4,80(sp)
+    4388:	e4d6                	sd	s5,72(sp)
+    438a:	0100                	addi	s0,sp,128
+    438c:	8aaa                	mv	s5,a0
+  if(pipe(fds) != 0){
+    438e:	fb040513          	addi	a0,s0,-80
+    4392:	00001097          	auipc	ra,0x1
+    4396:	4c0080e7          	jalr	1216(ra) # 5852 <pipe>
+    439a:	e901                	bnez	a0,43aa <sbrkfail+0x30>
+    439c:	f8040493          	addi	s1,s0,-128
+    43a0:	fa840993          	addi	s3,s0,-88
+    43a4:	8926                	mv	s2,s1
+    if(pids[i] != -1)
+    43a6:	5a7d                	li	s4,-1
+    43a8:	a085                	j	4408 <sbrkfail+0x8e>
+    printf("%s: pipe() failed\n", s);
+    43aa:	85d6                	mv	a1,s5
+    43ac:	00002517          	auipc	a0,0x2
+    43b0:	37c50513          	addi	a0,a0,892 # 6728 <malloc+0xa84>
+    43b4:	00002097          	auipc	ra,0x2
+    43b8:	838080e7          	jalr	-1992(ra) # 5bec <printf>
+    exit(1);
+    43bc:	4505                	li	a0,1
+    43be:	00001097          	auipc	ra,0x1
+    43c2:	484080e7          	jalr	1156(ra) # 5842 <exit>
+      sbrk(BIG - (uint64)sbrk(0));
+    43c6:	00001097          	auipc	ra,0x1
+    43ca:	504080e7          	jalr	1284(ra) # 58ca <sbrk>
+    43ce:	064007b7          	lui	a5,0x6400
+    43d2:	40a7853b          	subw	a0,a5,a0
+    43d6:	00001097          	auipc	ra,0x1
+    43da:	4f4080e7          	jalr	1268(ra) # 58ca <sbrk>
+      write(fds[1], "x", 1);
+    43de:	4605                	li	a2,1
+    43e0:	00002597          	auipc	a1,0x2
+    43e4:	a5858593          	addi	a1,a1,-1448 # 5e38 <malloc+0x194>
+    43e8:	fb442503          	lw	a0,-76(s0)
+    43ec:	00001097          	auipc	ra,0x1
+    43f0:	476080e7          	jalr	1142(ra) # 5862 <write>
+      for(;;) sleep(1000);
+    43f4:	3e800513          	li	a0,1000
+    43f8:	00001097          	auipc	ra,0x1
+    43fc:	4da080e7          	jalr	1242(ra) # 58d2 <sleep>
+    4400:	bfd5                	j	43f4 <sbrkfail+0x7a>
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    4402:	0911                	addi	s2,s2,4
+    4404:	03390563          	beq	s2,s3,442e <sbrkfail+0xb4>
+    if((pids[i] = fork()) == 0){
+    4408:	00001097          	auipc	ra,0x1
+    440c:	432080e7          	jalr	1074(ra) # 583a <fork>
+    4410:	00a92023          	sw	a0,0(s2)
+    4414:	d94d                	beqz	a0,43c6 <sbrkfail+0x4c>
+    if(pids[i] != -1)
+    4416:	ff4506e3          	beq	a0,s4,4402 <sbrkfail+0x88>
+      read(fds[0], &scratch, 1);
+    441a:	4605                	li	a2,1
+    441c:	faf40593          	addi	a1,s0,-81
+    4420:	fb042503          	lw	a0,-80(s0)
+    4424:	00001097          	auipc	ra,0x1
+    4428:	436080e7          	jalr	1078(ra) # 585a <read>
+    442c:	bfd9                	j	4402 <sbrkfail+0x88>
+  c = sbrk(PGSIZE);
+    442e:	6505                	lui	a0,0x1
+    4430:	00001097          	auipc	ra,0x1
+    4434:	49a080e7          	jalr	1178(ra) # 58ca <sbrk>
+    4438:	8a2a                	mv	s4,a0
+    if(pids[i] == -1)
+    443a:	597d                	li	s2,-1
+    443c:	a021                	j	4444 <sbrkfail+0xca>
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    443e:	0491                	addi	s1,s1,4
+    4440:	01348f63          	beq	s1,s3,445e <sbrkfail+0xe4>
+    if(pids[i] == -1)
+    4444:	4088                	lw	a0,0(s1)
+    4446:	ff250ce3          	beq	a0,s2,443e <sbrkfail+0xc4>
+    kill(pids[i]);
+    444a:	00001097          	auipc	ra,0x1
+    444e:	428080e7          	jalr	1064(ra) # 5872 <kill>
+    wait(0);
+    4452:	4501                	li	a0,0
+    4454:	00001097          	auipc	ra,0x1
+    4458:	3f6080e7          	jalr	1014(ra) # 584a <wait>
+    445c:	b7cd                	j	443e <sbrkfail+0xc4>
+  if(c == (char*)0xffffffffffffffffL){
+    445e:	57fd                	li	a5,-1
+    4460:	04fa0163          	beq	s4,a5,44a2 <sbrkfail+0x128>
+  pid = fork();
+    4464:	00001097          	auipc	ra,0x1
+    4468:	3d6080e7          	jalr	982(ra) # 583a <fork>
+    446c:	84aa                	mv	s1,a0
+  if(pid < 0){
+    446e:	04054863          	bltz	a0,44be <sbrkfail+0x144>
+  if(pid == 0){
+    4472:	c525                	beqz	a0,44da <sbrkfail+0x160>
+  wait(&xstatus);
+    4474:	fbc40513          	addi	a0,s0,-68
+    4478:	00001097          	auipc	ra,0x1
+    447c:	3d2080e7          	jalr	978(ra) # 584a <wait>
+  if(xstatus != -1 && xstatus != 2)
+    4480:	fbc42783          	lw	a5,-68(s0)
+    4484:	577d                	li	a4,-1
+    4486:	00e78563          	beq	a5,a4,4490 <sbrkfail+0x116>
+    448a:	4709                	li	a4,2
+    448c:	08e79d63          	bne	a5,a4,4526 <sbrkfail+0x1ac>
+}
+    4490:	70e6                	ld	ra,120(sp)
+    4492:	7446                	ld	s0,112(sp)
+    4494:	74a6                	ld	s1,104(sp)
+    4496:	7906                	ld	s2,96(sp)
+    4498:	69e6                	ld	s3,88(sp)
+    449a:	6a46                	ld	s4,80(sp)
+    449c:	6aa6                	ld	s5,72(sp)
+    449e:	6109                	addi	sp,sp,128
+    44a0:	8082                	ret
+    printf("%s: failed sbrk leaked memory\n", s);
+    44a2:	85d6                	mv	a1,s5
+    44a4:	00003517          	auipc	a0,0x3
+    44a8:	47c50513          	addi	a0,a0,1148 # 7920 <malloc+0x1c7c>
+    44ac:	00001097          	auipc	ra,0x1
+    44b0:	740080e7          	jalr	1856(ra) # 5bec <printf>
+    exit(1);
+    44b4:	4505                	li	a0,1
+    44b6:	00001097          	auipc	ra,0x1
+    44ba:	38c080e7          	jalr	908(ra) # 5842 <exit>
+    printf("%s: fork failed\n", s);
+    44be:	85d6                	mv	a1,s5
+    44c0:	00002517          	auipc	a0,0x2
+    44c4:	16050513          	addi	a0,a0,352 # 6620 <malloc+0x97c>
+    44c8:	00001097          	auipc	ra,0x1
+    44cc:	724080e7          	jalr	1828(ra) # 5bec <printf>
+    exit(1);
+    44d0:	4505                	li	a0,1
+    44d2:	00001097          	auipc	ra,0x1
+    44d6:	370080e7          	jalr	880(ra) # 5842 <exit>
+    a = sbrk(0);
+    44da:	4501                	li	a0,0
+    44dc:	00001097          	auipc	ra,0x1
+    44e0:	3ee080e7          	jalr	1006(ra) # 58ca <sbrk>
+    44e4:	892a                	mv	s2,a0
+    sbrk(10*BIG);
+    44e6:	3e800537          	lui	a0,0x3e800
+    44ea:	00001097          	auipc	ra,0x1
+    44ee:	3e0080e7          	jalr	992(ra) # 58ca <sbrk>
+    for (i = 0; i < 10*BIG; i += PGSIZE) {
+    44f2:	87ca                	mv	a5,s2
+    44f4:	3e800737          	lui	a4,0x3e800
+    44f8:	993a                	add	s2,s2,a4
+    44fa:	6705                	lui	a4,0x1
+      n += *(a+i);
+    44fc:	0007c683          	lbu	a3,0(a5) # 6400000 <__BSS_END__+0x63f11e8>
+    4500:	9cb5                	addw	s1,s1,a3
+    for (i = 0; i < 10*BIG; i += PGSIZE) {
+    4502:	97ba                	add	a5,a5,a4
+    4504:	ff279ce3          	bne	a5,s2,44fc <sbrkfail+0x182>
+    printf("%s: allocate a lot of memory succeeded %d\n", s, n);
+    4508:	8626                	mv	a2,s1
+    450a:	85d6                	mv	a1,s5
+    450c:	00003517          	auipc	a0,0x3
+    4510:	43450513          	addi	a0,a0,1076 # 7940 <malloc+0x1c9c>
+    4514:	00001097          	auipc	ra,0x1
+    4518:	6d8080e7          	jalr	1752(ra) # 5bec <printf>
+    exit(1);
+    451c:	4505                	li	a0,1
+    451e:	00001097          	auipc	ra,0x1
+    4522:	324080e7          	jalr	804(ra) # 5842 <exit>
+    exit(1);
+    4526:	4505                	li	a0,1
+    4528:	00001097          	auipc	ra,0x1
+    452c:	31a080e7          	jalr	794(ra) # 5842 <exit>
+
+0000000000004530 <mem>:
+{
+    4530:	7139                	addi	sp,sp,-64
+    4532:	fc06                	sd	ra,56(sp)
+    4534:	f822                	sd	s0,48(sp)
+    4536:	f426                	sd	s1,40(sp)
+    4538:	f04a                	sd	s2,32(sp)
+    453a:	ec4e                	sd	s3,24(sp)
+    453c:	0080                	addi	s0,sp,64
+    453e:	89aa                	mv	s3,a0
+  if((pid = fork()) == 0){
+    4540:	00001097          	auipc	ra,0x1
+    4544:	2fa080e7          	jalr	762(ra) # 583a <fork>
+    m1 = 0;
+    4548:	4481                	li	s1,0
+    while((m2 = malloc(10001)) != 0){
+    454a:	6909                	lui	s2,0x2
+    454c:	71190913          	addi	s2,s2,1809 # 2711 <sbrkbasic+0xb1>
+  if((pid = fork()) == 0){
+    4550:	c115                	beqz	a0,4574 <mem+0x44>
+    wait(&xstatus);
+    4552:	fcc40513          	addi	a0,s0,-52
+    4556:	00001097          	auipc	ra,0x1
+    455a:	2f4080e7          	jalr	756(ra) # 584a <wait>
+    if(xstatus == -1){
+    455e:	fcc42503          	lw	a0,-52(s0)
+    4562:	57fd                	li	a5,-1
+    4564:	06f50363          	beq	a0,a5,45ca <mem+0x9a>
+    exit(xstatus);
+    4568:	00001097          	auipc	ra,0x1
+    456c:	2da080e7          	jalr	730(ra) # 5842 <exit>
+      *(char**)m2 = m1;
+    4570:	e104                	sd	s1,0(a0)
+      m1 = m2;
+    4572:	84aa                	mv	s1,a0
+    while((m2 = malloc(10001)) != 0){
+    4574:	854a                	mv	a0,s2
+    4576:	00001097          	auipc	ra,0x1
+    457a:	72e080e7          	jalr	1838(ra) # 5ca4 <malloc>
+    457e:	f96d                	bnez	a0,4570 <mem+0x40>
+    while(m1){
+    4580:	c881                	beqz	s1,4590 <mem+0x60>
+      m2 = *(char**)m1;
+    4582:	8526                	mv	a0,s1
+    4584:	6084                	ld	s1,0(s1)
+      free(m1);
+    4586:	00001097          	auipc	ra,0x1
+    458a:	69c080e7          	jalr	1692(ra) # 5c22 <free>
+    while(m1){
+    458e:	f8f5                	bnez	s1,4582 <mem+0x52>
+    m1 = malloc(1024*20);
+    4590:	6515                	lui	a0,0x5
+    4592:	00001097          	auipc	ra,0x1
+    4596:	712080e7          	jalr	1810(ra) # 5ca4 <malloc>
+    if(m1 == 0){
+    459a:	c911                	beqz	a0,45ae <mem+0x7e>
+    free(m1);
+    459c:	00001097          	auipc	ra,0x1
+    45a0:	686080e7          	jalr	1670(ra) # 5c22 <free>
+    exit(0);
+    45a4:	4501                	li	a0,0
+    45a6:	00001097          	auipc	ra,0x1
+    45aa:	29c080e7          	jalr	668(ra) # 5842 <exit>
+      printf("couldn't allocate mem?!!\n", s);
+    45ae:	85ce                	mv	a1,s3
+    45b0:	00003517          	auipc	a0,0x3
+    45b4:	3c050513          	addi	a0,a0,960 # 7970 <malloc+0x1ccc>
+    45b8:	00001097          	auipc	ra,0x1
+    45bc:	634080e7          	jalr	1588(ra) # 5bec <printf>
+      exit(1);
+    45c0:	4505                	li	a0,1
+    45c2:	00001097          	auipc	ra,0x1
+    45c6:	280080e7          	jalr	640(ra) # 5842 <exit>
+      exit(0);
+    45ca:	4501                	li	a0,0
+    45cc:	00001097          	auipc	ra,0x1
+    45d0:	276080e7          	jalr	630(ra) # 5842 <exit>
+
+00000000000045d4 <sharedfd>:
+{
+    45d4:	7159                	addi	sp,sp,-112
+    45d6:	f486                	sd	ra,104(sp)
+    45d8:	f0a2                	sd	s0,96(sp)
+    45da:	eca6                	sd	s1,88(sp)
+    45dc:	e8ca                	sd	s2,80(sp)
+    45de:	e4ce                	sd	s3,72(sp)
+    45e0:	e0d2                	sd	s4,64(sp)
+    45e2:	fc56                	sd	s5,56(sp)
+    45e4:	f85a                	sd	s6,48(sp)
+    45e6:	f45e                	sd	s7,40(sp)
+    45e8:	1880                	addi	s0,sp,112
+    45ea:	8a2a                	mv	s4,a0
+  unlink("sharedfd");
+    45ec:	00003517          	auipc	a0,0x3
+    45f0:	3a450513          	addi	a0,a0,932 # 7990 <malloc+0x1cec>
+    45f4:	00001097          	auipc	ra,0x1
+    45f8:	29e080e7          	jalr	670(ra) # 5892 <unlink>
+  fd = open("sharedfd", O_CREATE|O_RDWR);
+    45fc:	20200593          	li	a1,514
+    4600:	00003517          	auipc	a0,0x3
+    4604:	39050513          	addi	a0,a0,912 # 7990 <malloc+0x1cec>
+    4608:	00001097          	auipc	ra,0x1
+    460c:	27a080e7          	jalr	634(ra) # 5882 <open>
+  if(fd < 0){
+    4610:	04054a63          	bltz	a0,4664 <sharedfd+0x90>
+    4614:	892a                	mv	s2,a0
+  pid = fork();
+    4616:	00001097          	auipc	ra,0x1
+    461a:	224080e7          	jalr	548(ra) # 583a <fork>
+    461e:	89aa                	mv	s3,a0
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+    4620:	06300593          	li	a1,99
+    4624:	c119                	beqz	a0,462a <sharedfd+0x56>
+    4626:	07000593          	li	a1,112
+    462a:	4629                	li	a2,10
+    462c:	fa040513          	addi	a0,s0,-96
+    4630:	00001097          	auipc	ra,0x1
+    4634:	018080e7          	jalr	24(ra) # 5648 <memset>
+    4638:	3e800493          	li	s1,1000
+    if(write(fd, buf, sizeof(buf)) != sizeof(buf)){
+    463c:	4629                	li	a2,10
+    463e:	fa040593          	addi	a1,s0,-96
+    4642:	854a                	mv	a0,s2
+    4644:	00001097          	auipc	ra,0x1
+    4648:	21e080e7          	jalr	542(ra) # 5862 <write>
+    464c:	47a9                	li	a5,10
+    464e:	02f51963          	bne	a0,a5,4680 <sharedfd+0xac>
+  for(i = 0; i < N; i++){
+    4652:	34fd                	addiw	s1,s1,-1
+    4654:	f4e5                	bnez	s1,463c <sharedfd+0x68>
+  if(pid == 0) {
+    4656:	04099363          	bnez	s3,469c <sharedfd+0xc8>
+    exit(0);
+    465a:	4501                	li	a0,0
+    465c:	00001097          	auipc	ra,0x1
+    4660:	1e6080e7          	jalr	486(ra) # 5842 <exit>
+    printf("%s: cannot open sharedfd for writing", s);
+    4664:	85d2                	mv	a1,s4
+    4666:	00003517          	auipc	a0,0x3
+    466a:	33a50513          	addi	a0,a0,826 # 79a0 <malloc+0x1cfc>
+    466e:	00001097          	auipc	ra,0x1
+    4672:	57e080e7          	jalr	1406(ra) # 5bec <printf>
+    exit(1);
+    4676:	4505                	li	a0,1
+    4678:	00001097          	auipc	ra,0x1
+    467c:	1ca080e7          	jalr	458(ra) # 5842 <exit>
+      printf("%s: write sharedfd failed\n", s);
+    4680:	85d2                	mv	a1,s4
+    4682:	00003517          	auipc	a0,0x3
+    4686:	34650513          	addi	a0,a0,838 # 79c8 <malloc+0x1d24>
+    468a:	00001097          	auipc	ra,0x1
+    468e:	562080e7          	jalr	1378(ra) # 5bec <printf>
+      exit(1);
+    4692:	4505                	li	a0,1
+    4694:	00001097          	auipc	ra,0x1
+    4698:	1ae080e7          	jalr	430(ra) # 5842 <exit>
+    wait(&xstatus);
+    469c:	f9c40513          	addi	a0,s0,-100
+    46a0:	00001097          	auipc	ra,0x1
+    46a4:	1aa080e7          	jalr	426(ra) # 584a <wait>
+    if(xstatus != 0)
+    46a8:	f9c42983          	lw	s3,-100(s0)
+    46ac:	00098763          	beqz	s3,46ba <sharedfd+0xe6>
+      exit(xstatus);
+    46b0:	854e                	mv	a0,s3
+    46b2:	00001097          	auipc	ra,0x1
+    46b6:	190080e7          	jalr	400(ra) # 5842 <exit>
+  close(fd);
+    46ba:	854a                	mv	a0,s2
+    46bc:	00001097          	auipc	ra,0x1
+    46c0:	1ae080e7          	jalr	430(ra) # 586a <close>
+  fd = open("sharedfd", 0);
+    46c4:	4581                	li	a1,0
+    46c6:	00003517          	auipc	a0,0x3
+    46ca:	2ca50513          	addi	a0,a0,714 # 7990 <malloc+0x1cec>
+    46ce:	00001097          	auipc	ra,0x1
+    46d2:	1b4080e7          	jalr	436(ra) # 5882 <open>
+    46d6:	8baa                	mv	s7,a0
+  nc = np = 0;
+    46d8:	8ace                	mv	s5,s3
+  if(fd < 0){
+    46da:	02054563          	bltz	a0,4704 <sharedfd+0x130>
+    46de:	faa40913          	addi	s2,s0,-86
+      if(buf[i] == 'c')
+    46e2:	06300493          	li	s1,99
+      if(buf[i] == 'p')
+    46e6:	07000b13          	li	s6,112
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+    46ea:	4629                	li	a2,10
+    46ec:	fa040593          	addi	a1,s0,-96
+    46f0:	855e                	mv	a0,s7
+    46f2:	00001097          	auipc	ra,0x1
+    46f6:	168080e7          	jalr	360(ra) # 585a <read>
+    46fa:	02a05f63          	blez	a0,4738 <sharedfd+0x164>
+    46fe:	fa040793          	addi	a5,s0,-96
+    4702:	a01d                	j	4728 <sharedfd+0x154>
+    printf("%s: cannot open sharedfd for reading\n", s);
+    4704:	85d2                	mv	a1,s4
+    4706:	00003517          	auipc	a0,0x3
+    470a:	2e250513          	addi	a0,a0,738 # 79e8 <malloc+0x1d44>
+    470e:	00001097          	auipc	ra,0x1
+    4712:	4de080e7          	jalr	1246(ra) # 5bec <printf>
+    exit(1);
+    4716:	4505                	li	a0,1
+    4718:	00001097          	auipc	ra,0x1
+    471c:	12a080e7          	jalr	298(ra) # 5842 <exit>
+        nc++;
+    4720:	2985                	addiw	s3,s3,1
+    for(i = 0; i < sizeof(buf); i++){
+    4722:	0785                	addi	a5,a5,1
+    4724:	fd2783e3          	beq	a5,s2,46ea <sharedfd+0x116>
+      if(buf[i] == 'c')
+    4728:	0007c703          	lbu	a4,0(a5)
+    472c:	fe970ae3          	beq	a4,s1,4720 <sharedfd+0x14c>
+      if(buf[i] == 'p')
+    4730:	ff6719e3          	bne	a4,s6,4722 <sharedfd+0x14e>
+        np++;
+    4734:	2a85                	addiw	s5,s5,1
+    4736:	b7f5                	j	4722 <sharedfd+0x14e>
+  close(fd);
+    4738:	855e                	mv	a0,s7
+    473a:	00001097          	auipc	ra,0x1
+    473e:	130080e7          	jalr	304(ra) # 586a <close>
+  unlink("sharedfd");
+    4742:	00003517          	auipc	a0,0x3
+    4746:	24e50513          	addi	a0,a0,590 # 7990 <malloc+0x1cec>
+    474a:	00001097          	auipc	ra,0x1
+    474e:	148080e7          	jalr	328(ra) # 5892 <unlink>
+  if(nc == N*SZ && np == N*SZ){
+    4752:	6789                	lui	a5,0x2
+    4754:	71078793          	addi	a5,a5,1808 # 2710 <sbrkbasic+0xb0>
+    4758:	00f99763          	bne	s3,a5,4766 <sharedfd+0x192>
+    475c:	6789                	lui	a5,0x2
+    475e:	71078793          	addi	a5,a5,1808 # 2710 <sbrkbasic+0xb0>
+    4762:	02fa8063          	beq	s5,a5,4782 <sharedfd+0x1ae>
+    printf("%s: nc/np test fails\n", s);
+    4766:	85d2                	mv	a1,s4
+    4768:	00003517          	auipc	a0,0x3
+    476c:	2a850513          	addi	a0,a0,680 # 7a10 <malloc+0x1d6c>
+    4770:	00001097          	auipc	ra,0x1
+    4774:	47c080e7          	jalr	1148(ra) # 5bec <printf>
+    exit(1);
+    4778:	4505                	li	a0,1
+    477a:	00001097          	auipc	ra,0x1
+    477e:	0c8080e7          	jalr	200(ra) # 5842 <exit>
+    exit(0);
+    4782:	4501                	li	a0,0
+    4784:	00001097          	auipc	ra,0x1
+    4788:	0be080e7          	jalr	190(ra) # 5842 <exit>
+
+000000000000478c <fourfiles>:
+{
+    478c:	7171                	addi	sp,sp,-176
+    478e:	f506                	sd	ra,168(sp)
+    4790:	f122                	sd	s0,160(sp)
+    4792:	ed26                	sd	s1,152(sp)
+    4794:	e94a                	sd	s2,144(sp)
+    4796:	e54e                	sd	s3,136(sp)
+    4798:	e152                	sd	s4,128(sp)
+    479a:	fcd6                	sd	s5,120(sp)
+    479c:	f8da                	sd	s6,112(sp)
+    479e:	f4de                	sd	s7,104(sp)
+    47a0:	f0e2                	sd	s8,96(sp)
+    47a2:	ece6                	sd	s9,88(sp)
+    47a4:	e8ea                	sd	s10,80(sp)
+    47a6:	e4ee                	sd	s11,72(sp)
+    47a8:	1900                	addi	s0,sp,176
+    47aa:	f4a43c23          	sd	a0,-168(s0)
+  char *names[] = { "f0", "f1", "f2", "f3" };
+    47ae:	00003797          	auipc	a5,0x3
+    47b2:	27a78793          	addi	a5,a5,634 # 7a28 <malloc+0x1d84>
+    47b6:	f6f43823          	sd	a5,-144(s0)
+    47ba:	00003797          	auipc	a5,0x3
+    47be:	27678793          	addi	a5,a5,630 # 7a30 <malloc+0x1d8c>
+    47c2:	f6f43c23          	sd	a5,-136(s0)
+    47c6:	00003797          	auipc	a5,0x3
+    47ca:	27278793          	addi	a5,a5,626 # 7a38 <malloc+0x1d94>
+    47ce:	f8f43023          	sd	a5,-128(s0)
+    47d2:	00003797          	auipc	a5,0x3
+    47d6:	26e78793          	addi	a5,a5,622 # 7a40 <malloc+0x1d9c>
+    47da:	f8f43423          	sd	a5,-120(s0)
+  for(pi = 0; pi < NCHILD; pi++){
+    47de:	f7040c13          	addi	s8,s0,-144
+  char *names[] = { "f0", "f1", "f2", "f3" };
+    47e2:	8962                	mv	s2,s8
+  for(pi = 0; pi < NCHILD; pi++){
+    47e4:	4481                	li	s1,0
+    47e6:	4a11                	li	s4,4
+    fname = names[pi];
+    47e8:	00093983          	ld	s3,0(s2)
+    unlink(fname);
+    47ec:	854e                	mv	a0,s3
+    47ee:	00001097          	auipc	ra,0x1
+    47f2:	0a4080e7          	jalr	164(ra) # 5892 <unlink>
+    pid = fork();
+    47f6:	00001097          	auipc	ra,0x1
+    47fa:	044080e7          	jalr	68(ra) # 583a <fork>
+    if(pid < 0){
+    47fe:	04054463          	bltz	a0,4846 <fourfiles+0xba>
+    if(pid == 0){
+    4802:	c12d                	beqz	a0,4864 <fourfiles+0xd8>
+  for(pi = 0; pi < NCHILD; pi++){
+    4804:	2485                	addiw	s1,s1,1
+    4806:	0921                	addi	s2,s2,8
+    4808:	ff4490e3          	bne	s1,s4,47e8 <fourfiles+0x5c>
+    480c:	4491                	li	s1,4
+    wait(&xstatus);
+    480e:	f6c40513          	addi	a0,s0,-148
+    4812:	00001097          	auipc	ra,0x1
+    4816:	038080e7          	jalr	56(ra) # 584a <wait>
+    if(xstatus != 0)
+    481a:	f6c42b03          	lw	s6,-148(s0)
+    481e:	0c0b1e63          	bnez	s6,48fa <fourfiles+0x16e>
+  for(pi = 0; pi < NCHILD; pi++){
+    4822:	34fd                	addiw	s1,s1,-1
+    4824:	f4ed                	bnez	s1,480e <fourfiles+0x82>
+    4826:	03000b93          	li	s7,48
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+    482a:	00007a17          	auipc	s4,0x7
+    482e:	5dea0a13          	addi	s4,s4,1502 # be08 <buf>
+    4832:	00007a97          	auipc	s5,0x7
+    4836:	5d7a8a93          	addi	s5,s5,1495 # be09 <buf+0x1>
+    if(total != N*SZ){
+    483a:	6d85                	lui	s11,0x1
+    483c:	770d8d93          	addi	s11,s11,1904 # 1770 <pipe1+0x34>
+  for(i = 0; i < NCHILD; i++){
+    4840:	03400d13          	li	s10,52
+    4844:	aa1d                	j	497a <fourfiles+0x1ee>
+      printf("fork failed\n", s);
+    4846:	f5843583          	ld	a1,-168(s0)
+    484a:	00002517          	auipc	a0,0x2
+    484e:	1f650513          	addi	a0,a0,502 # 6a40 <malloc+0xd9c>
+    4852:	00001097          	auipc	ra,0x1
+    4856:	39a080e7          	jalr	922(ra) # 5bec <printf>
+      exit(1);
+    485a:	4505                	li	a0,1
+    485c:	00001097          	auipc	ra,0x1
+    4860:	fe6080e7          	jalr	-26(ra) # 5842 <exit>
+      fd = open(fname, O_CREATE | O_RDWR);
+    4864:	20200593          	li	a1,514
+    4868:	854e                	mv	a0,s3
+    486a:	00001097          	auipc	ra,0x1
+    486e:	018080e7          	jalr	24(ra) # 5882 <open>
+    4872:	892a                	mv	s2,a0
+      if(fd < 0){
+    4874:	04054763          	bltz	a0,48c2 <fourfiles+0x136>
+      memset(buf, '0'+pi, SZ);
+    4878:	1f400613          	li	a2,500
+    487c:	0304859b          	addiw	a1,s1,48
+    4880:	00007517          	auipc	a0,0x7
+    4884:	58850513          	addi	a0,a0,1416 # be08 <buf>
+    4888:	00001097          	auipc	ra,0x1
+    488c:	dc0080e7          	jalr	-576(ra) # 5648 <memset>
+    4890:	44b1                	li	s1,12
+        if((n = write(fd, buf, SZ)) != SZ){
+    4892:	00007997          	auipc	s3,0x7
+    4896:	57698993          	addi	s3,s3,1398 # be08 <buf>
+    489a:	1f400613          	li	a2,500
+    489e:	85ce                	mv	a1,s3
+    48a0:	854a                	mv	a0,s2
+    48a2:	00001097          	auipc	ra,0x1
+    48a6:	fc0080e7          	jalr	-64(ra) # 5862 <write>
+    48aa:	85aa                	mv	a1,a0
+    48ac:	1f400793          	li	a5,500
+    48b0:	02f51863          	bne	a0,a5,48e0 <fourfiles+0x154>
+      for(i = 0; i < N; i++){
+    48b4:	34fd                	addiw	s1,s1,-1
+    48b6:	f0f5                	bnez	s1,489a <fourfiles+0x10e>
+      exit(0);
+    48b8:	4501                	li	a0,0
+    48ba:	00001097          	auipc	ra,0x1
+    48be:	f88080e7          	jalr	-120(ra) # 5842 <exit>
+        printf("create failed\n", s);
+    48c2:	f5843583          	ld	a1,-168(s0)
+    48c6:	00003517          	auipc	a0,0x3
+    48ca:	18250513          	addi	a0,a0,386 # 7a48 <malloc+0x1da4>
+    48ce:	00001097          	auipc	ra,0x1
+    48d2:	31e080e7          	jalr	798(ra) # 5bec <printf>
+        exit(1);
+    48d6:	4505                	li	a0,1
+    48d8:	00001097          	auipc	ra,0x1
+    48dc:	f6a080e7          	jalr	-150(ra) # 5842 <exit>
+          printf("write failed %d\n", n);
+    48e0:	00003517          	auipc	a0,0x3
+    48e4:	17850513          	addi	a0,a0,376 # 7a58 <malloc+0x1db4>
+    48e8:	00001097          	auipc	ra,0x1
+    48ec:	304080e7          	jalr	772(ra) # 5bec <printf>
+          exit(1);
+    48f0:	4505                	li	a0,1
+    48f2:	00001097          	auipc	ra,0x1
+    48f6:	f50080e7          	jalr	-176(ra) # 5842 <exit>
+      exit(xstatus);
+    48fa:	855a                	mv	a0,s6
+    48fc:	00001097          	auipc	ra,0x1
+    4900:	f46080e7          	jalr	-186(ra) # 5842 <exit>
+          printf("wrong char\n", s);
+    4904:	f5843583          	ld	a1,-168(s0)
+    4908:	00003517          	auipc	a0,0x3
+    490c:	16850513          	addi	a0,a0,360 # 7a70 <malloc+0x1dcc>
+    4910:	00001097          	auipc	ra,0x1
+    4914:	2dc080e7          	jalr	732(ra) # 5bec <printf>
+          exit(1);
+    4918:	4505                	li	a0,1
+    491a:	00001097          	auipc	ra,0x1
+    491e:	f28080e7          	jalr	-216(ra) # 5842 <exit>
+      total += n;
+    4922:	00a9093b          	addw	s2,s2,a0
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+    4926:	660d                	lui	a2,0x3
+    4928:	85d2                	mv	a1,s4
+    492a:	854e                	mv	a0,s3
+    492c:	00001097          	auipc	ra,0x1
+    4930:	f2e080e7          	jalr	-210(ra) # 585a <read>
+    4934:	02a05363          	blez	a0,495a <fourfiles+0x1ce>
+    4938:	00007797          	auipc	a5,0x7
+    493c:	4d078793          	addi	a5,a5,1232 # be08 <buf>
+    4940:	fff5069b          	addiw	a3,a0,-1
+    4944:	1682                	slli	a3,a3,0x20
+    4946:	9281                	srli	a3,a3,0x20
+    4948:	96d6                	add	a3,a3,s5
+        if(buf[j] != '0'+i){
+    494a:	0007c703          	lbu	a4,0(a5)
+    494e:	fa971be3          	bne	a4,s1,4904 <fourfiles+0x178>
+      for(j = 0; j < n; j++){
+    4952:	0785                	addi	a5,a5,1
+    4954:	fed79be3          	bne	a5,a3,494a <fourfiles+0x1be>
+    4958:	b7e9                	j	4922 <fourfiles+0x196>
+    close(fd);
+    495a:	854e                	mv	a0,s3
+    495c:	00001097          	auipc	ra,0x1
+    4960:	f0e080e7          	jalr	-242(ra) # 586a <close>
+    if(total != N*SZ){
+    4964:	03b91863          	bne	s2,s11,4994 <fourfiles+0x208>
+    unlink(fname);
+    4968:	8566                	mv	a0,s9
+    496a:	00001097          	auipc	ra,0x1
+    496e:	f28080e7          	jalr	-216(ra) # 5892 <unlink>
+  for(i = 0; i < NCHILD; i++){
+    4972:	0c21                	addi	s8,s8,8
+    4974:	2b85                	addiw	s7,s7,1
+    4976:	03ab8d63          	beq	s7,s10,49b0 <fourfiles+0x224>
+    fname = names[i];
+    497a:	000c3c83          	ld	s9,0(s8)
+    fd = open(fname, 0);
+    497e:	4581                	li	a1,0
+    4980:	8566                	mv	a0,s9
+    4982:	00001097          	auipc	ra,0x1
+    4986:	f00080e7          	jalr	-256(ra) # 5882 <open>
+    498a:	89aa                	mv	s3,a0
+    total = 0;
+    498c:	895a                	mv	s2,s6
+        if(buf[j] != '0'+i){
+    498e:	000b849b          	sext.w	s1,s7
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+    4992:	bf51                	j	4926 <fourfiles+0x19a>
+      printf("wrong length %d\n", total);
+    4994:	85ca                	mv	a1,s2
+    4996:	00003517          	auipc	a0,0x3
+    499a:	0ea50513          	addi	a0,a0,234 # 7a80 <malloc+0x1ddc>
+    499e:	00001097          	auipc	ra,0x1
+    49a2:	24e080e7          	jalr	590(ra) # 5bec <printf>
+      exit(1);
+    49a6:	4505                	li	a0,1
+    49a8:	00001097          	auipc	ra,0x1
+    49ac:	e9a080e7          	jalr	-358(ra) # 5842 <exit>
+}
+    49b0:	70aa                	ld	ra,168(sp)
+    49b2:	740a                	ld	s0,160(sp)
+    49b4:	64ea                	ld	s1,152(sp)
+    49b6:	694a                	ld	s2,144(sp)
+    49b8:	69aa                	ld	s3,136(sp)
+    49ba:	6a0a                	ld	s4,128(sp)
+    49bc:	7ae6                	ld	s5,120(sp)
+    49be:	7b46                	ld	s6,112(sp)
+    49c0:	7ba6                	ld	s7,104(sp)
+    49c2:	7c06                	ld	s8,96(sp)
+    49c4:	6ce6                	ld	s9,88(sp)
+    49c6:	6d46                	ld	s10,80(sp)
+    49c8:	6da6                	ld	s11,72(sp)
+    49ca:	614d                	addi	sp,sp,176
+    49cc:	8082                	ret
+
+00000000000049ce <concreate>:
+{
+    49ce:	7135                	addi	sp,sp,-160
+    49d0:	ed06                	sd	ra,152(sp)
+    49d2:	e922                	sd	s0,144(sp)
+    49d4:	e526                	sd	s1,136(sp)
+    49d6:	e14a                	sd	s2,128(sp)
+    49d8:	fcce                	sd	s3,120(sp)
+    49da:	f8d2                	sd	s4,112(sp)
+    49dc:	f4d6                	sd	s5,104(sp)
+    49de:	f0da                	sd	s6,96(sp)
+    49e0:	ecde                	sd	s7,88(sp)
+    49e2:	1100                	addi	s0,sp,160
+    49e4:	89aa                	mv	s3,a0
+  file[0] = 'C';
+    49e6:	04300793          	li	a5,67
+    49ea:	faf40423          	sb	a5,-88(s0)
+  file[2] = '\0';
+    49ee:	fa040523          	sb	zero,-86(s0)
+  for(i = 0; i < N; i++){
+    49f2:	4901                	li	s2,0
+    if(pid && (i % 3) == 1){
+    49f4:	4b0d                	li	s6,3
+    49f6:	4a85                	li	s5,1
+      link("C0", file);
+    49f8:	00003b97          	auipc	s7,0x3
+    49fc:	0a0b8b93          	addi	s7,s7,160 # 7a98 <malloc+0x1df4>
+  for(i = 0; i < N; i++){
+    4a00:	02800a13          	li	s4,40
+    4a04:	acc9                	j	4cd6 <concreate+0x308>
+      link("C0", file);
+    4a06:	fa840593          	addi	a1,s0,-88
+    4a0a:	855e                	mv	a0,s7
+    4a0c:	00001097          	auipc	ra,0x1
+    4a10:	e96080e7          	jalr	-362(ra) # 58a2 <link>
+    if(pid == 0) {
+    4a14:	a465                	j	4cbc <concreate+0x2ee>
+    } else if(pid == 0 && (i % 5) == 1){
+    4a16:	4795                	li	a5,5
+    4a18:	02f9693b          	remw	s2,s2,a5
+    4a1c:	4785                	li	a5,1
+    4a1e:	02f90b63          	beq	s2,a5,4a54 <concreate+0x86>
+      fd = open(file, O_CREATE | O_RDWR);
+    4a22:	20200593          	li	a1,514
+    4a26:	fa840513          	addi	a0,s0,-88
+    4a2a:	00001097          	auipc	ra,0x1
+    4a2e:	e58080e7          	jalr	-424(ra) # 5882 <open>
+      if(fd < 0){
+    4a32:	26055c63          	bgez	a0,4caa <concreate+0x2dc>
+        printf("concreate create %s failed\n", file);
+    4a36:	fa840593          	addi	a1,s0,-88
+    4a3a:	00003517          	auipc	a0,0x3
+    4a3e:	06650513          	addi	a0,a0,102 # 7aa0 <malloc+0x1dfc>
+    4a42:	00001097          	auipc	ra,0x1
+    4a46:	1aa080e7          	jalr	426(ra) # 5bec <printf>
+        exit(1);
+    4a4a:	4505                	li	a0,1
+    4a4c:	00001097          	auipc	ra,0x1
+    4a50:	df6080e7          	jalr	-522(ra) # 5842 <exit>
+      link("C0", file);
+    4a54:	fa840593          	addi	a1,s0,-88
+    4a58:	00003517          	auipc	a0,0x3
+    4a5c:	04050513          	addi	a0,a0,64 # 7a98 <malloc+0x1df4>
+    4a60:	00001097          	auipc	ra,0x1
+    4a64:	e42080e7          	jalr	-446(ra) # 58a2 <link>
+      exit(0);
+    4a68:	4501                	li	a0,0
+    4a6a:	00001097          	auipc	ra,0x1
+    4a6e:	dd8080e7          	jalr	-552(ra) # 5842 <exit>
+        exit(1);
+    4a72:	4505                	li	a0,1
+    4a74:	00001097          	auipc	ra,0x1
+    4a78:	dce080e7          	jalr	-562(ra) # 5842 <exit>
+  memset(fa, 0, sizeof(fa));
+    4a7c:	02800613          	li	a2,40
+    4a80:	4581                	li	a1,0
+    4a82:	f8040513          	addi	a0,s0,-128
+    4a86:	00001097          	auipc	ra,0x1
+    4a8a:	bc2080e7          	jalr	-1086(ra) # 5648 <memset>
+  fd = open(".", 0);
+    4a8e:	4581                	li	a1,0
+    4a90:	00002517          	auipc	a0,0x2
+    4a94:	9f050513          	addi	a0,a0,-1552 # 6480 <malloc+0x7dc>
+    4a98:	00001097          	auipc	ra,0x1
+    4a9c:	dea080e7          	jalr	-534(ra) # 5882 <open>
+    4aa0:	892a                	mv	s2,a0
+  n = 0;
+    4aa2:	8aa6                	mv	s5,s1
+    if(de.name[0] == 'C' && de.name[2] == '\0'){
+    4aa4:	04300a13          	li	s4,67
+      if(i < 0 || i >= sizeof(fa)){
+    4aa8:	02700b13          	li	s6,39
+      fa[i] = 1;
+    4aac:	4b85                	li	s7,1
+  while(read(fd, &de, sizeof(de)) > 0){
+    4aae:	4641                	li	a2,16
+    4ab0:	f7040593          	addi	a1,s0,-144
+    4ab4:	854a                	mv	a0,s2
+    4ab6:	00001097          	auipc	ra,0x1
+    4aba:	da4080e7          	jalr	-604(ra) # 585a <read>
+    4abe:	08a05263          	blez	a0,4b42 <concreate+0x174>
+    if(de.inum == 0)
+    4ac2:	f7045783          	lhu	a5,-144(s0)
+    4ac6:	d7e5                	beqz	a5,4aae <concreate+0xe0>
+    if(de.name[0] == 'C' && de.name[2] == '\0'){
+    4ac8:	f7244783          	lbu	a5,-142(s0)
+    4acc:	ff4791e3          	bne	a5,s4,4aae <concreate+0xe0>
+    4ad0:	f7444783          	lbu	a5,-140(s0)
+    4ad4:	ffe9                	bnez	a5,4aae <concreate+0xe0>
+      i = de.name[1] - '0';
+    4ad6:	f7344783          	lbu	a5,-141(s0)
+    4ada:	fd07879b          	addiw	a5,a5,-48
+    4ade:	0007871b          	sext.w	a4,a5
+      if(i < 0 || i >= sizeof(fa)){
+    4ae2:	02eb6063          	bltu	s6,a4,4b02 <concreate+0x134>
+      if(fa[i]){
+    4ae6:	fb070793          	addi	a5,a4,-80 # fb0 <bigdir+0x50>
+    4aea:	97a2                	add	a5,a5,s0
+    4aec:	fd07c783          	lbu	a5,-48(a5)
+    4af0:	eb8d                	bnez	a5,4b22 <concreate+0x154>
+      fa[i] = 1;
+    4af2:	fb070793          	addi	a5,a4,-80
+    4af6:	00878733          	add	a4,a5,s0
+    4afa:	fd770823          	sb	s7,-48(a4)
+      n++;
+    4afe:	2a85                	addiw	s5,s5,1
+    4b00:	b77d                	j	4aae <concreate+0xe0>
+        printf("%s: concreate weird file %s\n", s, de.name);
+    4b02:	f7240613          	addi	a2,s0,-142
+    4b06:	85ce                	mv	a1,s3
+    4b08:	00003517          	auipc	a0,0x3
+    4b0c:	fb850513          	addi	a0,a0,-72 # 7ac0 <malloc+0x1e1c>
+    4b10:	00001097          	auipc	ra,0x1
+    4b14:	0dc080e7          	jalr	220(ra) # 5bec <printf>
+        exit(1);
+    4b18:	4505                	li	a0,1
+    4b1a:	00001097          	auipc	ra,0x1
+    4b1e:	d28080e7          	jalr	-728(ra) # 5842 <exit>
+        printf("%s: concreate duplicate file %s\n", s, de.name);
+    4b22:	f7240613          	addi	a2,s0,-142
+    4b26:	85ce                	mv	a1,s3
+    4b28:	00003517          	auipc	a0,0x3
+    4b2c:	fb850513          	addi	a0,a0,-72 # 7ae0 <malloc+0x1e3c>
+    4b30:	00001097          	auipc	ra,0x1
+    4b34:	0bc080e7          	jalr	188(ra) # 5bec <printf>
+        exit(1);
+    4b38:	4505                	li	a0,1
+    4b3a:	00001097          	auipc	ra,0x1
+    4b3e:	d08080e7          	jalr	-760(ra) # 5842 <exit>
+  close(fd);
+    4b42:	854a                	mv	a0,s2
+    4b44:	00001097          	auipc	ra,0x1
+    4b48:	d26080e7          	jalr	-730(ra) # 586a <close>
+  if(n != N){
+    4b4c:	02800793          	li	a5,40
+    4b50:	00fa9763          	bne	s5,a5,4b5e <concreate+0x190>
+    if(((i % 3) == 0 && pid == 0) ||
+    4b54:	4a8d                	li	s5,3
+    4b56:	4b05                	li	s6,1
+  for(i = 0; i < N; i++){
+    4b58:	02800a13          	li	s4,40
+    4b5c:	a8c9                	j	4c2e <concreate+0x260>
+    printf("%s: concreate not enough files in directory listing\n", s);
+    4b5e:	85ce                	mv	a1,s3
+    4b60:	00003517          	auipc	a0,0x3
+    4b64:	fa850513          	addi	a0,a0,-88 # 7b08 <malloc+0x1e64>
+    4b68:	00001097          	auipc	ra,0x1
+    4b6c:	084080e7          	jalr	132(ra) # 5bec <printf>
+    exit(1);
+    4b70:	4505                	li	a0,1
+    4b72:	00001097          	auipc	ra,0x1
+    4b76:	cd0080e7          	jalr	-816(ra) # 5842 <exit>
+      printf("%s: fork failed\n", s);
+    4b7a:	85ce                	mv	a1,s3
+    4b7c:	00002517          	auipc	a0,0x2
+    4b80:	aa450513          	addi	a0,a0,-1372 # 6620 <malloc+0x97c>
+    4b84:	00001097          	auipc	ra,0x1
+    4b88:	068080e7          	jalr	104(ra) # 5bec <printf>
+      exit(1);
+    4b8c:	4505                	li	a0,1
+    4b8e:	00001097          	auipc	ra,0x1
+    4b92:	cb4080e7          	jalr	-844(ra) # 5842 <exit>
+      close(open(file, 0));
+    4b96:	4581                	li	a1,0
+    4b98:	fa840513          	addi	a0,s0,-88
+    4b9c:	00001097          	auipc	ra,0x1
+    4ba0:	ce6080e7          	jalr	-794(ra) # 5882 <open>
+    4ba4:	00001097          	auipc	ra,0x1
+    4ba8:	cc6080e7          	jalr	-826(ra) # 586a <close>
+      close(open(file, 0));
+    4bac:	4581                	li	a1,0
+    4bae:	fa840513          	addi	a0,s0,-88
+    4bb2:	00001097          	auipc	ra,0x1
+    4bb6:	cd0080e7          	jalr	-816(ra) # 5882 <open>
+    4bba:	00001097          	auipc	ra,0x1
+    4bbe:	cb0080e7          	jalr	-848(ra) # 586a <close>
+      close(open(file, 0));
+    4bc2:	4581                	li	a1,0
+    4bc4:	fa840513          	addi	a0,s0,-88
+    4bc8:	00001097          	auipc	ra,0x1
+    4bcc:	cba080e7          	jalr	-838(ra) # 5882 <open>
+    4bd0:	00001097          	auipc	ra,0x1
+    4bd4:	c9a080e7          	jalr	-870(ra) # 586a <close>
+      close(open(file, 0));
+    4bd8:	4581                	li	a1,0
+    4bda:	fa840513          	addi	a0,s0,-88
+    4bde:	00001097          	auipc	ra,0x1
+    4be2:	ca4080e7          	jalr	-860(ra) # 5882 <open>
+    4be6:	00001097          	auipc	ra,0x1
+    4bea:	c84080e7          	jalr	-892(ra) # 586a <close>
+      close(open(file, 0));
+    4bee:	4581                	li	a1,0
+    4bf0:	fa840513          	addi	a0,s0,-88
+    4bf4:	00001097          	auipc	ra,0x1
+    4bf8:	c8e080e7          	jalr	-882(ra) # 5882 <open>
+    4bfc:	00001097          	auipc	ra,0x1
+    4c00:	c6e080e7          	jalr	-914(ra) # 586a <close>
+      close(open(file, 0));
+    4c04:	4581                	li	a1,0
+    4c06:	fa840513          	addi	a0,s0,-88
+    4c0a:	00001097          	auipc	ra,0x1
+    4c0e:	c78080e7          	jalr	-904(ra) # 5882 <open>
+    4c12:	00001097          	auipc	ra,0x1
+    4c16:	c58080e7          	jalr	-936(ra) # 586a <close>
+    if(pid == 0)
+    4c1a:	08090363          	beqz	s2,4ca0 <concreate+0x2d2>
+      wait(0);
+    4c1e:	4501                	li	a0,0
+    4c20:	00001097          	auipc	ra,0x1
+    4c24:	c2a080e7          	jalr	-982(ra) # 584a <wait>
+  for(i = 0; i < N; i++){
+    4c28:	2485                	addiw	s1,s1,1
+    4c2a:	0f448563          	beq	s1,s4,4d14 <concreate+0x346>
+    file[1] = '0' + i;
+    4c2e:	0304879b          	addiw	a5,s1,48
+    4c32:	faf404a3          	sb	a5,-87(s0)
+    pid = fork();
+    4c36:	00001097          	auipc	ra,0x1
+    4c3a:	c04080e7          	jalr	-1020(ra) # 583a <fork>
+    4c3e:	892a                	mv	s2,a0
+    if(pid < 0){
+    4c40:	f2054de3          	bltz	a0,4b7a <concreate+0x1ac>
+    if(((i % 3) == 0 && pid == 0) ||
+    4c44:	0354e73b          	remw	a4,s1,s5
+    4c48:	00a767b3          	or	a5,a4,a0
+    4c4c:	2781                	sext.w	a5,a5
+    4c4e:	d7a1                	beqz	a5,4b96 <concreate+0x1c8>
+    4c50:	01671363          	bne	a4,s6,4c56 <concreate+0x288>
+       ((i % 3) == 1 && pid != 0)){
+    4c54:	f129                	bnez	a0,4b96 <concreate+0x1c8>
+      unlink(file);
+    4c56:	fa840513          	addi	a0,s0,-88
+    4c5a:	00001097          	auipc	ra,0x1
+    4c5e:	c38080e7          	jalr	-968(ra) # 5892 <unlink>
+      unlink(file);
+    4c62:	fa840513          	addi	a0,s0,-88
+    4c66:	00001097          	auipc	ra,0x1
+    4c6a:	c2c080e7          	jalr	-980(ra) # 5892 <unlink>
+      unlink(file);
+    4c6e:	fa840513          	addi	a0,s0,-88
+    4c72:	00001097          	auipc	ra,0x1
+    4c76:	c20080e7          	jalr	-992(ra) # 5892 <unlink>
+      unlink(file);
+    4c7a:	fa840513          	addi	a0,s0,-88
+    4c7e:	00001097          	auipc	ra,0x1
+    4c82:	c14080e7          	jalr	-1004(ra) # 5892 <unlink>
+      unlink(file);
+    4c86:	fa840513          	addi	a0,s0,-88
+    4c8a:	00001097          	auipc	ra,0x1
+    4c8e:	c08080e7          	jalr	-1016(ra) # 5892 <unlink>
+      unlink(file);
+    4c92:	fa840513          	addi	a0,s0,-88
+    4c96:	00001097          	auipc	ra,0x1
+    4c9a:	bfc080e7          	jalr	-1028(ra) # 5892 <unlink>
+    4c9e:	bfb5                	j	4c1a <concreate+0x24c>
+      exit(0);
+    4ca0:	4501                	li	a0,0
+    4ca2:	00001097          	auipc	ra,0x1
+    4ca6:	ba0080e7          	jalr	-1120(ra) # 5842 <exit>
+      close(fd);
+    4caa:	00001097          	auipc	ra,0x1
+    4cae:	bc0080e7          	jalr	-1088(ra) # 586a <close>
+    if(pid == 0) {
+    4cb2:	bb5d                	j	4a68 <concreate+0x9a>
+      close(fd);
+    4cb4:	00001097          	auipc	ra,0x1
+    4cb8:	bb6080e7          	jalr	-1098(ra) # 586a <close>
+      wait(&xstatus);
+    4cbc:	f6c40513          	addi	a0,s0,-148
+    4cc0:	00001097          	auipc	ra,0x1
+    4cc4:	b8a080e7          	jalr	-1142(ra) # 584a <wait>
+      if(xstatus != 0)
+    4cc8:	f6c42483          	lw	s1,-148(s0)
+    4ccc:	da0493e3          	bnez	s1,4a72 <concreate+0xa4>
+  for(i = 0; i < N; i++){
+    4cd0:	2905                	addiw	s2,s2,1
+    4cd2:	db4905e3          	beq	s2,s4,4a7c <concreate+0xae>
+    file[1] = '0' + i;
+    4cd6:	0309079b          	addiw	a5,s2,48
+    4cda:	faf404a3          	sb	a5,-87(s0)
+    unlink(file);
+    4cde:	fa840513          	addi	a0,s0,-88
+    4ce2:	00001097          	auipc	ra,0x1
+    4ce6:	bb0080e7          	jalr	-1104(ra) # 5892 <unlink>
+    pid = fork();
+    4cea:	00001097          	auipc	ra,0x1
+    4cee:	b50080e7          	jalr	-1200(ra) # 583a <fork>
+    if(pid && (i % 3) == 1){
+    4cf2:	d20502e3          	beqz	a0,4a16 <concreate+0x48>
+    4cf6:	036967bb          	remw	a5,s2,s6
+    4cfa:	d15786e3          	beq	a5,s5,4a06 <concreate+0x38>
+      fd = open(file, O_CREATE | O_RDWR);
+    4cfe:	20200593          	li	a1,514
+    4d02:	fa840513          	addi	a0,s0,-88
+    4d06:	00001097          	auipc	ra,0x1
+    4d0a:	b7c080e7          	jalr	-1156(ra) # 5882 <open>
+      if(fd < 0){
+    4d0e:	fa0553e3          	bgez	a0,4cb4 <concreate+0x2e6>
+    4d12:	b315                	j	4a36 <concreate+0x68>
+}
+    4d14:	60ea                	ld	ra,152(sp)
+    4d16:	644a                	ld	s0,144(sp)
+    4d18:	64aa                	ld	s1,136(sp)
+    4d1a:	690a                	ld	s2,128(sp)
+    4d1c:	79e6                	ld	s3,120(sp)
+    4d1e:	7a46                	ld	s4,112(sp)
+    4d20:	7aa6                	ld	s5,104(sp)
+    4d22:	7b06                	ld	s6,96(sp)
+    4d24:	6be6                	ld	s7,88(sp)
+    4d26:	610d                	addi	sp,sp,160
+    4d28:	8082                	ret
+
+0000000000004d2a <bigfile>:
+{
+    4d2a:	7139                	addi	sp,sp,-64
+    4d2c:	fc06                	sd	ra,56(sp)
+    4d2e:	f822                	sd	s0,48(sp)
+    4d30:	f426                	sd	s1,40(sp)
+    4d32:	f04a                	sd	s2,32(sp)
+    4d34:	ec4e                	sd	s3,24(sp)
+    4d36:	e852                	sd	s4,16(sp)
+    4d38:	e456                	sd	s5,8(sp)
+    4d3a:	0080                	addi	s0,sp,64
+    4d3c:	8aaa                	mv	s5,a0
+  unlink("bigfile.dat");
+    4d3e:	00003517          	auipc	a0,0x3
+    4d42:	e0250513          	addi	a0,a0,-510 # 7b40 <malloc+0x1e9c>
+    4d46:	00001097          	auipc	ra,0x1
+    4d4a:	b4c080e7          	jalr	-1204(ra) # 5892 <unlink>
+  fd = open("bigfile.dat", O_CREATE | O_RDWR);
+    4d4e:	20200593          	li	a1,514
+    4d52:	00003517          	auipc	a0,0x3
+    4d56:	dee50513          	addi	a0,a0,-530 # 7b40 <malloc+0x1e9c>
+    4d5a:	00001097          	auipc	ra,0x1
+    4d5e:	b28080e7          	jalr	-1240(ra) # 5882 <open>
+    4d62:	89aa                	mv	s3,a0
+  for(i = 0; i < N; i++){
+    4d64:	4481                	li	s1,0
+    memset(buf, i, SZ);
+    4d66:	00007917          	auipc	s2,0x7
+    4d6a:	0a290913          	addi	s2,s2,162 # be08 <buf>
+  for(i = 0; i < N; i++){
+    4d6e:	4a51                	li	s4,20
+  if(fd < 0){
+    4d70:	0a054063          	bltz	a0,4e10 <bigfile+0xe6>
+    memset(buf, i, SZ);
+    4d74:	25800613          	li	a2,600
+    4d78:	85a6                	mv	a1,s1
+    4d7a:	854a                	mv	a0,s2
+    4d7c:	00001097          	auipc	ra,0x1
+    4d80:	8cc080e7          	jalr	-1844(ra) # 5648 <memset>
+    if(write(fd, buf, SZ) != SZ){
+    4d84:	25800613          	li	a2,600
+    4d88:	85ca                	mv	a1,s2
+    4d8a:	854e                	mv	a0,s3
+    4d8c:	00001097          	auipc	ra,0x1
+    4d90:	ad6080e7          	jalr	-1322(ra) # 5862 <write>
+    4d94:	25800793          	li	a5,600
+    4d98:	08f51a63          	bne	a0,a5,4e2c <bigfile+0x102>
+  for(i = 0; i < N; i++){
+    4d9c:	2485                	addiw	s1,s1,1
+    4d9e:	fd449be3          	bne	s1,s4,4d74 <bigfile+0x4a>
+  close(fd);
+    4da2:	854e                	mv	a0,s3
+    4da4:	00001097          	auipc	ra,0x1
+    4da8:	ac6080e7          	jalr	-1338(ra) # 586a <close>
+  fd = open("bigfile.dat", 0);
+    4dac:	4581                	li	a1,0
+    4dae:	00003517          	auipc	a0,0x3
+    4db2:	d9250513          	addi	a0,a0,-622 # 7b40 <malloc+0x1e9c>
+    4db6:	00001097          	auipc	ra,0x1
+    4dba:	acc080e7          	jalr	-1332(ra) # 5882 <open>
+    4dbe:	8a2a                	mv	s4,a0
+  total = 0;
+    4dc0:	4981                	li	s3,0
+  for(i = 0; ; i++){
+    4dc2:	4481                	li	s1,0
+    cc = read(fd, buf, SZ/2);
+    4dc4:	00007917          	auipc	s2,0x7
+    4dc8:	04490913          	addi	s2,s2,68 # be08 <buf>
+  if(fd < 0){
+    4dcc:	06054e63          	bltz	a0,4e48 <bigfile+0x11e>
+    cc = read(fd, buf, SZ/2);
+    4dd0:	12c00613          	li	a2,300
+    4dd4:	85ca                	mv	a1,s2
+    4dd6:	8552                	mv	a0,s4
+    4dd8:	00001097          	auipc	ra,0x1
+    4ddc:	a82080e7          	jalr	-1406(ra) # 585a <read>
+    if(cc < 0){
+    4de0:	08054263          	bltz	a0,4e64 <bigfile+0x13a>
+    if(cc == 0)
+    4de4:	c971                	beqz	a0,4eb8 <bigfile+0x18e>
+    if(cc != SZ/2){
+    4de6:	12c00793          	li	a5,300
+    4dea:	08f51b63          	bne	a0,a5,4e80 <bigfile+0x156>
+    if(buf[0] != i/2 || buf[SZ/2-1] != i/2){
+    4dee:	01f4d79b          	srliw	a5,s1,0x1f
+    4df2:	9fa5                	addw	a5,a5,s1
+    4df4:	4017d79b          	sraiw	a5,a5,0x1
+    4df8:	00094703          	lbu	a4,0(s2)
+    4dfc:	0af71063          	bne	a4,a5,4e9c <bigfile+0x172>
+    4e00:	12b94703          	lbu	a4,299(s2)
+    4e04:	08f71c63          	bne	a4,a5,4e9c <bigfile+0x172>
+    total += cc;
+    4e08:	12c9899b          	addiw	s3,s3,300
+  for(i = 0; ; i++){
+    4e0c:	2485                	addiw	s1,s1,1
+    cc = read(fd, buf, SZ/2);
+    4e0e:	b7c9                	j	4dd0 <bigfile+0xa6>
+    printf("%s: cannot create bigfile", s);
+    4e10:	85d6                	mv	a1,s5
+    4e12:	00003517          	auipc	a0,0x3
+    4e16:	d3e50513          	addi	a0,a0,-706 # 7b50 <malloc+0x1eac>
+    4e1a:	00001097          	auipc	ra,0x1
+    4e1e:	dd2080e7          	jalr	-558(ra) # 5bec <printf>
+    exit(1);
+    4e22:	4505                	li	a0,1
+    4e24:	00001097          	auipc	ra,0x1
+    4e28:	a1e080e7          	jalr	-1506(ra) # 5842 <exit>
+      printf("%s: write bigfile failed\n", s);
+    4e2c:	85d6                	mv	a1,s5
+    4e2e:	00003517          	auipc	a0,0x3
+    4e32:	d4250513          	addi	a0,a0,-702 # 7b70 <malloc+0x1ecc>
+    4e36:	00001097          	auipc	ra,0x1
+    4e3a:	db6080e7          	jalr	-586(ra) # 5bec <printf>
+      exit(1);
+    4e3e:	4505                	li	a0,1
+    4e40:	00001097          	auipc	ra,0x1
+    4e44:	a02080e7          	jalr	-1534(ra) # 5842 <exit>
+    printf("%s: cannot open bigfile\n", s);
+    4e48:	85d6                	mv	a1,s5
+    4e4a:	00003517          	auipc	a0,0x3
+    4e4e:	d4650513          	addi	a0,a0,-698 # 7b90 <malloc+0x1eec>
+    4e52:	00001097          	auipc	ra,0x1
+    4e56:	d9a080e7          	jalr	-614(ra) # 5bec <printf>
+    exit(1);
+    4e5a:	4505                	li	a0,1
+    4e5c:	00001097          	auipc	ra,0x1
+    4e60:	9e6080e7          	jalr	-1562(ra) # 5842 <exit>
+      printf("%s: read bigfile failed\n", s);
+    4e64:	85d6                	mv	a1,s5
+    4e66:	00003517          	auipc	a0,0x3
+    4e6a:	d4a50513          	addi	a0,a0,-694 # 7bb0 <malloc+0x1f0c>
+    4e6e:	00001097          	auipc	ra,0x1
+    4e72:	d7e080e7          	jalr	-642(ra) # 5bec <printf>
+      exit(1);
+    4e76:	4505                	li	a0,1
+    4e78:	00001097          	auipc	ra,0x1
+    4e7c:	9ca080e7          	jalr	-1590(ra) # 5842 <exit>
+      printf("%s: short read bigfile\n", s);
+    4e80:	85d6                	mv	a1,s5
+    4e82:	00003517          	auipc	a0,0x3
+    4e86:	d4e50513          	addi	a0,a0,-690 # 7bd0 <malloc+0x1f2c>
+    4e8a:	00001097          	auipc	ra,0x1
+    4e8e:	d62080e7          	jalr	-670(ra) # 5bec <printf>
+      exit(1);
+    4e92:	4505                	li	a0,1
+    4e94:	00001097          	auipc	ra,0x1
+    4e98:	9ae080e7          	jalr	-1618(ra) # 5842 <exit>
+      printf("%s: read bigfile wrong data\n", s);
+    4e9c:	85d6                	mv	a1,s5
+    4e9e:	00003517          	auipc	a0,0x3
+    4ea2:	d4a50513          	addi	a0,a0,-694 # 7be8 <malloc+0x1f44>
+    4ea6:	00001097          	auipc	ra,0x1
+    4eaa:	d46080e7          	jalr	-698(ra) # 5bec <printf>
+      exit(1);
+    4eae:	4505                	li	a0,1
+    4eb0:	00001097          	auipc	ra,0x1
+    4eb4:	992080e7          	jalr	-1646(ra) # 5842 <exit>
+  close(fd);
+    4eb8:	8552                	mv	a0,s4
+    4eba:	00001097          	auipc	ra,0x1
+    4ebe:	9b0080e7          	jalr	-1616(ra) # 586a <close>
+  if(total != N*SZ){
+    4ec2:	678d                	lui	a5,0x3
+    4ec4:	ee078793          	addi	a5,a5,-288 # 2ee0 <fourteen+0x110>
+    4ec8:	02f99363          	bne	s3,a5,4eee <bigfile+0x1c4>
+  unlink("bigfile.dat");
+    4ecc:	00003517          	auipc	a0,0x3
+    4ed0:	c7450513          	addi	a0,a0,-908 # 7b40 <malloc+0x1e9c>
+    4ed4:	00001097          	auipc	ra,0x1
+    4ed8:	9be080e7          	jalr	-1602(ra) # 5892 <unlink>
+}
+    4edc:	70e2                	ld	ra,56(sp)
+    4ede:	7442                	ld	s0,48(sp)
+    4ee0:	74a2                	ld	s1,40(sp)
+    4ee2:	7902                	ld	s2,32(sp)
+    4ee4:	69e2                	ld	s3,24(sp)
+    4ee6:	6a42                	ld	s4,16(sp)
+    4ee8:	6aa2                	ld	s5,8(sp)
+    4eea:	6121                	addi	sp,sp,64
+    4eec:	8082                	ret
+    printf("%s: read bigfile wrong total\n", s);
+    4eee:	85d6                	mv	a1,s5
+    4ef0:	00003517          	auipc	a0,0x3
+    4ef4:	d1850513          	addi	a0,a0,-744 # 7c08 <malloc+0x1f64>
+    4ef8:	00001097          	auipc	ra,0x1
+    4efc:	cf4080e7          	jalr	-780(ra) # 5bec <printf>
+    exit(1);
+    4f00:	4505                	li	a0,1
+    4f02:	00001097          	auipc	ra,0x1
+    4f06:	940080e7          	jalr	-1728(ra) # 5842 <exit>
+
+0000000000004f0a <fsfull>:
+{
+    4f0a:	7171                	addi	sp,sp,-176
+    4f0c:	f506                	sd	ra,168(sp)
+    4f0e:	f122                	sd	s0,160(sp)
+    4f10:	ed26                	sd	s1,152(sp)
+    4f12:	e94a                	sd	s2,144(sp)
+    4f14:	e54e                	sd	s3,136(sp)
+    4f16:	e152                	sd	s4,128(sp)
+    4f18:	fcd6                	sd	s5,120(sp)
+    4f1a:	f8da                	sd	s6,112(sp)
+    4f1c:	f4de                	sd	s7,104(sp)
+    4f1e:	f0e2                	sd	s8,96(sp)
+    4f20:	ece6                	sd	s9,88(sp)
+    4f22:	e8ea                	sd	s10,80(sp)
+    4f24:	e4ee                	sd	s11,72(sp)
+    4f26:	1900                	addi	s0,sp,176
+  printf("fsfull test\n");
+    4f28:	00003517          	auipc	a0,0x3
+    4f2c:	d0050513          	addi	a0,a0,-768 # 7c28 <malloc+0x1f84>
+    4f30:	00001097          	auipc	ra,0x1
+    4f34:	cbc080e7          	jalr	-836(ra) # 5bec <printf>
+  for(nfiles = 0; ; nfiles++){
+    4f38:	4481                	li	s1,0
+    name[0] = 'f';
+    4f3a:	06600d13          	li	s10,102
+    name[1] = '0' + nfiles / 1000;
+    4f3e:	3e800c13          	li	s8,1000
+    name[2] = '0' + (nfiles % 1000) / 100;
+    4f42:	06400b93          	li	s7,100
+    name[3] = '0' + (nfiles % 100) / 10;
+    4f46:	4b29                	li	s6,10
+    printf("writing %s\n", name);
+    4f48:	00003c97          	auipc	s9,0x3
+    4f4c:	cf0c8c93          	addi	s9,s9,-784 # 7c38 <malloc+0x1f94>
+    int total = 0;
+    4f50:	4d81                	li	s11,0
+      int cc = write(fd, buf, BSIZE);
+    4f52:	00007a17          	auipc	s4,0x7
+    4f56:	eb6a0a13          	addi	s4,s4,-330 # be08 <buf>
+    name[0] = 'f';
+    4f5a:	f5a40823          	sb	s10,-176(s0)
+    name[1] = '0' + nfiles / 1000;
+    4f5e:	0384c7bb          	divw	a5,s1,s8
+    4f62:	0307879b          	addiw	a5,a5,48
+    4f66:	f4f408a3          	sb	a5,-175(s0)
+    name[2] = '0' + (nfiles % 1000) / 100;
+    4f6a:	0384e7bb          	remw	a5,s1,s8
+    4f6e:	0377c7bb          	divw	a5,a5,s7
+    4f72:	0307879b          	addiw	a5,a5,48
+    4f76:	f4f40923          	sb	a5,-174(s0)
+    name[3] = '0' + (nfiles % 100) / 10;
+    4f7a:	0374e7bb          	remw	a5,s1,s7
+    4f7e:	0367c7bb          	divw	a5,a5,s6
+    4f82:	0307879b          	addiw	a5,a5,48
+    4f86:	f4f409a3          	sb	a5,-173(s0)
+    name[4] = '0' + (nfiles % 10);
+    4f8a:	0364e7bb          	remw	a5,s1,s6
+    4f8e:	0307879b          	addiw	a5,a5,48
+    4f92:	f4f40a23          	sb	a5,-172(s0)
+    name[5] = '\0';
+    4f96:	f4040aa3          	sb	zero,-171(s0)
+    printf("writing %s\n", name);
+    4f9a:	f5040593          	addi	a1,s0,-176
+    4f9e:	8566                	mv	a0,s9
+    4fa0:	00001097          	auipc	ra,0x1
+    4fa4:	c4c080e7          	jalr	-948(ra) # 5bec <printf>
+    int fd = open(name, O_CREATE|O_RDWR);
+    4fa8:	20200593          	li	a1,514
+    4fac:	f5040513          	addi	a0,s0,-176
+    4fb0:	00001097          	auipc	ra,0x1
+    4fb4:	8d2080e7          	jalr	-1838(ra) # 5882 <open>
+    4fb8:	892a                	mv	s2,a0
+    if(fd < 0){
+    4fba:	0a055663          	bgez	a0,5066 <fsfull+0x15c>
+      printf("open %s failed\n", name);
+    4fbe:	f5040593          	addi	a1,s0,-176
+    4fc2:	00003517          	auipc	a0,0x3
+    4fc6:	c8650513          	addi	a0,a0,-890 # 7c48 <malloc+0x1fa4>
+    4fca:	00001097          	auipc	ra,0x1
+    4fce:	c22080e7          	jalr	-990(ra) # 5bec <printf>
+  while(nfiles >= 0){
+    4fd2:	0604c363          	bltz	s1,5038 <fsfull+0x12e>
+    name[0] = 'f';
+    4fd6:	06600b13          	li	s6,102
+    name[1] = '0' + nfiles / 1000;
+    4fda:	3e800a13          	li	s4,1000
+    name[2] = '0' + (nfiles % 1000) / 100;
+    4fde:	06400993          	li	s3,100
+    name[3] = '0' + (nfiles % 100) / 10;
+    4fe2:	4929                	li	s2,10
+  while(nfiles >= 0){
+    4fe4:	5afd                	li	s5,-1
+    name[0] = 'f';
+    4fe6:	f5640823          	sb	s6,-176(s0)
+    name[1] = '0' + nfiles / 1000;
+    4fea:	0344c7bb          	divw	a5,s1,s4
+    4fee:	0307879b          	addiw	a5,a5,48
+    4ff2:	f4f408a3          	sb	a5,-175(s0)
+    name[2] = '0' + (nfiles % 1000) / 100;
+    4ff6:	0344e7bb          	remw	a5,s1,s4
+    4ffa:	0337c7bb          	divw	a5,a5,s3
+    4ffe:	0307879b          	addiw	a5,a5,48
+    5002:	f4f40923          	sb	a5,-174(s0)
+    name[3] = '0' + (nfiles % 100) / 10;
+    5006:	0334e7bb          	remw	a5,s1,s3
+    500a:	0327c7bb          	divw	a5,a5,s2
+    500e:	0307879b          	addiw	a5,a5,48
+    5012:	f4f409a3          	sb	a5,-173(s0)
+    name[4] = '0' + (nfiles % 10);
+    5016:	0324e7bb          	remw	a5,s1,s2
+    501a:	0307879b          	addiw	a5,a5,48
+    501e:	f4f40a23          	sb	a5,-172(s0)
+    name[5] = '\0';
+    5022:	f4040aa3          	sb	zero,-171(s0)
+    unlink(name);
+    5026:	f5040513          	addi	a0,s0,-176
+    502a:	00001097          	auipc	ra,0x1
+    502e:	868080e7          	jalr	-1944(ra) # 5892 <unlink>
+    nfiles--;
+    5032:	34fd                	addiw	s1,s1,-1
+  while(nfiles >= 0){
+    5034:	fb5499e3          	bne	s1,s5,4fe6 <fsfull+0xdc>
+  printf("fsfull test finished\n");
+    5038:	00003517          	auipc	a0,0x3
+    503c:	c3050513          	addi	a0,a0,-976 # 7c68 <malloc+0x1fc4>
+    5040:	00001097          	auipc	ra,0x1
+    5044:	bac080e7          	jalr	-1108(ra) # 5bec <printf>
+}
+    5048:	70aa                	ld	ra,168(sp)
+    504a:	740a                	ld	s0,160(sp)
+    504c:	64ea                	ld	s1,152(sp)
+    504e:	694a                	ld	s2,144(sp)
+    5050:	69aa                	ld	s3,136(sp)
+    5052:	6a0a                	ld	s4,128(sp)
+    5054:	7ae6                	ld	s5,120(sp)
+    5056:	7b46                	ld	s6,112(sp)
+    5058:	7ba6                	ld	s7,104(sp)
+    505a:	7c06                	ld	s8,96(sp)
+    505c:	6ce6                	ld	s9,88(sp)
+    505e:	6d46                	ld	s10,80(sp)
+    5060:	6da6                	ld	s11,72(sp)
+    5062:	614d                	addi	sp,sp,176
+    5064:	8082                	ret
+    int total = 0;
+    5066:	89ee                	mv	s3,s11
+      if(cc < BSIZE)
+    5068:	3ff00a93          	li	s5,1023
+      int cc = write(fd, buf, BSIZE);
+    506c:	40000613          	li	a2,1024
+    5070:	85d2                	mv	a1,s4
+    5072:	854a                	mv	a0,s2
+    5074:	00000097          	auipc	ra,0x0
+    5078:	7ee080e7          	jalr	2030(ra) # 5862 <write>
+      if(cc < BSIZE)
+    507c:	00aad563          	bge	s5,a0,5086 <fsfull+0x17c>
+      total += cc;
+    5080:	00a989bb          	addw	s3,s3,a0
+    while(1){
+    5084:	b7e5                	j	506c <fsfull+0x162>
+    printf("wrote %d bytes\n", total);
+    5086:	85ce                	mv	a1,s3
+    5088:	00003517          	auipc	a0,0x3
+    508c:	bd050513          	addi	a0,a0,-1072 # 7c58 <malloc+0x1fb4>
+    5090:	00001097          	auipc	ra,0x1
+    5094:	b5c080e7          	jalr	-1188(ra) # 5bec <printf>
+    close(fd);
+    5098:	854a                	mv	a0,s2
+    509a:	00000097          	auipc	ra,0x0
+    509e:	7d0080e7          	jalr	2000(ra) # 586a <close>
+    if(total == 0)
+    50a2:	f20988e3          	beqz	s3,4fd2 <fsfull+0xc8>
+  for(nfiles = 0; ; nfiles++){
+    50a6:	2485                	addiw	s1,s1,1
+    50a8:	bd4d                	j	4f5a <fsfull+0x50>
+
+00000000000050aa <badwrite>:
+{
+    50aa:	7179                	addi	sp,sp,-48
+    50ac:	f406                	sd	ra,40(sp)
+    50ae:	f022                	sd	s0,32(sp)
+    50b0:	ec26                	sd	s1,24(sp)
+    50b2:	e84a                	sd	s2,16(sp)
+    50b4:	e44e                	sd	s3,8(sp)
+    50b6:	e052                	sd	s4,0(sp)
+    50b8:	1800                	addi	s0,sp,48
+  unlink("junk");
+    50ba:	00003517          	auipc	a0,0x3
+    50be:	bc650513          	addi	a0,a0,-1082 # 7c80 <malloc+0x1fdc>
+    50c2:	00000097          	auipc	ra,0x0
+    50c6:	7d0080e7          	jalr	2000(ra) # 5892 <unlink>
+    50ca:	25800913          	li	s2,600
+    int fd = open("junk", O_CREATE|O_WRONLY);
+    50ce:	00003997          	auipc	s3,0x3
+    50d2:	bb298993          	addi	s3,s3,-1102 # 7c80 <malloc+0x1fdc>
+    write(fd, (char*)0xffffffffffL, 1);
+    50d6:	5a7d                	li	s4,-1
+    50d8:	018a5a13          	srli	s4,s4,0x18
+    int fd = open("junk", O_CREATE|O_WRONLY);
+    50dc:	20100593          	li	a1,513
+    50e0:	854e                	mv	a0,s3
+    50e2:	00000097          	auipc	ra,0x0
+    50e6:	7a0080e7          	jalr	1952(ra) # 5882 <open>
+    50ea:	84aa                	mv	s1,a0
+    if(fd < 0){
+    50ec:	06054b63          	bltz	a0,5162 <badwrite+0xb8>
+    write(fd, (char*)0xffffffffffL, 1);
+    50f0:	4605                	li	a2,1
+    50f2:	85d2                	mv	a1,s4
+    50f4:	00000097          	auipc	ra,0x0
+    50f8:	76e080e7          	jalr	1902(ra) # 5862 <write>
+    close(fd);
+    50fc:	8526                	mv	a0,s1
+    50fe:	00000097          	auipc	ra,0x0
+    5102:	76c080e7          	jalr	1900(ra) # 586a <close>
+    unlink("junk");
+    5106:	854e                	mv	a0,s3
+    5108:	00000097          	auipc	ra,0x0
+    510c:	78a080e7          	jalr	1930(ra) # 5892 <unlink>
+  for(int i = 0; i < assumed_free; i++){
+    5110:	397d                	addiw	s2,s2,-1
+    5112:	fc0915e3          	bnez	s2,50dc <badwrite+0x32>
+  int fd = open("junk", O_CREATE|O_WRONLY);
+    5116:	20100593          	li	a1,513
+    511a:	00003517          	auipc	a0,0x3
+    511e:	b6650513          	addi	a0,a0,-1178 # 7c80 <malloc+0x1fdc>
+    5122:	00000097          	auipc	ra,0x0
+    5126:	760080e7          	jalr	1888(ra) # 5882 <open>
+    512a:	84aa                	mv	s1,a0
+  if(fd < 0){
+    512c:	04054863          	bltz	a0,517c <badwrite+0xd2>
+  if(write(fd, "x", 1) != 1){
+    5130:	4605                	li	a2,1
+    5132:	00001597          	auipc	a1,0x1
+    5136:	d0658593          	addi	a1,a1,-762 # 5e38 <malloc+0x194>
+    513a:	00000097          	auipc	ra,0x0
+    513e:	728080e7          	jalr	1832(ra) # 5862 <write>
+    5142:	4785                	li	a5,1
+    5144:	04f50963          	beq	a0,a5,5196 <badwrite+0xec>
+    printf("write failed\n");
+    5148:	00003517          	auipc	a0,0x3
+    514c:	b5850513          	addi	a0,a0,-1192 # 7ca0 <malloc+0x1ffc>
+    5150:	00001097          	auipc	ra,0x1
+    5154:	a9c080e7          	jalr	-1380(ra) # 5bec <printf>
+    exit(1);
+    5158:	4505                	li	a0,1
+    515a:	00000097          	auipc	ra,0x0
+    515e:	6e8080e7          	jalr	1768(ra) # 5842 <exit>
+      printf("open junk failed\n");
+    5162:	00003517          	auipc	a0,0x3
+    5166:	b2650513          	addi	a0,a0,-1242 # 7c88 <malloc+0x1fe4>
+    516a:	00001097          	auipc	ra,0x1
+    516e:	a82080e7          	jalr	-1406(ra) # 5bec <printf>
+      exit(1);
+    5172:	4505                	li	a0,1
+    5174:	00000097          	auipc	ra,0x0
+    5178:	6ce080e7          	jalr	1742(ra) # 5842 <exit>
+    printf("open junk failed\n");
+    517c:	00003517          	auipc	a0,0x3
+    5180:	b0c50513          	addi	a0,a0,-1268 # 7c88 <malloc+0x1fe4>
+    5184:	00001097          	auipc	ra,0x1
+    5188:	a68080e7          	jalr	-1432(ra) # 5bec <printf>
+    exit(1);
+    518c:	4505                	li	a0,1
+    518e:	00000097          	auipc	ra,0x0
+    5192:	6b4080e7          	jalr	1716(ra) # 5842 <exit>
+  close(fd);
+    5196:	8526                	mv	a0,s1
+    5198:	00000097          	auipc	ra,0x0
+    519c:	6d2080e7          	jalr	1746(ra) # 586a <close>
+  unlink("junk");
+    51a0:	00003517          	auipc	a0,0x3
+    51a4:	ae050513          	addi	a0,a0,-1312 # 7c80 <malloc+0x1fdc>
+    51a8:	00000097          	auipc	ra,0x0
+    51ac:	6ea080e7          	jalr	1770(ra) # 5892 <unlink>
+  exit(0);
+    51b0:	4501                	li	a0,0
+    51b2:	00000097          	auipc	ra,0x0
+    51b6:	690080e7          	jalr	1680(ra) # 5842 <exit>
+
+00000000000051ba <countfree>:
+// because out of memory with lazy allocation results in the process
+// taking a fault and being killed, fork and report back.
+//
+int
+countfree()
+{
+    51ba:	7139                	addi	sp,sp,-64
+    51bc:	fc06                	sd	ra,56(sp)
+    51be:	f822                	sd	s0,48(sp)
+    51c0:	f426                	sd	s1,40(sp)
+    51c2:	f04a                	sd	s2,32(sp)
+    51c4:	ec4e                	sd	s3,24(sp)
+    51c6:	0080                	addi	s0,sp,64
+  int fds[2];
+
+  if(pipe(fds) < 0){
+    51c8:	fc840513          	addi	a0,s0,-56
+    51cc:	00000097          	auipc	ra,0x0
+    51d0:	686080e7          	jalr	1670(ra) # 5852 <pipe>
+    51d4:	06054763          	bltz	a0,5242 <countfree+0x88>
+    printf("pipe() failed in countfree()\n");
+    exit(1);
+  }
+  
+  int pid = fork();
+    51d8:	00000097          	auipc	ra,0x0
+    51dc:	662080e7          	jalr	1634(ra) # 583a <fork>
+
+  if(pid < 0){
+    51e0:	06054e63          	bltz	a0,525c <countfree+0xa2>
+    printf("fork failed in countfree()\n");
+    exit(1);
+  }
+
+  if(pid == 0){
+    51e4:	ed51                	bnez	a0,5280 <countfree+0xc6>
+    close(fds[0]);
+    51e6:	fc842503          	lw	a0,-56(s0)
+    51ea:	00000097          	auipc	ra,0x0
+    51ee:	680080e7          	jalr	1664(ra) # 586a <close>
+    
+    while(1){
+      uint64 a = (uint64) sbrk(4096);
+      if(a == 0xffffffffffffffff){
+    51f2:	597d                	li	s2,-1
+        break;
+      }
+
+      // modify the memory to make sure it's really allocated.
+      *(char *)(a + 4096 - 1) = 1;
+    51f4:	4485                	li	s1,1
+
+      // report back one more page.
+      if(write(fds[1], "x", 1) != 1){
+    51f6:	00001997          	auipc	s3,0x1
+    51fa:	c4298993          	addi	s3,s3,-958 # 5e38 <malloc+0x194>
+      uint64 a = (uint64) sbrk(4096);
+    51fe:	6505                	lui	a0,0x1
+    5200:	00000097          	auipc	ra,0x0
+    5204:	6ca080e7          	jalr	1738(ra) # 58ca <sbrk>
+      if(a == 0xffffffffffffffff){
+    5208:	07250763          	beq	a0,s2,5276 <countfree+0xbc>
+      *(char *)(a + 4096 - 1) = 1;
+    520c:	6785                	lui	a5,0x1
+    520e:	97aa                	add	a5,a5,a0
+    5210:	fe978fa3          	sb	s1,-1(a5) # fff <bigdir+0x9f>
+      if(write(fds[1], "x", 1) != 1){
+    5214:	8626                	mv	a2,s1
+    5216:	85ce                	mv	a1,s3
+    5218:	fcc42503          	lw	a0,-52(s0)
+    521c:	00000097          	auipc	ra,0x0
+    5220:	646080e7          	jalr	1606(ra) # 5862 <write>
+    5224:	fc950de3          	beq	a0,s1,51fe <countfree+0x44>
+        printf("write() failed in countfree()\n");
+    5228:	00003517          	auipc	a0,0x3
+    522c:	ac850513          	addi	a0,a0,-1336 # 7cf0 <malloc+0x204c>
+    5230:	00001097          	auipc	ra,0x1
+    5234:	9bc080e7          	jalr	-1604(ra) # 5bec <printf>
+        exit(1);
+    5238:	4505                	li	a0,1
+    523a:	00000097          	auipc	ra,0x0
+    523e:	608080e7          	jalr	1544(ra) # 5842 <exit>
+    printf("pipe() failed in countfree()\n");
+    5242:	00003517          	auipc	a0,0x3
+    5246:	a6e50513          	addi	a0,a0,-1426 # 7cb0 <malloc+0x200c>
+    524a:	00001097          	auipc	ra,0x1
+    524e:	9a2080e7          	jalr	-1630(ra) # 5bec <printf>
+    exit(1);
+    5252:	4505                	li	a0,1
+    5254:	00000097          	auipc	ra,0x0
+    5258:	5ee080e7          	jalr	1518(ra) # 5842 <exit>
+    printf("fork failed in countfree()\n");
+    525c:	00003517          	auipc	a0,0x3
+    5260:	a7450513          	addi	a0,a0,-1420 # 7cd0 <malloc+0x202c>
+    5264:	00001097          	auipc	ra,0x1
+    5268:	988080e7          	jalr	-1656(ra) # 5bec <printf>
+    exit(1);
+    526c:	4505                	li	a0,1
+    526e:	00000097          	auipc	ra,0x0
+    5272:	5d4080e7          	jalr	1492(ra) # 5842 <exit>
+      }
+    }
+
+    exit(0);
+    5276:	4501                	li	a0,0
+    5278:	00000097          	auipc	ra,0x0
+    527c:	5ca080e7          	jalr	1482(ra) # 5842 <exit>
+  }
+
+  close(fds[1]);
+    5280:	fcc42503          	lw	a0,-52(s0)
+    5284:	00000097          	auipc	ra,0x0
+    5288:	5e6080e7          	jalr	1510(ra) # 586a <close>
+
+  int n = 0;
+    528c:	4481                	li	s1,0
+  while(1){
+    char c;
+    int cc = read(fds[0], &c, 1);
+    528e:	4605                	li	a2,1
+    5290:	fc740593          	addi	a1,s0,-57
+    5294:	fc842503          	lw	a0,-56(s0)
+    5298:	00000097          	auipc	ra,0x0
+    529c:	5c2080e7          	jalr	1474(ra) # 585a <read>
+    if(cc < 0){
+    52a0:	00054563          	bltz	a0,52aa <countfree+0xf0>
+      printf("read() failed in countfree()\n");
+      exit(1);
+    }
+    if(cc == 0)
+    52a4:	c105                	beqz	a0,52c4 <countfree+0x10a>
+      break;
+    n += 1;
+    52a6:	2485                	addiw	s1,s1,1
+  while(1){
+    52a8:	b7dd                	j	528e <countfree+0xd4>
+      printf("read() failed in countfree()\n");
+    52aa:	00003517          	auipc	a0,0x3
+    52ae:	a6650513          	addi	a0,a0,-1434 # 7d10 <malloc+0x206c>
+    52b2:	00001097          	auipc	ra,0x1
+    52b6:	93a080e7          	jalr	-1734(ra) # 5bec <printf>
+      exit(1);
+    52ba:	4505                	li	a0,1
+    52bc:	00000097          	auipc	ra,0x0
+    52c0:	586080e7          	jalr	1414(ra) # 5842 <exit>
+  }
+
+  close(fds[0]);
+    52c4:	fc842503          	lw	a0,-56(s0)
+    52c8:	00000097          	auipc	ra,0x0
+    52cc:	5a2080e7          	jalr	1442(ra) # 586a <close>
+  wait((int*)0);
+    52d0:	4501                	li	a0,0
+    52d2:	00000097          	auipc	ra,0x0
+    52d6:	578080e7          	jalr	1400(ra) # 584a <wait>
+  
+  return n;
+}
+    52da:	8526                	mv	a0,s1
+    52dc:	70e2                	ld	ra,56(sp)
+    52de:	7442                	ld	s0,48(sp)
+    52e0:	74a2                	ld	s1,40(sp)
+    52e2:	7902                	ld	s2,32(sp)
+    52e4:	69e2                	ld	s3,24(sp)
+    52e6:	6121                	addi	sp,sp,64
+    52e8:	8082                	ret
+
+00000000000052ea <run>:
+
+// run each test in its own process. run returns 1 if child's exit()
+// indicates success.
+int
+run(void f(char *), char *s) {
+    52ea:	7179                	addi	sp,sp,-48
+    52ec:	f406                	sd	ra,40(sp)
+    52ee:	f022                	sd	s0,32(sp)
+    52f0:	ec26                	sd	s1,24(sp)
+    52f2:	e84a                	sd	s2,16(sp)
+    52f4:	1800                	addi	s0,sp,48
+    52f6:	84aa                	mv	s1,a0
+    52f8:	892e                	mv	s2,a1
+  int pid;
+  int xstatus;
+
+  printf("test %s: ", s);
+    52fa:	00003517          	auipc	a0,0x3
+    52fe:	a3650513          	addi	a0,a0,-1482 # 7d30 <malloc+0x208c>
+    5302:	00001097          	auipc	ra,0x1
+    5306:	8ea080e7          	jalr	-1814(ra) # 5bec <printf>
+  if((pid = fork()) < 0) {
+    530a:	00000097          	auipc	ra,0x0
+    530e:	530080e7          	jalr	1328(ra) # 583a <fork>
+    5312:	02054e63          	bltz	a0,534e <run+0x64>
+    printf("runtest: fork error\n");
+    exit(1);
+  }
+  if(pid == 0) {
+    5316:	c929                	beqz	a0,5368 <run+0x7e>
+    f(s);
+    exit(0);
+  } else {
+    wait(&xstatus);
+    5318:	fdc40513          	addi	a0,s0,-36
+    531c:	00000097          	auipc	ra,0x0
+    5320:	52e080e7          	jalr	1326(ra) # 584a <wait>
+    if(xstatus != 0) 
+    5324:	fdc42783          	lw	a5,-36(s0)
+    5328:	c7b9                	beqz	a5,5376 <run+0x8c>
+      printf("FAILED\n");
+    532a:	00003517          	auipc	a0,0x3
+    532e:	a2e50513          	addi	a0,a0,-1490 # 7d58 <malloc+0x20b4>
+    5332:	00001097          	auipc	ra,0x1
+    5336:	8ba080e7          	jalr	-1862(ra) # 5bec <printf>
+    else
+      printf("OK\n");
+    return xstatus == 0;
+    533a:	fdc42503          	lw	a0,-36(s0)
+  }
+}
+    533e:	00153513          	seqz	a0,a0
+    5342:	70a2                	ld	ra,40(sp)
+    5344:	7402                	ld	s0,32(sp)
+    5346:	64e2                	ld	s1,24(sp)
+    5348:	6942                	ld	s2,16(sp)
+    534a:	6145                	addi	sp,sp,48
+    534c:	8082                	ret
+    printf("runtest: fork error\n");
+    534e:	00003517          	auipc	a0,0x3
+    5352:	9f250513          	addi	a0,a0,-1550 # 7d40 <malloc+0x209c>
+    5356:	00001097          	auipc	ra,0x1
+    535a:	896080e7          	jalr	-1898(ra) # 5bec <printf>
+    exit(1);
+    535e:	4505                	li	a0,1
+    5360:	00000097          	auipc	ra,0x0
+    5364:	4e2080e7          	jalr	1250(ra) # 5842 <exit>
+    f(s);
+    5368:	854a                	mv	a0,s2
+    536a:	9482                	jalr	s1
+    exit(0);
+    536c:	4501                	li	a0,0
+    536e:	00000097          	auipc	ra,0x0
+    5372:	4d4080e7          	jalr	1236(ra) # 5842 <exit>
+      printf("OK\n");
+    5376:	00003517          	auipc	a0,0x3
+    537a:	9ea50513          	addi	a0,a0,-1558 # 7d60 <malloc+0x20bc>
+    537e:	00001097          	auipc	ra,0x1
+    5382:	86e080e7          	jalr	-1938(ra) # 5bec <printf>
+    5386:	bf55                	j	533a <run+0x50>
+
+0000000000005388 <main>:
+
+int
+main(int argc, char *argv[])
+{
+    5388:	bd010113          	addi	sp,sp,-1072
+    538c:	42113423          	sd	ra,1064(sp)
+    5390:	42813023          	sd	s0,1056(sp)
+    5394:	40913c23          	sd	s1,1048(sp)
+    5398:	41213823          	sd	s2,1040(sp)
+    539c:	41313423          	sd	s3,1032(sp)
+    53a0:	41413023          	sd	s4,1024(sp)
+    53a4:	3f513c23          	sd	s5,1016(sp)
+    53a8:	3f613823          	sd	s6,1008(sp)
+    53ac:	43010413          	addi	s0,sp,1072
+    53b0:	89aa                	mv	s3,a0
+  int continuous = 0;
+  char *justone = 0;
+
+  if(argc == 2 && strcmp(argv[1], "-c") == 0){
+    53b2:	4789                	li	a5,2
+    53b4:	08f50f63          	beq	a0,a5,5452 <main+0xca>
+    continuous = 1;
+  } else if(argc == 2 && strcmp(argv[1], "-C") == 0){
+    continuous = 2;
+  } else if(argc == 2 && argv[1][0] != '-'){
+    justone = argv[1];
+  } else if(argc > 1){
+    53b8:	4785                	li	a5,1
+  char *justone = 0;
+    53ba:	4901                	li	s2,0
+  } else if(argc > 1){
+    53bc:	0ca7c963          	blt	a5,a0,548e <main+0x106>
+  }
+  
+  struct test {
+    void (*f)(char *);
+    char *s;
+  } tests[] = {
+    53c0:	00003797          	auipc	a5,0x3
+    53c4:	db878793          	addi	a5,a5,-584 # 8178 <malloc+0x24d4>
+    53c8:	bd040713          	addi	a4,s0,-1072
+    53cc:	00003317          	auipc	t1,0x3
+    53d0:	19c30313          	addi	t1,t1,412 # 8568 <malloc+0x28c4>
+    53d4:	0007b883          	ld	a7,0(a5)
+    53d8:	0087b803          	ld	a6,8(a5)
+    53dc:	6b88                	ld	a0,16(a5)
+    53de:	6f8c                	ld	a1,24(a5)
+    53e0:	7390                	ld	a2,32(a5)
+    53e2:	7794                	ld	a3,40(a5)
+    53e4:	01173023          	sd	a7,0(a4)
+    53e8:	01073423          	sd	a6,8(a4)
+    53ec:	eb08                	sd	a0,16(a4)
+    53ee:	ef0c                	sd	a1,24(a4)
+    53f0:	f310                	sd	a2,32(a4)
+    53f2:	f714                	sd	a3,40(a4)
+    53f4:	03078793          	addi	a5,a5,48
+    53f8:	03070713          	addi	a4,a4,48
+    53fc:	fc679ce3          	bne	a5,t1,53d4 <main+0x4c>
+          exit(1);
+      }
+    }
+  }
+
+  printf("usertests starting\n");
+    5400:	00003517          	auipc	a0,0x3
+    5404:	a1850513          	addi	a0,a0,-1512 # 7e18 <malloc+0x2174>
+    5408:	00000097          	auipc	ra,0x0
+    540c:	7e4080e7          	jalr	2020(ra) # 5bec <printf>
+  int free0 = countfree();
+    5410:	00000097          	auipc	ra,0x0
+    5414:	daa080e7          	jalr	-598(ra) # 51ba <countfree>
+    5418:	8a2a                	mv	s4,a0
+  int free1 = 0;
+  int fail = 0;
+  for (struct test *t = tests; t->s != 0; t++) {
+    541a:	bd843503          	ld	a0,-1064(s0)
+    541e:	bd040493          	addi	s1,s0,-1072
+  int fail = 0;
+    5422:	4981                	li	s3,0
+    if((justone == 0) || strcmp(t->s, justone) == 0) {
+      if(!run(t->f, t->s))
+        fail = 1;
+    5424:	4a85                	li	s5,1
+  for (struct test *t = tests; t->s != 0; t++) {
+    5426:	e55d                	bnez	a0,54d4 <main+0x14c>
+  }
+
+  if(fail){
+    printf("SOME TESTS FAILED\n");
+    exit(1);
+  } else if((free1 = countfree()) < free0){
+    5428:	00000097          	auipc	ra,0x0
+    542c:	d92080e7          	jalr	-622(ra) # 51ba <countfree>
+    5430:	85aa                	mv	a1,a0
+    5432:	0f455163          	bge	a0,s4,5514 <main+0x18c>
+    printf("FAILED -- lost some free pages %d (out of %d)\n", free1, free0);
+    5436:	8652                	mv	a2,s4
+    5438:	00003517          	auipc	a0,0x3
+    543c:	99850513          	addi	a0,a0,-1640 # 7dd0 <malloc+0x212c>
+    5440:	00000097          	auipc	ra,0x0
+    5444:	7ac080e7          	jalr	1964(ra) # 5bec <printf>
+    exit(1);
+    5448:	4505                	li	a0,1
+    544a:	00000097          	auipc	ra,0x0
+    544e:	3f8080e7          	jalr	1016(ra) # 5842 <exit>
+    5452:	84ae                	mv	s1,a1
+  if(argc == 2 && strcmp(argv[1], "-c") == 0){
+    5454:	00003597          	auipc	a1,0x3
+    5458:	91458593          	addi	a1,a1,-1772 # 7d68 <malloc+0x20c4>
+    545c:	6488                	ld	a0,8(s1)
+    545e:	00000097          	auipc	ra,0x0
+    5462:	194080e7          	jalr	404(ra) # 55f2 <strcmp>
+    5466:	10050563          	beqz	a0,5570 <main+0x1e8>
+  } else if(argc == 2 && strcmp(argv[1], "-C") == 0){
+    546a:	00003597          	auipc	a1,0x3
+    546e:	9e658593          	addi	a1,a1,-1562 # 7e50 <malloc+0x21ac>
+    5472:	6488                	ld	a0,8(s1)
+    5474:	00000097          	auipc	ra,0x0
+    5478:	17e080e7          	jalr	382(ra) # 55f2 <strcmp>
+    547c:	c97d                	beqz	a0,5572 <main+0x1ea>
+  } else if(argc == 2 && argv[1][0] != '-'){
+    547e:	0084b903          	ld	s2,8(s1)
+    5482:	00094703          	lbu	a4,0(s2)
+    5486:	02d00793          	li	a5,45
+    548a:	f2f71be3          	bne	a4,a5,53c0 <main+0x38>
+    printf("Usage: usertests [-c] [testname]\n");
+    548e:	00003517          	auipc	a0,0x3
+    5492:	8e250513          	addi	a0,a0,-1822 # 7d70 <malloc+0x20cc>
+    5496:	00000097          	auipc	ra,0x0
+    549a:	756080e7          	jalr	1878(ra) # 5bec <printf>
+    exit(1);
+    549e:	4505                	li	a0,1
+    54a0:	00000097          	auipc	ra,0x0
+    54a4:	3a2080e7          	jalr	930(ra) # 5842 <exit>
+          exit(1);
+    54a8:	4505                	li	a0,1
+    54aa:	00000097          	auipc	ra,0x0
+    54ae:	398080e7          	jalr	920(ra) # 5842 <exit>
+        printf("FAILED -- lost %d free pages\n", free0 - free1);
+    54b2:	40a905bb          	subw	a1,s2,a0
+    54b6:	855a                	mv	a0,s6
+    54b8:	00000097          	auipc	ra,0x0
+    54bc:	734080e7          	jalr	1844(ra) # 5bec <printf>
+        if(continuous != 2)
+    54c0:	09498463          	beq	s3,s4,5548 <main+0x1c0>
+          exit(1);
+    54c4:	4505                	li	a0,1
+    54c6:	00000097          	auipc	ra,0x0
+    54ca:	37c080e7          	jalr	892(ra) # 5842 <exit>
+  for (struct test *t = tests; t->s != 0; t++) {
+    54ce:	04c1                	addi	s1,s1,16
+    54d0:	6488                	ld	a0,8(s1)
+    54d2:	c115                	beqz	a0,54f6 <main+0x16e>
+    if((justone == 0) || strcmp(t->s, justone) == 0) {
+    54d4:	00090863          	beqz	s2,54e4 <main+0x15c>
+    54d8:	85ca                	mv	a1,s2
+    54da:	00000097          	auipc	ra,0x0
+    54de:	118080e7          	jalr	280(ra) # 55f2 <strcmp>
+    54e2:	f575                	bnez	a0,54ce <main+0x146>
+      if(!run(t->f, t->s))
+    54e4:	648c                	ld	a1,8(s1)
+    54e6:	6088                	ld	a0,0(s1)
+    54e8:	00000097          	auipc	ra,0x0
+    54ec:	e02080e7          	jalr	-510(ra) # 52ea <run>
+    54f0:	fd79                	bnez	a0,54ce <main+0x146>
+        fail = 1;
+    54f2:	89d6                	mv	s3,s5
+    54f4:	bfe9                	j	54ce <main+0x146>
+  if(fail){
+    54f6:	f20989e3          	beqz	s3,5428 <main+0xa0>
+    printf("SOME TESTS FAILED\n");
+    54fa:	00003517          	auipc	a0,0x3
+    54fe:	8be50513          	addi	a0,a0,-1858 # 7db8 <malloc+0x2114>
+    5502:	00000097          	auipc	ra,0x0
+    5506:	6ea080e7          	jalr	1770(ra) # 5bec <printf>
+    exit(1);
+    550a:	4505                	li	a0,1
+    550c:	00000097          	auipc	ra,0x0
+    5510:	336080e7          	jalr	822(ra) # 5842 <exit>
+  } else {
+    printf("ALL TESTS PASSED\n");
+    5514:	00003517          	auipc	a0,0x3
+    5518:	8ec50513          	addi	a0,a0,-1812 # 7e00 <malloc+0x215c>
+    551c:	00000097          	auipc	ra,0x0
+    5520:	6d0080e7          	jalr	1744(ra) # 5bec <printf>
+    exit(0);
+    5524:	4501                	li	a0,0
+    5526:	00000097          	auipc	ra,0x0
+    552a:	31c080e7          	jalr	796(ra) # 5842 <exit>
+        printf("SOME TESTS FAILED\n");
+    552e:	8556                	mv	a0,s5
+    5530:	00000097          	auipc	ra,0x0
+    5534:	6bc080e7          	jalr	1724(ra) # 5bec <printf>
+        if(continuous != 2)
+    5538:	f74998e3          	bne	s3,s4,54a8 <main+0x120>
+      int free1 = countfree();
+    553c:	00000097          	auipc	ra,0x0
+    5540:	c7e080e7          	jalr	-898(ra) # 51ba <countfree>
+      if(free1 < free0){
+    5544:	f72547e3          	blt	a0,s2,54b2 <main+0x12a>
+      int free0 = countfree();
+    5548:	00000097          	auipc	ra,0x0
+    554c:	c72080e7          	jalr	-910(ra) # 51ba <countfree>
+    5550:	892a                	mv	s2,a0
+      for (struct test *t = tests; t->s != 0; t++) {
+    5552:	bd843583          	ld	a1,-1064(s0)
+    5556:	d1fd                	beqz	a1,553c <main+0x1b4>
+    5558:	bd040493          	addi	s1,s0,-1072
+        if(!run(t->f, t->s)){
+    555c:	6088                	ld	a0,0(s1)
+    555e:	00000097          	auipc	ra,0x0
+    5562:	d8c080e7          	jalr	-628(ra) # 52ea <run>
+    5566:	d561                	beqz	a0,552e <main+0x1a6>
+      for (struct test *t = tests; t->s != 0; t++) {
+    5568:	04c1                	addi	s1,s1,16
+    556a:	648c                	ld	a1,8(s1)
+    556c:	f9e5                	bnez	a1,555c <main+0x1d4>
+    556e:	b7f9                	j	553c <main+0x1b4>
+    continuous = 1;
+    5570:	4985                	li	s3,1
+  } tests[] = {
+    5572:	00003797          	auipc	a5,0x3
+    5576:	c0678793          	addi	a5,a5,-1018 # 8178 <malloc+0x24d4>
+    557a:	bd040713          	addi	a4,s0,-1072
+    557e:	00003317          	auipc	t1,0x3
+    5582:	fea30313          	addi	t1,t1,-22 # 8568 <malloc+0x28c4>
+    5586:	0007b883          	ld	a7,0(a5)
+    558a:	0087b803          	ld	a6,8(a5)
+    558e:	6b88                	ld	a0,16(a5)
+    5590:	6f8c                	ld	a1,24(a5)
+    5592:	7390                	ld	a2,32(a5)
+    5594:	7794                	ld	a3,40(a5)
+    5596:	01173023          	sd	a7,0(a4)
+    559a:	01073423          	sd	a6,8(a4)
+    559e:	eb08                	sd	a0,16(a4)
+    55a0:	ef0c                	sd	a1,24(a4)
+    55a2:	f310                	sd	a2,32(a4)
+    55a4:	f714                	sd	a3,40(a4)
+    55a6:	03078793          	addi	a5,a5,48
+    55aa:	03070713          	addi	a4,a4,48
+    55ae:	fc679ce3          	bne	a5,t1,5586 <main+0x1fe>
+    printf("continuous usertests starting\n");
+    55b2:	00003517          	auipc	a0,0x3
+    55b6:	87e50513          	addi	a0,a0,-1922 # 7e30 <malloc+0x218c>
+    55ba:	00000097          	auipc	ra,0x0
+    55be:	632080e7          	jalr	1586(ra) # 5bec <printf>
+        printf("SOME TESTS FAILED\n");
+    55c2:	00002a97          	auipc	s5,0x2
+    55c6:	7f6a8a93          	addi	s5,s5,2038 # 7db8 <malloc+0x2114>
+        if(continuous != 2)
+    55ca:	4a09                	li	s4,2
+        printf("FAILED -- lost %d free pages\n", free0 - free1);
+    55cc:	00002b17          	auipc	s6,0x2
+    55d0:	7ccb0b13          	addi	s6,s6,1996 # 7d98 <malloc+0x20f4>
+    55d4:	bf95                	j	5548 <main+0x1c0>
+
+00000000000055d6 <strcpy>:
+#include "kernel/fcntl.h"
+#include "user/user.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+    55d6:	1141                	addi	sp,sp,-16
+    55d8:	e422                	sd	s0,8(sp)
+    55da:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+    55dc:	87aa                	mv	a5,a0
+    55de:	0585                	addi	a1,a1,1
+    55e0:	0785                	addi	a5,a5,1
+    55e2:	fff5c703          	lbu	a4,-1(a1)
+    55e6:	fee78fa3          	sb	a4,-1(a5)
+    55ea:	fb75                	bnez	a4,55de <strcpy+0x8>
+    ;
+  return os;
+}
+    55ec:	6422                	ld	s0,8(sp)
+    55ee:	0141                	addi	sp,sp,16
+    55f0:	8082                	ret
+
+00000000000055f2 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+    55f2:	1141                	addi	sp,sp,-16
+    55f4:	e422                	sd	s0,8(sp)
+    55f6:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+    55f8:	00054783          	lbu	a5,0(a0)
+    55fc:	cb91                	beqz	a5,5610 <strcmp+0x1e>
+    55fe:	0005c703          	lbu	a4,0(a1)
+    5602:	00f71763          	bne	a4,a5,5610 <strcmp+0x1e>
+    p++, q++;
+    5606:	0505                	addi	a0,a0,1
+    5608:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+    560a:	00054783          	lbu	a5,0(a0)
+    560e:	fbe5                	bnez	a5,55fe <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+    5610:	0005c503          	lbu	a0,0(a1)
+}
+    5614:	40a7853b          	subw	a0,a5,a0
+    5618:	6422                	ld	s0,8(sp)
+    561a:	0141                	addi	sp,sp,16
+    561c:	8082                	ret
+
+000000000000561e <strlen>:
+
+uint
+strlen(const char *s)
+{
+    561e:	1141                	addi	sp,sp,-16
+    5620:	e422                	sd	s0,8(sp)
+    5622:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+    5624:	00054783          	lbu	a5,0(a0)
+    5628:	cf91                	beqz	a5,5644 <strlen+0x26>
+    562a:	0505                	addi	a0,a0,1
+    562c:	87aa                	mv	a5,a0
+    562e:	4685                	li	a3,1
+    5630:	9e89                	subw	a3,a3,a0
+    5632:	00f6853b          	addw	a0,a3,a5
+    5636:	0785                	addi	a5,a5,1
+    5638:	fff7c703          	lbu	a4,-1(a5)
+    563c:	fb7d                	bnez	a4,5632 <strlen+0x14>
+    ;
+  return n;
+}
+    563e:	6422                	ld	s0,8(sp)
+    5640:	0141                	addi	sp,sp,16
+    5642:	8082                	ret
+  for(n = 0; s[n]; n++)
+    5644:	4501                	li	a0,0
+    5646:	bfe5                	j	563e <strlen+0x20>
+
+0000000000005648 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+    5648:	1141                	addi	sp,sp,-16
+    564a:	e422                	sd	s0,8(sp)
+    564c:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+    564e:	ca19                	beqz	a2,5664 <memset+0x1c>
+    5650:	87aa                	mv	a5,a0
+    5652:	1602                	slli	a2,a2,0x20
+    5654:	9201                	srli	a2,a2,0x20
+    5656:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+    565a:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+    565e:	0785                	addi	a5,a5,1
+    5660:	fee79de3          	bne	a5,a4,565a <memset+0x12>
+  }
+  return dst;
+}
+    5664:	6422                	ld	s0,8(sp)
+    5666:	0141                	addi	sp,sp,16
+    5668:	8082                	ret
+
+000000000000566a <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+    566a:	1141                	addi	sp,sp,-16
+    566c:	e422                	sd	s0,8(sp)
+    566e:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+    5670:	00054783          	lbu	a5,0(a0)
+    5674:	cb99                	beqz	a5,568a <strchr+0x20>
+    if(*s == c)
+    5676:	00f58763          	beq	a1,a5,5684 <strchr+0x1a>
+  for(; *s; s++)
+    567a:	0505                	addi	a0,a0,1
+    567c:	00054783          	lbu	a5,0(a0)
+    5680:	fbfd                	bnez	a5,5676 <strchr+0xc>
+      return (char*)s;
+  return 0;
+    5682:	4501                	li	a0,0
+}
+    5684:	6422                	ld	s0,8(sp)
+    5686:	0141                	addi	sp,sp,16
+    5688:	8082                	ret
+  return 0;
+    568a:	4501                	li	a0,0
+    568c:	bfe5                	j	5684 <strchr+0x1a>
+
+000000000000568e <gets>:
+
+char*
+gets(char *buf, int max)
+{
+    568e:	711d                	addi	sp,sp,-96
+    5690:	ec86                	sd	ra,88(sp)
+    5692:	e8a2                	sd	s0,80(sp)
+    5694:	e4a6                	sd	s1,72(sp)
+    5696:	e0ca                	sd	s2,64(sp)
+    5698:	fc4e                	sd	s3,56(sp)
+    569a:	f852                	sd	s4,48(sp)
+    569c:	f456                	sd	s5,40(sp)
+    569e:	f05a                	sd	s6,32(sp)
+    56a0:	ec5e                	sd	s7,24(sp)
+    56a2:	1080                	addi	s0,sp,96
+    56a4:	8baa                	mv	s7,a0
+    56a6:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    56a8:	892a                	mv	s2,a0
+    56aa:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+    56ac:	4aa9                	li	s5,10
+    56ae:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+    56b0:	89a6                	mv	s3,s1
+    56b2:	2485                	addiw	s1,s1,1
+    56b4:	0344d863          	bge	s1,s4,56e4 <gets+0x56>
+    cc = read(0, &c, 1);
+    56b8:	4605                	li	a2,1
+    56ba:	faf40593          	addi	a1,s0,-81
+    56be:	4501                	li	a0,0
+    56c0:	00000097          	auipc	ra,0x0
+    56c4:	19a080e7          	jalr	410(ra) # 585a <read>
+    if(cc < 1)
+    56c8:	00a05e63          	blez	a0,56e4 <gets+0x56>
+    buf[i++] = c;
+    56cc:	faf44783          	lbu	a5,-81(s0)
+    56d0:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+    56d4:	01578763          	beq	a5,s5,56e2 <gets+0x54>
+    56d8:	0905                	addi	s2,s2,1
+    56da:	fd679be3          	bne	a5,s6,56b0 <gets+0x22>
+  for(i=0; i+1 < max; ){
+    56de:	89a6                	mv	s3,s1
+    56e0:	a011                	j	56e4 <gets+0x56>
+    56e2:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+    56e4:	99de                	add	s3,s3,s7
+    56e6:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+    56ea:	855e                	mv	a0,s7
+    56ec:	60e6                	ld	ra,88(sp)
+    56ee:	6446                	ld	s0,80(sp)
+    56f0:	64a6                	ld	s1,72(sp)
+    56f2:	6906                	ld	s2,64(sp)
+    56f4:	79e2                	ld	s3,56(sp)
+    56f6:	7a42                	ld	s4,48(sp)
+    56f8:	7aa2                	ld	s5,40(sp)
+    56fa:	7b02                	ld	s6,32(sp)
+    56fc:	6be2                	ld	s7,24(sp)
+    56fe:	6125                	addi	sp,sp,96
+    5700:	8082                	ret
+
+0000000000005702 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+    5702:	1101                	addi	sp,sp,-32
+    5704:	ec06                	sd	ra,24(sp)
+    5706:	e822                	sd	s0,16(sp)
+    5708:	e426                	sd	s1,8(sp)
+    570a:	e04a                	sd	s2,0(sp)
+    570c:	1000                	addi	s0,sp,32
+    570e:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+    5710:	4581                	li	a1,0
+    5712:	00000097          	auipc	ra,0x0
+    5716:	170080e7          	jalr	368(ra) # 5882 <open>
+  if(fd < 0)
+    571a:	02054563          	bltz	a0,5744 <stat+0x42>
+    571e:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+    5720:	85ca                	mv	a1,s2
+    5722:	00000097          	auipc	ra,0x0
+    5726:	178080e7          	jalr	376(ra) # 589a <fstat>
+    572a:	892a                	mv	s2,a0
+  close(fd);
+    572c:	8526                	mv	a0,s1
+    572e:	00000097          	auipc	ra,0x0
+    5732:	13c080e7          	jalr	316(ra) # 586a <close>
+  return r;
+}
+    5736:	854a                	mv	a0,s2
+    5738:	60e2                	ld	ra,24(sp)
+    573a:	6442                	ld	s0,16(sp)
+    573c:	64a2                	ld	s1,8(sp)
+    573e:	6902                	ld	s2,0(sp)
+    5740:	6105                	addi	sp,sp,32
+    5742:	8082                	ret
+    return -1;
+    5744:	597d                	li	s2,-1
+    5746:	bfc5                	j	5736 <stat+0x34>
+
+0000000000005748 <atoi>:
+
+int
+atoi(const char *s)
+{
+    5748:	1141                	addi	sp,sp,-16
+    574a:	e422                	sd	s0,8(sp)
+    574c:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+    574e:	00054683          	lbu	a3,0(a0)
+    5752:	fd06879b          	addiw	a5,a3,-48
+    5756:	0ff7f793          	zext.b	a5,a5
+    575a:	4625                	li	a2,9
+    575c:	02f66863          	bltu	a2,a5,578c <atoi+0x44>
+    5760:	872a                	mv	a4,a0
+  n = 0;
+    5762:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+    5764:	0705                	addi	a4,a4,1
+    5766:	0025179b          	slliw	a5,a0,0x2
+    576a:	9fa9                	addw	a5,a5,a0
+    576c:	0017979b          	slliw	a5,a5,0x1
+    5770:	9fb5                	addw	a5,a5,a3
+    5772:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+    5776:	00074683          	lbu	a3,0(a4)
+    577a:	fd06879b          	addiw	a5,a3,-48
+    577e:	0ff7f793          	zext.b	a5,a5
+    5782:	fef671e3          	bgeu	a2,a5,5764 <atoi+0x1c>
+  return n;
+}
+    5786:	6422                	ld	s0,8(sp)
+    5788:	0141                	addi	sp,sp,16
+    578a:	8082                	ret
+  n = 0;
+    578c:	4501                	li	a0,0
+    578e:	bfe5                	j	5786 <atoi+0x3e>
+
+0000000000005790 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+    5790:	1141                	addi	sp,sp,-16
+    5792:	e422                	sd	s0,8(sp)
+    5794:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+    5796:	02b57463          	bgeu	a0,a1,57be <memmove+0x2e>
+    while(n-- > 0)
+    579a:	00c05f63          	blez	a2,57b8 <memmove+0x28>
+    579e:	1602                	slli	a2,a2,0x20
+    57a0:	9201                	srli	a2,a2,0x20
+    57a2:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+    57a6:	872a                	mv	a4,a0
+      *dst++ = *src++;
+    57a8:	0585                	addi	a1,a1,1
+    57aa:	0705                	addi	a4,a4,1
+    57ac:	fff5c683          	lbu	a3,-1(a1)
+    57b0:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+    57b4:	fee79ae3          	bne	a5,a4,57a8 <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+    57b8:	6422                	ld	s0,8(sp)
+    57ba:	0141                	addi	sp,sp,16
+    57bc:	8082                	ret
+    dst += n;
+    57be:	00c50733          	add	a4,a0,a2
+    src += n;
+    57c2:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+    57c4:	fec05ae3          	blez	a2,57b8 <memmove+0x28>
+    57c8:	fff6079b          	addiw	a5,a2,-1 # 2fff <iputtest+0x8b>
+    57cc:	1782                	slli	a5,a5,0x20
+    57ce:	9381                	srli	a5,a5,0x20
+    57d0:	fff7c793          	not	a5,a5
+    57d4:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+    57d6:	15fd                	addi	a1,a1,-1
+    57d8:	177d                	addi	a4,a4,-1
+    57da:	0005c683          	lbu	a3,0(a1)
+    57de:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+    57e2:	fee79ae3          	bne	a5,a4,57d6 <memmove+0x46>
+    57e6:	bfc9                	j	57b8 <memmove+0x28>
+
+00000000000057e8 <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+    57e8:	1141                	addi	sp,sp,-16
+    57ea:	e422                	sd	s0,8(sp)
+    57ec:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+    57ee:	ca05                	beqz	a2,581e <memcmp+0x36>
+    57f0:	fff6069b          	addiw	a3,a2,-1
+    57f4:	1682                	slli	a3,a3,0x20
+    57f6:	9281                	srli	a3,a3,0x20
+    57f8:	0685                	addi	a3,a3,1
+    57fa:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+    57fc:	00054783          	lbu	a5,0(a0)
+    5800:	0005c703          	lbu	a4,0(a1)
+    5804:	00e79863          	bne	a5,a4,5814 <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+    5808:	0505                	addi	a0,a0,1
+    p2++;
+    580a:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+    580c:	fed518e3          	bne	a0,a3,57fc <memcmp+0x14>
+  }
+  return 0;
+    5810:	4501                	li	a0,0
+    5812:	a019                	j	5818 <memcmp+0x30>
+      return *p1 - *p2;
+    5814:	40e7853b          	subw	a0,a5,a4
+}
+    5818:	6422                	ld	s0,8(sp)
+    581a:	0141                	addi	sp,sp,16
+    581c:	8082                	ret
+  return 0;
+    581e:	4501                	li	a0,0
+    5820:	bfe5                	j	5818 <memcmp+0x30>
+
+0000000000005822 <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+    5822:	1141                	addi	sp,sp,-16
+    5824:	e406                	sd	ra,8(sp)
+    5826:	e022                	sd	s0,0(sp)
+    5828:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+    582a:	00000097          	auipc	ra,0x0
+    582e:	f66080e7          	jalr	-154(ra) # 5790 <memmove>
+}
+    5832:	60a2                	ld	ra,8(sp)
+    5834:	6402                	ld	s0,0(sp)
+    5836:	0141                	addi	sp,sp,16
+    5838:	8082                	ret
+
+000000000000583a <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+    583a:	4885                	li	a7,1
+ ecall
+    583c:	00000073          	ecall
+ ret
+    5840:	8082                	ret
+
+0000000000005842 <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+    5842:	4889                	li	a7,2
+ ecall
+    5844:	00000073          	ecall
+ ret
+    5848:	8082                	ret
+
+000000000000584a <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+    584a:	488d                	li	a7,3
+ ecall
+    584c:	00000073          	ecall
+ ret
+    5850:	8082                	ret
+
+0000000000005852 <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+    5852:	4891                	li	a7,4
+ ecall
+    5854:	00000073          	ecall
+ ret
+    5858:	8082                	ret
+
+000000000000585a <read>:
+.global read
+read:
+ li a7, SYS_read
+    585a:	4895                	li	a7,5
+ ecall
+    585c:	00000073          	ecall
+ ret
+    5860:	8082                	ret
+
+0000000000005862 <write>:
+.global write
+write:
+ li a7, SYS_write
+    5862:	48c1                	li	a7,16
+ ecall
+    5864:	00000073          	ecall
+ ret
+    5868:	8082                	ret
+
+000000000000586a <close>:
+.global close
+close:
+ li a7, SYS_close
+    586a:	48d5                	li	a7,21
+ ecall
+    586c:	00000073          	ecall
+ ret
+    5870:	8082                	ret
+
+0000000000005872 <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+    5872:	4899                	li	a7,6
+ ecall
+    5874:	00000073          	ecall
+ ret
+    5878:	8082                	ret
+
+000000000000587a <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+    587a:	489d                	li	a7,7
+ ecall
+    587c:	00000073          	ecall
+ ret
+    5880:	8082                	ret
+
+0000000000005882 <open>:
+.global open
+open:
+ li a7, SYS_open
+    5882:	48bd                	li	a7,15
+ ecall
+    5884:	00000073          	ecall
+ ret
+    5888:	8082                	ret
+
+000000000000588a <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+    588a:	48c5                	li	a7,17
+ ecall
+    588c:	00000073          	ecall
+ ret
+    5890:	8082                	ret
+
+0000000000005892 <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+    5892:	48c9                	li	a7,18
+ ecall
+    5894:	00000073          	ecall
+ ret
+    5898:	8082                	ret
+
+000000000000589a <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+    589a:	48a1                	li	a7,8
+ ecall
+    589c:	00000073          	ecall
+ ret
+    58a0:	8082                	ret
+
+00000000000058a2 <link>:
+.global link
+link:
+ li a7, SYS_link
+    58a2:	48cd                	li	a7,19
+ ecall
+    58a4:	00000073          	ecall
+ ret
+    58a8:	8082                	ret
+
+00000000000058aa <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+    58aa:	48d1                	li	a7,20
+ ecall
+    58ac:	00000073          	ecall
+ ret
+    58b0:	8082                	ret
+
+00000000000058b2 <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+    58b2:	48a5                	li	a7,9
+ ecall
+    58b4:	00000073          	ecall
+ ret
+    58b8:	8082                	ret
+
+00000000000058ba <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+    58ba:	48a9                	li	a7,10
+ ecall
+    58bc:	00000073          	ecall
+ ret
+    58c0:	8082                	ret
+
+00000000000058c2 <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+    58c2:	48ad                	li	a7,11
+ ecall
+    58c4:	00000073          	ecall
+ ret
+    58c8:	8082                	ret
+
+00000000000058ca <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+    58ca:	48b1                	li	a7,12
+ ecall
+    58cc:	00000073          	ecall
+ ret
+    58d0:	8082                	ret
+
+00000000000058d2 <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+    58d2:	48b5                	li	a7,13
+ ecall
+    58d4:	00000073          	ecall
+ ret
+    58d8:	8082                	ret
+
+00000000000058da <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+    58da:	48b9                	li	a7,14
+ ecall
+    58dc:	00000073          	ecall
+ ret
+    58e0:	8082                	ret
+
+00000000000058e2 <setp>:
+.global setp
+setp:
+ li a7, SYS_setp
+    58e2:	48d9                	li	a7,22
+ ecall
+    58e4:	00000073          	ecall
+ ret
+    58e8:	8082                	ret
+
+00000000000058ea <semget>:
+.global semget
+semget:
+ li a7, SYS_semget
+    58ea:	48dd                	li	a7,23
+ ecall
+    58ec:	00000073          	ecall
+ ret
+    58f0:	8082                	ret
+
+00000000000058f2 <semdown>:
+.global semdown
+semdown:
+ li a7, SYS_semdown
+    58f2:	48e1                	li	a7,24
+ ecall
+    58f4:	00000073          	ecall
+ ret
+    58f8:	8082                	ret
+
+00000000000058fa <semup>:
+.global semup
+semup:
+ li a7, SYS_semup
+    58fa:	48e5                	li	a7,25
+ ecall
+    58fc:	00000073          	ecall
+ ret
+    5900:	8082                	ret
+
+0000000000005902 <semclose>:
+.global semclose
+semclose:
+ li a7, SYS_semclose
+    5902:	48e9                	li	a7,26
+ ecall
+    5904:	00000073          	ecall
+ ret
+    5908:	8082                	ret
+
+000000000000590a <timeout>:
+.global timeout
+timeout:
+ li a7, SYS_timeout
+    590a:	48ed                	li	a7,27
+ ecall
+    590c:	00000073          	ecall
+ ret
+    5910:	8082                	ret
+
+0000000000005912 <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+    5912:	1101                	addi	sp,sp,-32
+    5914:	ec06                	sd	ra,24(sp)
+    5916:	e822                	sd	s0,16(sp)
+    5918:	1000                	addi	s0,sp,32
+    591a:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+    591e:	4605                	li	a2,1
+    5920:	fef40593          	addi	a1,s0,-17
+    5924:	00000097          	auipc	ra,0x0
+    5928:	f3e080e7          	jalr	-194(ra) # 5862 <write>
+}
+    592c:	60e2                	ld	ra,24(sp)
+    592e:	6442                	ld	s0,16(sp)
+    5930:	6105                	addi	sp,sp,32
+    5932:	8082                	ret
+
+0000000000005934 <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+    5934:	7139                	addi	sp,sp,-64
+    5936:	fc06                	sd	ra,56(sp)
+    5938:	f822                	sd	s0,48(sp)
+    593a:	f426                	sd	s1,40(sp)
+    593c:	f04a                	sd	s2,32(sp)
+    593e:	ec4e                	sd	s3,24(sp)
+    5940:	0080                	addi	s0,sp,64
+    5942:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    5944:	c299                	beqz	a3,594a <printint+0x16>
+    5946:	0805c963          	bltz	a1,59d8 <printint+0xa4>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+    594a:	2581                	sext.w	a1,a1
+  neg = 0;
+    594c:	4881                	li	a7,0
+    594e:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+    5952:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+    5954:	2601                	sext.w	a2,a2
+    5956:	00003517          	auipc	a0,0x3
+    595a:	c7250513          	addi	a0,a0,-910 # 85c8 <digits>
+    595e:	883a                	mv	a6,a4
+    5960:	2705                	addiw	a4,a4,1
+    5962:	02c5f7bb          	remuw	a5,a1,a2
+    5966:	1782                	slli	a5,a5,0x20
+    5968:	9381                	srli	a5,a5,0x20
+    596a:	97aa                	add	a5,a5,a0
+    596c:	0007c783          	lbu	a5,0(a5)
+    5970:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+    5974:	0005879b          	sext.w	a5,a1
+    5978:	02c5d5bb          	divuw	a1,a1,a2
+    597c:	0685                	addi	a3,a3,1
+    597e:	fec7f0e3          	bgeu	a5,a2,595e <printint+0x2a>
+  if(neg)
+    5982:	00088c63          	beqz	a7,599a <printint+0x66>
+    buf[i++] = '-';
+    5986:	fd070793          	addi	a5,a4,-48
+    598a:	00878733          	add	a4,a5,s0
+    598e:	02d00793          	li	a5,45
+    5992:	fef70823          	sb	a5,-16(a4)
+    5996:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+    599a:	02e05863          	blez	a4,59ca <printint+0x96>
+    599e:	fc040793          	addi	a5,s0,-64
+    59a2:	00e78933          	add	s2,a5,a4
+    59a6:	fff78993          	addi	s3,a5,-1
+    59aa:	99ba                	add	s3,s3,a4
+    59ac:	377d                	addiw	a4,a4,-1
+    59ae:	1702                	slli	a4,a4,0x20
+    59b0:	9301                	srli	a4,a4,0x20
+    59b2:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+    59b6:	fff94583          	lbu	a1,-1(s2)
+    59ba:	8526                	mv	a0,s1
+    59bc:	00000097          	auipc	ra,0x0
+    59c0:	f56080e7          	jalr	-170(ra) # 5912 <putc>
+  while(--i >= 0)
+    59c4:	197d                	addi	s2,s2,-1
+    59c6:	ff3918e3          	bne	s2,s3,59b6 <printint+0x82>
+}
+    59ca:	70e2                	ld	ra,56(sp)
+    59cc:	7442                	ld	s0,48(sp)
+    59ce:	74a2                	ld	s1,40(sp)
+    59d0:	7902                	ld	s2,32(sp)
+    59d2:	69e2                	ld	s3,24(sp)
+    59d4:	6121                	addi	sp,sp,64
+    59d6:	8082                	ret
+    x = -xx;
+    59d8:	40b005bb          	negw	a1,a1
+    neg = 1;
+    59dc:	4885                	li	a7,1
+    x = -xx;
+    59de:	bf85                	j	594e <printint+0x1a>
+
+00000000000059e0 <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+    59e0:	7119                	addi	sp,sp,-128
+    59e2:	fc86                	sd	ra,120(sp)
+    59e4:	f8a2                	sd	s0,112(sp)
+    59e6:	f4a6                	sd	s1,104(sp)
+    59e8:	f0ca                	sd	s2,96(sp)
+    59ea:	ecce                	sd	s3,88(sp)
+    59ec:	e8d2                	sd	s4,80(sp)
+    59ee:	e4d6                	sd	s5,72(sp)
+    59f0:	e0da                	sd	s6,64(sp)
+    59f2:	fc5e                	sd	s7,56(sp)
+    59f4:	f862                	sd	s8,48(sp)
+    59f6:	f466                	sd	s9,40(sp)
+    59f8:	f06a                	sd	s10,32(sp)
+    59fa:	ec6e                	sd	s11,24(sp)
+    59fc:	0100                	addi	s0,sp,128
+  char *s;
+  int c, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+    59fe:	0005c903          	lbu	s2,0(a1)
+    5a02:	18090f63          	beqz	s2,5ba0 <vprintf+0x1c0>
+    5a06:	8aaa                	mv	s5,a0
+    5a08:	8b32                	mv	s6,a2
+    5a0a:	00158493          	addi	s1,a1,1
+  state = 0;
+    5a0e:	4981                	li	s3,0
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+    5a10:	02500a13          	li	s4,37
+    5a14:	4c55                	li	s8,21
+    5a16:	00003c97          	auipc	s9,0x3
+    5a1a:	b5ac8c93          	addi	s9,s9,-1190 # 8570 <malloc+0x28cc>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c == 's'){
+        s = va_arg(ap, char*);
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+    5a1e:	02800d93          	li	s11,40
+  putc(fd, 'x');
+    5a22:	4d41                	li	s10,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+    5a24:	00003b97          	auipc	s7,0x3
+    5a28:	ba4b8b93          	addi	s7,s7,-1116 # 85c8 <digits>
+    5a2c:	a839                	j	5a4a <vprintf+0x6a>
+        putc(fd, c);
+    5a2e:	85ca                	mv	a1,s2
+    5a30:	8556                	mv	a0,s5
+    5a32:	00000097          	auipc	ra,0x0
+    5a36:	ee0080e7          	jalr	-288(ra) # 5912 <putc>
+    5a3a:	a019                	j	5a40 <vprintf+0x60>
+    } else if(state == '%'){
+    5a3c:	01498d63          	beq	s3,s4,5a56 <vprintf+0x76>
+  for(i = 0; fmt[i]; i++){
+    5a40:	0485                	addi	s1,s1,1
+    5a42:	fff4c903          	lbu	s2,-1(s1)
+    5a46:	14090d63          	beqz	s2,5ba0 <vprintf+0x1c0>
+    if(state == 0){
+    5a4a:	fe0999e3          	bnez	s3,5a3c <vprintf+0x5c>
+      if(c == '%'){
+    5a4e:	ff4910e3          	bne	s2,s4,5a2e <vprintf+0x4e>
+        state = '%';
+    5a52:	89d2                	mv	s3,s4
+    5a54:	b7f5                	j	5a40 <vprintf+0x60>
+      if(c == 'd'){
+    5a56:	11490c63          	beq	s2,s4,5b6e <vprintf+0x18e>
+    5a5a:	f9d9079b          	addiw	a5,s2,-99
+    5a5e:	0ff7f793          	zext.b	a5,a5
+    5a62:	10fc6e63          	bltu	s8,a5,5b7e <vprintf+0x19e>
+    5a66:	f9d9079b          	addiw	a5,s2,-99
+    5a6a:	0ff7f713          	zext.b	a4,a5
+    5a6e:	10ec6863          	bltu	s8,a4,5b7e <vprintf+0x19e>
+    5a72:	00271793          	slli	a5,a4,0x2
+    5a76:	97e6                	add	a5,a5,s9
+    5a78:	439c                	lw	a5,0(a5)
+    5a7a:	97e6                	add	a5,a5,s9
+    5a7c:	8782                	jr	a5
+        printint(fd, va_arg(ap, int), 10, 1);
+    5a7e:	008b0913          	addi	s2,s6,8
+    5a82:	4685                	li	a3,1
+    5a84:	4629                	li	a2,10
+    5a86:	000b2583          	lw	a1,0(s6)
+    5a8a:	8556                	mv	a0,s5
+    5a8c:	00000097          	auipc	ra,0x0
+    5a90:	ea8080e7          	jalr	-344(ra) # 5934 <printint>
+    5a94:	8b4a                	mv	s6,s2
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+    5a96:	4981                	li	s3,0
+    5a98:	b765                	j	5a40 <vprintf+0x60>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+    5a9a:	008b0913          	addi	s2,s6,8
+    5a9e:	4681                	li	a3,0
+    5aa0:	4629                	li	a2,10
+    5aa2:	000b2583          	lw	a1,0(s6)
+    5aa6:	8556                	mv	a0,s5
+    5aa8:	00000097          	auipc	ra,0x0
+    5aac:	e8c080e7          	jalr	-372(ra) # 5934 <printint>
+    5ab0:	8b4a                	mv	s6,s2
+      state = 0;
+    5ab2:	4981                	li	s3,0
+    5ab4:	b771                	j	5a40 <vprintf+0x60>
+        printint(fd, va_arg(ap, int), 16, 0);
+    5ab6:	008b0913          	addi	s2,s6,8
+    5aba:	4681                	li	a3,0
+    5abc:	866a                	mv	a2,s10
+    5abe:	000b2583          	lw	a1,0(s6)
+    5ac2:	8556                	mv	a0,s5
+    5ac4:	00000097          	auipc	ra,0x0
+    5ac8:	e70080e7          	jalr	-400(ra) # 5934 <printint>
+    5acc:	8b4a                	mv	s6,s2
+      state = 0;
+    5ace:	4981                	li	s3,0
+    5ad0:	bf85                	j	5a40 <vprintf+0x60>
+        printptr(fd, va_arg(ap, uint64));
+    5ad2:	008b0793          	addi	a5,s6,8
+    5ad6:	f8f43423          	sd	a5,-120(s0)
+    5ada:	000b3983          	ld	s3,0(s6)
+  putc(fd, '0');
+    5ade:	03000593          	li	a1,48
+    5ae2:	8556                	mv	a0,s5
+    5ae4:	00000097          	auipc	ra,0x0
+    5ae8:	e2e080e7          	jalr	-466(ra) # 5912 <putc>
+  putc(fd, 'x');
+    5aec:	07800593          	li	a1,120
+    5af0:	8556                	mv	a0,s5
+    5af2:	00000097          	auipc	ra,0x0
+    5af6:	e20080e7          	jalr	-480(ra) # 5912 <putc>
+    5afa:	896a                	mv	s2,s10
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+    5afc:	03c9d793          	srli	a5,s3,0x3c
+    5b00:	97de                	add	a5,a5,s7
+    5b02:	0007c583          	lbu	a1,0(a5)
+    5b06:	8556                	mv	a0,s5
+    5b08:	00000097          	auipc	ra,0x0
+    5b0c:	e0a080e7          	jalr	-502(ra) # 5912 <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+    5b10:	0992                	slli	s3,s3,0x4
+    5b12:	397d                	addiw	s2,s2,-1
+    5b14:	fe0914e3          	bnez	s2,5afc <vprintf+0x11c>
+        printptr(fd, va_arg(ap, uint64));
+    5b18:	f8843b03          	ld	s6,-120(s0)
+      state = 0;
+    5b1c:	4981                	li	s3,0
+    5b1e:	b70d                	j	5a40 <vprintf+0x60>
+        s = va_arg(ap, char*);
+    5b20:	008b0913          	addi	s2,s6,8
+    5b24:	000b3983          	ld	s3,0(s6)
+        if(s == 0)
+    5b28:	02098163          	beqz	s3,5b4a <vprintf+0x16a>
+        while(*s != 0){
+    5b2c:	0009c583          	lbu	a1,0(s3)
+    5b30:	c5ad                	beqz	a1,5b9a <vprintf+0x1ba>
+          putc(fd, *s);
+    5b32:	8556                	mv	a0,s5
+    5b34:	00000097          	auipc	ra,0x0
+    5b38:	dde080e7          	jalr	-546(ra) # 5912 <putc>
+          s++;
+    5b3c:	0985                	addi	s3,s3,1
+        while(*s != 0){
+    5b3e:	0009c583          	lbu	a1,0(s3)
+    5b42:	f9e5                	bnez	a1,5b32 <vprintf+0x152>
+        s = va_arg(ap, char*);
+    5b44:	8b4a                	mv	s6,s2
+      state = 0;
+    5b46:	4981                	li	s3,0
+    5b48:	bde5                	j	5a40 <vprintf+0x60>
+          s = "(null)";
+    5b4a:	00003997          	auipc	s3,0x3
+    5b4e:	a1e98993          	addi	s3,s3,-1506 # 8568 <malloc+0x28c4>
+        while(*s != 0){
+    5b52:	85ee                	mv	a1,s11
+    5b54:	bff9                	j	5b32 <vprintf+0x152>
+        putc(fd, va_arg(ap, uint));
+    5b56:	008b0913          	addi	s2,s6,8
+    5b5a:	000b4583          	lbu	a1,0(s6)
+    5b5e:	8556                	mv	a0,s5
+    5b60:	00000097          	auipc	ra,0x0
+    5b64:	db2080e7          	jalr	-590(ra) # 5912 <putc>
+    5b68:	8b4a                	mv	s6,s2
+      state = 0;
+    5b6a:	4981                	li	s3,0
+    5b6c:	bdd1                	j	5a40 <vprintf+0x60>
+        putc(fd, c);
+    5b6e:	85d2                	mv	a1,s4
+    5b70:	8556                	mv	a0,s5
+    5b72:	00000097          	auipc	ra,0x0
+    5b76:	da0080e7          	jalr	-608(ra) # 5912 <putc>
+      state = 0;
+    5b7a:	4981                	li	s3,0
+    5b7c:	b5d1                	j	5a40 <vprintf+0x60>
+        putc(fd, '%');
+    5b7e:	85d2                	mv	a1,s4
+    5b80:	8556                	mv	a0,s5
+    5b82:	00000097          	auipc	ra,0x0
+    5b86:	d90080e7          	jalr	-624(ra) # 5912 <putc>
+        putc(fd, c);
+    5b8a:	85ca                	mv	a1,s2
+    5b8c:	8556                	mv	a0,s5
+    5b8e:	00000097          	auipc	ra,0x0
+    5b92:	d84080e7          	jalr	-636(ra) # 5912 <putc>
+      state = 0;
+    5b96:	4981                	li	s3,0
+    5b98:	b565                	j	5a40 <vprintf+0x60>
+        s = va_arg(ap, char*);
+    5b9a:	8b4a                	mv	s6,s2
+      state = 0;
+    5b9c:	4981                	li	s3,0
+    5b9e:	b54d                	j	5a40 <vprintf+0x60>
+    }
+  }
+}
+    5ba0:	70e6                	ld	ra,120(sp)
+    5ba2:	7446                	ld	s0,112(sp)
+    5ba4:	74a6                	ld	s1,104(sp)
+    5ba6:	7906                	ld	s2,96(sp)
+    5ba8:	69e6                	ld	s3,88(sp)
+    5baa:	6a46                	ld	s4,80(sp)
+    5bac:	6aa6                	ld	s5,72(sp)
+    5bae:	6b06                	ld	s6,64(sp)
+    5bb0:	7be2                	ld	s7,56(sp)
+    5bb2:	7c42                	ld	s8,48(sp)
+    5bb4:	7ca2                	ld	s9,40(sp)
+    5bb6:	7d02                	ld	s10,32(sp)
+    5bb8:	6de2                	ld	s11,24(sp)
+    5bba:	6109                	addi	sp,sp,128
+    5bbc:	8082                	ret
+
+0000000000005bbe <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+    5bbe:	715d                	addi	sp,sp,-80
+    5bc0:	ec06                	sd	ra,24(sp)
+    5bc2:	e822                	sd	s0,16(sp)
+    5bc4:	1000                	addi	s0,sp,32
+    5bc6:	e010                	sd	a2,0(s0)
+    5bc8:	e414                	sd	a3,8(s0)
+    5bca:	e818                	sd	a4,16(s0)
+    5bcc:	ec1c                	sd	a5,24(s0)
+    5bce:	03043023          	sd	a6,32(s0)
+    5bd2:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+    5bd6:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+    5bda:	8622                	mv	a2,s0
+    5bdc:	00000097          	auipc	ra,0x0
+    5be0:	e04080e7          	jalr	-508(ra) # 59e0 <vprintf>
+}
+    5be4:	60e2                	ld	ra,24(sp)
+    5be6:	6442                	ld	s0,16(sp)
+    5be8:	6161                	addi	sp,sp,80
+    5bea:	8082                	ret
+
+0000000000005bec <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+    5bec:	711d                	addi	sp,sp,-96
+    5bee:	ec06                	sd	ra,24(sp)
+    5bf0:	e822                	sd	s0,16(sp)
+    5bf2:	1000                	addi	s0,sp,32
+    5bf4:	e40c                	sd	a1,8(s0)
+    5bf6:	e810                	sd	a2,16(s0)
+    5bf8:	ec14                	sd	a3,24(s0)
+    5bfa:	f018                	sd	a4,32(s0)
+    5bfc:	f41c                	sd	a5,40(s0)
+    5bfe:	03043823          	sd	a6,48(s0)
+    5c02:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+    5c06:	00840613          	addi	a2,s0,8
+    5c0a:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+    5c0e:	85aa                	mv	a1,a0
+    5c10:	4505                	li	a0,1
+    5c12:	00000097          	auipc	ra,0x0
+    5c16:	dce080e7          	jalr	-562(ra) # 59e0 <vprintf>
+}
+    5c1a:	60e2                	ld	ra,24(sp)
+    5c1c:	6442                	ld	s0,16(sp)
+    5c1e:	6125                	addi	sp,sp,96
+    5c20:	8082                	ret
+
+0000000000005c22 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+    5c22:	1141                	addi	sp,sp,-16
+    5c24:	e422                	sd	s0,8(sp)
+    5c26:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+    5c28:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    5c2c:	00003797          	auipc	a5,0x3
+    5c30:	9bc7b783          	ld	a5,-1604(a5) # 85e8 <freep>
+    5c34:	a02d                	j	5c5e <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+    5c36:	4618                	lw	a4,8(a2)
+    5c38:	9f2d                	addw	a4,a4,a1
+    5c3a:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+    5c3e:	6398                	ld	a4,0(a5)
+    5c40:	6310                	ld	a2,0(a4)
+    5c42:	a83d                	j	5c80 <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+    5c44:	ff852703          	lw	a4,-8(a0)
+    5c48:	9f31                	addw	a4,a4,a2
+    5c4a:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+    5c4c:	ff053683          	ld	a3,-16(a0)
+    5c50:	a091                	j	5c94 <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    5c52:	6398                	ld	a4,0(a5)
+    5c54:	00e7e463          	bltu	a5,a4,5c5c <free+0x3a>
+    5c58:	00e6ea63          	bltu	a3,a4,5c6c <free+0x4a>
+{
+    5c5c:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    5c5e:	fed7fae3          	bgeu	a5,a3,5c52 <free+0x30>
+    5c62:	6398                	ld	a4,0(a5)
+    5c64:	00e6e463          	bltu	a3,a4,5c6c <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    5c68:	fee7eae3          	bltu	a5,a4,5c5c <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+    5c6c:	ff852583          	lw	a1,-8(a0)
+    5c70:	6390                	ld	a2,0(a5)
+    5c72:	02059813          	slli	a6,a1,0x20
+    5c76:	01c85713          	srli	a4,a6,0x1c
+    5c7a:	9736                	add	a4,a4,a3
+    5c7c:	fae60de3          	beq	a2,a4,5c36 <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+    5c80:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+    5c84:	4790                	lw	a2,8(a5)
+    5c86:	02061593          	slli	a1,a2,0x20
+    5c8a:	01c5d713          	srli	a4,a1,0x1c
+    5c8e:	973e                	add	a4,a4,a5
+    5c90:	fae68ae3          	beq	a3,a4,5c44 <free+0x22>
+    p->s.ptr = bp->s.ptr;
+    5c94:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+    5c96:	00003717          	auipc	a4,0x3
+    5c9a:	94f73923          	sd	a5,-1710(a4) # 85e8 <freep>
+}
+    5c9e:	6422                	ld	s0,8(sp)
+    5ca0:	0141                	addi	sp,sp,16
+    5ca2:	8082                	ret
+
+0000000000005ca4 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+    5ca4:	7139                	addi	sp,sp,-64
+    5ca6:	fc06                	sd	ra,56(sp)
+    5ca8:	f822                	sd	s0,48(sp)
+    5caa:	f426                	sd	s1,40(sp)
+    5cac:	f04a                	sd	s2,32(sp)
+    5cae:	ec4e                	sd	s3,24(sp)
+    5cb0:	e852                	sd	s4,16(sp)
+    5cb2:	e456                	sd	s5,8(sp)
+    5cb4:	e05a                	sd	s6,0(sp)
+    5cb6:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    5cb8:	02051493          	slli	s1,a0,0x20
+    5cbc:	9081                	srli	s1,s1,0x20
+    5cbe:	04bd                	addi	s1,s1,15
+    5cc0:	8091                	srli	s1,s1,0x4
+    5cc2:	0014899b          	addiw	s3,s1,1
+    5cc6:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+    5cc8:	00003517          	auipc	a0,0x3
+    5ccc:	92053503          	ld	a0,-1760(a0) # 85e8 <freep>
+    5cd0:	c515                	beqz	a0,5cfc <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    5cd2:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+    5cd4:	4798                	lw	a4,8(a5)
+    5cd6:	02977f63          	bgeu	a4,s1,5d14 <malloc+0x70>
+    5cda:	8a4e                	mv	s4,s3
+    5cdc:	0009871b          	sext.w	a4,s3
+    5ce0:	6685                	lui	a3,0x1
+    5ce2:	00d77363          	bgeu	a4,a3,5ce8 <malloc+0x44>
+    5ce6:	6a05                	lui	s4,0x1
+    5ce8:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+    5cec:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+    5cf0:	00003917          	auipc	s2,0x3
+    5cf4:	8f890913          	addi	s2,s2,-1800 # 85e8 <freep>
+  if(p == (char*)-1)
+    5cf8:	5afd                	li	s5,-1
+    5cfa:	a895                	j	5d6e <malloc+0xca>
+    base.s.ptr = freep = prevp = &base;
+    5cfc:	00009797          	auipc	a5,0x9
+    5d00:	10c78793          	addi	a5,a5,268 # ee08 <base>
+    5d04:	00003717          	auipc	a4,0x3
+    5d08:	8ef73223          	sd	a5,-1820(a4) # 85e8 <freep>
+    5d0c:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+    5d0e:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+    5d12:	b7e1                	j	5cda <malloc+0x36>
+      if(p->s.size == nunits)
+    5d14:	02e48c63          	beq	s1,a4,5d4c <malloc+0xa8>
+        p->s.size -= nunits;
+    5d18:	4137073b          	subw	a4,a4,s3
+    5d1c:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+    5d1e:	02071693          	slli	a3,a4,0x20
+    5d22:	01c6d713          	srli	a4,a3,0x1c
+    5d26:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+    5d28:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+    5d2c:	00003717          	auipc	a4,0x3
+    5d30:	8aa73e23          	sd	a0,-1860(a4) # 85e8 <freep>
+      return (void*)(p + 1);
+    5d34:	01078513          	addi	a0,a5,16
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+    5d38:	70e2                	ld	ra,56(sp)
+    5d3a:	7442                	ld	s0,48(sp)
+    5d3c:	74a2                	ld	s1,40(sp)
+    5d3e:	7902                	ld	s2,32(sp)
+    5d40:	69e2                	ld	s3,24(sp)
+    5d42:	6a42                	ld	s4,16(sp)
+    5d44:	6aa2                	ld	s5,8(sp)
+    5d46:	6b02                	ld	s6,0(sp)
+    5d48:	6121                	addi	sp,sp,64
+    5d4a:	8082                	ret
+        prevp->s.ptr = p->s.ptr;
+    5d4c:	6398                	ld	a4,0(a5)
+    5d4e:	e118                	sd	a4,0(a0)
+    5d50:	bff1                	j	5d2c <malloc+0x88>
+  hp->s.size = nu;
+    5d52:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+    5d56:	0541                	addi	a0,a0,16
+    5d58:	00000097          	auipc	ra,0x0
+    5d5c:	eca080e7          	jalr	-310(ra) # 5c22 <free>
+  return freep;
+    5d60:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+    5d64:	d971                	beqz	a0,5d38 <malloc+0x94>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    5d66:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+    5d68:	4798                	lw	a4,8(a5)
+    5d6a:	fa9775e3          	bgeu	a4,s1,5d14 <malloc+0x70>
+    if(p == freep)
+    5d6e:	00093703          	ld	a4,0(s2)
+    5d72:	853e                	mv	a0,a5
+    5d74:	fef719e3          	bne	a4,a5,5d66 <malloc+0xc2>
+  p = sbrk(nu * sizeof(Header));
+    5d78:	8552                	mv	a0,s4
+    5d7a:	00000097          	auipc	ra,0x0
+    5d7e:	b50080e7          	jalr	-1200(ra) # 58ca <sbrk>
+  if(p == (char*)-1)
+    5d82:	fd5518e3          	bne	a0,s5,5d52 <malloc+0xae>
+        return 0;
+    5d86:	4501                	li	a0,0
+    5d88:	bf45                	j	5d38 <malloc+0x94>
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/usertests.d os-workshop/user/usertests.d
--- xv6-riscv/user/usertests.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/usertests.d	2022-05-28 22:34:36.000000000 -0300
@@ -0,0 +1,3 @@
+user/usertests.o: user/usertests.c kernel/param.h kernel/types.h \
+ kernel/stat.h user/user.h kernel/fs.h kernel/fcntl.h kernel/syscall.h \
+ kernel/memlayout.h kernel/riscv.h
Binary files xv6-riscv/user/usertests.o and os-workshop/user/usertests.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/usertests.sym os-workshop/user/usertests.sym
--- xv6-riscv/user/usertests.sym	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/usertests.sym	2022-05-28 22:34:37.000000000 -0300
@@ -0,0 +1,147 @@
+0000000000000000 .text
+0000000000005d90 .rodata
+00000000000085e0 .sdata
+00000000000085e8 .sbss
+00000000000085f0 .bss
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_aranges
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_line
+0000000000000000 .debug_frame
+0000000000000000 .debug_str
+0000000000000000 .debug_line_str
+0000000000000000 .debug_loclists
+0000000000000000 .debug_rnglists
+0000000000000000 usertests.c
+00000000000086f0 big.0
+00000000000085f0 args.1
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+0000000000005912 putc
+0000000000005934 printint
+00000000000085c8 digits
+0000000000000000 umalloc.c
+00000000000085e8 freep
+000000000000ee08 base
+00000000000009a8 writebig
+0000000000002cd6 sbrk8000
+00000000000055d6 strcpy
+0000000000001906 exitwait
+0000000000001eae manywrites
+0000000000005bec printf
+0000000000008de0 __global_pointer$
+0000000000002232 bigargtest
+0000000000005790 memmove
+0000000000003ec2 openiputtest
+000000000000588a mknod
+00000000000042ca reparent
+00000000000058f2 semdown
+000000000000568e gets
+00000000000085e0 __SDATA_BEGIN__
+00000000000058ea semget
+00000000000058c2 getpid
+000000000000173c pipe1
+0000000000005822 memcpy
+0000000000003d88 iref
+0000000000001132 pgbug
+0000000000005ca4 malloc
+0000000000005902 semclose
+00000000000004aa copyout
+00000000000058d2 sleep
+0000000000002338 stacktest
+0000000000002d0c execout
+0000000000002aec sbrkbugs
+000000000000304a exitiputtest
+0000000000004f0a fsfull
+0000000000000f60 bigdir
+0000000000001ff8 forktest
+0000000000002508 rwsbrk
+00000000000013a6 truncate3
+0000000000000264 bigwrite
+00000000000045d4 sharedfd
+0000000000005852 pipe
+0000000000004084 killstatus
+00000000000096f8 uninit
+0000000000003b54 dirfile
+0000000000005862 write
+0000000000000058 bsstest
+000000000000589a fstat
+0000000000005bbe fprintf
+0000000000005872 kill
+00000000000010c4 validatetest
+00000000000039ce rmdot
+000000000000034e copyin
+00000000000059e0 vprintf
+000000000000011c truncate2
+00000000000058b2 chdir
+0000000000001560 exectest
+000000000000587a exec
+00000000000050aa badwrite
+000000000000584a wait
+000000000000585a read
+0000000000004126 preempt
+0000000000005892 unlink
+000000000000116a badarg
+0000000000002a7a argptest
+0000000000004530 mem
+00000000000057e8 memcmp
+000000000000583a fork
+0000000000002c04 sbrklast
+000000000000ee18 __BSS_END__
+00000000000023bc copyinstr3
+0000000000001a54 forkfork
+00000000000058ca sbrk
+00000000000058da uptime
+00000000000019ba twochildren
+00000000000085e8 __bss_start
+0000000000002184 MAXVAplus
+0000000000005648 memset
+00000000000020d8 kernmem
+00000000000001e4 createtest
+0000000000005388 main
+0000000000001b86 createdelete
+000000000000590a timeout
+0000000000003fb4 forkforkfork
+000000000000437a sbrkfail
+00000000000055f2 strcmp
+0000000000000818 writetest
+00000000000058ba dup
+0000000000000606 truncate1
+000000000000009a opentest
+00000000000052ea run
+0000000000003208 subdir
+00000000000011b0 copyinstr2
+0000000000000d14 linktest
+000000000000be08 buf
+0000000000003132 dirtest
+00000000000029a2 sbrkarg
+0000000000002f74 iputtest
+00000000000085d9 __DATA_BEGIN__
+0000000000005702 stat
+0000000000004d2a bigfile
+00000000000085e8 _edata
+00000000000058e2 setp
+000000000000ee18 _end
+00000000000051ba countfree
+0000000000000b5e unlinkread
+00000000000058a2 link
+0000000000005842 exit
+0000000000005748 atoi
+0000000000000000 copyinstr1
+0000000000001dac linkunlink
+0000000000002660 sbrkbasic
+000000000000561e strlen
+0000000000005882 open
+00000000000058fa semup
+000000000000566a strchr
+00000000000049ce concreate
+0000000000002dd0 fourteen
+000000000000478c fourfiles
+00000000000027e6 sbrkmuch
+00000000000058aa mkdir
+000000000000586a close
+0000000000001b1e reparent2
+0000000000005c22 free
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/usys.S os-workshop/user/usys.S
--- xv6-riscv/user/usys.S	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/usys.S	2022-05-28 22:34:30.000000000 -0300
@@ -0,0 +1,137 @@
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ ecall
+ ret
+.global exit
+exit:
+ li a7, SYS_exit
+ ecall
+ ret
+.global wait
+wait:
+ li a7, SYS_wait
+ ecall
+ ret
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ ecall
+ ret
+.global read
+read:
+ li a7, SYS_read
+ ecall
+ ret
+.global write
+write:
+ li a7, SYS_write
+ ecall
+ ret
+.global close
+close:
+ li a7, SYS_close
+ ecall
+ ret
+.global kill
+kill:
+ li a7, SYS_kill
+ ecall
+ ret
+.global exec
+exec:
+ li a7, SYS_exec
+ ecall
+ ret
+.global open
+open:
+ li a7, SYS_open
+ ecall
+ ret
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ ecall
+ ret
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ ecall
+ ret
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ ecall
+ ret
+.global link
+link:
+ li a7, SYS_link
+ ecall
+ ret
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ ecall
+ ret
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ ecall
+ ret
+.global dup
+dup:
+ li a7, SYS_dup
+ ecall
+ ret
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ ecall
+ ret
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ ecall
+ ret
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ ecall
+ ret
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ ecall
+ ret
+.global setp
+setp:
+ li a7, SYS_setp
+ ecall
+ ret
+.global semget
+semget:
+ li a7, SYS_semget
+ ecall
+ ret
+.global semdown
+semdown:
+ li a7, SYS_semdown
+ ecall
+ ret
+.global semup
+semup:
+ li a7, SYS_semup
+ ecall
+ ret
+.global semclose
+semclose:
+ li a7, SYS_semclose
+ ecall
+ ret
+.global timeout
+timeout:
+ li a7, SYS_timeout
+ ecall
+ ret
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/usys.d os-workshop/user/usys.d
--- xv6-riscv/user/usys.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/usys.d	2022-05-28 22:34:30.000000000 -0300
@@ -0,0 +1 @@
+user/usys.o: user/usys.S kernel/syscall.h
Binary files xv6-riscv/user/usys.o and os-workshop/user/usys.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/usys.pl os-workshop/user/usys.pl
--- xv6-riscv/user/usys.pl	2022-05-28 22:43:35.000000000 -0300
+++ os-workshop/user/usys.pl	2022-05-28 21:58:31.000000000 -0300
@@ -14,7 +14,7 @@ sub entry {
     print " ecall\n";
     print " ret\n";
 }
-	
+
 entry("fork");
 entry("exit");
 entry("wait");
@@ -36,3 +36,9 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("setp");
+entry("semget");
+entry("semdown");
+entry("semup");
+entry("semclose");
+entry("timeout");
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/wc.asm os-workshop/user/wc.asm
--- xv6-riscv/user/wc.asm	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/wc.asm	2022-05-28 22:34:37.000000000 -0300
@@ -0,0 +1,1536 @@
+
+user/_wc:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <wc>:
+
+char buf[512];
+
+void
+wc(int fd, char *name)
+{
+   0:	7119                	addi	sp,sp,-128
+   2:	fc86                	sd	ra,120(sp)
+   4:	f8a2                	sd	s0,112(sp)
+   6:	f4a6                	sd	s1,104(sp)
+   8:	f0ca                	sd	s2,96(sp)
+   a:	ecce                	sd	s3,88(sp)
+   c:	e8d2                	sd	s4,80(sp)
+   e:	e4d6                	sd	s5,72(sp)
+  10:	e0da                	sd	s6,64(sp)
+  12:	fc5e                	sd	s7,56(sp)
+  14:	f862                	sd	s8,48(sp)
+  16:	f466                	sd	s9,40(sp)
+  18:	f06a                	sd	s10,32(sp)
+  1a:	ec6e                	sd	s11,24(sp)
+  1c:	0100                	addi	s0,sp,128
+  1e:	f8a43423          	sd	a0,-120(s0)
+  22:	f8b43023          	sd	a1,-128(s0)
+  int i, n;
+  int l, w, c, inword;
+
+  l = w = c = 0;
+  inword = 0;
+  26:	4981                	li	s3,0
+  l = w = c = 0;
+  28:	4c81                	li	s9,0
+  2a:	4c01                	li	s8,0
+  2c:	4b81                	li	s7,0
+  2e:	00001d97          	auipc	s11,0x1
+  32:	9ebd8d93          	addi	s11,s11,-1557 # a19 <buf+0x1>
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+    for(i=0; i<n; i++){
+      c++;
+      if(buf[i] == '\n')
+  36:	4aa9                	li	s5,10
+        l++;
+      if(strchr(" \r\t\n\v", buf[i]))
+  38:	00001a17          	auipc	s4,0x1
+  3c:	918a0a13          	addi	s4,s4,-1768 # 950 <malloc+0xec>
+        inword = 0;
+  40:	4b01                	li	s6,0
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+  42:	a805                	j	72 <wc+0x72>
+      if(strchr(" \r\t\n\v", buf[i]))
+  44:	8552                	mv	a0,s4
+  46:	00000097          	auipc	ra,0x0
+  4a:	1e4080e7          	jalr	484(ra) # 22a <strchr>
+  4e:	c919                	beqz	a0,64 <wc+0x64>
+        inword = 0;
+  50:	89da                	mv	s3,s6
+    for(i=0; i<n; i++){
+  52:	0485                	addi	s1,s1,1
+  54:	01248d63          	beq	s1,s2,6e <wc+0x6e>
+      if(buf[i] == '\n')
+  58:	0004c583          	lbu	a1,0(s1)
+  5c:	ff5594e3          	bne	a1,s5,44 <wc+0x44>
+        l++;
+  60:	2b85                	addiw	s7,s7,1
+  62:	b7cd                	j	44 <wc+0x44>
+      else if(!inword){
+  64:	fe0997e3          	bnez	s3,52 <wc+0x52>
+        w++;
+  68:	2c05                	addiw	s8,s8,1
+        inword = 1;
+  6a:	4985                	li	s3,1
+  6c:	b7dd                	j	52 <wc+0x52>
+      c++;
+  6e:	01ac8cbb          	addw	s9,s9,s10
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+  72:	20000613          	li	a2,512
+  76:	00001597          	auipc	a1,0x1
+  7a:	9a258593          	addi	a1,a1,-1630 # a18 <buf>
+  7e:	f8843503          	ld	a0,-120(s0)
+  82:	00000097          	auipc	ra,0x0
+  86:	398080e7          	jalr	920(ra) # 41a <read>
+  8a:	00a05f63          	blez	a0,a8 <wc+0xa8>
+    for(i=0; i<n; i++){
+  8e:	00001497          	auipc	s1,0x1
+  92:	98a48493          	addi	s1,s1,-1654 # a18 <buf>
+  96:	00050d1b          	sext.w	s10,a0
+  9a:	fff5091b          	addiw	s2,a0,-1
+  9e:	1902                	slli	s2,s2,0x20
+  a0:	02095913          	srli	s2,s2,0x20
+  a4:	996e                	add	s2,s2,s11
+  a6:	bf4d                	j	58 <wc+0x58>
+      }
+    }
+  }
+  if(n < 0){
+  a8:	02054e63          	bltz	a0,e4 <wc+0xe4>
+    printf("wc: read error\n");
+    exit(1);
+  }
+  printf("%d %d %d %s\n", l, w, c, name);
+  ac:	f8043703          	ld	a4,-128(s0)
+  b0:	86e6                	mv	a3,s9
+  b2:	8662                	mv	a2,s8
+  b4:	85de                	mv	a1,s7
+  b6:	00001517          	auipc	a0,0x1
+  ba:	8b250513          	addi	a0,a0,-1870 # 968 <malloc+0x104>
+  be:	00000097          	auipc	ra,0x0
+  c2:	6ee080e7          	jalr	1774(ra) # 7ac <printf>
+}
+  c6:	70e6                	ld	ra,120(sp)
+  c8:	7446                	ld	s0,112(sp)
+  ca:	74a6                	ld	s1,104(sp)
+  cc:	7906                	ld	s2,96(sp)
+  ce:	69e6                	ld	s3,88(sp)
+  d0:	6a46                	ld	s4,80(sp)
+  d2:	6aa6                	ld	s5,72(sp)
+  d4:	6b06                	ld	s6,64(sp)
+  d6:	7be2                	ld	s7,56(sp)
+  d8:	7c42                	ld	s8,48(sp)
+  da:	7ca2                	ld	s9,40(sp)
+  dc:	7d02                	ld	s10,32(sp)
+  de:	6de2                	ld	s11,24(sp)
+  e0:	6109                	addi	sp,sp,128
+  e2:	8082                	ret
+    printf("wc: read error\n");
+  e4:	00001517          	auipc	a0,0x1
+  e8:	87450513          	addi	a0,a0,-1932 # 958 <malloc+0xf4>
+  ec:	00000097          	auipc	ra,0x0
+  f0:	6c0080e7          	jalr	1728(ra) # 7ac <printf>
+    exit(1);
+  f4:	4505                	li	a0,1
+  f6:	00000097          	auipc	ra,0x0
+  fa:	30c080e7          	jalr	780(ra) # 402 <exit>
+
+00000000000000fe <main>:
+
+int
+main(int argc, char *argv[])
+{
+  fe:	7179                	addi	sp,sp,-48
+ 100:	f406                	sd	ra,40(sp)
+ 102:	f022                	sd	s0,32(sp)
+ 104:	ec26                	sd	s1,24(sp)
+ 106:	e84a                	sd	s2,16(sp)
+ 108:	e44e                	sd	s3,8(sp)
+ 10a:	e052                	sd	s4,0(sp)
+ 10c:	1800                	addi	s0,sp,48
+  int fd, i;
+
+  if(argc <= 1){
+ 10e:	4785                	li	a5,1
+ 110:	04a7d763          	bge	a5,a0,15e <main+0x60>
+ 114:	00858493          	addi	s1,a1,8
+ 118:	ffe5099b          	addiw	s3,a0,-2
+ 11c:	02099793          	slli	a5,s3,0x20
+ 120:	01d7d993          	srli	s3,a5,0x1d
+ 124:	05c1                	addi	a1,a1,16
+ 126:	99ae                	add	s3,s3,a1
+    wc(0, "");
+    exit(0);
+  }
+
+  for(i = 1; i < argc; i++){
+    if((fd = open(argv[i], 0)) < 0){
+ 128:	4581                	li	a1,0
+ 12a:	6088                	ld	a0,0(s1)
+ 12c:	00000097          	auipc	ra,0x0
+ 130:	316080e7          	jalr	790(ra) # 442 <open>
+ 134:	892a                	mv	s2,a0
+ 136:	04054263          	bltz	a0,17a <main+0x7c>
+      printf("wc: cannot open %s\n", argv[i]);
+      exit(1);
+    }
+    wc(fd, argv[i]);
+ 13a:	608c                	ld	a1,0(s1)
+ 13c:	00000097          	auipc	ra,0x0
+ 140:	ec4080e7          	jalr	-316(ra) # 0 <wc>
+    close(fd);
+ 144:	854a                	mv	a0,s2
+ 146:	00000097          	auipc	ra,0x0
+ 14a:	2e4080e7          	jalr	740(ra) # 42a <close>
+  for(i = 1; i < argc; i++){
+ 14e:	04a1                	addi	s1,s1,8
+ 150:	fd349ce3          	bne	s1,s3,128 <main+0x2a>
+  }
+  exit(0);
+ 154:	4501                	li	a0,0
+ 156:	00000097          	auipc	ra,0x0
+ 15a:	2ac080e7          	jalr	684(ra) # 402 <exit>
+    wc(0, "");
+ 15e:	00001597          	auipc	a1,0x1
+ 162:	81a58593          	addi	a1,a1,-2022 # 978 <malloc+0x114>
+ 166:	4501                	li	a0,0
+ 168:	00000097          	auipc	ra,0x0
+ 16c:	e98080e7          	jalr	-360(ra) # 0 <wc>
+    exit(0);
+ 170:	4501                	li	a0,0
+ 172:	00000097          	auipc	ra,0x0
+ 176:	290080e7          	jalr	656(ra) # 402 <exit>
+      printf("wc: cannot open %s\n", argv[i]);
+ 17a:	608c                	ld	a1,0(s1)
+ 17c:	00001517          	auipc	a0,0x1
+ 180:	80450513          	addi	a0,a0,-2044 # 980 <malloc+0x11c>
+ 184:	00000097          	auipc	ra,0x0
+ 188:	628080e7          	jalr	1576(ra) # 7ac <printf>
+      exit(1);
+ 18c:	4505                	li	a0,1
+ 18e:	00000097          	auipc	ra,0x0
+ 192:	274080e7          	jalr	628(ra) # 402 <exit>
+
+0000000000000196 <strcpy>:
+#include "kernel/fcntl.h"
+#include "user/user.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 196:	1141                	addi	sp,sp,-16
+ 198:	e422                	sd	s0,8(sp)
+ 19a:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 19c:	87aa                	mv	a5,a0
+ 19e:	0585                	addi	a1,a1,1
+ 1a0:	0785                	addi	a5,a5,1
+ 1a2:	fff5c703          	lbu	a4,-1(a1)
+ 1a6:	fee78fa3          	sb	a4,-1(a5)
+ 1aa:	fb75                	bnez	a4,19e <strcpy+0x8>
+    ;
+  return os;
+}
+ 1ac:	6422                	ld	s0,8(sp)
+ 1ae:	0141                	addi	sp,sp,16
+ 1b0:	8082                	ret
+
+00000000000001b2 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 1b2:	1141                	addi	sp,sp,-16
+ 1b4:	e422                	sd	s0,8(sp)
+ 1b6:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+ 1b8:	00054783          	lbu	a5,0(a0)
+ 1bc:	cb91                	beqz	a5,1d0 <strcmp+0x1e>
+ 1be:	0005c703          	lbu	a4,0(a1)
+ 1c2:	00f71763          	bne	a4,a5,1d0 <strcmp+0x1e>
+    p++, q++;
+ 1c6:	0505                	addi	a0,a0,1
+ 1c8:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+ 1ca:	00054783          	lbu	a5,0(a0)
+ 1ce:	fbe5                	bnez	a5,1be <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+ 1d0:	0005c503          	lbu	a0,0(a1)
+}
+ 1d4:	40a7853b          	subw	a0,a5,a0
+ 1d8:	6422                	ld	s0,8(sp)
+ 1da:	0141                	addi	sp,sp,16
+ 1dc:	8082                	ret
+
+00000000000001de <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 1de:	1141                	addi	sp,sp,-16
+ 1e0:	e422                	sd	s0,8(sp)
+ 1e2:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1e4:	00054783          	lbu	a5,0(a0)
+ 1e8:	cf91                	beqz	a5,204 <strlen+0x26>
+ 1ea:	0505                	addi	a0,a0,1
+ 1ec:	87aa                	mv	a5,a0
+ 1ee:	4685                	li	a3,1
+ 1f0:	9e89                	subw	a3,a3,a0
+ 1f2:	00f6853b          	addw	a0,a3,a5
+ 1f6:	0785                	addi	a5,a5,1
+ 1f8:	fff7c703          	lbu	a4,-1(a5)
+ 1fc:	fb7d                	bnez	a4,1f2 <strlen+0x14>
+    ;
+  return n;
+}
+ 1fe:	6422                	ld	s0,8(sp)
+ 200:	0141                	addi	sp,sp,16
+ 202:	8082                	ret
+  for(n = 0; s[n]; n++)
+ 204:	4501                	li	a0,0
+ 206:	bfe5                	j	1fe <strlen+0x20>
+
+0000000000000208 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 208:	1141                	addi	sp,sp,-16
+ 20a:	e422                	sd	s0,8(sp)
+ 20c:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+ 20e:	ca19                	beqz	a2,224 <memset+0x1c>
+ 210:	87aa                	mv	a5,a0
+ 212:	1602                	slli	a2,a2,0x20
+ 214:	9201                	srli	a2,a2,0x20
+ 216:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+ 21a:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+ 21e:	0785                	addi	a5,a5,1
+ 220:	fee79de3          	bne	a5,a4,21a <memset+0x12>
+  }
+  return dst;
+}
+ 224:	6422                	ld	s0,8(sp)
+ 226:	0141                	addi	sp,sp,16
+ 228:	8082                	ret
+
+000000000000022a <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 22a:	1141                	addi	sp,sp,-16
+ 22c:	e422                	sd	s0,8(sp)
+ 22e:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+ 230:	00054783          	lbu	a5,0(a0)
+ 234:	cb99                	beqz	a5,24a <strchr+0x20>
+    if(*s == c)
+ 236:	00f58763          	beq	a1,a5,244 <strchr+0x1a>
+  for(; *s; s++)
+ 23a:	0505                	addi	a0,a0,1
+ 23c:	00054783          	lbu	a5,0(a0)
+ 240:	fbfd                	bnez	a5,236 <strchr+0xc>
+      return (char*)s;
+  return 0;
+ 242:	4501                	li	a0,0
+}
+ 244:	6422                	ld	s0,8(sp)
+ 246:	0141                	addi	sp,sp,16
+ 248:	8082                	ret
+  return 0;
+ 24a:	4501                	li	a0,0
+ 24c:	bfe5                	j	244 <strchr+0x1a>
+
+000000000000024e <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 24e:	711d                	addi	sp,sp,-96
+ 250:	ec86                	sd	ra,88(sp)
+ 252:	e8a2                	sd	s0,80(sp)
+ 254:	e4a6                	sd	s1,72(sp)
+ 256:	e0ca                	sd	s2,64(sp)
+ 258:	fc4e                	sd	s3,56(sp)
+ 25a:	f852                	sd	s4,48(sp)
+ 25c:	f456                	sd	s5,40(sp)
+ 25e:	f05a                	sd	s6,32(sp)
+ 260:	ec5e                	sd	s7,24(sp)
+ 262:	1080                	addi	s0,sp,96
+ 264:	8baa                	mv	s7,a0
+ 266:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 268:	892a                	mv	s2,a0
+ 26a:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+ 26c:	4aa9                	li	s5,10
+ 26e:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+ 270:	89a6                	mv	s3,s1
+ 272:	2485                	addiw	s1,s1,1
+ 274:	0344d863          	bge	s1,s4,2a4 <gets+0x56>
+    cc = read(0, &c, 1);
+ 278:	4605                	li	a2,1
+ 27a:	faf40593          	addi	a1,s0,-81
+ 27e:	4501                	li	a0,0
+ 280:	00000097          	auipc	ra,0x0
+ 284:	19a080e7          	jalr	410(ra) # 41a <read>
+    if(cc < 1)
+ 288:	00a05e63          	blez	a0,2a4 <gets+0x56>
+    buf[i++] = c;
+ 28c:	faf44783          	lbu	a5,-81(s0)
+ 290:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+ 294:	01578763          	beq	a5,s5,2a2 <gets+0x54>
+ 298:	0905                	addi	s2,s2,1
+ 29a:	fd679be3          	bne	a5,s6,270 <gets+0x22>
+  for(i=0; i+1 < max; ){
+ 29e:	89a6                	mv	s3,s1
+ 2a0:	a011                	j	2a4 <gets+0x56>
+ 2a2:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+ 2a4:	99de                	add	s3,s3,s7
+ 2a6:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+ 2aa:	855e                	mv	a0,s7
+ 2ac:	60e6                	ld	ra,88(sp)
+ 2ae:	6446                	ld	s0,80(sp)
+ 2b0:	64a6                	ld	s1,72(sp)
+ 2b2:	6906                	ld	s2,64(sp)
+ 2b4:	79e2                	ld	s3,56(sp)
+ 2b6:	7a42                	ld	s4,48(sp)
+ 2b8:	7aa2                	ld	s5,40(sp)
+ 2ba:	7b02                	ld	s6,32(sp)
+ 2bc:	6be2                	ld	s7,24(sp)
+ 2be:	6125                	addi	sp,sp,96
+ 2c0:	8082                	ret
+
+00000000000002c2 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2c2:	1101                	addi	sp,sp,-32
+ 2c4:	ec06                	sd	ra,24(sp)
+ 2c6:	e822                	sd	s0,16(sp)
+ 2c8:	e426                	sd	s1,8(sp)
+ 2ca:	e04a                	sd	s2,0(sp)
+ 2cc:	1000                	addi	s0,sp,32
+ 2ce:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2d0:	4581                	li	a1,0
+ 2d2:	00000097          	auipc	ra,0x0
+ 2d6:	170080e7          	jalr	368(ra) # 442 <open>
+  if(fd < 0)
+ 2da:	02054563          	bltz	a0,304 <stat+0x42>
+ 2de:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+ 2e0:	85ca                	mv	a1,s2
+ 2e2:	00000097          	auipc	ra,0x0
+ 2e6:	178080e7          	jalr	376(ra) # 45a <fstat>
+ 2ea:	892a                	mv	s2,a0
+  close(fd);
+ 2ec:	8526                	mv	a0,s1
+ 2ee:	00000097          	auipc	ra,0x0
+ 2f2:	13c080e7          	jalr	316(ra) # 42a <close>
+  return r;
+}
+ 2f6:	854a                	mv	a0,s2
+ 2f8:	60e2                	ld	ra,24(sp)
+ 2fa:	6442                	ld	s0,16(sp)
+ 2fc:	64a2                	ld	s1,8(sp)
+ 2fe:	6902                	ld	s2,0(sp)
+ 300:	6105                	addi	sp,sp,32
+ 302:	8082                	ret
+    return -1;
+ 304:	597d                	li	s2,-1
+ 306:	bfc5                	j	2f6 <stat+0x34>
+
+0000000000000308 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 308:	1141                	addi	sp,sp,-16
+ 30a:	e422                	sd	s0,8(sp)
+ 30c:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 30e:	00054683          	lbu	a3,0(a0)
+ 312:	fd06879b          	addiw	a5,a3,-48
+ 316:	0ff7f793          	zext.b	a5,a5
+ 31a:	4625                	li	a2,9
+ 31c:	02f66863          	bltu	a2,a5,34c <atoi+0x44>
+ 320:	872a                	mv	a4,a0
+  n = 0;
+ 322:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+ 324:	0705                	addi	a4,a4,1
+ 326:	0025179b          	slliw	a5,a0,0x2
+ 32a:	9fa9                	addw	a5,a5,a0
+ 32c:	0017979b          	slliw	a5,a5,0x1
+ 330:	9fb5                	addw	a5,a5,a3
+ 332:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+ 336:	00074683          	lbu	a3,0(a4)
+ 33a:	fd06879b          	addiw	a5,a3,-48
+ 33e:	0ff7f793          	zext.b	a5,a5
+ 342:	fef671e3          	bgeu	a2,a5,324 <atoi+0x1c>
+  return n;
+}
+ 346:	6422                	ld	s0,8(sp)
+ 348:	0141                	addi	sp,sp,16
+ 34a:	8082                	ret
+  n = 0;
+ 34c:	4501                	li	a0,0
+ 34e:	bfe5                	j	346 <atoi+0x3e>
+
+0000000000000350 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 350:	1141                	addi	sp,sp,-16
+ 352:	e422                	sd	s0,8(sp)
+ 354:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+ 356:	02b57463          	bgeu	a0,a1,37e <memmove+0x2e>
+    while(n-- > 0)
+ 35a:	00c05f63          	blez	a2,378 <memmove+0x28>
+ 35e:	1602                	slli	a2,a2,0x20
+ 360:	9201                	srli	a2,a2,0x20
+ 362:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+ 366:	872a                	mv	a4,a0
+      *dst++ = *src++;
+ 368:	0585                	addi	a1,a1,1
+ 36a:	0705                	addi	a4,a4,1
+ 36c:	fff5c683          	lbu	a3,-1(a1)
+ 370:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+ 374:	fee79ae3          	bne	a5,a4,368 <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+ 378:	6422                	ld	s0,8(sp)
+ 37a:	0141                	addi	sp,sp,16
+ 37c:	8082                	ret
+    dst += n;
+ 37e:	00c50733          	add	a4,a0,a2
+    src += n;
+ 382:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+ 384:	fec05ae3          	blez	a2,378 <memmove+0x28>
+ 388:	fff6079b          	addiw	a5,a2,-1
+ 38c:	1782                	slli	a5,a5,0x20
+ 38e:	9381                	srli	a5,a5,0x20
+ 390:	fff7c793          	not	a5,a5
+ 394:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+ 396:	15fd                	addi	a1,a1,-1
+ 398:	177d                	addi	a4,a4,-1
+ 39a:	0005c683          	lbu	a3,0(a1)
+ 39e:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+ 3a2:	fee79ae3          	bne	a5,a4,396 <memmove+0x46>
+ 3a6:	bfc9                	j	378 <memmove+0x28>
+
+00000000000003a8 <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+ 3a8:	1141                	addi	sp,sp,-16
+ 3aa:	e422                	sd	s0,8(sp)
+ 3ac:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+ 3ae:	ca05                	beqz	a2,3de <memcmp+0x36>
+ 3b0:	fff6069b          	addiw	a3,a2,-1
+ 3b4:	1682                	slli	a3,a3,0x20
+ 3b6:	9281                	srli	a3,a3,0x20
+ 3b8:	0685                	addi	a3,a3,1
+ 3ba:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+ 3bc:	00054783          	lbu	a5,0(a0)
+ 3c0:	0005c703          	lbu	a4,0(a1)
+ 3c4:	00e79863          	bne	a5,a4,3d4 <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+ 3c8:	0505                	addi	a0,a0,1
+    p2++;
+ 3ca:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+ 3cc:	fed518e3          	bne	a0,a3,3bc <memcmp+0x14>
+  }
+  return 0;
+ 3d0:	4501                	li	a0,0
+ 3d2:	a019                	j	3d8 <memcmp+0x30>
+      return *p1 - *p2;
+ 3d4:	40e7853b          	subw	a0,a5,a4
+}
+ 3d8:	6422                	ld	s0,8(sp)
+ 3da:	0141                	addi	sp,sp,16
+ 3dc:	8082                	ret
+  return 0;
+ 3de:	4501                	li	a0,0
+ 3e0:	bfe5                	j	3d8 <memcmp+0x30>
+
+00000000000003e2 <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+ 3e2:	1141                	addi	sp,sp,-16
+ 3e4:	e406                	sd	ra,8(sp)
+ 3e6:	e022                	sd	s0,0(sp)
+ 3e8:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+ 3ea:	00000097          	auipc	ra,0x0
+ 3ee:	f66080e7          	jalr	-154(ra) # 350 <memmove>
+}
+ 3f2:	60a2                	ld	ra,8(sp)
+ 3f4:	6402                	ld	s0,0(sp)
+ 3f6:	0141                	addi	sp,sp,16
+ 3f8:	8082                	ret
+
+00000000000003fa <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ 3fa:	4885                	li	a7,1
+ ecall
+ 3fc:	00000073          	ecall
+ ret
+ 400:	8082                	ret
+
+0000000000000402 <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+ 402:	4889                	li	a7,2
+ ecall
+ 404:	00000073          	ecall
+ ret
+ 408:	8082                	ret
+
+000000000000040a <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+ 40a:	488d                	li	a7,3
+ ecall
+ 40c:	00000073          	ecall
+ ret
+ 410:	8082                	ret
+
+0000000000000412 <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ 412:	4891                	li	a7,4
+ ecall
+ 414:	00000073          	ecall
+ ret
+ 418:	8082                	ret
+
+000000000000041a <read>:
+.global read
+read:
+ li a7, SYS_read
+ 41a:	4895                	li	a7,5
+ ecall
+ 41c:	00000073          	ecall
+ ret
+ 420:	8082                	ret
+
+0000000000000422 <write>:
+.global write
+write:
+ li a7, SYS_write
+ 422:	48c1                	li	a7,16
+ ecall
+ 424:	00000073          	ecall
+ ret
+ 428:	8082                	ret
+
+000000000000042a <close>:
+.global close
+close:
+ li a7, SYS_close
+ 42a:	48d5                	li	a7,21
+ ecall
+ 42c:	00000073          	ecall
+ ret
+ 430:	8082                	ret
+
+0000000000000432 <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+ 432:	4899                	li	a7,6
+ ecall
+ 434:	00000073          	ecall
+ ret
+ 438:	8082                	ret
+
+000000000000043a <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+ 43a:	489d                	li	a7,7
+ ecall
+ 43c:	00000073          	ecall
+ ret
+ 440:	8082                	ret
+
+0000000000000442 <open>:
+.global open
+open:
+ li a7, SYS_open
+ 442:	48bd                	li	a7,15
+ ecall
+ 444:	00000073          	ecall
+ ret
+ 448:	8082                	ret
+
+000000000000044a <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ 44a:	48c5                	li	a7,17
+ ecall
+ 44c:	00000073          	ecall
+ ret
+ 450:	8082                	ret
+
+0000000000000452 <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ 452:	48c9                	li	a7,18
+ ecall
+ 454:	00000073          	ecall
+ ret
+ 458:	8082                	ret
+
+000000000000045a <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ 45a:	48a1                	li	a7,8
+ ecall
+ 45c:	00000073          	ecall
+ ret
+ 460:	8082                	ret
+
+0000000000000462 <link>:
+.global link
+link:
+ li a7, SYS_link
+ 462:	48cd                	li	a7,19
+ ecall
+ 464:	00000073          	ecall
+ ret
+ 468:	8082                	ret
+
+000000000000046a <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ 46a:	48d1                	li	a7,20
+ ecall
+ 46c:	00000073          	ecall
+ ret
+ 470:	8082                	ret
+
+0000000000000472 <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ 472:	48a5                	li	a7,9
+ ecall
+ 474:	00000073          	ecall
+ ret
+ 478:	8082                	ret
+
+000000000000047a <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+ 47a:	48a9                	li	a7,10
+ ecall
+ 47c:	00000073          	ecall
+ ret
+ 480:	8082                	ret
+
+0000000000000482 <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ 482:	48ad                	li	a7,11
+ ecall
+ 484:	00000073          	ecall
+ ret
+ 488:	8082                	ret
+
+000000000000048a <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ 48a:	48b1                	li	a7,12
+ ecall
+ 48c:	00000073          	ecall
+ ret
+ 490:	8082                	ret
+
+0000000000000492 <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ 492:	48b5                	li	a7,13
+ ecall
+ 494:	00000073          	ecall
+ ret
+ 498:	8082                	ret
+
+000000000000049a <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ 49a:	48b9                	li	a7,14
+ ecall
+ 49c:	00000073          	ecall
+ ret
+ 4a0:	8082                	ret
+
+00000000000004a2 <setp>:
+.global setp
+setp:
+ li a7, SYS_setp
+ 4a2:	48d9                	li	a7,22
+ ecall
+ 4a4:	00000073          	ecall
+ ret
+ 4a8:	8082                	ret
+
+00000000000004aa <semget>:
+.global semget
+semget:
+ li a7, SYS_semget
+ 4aa:	48dd                	li	a7,23
+ ecall
+ 4ac:	00000073          	ecall
+ ret
+ 4b0:	8082                	ret
+
+00000000000004b2 <semdown>:
+.global semdown
+semdown:
+ li a7, SYS_semdown
+ 4b2:	48e1                	li	a7,24
+ ecall
+ 4b4:	00000073          	ecall
+ ret
+ 4b8:	8082                	ret
+
+00000000000004ba <semup>:
+.global semup
+semup:
+ li a7, SYS_semup
+ 4ba:	48e5                	li	a7,25
+ ecall
+ 4bc:	00000073          	ecall
+ ret
+ 4c0:	8082                	ret
+
+00000000000004c2 <semclose>:
+.global semclose
+semclose:
+ li a7, SYS_semclose
+ 4c2:	48e9                	li	a7,26
+ ecall
+ 4c4:	00000073          	ecall
+ ret
+ 4c8:	8082                	ret
+
+00000000000004ca <timeout>:
+.global timeout
+timeout:
+ li a7, SYS_timeout
+ 4ca:	48ed                	li	a7,27
+ ecall
+ 4cc:	00000073          	ecall
+ ret
+ 4d0:	8082                	ret
+
+00000000000004d2 <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+ 4d2:	1101                	addi	sp,sp,-32
+ 4d4:	ec06                	sd	ra,24(sp)
+ 4d6:	e822                	sd	s0,16(sp)
+ 4d8:	1000                	addi	s0,sp,32
+ 4da:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+ 4de:	4605                	li	a2,1
+ 4e0:	fef40593          	addi	a1,s0,-17
+ 4e4:	00000097          	auipc	ra,0x0
+ 4e8:	f3e080e7          	jalr	-194(ra) # 422 <write>
+}
+ 4ec:	60e2                	ld	ra,24(sp)
+ 4ee:	6442                	ld	s0,16(sp)
+ 4f0:	6105                	addi	sp,sp,32
+ 4f2:	8082                	ret
+
+00000000000004f4 <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 4f4:	7139                	addi	sp,sp,-64
+ 4f6:	fc06                	sd	ra,56(sp)
+ 4f8:	f822                	sd	s0,48(sp)
+ 4fa:	f426                	sd	s1,40(sp)
+ 4fc:	f04a                	sd	s2,32(sp)
+ 4fe:	ec4e                	sd	s3,24(sp)
+ 500:	0080                	addi	s0,sp,64
+ 502:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 504:	c299                	beqz	a3,50a <printint+0x16>
+ 506:	0805c963          	bltz	a1,598 <printint+0xa4>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 50a:	2581                	sext.w	a1,a1
+  neg = 0;
+ 50c:	4881                	li	a7,0
+ 50e:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+ 512:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+ 514:	2601                	sext.w	a2,a2
+ 516:	00000517          	auipc	a0,0x0
+ 51a:	4e250513          	addi	a0,a0,1250 # 9f8 <digits>
+ 51e:	883a                	mv	a6,a4
+ 520:	2705                	addiw	a4,a4,1
+ 522:	02c5f7bb          	remuw	a5,a1,a2
+ 526:	1782                	slli	a5,a5,0x20
+ 528:	9381                	srli	a5,a5,0x20
+ 52a:	97aa                	add	a5,a5,a0
+ 52c:	0007c783          	lbu	a5,0(a5)
+ 530:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+ 534:	0005879b          	sext.w	a5,a1
+ 538:	02c5d5bb          	divuw	a1,a1,a2
+ 53c:	0685                	addi	a3,a3,1
+ 53e:	fec7f0e3          	bgeu	a5,a2,51e <printint+0x2a>
+  if(neg)
+ 542:	00088c63          	beqz	a7,55a <printint+0x66>
+    buf[i++] = '-';
+ 546:	fd070793          	addi	a5,a4,-48
+ 54a:	00878733          	add	a4,a5,s0
+ 54e:	02d00793          	li	a5,45
+ 552:	fef70823          	sb	a5,-16(a4)
+ 556:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+ 55a:	02e05863          	blez	a4,58a <printint+0x96>
+ 55e:	fc040793          	addi	a5,s0,-64
+ 562:	00e78933          	add	s2,a5,a4
+ 566:	fff78993          	addi	s3,a5,-1
+ 56a:	99ba                	add	s3,s3,a4
+ 56c:	377d                	addiw	a4,a4,-1
+ 56e:	1702                	slli	a4,a4,0x20
+ 570:	9301                	srli	a4,a4,0x20
+ 572:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+ 576:	fff94583          	lbu	a1,-1(s2)
+ 57a:	8526                	mv	a0,s1
+ 57c:	00000097          	auipc	ra,0x0
+ 580:	f56080e7          	jalr	-170(ra) # 4d2 <putc>
+  while(--i >= 0)
+ 584:	197d                	addi	s2,s2,-1
+ 586:	ff3918e3          	bne	s2,s3,576 <printint+0x82>
+}
+ 58a:	70e2                	ld	ra,56(sp)
+ 58c:	7442                	ld	s0,48(sp)
+ 58e:	74a2                	ld	s1,40(sp)
+ 590:	7902                	ld	s2,32(sp)
+ 592:	69e2                	ld	s3,24(sp)
+ 594:	6121                	addi	sp,sp,64
+ 596:	8082                	ret
+    x = -xx;
+ 598:	40b005bb          	negw	a1,a1
+    neg = 1;
+ 59c:	4885                	li	a7,1
+    x = -xx;
+ 59e:	bf85                	j	50e <printint+0x1a>
+
+00000000000005a0 <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+ 5a0:	7119                	addi	sp,sp,-128
+ 5a2:	fc86                	sd	ra,120(sp)
+ 5a4:	f8a2                	sd	s0,112(sp)
+ 5a6:	f4a6                	sd	s1,104(sp)
+ 5a8:	f0ca                	sd	s2,96(sp)
+ 5aa:	ecce                	sd	s3,88(sp)
+ 5ac:	e8d2                	sd	s4,80(sp)
+ 5ae:	e4d6                	sd	s5,72(sp)
+ 5b0:	e0da                	sd	s6,64(sp)
+ 5b2:	fc5e                	sd	s7,56(sp)
+ 5b4:	f862                	sd	s8,48(sp)
+ 5b6:	f466                	sd	s9,40(sp)
+ 5b8:	f06a                	sd	s10,32(sp)
+ 5ba:	ec6e                	sd	s11,24(sp)
+ 5bc:	0100                	addi	s0,sp,128
+  char *s;
+  int c, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+ 5be:	0005c903          	lbu	s2,0(a1)
+ 5c2:	18090f63          	beqz	s2,760 <vprintf+0x1c0>
+ 5c6:	8aaa                	mv	s5,a0
+ 5c8:	8b32                	mv	s6,a2
+ 5ca:	00158493          	addi	s1,a1,1
+  state = 0;
+ 5ce:	4981                	li	s3,0
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 5d0:	02500a13          	li	s4,37
+ 5d4:	4c55                	li	s8,21
+ 5d6:	00000c97          	auipc	s9,0x0
+ 5da:	3cac8c93          	addi	s9,s9,970 # 9a0 <malloc+0x13c>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c == 's'){
+        s = va_arg(ap, char*);
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 5de:	02800d93          	li	s11,40
+  putc(fd, 'x');
+ 5e2:	4d41                	li	s10,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 5e4:	00000b97          	auipc	s7,0x0
+ 5e8:	414b8b93          	addi	s7,s7,1044 # 9f8 <digits>
+ 5ec:	a839                	j	60a <vprintf+0x6a>
+        putc(fd, c);
+ 5ee:	85ca                	mv	a1,s2
+ 5f0:	8556                	mv	a0,s5
+ 5f2:	00000097          	auipc	ra,0x0
+ 5f6:	ee0080e7          	jalr	-288(ra) # 4d2 <putc>
+ 5fa:	a019                	j	600 <vprintf+0x60>
+    } else if(state == '%'){
+ 5fc:	01498d63          	beq	s3,s4,616 <vprintf+0x76>
+  for(i = 0; fmt[i]; i++){
+ 600:	0485                	addi	s1,s1,1
+ 602:	fff4c903          	lbu	s2,-1(s1)
+ 606:	14090d63          	beqz	s2,760 <vprintf+0x1c0>
+    if(state == 0){
+ 60a:	fe0999e3          	bnez	s3,5fc <vprintf+0x5c>
+      if(c == '%'){
+ 60e:	ff4910e3          	bne	s2,s4,5ee <vprintf+0x4e>
+        state = '%';
+ 612:	89d2                	mv	s3,s4
+ 614:	b7f5                	j	600 <vprintf+0x60>
+      if(c == 'd'){
+ 616:	11490c63          	beq	s2,s4,72e <vprintf+0x18e>
+ 61a:	f9d9079b          	addiw	a5,s2,-99
+ 61e:	0ff7f793          	zext.b	a5,a5
+ 622:	10fc6e63          	bltu	s8,a5,73e <vprintf+0x19e>
+ 626:	f9d9079b          	addiw	a5,s2,-99
+ 62a:	0ff7f713          	zext.b	a4,a5
+ 62e:	10ec6863          	bltu	s8,a4,73e <vprintf+0x19e>
+ 632:	00271793          	slli	a5,a4,0x2
+ 636:	97e6                	add	a5,a5,s9
+ 638:	439c                	lw	a5,0(a5)
+ 63a:	97e6                	add	a5,a5,s9
+ 63c:	8782                	jr	a5
+        printint(fd, va_arg(ap, int), 10, 1);
+ 63e:	008b0913          	addi	s2,s6,8
+ 642:	4685                	li	a3,1
+ 644:	4629                	li	a2,10
+ 646:	000b2583          	lw	a1,0(s6)
+ 64a:	8556                	mv	a0,s5
+ 64c:	00000097          	auipc	ra,0x0
+ 650:	ea8080e7          	jalr	-344(ra) # 4f4 <printint>
+ 654:	8b4a                	mv	s6,s2
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 656:	4981                	li	s3,0
+ 658:	b765                	j	600 <vprintf+0x60>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 65a:	008b0913          	addi	s2,s6,8
+ 65e:	4681                	li	a3,0
+ 660:	4629                	li	a2,10
+ 662:	000b2583          	lw	a1,0(s6)
+ 666:	8556                	mv	a0,s5
+ 668:	00000097          	auipc	ra,0x0
+ 66c:	e8c080e7          	jalr	-372(ra) # 4f4 <printint>
+ 670:	8b4a                	mv	s6,s2
+      state = 0;
+ 672:	4981                	li	s3,0
+ 674:	b771                	j	600 <vprintf+0x60>
+        printint(fd, va_arg(ap, int), 16, 0);
+ 676:	008b0913          	addi	s2,s6,8
+ 67a:	4681                	li	a3,0
+ 67c:	866a                	mv	a2,s10
+ 67e:	000b2583          	lw	a1,0(s6)
+ 682:	8556                	mv	a0,s5
+ 684:	00000097          	auipc	ra,0x0
+ 688:	e70080e7          	jalr	-400(ra) # 4f4 <printint>
+ 68c:	8b4a                	mv	s6,s2
+      state = 0;
+ 68e:	4981                	li	s3,0
+ 690:	bf85                	j	600 <vprintf+0x60>
+        printptr(fd, va_arg(ap, uint64));
+ 692:	008b0793          	addi	a5,s6,8
+ 696:	f8f43423          	sd	a5,-120(s0)
+ 69a:	000b3983          	ld	s3,0(s6)
+  putc(fd, '0');
+ 69e:	03000593          	li	a1,48
+ 6a2:	8556                	mv	a0,s5
+ 6a4:	00000097          	auipc	ra,0x0
+ 6a8:	e2e080e7          	jalr	-466(ra) # 4d2 <putc>
+  putc(fd, 'x');
+ 6ac:	07800593          	li	a1,120
+ 6b0:	8556                	mv	a0,s5
+ 6b2:	00000097          	auipc	ra,0x0
+ 6b6:	e20080e7          	jalr	-480(ra) # 4d2 <putc>
+ 6ba:	896a                	mv	s2,s10
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 6bc:	03c9d793          	srli	a5,s3,0x3c
+ 6c0:	97de                	add	a5,a5,s7
+ 6c2:	0007c583          	lbu	a1,0(a5)
+ 6c6:	8556                	mv	a0,s5
+ 6c8:	00000097          	auipc	ra,0x0
+ 6cc:	e0a080e7          	jalr	-502(ra) # 4d2 <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+ 6d0:	0992                	slli	s3,s3,0x4
+ 6d2:	397d                	addiw	s2,s2,-1
+ 6d4:	fe0914e3          	bnez	s2,6bc <vprintf+0x11c>
+        printptr(fd, va_arg(ap, uint64));
+ 6d8:	f8843b03          	ld	s6,-120(s0)
+      state = 0;
+ 6dc:	4981                	li	s3,0
+ 6de:	b70d                	j	600 <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 6e0:	008b0913          	addi	s2,s6,8
+ 6e4:	000b3983          	ld	s3,0(s6)
+        if(s == 0)
+ 6e8:	02098163          	beqz	s3,70a <vprintf+0x16a>
+        while(*s != 0){
+ 6ec:	0009c583          	lbu	a1,0(s3)
+ 6f0:	c5ad                	beqz	a1,75a <vprintf+0x1ba>
+          putc(fd, *s);
+ 6f2:	8556                	mv	a0,s5
+ 6f4:	00000097          	auipc	ra,0x0
+ 6f8:	dde080e7          	jalr	-546(ra) # 4d2 <putc>
+          s++;
+ 6fc:	0985                	addi	s3,s3,1
+        while(*s != 0){
+ 6fe:	0009c583          	lbu	a1,0(s3)
+ 702:	f9e5                	bnez	a1,6f2 <vprintf+0x152>
+        s = va_arg(ap, char*);
+ 704:	8b4a                	mv	s6,s2
+      state = 0;
+ 706:	4981                	li	s3,0
+ 708:	bde5                	j	600 <vprintf+0x60>
+          s = "(null)";
+ 70a:	00000997          	auipc	s3,0x0
+ 70e:	28e98993          	addi	s3,s3,654 # 998 <malloc+0x134>
+        while(*s != 0){
+ 712:	85ee                	mv	a1,s11
+ 714:	bff9                	j	6f2 <vprintf+0x152>
+        putc(fd, va_arg(ap, uint));
+ 716:	008b0913          	addi	s2,s6,8
+ 71a:	000b4583          	lbu	a1,0(s6)
+ 71e:	8556                	mv	a0,s5
+ 720:	00000097          	auipc	ra,0x0
+ 724:	db2080e7          	jalr	-590(ra) # 4d2 <putc>
+ 728:	8b4a                	mv	s6,s2
+      state = 0;
+ 72a:	4981                	li	s3,0
+ 72c:	bdd1                	j	600 <vprintf+0x60>
+        putc(fd, c);
+ 72e:	85d2                	mv	a1,s4
+ 730:	8556                	mv	a0,s5
+ 732:	00000097          	auipc	ra,0x0
+ 736:	da0080e7          	jalr	-608(ra) # 4d2 <putc>
+      state = 0;
+ 73a:	4981                	li	s3,0
+ 73c:	b5d1                	j	600 <vprintf+0x60>
+        putc(fd, '%');
+ 73e:	85d2                	mv	a1,s4
+ 740:	8556                	mv	a0,s5
+ 742:	00000097          	auipc	ra,0x0
+ 746:	d90080e7          	jalr	-624(ra) # 4d2 <putc>
+        putc(fd, c);
+ 74a:	85ca                	mv	a1,s2
+ 74c:	8556                	mv	a0,s5
+ 74e:	00000097          	auipc	ra,0x0
+ 752:	d84080e7          	jalr	-636(ra) # 4d2 <putc>
+      state = 0;
+ 756:	4981                	li	s3,0
+ 758:	b565                	j	600 <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 75a:	8b4a                	mv	s6,s2
+      state = 0;
+ 75c:	4981                	li	s3,0
+ 75e:	b54d                	j	600 <vprintf+0x60>
+    }
+  }
+}
+ 760:	70e6                	ld	ra,120(sp)
+ 762:	7446                	ld	s0,112(sp)
+ 764:	74a6                	ld	s1,104(sp)
+ 766:	7906                	ld	s2,96(sp)
+ 768:	69e6                	ld	s3,88(sp)
+ 76a:	6a46                	ld	s4,80(sp)
+ 76c:	6aa6                	ld	s5,72(sp)
+ 76e:	6b06                	ld	s6,64(sp)
+ 770:	7be2                	ld	s7,56(sp)
+ 772:	7c42                	ld	s8,48(sp)
+ 774:	7ca2                	ld	s9,40(sp)
+ 776:	7d02                	ld	s10,32(sp)
+ 778:	6de2                	ld	s11,24(sp)
+ 77a:	6109                	addi	sp,sp,128
+ 77c:	8082                	ret
+
+000000000000077e <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+ 77e:	715d                	addi	sp,sp,-80
+ 780:	ec06                	sd	ra,24(sp)
+ 782:	e822                	sd	s0,16(sp)
+ 784:	1000                	addi	s0,sp,32
+ 786:	e010                	sd	a2,0(s0)
+ 788:	e414                	sd	a3,8(s0)
+ 78a:	e818                	sd	a4,16(s0)
+ 78c:	ec1c                	sd	a5,24(s0)
+ 78e:	03043023          	sd	a6,32(s0)
+ 792:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 796:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+ 79a:	8622                	mv	a2,s0
+ 79c:	00000097          	auipc	ra,0x0
+ 7a0:	e04080e7          	jalr	-508(ra) # 5a0 <vprintf>
+}
+ 7a4:	60e2                	ld	ra,24(sp)
+ 7a6:	6442                	ld	s0,16(sp)
+ 7a8:	6161                	addi	sp,sp,80
+ 7aa:	8082                	ret
+
+00000000000007ac <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+ 7ac:	711d                	addi	sp,sp,-96
+ 7ae:	ec06                	sd	ra,24(sp)
+ 7b0:	e822                	sd	s0,16(sp)
+ 7b2:	1000                	addi	s0,sp,32
+ 7b4:	e40c                	sd	a1,8(s0)
+ 7b6:	e810                	sd	a2,16(s0)
+ 7b8:	ec14                	sd	a3,24(s0)
+ 7ba:	f018                	sd	a4,32(s0)
+ 7bc:	f41c                	sd	a5,40(s0)
+ 7be:	03043823          	sd	a6,48(s0)
+ 7c2:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 7c6:	00840613          	addi	a2,s0,8
+ 7ca:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+ 7ce:	85aa                	mv	a1,a0
+ 7d0:	4505                	li	a0,1
+ 7d2:	00000097          	auipc	ra,0x0
+ 7d6:	dce080e7          	jalr	-562(ra) # 5a0 <vprintf>
+}
+ 7da:	60e2                	ld	ra,24(sp)
+ 7dc:	6442                	ld	s0,16(sp)
+ 7de:	6125                	addi	sp,sp,96
+ 7e0:	8082                	ret
+
+00000000000007e2 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 7e2:	1141                	addi	sp,sp,-16
+ 7e4:	e422                	sd	s0,8(sp)
+ 7e6:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 7e8:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 7ec:	00000797          	auipc	a5,0x0
+ 7f0:	2247b783          	ld	a5,548(a5) # a10 <freep>
+ 7f4:	a02d                	j	81e <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 7f6:	4618                	lw	a4,8(a2)
+ 7f8:	9f2d                	addw	a4,a4,a1
+ 7fa:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 7fe:	6398                	ld	a4,0(a5)
+ 800:	6310                	ld	a2,0(a4)
+ 802:	a83d                	j	840 <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 804:	ff852703          	lw	a4,-8(a0)
+ 808:	9f31                	addw	a4,a4,a2
+ 80a:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+ 80c:	ff053683          	ld	a3,-16(a0)
+ 810:	a091                	j	854 <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 812:	6398                	ld	a4,0(a5)
+ 814:	00e7e463          	bltu	a5,a4,81c <free+0x3a>
+ 818:	00e6ea63          	bltu	a3,a4,82c <free+0x4a>
+{
+ 81c:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 81e:	fed7fae3          	bgeu	a5,a3,812 <free+0x30>
+ 822:	6398                	ld	a4,0(a5)
+ 824:	00e6e463          	bltu	a3,a4,82c <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 828:	fee7eae3          	bltu	a5,a4,81c <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+ 82c:	ff852583          	lw	a1,-8(a0)
+ 830:	6390                	ld	a2,0(a5)
+ 832:	02059813          	slli	a6,a1,0x20
+ 836:	01c85713          	srli	a4,a6,0x1c
+ 83a:	9736                	add	a4,a4,a3
+ 83c:	fae60de3          	beq	a2,a4,7f6 <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 840:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+ 844:	4790                	lw	a2,8(a5)
+ 846:	02061593          	slli	a1,a2,0x20
+ 84a:	01c5d713          	srli	a4,a1,0x1c
+ 84e:	973e                	add	a4,a4,a5
+ 850:	fae68ae3          	beq	a3,a4,804 <free+0x22>
+    p->s.ptr = bp->s.ptr;
+ 854:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 856:	00000717          	auipc	a4,0x0
+ 85a:	1af73d23          	sd	a5,442(a4) # a10 <freep>
+}
+ 85e:	6422                	ld	s0,8(sp)
+ 860:	0141                	addi	sp,sp,16
+ 862:	8082                	ret
+
+0000000000000864 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 864:	7139                	addi	sp,sp,-64
+ 866:	fc06                	sd	ra,56(sp)
+ 868:	f822                	sd	s0,48(sp)
+ 86a:	f426                	sd	s1,40(sp)
+ 86c:	f04a                	sd	s2,32(sp)
+ 86e:	ec4e                	sd	s3,24(sp)
+ 870:	e852                	sd	s4,16(sp)
+ 872:	e456                	sd	s5,8(sp)
+ 874:	e05a                	sd	s6,0(sp)
+ 876:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 878:	02051493          	slli	s1,a0,0x20
+ 87c:	9081                	srli	s1,s1,0x20
+ 87e:	04bd                	addi	s1,s1,15
+ 880:	8091                	srli	s1,s1,0x4
+ 882:	0014899b          	addiw	s3,s1,1
+ 886:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+ 888:	00000517          	auipc	a0,0x0
+ 88c:	18853503          	ld	a0,392(a0) # a10 <freep>
+ 890:	c515                	beqz	a0,8bc <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 892:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 894:	4798                	lw	a4,8(a5)
+ 896:	02977f63          	bgeu	a4,s1,8d4 <malloc+0x70>
+ 89a:	8a4e                	mv	s4,s3
+ 89c:	0009871b          	sext.w	a4,s3
+ 8a0:	6685                	lui	a3,0x1
+ 8a2:	00d77363          	bgeu	a4,a3,8a8 <malloc+0x44>
+ 8a6:	6a05                	lui	s4,0x1
+ 8a8:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+ 8ac:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 8b0:	00000917          	auipc	s2,0x0
+ 8b4:	16090913          	addi	s2,s2,352 # a10 <freep>
+  if(p == (char*)-1)
+ 8b8:	5afd                	li	s5,-1
+ 8ba:	a895                	j	92e <malloc+0xca>
+    base.s.ptr = freep = prevp = &base;
+ 8bc:	00000797          	auipc	a5,0x0
+ 8c0:	35c78793          	addi	a5,a5,860 # c18 <base>
+ 8c4:	00000717          	auipc	a4,0x0
+ 8c8:	14f73623          	sd	a5,332(a4) # a10 <freep>
+ 8cc:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+ 8ce:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+ 8d2:	b7e1                	j	89a <malloc+0x36>
+      if(p->s.size == nunits)
+ 8d4:	02e48c63          	beq	s1,a4,90c <malloc+0xa8>
+        p->s.size -= nunits;
+ 8d8:	4137073b          	subw	a4,a4,s3
+ 8dc:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+ 8de:	02071693          	slli	a3,a4,0x20
+ 8e2:	01c6d713          	srli	a4,a3,0x1c
+ 8e6:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+ 8e8:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+ 8ec:	00000717          	auipc	a4,0x0
+ 8f0:	12a73223          	sd	a0,292(a4) # a10 <freep>
+      return (void*)(p + 1);
+ 8f4:	01078513          	addi	a0,a5,16
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ 8f8:	70e2                	ld	ra,56(sp)
+ 8fa:	7442                	ld	s0,48(sp)
+ 8fc:	74a2                	ld	s1,40(sp)
+ 8fe:	7902                	ld	s2,32(sp)
+ 900:	69e2                	ld	s3,24(sp)
+ 902:	6a42                	ld	s4,16(sp)
+ 904:	6aa2                	ld	s5,8(sp)
+ 906:	6b02                	ld	s6,0(sp)
+ 908:	6121                	addi	sp,sp,64
+ 90a:	8082                	ret
+        prevp->s.ptr = p->s.ptr;
+ 90c:	6398                	ld	a4,0(a5)
+ 90e:	e118                	sd	a4,0(a0)
+ 910:	bff1                	j	8ec <malloc+0x88>
+  hp->s.size = nu;
+ 912:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+ 916:	0541                	addi	a0,a0,16
+ 918:	00000097          	auipc	ra,0x0
+ 91c:	eca080e7          	jalr	-310(ra) # 7e2 <free>
+  return freep;
+ 920:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+ 924:	d971                	beqz	a0,8f8 <malloc+0x94>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 926:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 928:	4798                	lw	a4,8(a5)
+ 92a:	fa9775e3          	bgeu	a4,s1,8d4 <malloc+0x70>
+    if(p == freep)
+ 92e:	00093703          	ld	a4,0(s2)
+ 932:	853e                	mv	a0,a5
+ 934:	fef719e3          	bne	a4,a5,926 <malloc+0xc2>
+  p = sbrk(nu * sizeof(Header));
+ 938:	8552                	mv	a0,s4
+ 93a:	00000097          	auipc	ra,0x0
+ 93e:	b50080e7          	jalr	-1200(ra) # 48a <sbrk>
+  if(p == (char*)-1)
+ 942:	fd5518e3          	bne	a0,s5,912 <malloc+0xae>
+        return 0;
+ 946:	4501                	li	a0,0
+ 948:	bf45                	j	8f8 <malloc+0x94>
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/wc.d os-workshop/user/wc.d
--- xv6-riscv/user/wc.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/wc.d	2022-05-28 22:34:37.000000000 -0300
@@ -0,0 +1 @@
+user/wc.o: user/wc.c kernel/types.h kernel/stat.h user/user.h
Binary files xv6-riscv/user/wc.o and os-workshop/user/wc.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/wc.sym os-workshop/user/wc.sym
--- xv6-riscv/user/wc.sym	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/wc.sym	2022-05-28 22:34:37.000000000 -0300
@@ -0,0 +1,78 @@
+0000000000000000 .text
+0000000000000950 .rodata
+0000000000000a10 .sbss
+0000000000000a18 .bss
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_aranges
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_line
+0000000000000000 .debug_frame
+0000000000000000 .debug_str
+0000000000000000 .debug_line_str
+0000000000000000 .debug_loclists
+0000000000000000 .debug_rnglists
+0000000000000000 wc.c
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+00000000000004d2 putc
+00000000000004f4 printint
+00000000000009f8 digits
+0000000000000000 umalloc.c
+0000000000000a10 freep
+0000000000000c18 base
+0000000000000196 strcpy
+00000000000007ac printf
+0000000000001209 __global_pointer$
+0000000000000350 memmove
+000000000000044a mknod
+00000000000004b2 semdown
+000000000000024e gets
+0000000000000a09 __SDATA_BEGIN__
+00000000000004aa semget
+0000000000000482 getpid
+00000000000003e2 memcpy
+0000000000000864 malloc
+00000000000004c2 semclose
+0000000000000492 sleep
+0000000000000412 pipe
+0000000000000422 write
+000000000000045a fstat
+000000000000077e fprintf
+0000000000000432 kill
+00000000000005a0 vprintf
+0000000000000472 chdir
+000000000000043a exec
+000000000000040a wait
+000000000000041a read
+0000000000000452 unlink
+0000000000000000 wc
+00000000000003a8 memcmp
+00000000000003fa fork
+0000000000000c28 __BSS_END__
+000000000000048a sbrk
+000000000000049a uptime
+0000000000000a09 __bss_start
+0000000000000208 memset
+00000000000000fe main
+00000000000004ca timeout
+00000000000001b2 strcmp
+000000000000047a dup
+0000000000000a18 buf
+0000000000000a09 __DATA_BEGIN__
+00000000000002c2 stat
+0000000000000a09 _edata
+00000000000004a2 setp
+0000000000000c28 _end
+0000000000000462 link
+0000000000000402 exit
+0000000000000308 atoi
+00000000000001de strlen
+0000000000000442 open
+00000000000004ba semup
+000000000000022a strchr
+000000000000046a mkdir
+000000000000042a close
+00000000000007e2 free
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/zombie.asm os-workshop/user/zombie.asm
--- xv6-riscv/user/zombie.asm	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/zombie.asm	2022-05-28 22:34:38.000000000 -0300
@@ -0,0 +1,1352 @@
+
+user/_zombie:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <main>:
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(void)
+{
+   0:	1141                	addi	sp,sp,-16
+   2:	e406                	sd	ra,8(sp)
+   4:	e022                	sd	s0,0(sp)
+   6:	0800                	addi	s0,sp,16
+  if(fork() > 0)
+   8:	00000097          	auipc	ra,0x0
+   c:	286080e7          	jalr	646(ra) # 28e <fork>
+  10:	00a04763          	bgtz	a0,1e <main+0x1e>
+    sleep(5);  // Let child exit before parent.
+  exit(0);
+  14:	4501                	li	a0,0
+  16:	00000097          	auipc	ra,0x0
+  1a:	280080e7          	jalr	640(ra) # 296 <exit>
+    sleep(5);  // Let child exit before parent.
+  1e:	4515                	li	a0,5
+  20:	00000097          	auipc	ra,0x0
+  24:	306080e7          	jalr	774(ra) # 326 <sleep>
+  28:	b7f5                	j	14 <main+0x14>
+
+000000000000002a <strcpy>:
+#include "kernel/fcntl.h"
+#include "user/user.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  2a:	1141                	addi	sp,sp,-16
+  2c:	e422                	sd	s0,8(sp)
+  2e:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  30:	87aa                	mv	a5,a0
+  32:	0585                	addi	a1,a1,1
+  34:	0785                	addi	a5,a5,1
+  36:	fff5c703          	lbu	a4,-1(a1)
+  3a:	fee78fa3          	sb	a4,-1(a5)
+  3e:	fb75                	bnez	a4,32 <strcpy+0x8>
+    ;
+  return os;
+}
+  40:	6422                	ld	s0,8(sp)
+  42:	0141                	addi	sp,sp,16
+  44:	8082                	ret
+
+0000000000000046 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  46:	1141                	addi	sp,sp,-16
+  48:	e422                	sd	s0,8(sp)
+  4a:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+  4c:	00054783          	lbu	a5,0(a0)
+  50:	cb91                	beqz	a5,64 <strcmp+0x1e>
+  52:	0005c703          	lbu	a4,0(a1)
+  56:	00f71763          	bne	a4,a5,64 <strcmp+0x1e>
+    p++, q++;
+  5a:	0505                	addi	a0,a0,1
+  5c:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+  5e:	00054783          	lbu	a5,0(a0)
+  62:	fbe5                	bnez	a5,52 <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+  64:	0005c503          	lbu	a0,0(a1)
+}
+  68:	40a7853b          	subw	a0,a5,a0
+  6c:	6422                	ld	s0,8(sp)
+  6e:	0141                	addi	sp,sp,16
+  70:	8082                	ret
+
+0000000000000072 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  72:	1141                	addi	sp,sp,-16
+  74:	e422                	sd	s0,8(sp)
+  76:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+  78:	00054783          	lbu	a5,0(a0)
+  7c:	cf91                	beqz	a5,98 <strlen+0x26>
+  7e:	0505                	addi	a0,a0,1
+  80:	87aa                	mv	a5,a0
+  82:	4685                	li	a3,1
+  84:	9e89                	subw	a3,a3,a0
+  86:	00f6853b          	addw	a0,a3,a5
+  8a:	0785                	addi	a5,a5,1
+  8c:	fff7c703          	lbu	a4,-1(a5)
+  90:	fb7d                	bnez	a4,86 <strlen+0x14>
+    ;
+  return n;
+}
+  92:	6422                	ld	s0,8(sp)
+  94:	0141                	addi	sp,sp,16
+  96:	8082                	ret
+  for(n = 0; s[n]; n++)
+  98:	4501                	li	a0,0
+  9a:	bfe5                	j	92 <strlen+0x20>
+
+000000000000009c <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  9c:	1141                	addi	sp,sp,-16
+  9e:	e422                	sd	s0,8(sp)
+  a0:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+  a2:	ca19                	beqz	a2,b8 <memset+0x1c>
+  a4:	87aa                	mv	a5,a0
+  a6:	1602                	slli	a2,a2,0x20
+  a8:	9201                	srli	a2,a2,0x20
+  aa:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+  ae:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+  b2:	0785                	addi	a5,a5,1
+  b4:	fee79de3          	bne	a5,a4,ae <memset+0x12>
+  }
+  return dst;
+}
+  b8:	6422                	ld	s0,8(sp)
+  ba:	0141                	addi	sp,sp,16
+  bc:	8082                	ret
+
+00000000000000be <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+  be:	1141                	addi	sp,sp,-16
+  c0:	e422                	sd	s0,8(sp)
+  c2:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+  c4:	00054783          	lbu	a5,0(a0)
+  c8:	cb99                	beqz	a5,de <strchr+0x20>
+    if(*s == c)
+  ca:	00f58763          	beq	a1,a5,d8 <strchr+0x1a>
+  for(; *s; s++)
+  ce:	0505                	addi	a0,a0,1
+  d0:	00054783          	lbu	a5,0(a0)
+  d4:	fbfd                	bnez	a5,ca <strchr+0xc>
+      return (char*)s;
+  return 0;
+  d6:	4501                	li	a0,0
+}
+  d8:	6422                	ld	s0,8(sp)
+  da:	0141                	addi	sp,sp,16
+  dc:	8082                	ret
+  return 0;
+  de:	4501                	li	a0,0
+  e0:	bfe5                	j	d8 <strchr+0x1a>
+
+00000000000000e2 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+  e2:	711d                	addi	sp,sp,-96
+  e4:	ec86                	sd	ra,88(sp)
+  e6:	e8a2                	sd	s0,80(sp)
+  e8:	e4a6                	sd	s1,72(sp)
+  ea:	e0ca                	sd	s2,64(sp)
+  ec:	fc4e                	sd	s3,56(sp)
+  ee:	f852                	sd	s4,48(sp)
+  f0:	f456                	sd	s5,40(sp)
+  f2:	f05a                	sd	s6,32(sp)
+  f4:	ec5e                	sd	s7,24(sp)
+  f6:	1080                	addi	s0,sp,96
+  f8:	8baa                	mv	s7,a0
+  fa:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+  fc:	892a                	mv	s2,a0
+  fe:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+ 100:	4aa9                	li	s5,10
+ 102:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+ 104:	89a6                	mv	s3,s1
+ 106:	2485                	addiw	s1,s1,1
+ 108:	0344d863          	bge	s1,s4,138 <gets+0x56>
+    cc = read(0, &c, 1);
+ 10c:	4605                	li	a2,1
+ 10e:	faf40593          	addi	a1,s0,-81
+ 112:	4501                	li	a0,0
+ 114:	00000097          	auipc	ra,0x0
+ 118:	19a080e7          	jalr	410(ra) # 2ae <read>
+    if(cc < 1)
+ 11c:	00a05e63          	blez	a0,138 <gets+0x56>
+    buf[i++] = c;
+ 120:	faf44783          	lbu	a5,-81(s0)
+ 124:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+ 128:	01578763          	beq	a5,s5,136 <gets+0x54>
+ 12c:	0905                	addi	s2,s2,1
+ 12e:	fd679be3          	bne	a5,s6,104 <gets+0x22>
+  for(i=0; i+1 < max; ){
+ 132:	89a6                	mv	s3,s1
+ 134:	a011                	j	138 <gets+0x56>
+ 136:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+ 138:	99de                	add	s3,s3,s7
+ 13a:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+ 13e:	855e                	mv	a0,s7
+ 140:	60e6                	ld	ra,88(sp)
+ 142:	6446                	ld	s0,80(sp)
+ 144:	64a6                	ld	s1,72(sp)
+ 146:	6906                	ld	s2,64(sp)
+ 148:	79e2                	ld	s3,56(sp)
+ 14a:	7a42                	ld	s4,48(sp)
+ 14c:	7aa2                	ld	s5,40(sp)
+ 14e:	7b02                	ld	s6,32(sp)
+ 150:	6be2                	ld	s7,24(sp)
+ 152:	6125                	addi	sp,sp,96
+ 154:	8082                	ret
+
+0000000000000156 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 156:	1101                	addi	sp,sp,-32
+ 158:	ec06                	sd	ra,24(sp)
+ 15a:	e822                	sd	s0,16(sp)
+ 15c:	e426                	sd	s1,8(sp)
+ 15e:	e04a                	sd	s2,0(sp)
+ 160:	1000                	addi	s0,sp,32
+ 162:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 164:	4581                	li	a1,0
+ 166:	00000097          	auipc	ra,0x0
+ 16a:	170080e7          	jalr	368(ra) # 2d6 <open>
+  if(fd < 0)
+ 16e:	02054563          	bltz	a0,198 <stat+0x42>
+ 172:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+ 174:	85ca                	mv	a1,s2
+ 176:	00000097          	auipc	ra,0x0
+ 17a:	178080e7          	jalr	376(ra) # 2ee <fstat>
+ 17e:	892a                	mv	s2,a0
+  close(fd);
+ 180:	8526                	mv	a0,s1
+ 182:	00000097          	auipc	ra,0x0
+ 186:	13c080e7          	jalr	316(ra) # 2be <close>
+  return r;
+}
+ 18a:	854a                	mv	a0,s2
+ 18c:	60e2                	ld	ra,24(sp)
+ 18e:	6442                	ld	s0,16(sp)
+ 190:	64a2                	ld	s1,8(sp)
+ 192:	6902                	ld	s2,0(sp)
+ 194:	6105                	addi	sp,sp,32
+ 196:	8082                	ret
+    return -1;
+ 198:	597d                	li	s2,-1
+ 19a:	bfc5                	j	18a <stat+0x34>
+
+000000000000019c <atoi>:
+
+int
+atoi(const char *s)
+{
+ 19c:	1141                	addi	sp,sp,-16
+ 19e:	e422                	sd	s0,8(sp)
+ 1a0:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 1a2:	00054683          	lbu	a3,0(a0)
+ 1a6:	fd06879b          	addiw	a5,a3,-48
+ 1aa:	0ff7f793          	zext.b	a5,a5
+ 1ae:	4625                	li	a2,9
+ 1b0:	02f66863          	bltu	a2,a5,1e0 <atoi+0x44>
+ 1b4:	872a                	mv	a4,a0
+  n = 0;
+ 1b6:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+ 1b8:	0705                	addi	a4,a4,1
+ 1ba:	0025179b          	slliw	a5,a0,0x2
+ 1be:	9fa9                	addw	a5,a5,a0
+ 1c0:	0017979b          	slliw	a5,a5,0x1
+ 1c4:	9fb5                	addw	a5,a5,a3
+ 1c6:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+ 1ca:	00074683          	lbu	a3,0(a4)
+ 1ce:	fd06879b          	addiw	a5,a3,-48
+ 1d2:	0ff7f793          	zext.b	a5,a5
+ 1d6:	fef671e3          	bgeu	a2,a5,1b8 <atoi+0x1c>
+  return n;
+}
+ 1da:	6422                	ld	s0,8(sp)
+ 1dc:	0141                	addi	sp,sp,16
+ 1de:	8082                	ret
+  n = 0;
+ 1e0:	4501                	li	a0,0
+ 1e2:	bfe5                	j	1da <atoi+0x3e>
+
+00000000000001e4 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 1e4:	1141                	addi	sp,sp,-16
+ 1e6:	e422                	sd	s0,8(sp)
+ 1e8:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+ 1ea:	02b57463          	bgeu	a0,a1,212 <memmove+0x2e>
+    while(n-- > 0)
+ 1ee:	00c05f63          	blez	a2,20c <memmove+0x28>
+ 1f2:	1602                	slli	a2,a2,0x20
+ 1f4:	9201                	srli	a2,a2,0x20
+ 1f6:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+ 1fa:	872a                	mv	a4,a0
+      *dst++ = *src++;
+ 1fc:	0585                	addi	a1,a1,1
+ 1fe:	0705                	addi	a4,a4,1
+ 200:	fff5c683          	lbu	a3,-1(a1)
+ 204:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+ 208:	fee79ae3          	bne	a5,a4,1fc <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+ 20c:	6422                	ld	s0,8(sp)
+ 20e:	0141                	addi	sp,sp,16
+ 210:	8082                	ret
+    dst += n;
+ 212:	00c50733          	add	a4,a0,a2
+    src += n;
+ 216:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+ 218:	fec05ae3          	blez	a2,20c <memmove+0x28>
+ 21c:	fff6079b          	addiw	a5,a2,-1
+ 220:	1782                	slli	a5,a5,0x20
+ 222:	9381                	srli	a5,a5,0x20
+ 224:	fff7c793          	not	a5,a5
+ 228:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+ 22a:	15fd                	addi	a1,a1,-1
+ 22c:	177d                	addi	a4,a4,-1
+ 22e:	0005c683          	lbu	a3,0(a1)
+ 232:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+ 236:	fee79ae3          	bne	a5,a4,22a <memmove+0x46>
+ 23a:	bfc9                	j	20c <memmove+0x28>
+
+000000000000023c <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+ 23c:	1141                	addi	sp,sp,-16
+ 23e:	e422                	sd	s0,8(sp)
+ 240:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+ 242:	ca05                	beqz	a2,272 <memcmp+0x36>
+ 244:	fff6069b          	addiw	a3,a2,-1
+ 248:	1682                	slli	a3,a3,0x20
+ 24a:	9281                	srli	a3,a3,0x20
+ 24c:	0685                	addi	a3,a3,1
+ 24e:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+ 250:	00054783          	lbu	a5,0(a0)
+ 254:	0005c703          	lbu	a4,0(a1)
+ 258:	00e79863          	bne	a5,a4,268 <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+ 25c:	0505                	addi	a0,a0,1
+    p2++;
+ 25e:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+ 260:	fed518e3          	bne	a0,a3,250 <memcmp+0x14>
+  }
+  return 0;
+ 264:	4501                	li	a0,0
+ 266:	a019                	j	26c <memcmp+0x30>
+      return *p1 - *p2;
+ 268:	40e7853b          	subw	a0,a5,a4
+}
+ 26c:	6422                	ld	s0,8(sp)
+ 26e:	0141                	addi	sp,sp,16
+ 270:	8082                	ret
+  return 0;
+ 272:	4501                	li	a0,0
+ 274:	bfe5                	j	26c <memcmp+0x30>
+
+0000000000000276 <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+ 276:	1141                	addi	sp,sp,-16
+ 278:	e406                	sd	ra,8(sp)
+ 27a:	e022                	sd	s0,0(sp)
+ 27c:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+ 27e:	00000097          	auipc	ra,0x0
+ 282:	f66080e7          	jalr	-154(ra) # 1e4 <memmove>
+}
+ 286:	60a2                	ld	ra,8(sp)
+ 288:	6402                	ld	s0,0(sp)
+ 28a:	0141                	addi	sp,sp,16
+ 28c:	8082                	ret
+
+000000000000028e <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ 28e:	4885                	li	a7,1
+ ecall
+ 290:	00000073          	ecall
+ ret
+ 294:	8082                	ret
+
+0000000000000296 <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+ 296:	4889                	li	a7,2
+ ecall
+ 298:	00000073          	ecall
+ ret
+ 29c:	8082                	ret
+
+000000000000029e <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+ 29e:	488d                	li	a7,3
+ ecall
+ 2a0:	00000073          	ecall
+ ret
+ 2a4:	8082                	ret
+
+00000000000002a6 <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ 2a6:	4891                	li	a7,4
+ ecall
+ 2a8:	00000073          	ecall
+ ret
+ 2ac:	8082                	ret
+
+00000000000002ae <read>:
+.global read
+read:
+ li a7, SYS_read
+ 2ae:	4895                	li	a7,5
+ ecall
+ 2b0:	00000073          	ecall
+ ret
+ 2b4:	8082                	ret
+
+00000000000002b6 <write>:
+.global write
+write:
+ li a7, SYS_write
+ 2b6:	48c1                	li	a7,16
+ ecall
+ 2b8:	00000073          	ecall
+ ret
+ 2bc:	8082                	ret
+
+00000000000002be <close>:
+.global close
+close:
+ li a7, SYS_close
+ 2be:	48d5                	li	a7,21
+ ecall
+ 2c0:	00000073          	ecall
+ ret
+ 2c4:	8082                	ret
+
+00000000000002c6 <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+ 2c6:	4899                	li	a7,6
+ ecall
+ 2c8:	00000073          	ecall
+ ret
+ 2cc:	8082                	ret
+
+00000000000002ce <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+ 2ce:	489d                	li	a7,7
+ ecall
+ 2d0:	00000073          	ecall
+ ret
+ 2d4:	8082                	ret
+
+00000000000002d6 <open>:
+.global open
+open:
+ li a7, SYS_open
+ 2d6:	48bd                	li	a7,15
+ ecall
+ 2d8:	00000073          	ecall
+ ret
+ 2dc:	8082                	ret
+
+00000000000002de <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ 2de:	48c5                	li	a7,17
+ ecall
+ 2e0:	00000073          	ecall
+ ret
+ 2e4:	8082                	ret
+
+00000000000002e6 <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ 2e6:	48c9                	li	a7,18
+ ecall
+ 2e8:	00000073          	ecall
+ ret
+ 2ec:	8082                	ret
+
+00000000000002ee <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ 2ee:	48a1                	li	a7,8
+ ecall
+ 2f0:	00000073          	ecall
+ ret
+ 2f4:	8082                	ret
+
+00000000000002f6 <link>:
+.global link
+link:
+ li a7, SYS_link
+ 2f6:	48cd                	li	a7,19
+ ecall
+ 2f8:	00000073          	ecall
+ ret
+ 2fc:	8082                	ret
+
+00000000000002fe <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ 2fe:	48d1                	li	a7,20
+ ecall
+ 300:	00000073          	ecall
+ ret
+ 304:	8082                	ret
+
+0000000000000306 <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ 306:	48a5                	li	a7,9
+ ecall
+ 308:	00000073          	ecall
+ ret
+ 30c:	8082                	ret
+
+000000000000030e <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+ 30e:	48a9                	li	a7,10
+ ecall
+ 310:	00000073          	ecall
+ ret
+ 314:	8082                	ret
+
+0000000000000316 <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ 316:	48ad                	li	a7,11
+ ecall
+ 318:	00000073          	ecall
+ ret
+ 31c:	8082                	ret
+
+000000000000031e <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ 31e:	48b1                	li	a7,12
+ ecall
+ 320:	00000073          	ecall
+ ret
+ 324:	8082                	ret
+
+0000000000000326 <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ 326:	48b5                	li	a7,13
+ ecall
+ 328:	00000073          	ecall
+ ret
+ 32c:	8082                	ret
+
+000000000000032e <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ 32e:	48b9                	li	a7,14
+ ecall
+ 330:	00000073          	ecall
+ ret
+ 334:	8082                	ret
+
+0000000000000336 <setp>:
+.global setp
+setp:
+ li a7, SYS_setp
+ 336:	48d9                	li	a7,22
+ ecall
+ 338:	00000073          	ecall
+ ret
+ 33c:	8082                	ret
+
+000000000000033e <semget>:
+.global semget
+semget:
+ li a7, SYS_semget
+ 33e:	48dd                	li	a7,23
+ ecall
+ 340:	00000073          	ecall
+ ret
+ 344:	8082                	ret
+
+0000000000000346 <semdown>:
+.global semdown
+semdown:
+ li a7, SYS_semdown
+ 346:	48e1                	li	a7,24
+ ecall
+ 348:	00000073          	ecall
+ ret
+ 34c:	8082                	ret
+
+000000000000034e <semup>:
+.global semup
+semup:
+ li a7, SYS_semup
+ 34e:	48e5                	li	a7,25
+ ecall
+ 350:	00000073          	ecall
+ ret
+ 354:	8082                	ret
+
+0000000000000356 <semclose>:
+.global semclose
+semclose:
+ li a7, SYS_semclose
+ 356:	48e9                	li	a7,26
+ ecall
+ 358:	00000073          	ecall
+ ret
+ 35c:	8082                	ret
+
+000000000000035e <timeout>:
+.global timeout
+timeout:
+ li a7, SYS_timeout
+ 35e:	48ed                	li	a7,27
+ ecall
+ 360:	00000073          	ecall
+ ret
+ 364:	8082                	ret
+
+0000000000000366 <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+ 366:	1101                	addi	sp,sp,-32
+ 368:	ec06                	sd	ra,24(sp)
+ 36a:	e822                	sd	s0,16(sp)
+ 36c:	1000                	addi	s0,sp,32
+ 36e:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+ 372:	4605                	li	a2,1
+ 374:	fef40593          	addi	a1,s0,-17
+ 378:	00000097          	auipc	ra,0x0
+ 37c:	f3e080e7          	jalr	-194(ra) # 2b6 <write>
+}
+ 380:	60e2                	ld	ra,24(sp)
+ 382:	6442                	ld	s0,16(sp)
+ 384:	6105                	addi	sp,sp,32
+ 386:	8082                	ret
+
+0000000000000388 <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 388:	7139                	addi	sp,sp,-64
+ 38a:	fc06                	sd	ra,56(sp)
+ 38c:	f822                	sd	s0,48(sp)
+ 38e:	f426                	sd	s1,40(sp)
+ 390:	f04a                	sd	s2,32(sp)
+ 392:	ec4e                	sd	s3,24(sp)
+ 394:	0080                	addi	s0,sp,64
+ 396:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 398:	c299                	beqz	a3,39e <printint+0x16>
+ 39a:	0805c963          	bltz	a1,42c <printint+0xa4>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 39e:	2581                	sext.w	a1,a1
+  neg = 0;
+ 3a0:	4881                	li	a7,0
+ 3a2:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+ 3a6:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+ 3a8:	2601                	sext.w	a2,a2
+ 3aa:	00000517          	auipc	a0,0x0
+ 3ae:	49650513          	addi	a0,a0,1174 # 840 <digits>
+ 3b2:	883a                	mv	a6,a4
+ 3b4:	2705                	addiw	a4,a4,1
+ 3b6:	02c5f7bb          	remuw	a5,a1,a2
+ 3ba:	1782                	slli	a5,a5,0x20
+ 3bc:	9381                	srli	a5,a5,0x20
+ 3be:	97aa                	add	a5,a5,a0
+ 3c0:	0007c783          	lbu	a5,0(a5)
+ 3c4:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+ 3c8:	0005879b          	sext.w	a5,a1
+ 3cc:	02c5d5bb          	divuw	a1,a1,a2
+ 3d0:	0685                	addi	a3,a3,1
+ 3d2:	fec7f0e3          	bgeu	a5,a2,3b2 <printint+0x2a>
+  if(neg)
+ 3d6:	00088c63          	beqz	a7,3ee <printint+0x66>
+    buf[i++] = '-';
+ 3da:	fd070793          	addi	a5,a4,-48
+ 3de:	00878733          	add	a4,a5,s0
+ 3e2:	02d00793          	li	a5,45
+ 3e6:	fef70823          	sb	a5,-16(a4)
+ 3ea:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+ 3ee:	02e05863          	blez	a4,41e <printint+0x96>
+ 3f2:	fc040793          	addi	a5,s0,-64
+ 3f6:	00e78933          	add	s2,a5,a4
+ 3fa:	fff78993          	addi	s3,a5,-1
+ 3fe:	99ba                	add	s3,s3,a4
+ 400:	377d                	addiw	a4,a4,-1
+ 402:	1702                	slli	a4,a4,0x20
+ 404:	9301                	srli	a4,a4,0x20
+ 406:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+ 40a:	fff94583          	lbu	a1,-1(s2)
+ 40e:	8526                	mv	a0,s1
+ 410:	00000097          	auipc	ra,0x0
+ 414:	f56080e7          	jalr	-170(ra) # 366 <putc>
+  while(--i >= 0)
+ 418:	197d                	addi	s2,s2,-1
+ 41a:	ff3918e3          	bne	s2,s3,40a <printint+0x82>
+}
+ 41e:	70e2                	ld	ra,56(sp)
+ 420:	7442                	ld	s0,48(sp)
+ 422:	74a2                	ld	s1,40(sp)
+ 424:	7902                	ld	s2,32(sp)
+ 426:	69e2                	ld	s3,24(sp)
+ 428:	6121                	addi	sp,sp,64
+ 42a:	8082                	ret
+    x = -xx;
+ 42c:	40b005bb          	negw	a1,a1
+    neg = 1;
+ 430:	4885                	li	a7,1
+    x = -xx;
+ 432:	bf85                	j	3a2 <printint+0x1a>
+
+0000000000000434 <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+ 434:	7119                	addi	sp,sp,-128
+ 436:	fc86                	sd	ra,120(sp)
+ 438:	f8a2                	sd	s0,112(sp)
+ 43a:	f4a6                	sd	s1,104(sp)
+ 43c:	f0ca                	sd	s2,96(sp)
+ 43e:	ecce                	sd	s3,88(sp)
+ 440:	e8d2                	sd	s4,80(sp)
+ 442:	e4d6                	sd	s5,72(sp)
+ 444:	e0da                	sd	s6,64(sp)
+ 446:	fc5e                	sd	s7,56(sp)
+ 448:	f862                	sd	s8,48(sp)
+ 44a:	f466                	sd	s9,40(sp)
+ 44c:	f06a                	sd	s10,32(sp)
+ 44e:	ec6e                	sd	s11,24(sp)
+ 450:	0100                	addi	s0,sp,128
+  char *s;
+  int c, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+ 452:	0005c903          	lbu	s2,0(a1)
+ 456:	18090f63          	beqz	s2,5f4 <vprintf+0x1c0>
+ 45a:	8aaa                	mv	s5,a0
+ 45c:	8b32                	mv	s6,a2
+ 45e:	00158493          	addi	s1,a1,1
+  state = 0;
+ 462:	4981                	li	s3,0
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 464:	02500a13          	li	s4,37
+ 468:	4c55                	li	s8,21
+ 46a:	00000c97          	auipc	s9,0x0
+ 46e:	37ec8c93          	addi	s9,s9,894 # 7e8 <malloc+0xf0>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c == 's'){
+        s = va_arg(ap, char*);
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 472:	02800d93          	li	s11,40
+  putc(fd, 'x');
+ 476:	4d41                	li	s10,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 478:	00000b97          	auipc	s7,0x0
+ 47c:	3c8b8b93          	addi	s7,s7,968 # 840 <digits>
+ 480:	a839                	j	49e <vprintf+0x6a>
+        putc(fd, c);
+ 482:	85ca                	mv	a1,s2
+ 484:	8556                	mv	a0,s5
+ 486:	00000097          	auipc	ra,0x0
+ 48a:	ee0080e7          	jalr	-288(ra) # 366 <putc>
+ 48e:	a019                	j	494 <vprintf+0x60>
+    } else if(state == '%'){
+ 490:	01498d63          	beq	s3,s4,4aa <vprintf+0x76>
+  for(i = 0; fmt[i]; i++){
+ 494:	0485                	addi	s1,s1,1
+ 496:	fff4c903          	lbu	s2,-1(s1)
+ 49a:	14090d63          	beqz	s2,5f4 <vprintf+0x1c0>
+    if(state == 0){
+ 49e:	fe0999e3          	bnez	s3,490 <vprintf+0x5c>
+      if(c == '%'){
+ 4a2:	ff4910e3          	bne	s2,s4,482 <vprintf+0x4e>
+        state = '%';
+ 4a6:	89d2                	mv	s3,s4
+ 4a8:	b7f5                	j	494 <vprintf+0x60>
+      if(c == 'd'){
+ 4aa:	11490c63          	beq	s2,s4,5c2 <vprintf+0x18e>
+ 4ae:	f9d9079b          	addiw	a5,s2,-99
+ 4b2:	0ff7f793          	zext.b	a5,a5
+ 4b6:	10fc6e63          	bltu	s8,a5,5d2 <vprintf+0x19e>
+ 4ba:	f9d9079b          	addiw	a5,s2,-99
+ 4be:	0ff7f713          	zext.b	a4,a5
+ 4c2:	10ec6863          	bltu	s8,a4,5d2 <vprintf+0x19e>
+ 4c6:	00271793          	slli	a5,a4,0x2
+ 4ca:	97e6                	add	a5,a5,s9
+ 4cc:	439c                	lw	a5,0(a5)
+ 4ce:	97e6                	add	a5,a5,s9
+ 4d0:	8782                	jr	a5
+        printint(fd, va_arg(ap, int), 10, 1);
+ 4d2:	008b0913          	addi	s2,s6,8
+ 4d6:	4685                	li	a3,1
+ 4d8:	4629                	li	a2,10
+ 4da:	000b2583          	lw	a1,0(s6)
+ 4de:	8556                	mv	a0,s5
+ 4e0:	00000097          	auipc	ra,0x0
+ 4e4:	ea8080e7          	jalr	-344(ra) # 388 <printint>
+ 4e8:	8b4a                	mv	s6,s2
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 4ea:	4981                	li	s3,0
+ 4ec:	b765                	j	494 <vprintf+0x60>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 4ee:	008b0913          	addi	s2,s6,8
+ 4f2:	4681                	li	a3,0
+ 4f4:	4629                	li	a2,10
+ 4f6:	000b2583          	lw	a1,0(s6)
+ 4fa:	8556                	mv	a0,s5
+ 4fc:	00000097          	auipc	ra,0x0
+ 500:	e8c080e7          	jalr	-372(ra) # 388 <printint>
+ 504:	8b4a                	mv	s6,s2
+      state = 0;
+ 506:	4981                	li	s3,0
+ 508:	b771                	j	494 <vprintf+0x60>
+        printint(fd, va_arg(ap, int), 16, 0);
+ 50a:	008b0913          	addi	s2,s6,8
+ 50e:	4681                	li	a3,0
+ 510:	866a                	mv	a2,s10
+ 512:	000b2583          	lw	a1,0(s6)
+ 516:	8556                	mv	a0,s5
+ 518:	00000097          	auipc	ra,0x0
+ 51c:	e70080e7          	jalr	-400(ra) # 388 <printint>
+ 520:	8b4a                	mv	s6,s2
+      state = 0;
+ 522:	4981                	li	s3,0
+ 524:	bf85                	j	494 <vprintf+0x60>
+        printptr(fd, va_arg(ap, uint64));
+ 526:	008b0793          	addi	a5,s6,8
+ 52a:	f8f43423          	sd	a5,-120(s0)
+ 52e:	000b3983          	ld	s3,0(s6)
+  putc(fd, '0');
+ 532:	03000593          	li	a1,48
+ 536:	8556                	mv	a0,s5
+ 538:	00000097          	auipc	ra,0x0
+ 53c:	e2e080e7          	jalr	-466(ra) # 366 <putc>
+  putc(fd, 'x');
+ 540:	07800593          	li	a1,120
+ 544:	8556                	mv	a0,s5
+ 546:	00000097          	auipc	ra,0x0
+ 54a:	e20080e7          	jalr	-480(ra) # 366 <putc>
+ 54e:	896a                	mv	s2,s10
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 550:	03c9d793          	srli	a5,s3,0x3c
+ 554:	97de                	add	a5,a5,s7
+ 556:	0007c583          	lbu	a1,0(a5)
+ 55a:	8556                	mv	a0,s5
+ 55c:	00000097          	auipc	ra,0x0
+ 560:	e0a080e7          	jalr	-502(ra) # 366 <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+ 564:	0992                	slli	s3,s3,0x4
+ 566:	397d                	addiw	s2,s2,-1
+ 568:	fe0914e3          	bnez	s2,550 <vprintf+0x11c>
+        printptr(fd, va_arg(ap, uint64));
+ 56c:	f8843b03          	ld	s6,-120(s0)
+      state = 0;
+ 570:	4981                	li	s3,0
+ 572:	b70d                	j	494 <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 574:	008b0913          	addi	s2,s6,8
+ 578:	000b3983          	ld	s3,0(s6)
+        if(s == 0)
+ 57c:	02098163          	beqz	s3,59e <vprintf+0x16a>
+        while(*s != 0){
+ 580:	0009c583          	lbu	a1,0(s3)
+ 584:	c5ad                	beqz	a1,5ee <vprintf+0x1ba>
+          putc(fd, *s);
+ 586:	8556                	mv	a0,s5
+ 588:	00000097          	auipc	ra,0x0
+ 58c:	dde080e7          	jalr	-546(ra) # 366 <putc>
+          s++;
+ 590:	0985                	addi	s3,s3,1
+        while(*s != 0){
+ 592:	0009c583          	lbu	a1,0(s3)
+ 596:	f9e5                	bnez	a1,586 <vprintf+0x152>
+        s = va_arg(ap, char*);
+ 598:	8b4a                	mv	s6,s2
+      state = 0;
+ 59a:	4981                	li	s3,0
+ 59c:	bde5                	j	494 <vprintf+0x60>
+          s = "(null)";
+ 59e:	00000997          	auipc	s3,0x0
+ 5a2:	24298993          	addi	s3,s3,578 # 7e0 <malloc+0xe8>
+        while(*s != 0){
+ 5a6:	85ee                	mv	a1,s11
+ 5a8:	bff9                	j	586 <vprintf+0x152>
+        putc(fd, va_arg(ap, uint));
+ 5aa:	008b0913          	addi	s2,s6,8
+ 5ae:	000b4583          	lbu	a1,0(s6)
+ 5b2:	8556                	mv	a0,s5
+ 5b4:	00000097          	auipc	ra,0x0
+ 5b8:	db2080e7          	jalr	-590(ra) # 366 <putc>
+ 5bc:	8b4a                	mv	s6,s2
+      state = 0;
+ 5be:	4981                	li	s3,0
+ 5c0:	bdd1                	j	494 <vprintf+0x60>
+        putc(fd, c);
+ 5c2:	85d2                	mv	a1,s4
+ 5c4:	8556                	mv	a0,s5
+ 5c6:	00000097          	auipc	ra,0x0
+ 5ca:	da0080e7          	jalr	-608(ra) # 366 <putc>
+      state = 0;
+ 5ce:	4981                	li	s3,0
+ 5d0:	b5d1                	j	494 <vprintf+0x60>
+        putc(fd, '%');
+ 5d2:	85d2                	mv	a1,s4
+ 5d4:	8556                	mv	a0,s5
+ 5d6:	00000097          	auipc	ra,0x0
+ 5da:	d90080e7          	jalr	-624(ra) # 366 <putc>
+        putc(fd, c);
+ 5de:	85ca                	mv	a1,s2
+ 5e0:	8556                	mv	a0,s5
+ 5e2:	00000097          	auipc	ra,0x0
+ 5e6:	d84080e7          	jalr	-636(ra) # 366 <putc>
+      state = 0;
+ 5ea:	4981                	li	s3,0
+ 5ec:	b565                	j	494 <vprintf+0x60>
+        s = va_arg(ap, char*);
+ 5ee:	8b4a                	mv	s6,s2
+      state = 0;
+ 5f0:	4981                	li	s3,0
+ 5f2:	b54d                	j	494 <vprintf+0x60>
+    }
+  }
+}
+ 5f4:	70e6                	ld	ra,120(sp)
+ 5f6:	7446                	ld	s0,112(sp)
+ 5f8:	74a6                	ld	s1,104(sp)
+ 5fa:	7906                	ld	s2,96(sp)
+ 5fc:	69e6                	ld	s3,88(sp)
+ 5fe:	6a46                	ld	s4,80(sp)
+ 600:	6aa6                	ld	s5,72(sp)
+ 602:	6b06                	ld	s6,64(sp)
+ 604:	7be2                	ld	s7,56(sp)
+ 606:	7c42                	ld	s8,48(sp)
+ 608:	7ca2                	ld	s9,40(sp)
+ 60a:	7d02                	ld	s10,32(sp)
+ 60c:	6de2                	ld	s11,24(sp)
+ 60e:	6109                	addi	sp,sp,128
+ 610:	8082                	ret
+
+0000000000000612 <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+ 612:	715d                	addi	sp,sp,-80
+ 614:	ec06                	sd	ra,24(sp)
+ 616:	e822                	sd	s0,16(sp)
+ 618:	1000                	addi	s0,sp,32
+ 61a:	e010                	sd	a2,0(s0)
+ 61c:	e414                	sd	a3,8(s0)
+ 61e:	e818                	sd	a4,16(s0)
+ 620:	ec1c                	sd	a5,24(s0)
+ 622:	03043023          	sd	a6,32(s0)
+ 626:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 62a:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+ 62e:	8622                	mv	a2,s0
+ 630:	00000097          	auipc	ra,0x0
+ 634:	e04080e7          	jalr	-508(ra) # 434 <vprintf>
+}
+ 638:	60e2                	ld	ra,24(sp)
+ 63a:	6442                	ld	s0,16(sp)
+ 63c:	6161                	addi	sp,sp,80
+ 63e:	8082                	ret
+
+0000000000000640 <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+ 640:	711d                	addi	sp,sp,-96
+ 642:	ec06                	sd	ra,24(sp)
+ 644:	e822                	sd	s0,16(sp)
+ 646:	1000                	addi	s0,sp,32
+ 648:	e40c                	sd	a1,8(s0)
+ 64a:	e810                	sd	a2,16(s0)
+ 64c:	ec14                	sd	a3,24(s0)
+ 64e:	f018                	sd	a4,32(s0)
+ 650:	f41c                	sd	a5,40(s0)
+ 652:	03043823          	sd	a6,48(s0)
+ 656:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 65a:	00840613          	addi	a2,s0,8
+ 65e:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+ 662:	85aa                	mv	a1,a0
+ 664:	4505                	li	a0,1
+ 666:	00000097          	auipc	ra,0x0
+ 66a:	dce080e7          	jalr	-562(ra) # 434 <vprintf>
+}
+ 66e:	60e2                	ld	ra,24(sp)
+ 670:	6442                	ld	s0,16(sp)
+ 672:	6125                	addi	sp,sp,96
+ 674:	8082                	ret
+
+0000000000000676 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 676:	1141                	addi	sp,sp,-16
+ 678:	e422                	sd	s0,8(sp)
+ 67a:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 67c:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 680:	00000797          	auipc	a5,0x0
+ 684:	1d87b783          	ld	a5,472(a5) # 858 <freep>
+ 688:	a02d                	j	6b2 <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 68a:	4618                	lw	a4,8(a2)
+ 68c:	9f2d                	addw	a4,a4,a1
+ 68e:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 692:	6398                	ld	a4,0(a5)
+ 694:	6310                	ld	a2,0(a4)
+ 696:	a83d                	j	6d4 <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 698:	ff852703          	lw	a4,-8(a0)
+ 69c:	9f31                	addw	a4,a4,a2
+ 69e:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+ 6a0:	ff053683          	ld	a3,-16(a0)
+ 6a4:	a091                	j	6e8 <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6a6:	6398                	ld	a4,0(a5)
+ 6a8:	00e7e463          	bltu	a5,a4,6b0 <free+0x3a>
+ 6ac:	00e6ea63          	bltu	a3,a4,6c0 <free+0x4a>
+{
+ 6b0:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6b2:	fed7fae3          	bgeu	a5,a3,6a6 <free+0x30>
+ 6b6:	6398                	ld	a4,0(a5)
+ 6b8:	00e6e463          	bltu	a3,a4,6c0 <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6bc:	fee7eae3          	bltu	a5,a4,6b0 <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+ 6c0:	ff852583          	lw	a1,-8(a0)
+ 6c4:	6390                	ld	a2,0(a5)
+ 6c6:	02059813          	slli	a6,a1,0x20
+ 6ca:	01c85713          	srli	a4,a6,0x1c
+ 6ce:	9736                	add	a4,a4,a3
+ 6d0:	fae60de3          	beq	a2,a4,68a <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6d4:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+ 6d8:	4790                	lw	a2,8(a5)
+ 6da:	02061593          	slli	a1,a2,0x20
+ 6de:	01c5d713          	srli	a4,a1,0x1c
+ 6e2:	973e                	add	a4,a4,a5
+ 6e4:	fae68ae3          	beq	a3,a4,698 <free+0x22>
+    p->s.ptr = bp->s.ptr;
+ 6e8:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 6ea:	00000717          	auipc	a4,0x0
+ 6ee:	16f73723          	sd	a5,366(a4) # 858 <freep>
+}
+ 6f2:	6422                	ld	s0,8(sp)
+ 6f4:	0141                	addi	sp,sp,16
+ 6f6:	8082                	ret
+
+00000000000006f8 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6f8:	7139                	addi	sp,sp,-64
+ 6fa:	fc06                	sd	ra,56(sp)
+ 6fc:	f822                	sd	s0,48(sp)
+ 6fe:	f426                	sd	s1,40(sp)
+ 700:	f04a                	sd	s2,32(sp)
+ 702:	ec4e                	sd	s3,24(sp)
+ 704:	e852                	sd	s4,16(sp)
+ 706:	e456                	sd	s5,8(sp)
+ 708:	e05a                	sd	s6,0(sp)
+ 70a:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 70c:	02051493          	slli	s1,a0,0x20
+ 710:	9081                	srli	s1,s1,0x20
+ 712:	04bd                	addi	s1,s1,15
+ 714:	8091                	srli	s1,s1,0x4
+ 716:	0014899b          	addiw	s3,s1,1
+ 71a:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+ 71c:	00000517          	auipc	a0,0x0
+ 720:	13c53503          	ld	a0,316(a0) # 858 <freep>
+ 724:	c515                	beqz	a0,750 <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 726:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 728:	4798                	lw	a4,8(a5)
+ 72a:	02977f63          	bgeu	a4,s1,768 <malloc+0x70>
+ 72e:	8a4e                	mv	s4,s3
+ 730:	0009871b          	sext.w	a4,s3
+ 734:	6685                	lui	a3,0x1
+ 736:	00d77363          	bgeu	a4,a3,73c <malloc+0x44>
+ 73a:	6a05                	lui	s4,0x1
+ 73c:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+ 740:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 744:	00000917          	auipc	s2,0x0
+ 748:	11490913          	addi	s2,s2,276 # 858 <freep>
+  if(p == (char*)-1)
+ 74c:	5afd                	li	s5,-1
+ 74e:	a895                	j	7c2 <malloc+0xca>
+    base.s.ptr = freep = prevp = &base;
+ 750:	00000797          	auipc	a5,0x0
+ 754:	11078793          	addi	a5,a5,272 # 860 <base>
+ 758:	00000717          	auipc	a4,0x0
+ 75c:	10f73023          	sd	a5,256(a4) # 858 <freep>
+ 760:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+ 762:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+ 766:	b7e1                	j	72e <malloc+0x36>
+      if(p->s.size == nunits)
+ 768:	02e48c63          	beq	s1,a4,7a0 <malloc+0xa8>
+        p->s.size -= nunits;
+ 76c:	4137073b          	subw	a4,a4,s3
+ 770:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+ 772:	02071693          	slli	a3,a4,0x20
+ 776:	01c6d713          	srli	a4,a3,0x1c
+ 77a:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+ 77c:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+ 780:	00000717          	auipc	a4,0x0
+ 784:	0ca73c23          	sd	a0,216(a4) # 858 <freep>
+      return (void*)(p + 1);
+ 788:	01078513          	addi	a0,a5,16
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ 78c:	70e2                	ld	ra,56(sp)
+ 78e:	7442                	ld	s0,48(sp)
+ 790:	74a2                	ld	s1,40(sp)
+ 792:	7902                	ld	s2,32(sp)
+ 794:	69e2                	ld	s3,24(sp)
+ 796:	6a42                	ld	s4,16(sp)
+ 798:	6aa2                	ld	s5,8(sp)
+ 79a:	6b02                	ld	s6,0(sp)
+ 79c:	6121                	addi	sp,sp,64
+ 79e:	8082                	ret
+        prevp->s.ptr = p->s.ptr;
+ 7a0:	6398                	ld	a4,0(a5)
+ 7a2:	e118                	sd	a4,0(a0)
+ 7a4:	bff1                	j	780 <malloc+0x88>
+  hp->s.size = nu;
+ 7a6:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+ 7aa:	0541                	addi	a0,a0,16
+ 7ac:	00000097          	auipc	ra,0x0
+ 7b0:	eca080e7          	jalr	-310(ra) # 676 <free>
+  return freep;
+ 7b4:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+ 7b8:	d971                	beqz	a0,78c <malloc+0x94>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7ba:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 7bc:	4798                	lw	a4,8(a5)
+ 7be:	fa9775e3          	bgeu	a4,s1,768 <malloc+0x70>
+    if(p == freep)
+ 7c2:	00093703          	ld	a4,0(s2)
+ 7c6:	853e                	mv	a0,a5
+ 7c8:	fef719e3          	bne	a4,a5,7ba <malloc+0xc2>
+  p = sbrk(nu * sizeof(Header));
+ 7cc:	8552                	mv	a0,s4
+ 7ce:	00000097          	auipc	ra,0x0
+ 7d2:	b50080e7          	jalr	-1200(ra) # 31e <sbrk>
+  if(p == (char*)-1)
+ 7d6:	fd5518e3          	bne	a0,s5,7a6 <malloc+0xae>
+        return 0;
+ 7da:	4501                	li	a0,0
+ 7dc:	bf45                	j	78c <malloc+0x94>
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/zombie.d os-workshop/user/zombie.d
--- xv6-riscv/user/zombie.d	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/zombie.d	2022-05-28 22:34:37.000000000 -0300
@@ -0,0 +1 @@
+user/zombie.o: user/zombie.c kernel/types.h kernel/stat.h user/user.h
Binary files xv6-riscv/user/zombie.o and os-workshop/user/zombie.o differ
diff --exclude=.git --exclude=.github -rupN xv6-riscv/user/zombie.sym os-workshop/user/zombie.sym
--- xv6-riscv/user/zombie.sym	1969-12-31 21:00:00.000000000 -0300
+++ os-workshop/user/zombie.sym	2022-05-28 22:34:38.000000000 -0300
@@ -0,0 +1,76 @@
+0000000000000000 .text
+00000000000007e0 .rodata
+0000000000000858 .sbss
+0000000000000860 .bss
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_aranges
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_line
+0000000000000000 .debug_frame
+0000000000000000 .debug_str
+0000000000000000 .debug_line_str
+0000000000000000 .debug_loclists
+0000000000000000 .debug_rnglists
+0000000000000000 zombie.c
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+0000000000000366 putc
+0000000000000388 printint
+0000000000000840 digits
+0000000000000000 umalloc.c
+0000000000000858 freep
+0000000000000860 base
+000000000000002a strcpy
+0000000000000640 printf
+0000000000001051 __global_pointer$
+00000000000001e4 memmove
+00000000000002de mknod
+0000000000000346 semdown
+00000000000000e2 gets
+0000000000000851 __SDATA_BEGIN__
+000000000000033e semget
+0000000000000316 getpid
+0000000000000276 memcpy
+00000000000006f8 malloc
+0000000000000356 semclose
+0000000000000326 sleep
+00000000000002a6 pipe
+00000000000002b6 write
+00000000000002ee fstat
+0000000000000612 fprintf
+00000000000002c6 kill
+0000000000000434 vprintf
+0000000000000306 chdir
+00000000000002ce exec
+000000000000029e wait
+00000000000002ae read
+00000000000002e6 unlink
+000000000000023c memcmp
+000000000000028e fork
+0000000000000870 __BSS_END__
+000000000000031e sbrk
+000000000000032e uptime
+0000000000000851 __bss_start
+000000000000009c memset
+0000000000000000 main
+000000000000035e timeout
+0000000000000046 strcmp
+000000000000030e dup
+0000000000000851 __DATA_BEGIN__
+0000000000000156 stat
+0000000000000851 _edata
+0000000000000336 setp
+0000000000000870 _end
+00000000000002f6 link
+0000000000000296 exit
+000000000000019c atoi
+0000000000000072 strlen
+00000000000002d6 open
+000000000000034e semup
+00000000000000be strchr
+00000000000002fe mkdir
+00000000000002be close
+0000000000000676 free
